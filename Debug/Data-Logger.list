
Data-Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a480  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000994  0801a720  0801a720  0002a720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b0b4  0801b0b4  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801b0b4  0801b0b4  0002b0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b0bc  0801b0bc  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b0bc  0801b0bc  0002b0bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b0c0  0801b0c0  0002b0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  24000000  0801b0c4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022b0  240001e0  0801b2a0  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24002490  0801b2a0  00032490  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004a05d  00000000  00000000  0003020a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007b2c  00000000  00000000  0007a267  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002420  00000000  00000000  00081d98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002128  00000000  00000000  000841b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000430f0  00000000  00000000  000862e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00028173  00000000  00000000  000c93d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00178689  00000000  00000000  000f1543  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00269bcc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f80  00000000  00000000  00269c48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801a708 	.word	0x0801a708

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0801a708 	.word	0x0801a708

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <FDCAN_Config>:
#include <myprintf.h>

int FDCAN_Flag = 0;
int CAN_Flag = 0;

void FDCAN_Config(FDCAN_HandleTypeDef *hfdcan){
 8000690:	b580      	push	{r7, lr}
 8000692:	b08c      	sub	sp, #48	; 0x30
 8000694:	af02      	add	r7, sp, #8
 8000696:	6078      	str	r0, [r7, #4]
	FDCAN_FilterTypeDef sFilterConfig;

	  /* Configure Rx filter */
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterIndex = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80006a4:	2301      	movs	r3, #1
 80006a6:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterID1 = 0x321;
 80006a8:	f240 3321 	movw	r3, #801	; 0x321
 80006ac:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterID2 = 0x7FF;
 80006ae:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006b2:	61fb      	str	r3, [r7, #28]
	  if (HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig) == HAL_OK)
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	4619      	mov	r1, r3
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f006 fb80 	bl	8006dc0 <HAL_FDCAN_ConfigFilter>
	  }

	  /* Configure global filter:
	     Filter all remote frames with STD and EXT ID
	     Reject non matching frames with STD ID and EXT ID */
	  if (HAL_FDCAN_ConfigGlobalFilter(hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 80006c0:	2300      	movs	r3, #0
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2300      	movs	r3, #0
 80006c6:	2202      	movs	r2, #2
 80006c8:	2102      	movs	r1, #2
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f006 fbee 	bl	8006eac <HAL_FDCAN_ConfigGlobalFilter>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <FDCAN_Config+0x4a>
	  {
	    Error_Handler();
 80006d6:	f003 fa87 	bl	8003be8 <Error_Handler>
	  }
	if (HAL_FDCAN_Start(hfdcan) != HAL_OK)
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f006 fc36 	bl	8006f4c <HAL_FDCAN_Start>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <FDCAN_Config+0x5a>
	  {
	    Error_Handler();
 80006e6:	f003 fa7f 	bl	8003be8 <Error_Handler>
	  }
	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80006ea:	2200      	movs	r2, #0
 80006ec:	2101      	movs	r1, #1
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f006 fdb6 	bl	8007260 <HAL_FDCAN_ActivateNotification>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <FDCAN_Config+0x6e>
	  {
	    /* Notification Error */
	    Error_Handler();
 80006fa:	f003 fa75 	bl	8003be8 <Error_Handler>
	  }
	HAL_FDCAN_EnableTxDelayCompensation(hfdcan);
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f006 fc01 	bl	8006f06 <HAL_FDCAN_EnableTxDelayCompensation>

}
 8000704:	bf00      	nop
 8000706:	3728      	adds	r7, #40	; 0x28
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan1, uint32_t RxFifo0ITs)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
	if (HAL_FDCAN_GetRxMessage(hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000716:	4b91      	ldr	r3, [pc, #580]	; (800095c <HAL_FDCAN_RxFifo0Callback+0x250>)
 8000718:	4a91      	ldr	r2, [pc, #580]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 800071a:	2140      	movs	r1, #64	; 0x40
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f006 fc41 	bl	8006fa4 <HAL_FDCAN_GetRxMessage>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	f040 8114 	bne.w	8000952 <HAL_FDCAN_RxFifo0Callback+0x246>
			      {
					uint32_t time = HAL_GetTick();
 800072a:	f003 ff45 	bl	80045b8 <HAL_GetTick>
 800072e:	60f8      	str	r0, [r7, #12]
					HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000730:	2101      	movs	r1, #1
 8000732:	488c      	ldr	r0, [pc, #560]	; (8000964 <HAL_FDCAN_RxFifo0Callback+0x258>)
 8000734:	f007 fc7f 	bl	8008036 <HAL_GPIO_TogglePin>
					printf("Packet Acquired!\n");
 8000738:	488b      	ldr	r0, [pc, #556]	; (8000968 <HAL_FDCAN_RxFifo0Callback+0x25c>)
 800073a:	f018 ffc3 	bl	80196c4 <puts>
					if(RxHeader.FDFormat == FDCAN_CLASSIC_CAN){
 800073e:	4b88      	ldr	r3, [pc, #544]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d17f      	bne.n	8000846 <HAL_FDCAN_RxFifo0Callback+0x13a>
						CanFrame.id = RxHeader.Identifier;
 8000746:	4b86      	ldr	r3, [pc, #536]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a88      	ldr	r2, [pc, #544]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 800074c:	6013      	str	r3, [r2, #0]
						switch(RxHeader.DataLength/65536){
 800074e:	4b84      	ldr	r3, [pc, #528]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000750:	68db      	ldr	r3, [r3, #12]
 8000752:	0c1b      	lsrs	r3, r3, #16
 8000754:	3b01      	subs	r3, #1
 8000756:	2b0e      	cmp	r3, #14
 8000758:	d85c      	bhi.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
 800075a:	a201      	add	r2, pc, #4	; (adr r2, 8000760 <HAL_FDCAN_RxFifo0Callback+0x54>)
 800075c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000760:	0800079d 	.word	0x0800079d
 8000764:	080007a5 	.word	0x080007a5
 8000768:	080007ad 	.word	0x080007ad
 800076c:	080007b5 	.word	0x080007b5
 8000770:	080007bd 	.word	0x080007bd
 8000774:	080007c5 	.word	0x080007c5
 8000778:	080007cd 	.word	0x080007cd
 800077c:	080007d5 	.word	0x080007d5
 8000780:	080007dd 	.word	0x080007dd
 8000784:	080007e5 	.word	0x080007e5
 8000788:	080007ed 	.word	0x080007ed
 800078c:	080007f5 	.word	0x080007f5
 8000790:	080007fd 	.word	0x080007fd
 8000794:	08000805 	.word	0x08000805
 8000798:	0800080d 	.word	0x0800080d
							case 1:
								CanFrame.length = 1;
 800079c:	4b73      	ldr	r3, [pc, #460]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 800079e:	2201      	movs	r2, #1
 80007a0:	715a      	strb	r2, [r3, #5]
								break;
 80007a2:	e037      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 2:
								CanFrame.length = 2;
 80007a4:	4b71      	ldr	r3, [pc, #452]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007a6:	2202      	movs	r2, #2
 80007a8:	715a      	strb	r2, [r3, #5]
								break;
 80007aa:	e033      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 3:
								CanFrame.length = 3;
 80007ac:	4b6f      	ldr	r3, [pc, #444]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007ae:	2203      	movs	r2, #3
 80007b0:	715a      	strb	r2, [r3, #5]
								break;
 80007b2:	e02f      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 4:
								CanFrame.length = 4;
 80007b4:	4b6d      	ldr	r3, [pc, #436]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007b6:	2204      	movs	r2, #4
 80007b8:	715a      	strb	r2, [r3, #5]
								break;
 80007ba:	e02b      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 5:
								CanFrame.length = 5;
 80007bc:	4b6b      	ldr	r3, [pc, #428]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007be:	2205      	movs	r2, #5
 80007c0:	715a      	strb	r2, [r3, #5]
								break;
 80007c2:	e027      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 6:
								CanFrame.length = 6;
 80007c4:	4b69      	ldr	r3, [pc, #420]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007c6:	2206      	movs	r2, #6
 80007c8:	715a      	strb	r2, [r3, #5]
								break;
 80007ca:	e023      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 7:
								CanFrame.length = 7;
 80007cc:	4b67      	ldr	r3, [pc, #412]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007ce:	2207      	movs	r2, #7
 80007d0:	715a      	strb	r2, [r3, #5]
								break;
 80007d2:	e01f      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 8:
								CanFrame.length = 8;
 80007d4:	4b65      	ldr	r3, [pc, #404]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007d6:	2208      	movs	r2, #8
 80007d8:	715a      	strb	r2, [r3, #5]
								break;
 80007da:	e01b      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 9:
								CanFrame.length = 12;
 80007dc:	4b63      	ldr	r3, [pc, #396]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007de:	220c      	movs	r2, #12
 80007e0:	715a      	strb	r2, [r3, #5]
								break;
 80007e2:	e017      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 10:
								CanFrame.length = 16;
 80007e4:	4b61      	ldr	r3, [pc, #388]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007e6:	2210      	movs	r2, #16
 80007e8:	715a      	strb	r2, [r3, #5]
								break;
 80007ea:	e013      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 11:
								CanFrame.length = 20;
 80007ec:	4b5f      	ldr	r3, [pc, #380]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007ee:	2214      	movs	r2, #20
 80007f0:	715a      	strb	r2, [r3, #5]
								break;
 80007f2:	e00f      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 12:
								CanFrame.length = 24;
 80007f4:	4b5d      	ldr	r3, [pc, #372]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007f6:	2218      	movs	r2, #24
 80007f8:	715a      	strb	r2, [r3, #5]
								break;
 80007fa:	e00b      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 13:
								CanFrame.length = 32;
 80007fc:	4b5b      	ldr	r3, [pc, #364]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007fe:	2220      	movs	r2, #32
 8000800:	715a      	strb	r2, [r3, #5]
								break;
 8000802:	e007      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 14:
								CanFrame.length = 48;
 8000804:	4b59      	ldr	r3, [pc, #356]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000806:	2230      	movs	r2, #48	; 0x30
 8000808:	715a      	strb	r2, [r3, #5]
								break;
 800080a:	e003      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 15:
								CanFrame.length = 64;
 800080c:	4b57      	ldr	r3, [pc, #348]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 800080e:	2240      	movs	r2, #64	; 0x40
 8000810:	715a      	strb	r2, [r3, #5]
								break;
 8000812:	bf00      	nop
						}
						CanFrame.time = time;
 8000814:	4a55      	ldr	r2, [pc, #340]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	6093      	str	r3, [r2, #8]
						CAN_Flag = 1;
 800081a:	4b55      	ldr	r3, [pc, #340]	; (8000970 <HAL_FDCAN_RxFifo0Callback+0x264>)
 800081c:	2201      	movs	r2, #1
 800081e:	601a      	str	r2, [r3, #0]
						memcpy(CanFrame.data.bytes, RxData, CanFrame.length);
 8000820:	4b52      	ldr	r3, [pc, #328]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000822:	795b      	ldrb	r3, [r3, #5]
 8000824:	461a      	mov	r2, r3
 8000826:	494d      	ldr	r1, [pc, #308]	; (800095c <HAL_FDCAN_RxFifo0Callback+0x250>)
 8000828:	4852      	ldr	r0, [pc, #328]	; (8000974 <HAL_FDCAN_RxFifo0Callback+0x268>)
 800082a:	f018 fe1b 	bl	8019464 <memcpy>
						if(RxHeader.IdType == FDCAN_EXTENDED_ID){
 800082e:	4b4c      	ldr	r3, [pc, #304]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000836:	d103      	bne.n	8000840 <HAL_FDCAN_RxFifo0Callback+0x134>
							CanFrame.extended = 1;
 8000838:	4b4c      	ldr	r3, [pc, #304]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 800083a:	2201      	movs	r2, #1
 800083c:	711a      	strb	r2, [r3, #4]
 800083e:	e002      	b.n	8000846 <HAL_FDCAN_RxFifo0Callback+0x13a>
						}
						else{
							CanFrame.extended = 0;
 8000840:	4b4a      	ldr	r3, [pc, #296]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000842:	2200      	movs	r2, #0
 8000844:	711a      	strb	r2, [r3, #4]
						}
					}
					if(RxHeader.FDFormat == FDCAN_FD_CAN){
 8000846:	4b46      	ldr	r3, [pc, #280]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800084e:	f040 8080 	bne.w	8000952 <HAL_FDCAN_RxFifo0Callback+0x246>
						CanFDFrame.id = RxHeader.Identifier;
 8000852:	4b43      	ldr	r3, [pc, #268]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a48      	ldr	r2, [pc, #288]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000858:	6013      	str	r3, [r2, #0]

						switch(RxHeader.DataLength/65536){
 800085a:	4b41      	ldr	r3, [pc, #260]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 800085c:	68db      	ldr	r3, [r3, #12]
 800085e:	0c1b      	lsrs	r3, r3, #16
 8000860:	3b01      	subs	r3, #1
 8000862:	2b0e      	cmp	r3, #14
 8000864:	d85c      	bhi.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
 8000866:	a201      	add	r2, pc, #4	; (adr r2, 800086c <HAL_FDCAN_RxFifo0Callback+0x160>)
 8000868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800086c:	080008a9 	.word	0x080008a9
 8000870:	080008b1 	.word	0x080008b1
 8000874:	080008b9 	.word	0x080008b9
 8000878:	080008c1 	.word	0x080008c1
 800087c:	080008c9 	.word	0x080008c9
 8000880:	080008d1 	.word	0x080008d1
 8000884:	080008d9 	.word	0x080008d9
 8000888:	080008e1 	.word	0x080008e1
 800088c:	080008e9 	.word	0x080008e9
 8000890:	080008f1 	.word	0x080008f1
 8000894:	080008f9 	.word	0x080008f9
 8000898:	08000901 	.word	0x08000901
 800089c:	08000909 	.word	0x08000909
 80008a0:	08000911 	.word	0x08000911
 80008a4:	08000919 	.word	0x08000919
							case 1:
								CanFDFrame.length = 1;
 80008a8:	4b33      	ldr	r3, [pc, #204]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	609a      	str	r2, [r3, #8]
								break;
 80008ae:	e037      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 2:
								CanFDFrame.length = 2;
 80008b0:	4b31      	ldr	r3, [pc, #196]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008b2:	2202      	movs	r2, #2
 80008b4:	609a      	str	r2, [r3, #8]
								break;
 80008b6:	e033      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 3:
								CanFDFrame.length = 3;
 80008b8:	4b2f      	ldr	r3, [pc, #188]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008ba:	2203      	movs	r2, #3
 80008bc:	609a      	str	r2, [r3, #8]
								break;
 80008be:	e02f      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 4:
								CanFDFrame.length = 4;
 80008c0:	4b2d      	ldr	r3, [pc, #180]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008c2:	2204      	movs	r2, #4
 80008c4:	609a      	str	r2, [r3, #8]
								break;
 80008c6:	e02b      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 5:
								CanFDFrame.length = 5;
 80008c8:	4b2b      	ldr	r3, [pc, #172]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008ca:	2205      	movs	r2, #5
 80008cc:	609a      	str	r2, [r3, #8]
								break;
 80008ce:	e027      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 6:
								CanFDFrame.length = 6;
 80008d0:	4b29      	ldr	r3, [pc, #164]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008d2:	2206      	movs	r2, #6
 80008d4:	609a      	str	r2, [r3, #8]
								break;
 80008d6:	e023      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 7:
								CanFDFrame.length = 7;
 80008d8:	4b27      	ldr	r3, [pc, #156]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008da:	2207      	movs	r2, #7
 80008dc:	609a      	str	r2, [r3, #8]
								break;
 80008de:	e01f      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 8:
								CanFDFrame.length = 8;
 80008e0:	4b25      	ldr	r3, [pc, #148]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008e2:	2208      	movs	r2, #8
 80008e4:	609a      	str	r2, [r3, #8]
								break;
 80008e6:	e01b      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 9:
								CanFDFrame.length = 12;
 80008e8:	4b23      	ldr	r3, [pc, #140]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008ea:	220c      	movs	r2, #12
 80008ec:	609a      	str	r2, [r3, #8]
								break;
 80008ee:	e017      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 10:
								CanFDFrame.length = 16;
 80008f0:	4b21      	ldr	r3, [pc, #132]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008f2:	2210      	movs	r2, #16
 80008f4:	609a      	str	r2, [r3, #8]
								break;
 80008f6:	e013      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 11:
								CanFDFrame.length = 20;
 80008f8:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008fa:	2214      	movs	r2, #20
 80008fc:	609a      	str	r2, [r3, #8]
								break;
 80008fe:	e00f      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 12:
								CanFDFrame.length = 24;
 8000900:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000902:	2218      	movs	r2, #24
 8000904:	609a      	str	r2, [r3, #8]
								break;
 8000906:	e00b      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 13:
								CanFDFrame.length = 32;
 8000908:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 800090a:	2220      	movs	r2, #32
 800090c:	609a      	str	r2, [r3, #8]
								break;
 800090e:	e007      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 14:
								CanFDFrame.length = 48;
 8000910:	4b19      	ldr	r3, [pc, #100]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000912:	2230      	movs	r2, #48	; 0x30
 8000914:	609a      	str	r2, [r3, #8]
								break;
 8000916:	e003      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 15:
								CanFDFrame.length = 64;
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 800091a:	2240      	movs	r2, #64	; 0x40
 800091c:	609a      	str	r2, [r3, #8]
								break;
 800091e:	bf00      	nop
						}

						CanFDFrame.time = time;
 8000920:	4a15      	ldr	r2, [pc, #84]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	60d3      	str	r3, [r2, #12]
						FDCAN_Flag = 1;
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <HAL_FDCAN_RxFifo0Callback+0x270>)
 8000928:	2201      	movs	r2, #1
 800092a:	601a      	str	r2, [r3, #0]
						memcpy(CanFDFrame.data.bytes, RxData, CanFDFrame.length);
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	461a      	mov	r2, r3
 8000932:	490a      	ldr	r1, [pc, #40]	; (800095c <HAL_FDCAN_RxFifo0Callback+0x250>)
 8000934:	4812      	ldr	r0, [pc, #72]	; (8000980 <HAL_FDCAN_RxFifo0Callback+0x274>)
 8000936:	f018 fd95 	bl	8019464 <memcpy>
						if(RxHeader.IdType == FDCAN_EXTENDED_ID){
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000942:	d103      	bne.n	800094c <HAL_FDCAN_RxFifo0Callback+0x240>
							CanFDFrame.extended = 1;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000946:	2201      	movs	r2, #1
 8000948:	711a      	strb	r2, [r3, #4]
				  			  printf("%c",RxData[i]);
				  	  }
				  	  printf("\n");
				  	*/
			      }
}
 800094a:	e002      	b.n	8000952 <HAL_FDCAN_RxFifo0Callback+0x246>
							CanFDFrame.extended = 0;
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 800094e:	2200      	movs	r2, #0
 8000950:	711a      	strb	r2, [r3, #4]
}
 8000952:	bf00      	nop
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	24001000 	.word	0x24001000
 8000960:	24001090 	.word	0x24001090
 8000964:	58020400 	.word	0x58020400
 8000968:	0801a720 	.word	0x0801a720
 800096c:	240010b8 	.word	0x240010b8
 8000970:	24000200 	.word	0x24000200
 8000974:	240010c8 	.word	0x240010c8
 8000978:	24001040 	.word	0x24001040
 800097c:	240001fc 	.word	0x240001fc
 8000980:	24001050 	.word	0x24001050

08000984 <gps_msg_config>:
#include "main.h"
#include <myprintf.h>
#include <stdbool.h>
#include <buffer.h>

int gps_msg_config(UART_HandleTypeDef *huart, const char *nema, int rus1){
 8000984:	b580      	push	{r7, lr}
 8000986:	b09e      	sub	sp, #120	; 0x78
 8000988:	af02      	add	r7, sp, #8
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
	if (strlen(nema) != 3) return 1;
 8000990:	68b8      	ldr	r0, [r7, #8]
 8000992:	f7ff fca5 	bl	80002e0 <strlen>
 8000996:	4603      	mov	r3, r0
 8000998:	2b03      	cmp	r3, #3
 800099a:	d001      	beq.n	80009a0 <gps_msg_config+0x1c>
 800099c:	2301      	movs	r3, #1
 800099e:	e052      	b.n	8000a46 <gps_msg_config+0xc2>


	char msg[32];
	snprintf(msg, sizeof(msg)-1,"PUBX,40,%s,0,%i,0,0,0,0", nema, rus1);
 80009a0:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	4a29      	ldr	r2, [pc, #164]	; (8000a50 <gps_msg_config+0xcc>)
 80009ac:	211f      	movs	r1, #31
 80009ae:	f018 fea1 	bl	80196f4 <sniprintf>

	int checksum_int = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 80009b6:	2300      	movs	r3, #0
 80009b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80009ba:	e00b      	b.n	80009d4 <gps_msg_config+0x50>
		checksum_int ^= (unsigned char)msg[i];
 80009bc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80009c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009c2:	4413      	add	r3, r2
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	461a      	mov	r2, r3
 80009c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009ca:	4053      	eors	r3, r2
 80009cc:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 80009ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009d0:	3301      	adds	r3, #1
 80009d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80009d4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80009d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009da:	4413      	add	r3, r2
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d002      	beq.n	80009e8 <gps_msg_config+0x64>
 80009e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009e4:	2b1f      	cmp	r3, #31
 80009e6:	dde9      	ble.n	80009bc <gps_msg_config+0x38>

	char checksum[8];
	snprintf(checksum, sizeof(checksum)-1, "*%.2X", checksum_int);
 80009e8:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80009ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009ee:	4a19      	ldr	r2, [pc, #100]	; (8000a54 <gps_msg_config+0xd0>)
 80009f0:	2107      	movs	r1, #7
 80009f2:	f018 fe7f 	bl	80196f4 <sniprintf>

	char messagetosend[42];
	snprintf(messagetosend, sizeof(messagetosend)-1, "$%s%s\r\n", msg, checksum);
 80009f6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80009fa:	f107 0014 	add.w	r0, r7, #20
 80009fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	4613      	mov	r3, r2
 8000a06:	4a14      	ldr	r2, [pc, #80]	; (8000a58 <gps_msg_config+0xd4>)
 8000a08:	2129      	movs	r1, #41	; 0x29
 8000a0a:	f018 fe73 	bl	80196f4 <sniprintf>
	printf("\n\rSending: ");
 8000a0e:	4813      	ldr	r0, [pc, #76]	; (8000a5c <gps_msg_config+0xd8>)
 8000a10:	f018 fde4 	bl	80195dc <iprintf>
	printf("%s", messagetosend);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4811      	ldr	r0, [pc, #68]	; (8000a60 <gps_msg_config+0xdc>)
 8000a1c:	f018 fdde 	bl	80195dc <iprintf>
	if (HAL_UART_Transmit(huart, messagetosend, strlen(messagetosend), 100) != HAL_OK){
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fc5b 	bl	80002e0 <strlen>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	f107 0114 	add.w	r1, r7, #20
 8000a32:	2364      	movs	r3, #100	; 0x64
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	f00f f8a6 	bl	800fb86 <HAL_UART_Transmit>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <gps_msg_config+0xc0>
		Error_Handler();
 8000a40:	f003 f8d2 	bl	8003be8 <Error_Handler>
	}
	return 0;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3770      	adds	r7, #112	; 0x70
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	0801a734 	.word	0x0801a734
 8000a54:	0801a74c 	.word	0x0801a74c
 8000a58:	0801a754 	.word	0x0801a754
 8000a5c:	0801a75c 	.word	0x0801a75c
 8000a60:	0801a768 	.word	0x0801a768

08000a64 <gps_rate_config>:

int gps_rate_config(UART_HandleTypeDef *huart, uint16_t measRate, uint16_t navRate, uint16_t timeRef){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	; 0x28
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	4608      	mov	r0, r1
 8000a6e:	4611      	mov	r1, r2
 8000a70:	461a      	mov	r2, r3
 8000a72:	4603      	mov	r3, r0
 8000a74:	817b      	strh	r3, [r7, #10]
 8000a76:	460b      	mov	r3, r1
 8000a78:	813b      	strh	r3, [r7, #8]
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	80fb      	strh	r3, [r7, #6]
		uint16_t length = 6;
 8000a7e:	2306      	movs	r3, #6
 8000a80:	83fb      	strh	r3, [r7, #30]
		uint8_t msg[14];
		msg[0] = 0xb5;
 8000a82:	23b5      	movs	r3, #181	; 0xb5
 8000a84:	743b      	strb	r3, [r7, #16]
		msg[1] = 0x62;
 8000a86:	2362      	movs	r3, #98	; 0x62
 8000a88:	747b      	strb	r3, [r7, #17]
		msg[2] = 0x06;
 8000a8a:	2306      	movs	r3, #6
 8000a8c:	74bb      	strb	r3, [r7, #18]
		msg[3] = 0x08;
 8000a8e:	2308      	movs	r3, #8
 8000a90:	74fb      	strb	r3, [r7, #19]
		msg[4] = length;
 8000a92:	8bfb      	ldrh	r3, [r7, #30]
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	753b      	strb	r3, [r7, #20]
		msg[5] = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	757b      	strb	r3, [r7, #21]
		msg[6] = measRate;
 8000a9c:	897b      	ldrh	r3, [r7, #10]
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	75bb      	strb	r3, [r7, #22]
		msg[7] = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	75fb      	strb	r3, [r7, #23]
		msg[8] = navRate;
 8000aa6:	893b      	ldrh	r3, [r7, #8]
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	763b      	strb	r3, [r7, #24]
		msg[9] = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	767b      	strb	r3, [r7, #25]
		msg[10] = timeRef;
 8000ab0:	88fb      	ldrh	r3, [r7, #6]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	76bb      	strb	r3, [r7, #26]
		msg[11] = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	76fb      	strb	r3, [r7, #27]

		uint8_t CK_A = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t CK_B = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	623b      	str	r3, [r7, #32]
 8000aca:	e013      	b.n	8000af4 <gps_rate_config+0x90>
	        CK_A = CK_A + msg[i];
 8000acc:	f107 0210 	add.w	r2, r7, #16
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	781a      	ldrb	r2, [r3, #0]
 8000ad6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ada:	4413      	add	r3, r2
 8000adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	        CK_A &= 0xFF;
	        CK_B = CK_B + CK_A;
 8000ae0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ae8:	4413      	add	r3, r2
 8000aea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 8000aee:	6a3b      	ldr	r3, [r7, #32]
 8000af0:	3301      	adds	r3, #1
 8000af2:	623b      	str	r3, [r7, #32]
 8000af4:	6a3b      	ldr	r3, [r7, #32]
 8000af6:	2b0b      	cmp	r3, #11
 8000af8:	dde8      	ble.n	8000acc <gps_rate_config+0x68>
	        CK_B &= 0xFF;
	    }
		msg[12] = CK_A;
 8000afa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000afe:	773b      	strb	r3, [r7, #28]
		msg[13] = CK_B;
 8000b00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b04:	777b      	strb	r3, [r7, #29]

		if (HAL_UART_Transmit(huart, msg, sizeof(msg), 100) != HAL_OK){
 8000b06:	f107 0110 	add.w	r1, r7, #16
 8000b0a:	2364      	movs	r3, #100	; 0x64
 8000b0c:	220e      	movs	r2, #14
 8000b0e:	68f8      	ldr	r0, [r7, #12]
 8000b10:	f00f f839 	bl	800fb86 <HAL_UART_Transmit>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d003      	beq.n	8000b22 <gps_rate_config+0xbe>
				Error_Handler();
 8000b1a:	f003 f865 	bl	8003be8 <Error_Handler>
				return 1;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e000      	b.n	8000b24 <gps_rate_config+0xc0>
			}
		return 0;
 8000b22:	2300      	movs	r3, #0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3728      	adds	r7, #40	; 0x28
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <HAL_UART_RxHalfCpltCallback>:
}

int GPS_flag = 0;

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	  }
  }*/
  //for(int i=0; i<BUFFLENGTH; i++){
  	  		  //printf("%c", rxBuf[i]);
  	  //}
  GPS_flag = 1;
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <HAL_UART_RxHalfCpltCallback+0x1c>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	601a      	str	r2, [r3, #0]
  //WriteToBuff(rxBuf+70, BUFFLENGTH/2);
  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);*/
  //printf("GPS Recieved\n");

}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	24000204 	.word	0x24000204

08000b4c <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000b58:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <NRF24_DelayMicroSeconds+0x38>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <NRF24_DelayMicroSeconds+0x3c>)
 8000b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b62:	0c9a      	lsrs	r2, r3, #18
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	fb02 f303 	mul.w	r3, r2, r3
 8000b6a:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8000b6c:	bf00      	nop
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	1e5a      	subs	r2, r3, #1
 8000b72:	60fa      	str	r2, [r7, #12]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d1fa      	bne.n	8000b6e <NRF24_DelayMicroSeconds+0x22>
}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	24000010 	.word	0x24000010
 8000b88:	165e9f81 	.word	0x165e9f81

08000b8c <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d008      	beq.n	8000bac <NRF24_csn+0x20>
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <NRF24_csn+0x38>)
 8000b9c:	6818      	ldr	r0, [r3, #0]
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <NRF24_csn+0x3c>)
 8000ba0:	881b      	ldrh	r3, [r3, #0]
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f007 fa2d 	bl	8008004 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000baa:	e007      	b.n	8000bbc <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000bac:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <NRF24_csn+0x38>)
 8000bae:	6818      	ldr	r0, [r3, #0]
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <NRF24_csn+0x3c>)
 8000bb2:	881b      	ldrh	r3, [r3, #0]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	f007 fa24 	bl	8008004 <HAL_GPIO_WritePin>
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	24000210 	.word	0x24000210
 8000bc8:	24000214 	.word	0x24000214

08000bcc <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d008      	beq.n	8000bec <NRF24_ce+0x20>
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <NRF24_ce+0x38>)
 8000bdc:	6818      	ldr	r0, [r3, #0]
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <NRF24_ce+0x3c>)
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	2201      	movs	r2, #1
 8000be4:	4619      	mov	r1, r3
 8000be6:	f007 fa0d 	bl	8008004 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000bea:	e007      	b.n	8000bfc <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <NRF24_ce+0x38>)
 8000bee:	6818      	ldr	r0, [r3, #0]
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <NRF24_ce+0x3c>)
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	f007 fa04 	bl	8008004 <HAL_GPIO_WritePin>
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	24000210 	.word	0x24000210
 8000c08:	24000216 	.word	0x24000216

08000c0c <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000c16:	2000      	movs	r0, #0
 8000c18:	f7ff ffb8 	bl	8000b8c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	f003 031f 	and.w	r3, r3, #31
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000c26:	f107 010c 	add.w	r1, r7, #12
 8000c2a:	2364      	movs	r3, #100	; 0x64
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	480a      	ldr	r0, [pc, #40]	; (8000c58 <NRF24_read_register+0x4c>)
 8000c30:	f00d ffa0 	bl	800eb74 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	1c59      	adds	r1, r3, #1
 8000c3a:	2364      	movs	r3, #100	; 0x64
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	4806      	ldr	r0, [pc, #24]	; (8000c58 <NRF24_read_register+0x4c>)
 8000c40:	f00e f98a 	bl	800ef58 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000c44:	7b7b      	ldrb	r3, [r7, #13]
 8000c46:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000c48:	2001      	movs	r0, #1
 8000c4a:	f7ff ff9f 	bl	8000b8c <NRF24_csn>
	return retData;
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3710      	adds	r7, #16
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	24000218 	.word	0x24000218

08000c5c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	6039      	str	r1, [r7, #0]
 8000c66:	71fb      	strb	r3, [r7, #7]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f7ff ff8d 	bl	8000b8c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f003 031f 	and.w	r3, r3, #31
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000c7c:	f107 010c 	add.w	r1, r7, #12
 8000c80:	2364      	movs	r3, #100	; 0x64
 8000c82:	2201      	movs	r2, #1
 8000c84:	4808      	ldr	r0, [pc, #32]	; (8000ca8 <NRF24_read_registerN+0x4c>)
 8000c86:	f00d ff75 	bl	800eb74 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000c8a:	79bb      	ldrb	r3, [r7, #6]
 8000c8c:	b29a      	uxth	r2, r3
 8000c8e:	2364      	movs	r3, #100	; 0x64
 8000c90:	6839      	ldr	r1, [r7, #0]
 8000c92:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <NRF24_read_registerN+0x4c>)
 8000c94:	f00e f960 	bl	800ef58 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f7ff ff77 	bl	8000b8c <NRF24_csn>
}
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	24000218 	.word	0x24000218

08000cac <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	460a      	mov	r2, r1
 8000cb6:	71fb      	strb	r3, [r7, #7]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f7ff ff65 	bl	8000b8c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	f043 0320 	orr.w	r3, r3, #32
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000ccc:	79bb      	ldrb	r3, [r7, #6]
 8000cce:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000cd0:	f107 010c 	add.w	r1, r7, #12
 8000cd4:	2364      	movs	r3, #100	; 0x64
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	4804      	ldr	r0, [pc, #16]	; (8000cec <NRF24_write_register+0x40>)
 8000cda:	f00d ff4b 	bl	800eb74 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f7ff ff54 	bl	8000b8c <NRF24_csn>
}
 8000ce4:	bf00      	nop
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	24000218 	.word	0x24000218

08000cf0 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	6039      	str	r1, [r7, #0]
 8000cfa:	71fb      	strb	r3, [r7, #7]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000d00:	2000      	movs	r0, #0
 8000d02:	f7ff ff43 	bl	8000b8c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	f043 0320 	orr.w	r3, r3, #32
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000d10:	f107 010c 	add.w	r1, r7, #12
 8000d14:	2364      	movs	r3, #100	; 0x64
 8000d16:	2201      	movs	r2, #1
 8000d18:	4808      	ldr	r0, [pc, #32]	; (8000d3c <NRF24_write_registerN+0x4c>)
 8000d1a:	f00d ff2b 	bl	800eb74 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000d1e:	79bb      	ldrb	r3, [r7, #6]
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	2364      	movs	r3, #100	; 0x64
 8000d24:	6839      	ldr	r1, [r7, #0]
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <NRF24_write_registerN+0x4c>)
 8000d28:	f00d ff24 	bl	800eb74 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	f7ff ff2d 	bl	8000b8c <NRF24_csn>
}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	24000218 	.word	0x24000218

08000d40 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	460b      	mov	r3, r1
 8000d4a:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f7ff ff1d 	bl	8000b8c <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8000d52:	23a0      	movs	r3, #160	; 0xa0
 8000d54:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8000d56:	f107 010f 	add.w	r1, r7, #15
 8000d5a:	2364      	movs	r3, #100	; 0x64
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	4808      	ldr	r0, [pc, #32]	; (8000d80 <NRF24_write_payload+0x40>)
 8000d60:	f00d ff08 	bl	800eb74 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8000d64:	78fb      	ldrb	r3, [r7, #3]
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	2364      	movs	r3, #100	; 0x64
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	4804      	ldr	r0, [pc, #16]	; (8000d80 <NRF24_write_payload+0x40>)
 8000d6e:	f00d ff01 	bl	800eb74 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000d72:	2001      	movs	r0, #1
 8000d74:	f7ff ff0a 	bl	8000b8c <NRF24_csn>
}
 8000d78:	bf00      	nop
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	24000218 	.word	0x24000218

08000d84 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000d88:	21ff      	movs	r1, #255	; 0xff
 8000d8a:	20e1      	movs	r0, #225	; 0xe1
 8000d8c:	f7ff ff8e 	bl	8000cac <NRF24_write_register>
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000d98:	21ff      	movs	r1, #255	; 0xff
 8000d9a:	20e2      	movs	r0, #226	; 0xe2
 8000d9c:	f7ff ff86 	bl	8000cac <NRF24_write_register>
}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000daa:	2007      	movs	r0, #7
 8000dac:	f7ff ff2e 	bl	8000c0c <NRF24_read_register>
 8000db0:	4603      	mov	r3, r0
 8000db2:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000db4:	79fb      	ldrb	r3, [r7, #7]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b084      	sub	sp, #16
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	61fb      	str	r3, [r7, #28]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	807b      	strh	r3, [r7, #2]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000dd4:	4b66      	ldr	r3, [pc, #408]	; (8000f70 <NRF24_begin+0x1b0>)
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	2288      	movs	r2, #136	; 0x88
 8000dde:	4619      	mov	r1, r3
 8000de0:	f018 fb40 	bl	8019464 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000de4:	4a63      	ldr	r2, [pc, #396]	; (8000f74 <NRF24_begin+0x1b4>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000dea:	4a63      	ldr	r2, [pc, #396]	; (8000f78 <NRF24_begin+0x1b8>)
 8000dec:	887b      	ldrh	r3, [r7, #2]
 8000dee:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000df0:	4a62      	ldr	r2, [pc, #392]	; (8000f7c <NRF24_begin+0x1bc>)
 8000df2:	883b      	ldrh	r3, [r7, #0]
 8000df4:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8000df6:	2001      	movs	r0, #1
 8000df8:	f7ff fec8 	bl	8000b8c <NRF24_csn>
	NRF24_ce(0);
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f7ff fee5 	bl	8000bcc <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000e02:	2005      	movs	r0, #5
 8000e04:	f003 fbe4 	bl	80045d0 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000e08:	2108      	movs	r1, #8
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f7ff ff4e 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000e10:	213f      	movs	r1, #63	; 0x3f
 8000e12:	2001      	movs	r0, #1
 8000e14:	f7ff ff4a 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000e18:	2103      	movs	r1, #3
 8000e1a:	2002      	movs	r0, #2
 8000e1c:	f7ff ff46 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000e20:	2103      	movs	r1, #3
 8000e22:	2003      	movs	r0, #3
 8000e24:	f7ff ff42 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000e28:	2103      	movs	r1, #3
 8000e2a:	2004      	movs	r0, #4
 8000e2c:	f7ff ff3e 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000e30:	2102      	movs	r1, #2
 8000e32:	2005      	movs	r0, #5
 8000e34:	f7ff ff3a 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000e38:	210f      	movs	r1, #15
 8000e3a:	2006      	movs	r0, #6
 8000e3c:	f7ff ff36 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000e40:	210e      	movs	r1, #14
 8000e42:	2007      	movs	r0, #7
 8000e44:	f7ff ff32 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2008      	movs	r0, #8
 8000e4c:	f7ff ff2e 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000e50:	2100      	movs	r1, #0
 8000e52:	2009      	movs	r0, #9
 8000e54:	f7ff ff2a 	bl	8000cac <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000e58:	23e7      	movs	r3, #231	; 0xe7
 8000e5a:	733b      	strb	r3, [r7, #12]
 8000e5c:	23e7      	movs	r3, #231	; 0xe7
 8000e5e:	72fb      	strb	r3, [r7, #11]
 8000e60:	23e7      	movs	r3, #231	; 0xe7
 8000e62:	72bb      	strb	r3, [r7, #10]
 8000e64:	23e7      	movs	r3, #231	; 0xe7
 8000e66:	727b      	strb	r3, [r7, #9]
 8000e68:	23e7      	movs	r3, #231	; 0xe7
 8000e6a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000e6c:	f107 0308 	add.w	r3, r7, #8
 8000e70:	2205      	movs	r2, #5
 8000e72:	4619      	mov	r1, r3
 8000e74:	200a      	movs	r0, #10
 8000e76:	f7ff ff3b 	bl	8000cf0 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8000e7a:	23c2      	movs	r3, #194	; 0xc2
 8000e7c:	733b      	strb	r3, [r7, #12]
 8000e7e:	23c2      	movs	r3, #194	; 0xc2
 8000e80:	72fb      	strb	r3, [r7, #11]
 8000e82:	23c2      	movs	r3, #194	; 0xc2
 8000e84:	72bb      	strb	r3, [r7, #10]
 8000e86:	23c2      	movs	r3, #194	; 0xc2
 8000e88:	727b      	strb	r3, [r7, #9]
 8000e8a:	23c2      	movs	r3, #194	; 0xc2
 8000e8c:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000e8e:	f107 0308 	add.w	r3, r7, #8
 8000e92:	2205      	movs	r2, #5
 8000e94:	4619      	mov	r1, r3
 8000e96:	200b      	movs	r0, #11
 8000e98:	f7ff ff2a 	bl	8000cf0 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000e9c:	21c3      	movs	r1, #195	; 0xc3
 8000e9e:	200c      	movs	r0, #12
 8000ea0:	f7ff ff04 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000ea4:	21c4      	movs	r1, #196	; 0xc4
 8000ea6:	200d      	movs	r0, #13
 8000ea8:	f7ff ff00 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000eac:	21c5      	movs	r1, #197	; 0xc5
 8000eae:	200e      	movs	r0, #14
 8000eb0:	f7ff fefc 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000eb4:	21c6      	movs	r1, #198	; 0xc6
 8000eb6:	200f      	movs	r0, #15
 8000eb8:	f7ff fef8 	bl	8000cac <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000ebc:	23e7      	movs	r3, #231	; 0xe7
 8000ebe:	733b      	strb	r3, [r7, #12]
 8000ec0:	23e7      	movs	r3, #231	; 0xe7
 8000ec2:	72fb      	strb	r3, [r7, #11]
 8000ec4:	23e7      	movs	r3, #231	; 0xe7
 8000ec6:	72bb      	strb	r3, [r7, #10]
 8000ec8:	23e7      	movs	r3, #231	; 0xe7
 8000eca:	727b      	strb	r3, [r7, #9]
 8000ecc:	23e7      	movs	r3, #231	; 0xe7
 8000ece:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000ed0:	f107 0308 	add.w	r3, r7, #8
 8000ed4:	2205      	movs	r2, #5
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	2010      	movs	r0, #16
 8000eda:	f7ff ff09 	bl	8000cf0 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000ede:	2100      	movs	r1, #0
 8000ee0:	2011      	movs	r0, #17
 8000ee2:	f7ff fee3 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	2012      	movs	r0, #18
 8000eea:	f7ff fedf 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000eee:	2100      	movs	r1, #0
 8000ef0:	2013      	movs	r0, #19
 8000ef2:	f7ff fedb 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	2014      	movs	r0, #20
 8000efa:	f7ff fed7 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000efe:	2100      	movs	r1, #0
 8000f00:	2015      	movs	r0, #21
 8000f02:	f7ff fed3 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000f06:	2100      	movs	r1, #0
 8000f08:	2016      	movs	r0, #22
 8000f0a:	f7ff fecf 	bl	8000cac <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8000f0e:	f000 fa89 	bl	8001424 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000f12:	2100      	movs	r1, #0
 8000f14:	201c      	movs	r0, #28
 8000f16:	f7ff fec9 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	201d      	movs	r0, #29
 8000f1e:	f7ff fec5 	bl	8000cac <NRF24_write_register>
	printRadioSettings();
 8000f22:	f000 fa99 	bl	8001458 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000f26:	210f      	movs	r1, #15
 8000f28:	200f      	movs	r0, #15
 8000f2a:	f000 f8ad 	bl	8001088 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000f2e:	2003      	movs	r0, #3
 8000f30:	f000 f927 	bl	8001182 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000f34:	2001      	movs	r0, #1
 8000f36:	f000 f95d 	bl	80011f4 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000f3a:	2002      	movs	r0, #2
 8000f3c:	f000 f9a0 	bl	8001280 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000f40:	f000 f8f2 	bl	8001128 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000f44:	2020      	movs	r0, #32
 8000f46:	f000 f8cf 	bl	80010e8 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8000f4a:	f000 fa62 	bl	8001412 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000f4e:	204c      	movs	r0, #76	; 0x4c
 8000f50:	f000 f8b5 	bl	80010be <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000f54:	f7ff ff16 	bl	8000d84 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000f58:	f7ff ff1c 	bl	8000d94 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8000f5c:	f000 f9b8 	bl	80012d0 <NRF24_powerDown>
	
}
 8000f60:	bf00      	nop
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f6a:	b002      	add	sp, #8
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	24000218 	.word	0x24000218
 8000f74:	24000210 	.word	0x24000210
 8000f78:	24000214 	.word	0x24000214
 8000f7c:	24000216 	.word	0x24000216

08000f80 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8000f84:	2000      	movs	r0, #0
 8000f86:	f7ff fe21 	bl	8000bcc <NRF24_ce>
	NRF24_flush_tx();
 8000f8a:	f7ff fefb 	bl	8000d84 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000f8e:	f7ff ff01 	bl	8000d94 <NRF24_flush_rx>
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8000fa4:	f000 fa35 	bl	8001412 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8000fa8:	78fb      	ldrb	r3, [r7, #3]
 8000faa:	4619      	mov	r1, r3
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f000 f9ce 	bl	800134e <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8000fb2:	f003 fb01 	bl	80045b8 <HAL_GetTick>
 8000fb6:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8000fb8:	230a      	movs	r3, #10
 8000fba:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8000fbc:	f107 030d 	add.w	r3, r7, #13
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	2008      	movs	r0, #8
 8000fc6:	f7ff fe49 	bl	8000c5c <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8000fca:	f7ff feeb 	bl	8000da4 <NRF24_get_status>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d107      	bne.n	8000fec <NRF24_write+0x54>
 8000fdc:	f003 faec 	bl	80045b8 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d8e7      	bhi.n	8000fbc <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8000fec:	f107 010b 	add.w	r1, r7, #11
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	4a0c      	ldr	r2, [pc, #48]	; (8001028 <NRF24_write+0x90>)
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f9d8 	bl	80013ac <NRF24_whatHappened>
	retStatus = tx_ok;
 8000ffc:	7b3b      	ldrb	r3, [r7, #12]
 8000ffe:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <NRF24_write+0x90>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d005      	beq.n	8001014 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8001008:	f000 f886 	bl	8001118 <NRF24_getDynamicPayloadSize>
 800100c:	4603      	mov	r3, r0
 800100e:	461a      	mov	r2, r3
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <NRF24_write+0x94>)
 8001012:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 8001014:	f000 f80c 	bl	8001030 <NRF24_available>
	NRF24_flush_tx();
 8001018:	f7ff feb4 	bl	8000d84 <NRF24_flush_tx>
	return retStatus;
 800101c:	7bbb      	ldrb	r3, [r7, #14]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	24000208 	.word	0x24000208
 800102c:	24000209 	.word	0x24000209

08001030 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8001034:	2000      	movs	r0, #0
 8001036:	f000 f95a 	bl	80012ee <NRF24_availablePipe>
 800103a:	4603      	mov	r3, r0
}
 800103c:	4618      	mov	r0, r3
 800103e:	bd80      	pop	{r7, pc}

08001040 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 800104a:	463b      	mov	r3, r7
 800104c:	2205      	movs	r2, #5
 800104e:	4619      	mov	r1, r3
 8001050:	200a      	movs	r0, #10
 8001052:	f7ff fe4d 	bl	8000cf0 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8001056:	463b      	mov	r3, r7
 8001058:	2205      	movs	r2, #5
 800105a:	4619      	mov	r1, r3
 800105c:	2010      	movs	r0, #16
 800105e:	f7ff fe47 	bl	8000cf0 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8001062:	2320      	movs	r3, #32
 8001064:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8001066:	4b07      	ldr	r3, [pc, #28]	; (8001084 <NRF24_openWritingPipe+0x44>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	7bfa      	ldrb	r2, [r7, #15]
 800106c:	4293      	cmp	r3, r2
 800106e:	bf28      	it	cs
 8001070:	4613      	movcs	r3, r2
 8001072:	b2db      	uxtb	r3, r3
 8001074:	4619      	mov	r1, r3
 8001076:	2011      	movs	r0, #17
 8001078:	f7ff fe18 	bl	8000cac <NRF24_write_register>
}
 800107c:	bf00      	nop
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	2400020a 	.word	0x2400020a

08001088 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	460a      	mov	r2, r1
 8001092:	71fb      	strb	r3, [r7, #7]
 8001094:	4613      	mov	r3, r2
 8001096:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	011b      	lsls	r3, r3, #4
 800109c:	b25a      	sxtb	r2, r3
 800109e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80010a2:	f003 030f 	and.w	r3, r3, #15
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	4313      	orrs	r3, r2
 80010aa:	b25b      	sxtb	r3, r3
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	4619      	mov	r1, r3
 80010b0:	2004      	movs	r0, #4
 80010b2:	f7ff fdfb 	bl	8000cac <NRF24_write_register>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b084      	sub	sp, #16
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 80010c8:	237f      	movs	r3, #127	; 0x7f
 80010ca:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80010cc:	7bfa      	ldrb	r2, [r7, #15]
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	4293      	cmp	r3, r2
 80010d2:	bf28      	it	cs
 80010d4:	4613      	movcs	r3, r2
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4619      	mov	r1, r3
 80010da:	2005      	movs	r0, #5
 80010dc:	f7ff fde6 	bl	8000cac <NRF24_write_register>
}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 80010f2:	2320      	movs	r3, #32
 80010f4:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 80010f6:	7bfa      	ldrb	r2, [r7, #15]
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	4293      	cmp	r3, r2
 80010fc:	bf28      	it	cs
 80010fe:	4613      	movcs	r3, r2
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4b04      	ldr	r3, [pc, #16]	; (8001114 <NRF24_setPayloadSize+0x2c>)
 8001104:	701a      	strb	r2, [r3, #0]
}
 8001106:	bf00      	nop
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	2400020a 	.word	0x2400020a

08001118 <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 800111c:	2060      	movs	r0, #96	; 0x60
 800111e:	f7ff fd75 	bl	8000c0c <NRF24_read_register>
 8001122:	4603      	mov	r3, r0
}
 8001124:	4618      	mov	r0, r3
 8001126:	bd80      	pop	{r7, pc}

08001128 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 800112c:	201d      	movs	r0, #29
 800112e:	f7ff fd6d 	bl	8000c0c <NRF24_read_register>
 8001132:	4603      	mov	r3, r0
 8001134:	f023 0304 	bic.w	r3, r3, #4
 8001138:	b2db      	uxtb	r3, r3
 800113a:	4619      	mov	r1, r3
 800113c:	201d      	movs	r0, #29
 800113e:	f7ff fdb5 	bl	8000cac <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8001142:	2100      	movs	r1, #0
 8001144:	201c      	movs	r0, #28
 8001146:	f7ff fdb1 	bl	8000cac <NRF24_write_register>
	dynamic_payloads_enabled = false;
 800114a:	4b02      	ldr	r3, [pc, #8]	; (8001154 <NRF24_disableDynamicPayloads+0x2c>)
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	2400020b 	.word	0x2400020b

08001158 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d004      	beq.n	8001172 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8001168:	213f      	movs	r1, #63	; 0x3f
 800116a:	2001      	movs	r0, #1
 800116c:	f7ff fd9e 	bl	8000cac <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8001170:	e003      	b.n	800117a <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8001172:	2100      	movs	r1, #0
 8001174:	2001      	movs	r0, #1
 8001176:	f7ff fd99 	bl	8000cac <NRF24_write_register>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b084      	sub	sp, #16
 8001186:	af00      	add	r7, sp, #0
 8001188:	4603      	mov	r3, r0
 800118a:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800118c:	2006      	movs	r0, #6
 800118e:	f7ff fd3d 	bl	8000c0c <NRF24_read_register>
 8001192:	4603      	mov	r3, r0
 8001194:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	f023 0306 	bic.w	r3, r3, #6
 800119c:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	2b03      	cmp	r3, #3
 80011a2:	d104      	bne.n	80011ae <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
 80011a6:	f043 0306 	orr.w	r3, r3, #6
 80011aa:	73fb      	strb	r3, [r7, #15]
 80011ac:	e019      	b.n	80011e2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d104      	bne.n	80011be <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
 80011b6:	f043 0304 	orr.w	r3, r3, #4
 80011ba:	73fb      	strb	r3, [r7, #15]
 80011bc:	e011      	b.n	80011e2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d104      	bne.n	80011ce <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	f043 0302 	orr.w	r3, r3, #2
 80011ca:	73fb      	strb	r3, [r7, #15]
 80011cc:	e009      	b.n	80011e2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d006      	beq.n	80011e2 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	d103      	bne.n	80011e2 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	f043 0306 	orr.w	r3, r3, #6
 80011e0:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	4619      	mov	r1, r3
 80011e6:	2006      	movs	r0, #6
 80011e8:	f7ff fd60 	bl	8000cac <NRF24_write_register>
}
 80011ec:	bf00      	nop
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 80011fe:	2300      	movs	r3, #0
 8001200:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001202:	2006      	movs	r0, #6
 8001204:	f7ff fd02 	bl	8000c0c <NRF24_read_register>
 8001208:	4603      	mov	r3, r0
 800120a:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <NRF24_setDataRate+0x88>)
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8001212:	7bbb      	ldrb	r3, [r7, #14]
 8001214:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001218:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b02      	cmp	r3, #2
 800121e:	d107      	bne.n	8001230 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8001220:	4b16      	ldr	r3, [pc, #88]	; (800127c <NRF24_setDataRate+0x88>)
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8001226:	7bbb      	ldrb	r3, [r7, #14]
 8001228:	f043 0320 	orr.w	r3, r3, #32
 800122c:	73bb      	strb	r3, [r7, #14]
 800122e:	e00d      	b.n	800124c <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d107      	bne.n	8001246 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <NRF24_setDataRate+0x88>)
 8001238:	2201      	movs	r2, #1
 800123a:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 800123c:	7bbb      	ldrb	r3, [r7, #14]
 800123e:	f043 0308 	orr.w	r3, r3, #8
 8001242:	73bb      	strb	r3, [r7, #14]
 8001244:	e002      	b.n	800124c <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8001246:	4b0d      	ldr	r3, [pc, #52]	; (800127c <NRF24_setDataRate+0x88>)
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 800124c:	7bbb      	ldrb	r3, [r7, #14]
 800124e:	4619      	mov	r1, r3
 8001250:	2006      	movs	r0, #6
 8001252:	f7ff fd2b 	bl	8000cac <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8001256:	2006      	movs	r0, #6
 8001258:	f7ff fcd8 	bl	8000c0c <NRF24_read_register>
 800125c:	4603      	mov	r3, r0
 800125e:	461a      	mov	r2, r3
 8001260:	7bbb      	ldrb	r3, [r7, #14]
 8001262:	4293      	cmp	r3, r2
 8001264:	d102      	bne.n	800126c <NRF24_setDataRate+0x78>
  {
    result = true;
 8001266:	2301      	movs	r3, #1
 8001268:	73fb      	strb	r3, [r7, #15]
 800126a:	e002      	b.n	8001272 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <NRF24_setDataRate+0x88>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8001272:	7bfb      	ldrb	r3, [r7, #15]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	2400020c 	.word	0x2400020c

08001280 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 800128a:	2000      	movs	r0, #0
 800128c:	f7ff fcbe 	bl	8000c0c <NRF24_read_register>
 8001290:	4603      	mov	r3, r0
 8001292:	f023 030c 	bic.w	r3, r3, #12
 8001296:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d00f      	beq.n	80012be <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d104      	bne.n	80012ae <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	f043 0308 	orr.w	r3, r3, #8
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	e007      	b.n	80012be <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	f043 0308 	orr.w	r3, r3, #8
 80012b4:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	4619      	mov	r1, r3
 80012c2:	2000      	movs	r0, #0
 80012c4:	f7ff fcf2 	bl	8000cac <NRF24_write_register>
}
 80012c8:	bf00      	nop
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 80012d4:	2000      	movs	r0, #0
 80012d6:	f7ff fc99 	bl	8000c0c <NRF24_read_register>
 80012da:	4603      	mov	r3, r0
 80012dc:	f023 0302 	bic.w	r3, r3, #2
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	4619      	mov	r1, r3
 80012e4:	2000      	movs	r0, #0
 80012e6:	f7ff fce1 	bl	8000cac <NRF24_write_register>
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}

080012ee <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b084      	sub	sp, #16
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 80012f6:	f7ff fd55 	bl	8000da4 <NRF24_get_status>
 80012fa:	4603      	mov	r3, r0
 80012fc:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001304:	2b00      	cmp	r3, #0
 8001306:	bf14      	ite	ne
 8001308:	2301      	movne	r3, #1
 800130a:	2300      	moveq	r3, #0
 800130c:	73bb      	strb	r3, [r7, #14]

  if (result)
 800130e:	7bbb      	ldrb	r3, [r7, #14]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d017      	beq.n	8001344 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d007      	beq.n	800132a <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	085b      	lsrs	r3, r3, #1
 800131e:	b2db      	uxtb	r3, r3
 8001320:	f003 0307 	and.w	r3, r3, #7
 8001324:	b2da      	uxtb	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 800132a:	2140      	movs	r1, #64	; 0x40
 800132c:	2007      	movs	r0, #7
 800132e:	f7ff fcbd 	bl	8000cac <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	f003 0320 	and.w	r3, r3, #32
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 800133c:	2120      	movs	r1, #32
 800133e:	2007      	movs	r0, #7
 8001340:	f7ff fcb4 	bl	8000cac <NRF24_write_register>
    }
  }
  return result;
 8001344:	7bbb      	ldrb	r3, [r7, #14]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	460b      	mov	r3, r1
 8001358:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 800135a:	2000      	movs	r0, #0
 800135c:	f7ff fc36 	bl	8000bcc <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8001360:	2000      	movs	r0, #0
 8001362:	f7ff fc53 	bl	8000c0c <NRF24_read_register>
 8001366:	4603      	mov	r3, r0
 8001368:	f043 0302 	orr.w	r3, r3, #2
 800136c:	b2db      	uxtb	r3, r3
 800136e:	f023 0301 	bic.w	r3, r3, #1
 8001372:	b2db      	uxtb	r3, r3
 8001374:	4619      	mov	r1, r3
 8001376:	2000      	movs	r0, #0
 8001378:	f7ff fc98 	bl	8000cac <NRF24_write_register>
  NRF24_ce(1);
 800137c:	2001      	movs	r0, #1
 800137e:	f7ff fc25 	bl	8000bcc <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8001382:	2096      	movs	r0, #150	; 0x96
 8001384:	f7ff fbe2 	bl	8000b4c <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8001388:	78fb      	ldrb	r3, [r7, #3]
 800138a:	4619      	mov	r1, r3
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff fcd7 	bl	8000d40 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8001392:	2001      	movs	r0, #1
 8001394:	f7ff fc1a 	bl	8000bcc <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8001398:	200f      	movs	r0, #15
 800139a:	f7ff fbd7 	bl	8000b4c <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 800139e:	2000      	movs	r0, #0
 80013a0:	f7ff fc14 	bl	8000bcc <NRF24_ce>
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 80013b8:	f7ff fcf4 	bl	8000da4 <NRF24_get_status>
 80013bc:	4603      	mov	r3, r0
 80013be:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2200      	movs	r2, #0
 80013c4:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80013c6:	2170      	movs	r1, #112	; 0x70
 80013c8:	2007      	movs	r0, #7
 80013ca:	f7ff fc6f 	bl	8000cac <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 80013ce:	7dfb      	ldrb	r3, [r7, #23]
 80013d0:	f003 0320 	and.w	r3, r3, #32
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	bf14      	ite	ne
 80013d8:	2301      	movne	r3, #1
 80013da:	2300      	moveq	r3, #0
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 80013e2:	7dfb      	ldrb	r3, [r7, #23]
 80013e4:	f003 0310 	and.w	r3, r3, #16
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	bf14      	ite	ne
 80013ec:	2301      	movne	r3, #1
 80013ee:	2300      	moveq	r3, #0
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 80013f6:	7dfb      	ldrb	r3, [r7, #23]
 80013f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	bf14      	ite	ne
 8001400:	2301      	movne	r3, #1
 8001402:	2300      	moveq	r3, #0
 8001404:	b2da      	uxtb	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	701a      	strb	r2, [r3, #0]
}
 800140a:	bf00      	nop
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001416:	2170      	movs	r1, #112	; 0x70
 8001418:	2007      	movs	r0, #7
 800141a:	f7ff fc47 	bl	8000cac <NRF24_write_register>
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 800142a:	2000      	movs	r0, #0
 800142c:	f7ff fbae 	bl	8000b8c <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001430:	2350      	movs	r3, #80	; 0x50
 8001432:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8001434:	2373      	movs	r3, #115	; 0x73
 8001436:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8001438:	1d39      	adds	r1, r7, #4
 800143a:	2364      	movs	r3, #100	; 0x64
 800143c:	2202      	movs	r2, #2
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <NRF24_ACTIVATE_cmd+0x30>)
 8001440:	f00d fb98 	bl	800eb74 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8001444:	2001      	movs	r0, #1
 8001446:	f7ff fba1 	bl	8000b8c <NRF24_csn>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	24000218 	.word	0x24000218

08001458 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8001458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800145a:	b0a1      	sub	sp, #132	; 0x84
 800145c:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800145e:	f107 0308 	add.w	r3, r7, #8
 8001462:	4ab6      	ldr	r2, [pc, #728]	; (800173c <printRadioSettings+0x2e4>)
 8001464:	461c      	mov	r4, r3
 8001466:	4615      	mov	r5, r2
 8001468:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800146a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800146c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800146e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001470:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001472:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001474:	682b      	ldr	r3, [r5, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	8022      	strh	r2, [r4, #0]
 800147a:	3402      	adds	r4, #2
 800147c:	0c1b      	lsrs	r3, r3, #16
 800147e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001480:	f107 0308 	add.w	r3, r7, #8
 8001484:	4618      	mov	r0, r3
 8001486:	f7fe ff2b 	bl	80002e0 <strlen>
 800148a:	4603      	mov	r3, r0
 800148c:	b29a      	uxth	r2, r3
 800148e:	f107 0108 	add.w	r1, r7, #8
 8001492:	230a      	movs	r3, #10
 8001494:	48aa      	ldr	r0, [pc, #680]	; (8001740 <printRadioSettings+0x2e8>)
 8001496:	f00e fb76 	bl	800fb86 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 800149a:	2000      	movs	r0, #0
 800149c:	f7ff fbb6 	bl	8000c0c <NRF24_read_register>
 80014a0:	4603      	mov	r3, r0
 80014a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 80014a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d020      	beq.n	80014f4 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 80014b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00b      	beq.n	80014d6 <printRadioSettings+0x7e>
 80014be:	f107 0308 	add.w	r3, r7, #8
 80014c2:	4aa0      	ldr	r2, [pc, #640]	; (8001744 <printRadioSettings+0x2ec>)
 80014c4:	461c      	mov	r4, r3
 80014c6:	4615      	mov	r5, r2
 80014c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80014d4:	e017      	b.n	8001506 <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 80014d6:	f107 0308 	add.w	r3, r7, #8
 80014da:	4a9b      	ldr	r2, [pc, #620]	; (8001748 <printRadioSettings+0x2f0>)
 80014dc:	461c      	mov	r4, r3
 80014de:	4615      	mov	r5, r2
 80014e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014e8:	c403      	stmia	r4!, {r0, r1}
 80014ea:	8022      	strh	r2, [r4, #0]
 80014ec:	3402      	adds	r4, #2
 80014ee:	0c13      	lsrs	r3, r2, #16
 80014f0:	7023      	strb	r3, [r4, #0]
 80014f2:	e008      	b.n	8001506 <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80014f4:	f107 0308 	add.w	r3, r7, #8
 80014f8:	4a94      	ldr	r2, [pc, #592]	; (800174c <printRadioSettings+0x2f4>)
 80014fa:	461c      	mov	r4, r3
 80014fc:	4615      	mov	r5, r2
 80014fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001500:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001502:	682b      	ldr	r3, [r5, #0]
 8001504:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe fee8 	bl	80002e0 <strlen>
 8001510:	4603      	mov	r3, r0
 8001512:	b29a      	uxth	r2, r3
 8001514:	f107 0108 	add.w	r1, r7, #8
 8001518:	230a      	movs	r3, #10
 800151a:	4889      	ldr	r0, [pc, #548]	; (8001740 <printRadioSettings+0x2e8>)
 800151c:	f00e fb33 	bl	800fb86 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001520:	2001      	movs	r0, #1
 8001522:	f7ff fb73 	bl	8000c0c <NRF24_read_register>
 8001526:	4603      	mov	r3, r0
 8001528:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800152c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001530:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001534:	2b00      	cmp	r3, #0
 8001536:	bfcc      	ite	gt
 8001538:	2301      	movgt	r3, #1
 800153a:	2300      	movle	r3, #0
 800153c:	b2db      	uxtb	r3, r3
 800153e:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001540:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001544:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001548:	2b00      	cmp	r3, #0
 800154a:	bfcc      	ite	gt
 800154c:	2301      	movgt	r3, #1
 800154e:	2300      	movle	r3, #0
 8001550:	b2db      	uxtb	r3, r3
 8001552:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001554:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001558:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800155c:	2b00      	cmp	r3, #0
 800155e:	bfcc      	ite	gt
 8001560:	2301      	movgt	r3, #1
 8001562:	2300      	movle	r3, #0
 8001564:	b2db      	uxtb	r3, r3
 8001566:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001568:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800156c:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001570:	2b00      	cmp	r3, #0
 8001572:	bfcc      	ite	gt
 8001574:	2301      	movgt	r3, #1
 8001576:	2300      	movle	r3, #0
 8001578:	b2db      	uxtb	r3, r3
 800157a:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800157c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001580:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001584:	2b00      	cmp	r3, #0
 8001586:	bfcc      	ite	gt
 8001588:	2301      	movgt	r3, #1
 800158a:	2300      	movle	r3, #0
 800158c:	b2db      	uxtb	r3, r3
 800158e:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001590:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001594:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001598:	2b00      	cmp	r3, #0
 800159a:	bfcc      	ite	gt
 800159c:	2301      	movgt	r3, #1
 800159e:	2300      	movle	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	f107 0008 	add.w	r0, r7, #8
 80015a6:	9303      	str	r3, [sp, #12]
 80015a8:	9402      	str	r4, [sp, #8]
 80015aa:	9101      	str	r1, [sp, #4]
 80015ac:	9200      	str	r2, [sp, #0]
 80015ae:	4633      	mov	r3, r6
 80015b0:	462a      	mov	r2, r5
 80015b2:	4967      	ldr	r1, [pc, #412]	; (8001750 <printRadioSettings+0x2f8>)
 80015b4:	f018 f8d2 	bl	801975c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015b8:	f107 0308 	add.w	r3, r7, #8
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe fe8f 	bl	80002e0 <strlen>
 80015c2:	4603      	mov	r3, r0
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	f107 0108 	add.w	r1, r7, #8
 80015ca:	230a      	movs	r3, #10
 80015cc:	485c      	ldr	r0, [pc, #368]	; (8001740 <printRadioSettings+0x2e8>)
 80015ce:	f00e fada 	bl	800fb86 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 80015d2:	2002      	movs	r0, #2
 80015d4:	f7ff fb1a 	bl	8000c0c <NRF24_read_register>
 80015d8:	4603      	mov	r3, r0
 80015da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015de:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015e2:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	bfcc      	ite	gt
 80015ea:	2301      	movgt	r3, #1
 80015ec:	2300      	movle	r3, #0
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015f6:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	bfcc      	ite	gt
 80015fe:	2301      	movgt	r3, #1
 8001600:	2300      	movle	r3, #0
 8001602:	b2db      	uxtb	r3, r3
 8001604:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001606:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800160a:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800160e:	2b00      	cmp	r3, #0
 8001610:	bfcc      	ite	gt
 8001612:	2301      	movgt	r3, #1
 8001614:	2300      	movle	r3, #0
 8001616:	b2db      	uxtb	r3, r3
 8001618:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800161a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800161e:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001622:	2b00      	cmp	r3, #0
 8001624:	bfcc      	ite	gt
 8001626:	2301      	movgt	r3, #1
 8001628:	2300      	movle	r3, #0
 800162a:	b2db      	uxtb	r3, r3
 800162c:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800162e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001632:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001636:	2b00      	cmp	r3, #0
 8001638:	bfcc      	ite	gt
 800163a:	2301      	movgt	r3, #1
 800163c:	2300      	movle	r3, #0
 800163e:	b2db      	uxtb	r3, r3
 8001640:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001642:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001646:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800164a:	2b00      	cmp	r3, #0
 800164c:	bfcc      	ite	gt
 800164e:	2301      	movgt	r3, #1
 8001650:	2300      	movle	r3, #0
 8001652:	b2db      	uxtb	r3, r3
 8001654:	f107 0008 	add.w	r0, r7, #8
 8001658:	9303      	str	r3, [sp, #12]
 800165a:	9402      	str	r4, [sp, #8]
 800165c:	9101      	str	r1, [sp, #4]
 800165e:	9200      	str	r2, [sp, #0]
 8001660:	4633      	mov	r3, r6
 8001662:	462a      	mov	r2, r5
 8001664:	493b      	ldr	r1, [pc, #236]	; (8001754 <printRadioSettings+0x2fc>)
 8001666:	f018 f879 	bl	801975c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800166a:	f107 0308 	add.w	r3, r7, #8
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe fe36 	bl	80002e0 <strlen>
 8001674:	4603      	mov	r3, r0
 8001676:	b29a      	uxth	r2, r3
 8001678:	f107 0108 	add.w	r1, r7, #8
 800167c:	230a      	movs	r3, #10
 800167e:	4830      	ldr	r0, [pc, #192]	; (8001740 <printRadioSettings+0x2e8>)
 8001680:	f00e fa81 	bl	800fb86 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8001684:	2003      	movs	r0, #3
 8001686:	f7ff fac1 	bl	8000c0c <NRF24_read_register>
 800168a:	4603      	mov	r3, r0
 800168c:	f003 0303 	and.w	r3, r3, #3
 8001690:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8001694:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001698:	3302      	adds	r3, #2
 800169a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 800169e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80016a2:	f107 0308 	add.w	r3, r7, #8
 80016a6:	492c      	ldr	r1, [pc, #176]	; (8001758 <printRadioSettings+0x300>)
 80016a8:	4618      	mov	r0, r3
 80016aa:	f018 f857 	bl	801975c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016ae:	f107 0308 	add.w	r3, r7, #8
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe fe14 	bl	80002e0 <strlen>
 80016b8:	4603      	mov	r3, r0
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	f107 0108 	add.w	r1, r7, #8
 80016c0:	230a      	movs	r3, #10
 80016c2:	481f      	ldr	r0, [pc, #124]	; (8001740 <printRadioSettings+0x2e8>)
 80016c4:	f00e fa5f 	bl	800fb86 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80016c8:	2005      	movs	r0, #5
 80016ca:	f7ff fa9f 	bl	8000c0c <NRF24_read_register>
 80016ce:	4603      	mov	r3, r0
 80016d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80016d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80016dc:	f107 0308 	add.w	r3, r7, #8
 80016e0:	491e      	ldr	r1, [pc, #120]	; (800175c <printRadioSettings+0x304>)
 80016e2:	4618      	mov	r0, r3
 80016e4:	f018 f83a 	bl	801975c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016e8:	f107 0308 	add.w	r3, r7, #8
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe fdf7 	bl	80002e0 <strlen>
 80016f2:	4603      	mov	r3, r0
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	f107 0108 	add.w	r1, r7, #8
 80016fa:	230a      	movs	r3, #10
 80016fc:	4810      	ldr	r0, [pc, #64]	; (8001740 <printRadioSettings+0x2e8>)
 80016fe:	f00e fa42 	bl	800fb86 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001702:	2006      	movs	r0, #6
 8001704:	f7ff fa82 	bl	8000c0c <NRF24_read_register>
 8001708:	4603      	mov	r3, r0
 800170a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 800170e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001712:	f003 0308 	and.w	r3, r3, #8
 8001716:	2b00      	cmp	r3, #0
 8001718:	d024      	beq.n	8001764 <printRadioSettings+0x30c>
 800171a:	f107 0308 	add.w	r3, r7, #8
 800171e:	4a10      	ldr	r2, [pc, #64]	; (8001760 <printRadioSettings+0x308>)
 8001720:	461c      	mov	r4, r3
 8001722:	4615      	mov	r5, r2
 8001724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001728:	e895 0003 	ldmia.w	r5, {r0, r1}
 800172c:	6020      	str	r0, [r4, #0]
 800172e:	3404      	adds	r4, #4
 8001730:	8021      	strh	r1, [r4, #0]
 8001732:	3402      	adds	r4, #2
 8001734:	0c0b      	lsrs	r3, r1, #16
 8001736:	7023      	strb	r3, [r4, #0]
 8001738:	e023      	b.n	8001782 <printRadioSettings+0x32a>
 800173a:	bf00      	nop
 800173c:	0801a774 	.word	0x0801a774
 8001740:	240002a0 	.word	0x240002a0
 8001744:	0801a7a8 	.word	0x0801a7a8
 8001748:	0801a7c4 	.word	0x0801a7c4
 800174c:	0801a7e0 	.word	0x0801a7e0
 8001750:	0801a7f4 	.word	0x0801a7f4
 8001754:	0801a838 	.word	0x0801a838
 8001758:	0801a884 	.word	0x0801a884
 800175c:	0801a8a0 	.word	0x0801a8a0
 8001760:	0801a8b4 	.word	0x0801a8b4
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8001764:	f107 0308 	add.w	r3, r7, #8
 8001768:	4a29      	ldr	r2, [pc, #164]	; (8001810 <printRadioSettings+0x3b8>)
 800176a:	461c      	mov	r4, r3
 800176c:	4615      	mov	r5, r2
 800176e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001770:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001772:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001776:	6020      	str	r0, [r4, #0]
 8001778:	3404      	adds	r4, #4
 800177a:	8021      	strh	r1, [r4, #0]
 800177c:	3402      	adds	r4, #2
 800177e:	0c0b      	lsrs	r3, r1, #16
 8001780:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001782:	f107 0308 	add.w	r3, r7, #8
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fdaa 	bl	80002e0 <strlen>
 800178c:	4603      	mov	r3, r0
 800178e:	b29a      	uxth	r2, r3
 8001790:	f107 0108 	add.w	r1, r7, #8
 8001794:	230a      	movs	r3, #10
 8001796:	481f      	ldr	r0, [pc, #124]	; (8001814 <printRadioSettings+0x3bc>)
 8001798:	f00e f9f5 	bl	800fb86 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 800179c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017a0:	f003 0306 	and.w	r3, r3, #6
 80017a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 80017a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017ac:	085b      	lsrs	r3, r3, #1
 80017ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80017b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d109      	bne.n	80017ce <printRadioSettings+0x376>
 80017ba:	f107 0308 	add.w	r3, r7, #8
 80017be:	4a16      	ldr	r2, [pc, #88]	; (8001818 <printRadioSettings+0x3c0>)
 80017c0:	461c      	mov	r4, r3
 80017c2:	4615      	mov	r5, r2
 80017c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017c8:	682b      	ldr	r3, [r5, #0]
 80017ca:	6023      	str	r3, [r4, #0]
 80017cc:	e037      	b.n	800183e <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 80017ce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d109      	bne.n	80017ea <printRadioSettings+0x392>
 80017d6:	f107 0308 	add.w	r3, r7, #8
 80017da:	4a10      	ldr	r2, [pc, #64]	; (800181c <printRadioSettings+0x3c4>)
 80017dc:	461c      	mov	r4, r3
 80017de:	4615      	mov	r5, r2
 80017e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017e4:	682b      	ldr	r3, [r5, #0]
 80017e6:	6023      	str	r3, [r4, #0]
 80017e8:	e029      	b.n	800183e <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 80017ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d118      	bne.n	8001824 <printRadioSettings+0x3cc>
 80017f2:	f107 0308 	add.w	r3, r7, #8
 80017f6:	4a0a      	ldr	r2, [pc, #40]	; (8001820 <printRadioSettings+0x3c8>)
 80017f8:	461c      	mov	r4, r3
 80017fa:	4615      	mov	r5, r2
 80017fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001800:	682b      	ldr	r3, [r5, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	8022      	strh	r2, [r4, #0]
 8001806:	3402      	adds	r4, #2
 8001808:	0c1b      	lsrs	r3, r3, #16
 800180a:	7023      	strb	r3, [r4, #0]
 800180c:	e017      	b.n	800183e <printRadioSettings+0x3e6>
 800180e:	bf00      	nop
 8001810:	0801a8cc 	.word	0x0801a8cc
 8001814:	240002a0 	.word	0x240002a0
 8001818:	0801a8e4 	.word	0x0801a8e4
 800181c:	0801a8f8 	.word	0x0801a8f8
 8001820:	0801a90c 	.word	0x0801a90c
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001824:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001828:	2b03      	cmp	r3, #3
 800182a:	d108      	bne.n	800183e <printRadioSettings+0x3e6>
 800182c:	f107 0308 	add.w	r3, r7, #8
 8001830:	4ad7      	ldr	r2, [pc, #860]	; (8001b90 <printRadioSettings+0x738>)
 8001832:	461c      	mov	r4, r3
 8001834:	4615      	mov	r5, r2
 8001836:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001838:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800183a:	682b      	ldr	r3, [r5, #0]
 800183c:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800183e:	f107 0308 	add.w	r3, r7, #8
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe fd4c 	bl	80002e0 <strlen>
 8001848:	4603      	mov	r3, r0
 800184a:	b29a      	uxth	r2, r3
 800184c:	f107 0108 	add.w	r1, r7, #8
 8001850:	230a      	movs	r3, #10
 8001852:	48d0      	ldr	r0, [pc, #832]	; (8001b94 <printRadioSettings+0x73c>)
 8001854:	f00e f997 	bl	800fb86 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001858:	463b      	mov	r3, r7
 800185a:	2205      	movs	r2, #5
 800185c:	4619      	mov	r1, r3
 800185e:	200a      	movs	r0, #10
 8001860:	f7ff f9fc 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001864:	793b      	ldrb	r3, [r7, #4]
 8001866:	461c      	mov	r4, r3
 8001868:	78fb      	ldrb	r3, [r7, #3]
 800186a:	461d      	mov	r5, r3
 800186c:	78bb      	ldrb	r3, [r7, #2]
 800186e:	787a      	ldrb	r2, [r7, #1]
 8001870:	7839      	ldrb	r1, [r7, #0]
 8001872:	f107 0008 	add.w	r0, r7, #8
 8001876:	9102      	str	r1, [sp, #8]
 8001878:	9201      	str	r2, [sp, #4]
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	462b      	mov	r3, r5
 800187e:	4622      	mov	r2, r4
 8001880:	49c5      	ldr	r1, [pc, #788]	; (8001b98 <printRadioSettings+0x740>)
 8001882:	f017 ff6b 	bl	801975c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001886:	f107 0308 	add.w	r3, r7, #8
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fd28 	bl	80002e0 <strlen>
 8001890:	4603      	mov	r3, r0
 8001892:	b29a      	uxth	r2, r3
 8001894:	f107 0108 	add.w	r1, r7, #8
 8001898:	230a      	movs	r3, #10
 800189a:	48be      	ldr	r0, [pc, #760]	; (8001b94 <printRadioSettings+0x73c>)
 800189c:	f00e f973 	bl	800fb86 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 80018a0:	463b      	mov	r3, r7
 80018a2:	2205      	movs	r2, #5
 80018a4:	4619      	mov	r1, r3
 80018a6:	200b      	movs	r0, #11
 80018a8:	f7ff f9d8 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80018ac:	793b      	ldrb	r3, [r7, #4]
 80018ae:	461c      	mov	r4, r3
 80018b0:	78fb      	ldrb	r3, [r7, #3]
 80018b2:	461d      	mov	r5, r3
 80018b4:	78bb      	ldrb	r3, [r7, #2]
 80018b6:	787a      	ldrb	r2, [r7, #1]
 80018b8:	7839      	ldrb	r1, [r7, #0]
 80018ba:	f107 0008 	add.w	r0, r7, #8
 80018be:	9102      	str	r1, [sp, #8]
 80018c0:	9201      	str	r2, [sp, #4]
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	462b      	mov	r3, r5
 80018c6:	4622      	mov	r2, r4
 80018c8:	49b4      	ldr	r1, [pc, #720]	; (8001b9c <printRadioSettings+0x744>)
 80018ca:	f017 ff47 	bl	801975c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018ce:	f107 0308 	add.w	r3, r7, #8
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fd04 	bl	80002e0 <strlen>
 80018d8:	4603      	mov	r3, r0
 80018da:	b29a      	uxth	r2, r3
 80018dc:	f107 0108 	add.w	r1, r7, #8
 80018e0:	230a      	movs	r3, #10
 80018e2:	48ac      	ldr	r0, [pc, #688]	; (8001b94 <printRadioSettings+0x73c>)
 80018e4:	f00e f94f 	bl	800fb86 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80018e8:	463b      	mov	r3, r7
 80018ea:	2201      	movs	r2, #1
 80018ec:	4619      	mov	r1, r3
 80018ee:	200c      	movs	r0, #12
 80018f0:	f7ff f9b4 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80018f4:	783b      	ldrb	r3, [r7, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	f107 0308 	add.w	r3, r7, #8
 80018fc:	49a8      	ldr	r1, [pc, #672]	; (8001ba0 <printRadioSettings+0x748>)
 80018fe:	4618      	mov	r0, r3
 8001900:	f017 ff2c 	bl	801975c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001904:	f107 0308 	add.w	r3, r7, #8
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fce9 	bl	80002e0 <strlen>
 800190e:	4603      	mov	r3, r0
 8001910:	b29a      	uxth	r2, r3
 8001912:	f107 0108 	add.w	r1, r7, #8
 8001916:	230a      	movs	r3, #10
 8001918:	489e      	ldr	r0, [pc, #632]	; (8001b94 <printRadioSettings+0x73c>)
 800191a:	f00e f934 	bl	800fb86 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 800191e:	463b      	mov	r3, r7
 8001920:	2201      	movs	r2, #1
 8001922:	4619      	mov	r1, r3
 8001924:	200d      	movs	r0, #13
 8001926:	f7ff f999 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800192a:	783b      	ldrb	r3, [r7, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	f107 0308 	add.w	r3, r7, #8
 8001932:	499c      	ldr	r1, [pc, #624]	; (8001ba4 <printRadioSettings+0x74c>)
 8001934:	4618      	mov	r0, r3
 8001936:	f017 ff11 	bl	801975c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800193a:	f107 0308 	add.w	r3, r7, #8
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fcce 	bl	80002e0 <strlen>
 8001944:	4603      	mov	r3, r0
 8001946:	b29a      	uxth	r2, r3
 8001948:	f107 0108 	add.w	r1, r7, #8
 800194c:	230a      	movs	r3, #10
 800194e:	4891      	ldr	r0, [pc, #580]	; (8001b94 <printRadioSettings+0x73c>)
 8001950:	f00e f919 	bl	800fb86 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001954:	463b      	mov	r3, r7
 8001956:	2201      	movs	r2, #1
 8001958:	4619      	mov	r1, r3
 800195a:	200e      	movs	r0, #14
 800195c:	f7ff f97e 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001960:	783b      	ldrb	r3, [r7, #0]
 8001962:	461a      	mov	r2, r3
 8001964:	f107 0308 	add.w	r3, r7, #8
 8001968:	498f      	ldr	r1, [pc, #572]	; (8001ba8 <printRadioSettings+0x750>)
 800196a:	4618      	mov	r0, r3
 800196c:	f017 fef6 	bl	801975c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001970:	f107 0308 	add.w	r3, r7, #8
 8001974:	4618      	mov	r0, r3
 8001976:	f7fe fcb3 	bl	80002e0 <strlen>
 800197a:	4603      	mov	r3, r0
 800197c:	b29a      	uxth	r2, r3
 800197e:	f107 0108 	add.w	r1, r7, #8
 8001982:	230a      	movs	r3, #10
 8001984:	4883      	ldr	r0, [pc, #524]	; (8001b94 <printRadioSettings+0x73c>)
 8001986:	f00e f8fe 	bl	800fb86 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 800198a:	463b      	mov	r3, r7
 800198c:	2201      	movs	r2, #1
 800198e:	4619      	mov	r1, r3
 8001990:	200f      	movs	r0, #15
 8001992:	f7ff f963 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001996:	783b      	ldrb	r3, [r7, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	f107 0308 	add.w	r3, r7, #8
 800199e:	4983      	ldr	r1, [pc, #524]	; (8001bac <printRadioSettings+0x754>)
 80019a0:	4618      	mov	r0, r3
 80019a2:	f017 fedb 	bl	801975c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019a6:	f107 0308 	add.w	r3, r7, #8
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fc98 	bl	80002e0 <strlen>
 80019b0:	4603      	mov	r3, r0
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	f107 0108 	add.w	r1, r7, #8
 80019b8:	230a      	movs	r3, #10
 80019ba:	4876      	ldr	r0, [pc, #472]	; (8001b94 <printRadioSettings+0x73c>)
 80019bc:	f00e f8e3 	bl	800fb86 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80019c0:	463b      	mov	r3, r7
 80019c2:	2205      	movs	r2, #5
 80019c4:	4619      	mov	r1, r3
 80019c6:	2010      	movs	r0, #16
 80019c8:	f7ff f948 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80019cc:	793b      	ldrb	r3, [r7, #4]
 80019ce:	461c      	mov	r4, r3
 80019d0:	78fb      	ldrb	r3, [r7, #3]
 80019d2:	461d      	mov	r5, r3
 80019d4:	78bb      	ldrb	r3, [r7, #2]
 80019d6:	787a      	ldrb	r2, [r7, #1]
 80019d8:	7839      	ldrb	r1, [r7, #0]
 80019da:	f107 0008 	add.w	r0, r7, #8
 80019de:	9102      	str	r1, [sp, #8]
 80019e0:	9201      	str	r2, [sp, #4]
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	462b      	mov	r3, r5
 80019e6:	4622      	mov	r2, r4
 80019e8:	4971      	ldr	r1, [pc, #452]	; (8001bb0 <printRadioSettings+0x758>)
 80019ea:	f017 feb7 	bl	801975c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019ee:	f107 0308 	add.w	r3, r7, #8
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fc74 	bl	80002e0 <strlen>
 80019f8:	4603      	mov	r3, r0
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	f107 0108 	add.w	r1, r7, #8
 8001a00:	230a      	movs	r3, #10
 8001a02:	4864      	ldr	r0, [pc, #400]	; (8001b94 <printRadioSettings+0x73c>)
 8001a04:	f00e f8bf 	bl	800fb86 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8001a08:	2011      	movs	r0, #17
 8001a0a:	f7ff f8ff 	bl	8000c0c <NRF24_read_register>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001a14:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a18:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a1c:	f107 0308 	add.w	r3, r7, #8
 8001a20:	4964      	ldr	r1, [pc, #400]	; (8001bb4 <printRadioSettings+0x75c>)
 8001a22:	4618      	mov	r0, r3
 8001a24:	f017 fe9a 	bl	801975c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a28:	f107 0308 	add.w	r3, r7, #8
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fc57 	bl	80002e0 <strlen>
 8001a32:	4603      	mov	r3, r0
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	f107 0108 	add.w	r1, r7, #8
 8001a3a:	230a      	movs	r3, #10
 8001a3c:	4855      	ldr	r0, [pc, #340]	; (8001b94 <printRadioSettings+0x73c>)
 8001a3e:	f00e f8a2 	bl	800fb86 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8001a42:	2012      	movs	r0, #18
 8001a44:	f7ff f8e2 	bl	8000c0c <NRF24_read_register>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001a4e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a56:	f107 0308 	add.w	r3, r7, #8
 8001a5a:	4957      	ldr	r1, [pc, #348]	; (8001bb8 <printRadioSettings+0x760>)
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f017 fe7d 	bl	801975c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a62:	f107 0308 	add.w	r3, r7, #8
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fc3a 	bl	80002e0 <strlen>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	f107 0108 	add.w	r1, r7, #8
 8001a74:	230a      	movs	r3, #10
 8001a76:	4847      	ldr	r0, [pc, #284]	; (8001b94 <printRadioSettings+0x73c>)
 8001a78:	f00e f885 	bl	800fb86 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8001a7c:	2013      	movs	r0, #19
 8001a7e:	f7ff f8c5 	bl	8000c0c <NRF24_read_register>
 8001a82:	4603      	mov	r3, r0
 8001a84:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001a88:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a8c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a90:	f107 0308 	add.w	r3, r7, #8
 8001a94:	4949      	ldr	r1, [pc, #292]	; (8001bbc <printRadioSettings+0x764>)
 8001a96:	4618      	mov	r0, r3
 8001a98:	f017 fe60 	bl	801975c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a9c:	f107 0308 	add.w	r3, r7, #8
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7fe fc1d 	bl	80002e0 <strlen>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	f107 0108 	add.w	r1, r7, #8
 8001aae:	230a      	movs	r3, #10
 8001ab0:	4838      	ldr	r0, [pc, #224]	; (8001b94 <printRadioSettings+0x73c>)
 8001ab2:	f00e f868 	bl	800fb86 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8001ab6:	2014      	movs	r0, #20
 8001ab8:	f7ff f8a8 	bl	8000c0c <NRF24_read_register>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001ac2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ac6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001aca:	f107 0308 	add.w	r3, r7, #8
 8001ace:	493c      	ldr	r1, [pc, #240]	; (8001bc0 <printRadioSettings+0x768>)
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f017 fe43 	bl	801975c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ad6:	f107 0308 	add.w	r3, r7, #8
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fc00 	bl	80002e0 <strlen>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	f107 0108 	add.w	r1, r7, #8
 8001ae8:	230a      	movs	r3, #10
 8001aea:	482a      	ldr	r0, [pc, #168]	; (8001b94 <printRadioSettings+0x73c>)
 8001aec:	f00e f84b 	bl	800fb86 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8001af0:	2015      	movs	r0, #21
 8001af2:	f7ff f88b 	bl	8000c0c <NRF24_read_register>
 8001af6:	4603      	mov	r3, r0
 8001af8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001afc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b00:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b04:	f107 0308 	add.w	r3, r7, #8
 8001b08:	492e      	ldr	r1, [pc, #184]	; (8001bc4 <printRadioSettings+0x76c>)
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f017 fe26 	bl	801975c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b10:	f107 0308 	add.w	r3, r7, #8
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7fe fbe3 	bl	80002e0 <strlen>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	f107 0108 	add.w	r1, r7, #8
 8001b22:	230a      	movs	r3, #10
 8001b24:	481b      	ldr	r0, [pc, #108]	; (8001b94 <printRadioSettings+0x73c>)
 8001b26:	f00e f82e 	bl	800fb86 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8001b2a:	2016      	movs	r0, #22
 8001b2c:	f7ff f86e 	bl	8000c0c <NRF24_read_register>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001b36:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b3e:	f107 0308 	add.w	r3, r7, #8
 8001b42:	4921      	ldr	r1, [pc, #132]	; (8001bc8 <printRadioSettings+0x770>)
 8001b44:	4618      	mov	r0, r3
 8001b46:	f017 fe09 	bl	801975c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b4a:	f107 0308 	add.w	r3, r7, #8
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fbc6 	bl	80002e0 <strlen>
 8001b54:	4603      	mov	r3, r0
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	f107 0108 	add.w	r1, r7, #8
 8001b5c:	230a      	movs	r3, #10
 8001b5e:	480d      	ldr	r0, [pc, #52]	; (8001b94 <printRadioSettings+0x73c>)
 8001b60:	f00e f811 	bl	800fb86 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001b64:	201c      	movs	r0, #28
 8001b66:	f7ff f851 	bl	8000c0c <NRF24_read_register>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001b70:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b74:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	bfcc      	ite	gt
 8001b7c:	2301      	movgt	r3, #1
 8001b7e:	2300      	movle	r3, #0
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001b84:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	e01e      	b.n	8001bcc <printRadioSettings+0x774>
 8001b8e:	bf00      	nop
 8001b90:	0801a920 	.word	0x0801a920
 8001b94:	240002a0 	.word	0x240002a0
 8001b98:	0801a934 	.word	0x0801a934
 8001b9c:	0801a964 	.word	0x0801a964
 8001ba0:	0801a994 	.word	0x0801a994
 8001ba4:	0801a9bc 	.word	0x0801a9bc
 8001ba8:	0801a9e4 	.word	0x0801a9e4
 8001bac:	0801aa0c 	.word	0x0801aa0c
 8001bb0:	0801aa34 	.word	0x0801aa34
 8001bb4:	0801aa60 	.word	0x0801aa60
 8001bb8:	0801aa7c 	.word	0x0801aa7c
 8001bbc:	0801aa98 	.word	0x0801aa98
 8001bc0:	0801aab4 	.word	0x0801aab4
 8001bc4:	0801aad0 	.word	0x0801aad0
 8001bc8:	0801aaec 	.word	0x0801aaec
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	bfcc      	ite	gt
 8001bd0:	2301      	movgt	r3, #1
 8001bd2:	2300      	movle	r3, #0
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001bd8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001bdc:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	bfcc      	ite	gt
 8001be4:	2301      	movgt	r3, #1
 8001be6:	2300      	movle	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001bec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001bf0:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	bfcc      	ite	gt
 8001bf8:	2301      	movgt	r3, #1
 8001bfa:	2300      	movle	r3, #0
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001c00:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c04:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	bfcc      	ite	gt
 8001c0c:	2301      	movgt	r3, #1
 8001c0e:	2300      	movle	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001c14:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c18:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	bfcc      	ite	gt
 8001c20:	2301      	movgt	r3, #1
 8001c22:	2300      	movle	r3, #0
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	f107 0008 	add.w	r0, r7, #8
 8001c2a:	9303      	str	r3, [sp, #12]
 8001c2c:	9402      	str	r4, [sp, #8]
 8001c2e:	9101      	str	r1, [sp, #4]
 8001c30:	9200      	str	r2, [sp, #0]
 8001c32:	4633      	mov	r3, r6
 8001c34:	462a      	mov	r2, r5
 8001c36:	494a      	ldr	r1, [pc, #296]	; (8001d60 <printRadioSettings+0x908>)
 8001c38:	f017 fd90 	bl	801975c <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001c3c:	f107 0308 	add.w	r3, r7, #8
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7fe fb4d 	bl	80002e0 <strlen>
 8001c46:	4603      	mov	r3, r0
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	f107 0108 	add.w	r1, r7, #8
 8001c4e:	230a      	movs	r3, #10
 8001c50:	4844      	ldr	r0, [pc, #272]	; (8001d64 <printRadioSettings+0x90c>)
 8001c52:	f00d ff98 	bl	800fb86 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001c56:	201d      	movs	r0, #29
 8001c58:	f7fe ffd8 	bl	8000c0c <NRF24_read_register>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001c62:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00c      	beq.n	8001c88 <printRadioSettings+0x830>
 8001c6e:	f107 0308 	add.w	r3, r7, #8
 8001c72:	4a3d      	ldr	r2, [pc, #244]	; (8001d68 <printRadioSettings+0x910>)
 8001c74:	461c      	mov	r4, r3
 8001c76:	4615      	mov	r5, r2
 8001c78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c80:	6020      	str	r0, [r4, #0]
 8001c82:	3404      	adds	r4, #4
 8001c84:	8021      	strh	r1, [r4, #0]
 8001c86:	e00e      	b.n	8001ca6 <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001c88:	f107 0308 	add.w	r3, r7, #8
 8001c8c:	4a37      	ldr	r2, [pc, #220]	; (8001d6c <printRadioSettings+0x914>)
 8001c8e:	461c      	mov	r4, r3
 8001c90:	4615      	mov	r5, r2
 8001c92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c96:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c9a:	6020      	str	r0, [r4, #0]
 8001c9c:	3404      	adds	r4, #4
 8001c9e:	8021      	strh	r1, [r4, #0]
 8001ca0:	3402      	adds	r4, #2
 8001ca2:	0c0b      	lsrs	r3, r1, #16
 8001ca4:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ca6:	f107 0308 	add.w	r3, r7, #8
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe fb18 	bl	80002e0 <strlen>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	f107 0108 	add.w	r1, r7, #8
 8001cb8:	230a      	movs	r3, #10
 8001cba:	482a      	ldr	r0, [pc, #168]	; (8001d64 <printRadioSettings+0x90c>)
 8001cbc:	f00d ff63 	bl	800fb86 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001cc0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00b      	beq.n	8001ce4 <printRadioSettings+0x88c>
 8001ccc:	f107 0308 	add.w	r3, r7, #8
 8001cd0:	4a27      	ldr	r2, [pc, #156]	; (8001d70 <printRadioSettings+0x918>)
 8001cd2:	461c      	mov	r4, r3
 8001cd4:	4615      	mov	r5, r2
 8001cd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cda:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cde:	c403      	stmia	r4!, {r0, r1}
 8001ce0:	8022      	strh	r2, [r4, #0]
 8001ce2:	e00d      	b.n	8001d00 <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001ce4:	f107 0308 	add.w	r3, r7, #8
 8001ce8:	4a22      	ldr	r2, [pc, #136]	; (8001d74 <printRadioSettings+0x91c>)
 8001cea:	461c      	mov	r4, r3
 8001cec:	4615      	mov	r5, r2
 8001cee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cf2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cf6:	c403      	stmia	r4!, {r0, r1}
 8001cf8:	8022      	strh	r2, [r4, #0]
 8001cfa:	3402      	adds	r4, #2
 8001cfc:	0c13      	lsrs	r3, r2, #16
 8001cfe:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d00:	f107 0308 	add.w	r3, r7, #8
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe faeb 	bl	80002e0 <strlen>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	f107 0108 	add.w	r1, r7, #8
 8001d12:	230a      	movs	r3, #10
 8001d14:	4813      	ldr	r0, [pc, #76]	; (8001d64 <printRadioSettings+0x90c>)
 8001d16:	f00d ff36 	bl	800fb86 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001d1a:	f107 0308 	add.w	r3, r7, #8
 8001d1e:	4a16      	ldr	r2, [pc, #88]	; (8001d78 <printRadioSettings+0x920>)
 8001d20:	461c      	mov	r4, r3
 8001d22:	4615      	mov	r5, r2
 8001d24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d30:	682b      	ldr	r3, [r5, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	8022      	strh	r2, [r4, #0]
 8001d36:	3402      	adds	r4, #2
 8001d38:	0c1b      	lsrs	r3, r3, #16
 8001d3a:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d3c:	f107 0308 	add.w	r3, r7, #8
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe facd 	bl	80002e0 <strlen>
 8001d46:	4603      	mov	r3, r0
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	f107 0108 	add.w	r1, r7, #8
 8001d4e:	230a      	movs	r3, #10
 8001d50:	4804      	ldr	r0, [pc, #16]	; (8001d64 <printRadioSettings+0x90c>)
 8001d52:	f00d ff18 	bl	800fb86 <HAL_UART_Transmit>
}
 8001d56:	bf00      	nop
 8001d58:	3774      	adds	r7, #116	; 0x74
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	0801ab08 	.word	0x0801ab08
 8001d64:	240002a0 	.word	0x240002a0
 8001d68:	0801ab54 	.word	0x0801ab54
 8001d6c:	0801ab6c 	.word	0x0801ab6c
 8001d70:	0801ab84 	.word	0x0801ab84
 8001d74:	0801aba0 	.word	0x0801aba0
 8001d78:	0801a774 	.word	0x0801a774

08001d7c <WriteToBuff>:
#include <myprintf.h>


DataBuff DataBuffer = {.Data.DataBuff = 0, .counter = 0};

int WriteToBuff(char Data[], int len){
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  if(len <= 1 || len >= Bufflength){
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	dd03      	ble.n	8001d94 <WriteToBuff+0x18>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d92:	db01      	blt.n	8001d98 <WriteToBuff+0x1c>
    return 3; //Dude dont try and break it
 8001d94:	2303      	movs	r3, #3
 8001d96:	e089      	b.n	8001eac <WriteToBuff+0x130>
  }

  if(DataBuffer.counter < Bufflength && DataBuffer.counter + len >= Bufflength){
 8001d98:	4b46      	ldr	r3, [pc, #280]	; (8001eb4 <WriteToBuff+0x138>)
 8001d9a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8001d9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001da2:	d238      	bcs.n	8001e16 <WriteToBuff+0x9a>
 8001da4:	4b43      	ldr	r3, [pc, #268]	; (8001eb4 <WriteToBuff+0x138>)
 8001da6:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	4413      	add	r3, r2
 8001dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001db2:	d330      	bcc.n	8001e16 <WriteToBuff+0x9a>
    DataBuffer.counter = Bufflength;
 8001db4:	4b3f      	ldr	r3, [pc, #252]	; (8001eb4 <WriteToBuff+0x138>)
 8001db6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dba:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
    memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 8001dbe:	4b3d      	ldr	r3, [pc, #244]	; (8001eb4 <WriteToBuff+0x138>)
 8001dc0:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8001dc4:	4a3b      	ldr	r2, [pc, #236]	; (8001eb4 <WriteToBuff+0x138>)
 8001dc6:	4413      	add	r3, r2
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f017 fb49 	bl	8019464 <memcpy>
    DataBuffer.counter += len;
 8001dd2:	4b38      	ldr	r3, [pc, #224]	; (8001eb4 <WriteToBuff+0x138>)
 8001dd4:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	4413      	add	r3, r2
 8001ddc:	4a35      	ldr	r2, [pc, #212]	; (8001eb4 <WriteToBuff+0x138>)
 8001dde:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
    if(f_write(&myFILE, DataBuffer.Data.DataBuff1, sizeof(DataBuffer.Data.DataBuff1), &testByte) == 0){
 8001de2:	4b35      	ldr	r3, [pc, #212]	; (8001eb8 <WriteToBuff+0x13c>)
 8001de4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001de8:	4932      	ldr	r1, [pc, #200]	; (8001eb4 <WriteToBuff+0x138>)
 8001dea:	4834      	ldr	r0, [pc, #208]	; (8001ebc <WriteToBuff+0x140>)
 8001dec:	f016 fb89 	bl	8018502 <f_write>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10d      	bne.n	8001e12 <WriteToBuff+0x96>

      memset(DataBuffer.Data.DataBuff2, 0, sizeof(DataBuffer.Data.DataBuff2)); //Clear next buffer after writing
 8001df6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4830      	ldr	r0, [pc, #192]	; (8001ec0 <WriteToBuff+0x144>)
 8001dfe:	f017 fb3c 	bl	801947a <memset>
    	f_sync(&myFILE);
 8001e02:	482e      	ldr	r0, [pc, #184]	; (8001ebc <WriteToBuff+0x140>)
 8001e04:	f016 fcf2 	bl	80187ec <f_sync>
      printf("Buffer 1 has been written\n");
 8001e08:	482e      	ldr	r0, [pc, #184]	; (8001ec4 <WriteToBuff+0x148>)
 8001e0a:	f017 fc5b 	bl	80196c4 <puts>
      return 1; //buffer 1 has been written
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e04c      	b.n	8001eac <WriteToBuff+0x130>
    }
    return 4; //could not write :(
 8001e12:	2304      	movs	r3, #4
 8001e14:	e04a      	b.n	8001eac <WriteToBuff+0x130>
  }

  if(DataBuffer.counter + len >= 2*Bufflength){
 8001e16:	4b27      	ldr	r3, [pc, #156]	; (8001eb4 <WriteToBuff+0x138>)
 8001e18:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e24:	d32f      	bcc.n	8001e86 <WriteToBuff+0x10a>
    DataBuffer.counter = 0;
 8001e26:	4b23      	ldr	r3, [pc, #140]	; (8001eb4 <WriteToBuff+0x138>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
    memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 8001e2e:	4b21      	ldr	r3, [pc, #132]	; (8001eb4 <WriteToBuff+0x138>)
 8001e30:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8001e34:	4a1f      	ldr	r2, [pc, #124]	; (8001eb4 <WriteToBuff+0x138>)
 8001e36:	4413      	add	r3, r2
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f017 fb11 	bl	8019464 <memcpy>
    DataBuffer.counter += len;
 8001e42:	4b1c      	ldr	r3, [pc, #112]	; (8001eb4 <WriteToBuff+0x138>)
 8001e44:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	4a19      	ldr	r2, [pc, #100]	; (8001eb4 <WriteToBuff+0x138>)
 8001e4e:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
    if(f_write(&myFILE, DataBuffer.Data.DataBuff2, sizeof(DataBuffer.Data.DataBuff2), &testByte) == 0){
 8001e52:	4b19      	ldr	r3, [pc, #100]	; (8001eb8 <WriteToBuff+0x13c>)
 8001e54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e58:	4919      	ldr	r1, [pc, #100]	; (8001ec0 <WriteToBuff+0x144>)
 8001e5a:	4818      	ldr	r0, [pc, #96]	; (8001ebc <WriteToBuff+0x140>)
 8001e5c:	f016 fb51 	bl	8018502 <f_write>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10d      	bne.n	8001e82 <WriteToBuff+0x106>
      memset(DataBuffer.Data.DataBuff1, 0, sizeof(DataBuffer.Data.DataBuff1)); //Clear next buffer after writing
 8001e66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	4811      	ldr	r0, [pc, #68]	; (8001eb4 <WriteToBuff+0x138>)
 8001e6e:	f017 fb04 	bl	801947a <memset>
    	f_sync(&myFILE);
 8001e72:	4812      	ldr	r0, [pc, #72]	; (8001ebc <WriteToBuff+0x140>)
 8001e74:	f016 fcba 	bl	80187ec <f_sync>
      printf("Buffer 2 has been written\n");
 8001e78:	4813      	ldr	r0, [pc, #76]	; (8001ec8 <WriteToBuff+0x14c>)
 8001e7a:	f017 fc23 	bl	80196c4 <puts>
      return 2; //buffer 2 has been written
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e014      	b.n	8001eac <WriteToBuff+0x130>
    }
    return 4; //could not write :(
 8001e82:	2304      	movs	r3, #4
 8001e84:	e012      	b.n	8001eac <WriteToBuff+0x130>
  }
/*if(DataBuffer.counter + len >= 2*Bufflength){
	f_write(&myFILE, DataBuffer.Data.DataBuff, sizeof(DataBuffer.Data.DataBuff), &testByte);
	DataBuffer.counter = 0;
}*/
  memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 8001e86:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <WriteToBuff+0x138>)
 8001e88:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8001e8c:	4a09      	ldr	r2, [pc, #36]	; (8001eb4 <WriteToBuff+0x138>)
 8001e8e:	4413      	add	r3, r2
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f017 fae5 	bl	8019464 <memcpy>
  DataBuffer.counter += len;
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <WriteToBuff+0x138>)
 8001e9c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	4a03      	ldr	r2, [pc, #12]	; (8001eb4 <WriteToBuff+0x138>)
 8001ea6:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
  return 0; //moved data to buffer
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	2400032c 	.word	0x2400032c
 8001eb8:	240010d0 	.word	0x240010d0
 8001ebc:	24000b98 	.word	0x24000b98
 8001ec0:	2400072c 	.word	0x2400072c
 8001ec4:	0801acb8 	.word	0x0801acb8
 8001ec8:	0801acd4 	.word	0x0801acd4

08001ecc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ed0:	f5ad 5def 	sub.w	sp, sp, #7648	; 0x1de0
 8001ed4:	b086      	sub	sp, #24
 8001ed6:	af22      	add	r7, sp, #136	; 0x88
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ed8:	f002 fae8 	bl	80044ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001edc:	f001 fa14 	bl	8003308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ee0:	f001 fd74 	bl	80039cc <MX_GPIO_Init>
  MX_DMA_Init();
 8001ee4:	f001 fd52 	bl	800398c <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8001ee8:	f001 fc40 	bl	800376c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8001eec:	f011 f980 	bl	80131f0 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8001ef0:	f016 fd80 	bl	80189f4 <MX_USB_DEVICE_Init>
  MX_FDCAN1_Init();
 8001ef4:	f001 fb12 	bl	800351c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8001ef8:	f001 fb76 	bl	80035e8 <MX_FDCAN2_Init>
  MX_UART8_Init();
 8001efc:	f001 fcae 	bl	800385c <MX_UART8_Init>
  MX_USART3_UART_Init();
 8001f00:	f001 fcf8 	bl	80038f4 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001f04:	f001 fc54 	bl	80037b0 <MX_SPI1_Init>
  MX_RTC_Init();
 8001f08:	f001 fbd2 	bl	80036b0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //HAL_Delay(1000);//NEEDED FOR USB MASS STORAGE TO WORK
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	489f      	ldr	r0, [pc, #636]	; (800218c <main+0x2c0>)
 8001f10:	f006 f891 	bl	8008036 <HAL_GPIO_TogglePin>
  //Telemetry
  NRF24_begin(TELE_CE_GPIO_Port, TELE_CS_Pin, TELE_CE_Pin, hspi1);
 8001f14:	4c9e      	ldr	r4, [pc, #632]	; (8002190 <main+0x2c4>)
 8001f16:	4668      	mov	r0, sp
 8001f18:	1d23      	adds	r3, r4, #4
 8001f1a:	2284      	movs	r2, #132	; 0x84
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f017 faa1 	bl	8019464 <memcpy>
 8001f22:	6823      	ldr	r3, [r4, #0]
 8001f24:	2201      	movs	r2, #1
 8001f26:	2102      	movs	r1, #2
 8001f28:	489a      	ldr	r0, [pc, #616]	; (8002194 <main+0x2c8>)
 8001f2a:	f7fe ff49 	bl	8000dc0 <NRF24_begin>
    //nrf24_DebugUART_Init(huart3);



    // TRANSMIT NO ACK //
    NRF24_stopListening();
 8001f2e:	f7ff f827 	bl	8000f80 <NRF24_stopListening>
    NRF24_openWritingPipe(TxpipeAddrs);
 8001f32:	4b99      	ldr	r3, [pc, #612]	; (8002198 <main+0x2cc>)
 8001f34:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	4621      	mov	r1, r4
 8001f3c:	f7ff f880 	bl	8001040 <NRF24_openWritingPipe>
    NRF24_setAutoAck(false);
 8001f40:	2000      	movs	r0, #0
 8001f42:	f7ff f909 	bl	8001158 <NRF24_setAutoAck>
    NRF24_setChannel(42);
 8001f46:	202a      	movs	r0, #42	; 0x2a
 8001f48:	f7ff f8b9 	bl	80010be <NRF24_setChannel>
    NRF24_setPayloadSize(32);
 8001f4c:	2020      	movs	r0, #32
 8001f4e:	f7ff f8cb 	bl	80010e8 <NRF24_setPayloadSize>

    printRadioSettings();
 8001f52:	f7ff fa81 	bl	8001458 <printRadioSettings>
  //END Telemetry
  printf("Starting\n");
 8001f56:	4891      	ldr	r0, [pc, #580]	; (800219c <main+0x2d0>)
 8001f58:	f017 fbb4 	bl	80196c4 <puts>
  FDCAN_Config(&hfdcan1);
 8001f5c:	4890      	ldr	r0, [pc, #576]	; (80021a0 <main+0x2d4>)
 8001f5e:	f7fe fb97 	bl	8000690 <FDCAN_Config>
  //GPS DMA
  HAL_UART_Receive_DMA(&huart3, (uint8_t *)rxBuf, BUFFLENGTH);
 8001f62:	2228      	movs	r2, #40	; 0x28
 8001f64:	498f      	ldr	r1, [pc, #572]	; (80021a4 <main+0x2d8>)
 8001f66:	4890      	ldr	r0, [pc, #576]	; (80021a8 <main+0x2dc>)
 8001f68:	f00d fea4 	bl	800fcb4 <HAL_UART_Receive_DMA>
  HAL_Delay(1000);//GPS required this in testing, maybe remove?
 8001f6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f70:	f002 fb2e 	bl	80045d0 <HAL_Delay>
  //variables required for 10Hz GPS
  uint16_t measRate = 100;
 8001f74:	2364      	movs	r3, #100	; 0x64
 8001f76:	f641 5226 	movw	r2, #7462	; 0x1d26
 8001f7a:	443a      	add	r2, r7
 8001f7c:	8013      	strh	r3, [r2, #0]
  uint16_t navRate = 1;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	f641 5224 	movw	r2, #7460	; 0x1d24
 8001f84:	443a      	add	r2, r7
 8001f86:	8013      	strh	r3, [r2, #0]
  uint16_t timeRef = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f641 5222 	movw	r2, #7458	; 0x1d22
 8001f8e:	443a      	add	r2, r7
 8001f90:	8013      	strh	r3, [r2, #0]
  gps_rate_config(&huart3, measRate, navRate, timeRef);
 8001f92:	f641 5322 	movw	r3, #7458	; 0x1d22
 8001f96:	443b      	add	r3, r7
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	f641 5224 	movw	r2, #7460	; 0x1d24
 8001f9e:	443a      	add	r2, r7
 8001fa0:	8812      	ldrh	r2, [r2, #0]
 8001fa2:	f641 5126 	movw	r1, #7462	; 0x1d26
 8001fa6:	4439      	add	r1, r7
 8001fa8:	8809      	ldrh	r1, [r1, #0]
 8001faa:	487f      	ldr	r0, [pc, #508]	; (80021a8 <main+0x2dc>)
 8001fac:	f7fe fd5a 	bl	8000a64 <gps_rate_config>

  gps_msg_config(&huart3, "DTM", 0);//ERROR
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	497e      	ldr	r1, [pc, #504]	; (80021ac <main+0x2e0>)
 8001fb4:	487c      	ldr	r0, [pc, #496]	; (80021a8 <main+0x2dc>)
 8001fb6:	f7fe fce5 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GAQ", 0);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	497c      	ldr	r1, [pc, #496]	; (80021b0 <main+0x2e4>)
 8001fbe:	487a      	ldr	r0, [pc, #488]	; (80021a8 <main+0x2dc>)
 8001fc0:	f7fe fce0 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GBQ", 0);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	497b      	ldr	r1, [pc, #492]	; (80021b4 <main+0x2e8>)
 8001fc8:	4877      	ldr	r0, [pc, #476]	; (80021a8 <main+0x2dc>)
 8001fca:	f7fe fcdb 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GBS", 0);//ERROR
 8001fce:	2200      	movs	r2, #0
 8001fd0:	4979      	ldr	r1, [pc, #484]	; (80021b8 <main+0x2ec>)
 8001fd2:	4875      	ldr	r0, [pc, #468]	; (80021a8 <main+0x2dc>)
 8001fd4:	f7fe fcd6 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GGA", 0);//ERROR
 8001fd8:	2200      	movs	r2, #0
 8001fda:	4978      	ldr	r1, [pc, #480]	; (80021bc <main+0x2f0>)
 8001fdc:	4872      	ldr	r0, [pc, #456]	; (80021a8 <main+0x2dc>)
 8001fde:	f7fe fcd1 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GLL", 0);//ERROR
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	4976      	ldr	r1, [pc, #472]	; (80021c0 <main+0x2f4>)
 8001fe6:	4870      	ldr	r0, [pc, #448]	; (80021a8 <main+0x2dc>)
 8001fe8:	f7fe fccc 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GLQ", 0);
 8001fec:	2200      	movs	r2, #0
 8001fee:	4975      	ldr	r1, [pc, #468]	; (80021c4 <main+0x2f8>)
 8001ff0:	486d      	ldr	r0, [pc, #436]	; (80021a8 <main+0x2dc>)
 8001ff2:	f7fe fcc7 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GNQ", 0);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	4973      	ldr	r1, [pc, #460]	; (80021c8 <main+0x2fc>)
 8001ffa:	486b      	ldr	r0, [pc, #428]	; (80021a8 <main+0x2dc>)
 8001ffc:	f7fe fcc2 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GNS", 0);//ERROR
 8002000:	2200      	movs	r2, #0
 8002002:	4972      	ldr	r1, [pc, #456]	; (80021cc <main+0x300>)
 8002004:	4868      	ldr	r0, [pc, #416]	; (80021a8 <main+0x2dc>)
 8002006:	f7fe fcbd 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GPQ", 0);
 800200a:	2200      	movs	r2, #0
 800200c:	4970      	ldr	r1, [pc, #448]	; (80021d0 <main+0x304>)
 800200e:	4866      	ldr	r0, [pc, #408]	; (80021a8 <main+0x2dc>)
 8002010:	f7fe fcb8 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GRS", 0);//ERROR
 8002014:	2200      	movs	r2, #0
 8002016:	496f      	ldr	r1, [pc, #444]	; (80021d4 <main+0x308>)
 8002018:	4863      	ldr	r0, [pc, #396]	; (80021a8 <main+0x2dc>)
 800201a:	f7fe fcb3 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GSA", 0);//ERROR
 800201e:	2200      	movs	r2, #0
 8002020:	496d      	ldr	r1, [pc, #436]	; (80021d8 <main+0x30c>)
 8002022:	4861      	ldr	r0, [pc, #388]	; (80021a8 <main+0x2dc>)
 8002024:	f7fe fcae 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GST", 0);//ERROR
 8002028:	2200      	movs	r2, #0
 800202a:	496c      	ldr	r1, [pc, #432]	; (80021dc <main+0x310>)
 800202c:	485e      	ldr	r0, [pc, #376]	; (80021a8 <main+0x2dc>)
 800202e:	f7fe fca9 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GSV", 0);//ERROR
 8002032:	2200      	movs	r2, #0
 8002034:	496a      	ldr	r1, [pc, #424]	; (80021e0 <main+0x314>)
 8002036:	485c      	ldr	r0, [pc, #368]	; (80021a8 <main+0x2dc>)
 8002038:	f7fe fca4 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "RLM", 0);
 800203c:	2200      	movs	r2, #0
 800203e:	4969      	ldr	r1, [pc, #420]	; (80021e4 <main+0x318>)
 8002040:	4859      	ldr	r0, [pc, #356]	; (80021a8 <main+0x2dc>)
 8002042:	f7fe fc9f 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "RMC", 1);//ERROR
 8002046:	2201      	movs	r2, #1
 8002048:	4967      	ldr	r1, [pc, #412]	; (80021e8 <main+0x31c>)
 800204a:	4857      	ldr	r0, [pc, #348]	; (80021a8 <main+0x2dc>)
 800204c:	f7fe fc9a 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "TXT", 0);
 8002050:	2200      	movs	r2, #0
 8002052:	4966      	ldr	r1, [pc, #408]	; (80021ec <main+0x320>)
 8002054:	4854      	ldr	r0, [pc, #336]	; (80021a8 <main+0x2dc>)
 8002056:	f7fe fc95 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "VLW", 0);//ERROR
 800205a:	2200      	movs	r2, #0
 800205c:	4964      	ldr	r1, [pc, #400]	; (80021f0 <main+0x324>)
 800205e:	4852      	ldr	r0, [pc, #328]	; (80021a8 <main+0x2dc>)
 8002060:	f7fe fc90 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "VTG", 0);//ERROR
 8002064:	2200      	movs	r2, #0
 8002066:	4963      	ldr	r1, [pc, #396]	; (80021f4 <main+0x328>)
 8002068:	484f      	ldr	r0, [pc, #316]	; (80021a8 <main+0x2dc>)
 800206a:	f7fe fc8b 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "ZDA", 0);//ERROR
 800206e:	2200      	movs	r2, #0
 8002070:	4961      	ldr	r1, [pc, #388]	; (80021f8 <main+0x32c>)
 8002072:	484d      	ldr	r0, [pc, #308]	; (80021a8 <main+0x2dc>)
 8002074:	f7fe fc86 	bl	8000984 <gps_msg_config>

  if(f_mount(&myFATAFS, SDPath, 1) == FR_OK){
 8002078:	2201      	movs	r2, #1
 800207a:	4960      	ldr	r1, [pc, #384]	; (80021fc <main+0x330>)
 800207c:	4860      	ldr	r0, [pc, #384]	; (8002200 <main+0x334>)
 800207e:	f015 fefd 	bl	8017e7c <f_mount>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	f040 814d 	bne.w	8002324 <main+0x458>
  	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
  	  char Filename[20] = "test";
 800208a:	4a5e      	ldr	r2, [pc, #376]	; (8002204 <main+0x338>)
 800208c:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002090:	443b      	add	r3, r7
 8002092:	441a      	add	r2, r3
 8002094:	495c      	ldr	r1, [pc, #368]	; (8002208 <main+0x33c>)
 8002096:	4613      	mov	r3, r2
 8002098:	c903      	ldmia	r1, {r0, r1}
 800209a:	6018      	str	r0, [r3, #0]
 800209c:	3304      	adds	r3, #4
 800209e:	7019      	strb	r1, [r3, #0]
 80020a0:	1d53      	adds	r3, r2, #5
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	605a      	str	r2, [r3, #4]
 80020a8:	609a      	str	r2, [r3, #8]
 80020aa:	f8c3 200b 	str.w	r2, [r3, #11]
      char FilePath[150];
      char ConfigPath[] ="Config.csv\0";
 80020ae:	4b57      	ldr	r3, [pc, #348]	; (800220c <main+0x340>)
 80020b0:	f641 5270 	movw	r2, #7536	; 0x1d70
 80020b4:	443a      	add	r2, r7
 80020b6:	4413      	add	r3, r2
 80020b8:	4a55      	ldr	r2, [pc, #340]	; (8002210 <main+0x344>)
 80020ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80020bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      char ConfigParams[1000];

      //Tries to open config File
      if(f_open(&Config, ConfigPath, FA_READ) == FR_NO_FILE){
 80020c0:	4b52      	ldr	r3, [pc, #328]	; (800220c <main+0x340>)
 80020c2:	f641 5270 	movw	r2, #7536	; 0x1d70
 80020c6:	443a      	add	r2, r7
 80020c8:	4413      	add	r3, r2
 80020ca:	2201      	movs	r2, #1
 80020cc:	4619      	mov	r1, r3
 80020ce:	4851      	ldr	r0, [pc, #324]	; (8002214 <main+0x348>)
 80020d0:	f015 ff1a 	bl	8017f08 <f_open>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	f040 80a6 	bne.w	8002228 <main+0x35c>
        //If file doesnt exist creates a file using hard coded defualts and passes those to internal config array
        f_open(&Config, ConfigPath, FA_WRITE | FA_CREATE_ALWAYS);
 80020dc:	4b4b      	ldr	r3, [pc, #300]	; (800220c <main+0x340>)
 80020de:	f641 5270 	movw	r2, #7536	; 0x1d70
 80020e2:	443a      	add	r2, r7
 80020e4:	4413      	add	r3, r2
 80020e6:	220a      	movs	r2, #10
 80020e8:	4619      	mov	r1, r3
 80020ea:	484a      	ldr	r0, [pc, #296]	; (8002214 <main+0x348>)
 80020ec:	f015 ff0c 	bl	8017f08 <f_open>

        sprintf(ConfigParams, "ID,Device,Bytes,Rate(HZ),Type,Description\n");
 80020f0:	4b49      	ldr	r3, [pc, #292]	; (8002218 <main+0x34c>)
 80020f2:	f641 5270 	movw	r2, #7536	; 0x1d70
 80020f6:	443a      	add	r2, r7
 80020f8:	4413      	add	r3, r2
 80020fa:	4a48      	ldr	r2, [pc, #288]	; (800221c <main+0x350>)
 80020fc:	461c      	mov	r4, r3
 80020fe:	4615      	mov	r5, r2
 8002100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002108:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800210c:	c403      	stmia	r4!, {r0, r1}
 800210e:	8022      	strh	r2, [r4, #0]
 8002110:	3402      	adds	r4, #2
 8002112:	0c13      	lsrs	r3, r2, #16
 8002114:	7023      	strb	r3, [r4, #0]
        sprintf(ConfigParams + strlen(ConfigParams),"0x50,Datalogger,8,0.20,uint32_t,HIGH:FileNO LOW:millis,\n");
 8002116:	4b40      	ldr	r3, [pc, #256]	; (8002218 <main+0x34c>)
 8002118:	f641 5270 	movw	r2, #7536	; 0x1d70
 800211c:	443a      	add	r2, r7
 800211e:	4413      	add	r3, r2
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe f8dd 	bl	80002e0 <strlen>
 8002126:	4602      	mov	r2, r0
 8002128:	4b3b      	ldr	r3, [pc, #236]	; (8002218 <main+0x34c>)
 800212a:	f641 5170 	movw	r1, #7536	; 0x1d70
 800212e:	4439      	add	r1, r7
 8002130:	440b      	add	r3, r1
 8002132:	4413      	add	r3, r2
 8002134:	4a3a      	ldr	r2, [pc, #232]	; (8002220 <main+0x354>)
 8002136:	4614      	mov	r4, r2
 8002138:	469c      	mov	ip, r3
 800213a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800213e:	4665      	mov	r5, ip
 8002140:	4626      	mov	r6, r4
 8002142:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002144:	6028      	str	r0, [r5, #0]
 8002146:	6069      	str	r1, [r5, #4]
 8002148:	60aa      	str	r2, [r5, #8]
 800214a:	60eb      	str	r3, [r5, #12]
 800214c:	3410      	adds	r4, #16
 800214e:	f10c 0c10 	add.w	ip, ip, #16
 8002152:	4574      	cmp	r4, lr
 8002154:	d1f3      	bne.n	800213e <main+0x272>
 8002156:	4662      	mov	r2, ip
 8002158:	4623      	mov	r3, r4
 800215a:	cb03      	ldmia	r3!, {r0, r1}
 800215c:	6010      	str	r0, [r2, #0]
 800215e:	6051      	str	r1, [r2, #4]
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	7213      	strb	r3, [r2, #8]

        f_write(&Config, ConfigParams, strlen(ConfigParams), &ConfByteW);
 8002164:	4b2c      	ldr	r3, [pc, #176]	; (8002218 <main+0x34c>)
 8002166:	f641 5270 	movw	r2, #7536	; 0x1d70
 800216a:	443a      	add	r2, r7
 800216c:	4413      	add	r3, r2
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe f8b6 	bl	80002e0 <strlen>
 8002174:	4602      	mov	r2, r0
 8002176:	4928      	ldr	r1, [pc, #160]	; (8002218 <main+0x34c>)
 8002178:	f641 5370 	movw	r3, #7536	; 0x1d70
 800217c:	443b      	add	r3, r7
 800217e:	4419      	add	r1, r3
 8002180:	4b28      	ldr	r3, [pc, #160]	; (8002224 <main+0x358>)
 8002182:	4824      	ldr	r0, [pc, #144]	; (8002214 <main+0x348>)
 8002184:	f016 f9bd 	bl	8018502 <f_write>
 8002188:	e060      	b.n	800224c <main+0x380>
 800218a:	bf00      	nop
 800218c:	58020400 	.word	0x58020400
 8002190:	24001620 	.word	0x24001620
 8002194:	58020000 	.word	0x58020000
 8002198:	24000000 	.word	0x24000000
 800219c:	0801acf0 	.word	0x0801acf0
 80021a0:	240014f4 	.word	0x240014f4
 80021a4:	24001304 	.word	0x24001304
 80021a8:	240013a4 	.word	0x240013a4
 80021ac:	0801acfc 	.word	0x0801acfc
 80021b0:	0801ad00 	.word	0x0801ad00
 80021b4:	0801ad04 	.word	0x0801ad04
 80021b8:	0801ad08 	.word	0x0801ad08
 80021bc:	0801ad0c 	.word	0x0801ad0c
 80021c0:	0801ad10 	.word	0x0801ad10
 80021c4:	0801ad14 	.word	0x0801ad14
 80021c8:	0801ad18 	.word	0x0801ad18
 80021cc:	0801ad1c 	.word	0x0801ad1c
 80021d0:	0801ad20 	.word	0x0801ad20
 80021d4:	0801ad24 	.word	0x0801ad24
 80021d8:	0801ad28 	.word	0x0801ad28
 80021dc:	0801ad2c 	.word	0x0801ad2c
 80021e0:	0801ad30 	.word	0x0801ad30
 80021e4:	0801ad34 	.word	0x0801ad34
 80021e8:	0801ad38 	.word	0x0801ad38
 80021ec:	0801ad3c 	.word	0x0801ad3c
 80021f0:	0801ad40 	.word	0x0801ad40
 80021f4:	0801ad44 	.word	0x0801ad44
 80021f8:	0801ad48 	.word	0x0801ad48
 80021fc:	24001750 	.word	0x24001750
 8002200:	24000dd0 	.word	0x24000dd0
 8002204:	ffffe744 	.word	0xffffe744
 8002208:	0801ae10 	.word	0x0801ae10
 800220c:	ffffe738 	.word	0xffffe738
 8002210:	0801ae24 	.word	0x0801ae24
 8002214:	240010d4 	.word	0x240010d4
 8002218:	ffffe328 	.word	0xffffe328
 800221c:	0801ad4c 	.word	0x0801ad4c
 8002220:	0801ad78 	.word	0x0801ad78
 8002224:	24000dcc 	.word	0x24000dcc
      }else{
        //If file does exist reads in config parameters to internal config array
        f_read(&Config, ConfigParams, strlen(ConfigParams), &ConfByteR);
 8002228:	4bb7      	ldr	r3, [pc, #732]	; (8002508 <main+0x63c>)
 800222a:	f641 5270 	movw	r2, #7536	; 0x1d70
 800222e:	443a      	add	r2, r7
 8002230:	4413      	add	r3, r2
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe f854 	bl	80002e0 <strlen>
 8002238:	4602      	mov	r2, r0
 800223a:	49b3      	ldr	r1, [pc, #716]	; (8002508 <main+0x63c>)
 800223c:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002240:	443b      	add	r3, r7
 8002242:	4419      	add	r1, r3
 8002244:	4bb1      	ldr	r3, [pc, #708]	; (800250c <main+0x640>)
 8002246:	48b2      	ldr	r0, [pc, #712]	; (8002510 <main+0x644>)
 8002248:	f016 f81c 	bl	8018284 <f_read>
      }
      f_close(&Config);
 800224c:	48b0      	ldr	r0, [pc, #704]	; (8002510 <main+0x644>)
 800224e:	f016 fb4b 	bl	80188e8 <f_close>
      //MAKE NEW FILE INCREMENTED BY 1
      
      strcpy(FilePath,Filename);
 8002252:	4ab0      	ldr	r2, [pc, #704]	; (8002514 <main+0x648>)
 8002254:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002258:	443b      	add	r3, r7
 800225a:	441a      	add	r2, r3
 800225c:	4bae      	ldr	r3, [pc, #696]	; (8002518 <main+0x64c>)
 800225e:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002262:	4439      	add	r1, r7
 8002264:	440b      	add	r3, r1
 8002266:	4611      	mov	r1, r2
 8002268:	4618      	mov	r0, r3
 800226a:	f017 fa97 	bl	801979c <strcpy>
      int FilePathLen = strlen(Filename);
 800226e:	4ba9      	ldr	r3, [pc, #676]	; (8002514 <main+0x648>)
 8002270:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002274:	443a      	add	r2, r7
 8002276:	4413      	add	r3, r2
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe f831 	bl	80002e0 <strlen>
 800227e:	4603      	mov	r3, r0
 8002280:	f641 521c 	movw	r2, #7452	; 0x1d1c
 8002284:	443a      	add	r2, r7
 8002286:	6013      	str	r3, [r2, #0]
      sprintf(FilePath + FilePathLen, "%i.csv",fileNum);
 8002288:	f641 531c 	movw	r3, #7452	; 0x1d1c
 800228c:	443b      	add	r3, r7
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4ba1      	ldr	r3, [pc, #644]	; (8002518 <main+0x64c>)
 8002292:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002296:	4439      	add	r1, r7
 8002298:	440b      	add	r3, r1
 800229a:	1898      	adds	r0, r3, r2
 800229c:	4b9f      	ldr	r3, [pc, #636]	; (800251c <main+0x650>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	461a      	mov	r2, r3
 80022a2:	499f      	ldr	r1, [pc, #636]	; (8002520 <main+0x654>)
 80022a4:	f017 fa5a 	bl	801975c <siprintf>
      while(f_open(&myFILE, FilePath, FA_READ) == FR_OK){
 80022a8:	e025      	b.n	80022f6 <main+0x42a>
    	  f_close(&myFILE);
 80022aa:	489e      	ldr	r0, [pc, #632]	; (8002524 <main+0x658>)
 80022ac:	f016 fb1c 	bl	80188e8 <f_close>
        fileNum++;
 80022b0:	4b9a      	ldr	r3, [pc, #616]	; (800251c <main+0x650>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	3301      	adds	r3, #1
 80022b6:	4a99      	ldr	r2, [pc, #612]	; (800251c <main+0x650>)
 80022b8:	6013      	str	r3, [r2, #0]
        strcpy(FilePath,Filename);
 80022ba:	4a96      	ldr	r2, [pc, #600]	; (8002514 <main+0x648>)
 80022bc:	f641 5370 	movw	r3, #7536	; 0x1d70
 80022c0:	443b      	add	r3, r7
 80022c2:	441a      	add	r2, r3
 80022c4:	4b94      	ldr	r3, [pc, #592]	; (8002518 <main+0x64c>)
 80022c6:	f641 5170 	movw	r1, #7536	; 0x1d70
 80022ca:	4439      	add	r1, r7
 80022cc:	440b      	add	r3, r1
 80022ce:	4611      	mov	r1, r2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f017 fa63 	bl	801979c <strcpy>
        sprintf(FilePath + FilePathLen, "%i.csv",fileNum);
 80022d6:	f641 531c 	movw	r3, #7452	; 0x1d1c
 80022da:	443b      	add	r3, r7
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	4b8e      	ldr	r3, [pc, #568]	; (8002518 <main+0x64c>)
 80022e0:	f641 5170 	movw	r1, #7536	; 0x1d70
 80022e4:	4439      	add	r1, r7
 80022e6:	440b      	add	r3, r1
 80022e8:	1898      	adds	r0, r3, r2
 80022ea:	4b8c      	ldr	r3, [pc, #560]	; (800251c <main+0x650>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	498b      	ldr	r1, [pc, #556]	; (8002520 <main+0x654>)
 80022f2:	f017 fa33 	bl	801975c <siprintf>
      while(f_open(&myFILE, FilePath, FA_READ) == FR_OK){
 80022f6:	4b88      	ldr	r3, [pc, #544]	; (8002518 <main+0x64c>)
 80022f8:	f641 5270 	movw	r2, #7536	; 0x1d70
 80022fc:	443a      	add	r2, r7
 80022fe:	4413      	add	r3, r2
 8002300:	2201      	movs	r2, #1
 8002302:	4619      	mov	r1, r3
 8002304:	4887      	ldr	r0, [pc, #540]	; (8002524 <main+0x658>)
 8002306:	f015 fdff 	bl	8017f08 <f_open>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0cc      	beq.n	80022aa <main+0x3de>
      }
      f_open(&myFILE, FilePath, FA_WRITE | FA_CREATE_ALWAYS);
 8002310:	4b81      	ldr	r3, [pc, #516]	; (8002518 <main+0x64c>)
 8002312:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002316:	443a      	add	r2, r7
 8002318:	4413      	add	r3, r2
 800231a:	220a      	movs	r2, #10
 800231c:	4619      	mov	r1, r3
 800231e:	4881      	ldr	r0, [pc, #516]	; (8002524 <main+0x658>)
 8002320:	f015 fdf2 	bl	8017f08 <f_open>
  extern int GPS_flag;
  extern int FDCAN_Flag;
  extern int CAN_Flag;


  CAN_FD_FRAME FDBuffer[50] = {0};
 8002324:	4b80      	ldr	r3, [pc, #512]	; (8002528 <main+0x65c>)
 8002326:	f641 5270 	movw	r2, #7536	; 0x1d70
 800232a:	443a      	add	r2, r7
 800232c:	4413      	add	r3, r2
 800232e:	4618      	mov	r0, r3
 8002330:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002334:	461a      	mov	r2, r3
 8002336:	2100      	movs	r1, #0
 8002338:	f017 f89f 	bl	801947a <memset>
  CAN_FRAME Buffer[50] = {0};
 800233c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8002340:	4618      	mov	r0, r3
 8002342:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8002346:	461a      	mov	r2, r3
 8002348:	2100      	movs	r1, #0
 800234a:	f017 f896 	bl	801947a <memset>
  uint32_t Tele_IDs[50] = {0};
 800234e:	4b77      	ldr	r3, [pc, #476]	; (800252c <main+0x660>)
 8002350:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002354:	443a      	add	r2, r7
 8002356:	4413      	add	r3, r2
 8002358:	4618      	mov	r0, r3
 800235a:	23c8      	movs	r3, #200	; 0xc8
 800235c:	461a      	mov	r2, r3
 800235e:	2100      	movs	r1, #0
 8002360:	f017 f88b 	bl	801947a <memset>
  Tele_IDs[0] = 0x321;
 8002364:	4b71      	ldr	r3, [pc, #452]	; (800252c <main+0x660>)
 8002366:	f641 5270 	movw	r2, #7536	; 0x1d70
 800236a:	443a      	add	r2, r7
 800236c:	4413      	add	r3, r2
 800236e:	f240 3221 	movw	r2, #801	; 0x321
 8002372:	601a      	str	r2, [r3, #0]

  sTime.SecondFraction = 999;
 8002374:	4b6e      	ldr	r3, [pc, #440]	; (8002530 <main+0x664>)
 8002376:	f240 32e7 	movw	r2, #999	; 0x3e7
 800237a:	609a      	str	r2, [r3, #8]
  uint32_t LocalTime = HAL_GetTick();
 800237c:	f002 f91c 	bl	80045b8 <HAL_GetTick>
 8002380:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002384:	443b      	add	r3, r7
 8002386:	6018      	str	r0, [r3, #0]
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002388:	2200      	movs	r2, #0
 800238a:	4969      	ldr	r1, [pc, #420]	; (8002530 <main+0x664>)
 800238c:	4869      	ldr	r0, [pc, #420]	; (8002534 <main+0x668>)
 800238e:	f00a f975 	bl	800c67c <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002392:	2200      	movs	r2, #0
 8002394:	4968      	ldr	r1, [pc, #416]	; (8002538 <main+0x66c>)
 8002396:	4867      	ldr	r0, [pc, #412]	; (8002534 <main+0x668>)
 8002398:	f00a fa54 	bl	800c844 <HAL_RTC_GetDate>

  sTime.SubSeconds -= LocalTime % 1000;
 800239c:	4b64      	ldr	r3, [pc, #400]	; (8002530 <main+0x664>)
 800239e:	6859      	ldr	r1, [r3, #4]
 80023a0:	f641 5318 	movw	r3, #7448	; 0x1d18
 80023a4:	443b      	add	r3, r7
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4b64      	ldr	r3, [pc, #400]	; (800253c <main+0x670>)
 80023aa:	fba3 0302 	umull	r0, r3, r3, r2
 80023ae:	099b      	lsrs	r3, r3, #6
 80023b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023b4:	fb00 f303 	mul.w	r3, r0, r3
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	1acb      	subs	r3, r1, r3
 80023bc:	4a5c      	ldr	r2, [pc, #368]	; (8002530 <main+0x664>)
 80023be:	6053      	str	r3, [r2, #4]
  LocalTime = LocalTime/1000;
 80023c0:	f641 5318 	movw	r3, #7448	; 0x1d18
 80023c4:	443b      	add	r3, r7
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a5c      	ldr	r2, [pc, #368]	; (800253c <main+0x670>)
 80023ca:	fba2 2303 	umull	r2, r3, r2, r3
 80023ce:	099b      	lsrs	r3, r3, #6
 80023d0:	f641 5218 	movw	r2, #7448	; 0x1d18
 80023d4:	443a      	add	r2, r7
 80023d6:	6013      	str	r3, [r2, #0]
  sTime.Seconds -= LocalTime % 60;
 80023d8:	4b55      	ldr	r3, [pc, #340]	; (8002530 <main+0x664>)
 80023da:	7898      	ldrb	r0, [r3, #2]
 80023dc:	f641 5318 	movw	r3, #7448	; 0x1d18
 80023e0:	443b      	add	r3, r7
 80023e2:	6819      	ldr	r1, [r3, #0]
 80023e4:	4b56      	ldr	r3, [pc, #344]	; (8002540 <main+0x674>)
 80023e6:	fba3 2301 	umull	r2, r3, r3, r1
 80023ea:	095a      	lsrs	r2, r3, #5
 80023ec:	4613      	mov	r3, r2
 80023ee:	011b      	lsls	r3, r3, #4
 80023f0:	1a9b      	subs	r3, r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	1aca      	subs	r2, r1, r3
 80023f6:	b2d3      	uxtb	r3, r2
 80023f8:	1ac3      	subs	r3, r0, r3
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	4b4c      	ldr	r3, [pc, #304]	; (8002530 <main+0x664>)
 80023fe:	709a      	strb	r2, [r3, #2]
  LocalTime = LocalTime/60;
 8002400:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002404:	443b      	add	r3, r7
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a4d      	ldr	r2, [pc, #308]	; (8002540 <main+0x674>)
 800240a:	fba2 2303 	umull	r2, r3, r2, r3
 800240e:	095b      	lsrs	r3, r3, #5
 8002410:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002414:	443a      	add	r2, r7
 8002416:	6013      	str	r3, [r2, #0]
  sTime.Minutes -= LocalTime % 60;
 8002418:	4b45      	ldr	r3, [pc, #276]	; (8002530 <main+0x664>)
 800241a:	7858      	ldrb	r0, [r3, #1]
 800241c:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002420:	443b      	add	r3, r7
 8002422:	6819      	ldr	r1, [r3, #0]
 8002424:	4b46      	ldr	r3, [pc, #280]	; (8002540 <main+0x674>)
 8002426:	fba3 2301 	umull	r2, r3, r3, r1
 800242a:	095a      	lsrs	r2, r3, #5
 800242c:	4613      	mov	r3, r2
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	1a9b      	subs	r3, r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	1aca      	subs	r2, r1, r3
 8002436:	b2d3      	uxtb	r3, r2
 8002438:	1ac3      	subs	r3, r0, r3
 800243a:	b2da      	uxtb	r2, r3
 800243c:	4b3c      	ldr	r3, [pc, #240]	; (8002530 <main+0x664>)
 800243e:	705a      	strb	r2, [r3, #1]
  LocalTime = LocalTime/60;
 8002440:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002444:	443b      	add	r3, r7
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a3d      	ldr	r2, [pc, #244]	; (8002540 <main+0x674>)
 800244a:	fba2 2303 	umull	r2, r3, r2, r3
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002454:	443a      	add	r2, r7
 8002456:	6013      	str	r3, [r2, #0]
  sTime.Hours -= LocalTime % 60;
 8002458:	4b35      	ldr	r3, [pc, #212]	; (8002530 <main+0x664>)
 800245a:	7818      	ldrb	r0, [r3, #0]
 800245c:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002460:	443b      	add	r3, r7
 8002462:	6819      	ldr	r1, [r3, #0]
 8002464:	4b36      	ldr	r3, [pc, #216]	; (8002540 <main+0x674>)
 8002466:	fba3 2301 	umull	r2, r3, r3, r1
 800246a:	095a      	lsrs	r2, r3, #5
 800246c:	4613      	mov	r3, r2
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	1a9b      	subs	r3, r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	1aca      	subs	r2, r1, r3
 8002476:	b2d3      	uxtb	r3, r2
 8002478:	1ac3      	subs	r3, r0, r3
 800247a:	b2da      	uxtb	r2, r3
 800247c:	4b2c      	ldr	r3, [pc, #176]	; (8002530 <main+0x664>)
 800247e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char CanWrite[400];
  int CW = 0;
 8002480:	2300      	movs	r3, #0
 8002482:	f641 526c 	movw	r2, #7532	; 0x1d6c
 8002486:	443a      	add	r2, r7
 8002488:	6013      	str	r3, [r2, #0]
  char CanFDWrite[400];
  int CFDW = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002490:	443a      	add	r2, r7
 8002492:	6013      	str	r3, [r2, #0]
  int AllowedTele = 1;
 8002494:	2301      	movs	r3, #1
 8002496:	f641 5264 	movw	r2, #7524	; 0x1d64
 800249a:	443a      	add	r2, r7
 800249c:	6013      	str	r3, [r2, #0]
  int BuffIndex = 0;
 800249e:	2300      	movs	r3, #0
 80024a0:	f507 52eb 	add.w	r2, r7, #7520	; 0x1d60
 80024a4:	6013      	str	r3, [r2, #0]
  int Txcnt = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	f641 525c 	movw	r2, #7516	; 0x1d5c
 80024ac:	443a      	add	r2, r7
 80024ae:	6013      	str	r3, [r2, #0]
  int TxDataSpace = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	f641 5214 	movw	r2, #7444	; 0x1d14
 80024b6:	443a      	add	r2, r7
 80024b8:	6013      	str	r3, [r2, #0]
  uint32_t LoopTime = 10; //time a loop should take (this is aguess should test avg time)
 80024ba:	230a      	movs	r3, #10
 80024bc:	f641 5210 	movw	r2, #7440	; 0x1d10
 80024c0:	443a      	add	r2, r7
 80024c2:	6013      	str	r3, [r2, #0]
  uint32_t StartTime = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f641 520c 	movw	r2, #7436	; 0x1d0c
 80024ca:	443a      	add	r2, r7
 80024cc:	6013      	str	r3, [r2, #0]
  uint32_t EndTime = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	f641 5208 	movw	r2, #7432	; 0x1d08
 80024d4:	443a      	add	r2, r7
 80024d6:	6013      	str	r3, [r2, #0]
  uint32_t radiodelay = 1000;
 80024d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024dc:	f641 5204 	movw	r2, #7428	; 0x1d04
 80024e0:	443a      	add	r2, r7
 80024e2:	6013      	str	r3, [r2, #0]
  uint32_t r_start = 0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	f641 5258 	movw	r2, #7512	; 0x1d58
 80024ea:	443a      	add	r2, r7
 80024ec:	6013      	str	r3, [r2, #0]
  uint32_t r_end = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 80024f4:	6013      	str	r3, [r2, #0]
  r_start = HAL_GetTick();
 80024f6:	f002 f85f 	bl	80045b8 <HAL_GetTick>
 80024fa:	f641 5358 	movw	r3, #7512	; 0x1d58
 80024fe:	443b      	add	r3, r7
 8002500:	6018      	str	r0, [r3, #0]

  while (end_flag){
 8002502:	f000 bee5 	b.w	80032d0 <main+0x1404>
 8002506:	bf00      	nop
 8002508:	ffffe328 	.word	0xffffe328
 800250c:	24000dc8 	.word	0x24000dc8
 8002510:	240010d4 	.word	0x240010d4
 8002514:	ffffe744 	.word	0xffffe744
 8002518:	ffffe290 	.word	0xffffe290
 800251c:	2400000c 	.word	0x2400000c
 8002520:	0801adb4 	.word	0x0801adb4
 8002524:	24000b98 	.word	0x24000b98
 8002528:	ffffeff0 	.word	0xffffeff0
 800252c:	ffffea78 	.word	0xffffea78
 8002530:	24000b30 	.word	0x24000b30
 8002534:	240014d0 	.word	0x240014d0
 8002538:	24000b44 	.word	0x24000b44
 800253c:	10624dd3 	.word	0x10624dd3
 8002540:	88888889 	.word	0x88888889
    StartTime = HAL_GetTick();
 8002544:	f002 f838 	bl	80045b8 <HAL_GetTick>
 8002548:	f641 530c 	movw	r3, #7436	; 0x1d0c
 800254c:	443b      	add	r3, r7
 800254e:	6018      	str	r0, [r3, #0]
	  if(GPS_flag){
 8002550:	4b9a      	ldr	r3, [pc, #616]	; (80027bc <main+0x8f0>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d006      	beq.n	8002566 <main+0x69a>
		  WriteToBuff(rxBuf, sizeof(rxBuf));
 8002558:	2128      	movs	r1, #40	; 0x28
 800255a:	4899      	ldr	r0, [pc, #612]	; (80027c0 <main+0x8f4>)
 800255c:	f7ff fc0e 	bl	8001d7c <WriteToBuff>
		  GPS_flag=0;
 8002560:	4b96      	ldr	r3, [pc, #600]	; (80027bc <main+0x8f0>)
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
	  }
	  
    r_end = HAL_GetTick();
 8002566:	f002 f827 	bl	80045b8 <HAL_GetTick>
 800256a:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 800256e:	6018      	str	r0, [r3, #0]
    if(r_start - r_end > radiodelay && FDBuffer[0].id != 0){
 8002570:	f641 5358 	movw	r3, #7512	; 0x1d58
 8002574:	443b      	add	r3, r7
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	f641 5204 	movw	r2, #7428	; 0x1d04
 8002584:	443a      	add	r2, r7
 8002586:	6812      	ldr	r2, [r2, #0]
 8002588:	429a      	cmp	r2, r3
 800258a:	f080 8288 	bcs.w	8002a9e <main+0xbd2>
 800258e:	4b8d      	ldr	r3, [pc, #564]	; (80027c4 <main+0x8f8>)
 8002590:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002594:	443a      	add	r2, r7
 8002596:	4413      	add	r3, r2
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	f000 827f 	beq.w	8002a9e <main+0xbd2>
      r_start = HAL_GetTick();
 80025a0:	f002 f80a 	bl	80045b8 <HAL_GetTick>
 80025a4:	f641 5358 	movw	r3, #7512	; 0x1d58
 80025a8:	443b      	add	r3, r7
 80025aa:	6018      	str	r0, [r3, #0]
      for(int i = 0; i < AllowedTele; i++){
 80025ac:	2300      	movs	r3, #0
 80025ae:	f641 5254 	movw	r2, #7508	; 0x1d54
 80025b2:	443a      	add	r2, r7
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	e267      	b.n	8002a88 <main+0xbbc>
        //make packet (Time ID data)
        Txcnt = sprintf(myTxData,"%u %x ",FDBuffer[BuffIndex].time, FDBuffer[BuffIndex].id);
 80025b8:	4a82      	ldr	r2, [pc, #520]	; (80027c4 <main+0x8f8>)
 80025ba:	f641 5370 	movw	r3, #7536	; 0x1d70
 80025be:	443b      	add	r3, r7
 80025c0:	441a      	add	r2, r3
 80025c2:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 80025c6:	6819      	ldr	r1, [r3, #0]
 80025c8:	460b      	mov	r3, r1
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	4413      	add	r3, r2
 80025d2:	330c      	adds	r3, #12
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	4a7b      	ldr	r2, [pc, #492]	; (80027c4 <main+0x8f8>)
 80025d8:	f641 5370 	movw	r3, #7536	; 0x1d70
 80025dc:	443b      	add	r3, r7
 80025de:	441a      	add	r2, r3
 80025e0:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 80025e4:	6819      	ldr	r1, [r3, #0]
 80025e6:	460b      	mov	r3, r1
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	440b      	add	r3, r1
 80025ec:	011b      	lsls	r3, r3, #4
 80025ee:	4413      	add	r3, r2
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4602      	mov	r2, r0
 80025f4:	4974      	ldr	r1, [pc, #464]	; (80027c8 <main+0x8fc>)
 80025f6:	4875      	ldr	r0, [pc, #468]	; (80027cc <main+0x900>)
 80025f8:	f017 f8b0 	bl	801975c <siprintf>
 80025fc:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8002600:	443b      	add	r3, r7
 8002602:	6018      	str	r0, [r3, #0]
        TxDataSpace = 32 - Txcnt;
 8002604:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8002608:	443b      	add	r3, r7
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f1c3 0320 	rsb	r3, r3, #32
 8002610:	f641 5214 	movw	r2, #7444	; 0x1d14
 8002614:	443a      	add	r2, r7
 8002616:	6013      	str	r3, [r2, #0]
        if(FDBuffer[BuffIndex].length > TxDataSpace){
 8002618:	4a6a      	ldr	r2, [pc, #424]	; (80027c4 <main+0x8f8>)
 800261a:	f641 5370 	movw	r3, #7536	; 0x1d70
 800261e:	443b      	add	r3, r7
 8002620:	441a      	add	r2, r3
 8002622:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002626:	6819      	ldr	r1, [r3, #0]
 8002628:	460b      	mov	r3, r1
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	4413      	add	r3, r2
 8002632:	3308      	adds	r3, #8
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	f641 5314 	movw	r3, #7444	; 0x1d14
 800263a:	443b      	add	r3, r7
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	429a      	cmp	r2, r3
 8002640:	f240 81ac 	bls.w	800299c <main+0xad0>
          for(int i = 0; i < TxDataSpace; i++){
 8002644:	2300      	movs	r3, #0
 8002646:	f641 5250 	movw	r2, #7504	; 0x1d50
 800264a:	443a      	add	r2, r7
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	e030      	b.n	80026b2 <main+0x7e6>
            Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i]);
 8002650:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8002654:	443b      	add	r3, r7
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a5c      	ldr	r2, [pc, #368]	; (80027cc <main+0x900>)
 800265a:	1898      	adds	r0, r3, r2
 800265c:	4a59      	ldr	r2, [pc, #356]	; (80027c4 <main+0x8f8>)
 800265e:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002662:	443b      	add	r3, r7
 8002664:	441a      	add	r2, r3
 8002666:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 800266a:	6819      	ldr	r1, [r3, #0]
 800266c:	460b      	mov	r3, r1
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	011b      	lsls	r3, r3, #4
 8002674:	441a      	add	r2, r3
 8002676:	f641 5350 	movw	r3, #7504	; 0x1d50
 800267a:	443b      	add	r3, r7
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4413      	add	r3, r2
 8002680:	3310      	adds	r3, #16
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	461a      	mov	r2, r3
 8002686:	4952      	ldr	r1, [pc, #328]	; (80027d0 <main+0x904>)
 8002688:	f017 f868 	bl	801975c <siprintf>
 800268c:	4602      	mov	r2, r0
 800268e:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8002692:	443b      	add	r3, r7
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4413      	add	r3, r2
 8002698:	f641 525c 	movw	r2, #7516	; 0x1d5c
 800269c:	443a      	add	r2, r7
 800269e:	6013      	str	r3, [r2, #0]
          for(int i = 0; i < TxDataSpace; i++){
 80026a0:	f641 5350 	movw	r3, #7504	; 0x1d50
 80026a4:	443b      	add	r3, r7
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	3301      	adds	r3, #1
 80026aa:	f641 5250 	movw	r2, #7504	; 0x1d50
 80026ae:	443a      	add	r2, r7
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	f641 5350 	movw	r3, #7504	; 0x1d50
 80026b6:	443b      	add	r3, r7
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	f641 5314 	movw	r3, #7444	; 0x1d14
 80026be:	443b      	add	r3, r7
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	dbc4      	blt.n	8002650 <main+0x784>
          }
          NRF24_write(myTxData, 32);
 80026c6:	2120      	movs	r1, #32
 80026c8:	4840      	ldr	r0, [pc, #256]	; (80027cc <main+0x900>)
 80026ca:	f7fe fc65 	bl	8000f98 <NRF24_write>
          Txcnt = 0;
 80026ce:	2300      	movs	r3, #0
 80026d0:	f641 525c 	movw	r2, #7516	; 0x1d5c
 80026d4:	443a      	add	r2, r7
 80026d6:	6013      	str	r3, [r2, #0]
          if(FDBuffer[BuffIndex].length - TxDataSpace > 32){
 80026d8:	4a3a      	ldr	r2, [pc, #232]	; (80027c4 <main+0x8f8>)
 80026da:	f641 5370 	movw	r3, #7536	; 0x1d70
 80026de:	443b      	add	r3, r7
 80026e0:	441a      	add	r2, r3
 80026e2:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 80026e6:	6819      	ldr	r1, [r3, #0]
 80026e8:	460b      	mov	r3, r1
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	011b      	lsls	r3, r3, #4
 80026f0:	4413      	add	r3, r2
 80026f2:	3308      	adds	r3, #8
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	f641 5314 	movw	r3, #7444	; 0x1d14
 80026fa:	443b      	add	r3, r7
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b20      	cmp	r3, #32
 8002702:	f240 80ca 	bls.w	800289a <main+0x9ce>
            for(int i = 0; i < 32; i++){
 8002706:	2300      	movs	r3, #0
 8002708:	f641 524c 	movw	r2, #7500	; 0x1d4c
 800270c:	443a      	add	r2, r7
 800270e:	6013      	str	r3, [r2, #0]
 8002710:	e036      	b.n	8002780 <main+0x8b4>
              Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i + TxDataSpace]);
 8002712:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8002716:	443b      	add	r3, r7
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a2c      	ldr	r2, [pc, #176]	; (80027cc <main+0x900>)
 800271c:	189c      	adds	r4, r3, r2
 800271e:	f641 534c 	movw	r3, #7500	; 0x1d4c
 8002722:	443b      	add	r3, r7
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	f641 5314 	movw	r3, #7444	; 0x1d14
 800272a:	443b      	add	r3, r7
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	18d0      	adds	r0, r2, r3
 8002730:	4a24      	ldr	r2, [pc, #144]	; (80027c4 <main+0x8f8>)
 8002732:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002736:	443b      	add	r3, r7
 8002738:	441a      	add	r2, r3
 800273a:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 800273e:	6819      	ldr	r1, [r3, #0]
 8002740:	460b      	mov	r3, r1
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	011b      	lsls	r3, r3, #4
 8002748:	4413      	add	r3, r2
 800274a:	4403      	add	r3, r0
 800274c:	3310      	adds	r3, #16
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	461a      	mov	r2, r3
 8002752:	491f      	ldr	r1, [pc, #124]	; (80027d0 <main+0x904>)
 8002754:	4620      	mov	r0, r4
 8002756:	f017 f801 	bl	801975c <siprintf>
 800275a:	4602      	mov	r2, r0
 800275c:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8002760:	443b      	add	r3, r7
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4413      	add	r3, r2
 8002766:	f641 525c 	movw	r2, #7516	; 0x1d5c
 800276a:	443a      	add	r2, r7
 800276c:	6013      	str	r3, [r2, #0]
            for(int i = 0; i < 32; i++){
 800276e:	f641 534c 	movw	r3, #7500	; 0x1d4c
 8002772:	443b      	add	r3, r7
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	3301      	adds	r3, #1
 8002778:	f641 524c 	movw	r2, #7500	; 0x1d4c
 800277c:	443a      	add	r2, r7
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	f641 534c 	movw	r3, #7500	; 0x1d4c
 8002784:	443b      	add	r3, r7
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b1f      	cmp	r3, #31
 800278a:	ddc2      	ble.n	8002712 <main+0x846>
            }
            Txcnt = 0;
 800278c:	2300      	movs	r3, #0
 800278e:	f641 525c 	movw	r2, #7516	; 0x1d5c
 8002792:	443a      	add	r2, r7
 8002794:	6013      	str	r3, [r2, #0]
            i++;
 8002796:	f641 5354 	movw	r3, #7508	; 0x1d54
 800279a:	443b      	add	r3, r7
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	3301      	adds	r3, #1
 80027a0:	f641 5254 	movw	r2, #7508	; 0x1d54
 80027a4:	443a      	add	r2, r7
 80027a6:	6013      	str	r3, [r2, #0]
            NRF24_write(myTxData, 32);
 80027a8:	2120      	movs	r1, #32
 80027aa:	4808      	ldr	r0, [pc, #32]	; (80027cc <main+0x900>)
 80027ac:	f7fe fbf4 	bl	8000f98 <NRF24_write>
            for(int i = 0; i < FDBuffer[BuffIndex].length - TxDataSpace+32; i++){
 80027b0:	2300      	movs	r3, #0
 80027b2:	f641 5248 	movw	r2, #7496	; 0x1d48
 80027b6:	443a      	add	r2, r7
 80027b8:	6013      	str	r3, [r2, #0]
 80027ba:	e044      	b.n	8002846 <main+0x97a>
 80027bc:	24000204 	.word	0x24000204
 80027c0:	24001304 	.word	0x24001304
 80027c4:	ffffeff0 	.word	0xffffeff0
 80027c8:	0801adbc 	.word	0x0801adbc
 80027cc:	24001430 	.word	0x24001430
 80027d0:	0801adc4 	.word	0x0801adc4
              Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i + TxDataSpace + 32]);
 80027d4:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80027d8:	443b      	add	r3, r7
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a72      	ldr	r2, [pc, #456]	; (80029a8 <main+0xadc>)
 80027de:	189c      	adds	r4, r3, r2
 80027e0:	f641 5348 	movw	r3, #7496	; 0x1d48
 80027e4:	443b      	add	r3, r7
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	f641 5314 	movw	r3, #7444	; 0x1d14
 80027ec:	443b      	add	r3, r7
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4413      	add	r3, r2
 80027f2:	f103 0020 	add.w	r0, r3, #32
 80027f6:	4a6d      	ldr	r2, [pc, #436]	; (80029ac <main+0xae0>)
 80027f8:	f641 5370 	movw	r3, #7536	; 0x1d70
 80027fc:	443b      	add	r3, r7
 80027fe:	441a      	add	r2, r3
 8002800:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002804:	6819      	ldr	r1, [r3, #0]
 8002806:	460b      	mov	r3, r1
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	4413      	add	r3, r2
 8002810:	4403      	add	r3, r0
 8002812:	3310      	adds	r3, #16
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	461a      	mov	r2, r3
 8002818:	4965      	ldr	r1, [pc, #404]	; (80029b0 <main+0xae4>)
 800281a:	4620      	mov	r0, r4
 800281c:	f016 ff9e 	bl	801975c <siprintf>
 8002820:	4602      	mov	r2, r0
 8002822:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8002826:	443b      	add	r3, r7
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4413      	add	r3, r2
 800282c:	f641 525c 	movw	r2, #7516	; 0x1d5c
 8002830:	443a      	add	r2, r7
 8002832:	6013      	str	r3, [r2, #0]
            for(int i = 0; i < FDBuffer[BuffIndex].length - TxDataSpace+32; i++){
 8002834:	f641 5348 	movw	r3, #7496	; 0x1d48
 8002838:	443b      	add	r3, r7
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	3301      	adds	r3, #1
 800283e:	f641 5248 	movw	r2, #7496	; 0x1d48
 8002842:	443a      	add	r2, r7
 8002844:	6013      	str	r3, [r2, #0]
 8002846:	4a59      	ldr	r2, [pc, #356]	; (80029ac <main+0xae0>)
 8002848:	f641 5370 	movw	r3, #7536	; 0x1d70
 800284c:	443b      	add	r3, r7
 800284e:	441a      	add	r2, r3
 8002850:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002854:	6819      	ldr	r1, [r3, #0]
 8002856:	460b      	mov	r3, r1
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	440b      	add	r3, r1
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	4413      	add	r3, r2
 8002860:	3308      	adds	r3, #8
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002868:	443b      	add	r3, r7
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	f103 0220 	add.w	r2, r3, #32
 8002872:	f641 5348 	movw	r3, #7496	; 0x1d48
 8002876:	443b      	add	r3, r7
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	429a      	cmp	r2, r3
 800287c:	d8aa      	bhi.n	80027d4 <main+0x908>
            }
            i++;
 800287e:	f641 5354 	movw	r3, #7508	; 0x1d54
 8002882:	443b      	add	r3, r7
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	3301      	adds	r3, #1
 8002888:	f641 5254 	movw	r2, #7508	; 0x1d54
 800288c:	443a      	add	r2, r7
 800288e:	6013      	str	r3, [r2, #0]
            NRF24_write(myTxData, 32);
 8002890:	2120      	movs	r1, #32
 8002892:	4845      	ldr	r0, [pc, #276]	; (80029a8 <main+0xadc>)
 8002894:	f7fe fb80 	bl	8000f98 <NRF24_write>
 8002898:	e0d2      	b.n	8002a40 <main+0xb74>
          }else{
            Txcnt = 0;
 800289a:	2300      	movs	r3, #0
 800289c:	f641 525c 	movw	r2, #7516	; 0x1d5c
 80028a0:	443a      	add	r2, r7
 80028a2:	6013      	str	r3, [r2, #0]
            for(int i = 0; i < FDBuffer[BuffIndex].length - TxDataSpace; i++){
 80028a4:	2300      	movs	r3, #0
 80028a6:	f641 5244 	movw	r2, #7492	; 0x1d44
 80028aa:	443a      	add	r2, r7
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	e036      	b.n	800291e <main+0xa52>
              Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i + TxDataSpace]);
 80028b0:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80028b4:	443b      	add	r3, r7
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a3b      	ldr	r2, [pc, #236]	; (80029a8 <main+0xadc>)
 80028ba:	189c      	adds	r4, r3, r2
 80028bc:	f641 5344 	movw	r3, #7492	; 0x1d44
 80028c0:	443b      	add	r3, r7
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	f641 5314 	movw	r3, #7444	; 0x1d14
 80028c8:	443b      	add	r3, r7
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	18d0      	adds	r0, r2, r3
 80028ce:	4a37      	ldr	r2, [pc, #220]	; (80029ac <main+0xae0>)
 80028d0:	f641 5370 	movw	r3, #7536	; 0x1d70
 80028d4:	443b      	add	r3, r7
 80028d6:	441a      	add	r2, r3
 80028d8:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 80028dc:	6819      	ldr	r1, [r3, #0]
 80028de:	460b      	mov	r3, r1
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	440b      	add	r3, r1
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	4413      	add	r3, r2
 80028e8:	4403      	add	r3, r0
 80028ea:	3310      	adds	r3, #16
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	461a      	mov	r2, r3
 80028f0:	492f      	ldr	r1, [pc, #188]	; (80029b0 <main+0xae4>)
 80028f2:	4620      	mov	r0, r4
 80028f4:	f016 ff32 	bl	801975c <siprintf>
 80028f8:	4602      	mov	r2, r0
 80028fa:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80028fe:	443b      	add	r3, r7
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4413      	add	r3, r2
 8002904:	f641 525c 	movw	r2, #7516	; 0x1d5c
 8002908:	443a      	add	r2, r7
 800290a:	6013      	str	r3, [r2, #0]
            for(int i = 0; i < FDBuffer[BuffIndex].length - TxDataSpace; i++){
 800290c:	f641 5344 	movw	r3, #7492	; 0x1d44
 8002910:	443b      	add	r3, r7
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	3301      	adds	r3, #1
 8002916:	f641 5244 	movw	r2, #7492	; 0x1d44
 800291a:	443a      	add	r2, r7
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	4a23      	ldr	r2, [pc, #140]	; (80029ac <main+0xae0>)
 8002920:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002924:	443b      	add	r3, r7
 8002926:	441a      	add	r2, r3
 8002928:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 800292c:	6819      	ldr	r1, [r3, #0]
 800292e:	460b      	mov	r3, r1
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	440b      	add	r3, r1
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	4413      	add	r3, r2
 8002938:	3308      	adds	r3, #8
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002940:	443b      	add	r3, r7
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	1ad2      	subs	r2, r2, r3
 8002946:	f641 5344 	movw	r3, #7492	; 0x1d44
 800294a:	443b      	add	r3, r7
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	429a      	cmp	r2, r3
 8002950:	d8ae      	bhi.n	80028b0 <main+0x9e4>
            }
            i++;
 8002952:	f641 5354 	movw	r3, #7508	; 0x1d54
 8002956:	443b      	add	r3, r7
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	3301      	adds	r3, #1
 800295c:	f641 5254 	movw	r2, #7508	; 0x1d54
 8002960:	443a      	add	r2, r7
 8002962:	6013      	str	r3, [r2, #0]
            NRF24_write(myTxData, FDBuffer[BuffIndex].length - TxDataSpace);
 8002964:	4a11      	ldr	r2, [pc, #68]	; (80029ac <main+0xae0>)
 8002966:	f641 5370 	movw	r3, #7536	; 0x1d70
 800296a:	443b      	add	r3, r7
 800296c:	441a      	add	r2, r3
 800296e:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002972:	6819      	ldr	r1, [r3, #0]
 8002974:	460b      	mov	r3, r1
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	011b      	lsls	r3, r3, #4
 800297c:	4413      	add	r3, r2
 800297e:	3308      	adds	r3, #8
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	b2da      	uxtb	r2, r3
 8002984:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002988:	443b      	add	r3, r7
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	b2db      	uxtb	r3, r3
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	b2db      	uxtb	r3, r3
 8002992:	4619      	mov	r1, r3
 8002994:	4804      	ldr	r0, [pc, #16]	; (80029a8 <main+0xadc>)
 8002996:	f7fe faff 	bl	8000f98 <NRF24_write>
 800299a:	e051      	b.n	8002a40 <main+0xb74>
          }
        }
        else{
          for(int i = 0; i < FDBuffer[BuffIndex].length; i++){
 800299c:	2300      	movs	r3, #0
 800299e:	f507 52ea 	add.w	r2, r7, #7488	; 0x1d40
 80029a2:	6013      	str	r3, [r2, #0]
 80029a4:	e034      	b.n	8002a10 <main+0xb44>
 80029a6:	bf00      	nop
 80029a8:	24001430 	.word	0x24001430
 80029ac:	ffffeff0 	.word	0xffffeff0
 80029b0:	0801adc4 	.word	0x0801adc4
            Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i]);
 80029b4:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80029b8:	443b      	add	r3, r7
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4aac      	ldr	r2, [pc, #688]	; (8002c70 <main+0xda4>)
 80029be:	1898      	adds	r0, r3, r2
 80029c0:	4aac      	ldr	r2, [pc, #688]	; (8002c74 <main+0xda8>)
 80029c2:	f641 5370 	movw	r3, #7536	; 0x1d70
 80029c6:	443b      	add	r3, r7
 80029c8:	441a      	add	r2, r3
 80029ca:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 80029ce:	6819      	ldr	r1, [r3, #0]
 80029d0:	460b      	mov	r3, r1
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	011b      	lsls	r3, r3, #4
 80029d8:	441a      	add	r2, r3
 80029da:	f507 53ea 	add.w	r3, r7, #7488	; 0x1d40
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4413      	add	r3, r2
 80029e2:	3310      	adds	r3, #16
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	461a      	mov	r2, r3
 80029e8:	49a3      	ldr	r1, [pc, #652]	; (8002c78 <main+0xdac>)
 80029ea:	f016 feb7 	bl	801975c <siprintf>
 80029ee:	4602      	mov	r2, r0
 80029f0:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80029f4:	443b      	add	r3, r7
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4413      	add	r3, r2
 80029fa:	f641 525c 	movw	r2, #7516	; 0x1d5c
 80029fe:	443a      	add	r2, r7
 8002a00:	6013      	str	r3, [r2, #0]
          for(int i = 0; i < FDBuffer[BuffIndex].length; i++){
 8002a02:	f507 53ea 	add.w	r3, r7, #7488	; 0x1d40
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	f507 52ea 	add.w	r2, r7, #7488	; 0x1d40
 8002a0e:	6013      	str	r3, [r2, #0]
 8002a10:	4a98      	ldr	r2, [pc, #608]	; (8002c74 <main+0xda8>)
 8002a12:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002a16:	443b      	add	r3, r7
 8002a18:	441a      	add	r2, r3
 8002a1a:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002a1e:	6819      	ldr	r1, [r3, #0]
 8002a20:	460b      	mov	r3, r1
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	4413      	add	r3, r2
 8002a2a:	3308      	adds	r3, #8
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	f507 53ea 	add.w	r3, r7, #7488	; 0x1d40
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d8bd      	bhi.n	80029b4 <main+0xae8>
          }
          NRF24_write(myTxData, 32);//FDBuffer[BuffIndex].length + (32 - TxDataSpace)
 8002a38:	2120      	movs	r1, #32
 8002a3a:	488d      	ldr	r0, [pc, #564]	; (8002c70 <main+0xda4>)
 8002a3c:	f7fe faac 	bl	8000f98 <NRF24_write>
        }
        BuffIndex++;
 8002a40:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	3301      	adds	r3, #1
 8002a48:	f507 52eb 	add.w	r2, r7, #7520	; 0x1d60
 8002a4c:	6013      	str	r3, [r2, #0]
        if(FDBuffer[BuffIndex].id == 0){
 8002a4e:	4a89      	ldr	r2, [pc, #548]	; (8002c74 <main+0xda8>)
 8002a50:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002a54:	443b      	add	r3, r7
 8002a56:	441a      	add	r2, r3
 8002a58:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002a5c:	6819      	ldr	r1, [r3, #0]
 8002a5e:	460b      	mov	r3, r1
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	440b      	add	r3, r1
 8002a64:	011b      	lsls	r3, r3, #4
 8002a66:	4413      	add	r3, r2
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d103      	bne.n	8002a76 <main+0xbaa>
          BuffIndex = 0;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	f507 52eb 	add.w	r2, r7, #7520	; 0x1d60
 8002a74:	6013      	str	r3, [r2, #0]
      for(int i = 0; i < AllowedTele; i++){
 8002a76:	f641 5354 	movw	r3, #7508	; 0x1d54
 8002a7a:	443b      	add	r3, r7
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	f641 5254 	movw	r2, #7508	; 0x1d54
 8002a84:	443a      	add	r2, r7
 8002a86:	6013      	str	r3, [r2, #0]
 8002a88:	f641 5354 	movw	r3, #7508	; 0x1d54
 8002a8c:	443b      	add	r3, r7
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	f641 5364 	movw	r3, #7524	; 0x1d64
 8002a94:	443b      	add	r3, r7
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	f6ff ad8d 	blt.w	80025b8 <main+0x6ec>


	  printf("Date:%u Month:%u Year:%u\n", sDate.Date, sDate.Month, sDate.Year);
	  printf("Hours:%u Minutes:%u Seconds:%u\n", sTime.Hours, sTime.Minutes, sTime.Seconds);*/

	  if(FDCAN_Flag){
 8002a9e:	4b77      	ldr	r3, [pc, #476]	; (8002c7c <main+0xdb0>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f000 81ed 	beq.w	8002e82 <main+0xfb6>

		  RTC_TimeTypeDef lTime = sTime;
 8002aa8:	4b75      	ldr	r3, [pc, #468]	; (8002c80 <main+0xdb4>)
 8002aaa:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002aae:	443a      	add	r2, r7
 8002ab0:	4413      	add	r3, r2
 8002ab2:	4a74      	ldr	r2, [pc, #464]	; (8002c84 <main+0xdb8>)
 8002ab4:	461c      	mov	r4, r3
 8002ab6:	4615      	mov	r5, r2
 8002ab8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002aba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002abc:	682b      	ldr	r3, [r5, #0]
 8002abe:	6023      	str	r3, [r4, #0]
		  LocalTime = CanFDFrame.time;
 8002ac0:	4b71      	ldr	r3, [pc, #452]	; (8002c88 <main+0xdbc>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002ac8:	443a      	add	r2, r7
 8002aca:	6013      	str	r3, [r2, #0]
		  lTime.SubSeconds += LocalTime % 1000;
 8002acc:	4b6c      	ldr	r3, [pc, #432]	; (8002c80 <main+0xdb4>)
 8002ace:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002ad2:	443a      	add	r2, r7
 8002ad4:	4413      	add	r3, r2
 8002ad6:	6859      	ldr	r1, [r3, #4]
 8002ad8:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002adc:	443b      	add	r3, r7
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	4b6a      	ldr	r3, [pc, #424]	; (8002c8c <main+0xdc0>)
 8002ae2:	fba3 0302 	umull	r0, r3, r3, r2
 8002ae6:	099b      	lsrs	r3, r3, #6
 8002ae8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002aec:	fb00 f303 	mul.w	r3, r0, r3
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	18ca      	adds	r2, r1, r3
 8002af4:	4b62      	ldr	r3, [pc, #392]	; (8002c80 <main+0xdb4>)
 8002af6:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002afa:	4439      	add	r1, r7
 8002afc:	440b      	add	r3, r1
 8002afe:	605a      	str	r2, [r3, #4]
		  LocalTime = LocalTime/1000;
 8002b00:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002b04:	443b      	add	r3, r7
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a60      	ldr	r2, [pc, #384]	; (8002c8c <main+0xdc0>)
 8002b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0e:	099b      	lsrs	r3, r3, #6
 8002b10:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002b14:	443a      	add	r2, r7
 8002b16:	6013      	str	r3, [r2, #0]
		  lTime.Seconds += LocalTime % 60;
 8002b18:	4b59      	ldr	r3, [pc, #356]	; (8002c80 <main+0xdb4>)
 8002b1a:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002b1e:	443a      	add	r2, r7
 8002b20:	4413      	add	r3, r2
 8002b22:	7898      	ldrb	r0, [r3, #2]
 8002b24:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002b28:	443b      	add	r3, r7
 8002b2a:	6819      	ldr	r1, [r3, #0]
 8002b2c:	4b58      	ldr	r3, [pc, #352]	; (8002c90 <main+0xdc4>)
 8002b2e:	fba3 2301 	umull	r2, r3, r3, r1
 8002b32:	095a      	lsrs	r2, r3, #5
 8002b34:	4613      	mov	r3, r2
 8002b36:	011b      	lsls	r3, r3, #4
 8002b38:	1a9b      	subs	r3, r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	1aca      	subs	r2, r1, r3
 8002b3e:	b2d3      	uxtb	r3, r2
 8002b40:	4403      	add	r3, r0
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	4b4e      	ldr	r3, [pc, #312]	; (8002c80 <main+0xdb4>)
 8002b46:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002b4a:	4439      	add	r1, r7
 8002b4c:	440b      	add	r3, r1
 8002b4e:	709a      	strb	r2, [r3, #2]
		  LocalTime = LocalTime/60;
 8002b50:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002b54:	443b      	add	r3, r7
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a4d      	ldr	r2, [pc, #308]	; (8002c90 <main+0xdc4>)
 8002b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5e:	095b      	lsrs	r3, r3, #5
 8002b60:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002b64:	443a      	add	r2, r7
 8002b66:	6013      	str	r3, [r2, #0]
		  lTime.Minutes += LocalTime % 60;
 8002b68:	4b45      	ldr	r3, [pc, #276]	; (8002c80 <main+0xdb4>)
 8002b6a:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002b6e:	443a      	add	r2, r7
 8002b70:	4413      	add	r3, r2
 8002b72:	7858      	ldrb	r0, [r3, #1]
 8002b74:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002b78:	443b      	add	r3, r7
 8002b7a:	6819      	ldr	r1, [r3, #0]
 8002b7c:	4b44      	ldr	r3, [pc, #272]	; (8002c90 <main+0xdc4>)
 8002b7e:	fba3 2301 	umull	r2, r3, r3, r1
 8002b82:	095a      	lsrs	r2, r3, #5
 8002b84:	4613      	mov	r3, r2
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	1a9b      	subs	r3, r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	1aca      	subs	r2, r1, r3
 8002b8e:	b2d3      	uxtb	r3, r2
 8002b90:	4403      	add	r3, r0
 8002b92:	b2da      	uxtb	r2, r3
 8002b94:	4b3a      	ldr	r3, [pc, #232]	; (8002c80 <main+0xdb4>)
 8002b96:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002b9a:	4439      	add	r1, r7
 8002b9c:	440b      	add	r3, r1
 8002b9e:	705a      	strb	r2, [r3, #1]
		  LocalTime = LocalTime/60;
 8002ba0:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002ba4:	443b      	add	r3, r7
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a39      	ldr	r2, [pc, #228]	; (8002c90 <main+0xdc4>)
 8002baa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bae:	095b      	lsrs	r3, r3, #5
 8002bb0:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002bb4:	443a      	add	r2, r7
 8002bb6:	6013      	str	r3, [r2, #0]
		  lTime.Hours += LocalTime % 60;
 8002bb8:	4b31      	ldr	r3, [pc, #196]	; (8002c80 <main+0xdb4>)
 8002bba:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002bbe:	443a      	add	r2, r7
 8002bc0:	4413      	add	r3, r2
 8002bc2:	7818      	ldrb	r0, [r3, #0]
 8002bc4:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002bc8:	443b      	add	r3, r7
 8002bca:	6819      	ldr	r1, [r3, #0]
 8002bcc:	4b30      	ldr	r3, [pc, #192]	; (8002c90 <main+0xdc4>)
 8002bce:	fba3 2301 	umull	r2, r3, r3, r1
 8002bd2:	095a      	lsrs	r2, r3, #5
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	1a9b      	subs	r3, r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	1aca      	subs	r2, r1, r3
 8002bde:	b2d3      	uxtb	r3, r2
 8002be0:	4403      	add	r3, r0
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	4b26      	ldr	r3, [pc, #152]	; (8002c80 <main+0xdb4>)
 8002be6:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002bea:	4439      	add	r1, r7
 8002bec:	440b      	add	r3, r1
 8002bee:	701a      	strb	r2, [r3, #0]
      //Write to SD Card
		  //date/time, CANID, Data
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002bf0:	4b28      	ldr	r3, [pc, #160]	; (8002c94 <main+0xdc8>)
 8002bf2:	789b      	ldrb	r3, [r3, #2]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002bf4:	469c      	mov	ip, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002bf6:	4b27      	ldr	r3, [pc, #156]	; (8002c94 <main+0xdc8>)
 8002bf8:	785b      	ldrb	r3, [r3, #1]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002bfa:	469e      	mov	lr, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002bfc:	4b25      	ldr	r3, [pc, #148]	; (8002c94 <main+0xdc8>)
 8002bfe:	78db      	ldrb	r3, [r3, #3]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002c00:	4619      	mov	r1, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002c02:	4b1f      	ldr	r3, [pc, #124]	; (8002c80 <main+0xdb4>)
 8002c04:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002c08:	443a      	add	r2, r7
 8002c0a:	4413      	add	r3, r2
 8002c0c:	781b      	ldrb	r3, [r3, #0]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002c0e:	461c      	mov	r4, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002c10:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <main+0xdb4>)
 8002c12:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002c16:	443a      	add	r2, r7
 8002c18:	4413      	add	r3, r2
 8002c1a:	785b      	ldrb	r3, [r3, #1]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002c1c:	461d      	mov	r5, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002c1e:	4b18      	ldr	r3, [pc, #96]	; (8002c80 <main+0xdb4>)
 8002c20:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002c24:	443a      	add	r2, r7
 8002c26:	4413      	add	r3, r2
 8002c28:	789b      	ldrb	r3, [r3, #2]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002c2a:	461e      	mov	r6, r3
 8002c2c:	4b14      	ldr	r3, [pc, #80]	; (8002c80 <main+0xdb4>)
 8002c2e:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002c32:	443a      	add	r2, r7
 8002c34:	4413      	add	r3, r2
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	4a13      	ldr	r2, [pc, #76]	; (8002c88 <main+0xdbc>)
 8002c3a:	6812      	ldr	r2, [r2, #0]
 8002c3c:	4816      	ldr	r0, [pc, #88]	; (8002c98 <main+0xdcc>)
 8002c3e:	f641 5870 	movw	r8, #7536	; 0x1d70
 8002c42:	44b8      	add	r8, r7
 8002c44:	4440      	add	r0, r8
 8002c46:	9205      	str	r2, [sp, #20]
 8002c48:	9304      	str	r3, [sp, #16]
 8002c4a:	9603      	str	r6, [sp, #12]
 8002c4c:	9502      	str	r5, [sp, #8]
 8002c4e:	9401      	str	r4, [sp, #4]
 8002c50:	9100      	str	r1, [sp, #0]
 8002c52:	4673      	mov	r3, lr
 8002c54:	4662      	mov	r2, ip
 8002c56:	4911      	ldr	r1, [pc, #68]	; (8002c9c <main+0xdd0>)
 8002c58:	f016 fd80 	bl	801975c <siprintf>
 8002c5c:	f641 5368 	movw	r3, #7528	; 0x1d68
 8002c60:	443b      	add	r3, r7
 8002c62:	6018      	str	r0, [r3, #0]
				  CanFDFrame.id);
		  for(int i = 0; i < CanFDFrame.length; i++){
 8002c64:	2300      	movs	r3, #0
 8002c66:	f641 523c 	movw	r2, #7484	; 0x1d3c
 8002c6a:	443a      	add	r2, r7
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	e040      	b.n	8002cf2 <main+0xe26>
 8002c70:	24001430 	.word	0x24001430
 8002c74:	ffffeff0 	.word	0xffffeff0
 8002c78:	0801adc4 	.word	0x0801adc4
 8002c7c:	240001fc 	.word	0x240001fc
 8002c80:	ffffe724 	.word	0xffffe724
 8002c84:	24000b30 	.word	0x24000b30
 8002c88:	24001040 	.word	0x24001040
 8002c8c:	10624dd3 	.word	0x10624dd3
 8002c90:	88888889 	.word	0x88888889
 8002c94:	24000b44 	.word	0x24000b44
 8002c98:	ffffe758 	.word	0xffffe758
 8002c9c:	0801adc8 	.word	0x0801adc8
			  CFDW += sprintf(CanFDWrite + CFDW, "%c", CanFDFrame.data.bytes[i]);
 8002ca0:	f641 5368 	movw	r3, #7528	; 0x1d68
 8002ca4:	443b      	add	r3, r7
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	4b5e      	ldr	r3, [pc, #376]	; (8002e24 <main+0xf58>)
 8002caa:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002cae:	4439      	add	r1, r7
 8002cb0:	440b      	add	r3, r1
 8002cb2:	1898      	adds	r0, r3, r2
 8002cb4:	4a5c      	ldr	r2, [pc, #368]	; (8002e28 <main+0xf5c>)
 8002cb6:	f641 533c 	movw	r3, #7484	; 0x1d3c
 8002cba:	443b      	add	r3, r7
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3310      	adds	r3, #16
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	4959      	ldr	r1, [pc, #356]	; (8002e2c <main+0xf60>)
 8002cc8:	f016 fd48 	bl	801975c <siprintf>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	f641 5368 	movw	r3, #7528	; 0x1d68
 8002cd2:	443b      	add	r3, r7
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002cdc:	443a      	add	r2, r7
 8002cde:	6013      	str	r3, [r2, #0]
		  for(int i = 0; i < CanFDFrame.length; i++){
 8002ce0:	f641 533c 	movw	r3, #7484	; 0x1d3c
 8002ce4:	443b      	add	r3, r7
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	f641 523c 	movw	r2, #7484	; 0x1d3c
 8002cee:	443a      	add	r2, r7
 8002cf0:	6013      	str	r3, [r2, #0]
 8002cf2:	4b4d      	ldr	r3, [pc, #308]	; (8002e28 <main+0xf5c>)
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	f641 533c 	movw	r3, #7484	; 0x1d3c
 8002cfa:	443b      	add	r3, r7
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d8ce      	bhi.n	8002ca0 <main+0xdd4>
		  }
		  CFDW += sprintf(CanFDWrite + CFDW, "\n\r");
 8002d02:	f641 5368 	movw	r3, #7528	; 0x1d68
 8002d06:	443b      	add	r3, r7
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	4b46      	ldr	r3, [pc, #280]	; (8002e24 <main+0xf58>)
 8002d0c:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002d10:	4439      	add	r1, r7
 8002d12:	440b      	add	r3, r1
 8002d14:	4413      	add	r3, r2
 8002d16:	4a46      	ldr	r2, [pc, #280]	; (8002e30 <main+0xf64>)
 8002d18:	8811      	ldrh	r1, [r2, #0]
 8002d1a:	7892      	ldrb	r2, [r2, #2]
 8002d1c:	8019      	strh	r1, [r3, #0]
 8002d1e:	709a      	strb	r2, [r3, #2]
 8002d20:	2202      	movs	r2, #2
 8002d22:	f641 5368 	movw	r3, #7528	; 0x1d68
 8002d26:	443b      	add	r3, r7
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002d30:	443a      	add	r2, r7
 8002d32:	6013      	str	r3, [r2, #0]
		  WriteToBuff(CanFDWrite, CFDW);
 8002d34:	4b3b      	ldr	r3, [pc, #236]	; (8002e24 <main+0xf58>)
 8002d36:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002d3a:	443a      	add	r2, r7
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002d42:	443a      	add	r2, r7
 8002d44:	6811      	ldr	r1, [r2, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff f818 	bl	8001d7c <WriteToBuff>

      //Write to telemetry buffer
      
      for(int i = 0; i <50; i++){
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f641 5238 	movw	r2, #7480	; 0x1d38
 8002d52:	443a      	add	r2, r7
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	e089      	b.n	8002e6c <main+0xfa0>
        if(CanFDFrame.id == Tele_IDs[i]){ //check if frame should be checked
 8002d58:	4b33      	ldr	r3, [pc, #204]	; (8002e28 <main+0xf5c>)
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	4b35      	ldr	r3, [pc, #212]	; (8002e34 <main+0xf68>)
 8002d5e:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002d62:	4439      	add	r1, r7
 8002d64:	440b      	add	r3, r1
 8002d66:	f641 5138 	movw	r1, #7480	; 0x1d38
 8002d6a:	4439      	add	r1, r7
 8002d6c:	6809      	ldr	r1, [r1, #0]
 8002d6e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d171      	bne.n	8002e5a <main+0xf8e>
          for(int j = 0; j < 50; j++){
 8002d76:	2300      	movs	r3, #0
 8002d78:	f641 5234 	movw	r2, #7476	; 0x1d34
 8002d7c:	443a      	add	r2, r7
 8002d7e:	6013      	str	r3, [r2, #0]
 8002d80:	e065      	b.n	8002e4e <main+0xf82>
            if(FDBuffer[j].id == CanFDFrame.id){
 8002d82:	4a2d      	ldr	r2, [pc, #180]	; (8002e38 <main+0xf6c>)
 8002d84:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002d88:	443b      	add	r3, r7
 8002d8a:	441a      	add	r2, r3
 8002d8c:	f641 5334 	movw	r3, #7476	; 0x1d34
 8002d90:	443b      	add	r3, r7
 8002d92:	6819      	ldr	r1, [r3, #0]
 8002d94:	460b      	mov	r3, r1
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	4413      	add	r3, r2
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	4b21      	ldr	r3, [pc, #132]	; (8002e28 <main+0xf5c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d115      	bne.n	8002dd4 <main+0xf08>
              FDBuffer[j] = CanFDFrame;
 8002da8:	4a23      	ldr	r2, [pc, #140]	; (8002e38 <main+0xf6c>)
 8002daa:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002dae:	443b      	add	r3, r7
 8002db0:	441a      	add	r2, r3
 8002db2:	f641 5334 	movw	r3, #7476	; 0x1d34
 8002db6:	443b      	add	r3, r7
 8002db8:	6819      	ldr	r1, [r3, #0]
 8002dba:	460b      	mov	r3, r1
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	011b      	lsls	r3, r3, #4
 8002dc2:	4413      	add	r3, r2
 8002dc4:	4a18      	ldr	r2, [pc, #96]	; (8002e28 <main+0xf5c>)
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	4611      	mov	r1, r2
 8002dca:	2350      	movs	r3, #80	; 0x50
 8002dcc:	461a      	mov	r2, r3
 8002dce:	f016 fb49 	bl	8019464 <memcpy>
              goto TeleDoneFD;
 8002dd2:	e053      	b.n	8002e7c <main+0xfb0>
            }
            if(FDBuffer[j].id == 0){
 8002dd4:	4a18      	ldr	r2, [pc, #96]	; (8002e38 <main+0xf6c>)
 8002dd6:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002dda:	443b      	add	r3, r7
 8002ddc:	441a      	add	r2, r3
 8002dde:	f641 5334 	movw	r3, #7476	; 0x1d34
 8002de2:	443b      	add	r3, r7
 8002de4:	6819      	ldr	r1, [r3, #0]
 8002de6:	460b      	mov	r3, r1
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	440b      	add	r3, r1
 8002dec:	011b      	lsls	r3, r3, #4
 8002dee:	4413      	add	r3, r2
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d122      	bne.n	8002e3c <main+0xf70>
              FDBuffer[j] = CanFDFrame;
 8002df6:	4a10      	ldr	r2, [pc, #64]	; (8002e38 <main+0xf6c>)
 8002df8:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002dfc:	443b      	add	r3, r7
 8002dfe:	441a      	add	r2, r3
 8002e00:	f641 5334 	movw	r3, #7476	; 0x1d34
 8002e04:	443b      	add	r3, r7
 8002e06:	6819      	ldr	r1, [r3, #0]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	011b      	lsls	r3, r3, #4
 8002e10:	4413      	add	r3, r2
 8002e12:	4a05      	ldr	r2, [pc, #20]	; (8002e28 <main+0xf5c>)
 8002e14:	4618      	mov	r0, r3
 8002e16:	4611      	mov	r1, r2
 8002e18:	2350      	movs	r3, #80	; 0x50
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	f016 fb22 	bl	8019464 <memcpy>
              goto TeleDoneFD;
 8002e20:	e02c      	b.n	8002e7c <main+0xfb0>
 8002e22:	bf00      	nop
 8002e24:	ffffe758 	.word	0xffffe758
 8002e28:	24001040 	.word	0x24001040
 8002e2c:	0801adc4 	.word	0x0801adc4
 8002e30:	0801ade4 	.word	0x0801ade4
 8002e34:	ffffea78 	.word	0xffffea78
 8002e38:	ffffeff0 	.word	0xffffeff0
          for(int j = 0; j < 50; j++){
 8002e3c:	f641 5334 	movw	r3, #7476	; 0x1d34
 8002e40:	443b      	add	r3, r7
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	3301      	adds	r3, #1
 8002e46:	f641 5234 	movw	r2, #7476	; 0x1d34
 8002e4a:	443a      	add	r2, r7
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	f641 5334 	movw	r3, #7476	; 0x1d34
 8002e52:	443b      	add	r3, r7
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b31      	cmp	r3, #49	; 0x31
 8002e58:	dd93      	ble.n	8002d82 <main+0xeb6>
      for(int i = 0; i <50; i++){
 8002e5a:	f641 5338 	movw	r3, #7480	; 0x1d38
 8002e5e:	443b      	add	r3, r7
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	3301      	adds	r3, #1
 8002e64:	f641 5238 	movw	r2, #7480	; 0x1d38
 8002e68:	443a      	add	r2, r7
 8002e6a:	6013      	str	r3, [r2, #0]
 8002e6c:	f641 5338 	movw	r3, #7480	; 0x1d38
 8002e70:	443b      	add	r3, r7
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2b31      	cmp	r3, #49	; 0x31
 8002e76:	f77f af6f 	ble.w	8002d58 <main+0xe8c>
            }
          }
        }
      }
TeleDoneFD:
 8002e7a:	bf00      	nop
		  FDCAN_Flag = 0;
 8002e7c:	4bae      	ldr	r3, [pc, #696]	; (8003138 <main+0x126c>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	601a      	str	r2, [r3, #0]
	  }
	  if(CAN_Flag){
 8002e82:	4bae      	ldr	r3, [pc, #696]	; (800313c <main+0x1270>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 81df 	beq.w	800324a <main+0x137e>

		  RTC_TimeTypeDef lTime = sTime;
 8002e8c:	4bac      	ldr	r3, [pc, #688]	; (8003140 <main+0x1274>)
 8002e8e:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002e92:	443a      	add	r2, r7
 8002e94:	4413      	add	r3, r2
 8002e96:	4aab      	ldr	r2, [pc, #684]	; (8003144 <main+0x1278>)
 8002e98:	461c      	mov	r4, r3
 8002e9a:	4615      	mov	r5, r2
 8002e9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ea0:	682b      	ldr	r3, [r5, #0]
 8002ea2:	6023      	str	r3, [r4, #0]
		  LocalTime = CanFrame.time;
 8002ea4:	4ba8      	ldr	r3, [pc, #672]	; (8003148 <main+0x127c>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002eac:	443a      	add	r2, r7
 8002eae:	6013      	str	r3, [r2, #0]
		  lTime.SubSeconds += LocalTime % 1000;
 8002eb0:	4ba3      	ldr	r3, [pc, #652]	; (8003140 <main+0x1274>)
 8002eb2:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002eb6:	443a      	add	r2, r7
 8002eb8:	4413      	add	r3, r2
 8002eba:	6859      	ldr	r1, [r3, #4]
 8002ebc:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002ec0:	443b      	add	r3, r7
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	4ba1      	ldr	r3, [pc, #644]	; (800314c <main+0x1280>)
 8002ec6:	fba3 0302 	umull	r0, r3, r3, r2
 8002eca:	099b      	lsrs	r3, r3, #6
 8002ecc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ed0:	fb00 f303 	mul.w	r3, r0, r3
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	18ca      	adds	r2, r1, r3
 8002ed8:	4b99      	ldr	r3, [pc, #612]	; (8003140 <main+0x1274>)
 8002eda:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002ede:	4439      	add	r1, r7
 8002ee0:	440b      	add	r3, r1
 8002ee2:	605a      	str	r2, [r3, #4]
		  LocalTime = LocalTime/1000;
 8002ee4:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002ee8:	443b      	add	r3, r7
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a97      	ldr	r2, [pc, #604]	; (800314c <main+0x1280>)
 8002eee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef2:	099b      	lsrs	r3, r3, #6
 8002ef4:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002ef8:	443a      	add	r2, r7
 8002efa:	6013      	str	r3, [r2, #0]
		  lTime.Seconds += LocalTime % 60;
 8002efc:	4b90      	ldr	r3, [pc, #576]	; (8003140 <main+0x1274>)
 8002efe:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002f02:	443a      	add	r2, r7
 8002f04:	4413      	add	r3, r2
 8002f06:	7898      	ldrb	r0, [r3, #2]
 8002f08:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002f0c:	443b      	add	r3, r7
 8002f0e:	6819      	ldr	r1, [r3, #0]
 8002f10:	4b8f      	ldr	r3, [pc, #572]	; (8003150 <main+0x1284>)
 8002f12:	fba3 2301 	umull	r2, r3, r3, r1
 8002f16:	095a      	lsrs	r2, r3, #5
 8002f18:	4613      	mov	r3, r2
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	1a9b      	subs	r3, r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	1aca      	subs	r2, r1, r3
 8002f22:	b2d3      	uxtb	r3, r2
 8002f24:	4403      	add	r3, r0
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	4b85      	ldr	r3, [pc, #532]	; (8003140 <main+0x1274>)
 8002f2a:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002f2e:	4439      	add	r1, r7
 8002f30:	440b      	add	r3, r1
 8002f32:	709a      	strb	r2, [r3, #2]
		  LocalTime = LocalTime/60;
 8002f34:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002f38:	443b      	add	r3, r7
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a84      	ldr	r2, [pc, #528]	; (8003150 <main+0x1284>)
 8002f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002f48:	443a      	add	r2, r7
 8002f4a:	6013      	str	r3, [r2, #0]
		  lTime.Minutes += LocalTime % 60;
 8002f4c:	4b7c      	ldr	r3, [pc, #496]	; (8003140 <main+0x1274>)
 8002f4e:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002f52:	443a      	add	r2, r7
 8002f54:	4413      	add	r3, r2
 8002f56:	7858      	ldrb	r0, [r3, #1]
 8002f58:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002f5c:	443b      	add	r3, r7
 8002f5e:	6819      	ldr	r1, [r3, #0]
 8002f60:	4b7b      	ldr	r3, [pc, #492]	; (8003150 <main+0x1284>)
 8002f62:	fba3 2301 	umull	r2, r3, r3, r1
 8002f66:	095a      	lsrs	r2, r3, #5
 8002f68:	4613      	mov	r3, r2
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	1a9b      	subs	r3, r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	1aca      	subs	r2, r1, r3
 8002f72:	b2d3      	uxtb	r3, r2
 8002f74:	4403      	add	r3, r0
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	4b71      	ldr	r3, [pc, #452]	; (8003140 <main+0x1274>)
 8002f7a:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002f7e:	4439      	add	r1, r7
 8002f80:	440b      	add	r3, r1
 8002f82:	705a      	strb	r2, [r3, #1]
		  LocalTime = LocalTime/60;
 8002f84:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002f88:	443b      	add	r3, r7
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a70      	ldr	r2, [pc, #448]	; (8003150 <main+0x1284>)
 8002f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f92:	095b      	lsrs	r3, r3, #5
 8002f94:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002f98:	443a      	add	r2, r7
 8002f9a:	6013      	str	r3, [r2, #0]
		  lTime.Hours += LocalTime % 60;
 8002f9c:	4b68      	ldr	r3, [pc, #416]	; (8003140 <main+0x1274>)
 8002f9e:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002fa2:	443a      	add	r2, r7
 8002fa4:	4413      	add	r3, r2
 8002fa6:	7818      	ldrb	r0, [r3, #0]
 8002fa8:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002fac:	443b      	add	r3, r7
 8002fae:	6819      	ldr	r1, [r3, #0]
 8002fb0:	4b67      	ldr	r3, [pc, #412]	; (8003150 <main+0x1284>)
 8002fb2:	fba3 2301 	umull	r2, r3, r3, r1
 8002fb6:	095a      	lsrs	r2, r3, #5
 8002fb8:	4613      	mov	r3, r2
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	1aca      	subs	r2, r1, r3
 8002fc2:	b2d3      	uxtb	r3, r2
 8002fc4:	4403      	add	r3, r0
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	4b5d      	ldr	r3, [pc, #372]	; (8003140 <main+0x1274>)
 8002fca:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002fce:	4439      	add	r1, r7
 8002fd0:	440b      	add	r3, r1
 8002fd2:	701a      	strb	r2, [r3, #0]

		  //date/time, CANID, Data
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002fd4:	4b5f      	ldr	r3, [pc, #380]	; (8003154 <main+0x1288>)
 8002fd6:	789b      	ldrb	r3, [r3, #2]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002fd8:	469c      	mov	ip, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002fda:	4b5e      	ldr	r3, [pc, #376]	; (8003154 <main+0x1288>)
 8002fdc:	785b      	ldrb	r3, [r3, #1]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002fde:	469e      	mov	lr, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002fe0:	4b5c      	ldr	r3, [pc, #368]	; (8003154 <main+0x1288>)
 8002fe2:	78db      	ldrb	r3, [r3, #3]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002fe4:	4619      	mov	r1, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002fe6:	4b56      	ldr	r3, [pc, #344]	; (8003140 <main+0x1274>)
 8002fe8:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002fec:	443a      	add	r2, r7
 8002fee:	4413      	add	r3, r2
 8002ff0:	781b      	ldrb	r3, [r3, #0]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002ff2:	461c      	mov	r4, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002ff4:	4b52      	ldr	r3, [pc, #328]	; (8003140 <main+0x1274>)
 8002ff6:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002ffa:	443a      	add	r2, r7
 8002ffc:	4413      	add	r3, r2
 8002ffe:	785b      	ldrb	r3, [r3, #1]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8003000:	461d      	mov	r5, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8003002:	4b4f      	ldr	r3, [pc, #316]	; (8003140 <main+0x1274>)
 8003004:	f641 5270 	movw	r2, #7536	; 0x1d70
 8003008:	443a      	add	r2, r7
 800300a:	4413      	add	r3, r2
 800300c:	789b      	ldrb	r3, [r3, #2]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 800300e:	461e      	mov	r6, r3
 8003010:	4b4b      	ldr	r3, [pc, #300]	; (8003140 <main+0x1274>)
 8003012:	f641 5270 	movw	r2, #7536	; 0x1d70
 8003016:	443a      	add	r2, r7
 8003018:	4413      	add	r3, r2
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	4a4a      	ldr	r2, [pc, #296]	; (8003148 <main+0x127c>)
 800301e:	6812      	ldr	r2, [r2, #0]
 8003020:	484d      	ldr	r0, [pc, #308]	; (8003158 <main+0x128c>)
 8003022:	f641 5870 	movw	r8, #7536	; 0x1d70
 8003026:	44b8      	add	r8, r7
 8003028:	4440      	add	r0, r8
 800302a:	9205      	str	r2, [sp, #20]
 800302c:	9304      	str	r3, [sp, #16]
 800302e:	9603      	str	r6, [sp, #12]
 8003030:	9502      	str	r5, [sp, #8]
 8003032:	9401      	str	r4, [sp, #4]
 8003034:	9100      	str	r1, [sp, #0]
 8003036:	4673      	mov	r3, lr
 8003038:	4662      	mov	r2, ip
 800303a:	4948      	ldr	r1, [pc, #288]	; (800315c <main+0x1290>)
 800303c:	f016 fb8e 	bl	801975c <siprintf>
 8003040:	f641 536c 	movw	r3, #7532	; 0x1d6c
 8003044:	443b      	add	r3, r7
 8003046:	6018      	str	r0, [r3, #0]
				  CanFrame.id);
		  for(int i = 0; i < CanFDFrame.length; i++){
 8003048:	2300      	movs	r3, #0
 800304a:	f641 5230 	movw	r2, #7472	; 0x1d30
 800304e:	443a      	add	r2, r7
 8003050:	6013      	str	r3, [r2, #0]
 8003052:	e028      	b.n	80030a6 <main+0x11da>
			  CW += sprintf(CanWrite + CW, "%c", CanFrame.data.bytes[i]);
 8003054:	f641 536c 	movw	r3, #7532	; 0x1d6c
 8003058:	443b      	add	r3, r7
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	4b3e      	ldr	r3, [pc, #248]	; (8003158 <main+0x128c>)
 800305e:	f641 5170 	movw	r1, #7536	; 0x1d70
 8003062:	4439      	add	r1, r7
 8003064:	440b      	add	r3, r1
 8003066:	1898      	adds	r0, r3, r2
 8003068:	4a37      	ldr	r2, [pc, #220]	; (8003148 <main+0x127c>)
 800306a:	f641 5330 	movw	r3, #7472	; 0x1d30
 800306e:	443b      	add	r3, r7
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4413      	add	r3, r2
 8003074:	3310      	adds	r3, #16
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	461a      	mov	r2, r3
 800307a:	4939      	ldr	r1, [pc, #228]	; (8003160 <main+0x1294>)
 800307c:	f016 fb6e 	bl	801975c <siprintf>
 8003080:	4602      	mov	r2, r0
 8003082:	f641 536c 	movw	r3, #7532	; 0x1d6c
 8003086:	443b      	add	r3, r7
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4413      	add	r3, r2
 800308c:	f641 526c 	movw	r2, #7532	; 0x1d6c
 8003090:	443a      	add	r2, r7
 8003092:	6013      	str	r3, [r2, #0]
		  for(int i = 0; i < CanFDFrame.length; i++){
 8003094:	f641 5330 	movw	r3, #7472	; 0x1d30
 8003098:	443b      	add	r3, r7
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	3301      	adds	r3, #1
 800309e:	f641 5230 	movw	r2, #7472	; 0x1d30
 80030a2:	443a      	add	r2, r7
 80030a4:	6013      	str	r3, [r2, #0]
 80030a6:	4b2f      	ldr	r3, [pc, #188]	; (8003164 <main+0x1298>)
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	f641 5330 	movw	r3, #7472	; 0x1d30
 80030ae:	443b      	add	r3, r7
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d8ce      	bhi.n	8003054 <main+0x1188>
		  }
		  CW += sprintf(CanWrite + CW, "\n\r");
 80030b6:	f641 536c 	movw	r3, #7532	; 0x1d6c
 80030ba:	443b      	add	r3, r7
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	4b26      	ldr	r3, [pc, #152]	; (8003158 <main+0x128c>)
 80030c0:	f641 5170 	movw	r1, #7536	; 0x1d70
 80030c4:	4439      	add	r1, r7
 80030c6:	440b      	add	r3, r1
 80030c8:	4413      	add	r3, r2
 80030ca:	4a27      	ldr	r2, [pc, #156]	; (8003168 <main+0x129c>)
 80030cc:	8811      	ldrh	r1, [r2, #0]
 80030ce:	7892      	ldrb	r2, [r2, #2]
 80030d0:	8019      	strh	r1, [r3, #0]
 80030d2:	709a      	strb	r2, [r3, #2]
 80030d4:	2202      	movs	r2, #2
 80030d6:	f641 536c 	movw	r3, #7532	; 0x1d6c
 80030da:	443b      	add	r3, r7
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4413      	add	r3, r2
 80030e0:	f641 526c 	movw	r2, #7532	; 0x1d6c
 80030e4:	443a      	add	r2, r7
 80030e6:	6013      	str	r3, [r2, #0]
		  WriteToBuff(CanWrite, CW);
 80030e8:	4b1b      	ldr	r3, [pc, #108]	; (8003158 <main+0x128c>)
 80030ea:	f641 5270 	movw	r2, #7536	; 0x1d70
 80030ee:	443a      	add	r2, r7
 80030f0:	4413      	add	r3, r2
 80030f2:	f641 526c 	movw	r2, #7532	; 0x1d6c
 80030f6:	443a      	add	r2, r7
 80030f8:	6811      	ldr	r1, [r2, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fe fe3e 	bl	8001d7c <WriteToBuff>

      for(int i = 0; i <50; i++){
 8003100:	2300      	movs	r3, #0
 8003102:	f641 522c 	movw	r2, #7468	; 0x1d2c
 8003106:	443a      	add	r2, r7
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	e091      	b.n	8003230 <main+0x1364>
        if(CanFrame.id == Tele_IDs[i]){ //check if frame should be checked
 800310c:	4b0e      	ldr	r3, [pc, #56]	; (8003148 <main+0x127c>)
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	4b16      	ldr	r3, [pc, #88]	; (800316c <main+0x12a0>)
 8003112:	f641 5170 	movw	r1, #7536	; 0x1d70
 8003116:	4439      	add	r1, r7
 8003118:	440b      	add	r3, r1
 800311a:	f641 512c 	movw	r1, #7468	; 0x1d2c
 800311e:	4439      	add	r1, r7
 8003120:	6809      	ldr	r1, [r1, #0]
 8003122:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003126:	429a      	cmp	r2, r3
 8003128:	d179      	bne.n	800321e <main+0x1352>
          for(int j = 0; j < 50; j++){
 800312a:	2300      	movs	r3, #0
 800312c:	f641 5228 	movw	r2, #7464	; 0x1d28
 8003130:	443a      	add	r2, r7
 8003132:	6013      	str	r3, [r2, #0]
 8003134:	e06d      	b.n	8003212 <main+0x1346>
 8003136:	bf00      	nop
 8003138:	240001fc 	.word	0x240001fc
 800313c:	24000200 	.word	0x24000200
 8003140:	ffffe710 	.word	0xffffe710
 8003144:	24000b30 	.word	0x24000b30
 8003148:	240010b8 	.word	0x240010b8
 800314c:	10624dd3 	.word	0x10624dd3
 8003150:	88888889 	.word	0x88888889
 8003154:	24000b44 	.word	0x24000b44
 8003158:	ffffe8e8 	.word	0xffffe8e8
 800315c:	0801adc8 	.word	0x0801adc8
 8003160:	0801adc4 	.word	0x0801adc4
 8003164:	24001040 	.word	0x24001040
 8003168:	0801ade4 	.word	0x0801ade4
 800316c:	ffffea78 	.word	0xffffea78
            if(Buffer[j].id == CanFrame.id){
 8003170:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8003174:	f641 5328 	movw	r3, #7464	; 0x1d28
 8003178:	443b      	add	r3, r7
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	4613      	mov	r3, r2
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	4413      	add	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	440b      	add	r3, r1
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	4b5a      	ldr	r3, [pc, #360]	; (80032f4 <main+0x1428>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d114      	bne.n	80031ba <main+0x12ee>
              Buffer[j] = CanFrame;     //if its already in the buffer replace it
 8003190:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8003194:	f641 5328 	movw	r3, #7464	; 0x1d28
 8003198:	443b      	add	r3, r7
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	4613      	mov	r3, r2
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	4413      	add	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	440b      	add	r3, r1
 80031a6:	4a53      	ldr	r2, [pc, #332]	; (80032f4 <main+0x1428>)
 80031a8:	461c      	mov	r4, r3
 80031aa:	4615      	mov	r5, r2
 80031ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80031b4:	e884 0003 	stmia.w	r4, {r0, r1}
              goto TeleDone;
 80031b8:	e044      	b.n	8003244 <main+0x1378>
            }
            if(Buffer[j].id == 0){
 80031ba:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 80031be:	f641 5328 	movw	r3, #7464	; 0x1d28
 80031c2:	443b      	add	r3, r7
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	4613      	mov	r3, r2
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	4413      	add	r3, r2
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	440b      	add	r3, r1
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d114      	bne.n	8003200 <main+0x1334>
              Buffer[j] = CanFrame;     //if you get to the end of the defined packets withoout finding anything add the packet on the end
 80031d6:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 80031da:	f641 5328 	movw	r3, #7464	; 0x1d28
 80031de:	443b      	add	r3, r7
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	4613      	mov	r3, r2
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	4413      	add	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	440b      	add	r3, r1
 80031ec:	4a41      	ldr	r2, [pc, #260]	; (80032f4 <main+0x1428>)
 80031ee:	461c      	mov	r4, r3
 80031f0:	4615      	mov	r5, r2
 80031f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031f6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80031fa:	e884 0003 	stmia.w	r4, {r0, r1}
              goto TeleDone;
 80031fe:	e021      	b.n	8003244 <main+0x1378>
          for(int j = 0; j < 50; j++){
 8003200:	f641 5328 	movw	r3, #7464	; 0x1d28
 8003204:	443b      	add	r3, r7
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	3301      	adds	r3, #1
 800320a:	f641 5228 	movw	r2, #7464	; 0x1d28
 800320e:	443a      	add	r2, r7
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	f641 5328 	movw	r3, #7464	; 0x1d28
 8003216:	443b      	add	r3, r7
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b31      	cmp	r3, #49	; 0x31
 800321c:	dda8      	ble.n	8003170 <main+0x12a4>
      for(int i = 0; i <50; i++){
 800321e:	f641 532c 	movw	r3, #7468	; 0x1d2c
 8003222:	443b      	add	r3, r7
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	3301      	adds	r3, #1
 8003228:	f641 522c 	movw	r2, #7468	; 0x1d2c
 800322c:	443a      	add	r2, r7
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	f641 532c 	movw	r3, #7468	; 0x1d2c
 8003234:	443b      	add	r3, r7
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2b31      	cmp	r3, #49	; 0x31
 800323a:	f77f af67 	ble.w	800310c <main+0x1240>
            }
          }
        }
      }
      printf("couldnt track, id buffer too full :(");
 800323e:	482e      	ldr	r0, [pc, #184]	; (80032f8 <main+0x142c>)
 8003240:	f016 f9cc 	bl	80195dc <iprintf>
TeleDone:
		  CAN_Flag = 0;
 8003244:	4b2d      	ldr	r3, [pc, #180]	; (80032fc <main+0x1430>)
 8003246:	2200      	movs	r2, #0
 8003248:	601a      	str	r2, [r3, #0]
	  }
	  //WriteToBuff(A, 2);
	  //HAL_Delay(1000);
	  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
    /* USER CODE END WHILE */
    EndTime = HAL_GetTick();
 800324a:	f001 f9b5 	bl	80045b8 <HAL_GetTick>
 800324e:	f641 5308 	movw	r3, #7432	; 0x1d08
 8003252:	443b      	add	r3, r7
 8003254:	6018      	str	r0, [r3, #0]
    if(StartTime - EndTime > LoopTime + 5){
 8003256:	f641 530c 	movw	r3, #7436	; 0x1d0c
 800325a:	443b      	add	r3, r7
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	f641 5308 	movw	r3, #7432	; 0x1d08
 8003262:	443b      	add	r3, r7
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	1ad2      	subs	r2, r2, r3
 8003268:	f641 5310 	movw	r3, #7440	; 0x1d10
 800326c:	443b      	add	r3, r7
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	3305      	adds	r3, #5
 8003272:	429a      	cmp	r2, r3
 8003274:	d909      	bls.n	800328a <main+0x13be>
      AllowedTele--;
 8003276:	f641 5364 	movw	r3, #7524	; 0x1d64
 800327a:	443b      	add	r3, r7
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	3b01      	subs	r3, #1
 8003280:	f641 5264 	movw	r2, #7524	; 0x1d64
 8003284:	443a      	add	r2, r7
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	e017      	b.n	80032ba <main+0x13ee>
    }else if(StartTime - EndTime < LoopTime){
 800328a:	f641 530c 	movw	r3, #7436	; 0x1d0c
 800328e:	443b      	add	r3, r7
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	f641 5308 	movw	r3, #7432	; 0x1d08
 8003296:	443b      	add	r3, r7
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	f641 5210 	movw	r2, #7440	; 0x1d10
 80032a0:	443a      	add	r2, r7
 80032a2:	6812      	ldr	r2, [r2, #0]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d908      	bls.n	80032ba <main+0x13ee>
      AllowedTele++;
 80032a8:	f641 5364 	movw	r3, #7524	; 0x1d64
 80032ac:	443b      	add	r3, r7
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	3301      	adds	r3, #1
 80032b2:	f641 5264 	movw	r2, #7524	; 0x1d64
 80032b6:	443a      	add	r2, r7
 80032b8:	6013      	str	r3, [r2, #0]
    }if (AllowedTele<1){
 80032ba:	f641 5364 	movw	r3, #7524	; 0x1d64
 80032be:	443b      	add	r3, r7
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	dc04      	bgt.n	80032d0 <main+0x1404>
    	AllowedTele = 1;
 80032c6:	2301      	movs	r3, #1
 80032c8:	f641 5264 	movw	r2, #7524	; 0x1d64
 80032cc:	443a      	add	r2, r7
 80032ce:	6013      	str	r3, [r2, #0]
  while (end_flag){
 80032d0:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <main+0x1434>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f47f a935 	bne.w	8002544 <main+0x678>
    /* USER CODE BEGIN 3 */
}

    //f_write(&myFILE, close_msg, strlen(close_msg), &testByte);
    //f_close(&myFILE);
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80032da:	2101      	movs	r1, #1
 80032dc:	4809      	ldr	r0, [pc, #36]	; (8003304 <main+0x1438>)
 80032de:	f004 feaa 	bl	8008036 <HAL_GPIO_TogglePin>
 80032e2:	2300      	movs	r3, #0
    //printf("File closed\n");

  /* USER CODE END 3 */
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	f507 57eb 	add.w	r7, r7, #7520	; 0x1d60
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032f2:	bf00      	nop
 80032f4:	240010b8 	.word	0x240010b8
 80032f8:	0801ade8 	.word	0x0801ade8
 80032fc:	24000200 	.word	0x24000200
 8003300:	24000008 	.word	0x24000008
 8003304:	58020400 	.word	0x58020400

08003308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b0cc      	sub	sp, #304	; 0x130
 800330c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800330e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003312:	224c      	movs	r2, #76	; 0x4c
 8003314:	2100      	movs	r1, #0
 8003316:	4618      	mov	r0, r3
 8003318:	f016 f8af 	bl	801947a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800331c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003320:	2220      	movs	r2, #32
 8003322:	2100      	movs	r1, #0
 8003324:	4618      	mov	r0, r3
 8003326:	f016 f8a8 	bl	801947a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800332a:	f107 0308 	add.w	r3, r7, #8
 800332e:	4618      	mov	r0, r3
 8003330:	23bc      	movs	r3, #188	; 0xbc
 8003332:	461a      	mov	r2, r3
 8003334:	2100      	movs	r1, #0
 8003336:	f016 f8a0 	bl	801947a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800333a:	2002      	movs	r0, #2
 800333c:	f006 f976 	bl	800962c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003340:	1d3b      	adds	r3, r7, #4
 8003342:	2200      	movs	r2, #0
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	4b71      	ldr	r3, [pc, #452]	; (800350c <SystemClock_Config+0x204>)
 8003348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334a:	4a70      	ldr	r2, [pc, #448]	; (800350c <SystemClock_Config+0x204>)
 800334c:	f023 0301 	bic.w	r3, r3, #1
 8003350:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003352:	4b6e      	ldr	r3, [pc, #440]	; (800350c <SystemClock_Config+0x204>)
 8003354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003356:	f003 0201 	and.w	r2, r3, #1
 800335a:	1d3b      	adds	r3, r7, #4
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	4b6c      	ldr	r3, [pc, #432]	; (8003510 <SystemClock_Config+0x208>)
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	4a6b      	ldr	r2, [pc, #428]	; (8003510 <SystemClock_Config+0x208>)
 8003364:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003368:	6193      	str	r3, [r2, #24]
 800336a:	4b69      	ldr	r3, [pc, #420]	; (8003510 <SystemClock_Config+0x208>)
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8003372:	1d3b      	adds	r3, r7, #4
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	1d3b      	adds	r3, r7, #4
 8003378:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800337a:	bf00      	nop
 800337c:	4b64      	ldr	r3, [pc, #400]	; (8003510 <SystemClock_Config+0x208>)
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003388:	d1f8      	bne.n	800337c <SystemClock_Config+0x74>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800338a:	f006 f8b5 	bl	80094f8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 800338e:	f001 f941 	bl	8004614 <HAL_GetREVID>
 8003392:	4b60      	ldr	r3, [pc, #384]	; (8003514 <SystemClock_Config+0x20c>)
 8003394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003396:	4a5f      	ldr	r2, [pc, #380]	; (8003514 <SystemClock_Config+0x20c>)
 8003398:	f043 0318 	orr.w	r3, r3, #24
 800339c:	6713      	str	r3, [r2, #112]	; 0x70
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800339e:	4b5d      	ldr	r3, [pc, #372]	; (8003514 <SystemClock_Config+0x20c>)
 80033a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a2:	f023 0303 	bic.w	r3, r3, #3
 80033a6:	4a5b      	ldr	r2, [pc, #364]	; (8003514 <SystemClock_Config+0x20c>)
 80033a8:	f043 0302 	orr.w	r3, r3, #2
 80033ac:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 80033ae:	2325      	movs	r3, #37	; 0x25
 80033b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80033b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80033bc:	2301      	movs	r3, #1
 80033be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80033c2:	2301      	movs	r3, #1
 80033c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033c8:	2302      	movs	r3, #2
 80033ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80033ce:	2302      	movs	r3, #2
 80033d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80033d4:	2302      	movs	r3, #2
 80033d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 64;
 80033da:	2340      	movs	r3, #64	; 0x40
 80033dc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80033e0:	2302      	movs	r3, #2
 80033e2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 10;
 80033e6:	230a      	movs	r3, #10
 80033e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80033ec:	2302      	movs	r3, #2
 80033ee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80033f2:	230c      	movs	r3, #12
 80033f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80033f8:	2300      	movs	r3, #0
 80033fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80033fe:	2300      	movs	r3, #0
 8003400:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003404:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003408:	4618      	mov	r0, r3
 800340a:	f006 f99d 	bl	8009748 <HAL_RCC_OscConfig>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8003414:	f000 fbe8 	bl	8003be8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003418:	233f      	movs	r3, #63	; 0x3f
 800341a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800341e:	2303      	movs	r3, #3
 8003420:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003424:	2300      	movs	r3, #0
 8003426:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800342a:	2308      	movs	r3, #8
 800342c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003430:	2340      	movs	r3, #64	; 0x40
 8003432:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003436:	2340      	movs	r3, #64	; 0x40
 8003438:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800343c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003440:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003444:	2340      	movs	r3, #64	; 0x40
 8003446:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800344a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800344e:	2102      	movs	r1, #2
 8003450:	4618      	mov	r0, r3
 8003452:	f006 fd89 	bl	8009f68 <HAL_RCC_ClockConfig>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <SystemClock_Config+0x158>
  {
    Error_Handler();
 800345c:	f000 fbc4 	bl	8003be8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 8003460:	f107 0308 	add.w	r3, r7, #8
 8003464:	4a2c      	ldr	r2, [pc, #176]	; (8003518 <SystemClock_Config+0x210>)
 8003466:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_FDCAN|RCC_PERIPHCLK_UART8
                              |RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8003468:	f107 0308 	add.w	r3, r7, #8
 800346c:	2202      	movs	r2, #2
 800346e:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8003470:	f107 0308 	add.w	r3, r7, #8
 8003474:	220c      	movs	r2, #12
 8003476:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 8003478:	f107 0308 	add.w	r3, r7, #8
 800347c:	2203      	movs	r2, #3
 800347e:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003480:	f107 0308 	add.w	r3, r7, #8
 8003484:	2202      	movs	r2, #2
 8003486:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 3;
 8003488:	f107 0308 	add.w	r3, r7, #8
 800348c:	2203      	movs	r2, #3
 800348e:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8003490:	f107 0308 	add.w	r3, r7, #8
 8003494:	22c0      	movs	r2, #192	; 0xc0
 8003496:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8003498:	f107 0308 	add.w	r3, r7, #8
 800349c:	2220      	movs	r2, #32
 800349e:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80034a0:	f107 0308 	add.w	r3, r7, #8
 80034a4:	2200      	movs	r2, #0
 80034a6:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80034a8:	f107 0308 	add.w	r3, r7, #8
 80034ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80034b0:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80034b2:	f107 0308 	add.w	r3, r7, #8
 80034b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034ba:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80034bc:	f107 0308 	add.w	r3, r7, #8
 80034c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034c4:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80034c6:	f107 0308 	add.w	r3, r7, #8
 80034ca:	2200      	movs	r2, #0
 80034cc:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80034ce:	f107 0308 	add.w	r3, r7, #8
 80034d2:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80034d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80034da:	f107 0308 	add.w	r3, r7, #8
 80034de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034e6:	f107 0308 	add.w	r3, r7, #8
 80034ea:	4618      	mov	r0, r3
 80034ec:	f007 f8ec 	bl	800a6c8 <HAL_RCCEx_PeriphCLKConfig>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <SystemClock_Config+0x1f2>
  {
    Error_Handler();
 80034f6:	f000 fb77 	bl	8003be8 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80034fa:	f006 feeb 	bl	800a2d4 <HAL_RCC_EnableCSS>
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80034fe:	f006 f8cf 	bl	80096a0 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8003502:	bf00      	nop
 8003504:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	58000400 	.word	0x58000400
 8003510:	58024800 	.word	0x58024800
 8003514:	58024400 	.word	0x58024400
 8003518:	00459002 	.word	0x00459002

0800351c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8003520:	4b2f      	ldr	r3, [pc, #188]	; (80035e0 <MX_FDCAN1_Init+0xc4>)
 8003522:	4a30      	ldr	r2, [pc, #192]	; (80035e4 <MX_FDCAN1_Init+0xc8>)
 8003524:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8003526:	4b2e      	ldr	r3, [pc, #184]	; (80035e0 <MX_FDCAN1_Init+0xc4>)
 8003528:	f44f 7240 	mov.w	r2, #768	; 0x300
 800352c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800352e:	4b2c      	ldr	r3, [pc, #176]	; (80035e0 <MX_FDCAN1_Init+0xc4>)
 8003530:	2200      	movs	r2, #0
 8003532:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8003534:	4b2a      	ldr	r3, [pc, #168]	; (80035e0 <MX_FDCAN1_Init+0xc4>)
 8003536:	2200      	movs	r2, #0
 8003538:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800353a:	4b29      	ldr	r3, [pc, #164]	; (80035e0 <MX_FDCAN1_Init+0xc4>)
 800353c:	2200      	movs	r2, #0
 800353e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8003540:	4b27      	ldr	r3, [pc, #156]	; (80035e0 <MX_FDCAN1_Init+0xc4>)
 8003542:	2200      	movs	r2, #0
 8003544:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8003546:	4b26      	ldr	r3, [pc, #152]	; (80035e0 <MX_FDCAN1_Init+0xc4>)
 8003548:	2201      	movs	r2, #1
 800354a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 23;
 800354c:	4b24      	ldr	r3, [pc, #144]	; (80035e0 <MX_FDCAN1_Init+0xc4>)
 800354e:	2217      	movs	r2, #23
 8003550:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 56;
 8003552:	4b23      	ldr	r3, [pc, #140]	; (80035e0 <MX_FDCAN1_Init+0xc4>)
 8003554:	2238      	movs	r2, #56	; 0x38
 8003556:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 23;
 8003558:	4b21      	ldr	r3, [pc, #132]	; (80035e0 <MX_FDCAN1_Init+0xc4>)
 800355a:	2217      	movs	r2, #23
 800355c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800355e:	4b20      	ldr	r3, [pc, #128]	; (80035e0 <MX_FDCAN1_Init+0xc4>)
 8003560:	2201      	movs	r2, #1
 8003562:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 5;
 8003564:	4b1e      	ldr	r3, [pc, #120]	; (80035e0 <MX_FDCAN1_Init+0xc4>)
 8003566:	2205      	movs	r2, #5
 8003568:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 800356a:	4b1d      	ldr	r3, [pc, #116]	; (80035e0 <MX_FDCAN1_Init+0xc4>)
 800356c:	220a      	movs	r2, #10
 800356e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 8003570:	4b1b      	ldr	r3, [pc, #108]	; (80035e0 <MX_FDCAN1_Init+0xc4>)
 8003572:	2205      	movs	r2, #5
 8003574:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8003576:	4b1a      	ldr	r3, [pc, #104]	; (80035e0 <MX_FDCAN1_Init+0xc4>)
 8003578:	2200      	movs	r2, #0
 800357a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 2;
 800357c:	4b18      	ldr	r3, [pc, #96]	; (80035e0 <MX_FDCAN1_Init+0xc4>)
 800357e:	2202      	movs	r2, #2
 8003580:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 2;
 8003582:	4b17      	ldr	r3, [pc, #92]	; (80035e0 <MX_FDCAN1_Init+0xc4>)
 8003584:	2202      	movs	r2, #2
 8003586:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 8003588:	4b15      	ldr	r3, [pc, #84]	; (80035e0 <MX_FDCAN1_Init+0xc4>)
 800358a:	2240      	movs	r2, #64	; 0x40
 800358c:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 800358e:	4b14      	ldr	r3, [pc, #80]	; (80035e0 <MX_FDCAN1_Init+0xc4>)
 8003590:	2212      	movs	r2, #18
 8003592:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8003594:	4b12      	ldr	r3, [pc, #72]	; (80035e0 <MX_FDCAN1_Init+0xc4>)
 8003596:	2200      	movs	r2, #0
 8003598:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800359a:	4b11      	ldr	r3, [pc, #68]	; (80035e0 <MX_FDCAN1_Init+0xc4>)
 800359c:	2204      	movs	r2, #4
 800359e:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80035a0:	4b0f      	ldr	r3, [pc, #60]	; (80035e0 <MX_FDCAN1_Init+0xc4>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80035a6:	4b0e      	ldr	r3, [pc, #56]	; (80035e0 <MX_FDCAN1_Init+0xc4>)
 80035a8:	2204      	movs	r2, #4
 80035aa:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80035ac:	4b0c      	ldr	r3, [pc, #48]	; (80035e0 <MX_FDCAN1_Init+0xc4>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80035b2:	4b0b      	ldr	r3, [pc, #44]	; (80035e0 <MX_FDCAN1_Init+0xc4>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80035b8:	4b09      	ldr	r3, [pc, #36]	; (80035e0 <MX_FDCAN1_Init+0xc4>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80035be:	4b08      	ldr	r3, [pc, #32]	; (80035e0 <MX_FDCAN1_Init+0xc4>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80035c4:	4b06      	ldr	r3, [pc, #24]	; (80035e0 <MX_FDCAN1_Init+0xc4>)
 80035c6:	2204      	movs	r2, #4
 80035c8:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80035ca:	4805      	ldr	r0, [pc, #20]	; (80035e0 <MX_FDCAN1_Init+0xc4>)
 80035cc:	f003 fa16 	bl	80069fc <HAL_FDCAN_Init>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 80035d6:	f000 fb07 	bl	8003be8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80035da:	bf00      	nop
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	240014f4 	.word	0x240014f4
 80035e4:	4000a000 	.word	0x4000a000

080035e8 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 80035ec:	4b2e      	ldr	r3, [pc, #184]	; (80036a8 <MX_FDCAN2_Init+0xc0>)
 80035ee:	4a2f      	ldr	r2, [pc, #188]	; (80036ac <MX_FDCAN2_Init+0xc4>)
 80035f0:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80035f2:	4b2d      	ldr	r3, [pc, #180]	; (80036a8 <MX_FDCAN2_Init+0xc0>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80035f8:	4b2b      	ldr	r3, [pc, #172]	; (80036a8 <MX_FDCAN2_Init+0xc0>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80035fe:	4b2a      	ldr	r3, [pc, #168]	; (80036a8 <MX_FDCAN2_Init+0xc0>)
 8003600:	2200      	movs	r2, #0
 8003602:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8003604:	4b28      	ldr	r3, [pc, #160]	; (80036a8 <MX_FDCAN2_Init+0xc0>)
 8003606:	2200      	movs	r2, #0
 8003608:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800360a:	4b27      	ldr	r3, [pc, #156]	; (80036a8 <MX_FDCAN2_Init+0xc0>)
 800360c:	2200      	movs	r2, #0
 800360e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8003610:	4b25      	ldr	r3, [pc, #148]	; (80036a8 <MX_FDCAN2_Init+0xc0>)
 8003612:	2201      	movs	r2, #1
 8003614:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8003616:	4b24      	ldr	r3, [pc, #144]	; (80036a8 <MX_FDCAN2_Init+0xc0>)
 8003618:	2201      	movs	r2, #1
 800361a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800361c:	4b22      	ldr	r3, [pc, #136]	; (80036a8 <MX_FDCAN2_Init+0xc0>)
 800361e:	2202      	movs	r2, #2
 8003620:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8003622:	4b21      	ldr	r3, [pc, #132]	; (80036a8 <MX_FDCAN2_Init+0xc0>)
 8003624:	2202      	movs	r2, #2
 8003626:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8003628:	4b1f      	ldr	r3, [pc, #124]	; (80036a8 <MX_FDCAN2_Init+0xc0>)
 800362a:	2201      	movs	r2, #1
 800362c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800362e:	4b1e      	ldr	r3, [pc, #120]	; (80036a8 <MX_FDCAN2_Init+0xc0>)
 8003630:	2201      	movs	r2, #1
 8003632:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8003634:	4b1c      	ldr	r3, [pc, #112]	; (80036a8 <MX_FDCAN2_Init+0xc0>)
 8003636:	2201      	movs	r2, #1
 8003638:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800363a:	4b1b      	ldr	r3, [pc, #108]	; (80036a8 <MX_FDCAN2_Init+0xc0>)
 800363c:	2201      	movs	r2, #1
 800363e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8003640:	4b19      	ldr	r3, [pc, #100]	; (80036a8 <MX_FDCAN2_Init+0xc0>)
 8003642:	2200      	movs	r2, #0
 8003644:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8003646:	4b18      	ldr	r3, [pc, #96]	; (80036a8 <MX_FDCAN2_Init+0xc0>)
 8003648:	2200      	movs	r2, #0
 800364a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 800364c:	4b16      	ldr	r3, [pc, #88]	; (80036a8 <MX_FDCAN2_Init+0xc0>)
 800364e:	2200      	movs	r2, #0
 8003650:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8003652:	4b15      	ldr	r3, [pc, #84]	; (80036a8 <MX_FDCAN2_Init+0xc0>)
 8003654:	2200      	movs	r2, #0
 8003656:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8003658:	4b13      	ldr	r3, [pc, #76]	; (80036a8 <MX_FDCAN2_Init+0xc0>)
 800365a:	2204      	movs	r2, #4
 800365c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 800365e:	4b12      	ldr	r3, [pc, #72]	; (80036a8 <MX_FDCAN2_Init+0xc0>)
 8003660:	2200      	movs	r2, #0
 8003662:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8003664:	4b10      	ldr	r3, [pc, #64]	; (80036a8 <MX_FDCAN2_Init+0xc0>)
 8003666:	2204      	movs	r2, #4
 8003668:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 800366a:	4b0f      	ldr	r3, [pc, #60]	; (80036a8 <MX_FDCAN2_Init+0xc0>)
 800366c:	2200      	movs	r2, #0
 800366e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8003670:	4b0d      	ldr	r3, [pc, #52]	; (80036a8 <MX_FDCAN2_Init+0xc0>)
 8003672:	2204      	movs	r2, #4
 8003674:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8003676:	4b0c      	ldr	r3, [pc, #48]	; (80036a8 <MX_FDCAN2_Init+0xc0>)
 8003678:	2200      	movs	r2, #0
 800367a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 800367c:	4b0a      	ldr	r3, [pc, #40]	; (80036a8 <MX_FDCAN2_Init+0xc0>)
 800367e:	2200      	movs	r2, #0
 8003680:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8003682:	4b09      	ldr	r3, [pc, #36]	; (80036a8 <MX_FDCAN2_Init+0xc0>)
 8003684:	2200      	movs	r2, #0
 8003686:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003688:	4b07      	ldr	r3, [pc, #28]	; (80036a8 <MX_FDCAN2_Init+0xc0>)
 800368a:	2200      	movs	r2, #0
 800368c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800368e:	4b06      	ldr	r3, [pc, #24]	; (80036a8 <MX_FDCAN2_Init+0xc0>)
 8003690:	2204      	movs	r2, #4
 8003692:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8003694:	4804      	ldr	r0, [pc, #16]	; (80036a8 <MX_FDCAN2_Init+0xc0>)
 8003696:	f003 f9b1 	bl	80069fc <HAL_FDCAN_Init>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 80036a0:	f000 faa2 	bl	8003be8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80036a4:	bf00      	nop
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	240016a8 	.word	0x240016a8
 80036ac:	4000a400 	.word	0x4000a400

080036b0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80036b6:	1d3b      	adds	r3, r7, #4
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	605a      	str	r2, [r3, #4]
 80036be:	609a      	str	r2, [r3, #8]
 80036c0:	60da      	str	r2, [r3, #12]
 80036c2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80036c4:	2300      	movs	r3, #0
 80036c6:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80036c8:	4b26      	ldr	r3, [pc, #152]	; (8003764 <MX_RTC_Init+0xb4>)
 80036ca:	4a27      	ldr	r2, [pc, #156]	; (8003768 <MX_RTC_Init+0xb8>)
 80036cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80036ce:	4b25      	ldr	r3, [pc, #148]	; (8003764 <MX_RTC_Init+0xb4>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 1;
 80036d4:	4b23      	ldr	r3, [pc, #140]	; (8003764 <MX_RTC_Init+0xb4>)
 80036d6:	2201      	movs	r2, #1
 80036d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 16388;
 80036da:	4b22      	ldr	r3, [pc, #136]	; (8003764 <MX_RTC_Init+0xb4>)
 80036dc:	f244 0204 	movw	r2, #16388	; 0x4004
 80036e0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80036e2:	4b20      	ldr	r3, [pc, #128]	; (8003764 <MX_RTC_Init+0xb4>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80036e8:	4b1e      	ldr	r3, [pc, #120]	; (8003764 <MX_RTC_Init+0xb4>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80036ee:	4b1d      	ldr	r3, [pc, #116]	; (8003764 <MX_RTC_Init+0xb4>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80036f4:	4b1b      	ldr	r3, [pc, #108]	; (8003764 <MX_RTC_Init+0xb4>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80036fa:	481a      	ldr	r0, [pc, #104]	; (8003764 <MX_RTC_Init+0xb4>)
 80036fc:	f008 fea8 	bl	800c450 <HAL_RTC_Init>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8003706:	f000 fa6f 	bl	8003be8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 800370a:	2300      	movs	r3, #0
 800370c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 800370e:	2300      	movs	r3, #0
 8003710:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8003712:	2300      	movs	r3, #0
 8003714:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003716:	2300      	movs	r3, #0
 8003718:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800371a:	2300      	movs	r3, #0
 800371c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800371e:	1d3b      	adds	r3, r7, #4
 8003720:	2200      	movs	r2, #0
 8003722:	4619      	mov	r1, r3
 8003724:	480f      	ldr	r0, [pc, #60]	; (8003764 <MX_RTC_Init+0xb4>)
 8003726:	f008 ff0b 	bl	800c540 <HAL_RTC_SetTime>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8003730:	f000 fa5a 	bl	8003be8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003734:	2301      	movs	r3, #1
 8003736:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003738:	2301      	movs	r3, #1
 800373a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 800373c:	2301      	movs	r3, #1
 800373e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8003740:	2300      	movs	r3, #0
 8003742:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003744:	463b      	mov	r3, r7
 8003746:	2200      	movs	r2, #0
 8003748:	4619      	mov	r1, r3
 800374a:	4806      	ldr	r0, [pc, #24]	; (8003764 <MX_RTC_Init+0xb4>)
 800374c:	f008 fff2 	bl	800c734 <HAL_RTC_SetDate>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8003756:	f000 fa47 	bl	8003be8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800375a:	bf00      	nop
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	240014d0 	.word	0x240014d0
 8003768:	58004000 	.word	0x58004000

0800376c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8003770:	4b0d      	ldr	r3, [pc, #52]	; (80037a8 <MX_SDMMC1_SD_Init+0x3c>)
 8003772:	4a0e      	ldr	r2, [pc, #56]	; (80037ac <MX_SDMMC1_SD_Init+0x40>)
 8003774:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8003776:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <MX_SDMMC1_SD_Init+0x3c>)
 8003778:	2200      	movs	r2, #0
 800377a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800377c:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <MX_SDMMC1_SD_Init+0x3c>)
 800377e:	2200      	movs	r2, #0
 8003780:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8003782:	4b09      	ldr	r3, [pc, #36]	; (80037a8 <MX_SDMMC1_SD_Init+0x3c>)
 8003784:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003788:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 800378a:	4b07      	ldr	r3, [pc, #28]	; (80037a8 <MX_SDMMC1_SD_Init+0x3c>)
 800378c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003790:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8003792:	4b05      	ldr	r3, [pc, #20]	; (80037a8 <MX_SDMMC1_SD_Init+0x3c>)
 8003794:	2200      	movs	r2, #0
 8003796:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8003798:	4b03      	ldr	r3, [pc, #12]	; (80037a8 <MX_SDMMC1_SD_Init+0x3c>)
 800379a:	2201      	movs	r2, #1
 800379c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800379e:	bf00      	nop
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	24001450 	.word	0x24001450
 80037ac:	52007000 	.word	0x52007000

080037b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80037b4:	4b27      	ldr	r3, [pc, #156]	; (8003854 <MX_SPI1_Init+0xa4>)
 80037b6:	4a28      	ldr	r2, [pc, #160]	; (8003858 <MX_SPI1_Init+0xa8>)
 80037b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80037ba:	4b26      	ldr	r3, [pc, #152]	; (8003854 <MX_SPI1_Init+0xa4>)
 80037bc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80037c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80037c2:	4b24      	ldr	r3, [pc, #144]	; (8003854 <MX_SPI1_Init+0xa4>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80037c8:	4b22      	ldr	r3, [pc, #136]	; (8003854 <MX_SPI1_Init+0xa4>)
 80037ca:	2207      	movs	r2, #7
 80037cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80037ce:	4b21      	ldr	r3, [pc, #132]	; (8003854 <MX_SPI1_Init+0xa4>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80037d4:	4b1f      	ldr	r3, [pc, #124]	; (8003854 <MX_SPI1_Init+0xa4>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80037da:	4b1e      	ldr	r3, [pc, #120]	; (8003854 <MX_SPI1_Init+0xa4>)
 80037dc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80037e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80037e2:	4b1c      	ldr	r3, [pc, #112]	; (8003854 <MX_SPI1_Init+0xa4>)
 80037e4:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80037e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80037ea:	4b1a      	ldr	r3, [pc, #104]	; (8003854 <MX_SPI1_Init+0xa4>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80037f0:	4b18      	ldr	r3, [pc, #96]	; (8003854 <MX_SPI1_Init+0xa4>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037f6:	4b17      	ldr	r3, [pc, #92]	; (8003854 <MX_SPI1_Init+0xa4>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80037fc:	4b15      	ldr	r3, [pc, #84]	; (8003854 <MX_SPI1_Init+0xa4>)
 80037fe:	2200      	movs	r2, #0
 8003800:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003802:	4b14      	ldr	r3, [pc, #80]	; (8003854 <MX_SPI1_Init+0xa4>)
 8003804:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003808:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800380a:	4b12      	ldr	r3, [pc, #72]	; (8003854 <MX_SPI1_Init+0xa4>)
 800380c:	2200      	movs	r2, #0
 800380e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003810:	4b10      	ldr	r3, [pc, #64]	; (8003854 <MX_SPI1_Init+0xa4>)
 8003812:	2200      	movs	r2, #0
 8003814:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003816:	4b0f      	ldr	r3, [pc, #60]	; (8003854 <MX_SPI1_Init+0xa4>)
 8003818:	2200      	movs	r2, #0
 800381a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800381c:	4b0d      	ldr	r3, [pc, #52]	; (8003854 <MX_SPI1_Init+0xa4>)
 800381e:	2200      	movs	r2, #0
 8003820:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003822:	4b0c      	ldr	r3, [pc, #48]	; (8003854 <MX_SPI1_Init+0xa4>)
 8003824:	2200      	movs	r2, #0
 8003826:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003828:	4b0a      	ldr	r3, [pc, #40]	; (8003854 <MX_SPI1_Init+0xa4>)
 800382a:	2200      	movs	r2, #0
 800382c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800382e:	4b09      	ldr	r3, [pc, #36]	; (8003854 <MX_SPI1_Init+0xa4>)
 8003830:	2200      	movs	r2, #0
 8003832:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003834:	4b07      	ldr	r3, [pc, #28]	; (8003854 <MX_SPI1_Init+0xa4>)
 8003836:	2200      	movs	r2, #0
 8003838:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800383a:	4b06      	ldr	r3, [pc, #24]	; (8003854 <MX_SPI1_Init+0xa4>)
 800383c:	2200      	movs	r2, #0
 800383e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003840:	4804      	ldr	r0, [pc, #16]	; (8003854 <MX_SPI1_Init+0xa4>)
 8003842:	f00b f89f 	bl	800e984 <HAL_SPI_Init>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800384c:	f000 f9cc 	bl	8003be8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003850:	bf00      	nop
 8003852:	bd80      	pop	{r7, pc}
 8003854:	24001620 	.word	0x24001620
 8003858:	40013000 	.word	0x40013000

0800385c <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8003860:	4b22      	ldr	r3, [pc, #136]	; (80038ec <MX_UART8_Init+0x90>)
 8003862:	4a23      	ldr	r2, [pc, #140]	; (80038f0 <MX_UART8_Init+0x94>)
 8003864:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8003866:	4b21      	ldr	r3, [pc, #132]	; (80038ec <MX_UART8_Init+0x90>)
 8003868:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800386c:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800386e:	4b1f      	ldr	r3, [pc, #124]	; (80038ec <MX_UART8_Init+0x90>)
 8003870:	2200      	movs	r2, #0
 8003872:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8003874:	4b1d      	ldr	r3, [pc, #116]	; (80038ec <MX_UART8_Init+0x90>)
 8003876:	2200      	movs	r2, #0
 8003878:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800387a:	4b1c      	ldr	r3, [pc, #112]	; (80038ec <MX_UART8_Init+0x90>)
 800387c:	2200      	movs	r2, #0
 800387e:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8003880:	4b1a      	ldr	r3, [pc, #104]	; (80038ec <MX_UART8_Init+0x90>)
 8003882:	220c      	movs	r2, #12
 8003884:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003886:	4b19      	ldr	r3, [pc, #100]	; (80038ec <MX_UART8_Init+0x90>)
 8003888:	2200      	movs	r2, #0
 800388a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800388c:	4b17      	ldr	r3, [pc, #92]	; (80038ec <MX_UART8_Init+0x90>)
 800388e:	2200      	movs	r2, #0
 8003890:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003892:	4b16      	ldr	r3, [pc, #88]	; (80038ec <MX_UART8_Init+0x90>)
 8003894:	2200      	movs	r2, #0
 8003896:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003898:	4b14      	ldr	r3, [pc, #80]	; (80038ec <MX_UART8_Init+0x90>)
 800389a:	2200      	movs	r2, #0
 800389c:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800389e:	4b13      	ldr	r3, [pc, #76]	; (80038ec <MX_UART8_Init+0x90>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80038a4:	4811      	ldr	r0, [pc, #68]	; (80038ec <MX_UART8_Init+0x90>)
 80038a6:	f00c f91e 	bl	800fae6 <HAL_UART_Init>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80038b0:	f000 f99a 	bl	8003be8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80038b4:	2100      	movs	r1, #0
 80038b6:	480d      	ldr	r0, [pc, #52]	; (80038ec <MX_UART8_Init+0x90>)
 80038b8:	f00d faae 	bl	8010e18 <HAL_UARTEx_SetTxFifoThreshold>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 80038c2:	f000 f991 	bl	8003be8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80038c6:	2100      	movs	r1, #0
 80038c8:	4808      	ldr	r0, [pc, #32]	; (80038ec <MX_UART8_Init+0x90>)
 80038ca:	f00d fae3 	bl	8010e94 <HAL_UARTEx_SetRxFifoThreshold>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 80038d4:	f000 f988 	bl	8003be8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80038d8:	4804      	ldr	r0, [pc, #16]	; (80038ec <MX_UART8_Init+0x90>)
 80038da:	f00d fa64 	bl	8010da6 <HAL_UARTEx_DisableFifoMode>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 80038e4:	f000 f980 	bl	8003be8 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80038e8:	bf00      	nop
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	24001594 	.word	0x24001594
 80038f0:	40007c00 	.word	0x40007c00

080038f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80038f8:	4b22      	ldr	r3, [pc, #136]	; (8003984 <MX_USART3_UART_Init+0x90>)
 80038fa:	4a23      	ldr	r2, [pc, #140]	; (8003988 <MX_USART3_UART_Init+0x94>)
 80038fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80038fe:	4b21      	ldr	r3, [pc, #132]	; (8003984 <MX_USART3_UART_Init+0x90>)
 8003900:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8003904:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003906:	4b1f      	ldr	r3, [pc, #124]	; (8003984 <MX_USART3_UART_Init+0x90>)
 8003908:	2200      	movs	r2, #0
 800390a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800390c:	4b1d      	ldr	r3, [pc, #116]	; (8003984 <MX_USART3_UART_Init+0x90>)
 800390e:	2200      	movs	r2, #0
 8003910:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003912:	4b1c      	ldr	r3, [pc, #112]	; (8003984 <MX_USART3_UART_Init+0x90>)
 8003914:	2200      	movs	r2, #0
 8003916:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003918:	4b1a      	ldr	r3, [pc, #104]	; (8003984 <MX_USART3_UART_Init+0x90>)
 800391a:	220c      	movs	r2, #12
 800391c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800391e:	4b19      	ldr	r3, [pc, #100]	; (8003984 <MX_USART3_UART_Init+0x90>)
 8003920:	2200      	movs	r2, #0
 8003922:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003924:	4b17      	ldr	r3, [pc, #92]	; (8003984 <MX_USART3_UART_Init+0x90>)
 8003926:	2200      	movs	r2, #0
 8003928:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800392a:	4b16      	ldr	r3, [pc, #88]	; (8003984 <MX_USART3_UART_Init+0x90>)
 800392c:	2200      	movs	r2, #0
 800392e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003930:	4b14      	ldr	r3, [pc, #80]	; (8003984 <MX_USART3_UART_Init+0x90>)
 8003932:	2200      	movs	r2, #0
 8003934:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003936:	4b13      	ldr	r3, [pc, #76]	; (8003984 <MX_USART3_UART_Init+0x90>)
 8003938:	2200      	movs	r2, #0
 800393a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800393c:	4811      	ldr	r0, [pc, #68]	; (8003984 <MX_USART3_UART_Init+0x90>)
 800393e:	f00c f8d2 	bl	800fae6 <HAL_UART_Init>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003948:	f000 f94e 	bl	8003be8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800394c:	2100      	movs	r1, #0
 800394e:	480d      	ldr	r0, [pc, #52]	; (8003984 <MX_USART3_UART_Init+0x90>)
 8003950:	f00d fa62 	bl	8010e18 <HAL_UARTEx_SetTxFifoThreshold>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800395a:	f000 f945 	bl	8003be8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800395e:	2100      	movs	r1, #0
 8003960:	4808      	ldr	r0, [pc, #32]	; (8003984 <MX_USART3_UART_Init+0x90>)
 8003962:	f00d fa97 	bl	8010e94 <HAL_UARTEx_SetRxFifoThreshold>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800396c:	f000 f93c 	bl	8003be8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003970:	4804      	ldr	r0, [pc, #16]	; (8003984 <MX_USART3_UART_Init+0x90>)
 8003972:	f00d fa18 	bl	8010da6 <HAL_UARTEx_DisableFifoMode>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800397c:	f000 f934 	bl	8003be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003980:	bf00      	nop
 8003982:	bd80      	pop	{r7, pc}
 8003984:	240013a4 	.word	0x240013a4
 8003988:	40004800 	.word	0x40004800

0800398c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003992:	4b0d      	ldr	r3, [pc, #52]	; (80039c8 <MX_DMA_Init+0x3c>)
 8003994:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003998:	4a0b      	ldr	r2, [pc, #44]	; (80039c8 <MX_DMA_Init+0x3c>)
 800399a:	f043 0301 	orr.w	r3, r3, #1
 800399e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80039a2:	4b09      	ldr	r3, [pc, #36]	; (80039c8 <MX_DMA_Init+0x3c>)
 80039a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	607b      	str	r3, [r7, #4]
 80039ae:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80039b0:	2200      	movs	r2, #0
 80039b2:	2100      	movs	r1, #0
 80039b4:	200c      	movs	r0, #12
 80039b6:	f000 ff14 	bl	80047e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80039ba:	200c      	movs	r0, #12
 80039bc:	f000 ff2b 	bl	8004816 <HAL_NVIC_EnableIRQ>

}
 80039c0:	bf00      	nop
 80039c2:	3708      	adds	r7, #8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	58024400 	.word	0x58024400

080039cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b08c      	sub	sp, #48	; 0x30
 80039d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039d2:	f107 031c 	add.w	r3, r7, #28
 80039d6:	2200      	movs	r2, #0
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	605a      	str	r2, [r3, #4]
 80039dc:	609a      	str	r2, [r3, #8]
 80039de:	60da      	str	r2, [r3, #12]
 80039e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80039e2:	4b6d      	ldr	r3, [pc, #436]	; (8003b98 <MX_GPIO_Init+0x1cc>)
 80039e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039e8:	4a6b      	ldr	r2, [pc, #428]	; (8003b98 <MX_GPIO_Init+0x1cc>)
 80039ea:	f043 0310 	orr.w	r3, r3, #16
 80039ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039f2:	4b69      	ldr	r3, [pc, #420]	; (8003b98 <MX_GPIO_Init+0x1cc>)
 80039f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039f8:	f003 0310 	and.w	r3, r3, #16
 80039fc:	61bb      	str	r3, [r7, #24]
 80039fe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a00:	4b65      	ldr	r3, [pc, #404]	; (8003b98 <MX_GPIO_Init+0x1cc>)
 8003a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a06:	4a64      	ldr	r2, [pc, #400]	; (8003b98 <MX_GPIO_Init+0x1cc>)
 8003a08:	f043 0304 	orr.w	r3, r3, #4
 8003a0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a10:	4b61      	ldr	r3, [pc, #388]	; (8003b98 <MX_GPIO_Init+0x1cc>)
 8003a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a1e:	4b5e      	ldr	r3, [pc, #376]	; (8003b98 <MX_GPIO_Init+0x1cc>)
 8003a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a24:	4a5c      	ldr	r2, [pc, #368]	; (8003b98 <MX_GPIO_Init+0x1cc>)
 8003a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a2e:	4b5a      	ldr	r3, [pc, #360]	; (8003b98 <MX_GPIO_Init+0x1cc>)
 8003a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a38:	613b      	str	r3, [r7, #16]
 8003a3a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a3c:	4b56      	ldr	r3, [pc, #344]	; (8003b98 <MX_GPIO_Init+0x1cc>)
 8003a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a42:	4a55      	ldr	r2, [pc, #340]	; (8003b98 <MX_GPIO_Init+0x1cc>)
 8003a44:	f043 0301 	orr.w	r3, r3, #1
 8003a48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a4c:	4b52      	ldr	r3, [pc, #328]	; (8003b98 <MX_GPIO_Init+0x1cc>)
 8003a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	60fb      	str	r3, [r7, #12]
 8003a58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a5a:	4b4f      	ldr	r3, [pc, #316]	; (8003b98 <MX_GPIO_Init+0x1cc>)
 8003a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a60:	4a4d      	ldr	r2, [pc, #308]	; (8003b98 <MX_GPIO_Init+0x1cc>)
 8003a62:	f043 0302 	orr.w	r3, r3, #2
 8003a66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a6a:	4b4b      	ldr	r3, [pc, #300]	; (8003b98 <MX_GPIO_Init+0x1cc>)
 8003a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	60bb      	str	r3, [r7, #8]
 8003a76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a78:	4b47      	ldr	r3, [pc, #284]	; (8003b98 <MX_GPIO_Init+0x1cc>)
 8003a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a7e:	4a46      	ldr	r2, [pc, #280]	; (8003b98 <MX_GPIO_Init+0x1cc>)
 8003a80:	f043 0308 	orr.w	r3, r3, #8
 8003a84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a88:	4b43      	ldr	r3, [pc, #268]	; (8003b98 <MX_GPIO_Init+0x1cc>)
 8003a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	607b      	str	r3, [r7, #4]
 8003a94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_485_TX_EN_Pin|RS_485_RX_EN_Pin, GPIO_PIN_RESET);
 8003a96:	2200      	movs	r2, #0
 8003a98:	210c      	movs	r1, #12
 8003a9a:	4840      	ldr	r0, [pc, #256]	; (8003b9c <MX_GPIO_Init+0x1d0>)
 8003a9c:	f004 fab2 	bl	8008004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TELE_CE_Pin|TELE_CS_Pin, GPIO_PIN_RESET);
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	2103      	movs	r1, #3
 8003aa4:	483e      	ldr	r0, [pc, #248]	; (8003ba0 <MX_GPIO_Init+0x1d4>)
 8003aa6:	f004 faad 	bl	8008004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003aaa:	2200      	movs	r2, #0
 8003aac:	2101      	movs	r1, #1
 8003aae:	483d      	ldr	r0, [pc, #244]	; (8003ba4 <MX_GPIO_Init+0x1d8>)
 8003ab0:	f004 faa8 	bl	8008004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_SET);
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003aba:	483b      	ldr	r0, [pc, #236]	; (8003ba8 <MX_GPIO_Init+0x1dc>)
 8003abc:	f004 faa2 	bl	8008004 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_485_TX_EN_Pin RS_485_RX_EN_Pin */
  GPIO_InitStruct.Pin = RS_485_TX_EN_Pin|RS_485_RX_EN_Pin;
 8003ac0:	230c      	movs	r3, #12
 8003ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003acc:	2300      	movs	r3, #0
 8003ace:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ad0:	f107 031c 	add.w	r3, r7, #28
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	4831      	ldr	r0, [pc, #196]	; (8003b9c <MX_GPIO_Init+0x1d0>)
 8003ad8:	f004 f8cc 	bl	8007c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : TELE_CE_Pin TELE_CS_Pin */
  GPIO_InitStruct.Pin = TELE_CE_Pin|TELE_CS_Pin;
 8003adc:	2303      	movs	r3, #3
 8003ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aec:	f107 031c 	add.w	r3, r7, #28
 8003af0:	4619      	mov	r1, r3
 8003af2:	482b      	ldr	r0, [pc, #172]	; (8003ba0 <MX_GPIO_Init+0x1d4>)
 8003af4:	f004 f8be 	bl	8007c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : TELE_IRQ_Pin */
  GPIO_InitStruct.Pin = TELE_IRQ_Pin;
 8003af8:	2304      	movs	r3, #4
 8003afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003afc:	4b2b      	ldr	r3, [pc, #172]	; (8003bac <MX_GPIO_Init+0x1e0>)
 8003afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b00:	2300      	movs	r3, #0
 8003b02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TELE_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003b04:	f107 031c 	add.w	r3, r7, #28
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4825      	ldr	r0, [pc, #148]	; (8003ba0 <MX_GPIO_Init+0x1d4>)
 8003b0c:	f004 f8b2 	bl	8007c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003b10:	2301      	movs	r3, #1
 8003b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b14:	2301      	movs	r3, #1
 8003b16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003b20:	f107 031c 	add.w	r3, r7, #28
 8003b24:	4619      	mov	r1, r3
 8003b26:	481f      	ldr	r0, [pc, #124]	; (8003ba4 <MX_GPIO_Init+0x1d8>)
 8003b28:	f004 f8a4 	bl	8007c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 8003b2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b32:	4b1e      	ldr	r3, [pc, #120]	; (8003bac <MX_GPIO_Init+0x1e0>)
 8003b34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b36:	2300      	movs	r3, #0
 8003b38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8003b3a:	f107 031c 	add.w	r3, r7, #28
 8003b3e:	4619      	mov	r1, r3
 8003b40:	4816      	ldr	r0, [pc, #88]	; (8003b9c <MX_GPIO_Init+0x1d0>)
 8003b42:	f004 f897 	bl	8007c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 8003b46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b50:	2300      	movs	r3, #0
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b54:	2300      	movs	r3, #0
 8003b56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 8003b58:	f107 031c 	add.w	r3, r7, #28
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	4812      	ldr	r0, [pc, #72]	; (8003ba8 <MX_GPIO_Init+0x1dc>)
 8003b60:	f004 f888 	bl	8007c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DET_Pin */
  GPIO_InitStruct.Pin = CARD_DET_Pin;
 8003b64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DET_GPIO_Port, &GPIO_InitStruct);
 8003b72:	f107 031c 	add.w	r3, r7, #28
 8003b76:	4619      	mov	r1, r3
 8003b78:	4809      	ldr	r0, [pc, #36]	; (8003ba0 <MX_GPIO_Init+0x1d4>)
 8003b7a:	f004 f87b 	bl	8007c74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003b7e:	2200      	movs	r2, #0
 8003b80:	2100      	movs	r1, #0
 8003b82:	2017      	movs	r0, #23
 8003b84:	f000 fe2d 	bl	80047e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003b88:	2017      	movs	r0, #23
 8003b8a:	f000 fe44 	bl	8004816 <HAL_NVIC_EnableIRQ>

}
 8003b8e:	bf00      	nop
 8003b90:	3730      	adds	r7, #48	; 0x30
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	58024400 	.word	0x58024400
 8003b9c:	58021000 	.word	0x58021000
 8003ba0:	58020000 	.word	0x58020000
 8003ba4:	58020400 	.word	0x58020400
 8003ba8:	58020c00 	.word	0x58020c00
 8003bac:	11110000 	.word	0x11110000

08003bb0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	80fb      	strh	r3, [r7, #6]

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */

  end_flag = 0;
 8003bba:	4b04      	ldr	r3, [pc, #16]	; (8003bcc <HAL_GPIO_EXTI_Callback+0x1c>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]

}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	24000008 	.word	0x24000008

08003bd0 <HAL_PWR_PVDCallback>:
void HAL_PWR_PVDCallback (void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
	end_flag = 0;
 8003bd4:	4b03      	ldr	r3, [pc, #12]	; (8003be4 <HAL_PWR_PVDCallback+0x14>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	601a      	str	r2, [r3, #0]
}
 8003bda:	bf00      	nop
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	24000008 	.word	0x24000008

08003be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003bec:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error Handler\n");
 8003bee:	4802      	ldr	r0, [pc, #8]	; (8003bf8 <Error_Handler+0x10>)
 8003bf0:	f015 fd68 	bl	80196c4 <puts>
 8003bf4:	e7fb      	b.n	8003bee <Error_Handler+0x6>
 8003bf6:	bf00      	nop
 8003bf8:	0801ae30 	.word	0x0801ae30

08003bfc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003c04:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c08:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d013      	beq.n	8003c3c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003c14:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c18:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003c1c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00b      	beq.n	8003c3c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003c24:	e000      	b.n	8003c28 <ITM_SendChar+0x2c>
    {
      __NOP();
 8003c26:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003c28:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d0f9      	beq.n	8003c26 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003c32:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	b2d2      	uxtb	r2, r2
 8003c3a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003c3c:	687b      	ldr	r3, [r7, #4]
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr

08003c4a <_write>:

#include <myprintf.h>
#include "main.h"

int _write(int file, char *ptr, int len)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b086      	sub	sp, #24
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	60f8      	str	r0, [r7, #12]
 8003c52:	60b9      	str	r1, [r7, #8]
 8003c54:	607a      	str	r2, [r7, #4]
  int i=0;
 8003c56:	2300      	movs	r3, #0
 8003c58:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	617b      	str	r3, [r7, #20]
 8003c5e:	e009      	b.n	8003c74 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	1c5a      	adds	r2, r3, #1
 8003c64:	60ba      	str	r2, [r7, #8]
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff ffc7 	bl	8003bfc <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	3301      	adds	r3, #1
 8003c72:	617b      	str	r3, [r7, #20]
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	dbf1      	blt.n	8003c60 <_write+0x16>
  return len;
 8003c7c:	687b      	ldr	r3, [r7, #4]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8003c8e:	f107 0308 	add.w	r3, r7, #8
 8003c92:	2200      	movs	r2, #0
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c98:	4b13      	ldr	r3, [pc, #76]	; (8003ce8 <HAL_MspInit+0x60>)
 8003c9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c9e:	4a12      	ldr	r2, [pc, #72]	; (8003ce8 <HAL_MspInit+0x60>)
 8003ca0:	f043 0302 	orr.w	r3, r3, #2
 8003ca4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003ca8:	4b0f      	ldr	r3, [pc, #60]	; (8003ce8 <HAL_MspInit+0x60>)
 8003caa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	607b      	str	r3, [r7, #4]
 8003cb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_AVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_AVD_IRQn, 0, 0);
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	2100      	movs	r1, #0
 8003cba:	2001      	movs	r0, #1
 8003cbc:	f000 fd91 	bl	80047e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_AVD_IRQn);
 8003cc0:	2001      	movs	r0, #1
 8003cc2:	f000 fda8 	bl	8004816 <HAL_NVIC_EnableIRQ>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;
 8003cc6:	23c0      	movs	r3, #192	; 0xc0
 8003cc8:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_IT_RISING;
 8003cca:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8003cce:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8003cd0:	f107 0308 	add.w	r3, r7, #8
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f005 fc1f 	bl	8009518 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8003cda:	f005 fc97 	bl	800960c <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cde:	bf00      	nop
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	58024400 	.word	0x58024400

08003cec <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b08c      	sub	sp, #48	; 0x30
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cf4:	f107 031c 	add.w	r3, r7, #28
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	605a      	str	r2, [r3, #4]
 8003cfe:	609a      	str	r2, [r3, #8]
 8003d00:	60da      	str	r2, [r3, #12]
 8003d02:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a48      	ldr	r2, [pc, #288]	; (8003e2c <HAL_FDCAN_MspInit+0x140>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d14e      	bne.n	8003dac <HAL_FDCAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8003d0e:	4b48      	ldr	r3, [pc, #288]	; (8003e30 <HAL_FDCAN_MspInit+0x144>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	3301      	adds	r3, #1
 8003d14:	4a46      	ldr	r2, [pc, #280]	; (8003e30 <HAL_FDCAN_MspInit+0x144>)
 8003d16:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8003d18:	4b45      	ldr	r3, [pc, #276]	; (8003e30 <HAL_FDCAN_MspInit+0x144>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d10e      	bne.n	8003d3e <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8003d20:	4b44      	ldr	r3, [pc, #272]	; (8003e34 <HAL_FDCAN_MspInit+0x148>)
 8003d22:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003d26:	4a43      	ldr	r2, [pc, #268]	; (8003e34 <HAL_FDCAN_MspInit+0x148>)
 8003d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d2c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003d30:	4b40      	ldr	r3, [pc, #256]	; (8003e34 <HAL_FDCAN_MspInit+0x148>)
 8003d32:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3a:	61bb      	str	r3, [r7, #24]
 8003d3c:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d3e:	4b3d      	ldr	r3, [pc, #244]	; (8003e34 <HAL_FDCAN_MspInit+0x148>)
 8003d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d44:	4a3b      	ldr	r2, [pc, #236]	; (8003e34 <HAL_FDCAN_MspInit+0x148>)
 8003d46:	f043 0302 	orr.w	r3, r3, #2
 8003d4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d4e:	4b39      	ldr	r3, [pc, #228]	; (8003e34 <HAL_FDCAN_MspInit+0x148>)
 8003d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	617b      	str	r3, [r7, #20]
 8003d5a:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003d5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d62:	2302      	movs	r3, #2
 8003d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d66:	2300      	movs	r3, #0
 8003d68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003d6e:	2309      	movs	r3, #9
 8003d70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d72:	f107 031c 	add.w	r3, r7, #28
 8003d76:	4619      	mov	r1, r3
 8003d78:	482f      	ldr	r0, [pc, #188]	; (8003e38 <HAL_FDCAN_MspInit+0x14c>)
 8003d7a:	f003 ff7b 	bl	8007c74 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB8_FMP);
 8003d7e:	2040      	movs	r0, #64	; 0x40
 8003d80:	f004 f98e 	bl	80080a0 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB9_FMP);
 8003d84:	2080      	movs	r0, #128	; 0x80
 8003d86:	f004 f98b 	bl	80080a0 <HAL_I2CEx_EnableFastModePlus>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	2013      	movs	r0, #19
 8003d90:	f000 fd27 	bl	80047e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8003d94:	2013      	movs	r0, #19
 8003d96:	f000 fd3e 	bl	8004816 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	2015      	movs	r0, #21
 8003da0:	f000 fd1f 	bl	80047e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8003da4:	2015      	movs	r0, #21
 8003da6:	f000 fd36 	bl	8004816 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8003daa:	e03b      	b.n	8003e24 <HAL_FDCAN_MspInit+0x138>
  else if(hfdcan->Instance==FDCAN2)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a22      	ldr	r2, [pc, #136]	; (8003e3c <HAL_FDCAN_MspInit+0x150>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d136      	bne.n	8003e24 <HAL_FDCAN_MspInit+0x138>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8003db6:	4b1e      	ldr	r3, [pc, #120]	; (8003e30 <HAL_FDCAN_MspInit+0x144>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	4a1c      	ldr	r2, [pc, #112]	; (8003e30 <HAL_FDCAN_MspInit+0x144>)
 8003dbe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8003dc0:	4b1b      	ldr	r3, [pc, #108]	; (8003e30 <HAL_FDCAN_MspInit+0x144>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d10e      	bne.n	8003de6 <HAL_FDCAN_MspInit+0xfa>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8003dc8:	4b1a      	ldr	r3, [pc, #104]	; (8003e34 <HAL_FDCAN_MspInit+0x148>)
 8003dca:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003dce:	4a19      	ldr	r2, [pc, #100]	; (8003e34 <HAL_FDCAN_MspInit+0x148>)
 8003dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003dd8:	4b16      	ldr	r3, [pc, #88]	; (8003e34 <HAL_FDCAN_MspInit+0x148>)
 8003dda:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de2:	613b      	str	r3, [r7, #16]
 8003de4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003de6:	4b13      	ldr	r3, [pc, #76]	; (8003e34 <HAL_FDCAN_MspInit+0x148>)
 8003de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dec:	4a11      	ldr	r2, [pc, #68]	; (8003e34 <HAL_FDCAN_MspInit+0x148>)
 8003dee:	f043 0302 	orr.w	r3, r3, #2
 8003df2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003df6:	4b0f      	ldr	r3, [pc, #60]	; (8003e34 <HAL_FDCAN_MspInit+0x148>)
 8003df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003e04:	2360      	movs	r3, #96	; 0x60
 8003e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e08:	2302      	movs	r3, #2
 8003e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e10:	2300      	movs	r3, #0
 8003e12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8003e14:	2309      	movs	r3, #9
 8003e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e18:	f107 031c 	add.w	r3, r7, #28
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4806      	ldr	r0, [pc, #24]	; (8003e38 <HAL_FDCAN_MspInit+0x14c>)
 8003e20:	f003 ff28 	bl	8007c74 <HAL_GPIO_Init>
}
 8003e24:	bf00      	nop
 8003e26:	3730      	adds	r7, #48	; 0x30
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	4000a000 	.word	0x4000a000
 8003e30:	24000b48 	.word	0x24000b48
 8003e34:	58024400 	.word	0x58024400
 8003e38:	58020400 	.word	0x58020400
 8003e3c:	4000a400 	.word	0x4000a400

08003e40 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a07      	ldr	r2, [pc, #28]	; (8003e6c <HAL_RTC_MspInit+0x2c>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d105      	bne.n	8003e5e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003e52:	4b07      	ldr	r3, [pc, #28]	; (8003e70 <HAL_RTC_MspInit+0x30>)
 8003e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e56:	4a06      	ldr	r2, [pc, #24]	; (8003e70 <HAL_RTC_MspInit+0x30>)
 8003e58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e5c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	58004000 	.word	0x58004000
 8003e70:	58024400 	.word	0x58024400

08003e74 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b08a      	sub	sp, #40	; 0x28
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e7c:	f107 0314 	add.w	r3, r7, #20
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	605a      	str	r2, [r3, #4]
 8003e86:	609a      	str	r2, [r3, #8]
 8003e88:	60da      	str	r2, [r3, #12]
 8003e8a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a2e      	ldr	r2, [pc, #184]	; (8003f4c <HAL_SD_MspInit+0xd8>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d155      	bne.n	8003f42 <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003e96:	4b2e      	ldr	r3, [pc, #184]	; (8003f50 <HAL_SD_MspInit+0xdc>)
 8003e98:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003e9c:	4a2c      	ldr	r2, [pc, #176]	; (8003f50 <HAL_SD_MspInit+0xdc>)
 8003e9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8003ea6:	4b2a      	ldr	r3, [pc, #168]	; (8003f50 <HAL_SD_MspInit+0xdc>)
 8003ea8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eb0:	613b      	str	r3, [r7, #16]
 8003eb2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003eb4:	4b26      	ldr	r3, [pc, #152]	; (8003f50 <HAL_SD_MspInit+0xdc>)
 8003eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003eba:	4a25      	ldr	r2, [pc, #148]	; (8003f50 <HAL_SD_MspInit+0xdc>)
 8003ebc:	f043 0304 	orr.w	r3, r3, #4
 8003ec0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ec4:	4b22      	ldr	r3, [pc, #136]	; (8003f50 <HAL_SD_MspInit+0xdc>)
 8003ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003eca:	f003 0304 	and.w	r3, r3, #4
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ed2:	4b1f      	ldr	r3, [pc, #124]	; (8003f50 <HAL_SD_MspInit+0xdc>)
 8003ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ed8:	4a1d      	ldr	r2, [pc, #116]	; (8003f50 <HAL_SD_MspInit+0xdc>)
 8003eda:	f043 0308 	orr.w	r3, r3, #8
 8003ede:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ee2:	4b1b      	ldr	r3, [pc, #108]	; (8003f50 <HAL_SD_MspInit+0xdc>)
 8003ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ee8:	f003 0308 	and.w	r3, r3, #8
 8003eec:	60bb      	str	r3, [r7, #8]
 8003eee:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003ef0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003ef4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003efa:	2300      	movs	r3, #0
 8003efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003efe:	2303      	movs	r3, #3
 8003f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003f02:	230c      	movs	r3, #12
 8003f04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f06:	f107 0314 	add.w	r3, r7, #20
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	4811      	ldr	r0, [pc, #68]	; (8003f54 <HAL_SD_MspInit+0xe0>)
 8003f0e:	f003 feb1 	bl	8007c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003f12:	2304      	movs	r3, #4
 8003f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f16:	2302      	movs	r3, #2
 8003f18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003f22:	230c      	movs	r3, #12
 8003f24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f26:	f107 0314 	add.w	r3, r7, #20
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	480a      	ldr	r0, [pc, #40]	; (8003f58 <HAL_SD_MspInit+0xe4>)
 8003f2e:	f003 fea1 	bl	8007c74 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8003f32:	2200      	movs	r2, #0
 8003f34:	2100      	movs	r1, #0
 8003f36:	2031      	movs	r0, #49	; 0x31
 8003f38:	f000 fc53 	bl	80047e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8003f3c:	2031      	movs	r0, #49	; 0x31
 8003f3e:	f000 fc6a 	bl	8004816 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8003f42:	bf00      	nop
 8003f44:	3728      	adds	r7, #40	; 0x28
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	52007000 	.word	0x52007000
 8003f50:	58024400 	.word	0x58024400
 8003f54:	58020800 	.word	0x58020800
 8003f58:	58020c00 	.word	0x58020c00

08003f5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08a      	sub	sp, #40	; 0x28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f64:	f107 0314 	add.w	r3, r7, #20
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	605a      	str	r2, [r3, #4]
 8003f6e:	609a      	str	r2, [r3, #8]
 8003f70:	60da      	str	r2, [r3, #12]
 8003f72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a1a      	ldr	r2, [pc, #104]	; (8003fe4 <HAL_SPI_MspInit+0x88>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d12d      	bne.n	8003fda <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003f7e:	4b1a      	ldr	r3, [pc, #104]	; (8003fe8 <HAL_SPI_MspInit+0x8c>)
 8003f80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f84:	4a18      	ldr	r2, [pc, #96]	; (8003fe8 <HAL_SPI_MspInit+0x8c>)
 8003f86:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f8a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003f8e:	4b16      	ldr	r3, [pc, #88]	; (8003fe8 <HAL_SPI_MspInit+0x8c>)
 8003f90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f98:	613b      	str	r3, [r7, #16]
 8003f9a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f9c:	4b12      	ldr	r3, [pc, #72]	; (8003fe8 <HAL_SPI_MspInit+0x8c>)
 8003f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fa2:	4a11      	ldr	r2, [pc, #68]	; (8003fe8 <HAL_SPI_MspInit+0x8c>)
 8003fa4:	f043 0301 	orr.w	r3, r3, #1
 8003fa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003fac:	4b0e      	ldr	r3, [pc, #56]	; (8003fe8 <HAL_SPI_MspInit+0x8c>)
 8003fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003fba:	23e0      	movs	r3, #224	; 0xe0
 8003fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003fca:	2305      	movs	r3, #5
 8003fcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fce:	f107 0314 	add.w	r3, r7, #20
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	4805      	ldr	r0, [pc, #20]	; (8003fec <HAL_SPI_MspInit+0x90>)
 8003fd6:	f003 fe4d 	bl	8007c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003fda:	bf00      	nop
 8003fdc:	3728      	adds	r7, #40	; 0x28
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	40013000 	.word	0x40013000
 8003fe8:	58024400 	.word	0x58024400
 8003fec:	58020000 	.word	0x58020000

08003ff0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b08c      	sub	sp, #48	; 0x30
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ff8:	f107 031c 	add.w	r3, r7, #28
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	605a      	str	r2, [r3, #4]
 8004002:	609a      	str	r2, [r3, #8]
 8004004:	60da      	str	r2, [r3, #12]
 8004006:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a4b      	ldr	r2, [pc, #300]	; (800413c <HAL_UART_MspInit+0x14c>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d12e      	bne.n	8004070 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8004012:	4b4b      	ldr	r3, [pc, #300]	; (8004140 <HAL_UART_MspInit+0x150>)
 8004014:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004018:	4a49      	ldr	r2, [pc, #292]	; (8004140 <HAL_UART_MspInit+0x150>)
 800401a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800401e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004022:	4b47      	ldr	r3, [pc, #284]	; (8004140 <HAL_UART_MspInit+0x150>)
 8004024:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004028:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800402c:	61bb      	str	r3, [r7, #24]
 800402e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004030:	4b43      	ldr	r3, [pc, #268]	; (8004140 <HAL_UART_MspInit+0x150>)
 8004032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004036:	4a42      	ldr	r2, [pc, #264]	; (8004140 <HAL_UART_MspInit+0x150>)
 8004038:	f043 0310 	orr.w	r3, r3, #16
 800403c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004040:	4b3f      	ldr	r3, [pc, #252]	; (8004140 <HAL_UART_MspInit+0x150>)
 8004042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004046:	f003 0310 	and.w	r3, r3, #16
 800404a:	617b      	str	r3, [r7, #20]
 800404c:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800404e:	2303      	movs	r3, #3
 8004050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004052:	2302      	movs	r3, #2
 8004054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004056:	2300      	movs	r3, #0
 8004058:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800405a:	2300      	movs	r3, #0
 800405c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800405e:	2308      	movs	r3, #8
 8004060:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004062:	f107 031c 	add.w	r3, r7, #28
 8004066:	4619      	mov	r1, r3
 8004068:	4836      	ldr	r0, [pc, #216]	; (8004144 <HAL_UART_MspInit+0x154>)
 800406a:	f003 fe03 	bl	8007c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800406e:	e061      	b.n	8004134 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a34      	ldr	r2, [pc, #208]	; (8004148 <HAL_UART_MspInit+0x158>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d15c      	bne.n	8004134 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART3_CLK_ENABLE();
 800407a:	4b31      	ldr	r3, [pc, #196]	; (8004140 <HAL_UART_MspInit+0x150>)
 800407c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004080:	4a2f      	ldr	r2, [pc, #188]	; (8004140 <HAL_UART_MspInit+0x150>)
 8004082:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004086:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800408a:	4b2d      	ldr	r3, [pc, #180]	; (8004140 <HAL_UART_MspInit+0x150>)
 800408c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004090:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004094:	613b      	str	r3, [r7, #16]
 8004096:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004098:	4b29      	ldr	r3, [pc, #164]	; (8004140 <HAL_UART_MspInit+0x150>)
 800409a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800409e:	4a28      	ldr	r2, [pc, #160]	; (8004140 <HAL_UART_MspInit+0x150>)
 80040a0:	f043 0308 	orr.w	r3, r3, #8
 80040a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80040a8:	4b25      	ldr	r3, [pc, #148]	; (8004140 <HAL_UART_MspInit+0x150>)
 80040aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80040b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80040ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040bc:	2302      	movs	r3, #2
 80040be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c0:	2300      	movs	r3, #0
 80040c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040c4:	2300      	movs	r3, #0
 80040c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80040c8:	2307      	movs	r3, #7
 80040ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040cc:	f107 031c 	add.w	r3, r7, #28
 80040d0:	4619      	mov	r1, r3
 80040d2:	481e      	ldr	r0, [pc, #120]	; (800414c <HAL_UART_MspInit+0x15c>)
 80040d4:	f003 fdce 	bl	8007c74 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80040d8:	4b1d      	ldr	r3, [pc, #116]	; (8004150 <HAL_UART_MspInit+0x160>)
 80040da:	4a1e      	ldr	r2, [pc, #120]	; (8004154 <HAL_UART_MspInit+0x164>)
 80040dc:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80040de:	4b1c      	ldr	r3, [pc, #112]	; (8004150 <HAL_UART_MspInit+0x160>)
 80040e0:	222d      	movs	r2, #45	; 0x2d
 80040e2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040e4:	4b1a      	ldr	r3, [pc, #104]	; (8004150 <HAL_UART_MspInit+0x160>)
 80040e6:	2200      	movs	r2, #0
 80040e8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040ea:	4b19      	ldr	r3, [pc, #100]	; (8004150 <HAL_UART_MspInit+0x160>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80040f0:	4b17      	ldr	r3, [pc, #92]	; (8004150 <HAL_UART_MspInit+0x160>)
 80040f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040f6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040f8:	4b15      	ldr	r3, [pc, #84]	; (8004150 <HAL_UART_MspInit+0x160>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040fe:	4b14      	ldr	r3, [pc, #80]	; (8004150 <HAL_UART_MspInit+0x160>)
 8004100:	2200      	movs	r2, #0
 8004102:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004104:	4b12      	ldr	r3, [pc, #72]	; (8004150 <HAL_UART_MspInit+0x160>)
 8004106:	f44f 7280 	mov.w	r2, #256	; 0x100
 800410a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800410c:	4b10      	ldr	r3, [pc, #64]	; (8004150 <HAL_UART_MspInit+0x160>)
 800410e:	2200      	movs	r2, #0
 8004110:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004112:	4b0f      	ldr	r3, [pc, #60]	; (8004150 <HAL_UART_MspInit+0x160>)
 8004114:	2200      	movs	r2, #0
 8004116:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004118:	480d      	ldr	r0, [pc, #52]	; (8004150 <HAL_UART_MspInit+0x160>)
 800411a:	f000 fb97 	bl	800484c <HAL_DMA_Init>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <HAL_UART_MspInit+0x138>
      Error_Handler();
 8004124:	f7ff fd60 	bl	8003be8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a09      	ldr	r2, [pc, #36]	; (8004150 <HAL_UART_MspInit+0x160>)
 800412c:	679a      	str	r2, [r3, #120]	; 0x78
 800412e:	4a08      	ldr	r2, [pc, #32]	; (8004150 <HAL_UART_MspInit+0x160>)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004134:	bf00      	nop
 8004136:	3730      	adds	r7, #48	; 0x30
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40007c00 	.word	0x40007c00
 8004140:	58024400 	.word	0x58024400
 8004144:	58021000 	.word	0x58021000
 8004148:	40004800 	.word	0x40004800
 800414c:	58020c00 	.word	0x58020c00
 8004150:	2400132c 	.word	0x2400132c
 8004154:	40020028 	.word	0x40020028

08004158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800415c:	f006 fa98 	bl	800a690 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004160:	e7fe      	b.n	8004160 <NMI_Handler+0x8>

08004162 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004162:	b480      	push	{r7}
 8004164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004166:	e7fe      	b.n	8004166 <HardFault_Handler+0x4>

08004168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800416c:	e7fe      	b.n	800416c <MemManage_Handler+0x4>

0800416e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800416e:	b480      	push	{r7}
 8004170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004172:	e7fe      	b.n	8004172 <BusFault_Handler+0x4>

08004174 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004178:	e7fe      	b.n	8004178 <UsageFault_Handler+0x4>

0800417a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800417a:	b480      	push	{r7}
 800417c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800417e:	bf00      	nop
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004188:	b480      	push	{r7}
 800418a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800418c:	bf00      	nop
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004196:	b480      	push	{r7}
 8004198:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800419a:	bf00      	nop
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041a8:	f000 f9f2 	bl	8004590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041ac:	bf00      	nop
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <PVD_AVD_IRQHandler>:

/**
  * @brief This function handles PVD and AVD interrupts through EXTI line 16.
  */
void PVD_AVD_IRQHandler(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_AVD_IRQn 0 */

  /* USER CODE END PVD_AVD_IRQn 0 */
  HAL_PWREx_PVD_AVD_IRQHandler();
 80041b4:	f005 fa84 	bl	80096c0 <HAL_PWREx_PVD_AVD_IRQHandler>
  /* USER CODE BEGIN PVD_AVD_IRQn 1 */

  /* USER CODE END PVD_AVD_IRQn 1 */
}
 80041b8:	bf00      	nop
 80041ba:	bd80      	pop	{r7, pc}

080041bc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80041c0:	4802      	ldr	r0, [pc, #8]	; (80041cc <DMA1_Stream1_IRQHandler+0x10>)
 80041c2:	f001 f909 	bl	80053d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80041c6:	bf00      	nop
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	2400132c 	.word	0x2400132c

080041d0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80041d4:	4802      	ldr	r0, [pc, #8]	; (80041e0 <FDCAN1_IT0_IRQHandler+0x10>)
 80041d6:	f003 f8bd 	bl	8007354 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80041da:	bf00      	nop
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	240014f4 	.word	0x240014f4

080041e4 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80041e8:	4802      	ldr	r0, [pc, #8]	; (80041f4 <FDCAN1_IT1_IRQHandler+0x10>)
 80041ea:	f003 f8b3 	bl	8007354 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80041ee:	bf00      	nop
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	240014f4 	.word	0x240014f4

080041f8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80041fc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004200:	f003 ff34 	bl	800806c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004204:	bf00      	nop
 8004206:	bd80      	pop	{r7, pc}

08004208 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800420c:	4802      	ldr	r0, [pc, #8]	; (8004218 <SDMMC1_IRQHandler+0x10>)
 800420e:	f009 f9c1 	bl	800d594 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8004212:	bf00      	nop
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	24001450 	.word	0x24001450

0800421c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004220:	4802      	ldr	r0, [pc, #8]	; (800422c <OTG_FS_IRQHandler+0x10>)
 8004222:	f004 f8b8 	bl	8008396 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004226:	bf00      	nop
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	24002084 	.word	0x24002084

08004230 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800423c:	2300      	movs	r3, #0
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	e00a      	b.n	8004258 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004242:	f3af 8000 	nop.w
 8004246:	4601      	mov	r1, r0
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	1c5a      	adds	r2, r3, #1
 800424c:	60ba      	str	r2, [r7, #8]
 800424e:	b2ca      	uxtb	r2, r1
 8004250:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	3301      	adds	r3, #1
 8004256:	617b      	str	r3, [r7, #20]
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	429a      	cmp	r2, r3
 800425e:	dbf0      	blt.n	8004242 <_read+0x12>
	}

return len;
 8004260:	687b      	ldr	r3, [r7, #4]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3718      	adds	r7, #24
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <_close>:
	}
	return len;
}

int _close(int file)
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
	return -1;
 8004272:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004276:	4618      	mov	r0, r3
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
 800428a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004292:	605a      	str	r2, [r3, #4]
	return 0;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <_isatty>:

int _isatty(int file)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
	return 1;
 80042aa:	2301      	movs	r3, #1
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
	return 0;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
	...

080042d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042dc:	4a14      	ldr	r2, [pc, #80]	; (8004330 <_sbrk+0x5c>)
 80042de:	4b15      	ldr	r3, [pc, #84]	; (8004334 <_sbrk+0x60>)
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042e8:	4b13      	ldr	r3, [pc, #76]	; (8004338 <_sbrk+0x64>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d102      	bne.n	80042f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042f0:	4b11      	ldr	r3, [pc, #68]	; (8004338 <_sbrk+0x64>)
 80042f2:	4a12      	ldr	r2, [pc, #72]	; (800433c <_sbrk+0x68>)
 80042f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042f6:	4b10      	ldr	r3, [pc, #64]	; (8004338 <_sbrk+0x64>)
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4413      	add	r3, r2
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	429a      	cmp	r2, r3
 8004302:	d207      	bcs.n	8004314 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004304:	f015 f874 	bl	80193f0 <__errno>
 8004308:	4602      	mov	r2, r0
 800430a:	230c      	movs	r3, #12
 800430c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800430e:	f04f 33ff 	mov.w	r3, #4294967295
 8004312:	e009      	b.n	8004328 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004314:	4b08      	ldr	r3, [pc, #32]	; (8004338 <_sbrk+0x64>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800431a:	4b07      	ldr	r3, [pc, #28]	; (8004338 <_sbrk+0x64>)
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4413      	add	r3, r2
 8004322:	4a05      	ldr	r2, [pc, #20]	; (8004338 <_sbrk+0x64>)
 8004324:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004326:	68fb      	ldr	r3, [r7, #12]
}
 8004328:	4618      	mov	r0, r3
 800432a:	3718      	adds	r7, #24
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	24080000 	.word	0x24080000
 8004334:	00000400 	.word	0x00000400
 8004338:	24000b4c 	.word	0x24000b4c
 800433c:	24002490 	.word	0x24002490

08004340 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004344:	4b39      	ldr	r3, [pc, #228]	; (800442c <SystemInit+0xec>)
 8004346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434a:	4a38      	ldr	r2, [pc, #224]	; (800442c <SystemInit+0xec>)
 800434c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004350:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004354:	4b36      	ldr	r3, [pc, #216]	; (8004430 <SystemInit+0xf0>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 030f 	and.w	r3, r3, #15
 800435c:	2b06      	cmp	r3, #6
 800435e:	d807      	bhi.n	8004370 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004360:	4b33      	ldr	r3, [pc, #204]	; (8004430 <SystemInit+0xf0>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f023 030f 	bic.w	r3, r3, #15
 8004368:	4a31      	ldr	r2, [pc, #196]	; (8004430 <SystemInit+0xf0>)
 800436a:	f043 0307 	orr.w	r3, r3, #7
 800436e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004370:	4b30      	ldr	r3, [pc, #192]	; (8004434 <SystemInit+0xf4>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a2f      	ldr	r2, [pc, #188]	; (8004434 <SystemInit+0xf4>)
 8004376:	f043 0301 	orr.w	r3, r3, #1
 800437a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800437c:	4b2d      	ldr	r3, [pc, #180]	; (8004434 <SystemInit+0xf4>)
 800437e:	2200      	movs	r2, #0
 8004380:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004382:	4b2c      	ldr	r3, [pc, #176]	; (8004434 <SystemInit+0xf4>)
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	492b      	ldr	r1, [pc, #172]	; (8004434 <SystemInit+0xf4>)
 8004388:	4b2b      	ldr	r3, [pc, #172]	; (8004438 <SystemInit+0xf8>)
 800438a:	4013      	ands	r3, r2
 800438c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800438e:	4b28      	ldr	r3, [pc, #160]	; (8004430 <SystemInit+0xf0>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 030f 	and.w	r3, r3, #15
 8004396:	2b07      	cmp	r3, #7
 8004398:	d907      	bls.n	80043aa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800439a:	4b25      	ldr	r3, [pc, #148]	; (8004430 <SystemInit+0xf0>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f023 030f 	bic.w	r3, r3, #15
 80043a2:	4a23      	ldr	r2, [pc, #140]	; (8004430 <SystemInit+0xf0>)
 80043a4:	f043 0307 	orr.w	r3, r3, #7
 80043a8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80043aa:	4b22      	ldr	r3, [pc, #136]	; (8004434 <SystemInit+0xf4>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80043b0:	4b20      	ldr	r3, [pc, #128]	; (8004434 <SystemInit+0xf4>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80043b6:	4b1f      	ldr	r3, [pc, #124]	; (8004434 <SystemInit+0xf4>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80043bc:	4b1d      	ldr	r3, [pc, #116]	; (8004434 <SystemInit+0xf4>)
 80043be:	4a1f      	ldr	r2, [pc, #124]	; (800443c <SystemInit+0xfc>)
 80043c0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80043c2:	4b1c      	ldr	r3, [pc, #112]	; (8004434 <SystemInit+0xf4>)
 80043c4:	4a1e      	ldr	r2, [pc, #120]	; (8004440 <SystemInit+0x100>)
 80043c6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80043c8:	4b1a      	ldr	r3, [pc, #104]	; (8004434 <SystemInit+0xf4>)
 80043ca:	4a1e      	ldr	r2, [pc, #120]	; (8004444 <SystemInit+0x104>)
 80043cc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80043ce:	4b19      	ldr	r3, [pc, #100]	; (8004434 <SystemInit+0xf4>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80043d4:	4b17      	ldr	r3, [pc, #92]	; (8004434 <SystemInit+0xf4>)
 80043d6:	4a1b      	ldr	r2, [pc, #108]	; (8004444 <SystemInit+0x104>)
 80043d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80043da:	4b16      	ldr	r3, [pc, #88]	; (8004434 <SystemInit+0xf4>)
 80043dc:	2200      	movs	r2, #0
 80043de:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80043e0:	4b14      	ldr	r3, [pc, #80]	; (8004434 <SystemInit+0xf4>)
 80043e2:	4a18      	ldr	r2, [pc, #96]	; (8004444 <SystemInit+0x104>)
 80043e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80043e6:	4b13      	ldr	r3, [pc, #76]	; (8004434 <SystemInit+0xf4>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80043ec:	4b11      	ldr	r3, [pc, #68]	; (8004434 <SystemInit+0xf4>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a10      	ldr	r2, [pc, #64]	; (8004434 <SystemInit+0xf4>)
 80043f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043f6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80043f8:	4b0e      	ldr	r3, [pc, #56]	; (8004434 <SystemInit+0xf4>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80043fe:	4b12      	ldr	r3, [pc, #72]	; (8004448 <SystemInit+0x108>)
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	4b12      	ldr	r3, [pc, #72]	; (800444c <SystemInit+0x10c>)
 8004404:	4013      	ands	r3, r2
 8004406:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800440a:	d202      	bcs.n	8004412 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800440c:	4b10      	ldr	r3, [pc, #64]	; (8004450 <SystemInit+0x110>)
 800440e:	2201      	movs	r2, #1
 8004410:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004412:	4b10      	ldr	r3, [pc, #64]	; (8004454 <SystemInit+0x114>)
 8004414:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004418:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800441a:	4b04      	ldr	r3, [pc, #16]	; (800442c <SystemInit+0xec>)
 800441c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004420:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8004422:	bf00      	nop
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	e000ed00 	.word	0xe000ed00
 8004430:	52002000 	.word	0x52002000
 8004434:	58024400 	.word	0x58024400
 8004438:	eaf6ed7f 	.word	0xeaf6ed7f
 800443c:	02020200 	.word	0x02020200
 8004440:	01ff0000 	.word	0x01ff0000
 8004444:	01010280 	.word	0x01010280
 8004448:	5c001000 	.word	0x5c001000
 800444c:	ffff0000 	.word	0xffff0000
 8004450:	51008108 	.word	0x51008108
 8004454:	52004000 	.word	0x52004000

08004458 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004458:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004490 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800445c:	f7ff ff70 	bl	8004340 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004460:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004462:	e003      	b.n	800446c <LoopCopyDataInit>

08004464 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004464:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8004466:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004468:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800446a:	3104      	adds	r1, #4

0800446c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800446c:	480a      	ldr	r0, [pc, #40]	; (8004498 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800446e:	4b0b      	ldr	r3, [pc, #44]	; (800449c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8004470:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004472:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004474:	d3f6      	bcc.n	8004464 <CopyDataInit>
  ldr  r2, =_sbss
 8004476:	4a0a      	ldr	r2, [pc, #40]	; (80044a0 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8004478:	e002      	b.n	8004480 <LoopFillZerobss>

0800447a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800447a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800447c:	f842 3b04 	str.w	r3, [r2], #4

08004480 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004480:	4b08      	ldr	r3, [pc, #32]	; (80044a4 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8004482:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004484:	d3f9      	bcc.n	800447a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004486:	f014 ffb9 	bl	80193fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800448a:	f7fd fd1f 	bl	8001ecc <main>
  bx  lr    
 800448e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004490:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8004494:	0801b0c4 	.word	0x0801b0c4
  ldr  r0, =_sdata
 8004498:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800449c:	240001dc 	.word	0x240001dc
  ldr  r2, =_sbss
 80044a0:	240001e0 	.word	0x240001e0
  ldr  r3, = _ebss
 80044a4:	24002490 	.word	0x24002490

080044a8 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80044a8:	e7fe      	b.n	80044a8 <ADC3_IRQHandler>
	...

080044ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044b2:	2003      	movs	r0, #3
 80044b4:	f000 f98a 	bl	80047cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80044b8:	f005 ff1c 	bl	800a2f4 <HAL_RCC_GetSysClockFreq>
 80044bc:	4601      	mov	r1, r0
 80044be:	4b15      	ldr	r3, [pc, #84]	; (8004514 <HAL_Init+0x68>)
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	0a1b      	lsrs	r3, r3, #8
 80044c4:	f003 030f 	and.w	r3, r3, #15
 80044c8:	4a13      	ldr	r2, [pc, #76]	; (8004518 <HAL_Init+0x6c>)
 80044ca:	5cd3      	ldrb	r3, [r2, r3]
 80044cc:	f003 031f 	and.w	r3, r3, #31
 80044d0:	fa21 f303 	lsr.w	r3, r1, r3
 80044d4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80044d6:	4b0f      	ldr	r3, [pc, #60]	; (8004514 <HAL_Init+0x68>)
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	f003 030f 	and.w	r3, r3, #15
 80044de:	4a0e      	ldr	r2, [pc, #56]	; (8004518 <HAL_Init+0x6c>)
 80044e0:	5cd3      	ldrb	r3, [r2, r3]
 80044e2:	f003 031f 	and.w	r3, r3, #31
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	fa22 f303 	lsr.w	r3, r2, r3
 80044ec:	4a0b      	ldr	r2, [pc, #44]	; (800451c <HAL_Init+0x70>)
 80044ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80044f0:	4a0b      	ldr	r2, [pc, #44]	; (8004520 <HAL_Init+0x74>)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80044f6:	2000      	movs	r0, #0
 80044f8:	f000 f814 	bl	8004524 <HAL_InitTick>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e002      	b.n	800450c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004506:	f7ff fbbf 	bl	8003c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	58024400 	.word	0x58024400
 8004518:	0801af24 	.word	0x0801af24
 800451c:	24000014 	.word	0x24000014
 8004520:	24000010 	.word	0x24000010

08004524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800452c:	4b15      	ldr	r3, [pc, #84]	; (8004584 <HAL_InitTick+0x60>)
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e021      	b.n	800457c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004538:	4b13      	ldr	r3, [pc, #76]	; (8004588 <HAL_InitTick+0x64>)
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	4b11      	ldr	r3, [pc, #68]	; (8004584 <HAL_InitTick+0x60>)
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	4619      	mov	r1, r3
 8004542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004546:	fbb3 f3f1 	udiv	r3, r3, r1
 800454a:	fbb2 f3f3 	udiv	r3, r2, r3
 800454e:	4618      	mov	r0, r3
 8004550:	f000 f96f 	bl	8004832 <HAL_SYSTICK_Config>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e00e      	b.n	800457c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b0f      	cmp	r3, #15
 8004562:	d80a      	bhi.n	800457a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004564:	2200      	movs	r2, #0
 8004566:	6879      	ldr	r1, [r7, #4]
 8004568:	f04f 30ff 	mov.w	r0, #4294967295
 800456c:	f000 f939 	bl	80047e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004570:	4a06      	ldr	r2, [pc, #24]	; (800458c <HAL_InitTick+0x68>)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004576:	2300      	movs	r3, #0
 8004578:	e000      	b.n	800457c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
}
 800457c:	4618      	mov	r0, r3
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	2400001c 	.word	0x2400001c
 8004588:	24000010 	.word	0x24000010
 800458c:	24000018 	.word	0x24000018

08004590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004594:	4b06      	ldr	r3, [pc, #24]	; (80045b0 <HAL_IncTick+0x20>)
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	461a      	mov	r2, r3
 800459a:	4b06      	ldr	r3, [pc, #24]	; (80045b4 <HAL_IncTick+0x24>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4413      	add	r3, r2
 80045a0:	4a04      	ldr	r2, [pc, #16]	; (80045b4 <HAL_IncTick+0x24>)
 80045a2:	6013      	str	r3, [r2, #0]
}
 80045a4:	bf00      	nop
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	2400001c 	.word	0x2400001c
 80045b4:	24001748 	.word	0x24001748

080045b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045b8:	b480      	push	{r7}
 80045ba:	af00      	add	r7, sp, #0
  return uwTick;
 80045bc:	4b03      	ldr	r3, [pc, #12]	; (80045cc <HAL_GetTick+0x14>)
 80045be:	681b      	ldr	r3, [r3, #0]
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	24001748 	.word	0x24001748

080045d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045d8:	f7ff ffee 	bl	80045b8 <HAL_GetTick>
 80045dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e8:	d005      	beq.n	80045f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045ea:	4b09      	ldr	r3, [pc, #36]	; (8004610 <HAL_Delay+0x40>)
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	461a      	mov	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4413      	add	r3, r2
 80045f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80045f6:	bf00      	nop
 80045f8:	f7ff ffde 	bl	80045b8 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	429a      	cmp	r2, r3
 8004606:	d8f7      	bhi.n	80045f8 <HAL_Delay+0x28>
  {
  }
}
 8004608:	bf00      	nop
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	2400001c 	.word	0x2400001c

08004614 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004614:	b480      	push	{r7}
 8004616:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004618:	4b03      	ldr	r3, [pc, #12]	; (8004628 <HAL_GetREVID+0x14>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	0c1b      	lsrs	r3, r3, #16
}
 800461e:	4618      	mov	r0, r3
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr
 8004628:	5c001000 	.word	0x5c001000

0800462c <__NVIC_SetPriorityGrouping>:
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f003 0307 	and.w	r3, r3, #7
 800463a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800463c:	4b0b      	ldr	r3, [pc, #44]	; (800466c <__NVIC_SetPriorityGrouping+0x40>)
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004648:	4013      	ands	r3, r2
 800464a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004654:	4b06      	ldr	r3, [pc, #24]	; (8004670 <__NVIC_SetPriorityGrouping+0x44>)
 8004656:	4313      	orrs	r3, r2
 8004658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800465a:	4a04      	ldr	r2, [pc, #16]	; (800466c <__NVIC_SetPriorityGrouping+0x40>)
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	60d3      	str	r3, [r2, #12]
}
 8004660:	bf00      	nop
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	e000ed00 	.word	0xe000ed00
 8004670:	05fa0000 	.word	0x05fa0000

08004674 <__NVIC_GetPriorityGrouping>:
{
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004678:	4b04      	ldr	r3, [pc, #16]	; (800468c <__NVIC_GetPriorityGrouping+0x18>)
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	0a1b      	lsrs	r3, r3, #8
 800467e:	f003 0307 	and.w	r3, r3, #7
}
 8004682:	4618      	mov	r0, r3
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	e000ed00 	.word	0xe000ed00

08004690 <__NVIC_EnableIRQ>:
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	4603      	mov	r3, r0
 8004698:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800469a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	db0b      	blt.n	80046ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046a2:	88fb      	ldrh	r3, [r7, #6]
 80046a4:	f003 021f 	and.w	r2, r3, #31
 80046a8:	4907      	ldr	r1, [pc, #28]	; (80046c8 <__NVIC_EnableIRQ+0x38>)
 80046aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046ae:	095b      	lsrs	r3, r3, #5
 80046b0:	2001      	movs	r0, #1
 80046b2:	fa00 f202 	lsl.w	r2, r0, r2
 80046b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	e000e100 	.word	0xe000e100

080046cc <__NVIC_SetPriority>:
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	4603      	mov	r3, r0
 80046d4:	6039      	str	r1, [r7, #0]
 80046d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80046d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	db0a      	blt.n	80046f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	b2da      	uxtb	r2, r3
 80046e4:	490c      	ldr	r1, [pc, #48]	; (8004718 <__NVIC_SetPriority+0x4c>)
 80046e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046ea:	0112      	lsls	r2, r2, #4
 80046ec:	b2d2      	uxtb	r2, r2
 80046ee:	440b      	add	r3, r1
 80046f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80046f4:	e00a      	b.n	800470c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	b2da      	uxtb	r2, r3
 80046fa:	4908      	ldr	r1, [pc, #32]	; (800471c <__NVIC_SetPriority+0x50>)
 80046fc:	88fb      	ldrh	r3, [r7, #6]
 80046fe:	f003 030f 	and.w	r3, r3, #15
 8004702:	3b04      	subs	r3, #4
 8004704:	0112      	lsls	r2, r2, #4
 8004706:	b2d2      	uxtb	r2, r2
 8004708:	440b      	add	r3, r1
 800470a:	761a      	strb	r2, [r3, #24]
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	e000e100 	.word	0xe000e100
 800471c:	e000ed00 	.word	0xe000ed00

08004720 <NVIC_EncodePriority>:
{
 8004720:	b480      	push	{r7}
 8004722:	b089      	sub	sp, #36	; 0x24
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f003 0307 	and.w	r3, r3, #7
 8004732:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	f1c3 0307 	rsb	r3, r3, #7
 800473a:	2b04      	cmp	r3, #4
 800473c:	bf28      	it	cs
 800473e:	2304      	movcs	r3, #4
 8004740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	3304      	adds	r3, #4
 8004746:	2b06      	cmp	r3, #6
 8004748:	d902      	bls.n	8004750 <NVIC_EncodePriority+0x30>
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	3b03      	subs	r3, #3
 800474e:	e000      	b.n	8004752 <NVIC_EncodePriority+0x32>
 8004750:	2300      	movs	r3, #0
 8004752:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004754:	f04f 32ff 	mov.w	r2, #4294967295
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	fa02 f303 	lsl.w	r3, r2, r3
 800475e:	43da      	mvns	r2, r3
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	401a      	ands	r2, r3
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004768:	f04f 31ff 	mov.w	r1, #4294967295
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	fa01 f303 	lsl.w	r3, r1, r3
 8004772:	43d9      	mvns	r1, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004778:	4313      	orrs	r3, r2
}
 800477a:	4618      	mov	r0, r3
 800477c:	3724      	adds	r7, #36	; 0x24
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
	...

08004788 <SysTick_Config>:
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3b01      	subs	r3, #1
 8004794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004798:	d301      	bcc.n	800479e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800479a:	2301      	movs	r3, #1
 800479c:	e00f      	b.n	80047be <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800479e:	4a0a      	ldr	r2, [pc, #40]	; (80047c8 <SysTick_Config+0x40>)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	3b01      	subs	r3, #1
 80047a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047a6:	210f      	movs	r1, #15
 80047a8:	f04f 30ff 	mov.w	r0, #4294967295
 80047ac:	f7ff ff8e 	bl	80046cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047b0:	4b05      	ldr	r3, [pc, #20]	; (80047c8 <SysTick_Config+0x40>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047b6:	4b04      	ldr	r3, [pc, #16]	; (80047c8 <SysTick_Config+0x40>)
 80047b8:	2207      	movs	r2, #7
 80047ba:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	e000e010 	.word	0xe000e010

080047cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f7ff ff29 	bl	800462c <__NVIC_SetPriorityGrouping>
}
 80047da:	bf00      	nop
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b086      	sub	sp, #24
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	4603      	mov	r3, r0
 80047ea:	60b9      	str	r1, [r7, #8]
 80047ec:	607a      	str	r2, [r7, #4]
 80047ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80047f0:	f7ff ff40 	bl	8004674 <__NVIC_GetPriorityGrouping>
 80047f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	68b9      	ldr	r1, [r7, #8]
 80047fa:	6978      	ldr	r0, [r7, #20]
 80047fc:	f7ff ff90 	bl	8004720 <NVIC_EncodePriority>
 8004800:	4602      	mov	r2, r0
 8004802:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004806:	4611      	mov	r1, r2
 8004808:	4618      	mov	r0, r3
 800480a:	f7ff ff5f 	bl	80046cc <__NVIC_SetPriority>
}
 800480e:	bf00      	nop
 8004810:	3718      	adds	r7, #24
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b082      	sub	sp, #8
 800481a:	af00      	add	r7, sp, #0
 800481c:	4603      	mov	r3, r0
 800481e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004820:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff ff33 	bl	8004690 <__NVIC_EnableIRQ>
}
 800482a:	bf00      	nop
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b082      	sub	sp, #8
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7ff ffa4 	bl	8004788 <SysTick_Config>
 8004840:	4603      	mov	r3, r0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
	...

0800484c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004854:	f7ff feb0 	bl	80045b8 <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d101      	bne.n	8004864 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e316      	b.n	8004e92 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a66      	ldr	r2, [pc, #408]	; (8004a04 <HAL_DMA_Init+0x1b8>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d04a      	beq.n	8004904 <HAL_DMA_Init+0xb8>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a65      	ldr	r2, [pc, #404]	; (8004a08 <HAL_DMA_Init+0x1bc>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d045      	beq.n	8004904 <HAL_DMA_Init+0xb8>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a63      	ldr	r2, [pc, #396]	; (8004a0c <HAL_DMA_Init+0x1c0>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d040      	beq.n	8004904 <HAL_DMA_Init+0xb8>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a62      	ldr	r2, [pc, #392]	; (8004a10 <HAL_DMA_Init+0x1c4>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d03b      	beq.n	8004904 <HAL_DMA_Init+0xb8>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a60      	ldr	r2, [pc, #384]	; (8004a14 <HAL_DMA_Init+0x1c8>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d036      	beq.n	8004904 <HAL_DMA_Init+0xb8>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a5f      	ldr	r2, [pc, #380]	; (8004a18 <HAL_DMA_Init+0x1cc>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d031      	beq.n	8004904 <HAL_DMA_Init+0xb8>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a5d      	ldr	r2, [pc, #372]	; (8004a1c <HAL_DMA_Init+0x1d0>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d02c      	beq.n	8004904 <HAL_DMA_Init+0xb8>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a5c      	ldr	r2, [pc, #368]	; (8004a20 <HAL_DMA_Init+0x1d4>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d027      	beq.n	8004904 <HAL_DMA_Init+0xb8>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a5a      	ldr	r2, [pc, #360]	; (8004a24 <HAL_DMA_Init+0x1d8>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d022      	beq.n	8004904 <HAL_DMA_Init+0xb8>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a59      	ldr	r2, [pc, #356]	; (8004a28 <HAL_DMA_Init+0x1dc>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d01d      	beq.n	8004904 <HAL_DMA_Init+0xb8>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a57      	ldr	r2, [pc, #348]	; (8004a2c <HAL_DMA_Init+0x1e0>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d018      	beq.n	8004904 <HAL_DMA_Init+0xb8>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a56      	ldr	r2, [pc, #344]	; (8004a30 <HAL_DMA_Init+0x1e4>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d013      	beq.n	8004904 <HAL_DMA_Init+0xb8>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a54      	ldr	r2, [pc, #336]	; (8004a34 <HAL_DMA_Init+0x1e8>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d00e      	beq.n	8004904 <HAL_DMA_Init+0xb8>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a53      	ldr	r2, [pc, #332]	; (8004a38 <HAL_DMA_Init+0x1ec>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d009      	beq.n	8004904 <HAL_DMA_Init+0xb8>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a51      	ldr	r2, [pc, #324]	; (8004a3c <HAL_DMA_Init+0x1f0>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d004      	beq.n	8004904 <HAL_DMA_Init+0xb8>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a50      	ldr	r2, [pc, #320]	; (8004a40 <HAL_DMA_Init+0x1f4>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d101      	bne.n	8004908 <HAL_DMA_Init+0xbc>
 8004904:	2301      	movs	r3, #1
 8004906:	e000      	b.n	800490a <HAL_DMA_Init+0xbe>
 8004908:	2300      	movs	r3, #0
 800490a:	2b00      	cmp	r3, #0
 800490c:	f000 813b 	beq.w	8004b86 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2202      	movs	r2, #2
 800491c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a37      	ldr	r2, [pc, #220]	; (8004a04 <HAL_DMA_Init+0x1b8>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d04a      	beq.n	80049c0 <HAL_DMA_Init+0x174>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a36      	ldr	r2, [pc, #216]	; (8004a08 <HAL_DMA_Init+0x1bc>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d045      	beq.n	80049c0 <HAL_DMA_Init+0x174>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a34      	ldr	r2, [pc, #208]	; (8004a0c <HAL_DMA_Init+0x1c0>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d040      	beq.n	80049c0 <HAL_DMA_Init+0x174>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a33      	ldr	r2, [pc, #204]	; (8004a10 <HAL_DMA_Init+0x1c4>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d03b      	beq.n	80049c0 <HAL_DMA_Init+0x174>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a31      	ldr	r2, [pc, #196]	; (8004a14 <HAL_DMA_Init+0x1c8>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d036      	beq.n	80049c0 <HAL_DMA_Init+0x174>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a30      	ldr	r2, [pc, #192]	; (8004a18 <HAL_DMA_Init+0x1cc>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d031      	beq.n	80049c0 <HAL_DMA_Init+0x174>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a2e      	ldr	r2, [pc, #184]	; (8004a1c <HAL_DMA_Init+0x1d0>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d02c      	beq.n	80049c0 <HAL_DMA_Init+0x174>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a2d      	ldr	r2, [pc, #180]	; (8004a20 <HAL_DMA_Init+0x1d4>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d027      	beq.n	80049c0 <HAL_DMA_Init+0x174>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a2b      	ldr	r2, [pc, #172]	; (8004a24 <HAL_DMA_Init+0x1d8>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d022      	beq.n	80049c0 <HAL_DMA_Init+0x174>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a2a      	ldr	r2, [pc, #168]	; (8004a28 <HAL_DMA_Init+0x1dc>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d01d      	beq.n	80049c0 <HAL_DMA_Init+0x174>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a28      	ldr	r2, [pc, #160]	; (8004a2c <HAL_DMA_Init+0x1e0>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d018      	beq.n	80049c0 <HAL_DMA_Init+0x174>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a27      	ldr	r2, [pc, #156]	; (8004a30 <HAL_DMA_Init+0x1e4>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d013      	beq.n	80049c0 <HAL_DMA_Init+0x174>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a25      	ldr	r2, [pc, #148]	; (8004a34 <HAL_DMA_Init+0x1e8>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d00e      	beq.n	80049c0 <HAL_DMA_Init+0x174>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a24      	ldr	r2, [pc, #144]	; (8004a38 <HAL_DMA_Init+0x1ec>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d009      	beq.n	80049c0 <HAL_DMA_Init+0x174>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a22      	ldr	r2, [pc, #136]	; (8004a3c <HAL_DMA_Init+0x1f0>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d004      	beq.n	80049c0 <HAL_DMA_Init+0x174>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a21      	ldr	r2, [pc, #132]	; (8004a40 <HAL_DMA_Init+0x1f4>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d108      	bne.n	80049d2 <HAL_DMA_Init+0x186>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 0201 	bic.w	r2, r2, #1
 80049ce:	601a      	str	r2, [r3, #0]
 80049d0:	e007      	b.n	80049e2 <HAL_DMA_Init+0x196>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f022 0201 	bic.w	r2, r2, #1
 80049e0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80049e2:	e02f      	b.n	8004a44 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049e4:	f7ff fde8 	bl	80045b8 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b05      	cmp	r3, #5
 80049f0:	d928      	bls.n	8004a44 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2220      	movs	r2, #32
 80049f6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2203      	movs	r2, #3
 80049fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e246      	b.n	8004e92 <HAL_DMA_Init+0x646>
 8004a04:	40020010 	.word	0x40020010
 8004a08:	40020028 	.word	0x40020028
 8004a0c:	40020040 	.word	0x40020040
 8004a10:	40020058 	.word	0x40020058
 8004a14:	40020070 	.word	0x40020070
 8004a18:	40020088 	.word	0x40020088
 8004a1c:	400200a0 	.word	0x400200a0
 8004a20:	400200b8 	.word	0x400200b8
 8004a24:	40020410 	.word	0x40020410
 8004a28:	40020428 	.word	0x40020428
 8004a2c:	40020440 	.word	0x40020440
 8004a30:	40020458 	.word	0x40020458
 8004a34:	40020470 	.word	0x40020470
 8004a38:	40020488 	.word	0x40020488
 8004a3c:	400204a0 	.word	0x400204a0
 8004a40:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1c8      	bne.n	80049e4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	4b83      	ldr	r3, [pc, #524]	; (8004c6c <HAL_DMA_Init+0x420>)
 8004a5e:	4013      	ands	r3, r2
 8004a60:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004a6a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a76:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	699b      	ldr	r3, [r3, #24]
 8004a7c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a82:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a1b      	ldr	r3, [r3, #32]
 8004a88:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	2b04      	cmp	r3, #4
 8004a96:	d107      	bne.n	8004aa8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004aa8:	4b71      	ldr	r3, [pc, #452]	; (8004c70 <HAL_DMA_Init+0x424>)
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	4b71      	ldr	r3, [pc, #452]	; (8004c74 <HAL_DMA_Init+0x428>)
 8004aae:	4013      	ands	r3, r2
 8004ab0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ab4:	d328      	bcc.n	8004b08 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2b28      	cmp	r3, #40	; 0x28
 8004abc:	d903      	bls.n	8004ac6 <HAL_DMA_Init+0x27a>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	2b2e      	cmp	r3, #46	; 0x2e
 8004ac4:	d917      	bls.n	8004af6 <HAL_DMA_Init+0x2aa>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	2b3e      	cmp	r3, #62	; 0x3e
 8004acc:	d903      	bls.n	8004ad6 <HAL_DMA_Init+0x28a>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	2b42      	cmp	r3, #66	; 0x42
 8004ad4:	d90f      	bls.n	8004af6 <HAL_DMA_Init+0x2aa>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2b46      	cmp	r3, #70	; 0x46
 8004adc:	d903      	bls.n	8004ae6 <HAL_DMA_Init+0x29a>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	2b48      	cmp	r3, #72	; 0x48
 8004ae4:	d907      	bls.n	8004af6 <HAL_DMA_Init+0x2aa>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b4e      	cmp	r3, #78	; 0x4e
 8004aec:	d905      	bls.n	8004afa <HAL_DMA_Init+0x2ae>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	2b52      	cmp	r3, #82	; 0x52
 8004af4:	d801      	bhi.n	8004afa <HAL_DMA_Init+0x2ae>
 8004af6:	2301      	movs	r3, #1
 8004af8:	e000      	b.n	8004afc <HAL_DMA_Init+0x2b0>
 8004afa:	2300      	movs	r3, #0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d003      	beq.n	8004b08 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b06:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f023 0307 	bic.w	r3, r3, #7
 8004b1e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2e:	2b04      	cmp	r3, #4
 8004b30:	d117      	bne.n	8004b62 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00e      	beq.n	8004b62 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f001 fdcf 	bl	80066e8 <DMA_CheckFifoParam>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d008      	beq.n	8004b62 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2240      	movs	r2, #64	; 0x40
 8004b54:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e197      	b.n	8004e92 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f001 fd0a 	bl	8006584 <DMA_CalcBaseAndBitshift>
 8004b70:	4603      	mov	r3, r0
 8004b72:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b78:	f003 031f 	and.w	r3, r3, #31
 8004b7c:	223f      	movs	r2, #63	; 0x3f
 8004b7e:	409a      	lsls	r2, r3
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	609a      	str	r2, [r3, #8]
 8004b84:	e0cd      	b.n	8004d22 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a3b      	ldr	r2, [pc, #236]	; (8004c78 <HAL_DMA_Init+0x42c>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d022      	beq.n	8004bd6 <HAL_DMA_Init+0x38a>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a39      	ldr	r2, [pc, #228]	; (8004c7c <HAL_DMA_Init+0x430>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d01d      	beq.n	8004bd6 <HAL_DMA_Init+0x38a>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a38      	ldr	r2, [pc, #224]	; (8004c80 <HAL_DMA_Init+0x434>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d018      	beq.n	8004bd6 <HAL_DMA_Init+0x38a>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a36      	ldr	r2, [pc, #216]	; (8004c84 <HAL_DMA_Init+0x438>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d013      	beq.n	8004bd6 <HAL_DMA_Init+0x38a>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a35      	ldr	r2, [pc, #212]	; (8004c88 <HAL_DMA_Init+0x43c>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d00e      	beq.n	8004bd6 <HAL_DMA_Init+0x38a>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a33      	ldr	r2, [pc, #204]	; (8004c8c <HAL_DMA_Init+0x440>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d009      	beq.n	8004bd6 <HAL_DMA_Init+0x38a>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a32      	ldr	r2, [pc, #200]	; (8004c90 <HAL_DMA_Init+0x444>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d004      	beq.n	8004bd6 <HAL_DMA_Init+0x38a>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a30      	ldr	r2, [pc, #192]	; (8004c94 <HAL_DMA_Init+0x448>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d101      	bne.n	8004bda <HAL_DMA_Init+0x38e>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e000      	b.n	8004bdc <HAL_DMA_Init+0x390>
 8004bda:	2300      	movs	r3, #0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 8097 	beq.w	8004d10 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a24      	ldr	r2, [pc, #144]	; (8004c78 <HAL_DMA_Init+0x42c>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d021      	beq.n	8004c30 <HAL_DMA_Init+0x3e4>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a22      	ldr	r2, [pc, #136]	; (8004c7c <HAL_DMA_Init+0x430>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d01c      	beq.n	8004c30 <HAL_DMA_Init+0x3e4>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a21      	ldr	r2, [pc, #132]	; (8004c80 <HAL_DMA_Init+0x434>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d017      	beq.n	8004c30 <HAL_DMA_Init+0x3e4>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a1f      	ldr	r2, [pc, #124]	; (8004c84 <HAL_DMA_Init+0x438>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d012      	beq.n	8004c30 <HAL_DMA_Init+0x3e4>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a1e      	ldr	r2, [pc, #120]	; (8004c88 <HAL_DMA_Init+0x43c>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d00d      	beq.n	8004c30 <HAL_DMA_Init+0x3e4>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a1c      	ldr	r2, [pc, #112]	; (8004c8c <HAL_DMA_Init+0x440>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d008      	beq.n	8004c30 <HAL_DMA_Init+0x3e4>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a1b      	ldr	r2, [pc, #108]	; (8004c90 <HAL_DMA_Init+0x444>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d003      	beq.n	8004c30 <HAL_DMA_Init+0x3e4>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a19      	ldr	r2, [pc, #100]	; (8004c94 <HAL_DMA_Init+0x448>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	4b12      	ldr	r3, [pc, #72]	; (8004c98 <HAL_DMA_Init+0x44c>)
 8004c4e:	4013      	ands	r3, r2
 8004c50:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	2b40      	cmp	r3, #64	; 0x40
 8004c58:	d020      	beq.n	8004c9c <HAL_DMA_Init+0x450>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	2b80      	cmp	r3, #128	; 0x80
 8004c60:	d102      	bne.n	8004c68 <HAL_DMA_Init+0x41c>
 8004c62:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c66:	e01a      	b.n	8004c9e <HAL_DMA_Init+0x452>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	e018      	b.n	8004c9e <HAL_DMA_Init+0x452>
 8004c6c:	fe10803f 	.word	0xfe10803f
 8004c70:	5c001000 	.word	0x5c001000
 8004c74:	ffff0000 	.word	0xffff0000
 8004c78:	58025408 	.word	0x58025408
 8004c7c:	5802541c 	.word	0x5802541c
 8004c80:	58025430 	.word	0x58025430
 8004c84:	58025444 	.word	0x58025444
 8004c88:	58025458 	.word	0x58025458
 8004c8c:	5802546c 	.word	0x5802546c
 8004c90:	58025480 	.word	0x58025480
 8004c94:	58025494 	.word	0x58025494
 8004c98:	fffe000f 	.word	0xfffe000f
 8004c9c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	68d2      	ldr	r2, [r2, #12]
 8004ca2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004ca4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004cac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004cb4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004cbc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004cc4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004ccc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	4b6e      	ldr	r3, [pc, #440]	; (8004e9c <HAL_DMA_Init+0x650>)
 8004ce4:	4413      	add	r3, r2
 8004ce6:	4a6e      	ldr	r2, [pc, #440]	; (8004ea0 <HAL_DMA_Init+0x654>)
 8004ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cec:	091b      	lsrs	r3, r3, #4
 8004cee:	009a      	lsls	r2, r3, #2
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f001 fc45 	bl	8006584 <DMA_CalcBaseAndBitshift>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d02:	f003 031f 	and.w	r3, r3, #31
 8004d06:	2201      	movs	r2, #1
 8004d08:	409a      	lsls	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	605a      	str	r2, [r3, #4]
 8004d0e:	e008      	b.n	8004d22 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2240      	movs	r2, #64	; 0x40
 8004d14:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2203      	movs	r2, #3
 8004d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e0b7      	b.n	8004e92 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a5f      	ldr	r2, [pc, #380]	; (8004ea4 <HAL_DMA_Init+0x658>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d072      	beq.n	8004e12 <HAL_DMA_Init+0x5c6>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a5d      	ldr	r2, [pc, #372]	; (8004ea8 <HAL_DMA_Init+0x65c>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d06d      	beq.n	8004e12 <HAL_DMA_Init+0x5c6>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a5c      	ldr	r2, [pc, #368]	; (8004eac <HAL_DMA_Init+0x660>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d068      	beq.n	8004e12 <HAL_DMA_Init+0x5c6>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a5a      	ldr	r2, [pc, #360]	; (8004eb0 <HAL_DMA_Init+0x664>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d063      	beq.n	8004e12 <HAL_DMA_Init+0x5c6>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a59      	ldr	r2, [pc, #356]	; (8004eb4 <HAL_DMA_Init+0x668>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d05e      	beq.n	8004e12 <HAL_DMA_Init+0x5c6>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a57      	ldr	r2, [pc, #348]	; (8004eb8 <HAL_DMA_Init+0x66c>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d059      	beq.n	8004e12 <HAL_DMA_Init+0x5c6>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a56      	ldr	r2, [pc, #344]	; (8004ebc <HAL_DMA_Init+0x670>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d054      	beq.n	8004e12 <HAL_DMA_Init+0x5c6>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a54      	ldr	r2, [pc, #336]	; (8004ec0 <HAL_DMA_Init+0x674>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d04f      	beq.n	8004e12 <HAL_DMA_Init+0x5c6>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a53      	ldr	r2, [pc, #332]	; (8004ec4 <HAL_DMA_Init+0x678>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d04a      	beq.n	8004e12 <HAL_DMA_Init+0x5c6>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a51      	ldr	r2, [pc, #324]	; (8004ec8 <HAL_DMA_Init+0x67c>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d045      	beq.n	8004e12 <HAL_DMA_Init+0x5c6>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a50      	ldr	r2, [pc, #320]	; (8004ecc <HAL_DMA_Init+0x680>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d040      	beq.n	8004e12 <HAL_DMA_Init+0x5c6>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a4e      	ldr	r2, [pc, #312]	; (8004ed0 <HAL_DMA_Init+0x684>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d03b      	beq.n	8004e12 <HAL_DMA_Init+0x5c6>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a4d      	ldr	r2, [pc, #308]	; (8004ed4 <HAL_DMA_Init+0x688>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d036      	beq.n	8004e12 <HAL_DMA_Init+0x5c6>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a4b      	ldr	r2, [pc, #300]	; (8004ed8 <HAL_DMA_Init+0x68c>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d031      	beq.n	8004e12 <HAL_DMA_Init+0x5c6>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a4a      	ldr	r2, [pc, #296]	; (8004edc <HAL_DMA_Init+0x690>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d02c      	beq.n	8004e12 <HAL_DMA_Init+0x5c6>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a48      	ldr	r2, [pc, #288]	; (8004ee0 <HAL_DMA_Init+0x694>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d027      	beq.n	8004e12 <HAL_DMA_Init+0x5c6>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a47      	ldr	r2, [pc, #284]	; (8004ee4 <HAL_DMA_Init+0x698>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d022      	beq.n	8004e12 <HAL_DMA_Init+0x5c6>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a45      	ldr	r2, [pc, #276]	; (8004ee8 <HAL_DMA_Init+0x69c>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d01d      	beq.n	8004e12 <HAL_DMA_Init+0x5c6>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a44      	ldr	r2, [pc, #272]	; (8004eec <HAL_DMA_Init+0x6a0>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d018      	beq.n	8004e12 <HAL_DMA_Init+0x5c6>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a42      	ldr	r2, [pc, #264]	; (8004ef0 <HAL_DMA_Init+0x6a4>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d013      	beq.n	8004e12 <HAL_DMA_Init+0x5c6>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a41      	ldr	r2, [pc, #260]	; (8004ef4 <HAL_DMA_Init+0x6a8>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d00e      	beq.n	8004e12 <HAL_DMA_Init+0x5c6>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a3f      	ldr	r2, [pc, #252]	; (8004ef8 <HAL_DMA_Init+0x6ac>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d009      	beq.n	8004e12 <HAL_DMA_Init+0x5c6>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a3e      	ldr	r2, [pc, #248]	; (8004efc <HAL_DMA_Init+0x6b0>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d004      	beq.n	8004e12 <HAL_DMA_Init+0x5c6>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a3c      	ldr	r2, [pc, #240]	; (8004f00 <HAL_DMA_Init+0x6b4>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d101      	bne.n	8004e16 <HAL_DMA_Init+0x5ca>
 8004e12:	2301      	movs	r3, #1
 8004e14:	e000      	b.n	8004e18 <HAL_DMA_Init+0x5cc>
 8004e16:	2300      	movs	r3, #0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d032      	beq.n	8004e82 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f001 fcdf 	bl	80067e0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	2b80      	cmp	r3, #128	; 0x80
 8004e28:	d102      	bne.n	8004e30 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685a      	ldr	r2, [r3, #4]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e38:	b2d2      	uxtb	r2, r2
 8004e3a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004e44:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d010      	beq.n	8004e70 <HAL_DMA_Init+0x624>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	2b08      	cmp	r3, #8
 8004e54:	d80c      	bhi.n	8004e70 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f001 fd5c 	bl	8006914 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e60:	2200      	movs	r2, #0
 8004e62:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004e6c:	605a      	str	r2, [r3, #4]
 8004e6e:	e008      	b.n	8004e82 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3718      	adds	r7, #24
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	a7fdabf8 	.word	0xa7fdabf8
 8004ea0:	cccccccd 	.word	0xcccccccd
 8004ea4:	40020010 	.word	0x40020010
 8004ea8:	40020028 	.word	0x40020028
 8004eac:	40020040 	.word	0x40020040
 8004eb0:	40020058 	.word	0x40020058
 8004eb4:	40020070 	.word	0x40020070
 8004eb8:	40020088 	.word	0x40020088
 8004ebc:	400200a0 	.word	0x400200a0
 8004ec0:	400200b8 	.word	0x400200b8
 8004ec4:	40020410 	.word	0x40020410
 8004ec8:	40020428 	.word	0x40020428
 8004ecc:	40020440 	.word	0x40020440
 8004ed0:	40020458 	.word	0x40020458
 8004ed4:	40020470 	.word	0x40020470
 8004ed8:	40020488 	.word	0x40020488
 8004edc:	400204a0 	.word	0x400204a0
 8004ee0:	400204b8 	.word	0x400204b8
 8004ee4:	58025408 	.word	0x58025408
 8004ee8:	5802541c 	.word	0x5802541c
 8004eec:	58025430 	.word	0x58025430
 8004ef0:	58025444 	.word	0x58025444
 8004ef4:	58025458 	.word	0x58025458
 8004ef8:	5802546c 	.word	0x5802546c
 8004efc:	58025480 	.word	0x58025480
 8004f00:	58025494 	.word	0x58025494

08004f04 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
 8004f10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f12:	2300      	movs	r3, #0
 8004f14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d101      	bne.n	8004f20 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e226      	b.n	800536e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d101      	bne.n	8004f2e <HAL_DMA_Start_IT+0x2a>
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	e21f      	b.n	800536e <HAL_DMA_Start_IT+0x46a>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	f040 820a 	bne.w	8005358 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a68      	ldr	r2, [pc, #416]	; (80050f8 <HAL_DMA_Start_IT+0x1f4>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d04a      	beq.n	8004ff2 <HAL_DMA_Start_IT+0xee>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a66      	ldr	r2, [pc, #408]	; (80050fc <HAL_DMA_Start_IT+0x1f8>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d045      	beq.n	8004ff2 <HAL_DMA_Start_IT+0xee>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a65      	ldr	r2, [pc, #404]	; (8005100 <HAL_DMA_Start_IT+0x1fc>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d040      	beq.n	8004ff2 <HAL_DMA_Start_IT+0xee>
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a63      	ldr	r2, [pc, #396]	; (8005104 <HAL_DMA_Start_IT+0x200>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d03b      	beq.n	8004ff2 <HAL_DMA_Start_IT+0xee>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a62      	ldr	r2, [pc, #392]	; (8005108 <HAL_DMA_Start_IT+0x204>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d036      	beq.n	8004ff2 <HAL_DMA_Start_IT+0xee>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a60      	ldr	r2, [pc, #384]	; (800510c <HAL_DMA_Start_IT+0x208>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d031      	beq.n	8004ff2 <HAL_DMA_Start_IT+0xee>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a5f      	ldr	r2, [pc, #380]	; (8005110 <HAL_DMA_Start_IT+0x20c>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d02c      	beq.n	8004ff2 <HAL_DMA_Start_IT+0xee>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a5d      	ldr	r2, [pc, #372]	; (8005114 <HAL_DMA_Start_IT+0x210>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d027      	beq.n	8004ff2 <HAL_DMA_Start_IT+0xee>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a5c      	ldr	r2, [pc, #368]	; (8005118 <HAL_DMA_Start_IT+0x214>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d022      	beq.n	8004ff2 <HAL_DMA_Start_IT+0xee>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a5a      	ldr	r2, [pc, #360]	; (800511c <HAL_DMA_Start_IT+0x218>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d01d      	beq.n	8004ff2 <HAL_DMA_Start_IT+0xee>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a59      	ldr	r2, [pc, #356]	; (8005120 <HAL_DMA_Start_IT+0x21c>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d018      	beq.n	8004ff2 <HAL_DMA_Start_IT+0xee>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a57      	ldr	r2, [pc, #348]	; (8005124 <HAL_DMA_Start_IT+0x220>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d013      	beq.n	8004ff2 <HAL_DMA_Start_IT+0xee>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a56      	ldr	r2, [pc, #344]	; (8005128 <HAL_DMA_Start_IT+0x224>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d00e      	beq.n	8004ff2 <HAL_DMA_Start_IT+0xee>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a54      	ldr	r2, [pc, #336]	; (800512c <HAL_DMA_Start_IT+0x228>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d009      	beq.n	8004ff2 <HAL_DMA_Start_IT+0xee>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a53      	ldr	r2, [pc, #332]	; (8005130 <HAL_DMA_Start_IT+0x22c>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d004      	beq.n	8004ff2 <HAL_DMA_Start_IT+0xee>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a51      	ldr	r2, [pc, #324]	; (8005134 <HAL_DMA_Start_IT+0x230>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d108      	bne.n	8005004 <HAL_DMA_Start_IT+0x100>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f022 0201 	bic.w	r2, r2, #1
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	e007      	b.n	8005014 <HAL_DMA_Start_IT+0x110>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 0201 	bic.w	r2, r2, #1
 8005012:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	68b9      	ldr	r1, [r7, #8]
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f001 f906 	bl	800622c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a34      	ldr	r2, [pc, #208]	; (80050f8 <HAL_DMA_Start_IT+0x1f4>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d04a      	beq.n	80050c0 <HAL_DMA_Start_IT+0x1bc>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a33      	ldr	r2, [pc, #204]	; (80050fc <HAL_DMA_Start_IT+0x1f8>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d045      	beq.n	80050c0 <HAL_DMA_Start_IT+0x1bc>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a31      	ldr	r2, [pc, #196]	; (8005100 <HAL_DMA_Start_IT+0x1fc>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d040      	beq.n	80050c0 <HAL_DMA_Start_IT+0x1bc>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a30      	ldr	r2, [pc, #192]	; (8005104 <HAL_DMA_Start_IT+0x200>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d03b      	beq.n	80050c0 <HAL_DMA_Start_IT+0x1bc>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a2e      	ldr	r2, [pc, #184]	; (8005108 <HAL_DMA_Start_IT+0x204>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d036      	beq.n	80050c0 <HAL_DMA_Start_IT+0x1bc>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a2d      	ldr	r2, [pc, #180]	; (800510c <HAL_DMA_Start_IT+0x208>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d031      	beq.n	80050c0 <HAL_DMA_Start_IT+0x1bc>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a2b      	ldr	r2, [pc, #172]	; (8005110 <HAL_DMA_Start_IT+0x20c>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d02c      	beq.n	80050c0 <HAL_DMA_Start_IT+0x1bc>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a2a      	ldr	r2, [pc, #168]	; (8005114 <HAL_DMA_Start_IT+0x210>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d027      	beq.n	80050c0 <HAL_DMA_Start_IT+0x1bc>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a28      	ldr	r2, [pc, #160]	; (8005118 <HAL_DMA_Start_IT+0x214>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d022      	beq.n	80050c0 <HAL_DMA_Start_IT+0x1bc>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a27      	ldr	r2, [pc, #156]	; (800511c <HAL_DMA_Start_IT+0x218>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d01d      	beq.n	80050c0 <HAL_DMA_Start_IT+0x1bc>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a25      	ldr	r2, [pc, #148]	; (8005120 <HAL_DMA_Start_IT+0x21c>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d018      	beq.n	80050c0 <HAL_DMA_Start_IT+0x1bc>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a24      	ldr	r2, [pc, #144]	; (8005124 <HAL_DMA_Start_IT+0x220>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d013      	beq.n	80050c0 <HAL_DMA_Start_IT+0x1bc>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a22      	ldr	r2, [pc, #136]	; (8005128 <HAL_DMA_Start_IT+0x224>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d00e      	beq.n	80050c0 <HAL_DMA_Start_IT+0x1bc>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a21      	ldr	r2, [pc, #132]	; (800512c <HAL_DMA_Start_IT+0x228>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d009      	beq.n	80050c0 <HAL_DMA_Start_IT+0x1bc>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a1f      	ldr	r2, [pc, #124]	; (8005130 <HAL_DMA_Start_IT+0x22c>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d004      	beq.n	80050c0 <HAL_DMA_Start_IT+0x1bc>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a1e      	ldr	r2, [pc, #120]	; (8005134 <HAL_DMA_Start_IT+0x230>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d101      	bne.n	80050c4 <HAL_DMA_Start_IT+0x1c0>
 80050c0:	2301      	movs	r3, #1
 80050c2:	e000      	b.n	80050c6 <HAL_DMA_Start_IT+0x1c2>
 80050c4:	2300      	movs	r3, #0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d036      	beq.n	8005138 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f023 021e 	bic.w	r2, r3, #30
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f042 0216 	orr.w	r2, r2, #22
 80050dc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d03e      	beq.n	8005164 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f042 0208 	orr.w	r2, r2, #8
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	e035      	b.n	8005164 <HAL_DMA_Start_IT+0x260>
 80050f8:	40020010 	.word	0x40020010
 80050fc:	40020028 	.word	0x40020028
 8005100:	40020040 	.word	0x40020040
 8005104:	40020058 	.word	0x40020058
 8005108:	40020070 	.word	0x40020070
 800510c:	40020088 	.word	0x40020088
 8005110:	400200a0 	.word	0x400200a0
 8005114:	400200b8 	.word	0x400200b8
 8005118:	40020410 	.word	0x40020410
 800511c:	40020428 	.word	0x40020428
 8005120:	40020440 	.word	0x40020440
 8005124:	40020458 	.word	0x40020458
 8005128:	40020470 	.word	0x40020470
 800512c:	40020488 	.word	0x40020488
 8005130:	400204a0 	.word	0x400204a0
 8005134:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f023 020e 	bic.w	r2, r3, #14
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f042 020a 	orr.w	r2, r2, #10
 800514a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005150:	2b00      	cmp	r3, #0
 8005152:	d007      	beq.n	8005164 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f042 0204 	orr.w	r2, r2, #4
 8005162:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a83      	ldr	r2, [pc, #524]	; (8005378 <HAL_DMA_Start_IT+0x474>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d072      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a82      	ldr	r2, [pc, #520]	; (800537c <HAL_DMA_Start_IT+0x478>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d06d      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a80      	ldr	r2, [pc, #512]	; (8005380 <HAL_DMA_Start_IT+0x47c>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d068      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a7f      	ldr	r2, [pc, #508]	; (8005384 <HAL_DMA_Start_IT+0x480>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d063      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a7d      	ldr	r2, [pc, #500]	; (8005388 <HAL_DMA_Start_IT+0x484>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d05e      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a7c      	ldr	r2, [pc, #496]	; (800538c <HAL_DMA_Start_IT+0x488>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d059      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a7a      	ldr	r2, [pc, #488]	; (8005390 <HAL_DMA_Start_IT+0x48c>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d054      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a79      	ldr	r2, [pc, #484]	; (8005394 <HAL_DMA_Start_IT+0x490>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d04f      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a77      	ldr	r2, [pc, #476]	; (8005398 <HAL_DMA_Start_IT+0x494>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d04a      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a76      	ldr	r2, [pc, #472]	; (800539c <HAL_DMA_Start_IT+0x498>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d045      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a74      	ldr	r2, [pc, #464]	; (80053a0 <HAL_DMA_Start_IT+0x49c>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d040      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a73      	ldr	r2, [pc, #460]	; (80053a4 <HAL_DMA_Start_IT+0x4a0>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d03b      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a71      	ldr	r2, [pc, #452]	; (80053a8 <HAL_DMA_Start_IT+0x4a4>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d036      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a70      	ldr	r2, [pc, #448]	; (80053ac <HAL_DMA_Start_IT+0x4a8>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d031      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a6e      	ldr	r2, [pc, #440]	; (80053b0 <HAL_DMA_Start_IT+0x4ac>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d02c      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a6d      	ldr	r2, [pc, #436]	; (80053b4 <HAL_DMA_Start_IT+0x4b0>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d027      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a6b      	ldr	r2, [pc, #428]	; (80053b8 <HAL_DMA_Start_IT+0x4b4>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d022      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a6a      	ldr	r2, [pc, #424]	; (80053bc <HAL_DMA_Start_IT+0x4b8>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d01d      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a68      	ldr	r2, [pc, #416]	; (80053c0 <HAL_DMA_Start_IT+0x4bc>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d018      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a67      	ldr	r2, [pc, #412]	; (80053c4 <HAL_DMA_Start_IT+0x4c0>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d013      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a65      	ldr	r2, [pc, #404]	; (80053c8 <HAL_DMA_Start_IT+0x4c4>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d00e      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a64      	ldr	r2, [pc, #400]	; (80053cc <HAL_DMA_Start_IT+0x4c8>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d009      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a62      	ldr	r2, [pc, #392]	; (80053d0 <HAL_DMA_Start_IT+0x4cc>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d004      	beq.n	8005254 <HAL_DMA_Start_IT+0x350>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a61      	ldr	r2, [pc, #388]	; (80053d4 <HAL_DMA_Start_IT+0x4d0>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d101      	bne.n	8005258 <HAL_DMA_Start_IT+0x354>
 8005254:	2301      	movs	r3, #1
 8005256:	e000      	b.n	800525a <HAL_DMA_Start_IT+0x356>
 8005258:	2300      	movs	r3, #0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d01a      	beq.n	8005294 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d007      	beq.n	800527c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005276:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800527a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005280:	2b00      	cmp	r3, #0
 8005282:	d007      	beq.n	8005294 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800528e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005292:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a37      	ldr	r2, [pc, #220]	; (8005378 <HAL_DMA_Start_IT+0x474>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d04a      	beq.n	8005334 <HAL_DMA_Start_IT+0x430>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a36      	ldr	r2, [pc, #216]	; (800537c <HAL_DMA_Start_IT+0x478>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d045      	beq.n	8005334 <HAL_DMA_Start_IT+0x430>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a34      	ldr	r2, [pc, #208]	; (8005380 <HAL_DMA_Start_IT+0x47c>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d040      	beq.n	8005334 <HAL_DMA_Start_IT+0x430>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a33      	ldr	r2, [pc, #204]	; (8005384 <HAL_DMA_Start_IT+0x480>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d03b      	beq.n	8005334 <HAL_DMA_Start_IT+0x430>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a31      	ldr	r2, [pc, #196]	; (8005388 <HAL_DMA_Start_IT+0x484>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d036      	beq.n	8005334 <HAL_DMA_Start_IT+0x430>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a30      	ldr	r2, [pc, #192]	; (800538c <HAL_DMA_Start_IT+0x488>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d031      	beq.n	8005334 <HAL_DMA_Start_IT+0x430>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a2e      	ldr	r2, [pc, #184]	; (8005390 <HAL_DMA_Start_IT+0x48c>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d02c      	beq.n	8005334 <HAL_DMA_Start_IT+0x430>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a2d      	ldr	r2, [pc, #180]	; (8005394 <HAL_DMA_Start_IT+0x490>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d027      	beq.n	8005334 <HAL_DMA_Start_IT+0x430>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a2b      	ldr	r2, [pc, #172]	; (8005398 <HAL_DMA_Start_IT+0x494>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d022      	beq.n	8005334 <HAL_DMA_Start_IT+0x430>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a2a      	ldr	r2, [pc, #168]	; (800539c <HAL_DMA_Start_IT+0x498>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d01d      	beq.n	8005334 <HAL_DMA_Start_IT+0x430>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a28      	ldr	r2, [pc, #160]	; (80053a0 <HAL_DMA_Start_IT+0x49c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d018      	beq.n	8005334 <HAL_DMA_Start_IT+0x430>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a27      	ldr	r2, [pc, #156]	; (80053a4 <HAL_DMA_Start_IT+0x4a0>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d013      	beq.n	8005334 <HAL_DMA_Start_IT+0x430>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a25      	ldr	r2, [pc, #148]	; (80053a8 <HAL_DMA_Start_IT+0x4a4>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d00e      	beq.n	8005334 <HAL_DMA_Start_IT+0x430>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a24      	ldr	r2, [pc, #144]	; (80053ac <HAL_DMA_Start_IT+0x4a8>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d009      	beq.n	8005334 <HAL_DMA_Start_IT+0x430>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a22      	ldr	r2, [pc, #136]	; (80053b0 <HAL_DMA_Start_IT+0x4ac>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d004      	beq.n	8005334 <HAL_DMA_Start_IT+0x430>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a21      	ldr	r2, [pc, #132]	; (80053b4 <HAL_DMA_Start_IT+0x4b0>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d108      	bne.n	8005346 <HAL_DMA_Start_IT+0x442>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f042 0201 	orr.w	r2, r2, #1
 8005342:	601a      	str	r2, [r3, #0]
 8005344:	e012      	b.n	800536c <HAL_DMA_Start_IT+0x468>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f042 0201 	orr.w	r2, r2, #1
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	e009      	b.n	800536c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005366:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800536c:	7dfb      	ldrb	r3, [r7, #23]
}
 800536e:	4618      	mov	r0, r3
 8005370:	3718      	adds	r7, #24
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	40020010 	.word	0x40020010
 800537c:	40020028 	.word	0x40020028
 8005380:	40020040 	.word	0x40020040
 8005384:	40020058 	.word	0x40020058
 8005388:	40020070 	.word	0x40020070
 800538c:	40020088 	.word	0x40020088
 8005390:	400200a0 	.word	0x400200a0
 8005394:	400200b8 	.word	0x400200b8
 8005398:	40020410 	.word	0x40020410
 800539c:	40020428 	.word	0x40020428
 80053a0:	40020440 	.word	0x40020440
 80053a4:	40020458 	.word	0x40020458
 80053a8:	40020470 	.word	0x40020470
 80053ac:	40020488 	.word	0x40020488
 80053b0:	400204a0 	.word	0x400204a0
 80053b4:	400204b8 	.word	0x400204b8
 80053b8:	58025408 	.word	0x58025408
 80053bc:	5802541c 	.word	0x5802541c
 80053c0:	58025430 	.word	0x58025430
 80053c4:	58025444 	.word	0x58025444
 80053c8:	58025458 	.word	0x58025458
 80053cc:	5802546c 	.word	0x5802546c
 80053d0:	58025480 	.word	0x58025480
 80053d4:	58025494 	.word	0x58025494

080053d8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b08a      	sub	sp, #40	; 0x28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80053e0:	2300      	movs	r3, #0
 80053e2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80053e4:	4b67      	ldr	r3, [pc, #412]	; (8005584 <HAL_DMA_IRQHandler+0x1ac>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a67      	ldr	r2, [pc, #412]	; (8005588 <HAL_DMA_IRQHandler+0x1b0>)
 80053ea:	fba2 2303 	umull	r2, r3, r2, r3
 80053ee:	0a9b      	lsrs	r3, r3, #10
 80053f0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053fc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80053fe:	6a3b      	ldr	r3, [r7, #32]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a5f      	ldr	r2, [pc, #380]	; (800558c <HAL_DMA_IRQHandler+0x1b4>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d04a      	beq.n	80054aa <HAL_DMA_IRQHandler+0xd2>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a5d      	ldr	r2, [pc, #372]	; (8005590 <HAL_DMA_IRQHandler+0x1b8>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d045      	beq.n	80054aa <HAL_DMA_IRQHandler+0xd2>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a5c      	ldr	r2, [pc, #368]	; (8005594 <HAL_DMA_IRQHandler+0x1bc>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d040      	beq.n	80054aa <HAL_DMA_IRQHandler+0xd2>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a5a      	ldr	r2, [pc, #360]	; (8005598 <HAL_DMA_IRQHandler+0x1c0>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d03b      	beq.n	80054aa <HAL_DMA_IRQHandler+0xd2>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a59      	ldr	r2, [pc, #356]	; (800559c <HAL_DMA_IRQHandler+0x1c4>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d036      	beq.n	80054aa <HAL_DMA_IRQHandler+0xd2>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a57      	ldr	r2, [pc, #348]	; (80055a0 <HAL_DMA_IRQHandler+0x1c8>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d031      	beq.n	80054aa <HAL_DMA_IRQHandler+0xd2>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a56      	ldr	r2, [pc, #344]	; (80055a4 <HAL_DMA_IRQHandler+0x1cc>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d02c      	beq.n	80054aa <HAL_DMA_IRQHandler+0xd2>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a54      	ldr	r2, [pc, #336]	; (80055a8 <HAL_DMA_IRQHandler+0x1d0>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d027      	beq.n	80054aa <HAL_DMA_IRQHandler+0xd2>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a53      	ldr	r2, [pc, #332]	; (80055ac <HAL_DMA_IRQHandler+0x1d4>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d022      	beq.n	80054aa <HAL_DMA_IRQHandler+0xd2>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a51      	ldr	r2, [pc, #324]	; (80055b0 <HAL_DMA_IRQHandler+0x1d8>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d01d      	beq.n	80054aa <HAL_DMA_IRQHandler+0xd2>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a50      	ldr	r2, [pc, #320]	; (80055b4 <HAL_DMA_IRQHandler+0x1dc>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d018      	beq.n	80054aa <HAL_DMA_IRQHandler+0xd2>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a4e      	ldr	r2, [pc, #312]	; (80055b8 <HAL_DMA_IRQHandler+0x1e0>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d013      	beq.n	80054aa <HAL_DMA_IRQHandler+0xd2>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a4d      	ldr	r2, [pc, #308]	; (80055bc <HAL_DMA_IRQHandler+0x1e4>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d00e      	beq.n	80054aa <HAL_DMA_IRQHandler+0xd2>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a4b      	ldr	r2, [pc, #300]	; (80055c0 <HAL_DMA_IRQHandler+0x1e8>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d009      	beq.n	80054aa <HAL_DMA_IRQHandler+0xd2>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a4a      	ldr	r2, [pc, #296]	; (80055c4 <HAL_DMA_IRQHandler+0x1ec>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d004      	beq.n	80054aa <HAL_DMA_IRQHandler+0xd2>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a48      	ldr	r2, [pc, #288]	; (80055c8 <HAL_DMA_IRQHandler+0x1f0>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d101      	bne.n	80054ae <HAL_DMA_IRQHandler+0xd6>
 80054aa:	2301      	movs	r3, #1
 80054ac:	e000      	b.n	80054b0 <HAL_DMA_IRQHandler+0xd8>
 80054ae:	2300      	movs	r3, #0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f000 842b 	beq.w	8005d0c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ba:	f003 031f 	and.w	r3, r3, #31
 80054be:	2208      	movs	r2, #8
 80054c0:	409a      	lsls	r2, r3
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	4013      	ands	r3, r2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f000 80a2 	beq.w	8005610 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a2e      	ldr	r2, [pc, #184]	; (800558c <HAL_DMA_IRQHandler+0x1b4>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d04a      	beq.n	800556c <HAL_DMA_IRQHandler+0x194>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a2d      	ldr	r2, [pc, #180]	; (8005590 <HAL_DMA_IRQHandler+0x1b8>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d045      	beq.n	800556c <HAL_DMA_IRQHandler+0x194>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a2b      	ldr	r2, [pc, #172]	; (8005594 <HAL_DMA_IRQHandler+0x1bc>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d040      	beq.n	800556c <HAL_DMA_IRQHandler+0x194>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a2a      	ldr	r2, [pc, #168]	; (8005598 <HAL_DMA_IRQHandler+0x1c0>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d03b      	beq.n	800556c <HAL_DMA_IRQHandler+0x194>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a28      	ldr	r2, [pc, #160]	; (800559c <HAL_DMA_IRQHandler+0x1c4>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d036      	beq.n	800556c <HAL_DMA_IRQHandler+0x194>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a27      	ldr	r2, [pc, #156]	; (80055a0 <HAL_DMA_IRQHandler+0x1c8>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d031      	beq.n	800556c <HAL_DMA_IRQHandler+0x194>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a25      	ldr	r2, [pc, #148]	; (80055a4 <HAL_DMA_IRQHandler+0x1cc>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d02c      	beq.n	800556c <HAL_DMA_IRQHandler+0x194>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a24      	ldr	r2, [pc, #144]	; (80055a8 <HAL_DMA_IRQHandler+0x1d0>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d027      	beq.n	800556c <HAL_DMA_IRQHandler+0x194>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a22      	ldr	r2, [pc, #136]	; (80055ac <HAL_DMA_IRQHandler+0x1d4>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d022      	beq.n	800556c <HAL_DMA_IRQHandler+0x194>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a21      	ldr	r2, [pc, #132]	; (80055b0 <HAL_DMA_IRQHandler+0x1d8>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d01d      	beq.n	800556c <HAL_DMA_IRQHandler+0x194>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a1f      	ldr	r2, [pc, #124]	; (80055b4 <HAL_DMA_IRQHandler+0x1dc>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d018      	beq.n	800556c <HAL_DMA_IRQHandler+0x194>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a1e      	ldr	r2, [pc, #120]	; (80055b8 <HAL_DMA_IRQHandler+0x1e0>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d013      	beq.n	800556c <HAL_DMA_IRQHandler+0x194>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a1c      	ldr	r2, [pc, #112]	; (80055bc <HAL_DMA_IRQHandler+0x1e4>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d00e      	beq.n	800556c <HAL_DMA_IRQHandler+0x194>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a1b      	ldr	r2, [pc, #108]	; (80055c0 <HAL_DMA_IRQHandler+0x1e8>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d009      	beq.n	800556c <HAL_DMA_IRQHandler+0x194>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a19      	ldr	r2, [pc, #100]	; (80055c4 <HAL_DMA_IRQHandler+0x1ec>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d004      	beq.n	800556c <HAL_DMA_IRQHandler+0x194>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a18      	ldr	r2, [pc, #96]	; (80055c8 <HAL_DMA_IRQHandler+0x1f0>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d12f      	bne.n	80055cc <HAL_DMA_IRQHandler+0x1f4>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0304 	and.w	r3, r3, #4
 8005576:	2b00      	cmp	r3, #0
 8005578:	bf14      	ite	ne
 800557a:	2301      	movne	r3, #1
 800557c:	2300      	moveq	r3, #0
 800557e:	b2db      	uxtb	r3, r3
 8005580:	e02e      	b.n	80055e0 <HAL_DMA_IRQHandler+0x208>
 8005582:	bf00      	nop
 8005584:	24000010 	.word	0x24000010
 8005588:	1b4e81b5 	.word	0x1b4e81b5
 800558c:	40020010 	.word	0x40020010
 8005590:	40020028 	.word	0x40020028
 8005594:	40020040 	.word	0x40020040
 8005598:	40020058 	.word	0x40020058
 800559c:	40020070 	.word	0x40020070
 80055a0:	40020088 	.word	0x40020088
 80055a4:	400200a0 	.word	0x400200a0
 80055a8:	400200b8 	.word	0x400200b8
 80055ac:	40020410 	.word	0x40020410
 80055b0:	40020428 	.word	0x40020428
 80055b4:	40020440 	.word	0x40020440
 80055b8:	40020458 	.word	0x40020458
 80055bc:	40020470 	.word	0x40020470
 80055c0:	40020488 	.word	0x40020488
 80055c4:	400204a0 	.word	0x400204a0
 80055c8:	400204b8 	.word	0x400204b8
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0308 	and.w	r3, r3, #8
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	bf14      	ite	ne
 80055da:	2301      	movne	r3, #1
 80055dc:	2300      	moveq	r3, #0
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d015      	beq.n	8005610 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f022 0204 	bic.w	r2, r2, #4
 80055f2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055f8:	f003 031f 	and.w	r3, r3, #31
 80055fc:	2208      	movs	r2, #8
 80055fe:	409a      	lsls	r2, r3
 8005600:	6a3b      	ldr	r3, [r7, #32]
 8005602:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005608:	f043 0201 	orr.w	r2, r3, #1
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005614:	f003 031f 	and.w	r3, r3, #31
 8005618:	69ba      	ldr	r2, [r7, #24]
 800561a:	fa22 f303 	lsr.w	r3, r2, r3
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d06e      	beq.n	8005704 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a69      	ldr	r2, [pc, #420]	; (80057d0 <HAL_DMA_IRQHandler+0x3f8>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d04a      	beq.n	80056c6 <HAL_DMA_IRQHandler+0x2ee>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a67      	ldr	r2, [pc, #412]	; (80057d4 <HAL_DMA_IRQHandler+0x3fc>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d045      	beq.n	80056c6 <HAL_DMA_IRQHandler+0x2ee>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a66      	ldr	r2, [pc, #408]	; (80057d8 <HAL_DMA_IRQHandler+0x400>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d040      	beq.n	80056c6 <HAL_DMA_IRQHandler+0x2ee>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a64      	ldr	r2, [pc, #400]	; (80057dc <HAL_DMA_IRQHandler+0x404>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d03b      	beq.n	80056c6 <HAL_DMA_IRQHandler+0x2ee>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a63      	ldr	r2, [pc, #396]	; (80057e0 <HAL_DMA_IRQHandler+0x408>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d036      	beq.n	80056c6 <HAL_DMA_IRQHandler+0x2ee>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a61      	ldr	r2, [pc, #388]	; (80057e4 <HAL_DMA_IRQHandler+0x40c>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d031      	beq.n	80056c6 <HAL_DMA_IRQHandler+0x2ee>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a60      	ldr	r2, [pc, #384]	; (80057e8 <HAL_DMA_IRQHandler+0x410>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d02c      	beq.n	80056c6 <HAL_DMA_IRQHandler+0x2ee>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a5e      	ldr	r2, [pc, #376]	; (80057ec <HAL_DMA_IRQHandler+0x414>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d027      	beq.n	80056c6 <HAL_DMA_IRQHandler+0x2ee>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a5d      	ldr	r2, [pc, #372]	; (80057f0 <HAL_DMA_IRQHandler+0x418>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d022      	beq.n	80056c6 <HAL_DMA_IRQHandler+0x2ee>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a5b      	ldr	r2, [pc, #364]	; (80057f4 <HAL_DMA_IRQHandler+0x41c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d01d      	beq.n	80056c6 <HAL_DMA_IRQHandler+0x2ee>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a5a      	ldr	r2, [pc, #360]	; (80057f8 <HAL_DMA_IRQHandler+0x420>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d018      	beq.n	80056c6 <HAL_DMA_IRQHandler+0x2ee>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a58      	ldr	r2, [pc, #352]	; (80057fc <HAL_DMA_IRQHandler+0x424>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d013      	beq.n	80056c6 <HAL_DMA_IRQHandler+0x2ee>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a57      	ldr	r2, [pc, #348]	; (8005800 <HAL_DMA_IRQHandler+0x428>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d00e      	beq.n	80056c6 <HAL_DMA_IRQHandler+0x2ee>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a55      	ldr	r2, [pc, #340]	; (8005804 <HAL_DMA_IRQHandler+0x42c>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d009      	beq.n	80056c6 <HAL_DMA_IRQHandler+0x2ee>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a54      	ldr	r2, [pc, #336]	; (8005808 <HAL_DMA_IRQHandler+0x430>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d004      	beq.n	80056c6 <HAL_DMA_IRQHandler+0x2ee>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a52      	ldr	r2, [pc, #328]	; (800580c <HAL_DMA_IRQHandler+0x434>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d10a      	bne.n	80056dc <HAL_DMA_IRQHandler+0x304>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	bf14      	ite	ne
 80056d4:	2301      	movne	r3, #1
 80056d6:	2300      	moveq	r3, #0
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	e003      	b.n	80056e4 <HAL_DMA_IRQHandler+0x30c>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2300      	movs	r3, #0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00d      	beq.n	8005704 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ec:	f003 031f 	and.w	r3, r3, #31
 80056f0:	2201      	movs	r2, #1
 80056f2:	409a      	lsls	r2, r3
 80056f4:	6a3b      	ldr	r3, [r7, #32]
 80056f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056fc:	f043 0202 	orr.w	r2, r3, #2
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005708:	f003 031f 	and.w	r3, r3, #31
 800570c:	2204      	movs	r2, #4
 800570e:	409a      	lsls	r2, r3
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	4013      	ands	r3, r2
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 808f 	beq.w	8005838 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a2c      	ldr	r2, [pc, #176]	; (80057d0 <HAL_DMA_IRQHandler+0x3f8>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d04a      	beq.n	80057ba <HAL_DMA_IRQHandler+0x3e2>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a2a      	ldr	r2, [pc, #168]	; (80057d4 <HAL_DMA_IRQHandler+0x3fc>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d045      	beq.n	80057ba <HAL_DMA_IRQHandler+0x3e2>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a29      	ldr	r2, [pc, #164]	; (80057d8 <HAL_DMA_IRQHandler+0x400>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d040      	beq.n	80057ba <HAL_DMA_IRQHandler+0x3e2>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a27      	ldr	r2, [pc, #156]	; (80057dc <HAL_DMA_IRQHandler+0x404>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d03b      	beq.n	80057ba <HAL_DMA_IRQHandler+0x3e2>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a26      	ldr	r2, [pc, #152]	; (80057e0 <HAL_DMA_IRQHandler+0x408>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d036      	beq.n	80057ba <HAL_DMA_IRQHandler+0x3e2>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a24      	ldr	r2, [pc, #144]	; (80057e4 <HAL_DMA_IRQHandler+0x40c>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d031      	beq.n	80057ba <HAL_DMA_IRQHandler+0x3e2>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a23      	ldr	r2, [pc, #140]	; (80057e8 <HAL_DMA_IRQHandler+0x410>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d02c      	beq.n	80057ba <HAL_DMA_IRQHandler+0x3e2>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a21      	ldr	r2, [pc, #132]	; (80057ec <HAL_DMA_IRQHandler+0x414>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d027      	beq.n	80057ba <HAL_DMA_IRQHandler+0x3e2>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a20      	ldr	r2, [pc, #128]	; (80057f0 <HAL_DMA_IRQHandler+0x418>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d022      	beq.n	80057ba <HAL_DMA_IRQHandler+0x3e2>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a1e      	ldr	r2, [pc, #120]	; (80057f4 <HAL_DMA_IRQHandler+0x41c>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d01d      	beq.n	80057ba <HAL_DMA_IRQHandler+0x3e2>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a1d      	ldr	r2, [pc, #116]	; (80057f8 <HAL_DMA_IRQHandler+0x420>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d018      	beq.n	80057ba <HAL_DMA_IRQHandler+0x3e2>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a1b      	ldr	r2, [pc, #108]	; (80057fc <HAL_DMA_IRQHandler+0x424>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d013      	beq.n	80057ba <HAL_DMA_IRQHandler+0x3e2>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a1a      	ldr	r2, [pc, #104]	; (8005800 <HAL_DMA_IRQHandler+0x428>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d00e      	beq.n	80057ba <HAL_DMA_IRQHandler+0x3e2>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a18      	ldr	r2, [pc, #96]	; (8005804 <HAL_DMA_IRQHandler+0x42c>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d009      	beq.n	80057ba <HAL_DMA_IRQHandler+0x3e2>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a17      	ldr	r2, [pc, #92]	; (8005808 <HAL_DMA_IRQHandler+0x430>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d004      	beq.n	80057ba <HAL_DMA_IRQHandler+0x3e2>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a15      	ldr	r2, [pc, #84]	; (800580c <HAL_DMA_IRQHandler+0x434>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d12a      	bne.n	8005810 <HAL_DMA_IRQHandler+0x438>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0302 	and.w	r3, r3, #2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	bf14      	ite	ne
 80057c8:	2301      	movne	r3, #1
 80057ca:	2300      	moveq	r3, #0
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	e023      	b.n	8005818 <HAL_DMA_IRQHandler+0x440>
 80057d0:	40020010 	.word	0x40020010
 80057d4:	40020028 	.word	0x40020028
 80057d8:	40020040 	.word	0x40020040
 80057dc:	40020058 	.word	0x40020058
 80057e0:	40020070 	.word	0x40020070
 80057e4:	40020088 	.word	0x40020088
 80057e8:	400200a0 	.word	0x400200a0
 80057ec:	400200b8 	.word	0x400200b8
 80057f0:	40020410 	.word	0x40020410
 80057f4:	40020428 	.word	0x40020428
 80057f8:	40020440 	.word	0x40020440
 80057fc:	40020458 	.word	0x40020458
 8005800:	40020470 	.word	0x40020470
 8005804:	40020488 	.word	0x40020488
 8005808:	400204a0 	.word	0x400204a0
 800580c:	400204b8 	.word	0x400204b8
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2300      	movs	r3, #0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00d      	beq.n	8005838 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005820:	f003 031f 	and.w	r3, r3, #31
 8005824:	2204      	movs	r2, #4
 8005826:	409a      	lsls	r2, r3
 8005828:	6a3b      	ldr	r3, [r7, #32]
 800582a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005830:	f043 0204 	orr.w	r2, r3, #4
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800583c:	f003 031f 	and.w	r3, r3, #31
 8005840:	2210      	movs	r2, #16
 8005842:	409a      	lsls	r2, r3
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	4013      	ands	r3, r2
 8005848:	2b00      	cmp	r3, #0
 800584a:	f000 80a6 	beq.w	800599a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a85      	ldr	r2, [pc, #532]	; (8005a68 <HAL_DMA_IRQHandler+0x690>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d04a      	beq.n	80058ee <HAL_DMA_IRQHandler+0x516>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a83      	ldr	r2, [pc, #524]	; (8005a6c <HAL_DMA_IRQHandler+0x694>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d045      	beq.n	80058ee <HAL_DMA_IRQHandler+0x516>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a82      	ldr	r2, [pc, #520]	; (8005a70 <HAL_DMA_IRQHandler+0x698>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d040      	beq.n	80058ee <HAL_DMA_IRQHandler+0x516>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a80      	ldr	r2, [pc, #512]	; (8005a74 <HAL_DMA_IRQHandler+0x69c>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d03b      	beq.n	80058ee <HAL_DMA_IRQHandler+0x516>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a7f      	ldr	r2, [pc, #508]	; (8005a78 <HAL_DMA_IRQHandler+0x6a0>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d036      	beq.n	80058ee <HAL_DMA_IRQHandler+0x516>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a7d      	ldr	r2, [pc, #500]	; (8005a7c <HAL_DMA_IRQHandler+0x6a4>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d031      	beq.n	80058ee <HAL_DMA_IRQHandler+0x516>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a7c      	ldr	r2, [pc, #496]	; (8005a80 <HAL_DMA_IRQHandler+0x6a8>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d02c      	beq.n	80058ee <HAL_DMA_IRQHandler+0x516>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a7a      	ldr	r2, [pc, #488]	; (8005a84 <HAL_DMA_IRQHandler+0x6ac>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d027      	beq.n	80058ee <HAL_DMA_IRQHandler+0x516>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a79      	ldr	r2, [pc, #484]	; (8005a88 <HAL_DMA_IRQHandler+0x6b0>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d022      	beq.n	80058ee <HAL_DMA_IRQHandler+0x516>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a77      	ldr	r2, [pc, #476]	; (8005a8c <HAL_DMA_IRQHandler+0x6b4>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d01d      	beq.n	80058ee <HAL_DMA_IRQHandler+0x516>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a76      	ldr	r2, [pc, #472]	; (8005a90 <HAL_DMA_IRQHandler+0x6b8>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d018      	beq.n	80058ee <HAL_DMA_IRQHandler+0x516>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a74      	ldr	r2, [pc, #464]	; (8005a94 <HAL_DMA_IRQHandler+0x6bc>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d013      	beq.n	80058ee <HAL_DMA_IRQHandler+0x516>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a73      	ldr	r2, [pc, #460]	; (8005a98 <HAL_DMA_IRQHandler+0x6c0>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d00e      	beq.n	80058ee <HAL_DMA_IRQHandler+0x516>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a71      	ldr	r2, [pc, #452]	; (8005a9c <HAL_DMA_IRQHandler+0x6c4>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d009      	beq.n	80058ee <HAL_DMA_IRQHandler+0x516>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a70      	ldr	r2, [pc, #448]	; (8005aa0 <HAL_DMA_IRQHandler+0x6c8>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d004      	beq.n	80058ee <HAL_DMA_IRQHandler+0x516>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a6e      	ldr	r2, [pc, #440]	; (8005aa4 <HAL_DMA_IRQHandler+0x6cc>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d10a      	bne.n	8005904 <HAL_DMA_IRQHandler+0x52c>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0308 	and.w	r3, r3, #8
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	bf14      	ite	ne
 80058fc:	2301      	movne	r3, #1
 80058fe:	2300      	moveq	r3, #0
 8005900:	b2db      	uxtb	r3, r3
 8005902:	e009      	b.n	8005918 <HAL_DMA_IRQHandler+0x540>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0304 	and.w	r3, r3, #4
 800590e:	2b00      	cmp	r3, #0
 8005910:	bf14      	ite	ne
 8005912:	2301      	movne	r3, #1
 8005914:	2300      	moveq	r3, #0
 8005916:	b2db      	uxtb	r3, r3
 8005918:	2b00      	cmp	r3, #0
 800591a:	d03e      	beq.n	800599a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005920:	f003 031f 	and.w	r3, r3, #31
 8005924:	2210      	movs	r2, #16
 8005926:	409a      	lsls	r2, r3
 8005928:	6a3b      	ldr	r3, [r7, #32]
 800592a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d018      	beq.n	800596c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d108      	bne.n	800595a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594c:	2b00      	cmp	r3, #0
 800594e:	d024      	beq.n	800599a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	4798      	blx	r3
 8005958:	e01f      	b.n	800599a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800595e:	2b00      	cmp	r3, #0
 8005960:	d01b      	beq.n	800599a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	4798      	blx	r3
 800596a:	e016      	b.n	800599a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005976:	2b00      	cmp	r3, #0
 8005978:	d107      	bne.n	800598a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 0208 	bic.w	r2, r2, #8
 8005988:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800599e:	f003 031f 	and.w	r3, r3, #31
 80059a2:	2220      	movs	r2, #32
 80059a4:	409a      	lsls	r2, r3
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	4013      	ands	r3, r2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f000 8110 	beq.w	8005bd0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a2c      	ldr	r2, [pc, #176]	; (8005a68 <HAL_DMA_IRQHandler+0x690>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d04a      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x678>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a2b      	ldr	r2, [pc, #172]	; (8005a6c <HAL_DMA_IRQHandler+0x694>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d045      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x678>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a29      	ldr	r2, [pc, #164]	; (8005a70 <HAL_DMA_IRQHandler+0x698>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d040      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x678>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a28      	ldr	r2, [pc, #160]	; (8005a74 <HAL_DMA_IRQHandler+0x69c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d03b      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x678>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a26      	ldr	r2, [pc, #152]	; (8005a78 <HAL_DMA_IRQHandler+0x6a0>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d036      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x678>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a25      	ldr	r2, [pc, #148]	; (8005a7c <HAL_DMA_IRQHandler+0x6a4>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d031      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x678>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a23      	ldr	r2, [pc, #140]	; (8005a80 <HAL_DMA_IRQHandler+0x6a8>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d02c      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x678>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a22      	ldr	r2, [pc, #136]	; (8005a84 <HAL_DMA_IRQHandler+0x6ac>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d027      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x678>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a20      	ldr	r2, [pc, #128]	; (8005a88 <HAL_DMA_IRQHandler+0x6b0>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d022      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x678>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a1f      	ldr	r2, [pc, #124]	; (8005a8c <HAL_DMA_IRQHandler+0x6b4>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d01d      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x678>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a1d      	ldr	r2, [pc, #116]	; (8005a90 <HAL_DMA_IRQHandler+0x6b8>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d018      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x678>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a1c      	ldr	r2, [pc, #112]	; (8005a94 <HAL_DMA_IRQHandler+0x6bc>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d013      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x678>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a1a      	ldr	r2, [pc, #104]	; (8005a98 <HAL_DMA_IRQHandler+0x6c0>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d00e      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x678>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a19      	ldr	r2, [pc, #100]	; (8005a9c <HAL_DMA_IRQHandler+0x6c4>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d009      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x678>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a17      	ldr	r2, [pc, #92]	; (8005aa0 <HAL_DMA_IRQHandler+0x6c8>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d004      	beq.n	8005a50 <HAL_DMA_IRQHandler+0x678>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a16      	ldr	r2, [pc, #88]	; (8005aa4 <HAL_DMA_IRQHandler+0x6cc>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d12b      	bne.n	8005aa8 <HAL_DMA_IRQHandler+0x6d0>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0310 	and.w	r3, r3, #16
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	bf14      	ite	ne
 8005a5e:	2301      	movne	r3, #1
 8005a60:	2300      	moveq	r3, #0
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	e02a      	b.n	8005abc <HAL_DMA_IRQHandler+0x6e4>
 8005a66:	bf00      	nop
 8005a68:	40020010 	.word	0x40020010
 8005a6c:	40020028 	.word	0x40020028
 8005a70:	40020040 	.word	0x40020040
 8005a74:	40020058 	.word	0x40020058
 8005a78:	40020070 	.word	0x40020070
 8005a7c:	40020088 	.word	0x40020088
 8005a80:	400200a0 	.word	0x400200a0
 8005a84:	400200b8 	.word	0x400200b8
 8005a88:	40020410 	.word	0x40020410
 8005a8c:	40020428 	.word	0x40020428
 8005a90:	40020440 	.word	0x40020440
 8005a94:	40020458 	.word	0x40020458
 8005a98:	40020470 	.word	0x40020470
 8005a9c:	40020488 	.word	0x40020488
 8005aa0:	400204a0 	.word	0x400204a0
 8005aa4:	400204b8 	.word	0x400204b8
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0302 	and.w	r3, r3, #2
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	bf14      	ite	ne
 8005ab6:	2301      	movne	r3, #1
 8005ab8:	2300      	moveq	r3, #0
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f000 8087 	beq.w	8005bd0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ac6:	f003 031f 	and.w	r3, r3, #31
 8005aca:	2220      	movs	r2, #32
 8005acc:	409a      	lsls	r2, r3
 8005ace:	6a3b      	ldr	r3, [r7, #32]
 8005ad0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	d139      	bne.n	8005b52 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f022 0216 	bic.w	r2, r2, #22
 8005aec:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	695a      	ldr	r2, [r3, #20]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005afc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d103      	bne.n	8005b0e <HAL_DMA_IRQHandler+0x736>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d007      	beq.n	8005b1e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f022 0208 	bic.w	r2, r2, #8
 8005b1c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b22:	f003 031f 	and.w	r3, r3, #31
 8005b26:	223f      	movs	r2, #63	; 0x3f
 8005b28:	409a      	lsls	r2, r3
 8005b2a:	6a3b      	ldr	r3, [r7, #32]
 8005b2c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 834a 	beq.w	80061dc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	4798      	blx	r3
          }
          return;
 8005b50:	e344      	b.n	80061dc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d018      	beq.n	8005b92 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d108      	bne.n	8005b80 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d02c      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	4798      	blx	r3
 8005b7e:	e027      	b.n	8005bd0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d023      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	4798      	blx	r3
 8005b90:	e01e      	b.n	8005bd0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10f      	bne.n	8005bc0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f022 0210 	bic.w	r2, r2, #16
 8005bae:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d003      	beq.n	8005bd0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f000 8306 	beq.w	80061e6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f000 8088 	beq.w	8005cf8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2204      	movs	r2, #4
 8005bec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a7a      	ldr	r2, [pc, #488]	; (8005de0 <HAL_DMA_IRQHandler+0xa08>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d04a      	beq.n	8005c90 <HAL_DMA_IRQHandler+0x8b8>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a79      	ldr	r2, [pc, #484]	; (8005de4 <HAL_DMA_IRQHandler+0xa0c>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d045      	beq.n	8005c90 <HAL_DMA_IRQHandler+0x8b8>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a77      	ldr	r2, [pc, #476]	; (8005de8 <HAL_DMA_IRQHandler+0xa10>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d040      	beq.n	8005c90 <HAL_DMA_IRQHandler+0x8b8>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a76      	ldr	r2, [pc, #472]	; (8005dec <HAL_DMA_IRQHandler+0xa14>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d03b      	beq.n	8005c90 <HAL_DMA_IRQHandler+0x8b8>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a74      	ldr	r2, [pc, #464]	; (8005df0 <HAL_DMA_IRQHandler+0xa18>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d036      	beq.n	8005c90 <HAL_DMA_IRQHandler+0x8b8>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a73      	ldr	r2, [pc, #460]	; (8005df4 <HAL_DMA_IRQHandler+0xa1c>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d031      	beq.n	8005c90 <HAL_DMA_IRQHandler+0x8b8>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a71      	ldr	r2, [pc, #452]	; (8005df8 <HAL_DMA_IRQHandler+0xa20>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d02c      	beq.n	8005c90 <HAL_DMA_IRQHandler+0x8b8>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a70      	ldr	r2, [pc, #448]	; (8005dfc <HAL_DMA_IRQHandler+0xa24>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d027      	beq.n	8005c90 <HAL_DMA_IRQHandler+0x8b8>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a6e      	ldr	r2, [pc, #440]	; (8005e00 <HAL_DMA_IRQHandler+0xa28>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d022      	beq.n	8005c90 <HAL_DMA_IRQHandler+0x8b8>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a6d      	ldr	r2, [pc, #436]	; (8005e04 <HAL_DMA_IRQHandler+0xa2c>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d01d      	beq.n	8005c90 <HAL_DMA_IRQHandler+0x8b8>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a6b      	ldr	r2, [pc, #428]	; (8005e08 <HAL_DMA_IRQHandler+0xa30>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d018      	beq.n	8005c90 <HAL_DMA_IRQHandler+0x8b8>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a6a      	ldr	r2, [pc, #424]	; (8005e0c <HAL_DMA_IRQHandler+0xa34>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d013      	beq.n	8005c90 <HAL_DMA_IRQHandler+0x8b8>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a68      	ldr	r2, [pc, #416]	; (8005e10 <HAL_DMA_IRQHandler+0xa38>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d00e      	beq.n	8005c90 <HAL_DMA_IRQHandler+0x8b8>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a67      	ldr	r2, [pc, #412]	; (8005e14 <HAL_DMA_IRQHandler+0xa3c>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d009      	beq.n	8005c90 <HAL_DMA_IRQHandler+0x8b8>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a65      	ldr	r2, [pc, #404]	; (8005e18 <HAL_DMA_IRQHandler+0xa40>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d004      	beq.n	8005c90 <HAL_DMA_IRQHandler+0x8b8>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a64      	ldr	r2, [pc, #400]	; (8005e1c <HAL_DMA_IRQHandler+0xa44>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d108      	bne.n	8005ca2 <HAL_DMA_IRQHandler+0x8ca>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f022 0201 	bic.w	r2, r2, #1
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	e007      	b.n	8005cb2 <HAL_DMA_IRQHandler+0x8da>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f022 0201 	bic.w	r2, r2, #1
 8005cb0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	60fb      	str	r3, [r7, #12]
 8005cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d307      	bcc.n	8005cce <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1f2      	bne.n	8005cb2 <HAL_DMA_IRQHandler+0x8da>
 8005ccc:	e000      	b.n	8005cd0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005cce:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d004      	beq.n	8005cf0 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2203      	movs	r2, #3
 8005cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005cee:	e003      	b.n	8005cf8 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f000 8272 	beq.w	80061e6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	4798      	blx	r3
 8005d0a:	e26c      	b.n	80061e6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a43      	ldr	r2, [pc, #268]	; (8005e20 <HAL_DMA_IRQHandler+0xa48>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d022      	beq.n	8005d5c <HAL_DMA_IRQHandler+0x984>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a42      	ldr	r2, [pc, #264]	; (8005e24 <HAL_DMA_IRQHandler+0xa4c>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d01d      	beq.n	8005d5c <HAL_DMA_IRQHandler+0x984>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a40      	ldr	r2, [pc, #256]	; (8005e28 <HAL_DMA_IRQHandler+0xa50>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d018      	beq.n	8005d5c <HAL_DMA_IRQHandler+0x984>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a3f      	ldr	r2, [pc, #252]	; (8005e2c <HAL_DMA_IRQHandler+0xa54>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d013      	beq.n	8005d5c <HAL_DMA_IRQHandler+0x984>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a3d      	ldr	r2, [pc, #244]	; (8005e30 <HAL_DMA_IRQHandler+0xa58>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d00e      	beq.n	8005d5c <HAL_DMA_IRQHandler+0x984>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a3c      	ldr	r2, [pc, #240]	; (8005e34 <HAL_DMA_IRQHandler+0xa5c>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d009      	beq.n	8005d5c <HAL_DMA_IRQHandler+0x984>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a3a      	ldr	r2, [pc, #232]	; (8005e38 <HAL_DMA_IRQHandler+0xa60>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d004      	beq.n	8005d5c <HAL_DMA_IRQHandler+0x984>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a39      	ldr	r2, [pc, #228]	; (8005e3c <HAL_DMA_IRQHandler+0xa64>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d101      	bne.n	8005d60 <HAL_DMA_IRQHandler+0x988>
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e000      	b.n	8005d62 <HAL_DMA_IRQHandler+0x98a>
 8005d60:	2300      	movs	r3, #0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f000 823f 	beq.w	80061e6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d74:	f003 031f 	and.w	r3, r3, #31
 8005d78:	2204      	movs	r2, #4
 8005d7a:	409a      	lsls	r2, r3
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	4013      	ands	r3, r2
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f000 80cd 	beq.w	8005f20 <HAL_DMA_IRQHandler+0xb48>
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	f003 0304 	and.w	r3, r3, #4
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f000 80c7 	beq.w	8005f20 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d96:	f003 031f 	and.w	r3, r3, #31
 8005d9a:	2204      	movs	r2, #4
 8005d9c:	409a      	lsls	r2, r3
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d049      	beq.n	8005e40 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d109      	bne.n	8005dca <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f000 8210 	beq.w	80061e0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005dc8:	e20a      	b.n	80061e0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f000 8206 	beq.w	80061e0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ddc:	e200      	b.n	80061e0 <HAL_DMA_IRQHandler+0xe08>
 8005dde:	bf00      	nop
 8005de0:	40020010 	.word	0x40020010
 8005de4:	40020028 	.word	0x40020028
 8005de8:	40020040 	.word	0x40020040
 8005dec:	40020058 	.word	0x40020058
 8005df0:	40020070 	.word	0x40020070
 8005df4:	40020088 	.word	0x40020088
 8005df8:	400200a0 	.word	0x400200a0
 8005dfc:	400200b8 	.word	0x400200b8
 8005e00:	40020410 	.word	0x40020410
 8005e04:	40020428 	.word	0x40020428
 8005e08:	40020440 	.word	0x40020440
 8005e0c:	40020458 	.word	0x40020458
 8005e10:	40020470 	.word	0x40020470
 8005e14:	40020488 	.word	0x40020488
 8005e18:	400204a0 	.word	0x400204a0
 8005e1c:	400204b8 	.word	0x400204b8
 8005e20:	58025408 	.word	0x58025408
 8005e24:	5802541c 	.word	0x5802541c
 8005e28:	58025430 	.word	0x58025430
 8005e2c:	58025444 	.word	0x58025444
 8005e30:	58025458 	.word	0x58025458
 8005e34:	5802546c 	.word	0x5802546c
 8005e38:	58025480 	.word	0x58025480
 8005e3c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	f003 0320 	and.w	r3, r3, #32
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d160      	bne.n	8005f0c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a8c      	ldr	r2, [pc, #560]	; (8006080 <HAL_DMA_IRQHandler+0xca8>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d04a      	beq.n	8005eea <HAL_DMA_IRQHandler+0xb12>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a8a      	ldr	r2, [pc, #552]	; (8006084 <HAL_DMA_IRQHandler+0xcac>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d045      	beq.n	8005eea <HAL_DMA_IRQHandler+0xb12>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a89      	ldr	r2, [pc, #548]	; (8006088 <HAL_DMA_IRQHandler+0xcb0>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d040      	beq.n	8005eea <HAL_DMA_IRQHandler+0xb12>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a87      	ldr	r2, [pc, #540]	; (800608c <HAL_DMA_IRQHandler+0xcb4>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d03b      	beq.n	8005eea <HAL_DMA_IRQHandler+0xb12>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a86      	ldr	r2, [pc, #536]	; (8006090 <HAL_DMA_IRQHandler+0xcb8>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d036      	beq.n	8005eea <HAL_DMA_IRQHandler+0xb12>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a84      	ldr	r2, [pc, #528]	; (8006094 <HAL_DMA_IRQHandler+0xcbc>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d031      	beq.n	8005eea <HAL_DMA_IRQHandler+0xb12>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a83      	ldr	r2, [pc, #524]	; (8006098 <HAL_DMA_IRQHandler+0xcc0>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d02c      	beq.n	8005eea <HAL_DMA_IRQHandler+0xb12>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a81      	ldr	r2, [pc, #516]	; (800609c <HAL_DMA_IRQHandler+0xcc4>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d027      	beq.n	8005eea <HAL_DMA_IRQHandler+0xb12>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a80      	ldr	r2, [pc, #512]	; (80060a0 <HAL_DMA_IRQHandler+0xcc8>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d022      	beq.n	8005eea <HAL_DMA_IRQHandler+0xb12>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a7e      	ldr	r2, [pc, #504]	; (80060a4 <HAL_DMA_IRQHandler+0xccc>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d01d      	beq.n	8005eea <HAL_DMA_IRQHandler+0xb12>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a7d      	ldr	r2, [pc, #500]	; (80060a8 <HAL_DMA_IRQHandler+0xcd0>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d018      	beq.n	8005eea <HAL_DMA_IRQHandler+0xb12>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a7b      	ldr	r2, [pc, #492]	; (80060ac <HAL_DMA_IRQHandler+0xcd4>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d013      	beq.n	8005eea <HAL_DMA_IRQHandler+0xb12>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a7a      	ldr	r2, [pc, #488]	; (80060b0 <HAL_DMA_IRQHandler+0xcd8>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d00e      	beq.n	8005eea <HAL_DMA_IRQHandler+0xb12>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a78      	ldr	r2, [pc, #480]	; (80060b4 <HAL_DMA_IRQHandler+0xcdc>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d009      	beq.n	8005eea <HAL_DMA_IRQHandler+0xb12>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a77      	ldr	r2, [pc, #476]	; (80060b8 <HAL_DMA_IRQHandler+0xce0>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d004      	beq.n	8005eea <HAL_DMA_IRQHandler+0xb12>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a75      	ldr	r2, [pc, #468]	; (80060bc <HAL_DMA_IRQHandler+0xce4>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d108      	bne.n	8005efc <HAL_DMA_IRQHandler+0xb24>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f022 0208 	bic.w	r2, r2, #8
 8005ef8:	601a      	str	r2, [r3, #0]
 8005efa:	e007      	b.n	8005f0c <HAL_DMA_IRQHandler+0xb34>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f022 0204 	bic.w	r2, r2, #4
 8005f0a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f000 8165 	beq.w	80061e0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f1e:	e15f      	b.n	80061e0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f24:	f003 031f 	and.w	r3, r3, #31
 8005f28:	2202      	movs	r2, #2
 8005f2a:	409a      	lsls	r2, r3
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	4013      	ands	r3, r2
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f000 80c5 	beq.w	80060c0 <HAL_DMA_IRQHandler+0xce8>
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	f003 0302 	and.w	r3, r3, #2
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f000 80bf 	beq.w	80060c0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f46:	f003 031f 	and.w	r3, r3, #31
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	409a      	lsls	r2, r3
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d018      	beq.n	8005f8e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d109      	bne.n	8005f7a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	f000 813a 	beq.w	80061e4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f78:	e134      	b.n	80061e4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f000 8130 	beq.w	80061e4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f8c:	e12a      	b.n	80061e4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	f003 0320 	and.w	r3, r3, #32
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d168      	bne.n	800606a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a38      	ldr	r2, [pc, #224]	; (8006080 <HAL_DMA_IRQHandler+0xca8>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d04a      	beq.n	8006038 <HAL_DMA_IRQHandler+0xc60>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a37      	ldr	r2, [pc, #220]	; (8006084 <HAL_DMA_IRQHandler+0xcac>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d045      	beq.n	8006038 <HAL_DMA_IRQHandler+0xc60>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a35      	ldr	r2, [pc, #212]	; (8006088 <HAL_DMA_IRQHandler+0xcb0>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d040      	beq.n	8006038 <HAL_DMA_IRQHandler+0xc60>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a34      	ldr	r2, [pc, #208]	; (800608c <HAL_DMA_IRQHandler+0xcb4>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d03b      	beq.n	8006038 <HAL_DMA_IRQHandler+0xc60>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a32      	ldr	r2, [pc, #200]	; (8006090 <HAL_DMA_IRQHandler+0xcb8>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d036      	beq.n	8006038 <HAL_DMA_IRQHandler+0xc60>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a31      	ldr	r2, [pc, #196]	; (8006094 <HAL_DMA_IRQHandler+0xcbc>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d031      	beq.n	8006038 <HAL_DMA_IRQHandler+0xc60>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a2f      	ldr	r2, [pc, #188]	; (8006098 <HAL_DMA_IRQHandler+0xcc0>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d02c      	beq.n	8006038 <HAL_DMA_IRQHandler+0xc60>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a2e      	ldr	r2, [pc, #184]	; (800609c <HAL_DMA_IRQHandler+0xcc4>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d027      	beq.n	8006038 <HAL_DMA_IRQHandler+0xc60>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a2c      	ldr	r2, [pc, #176]	; (80060a0 <HAL_DMA_IRQHandler+0xcc8>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d022      	beq.n	8006038 <HAL_DMA_IRQHandler+0xc60>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a2b      	ldr	r2, [pc, #172]	; (80060a4 <HAL_DMA_IRQHandler+0xccc>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d01d      	beq.n	8006038 <HAL_DMA_IRQHandler+0xc60>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a29      	ldr	r2, [pc, #164]	; (80060a8 <HAL_DMA_IRQHandler+0xcd0>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d018      	beq.n	8006038 <HAL_DMA_IRQHandler+0xc60>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a28      	ldr	r2, [pc, #160]	; (80060ac <HAL_DMA_IRQHandler+0xcd4>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d013      	beq.n	8006038 <HAL_DMA_IRQHandler+0xc60>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a26      	ldr	r2, [pc, #152]	; (80060b0 <HAL_DMA_IRQHandler+0xcd8>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d00e      	beq.n	8006038 <HAL_DMA_IRQHandler+0xc60>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a25      	ldr	r2, [pc, #148]	; (80060b4 <HAL_DMA_IRQHandler+0xcdc>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d009      	beq.n	8006038 <HAL_DMA_IRQHandler+0xc60>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a23      	ldr	r2, [pc, #140]	; (80060b8 <HAL_DMA_IRQHandler+0xce0>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d004      	beq.n	8006038 <HAL_DMA_IRQHandler+0xc60>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a22      	ldr	r2, [pc, #136]	; (80060bc <HAL_DMA_IRQHandler+0xce4>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d108      	bne.n	800604a <HAL_DMA_IRQHandler+0xc72>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f022 0214 	bic.w	r2, r2, #20
 8006046:	601a      	str	r2, [r3, #0]
 8006048:	e007      	b.n	800605a <HAL_DMA_IRQHandler+0xc82>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f022 020a 	bic.w	r2, r2, #10
 8006058:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800606e:	2b00      	cmp	r3, #0
 8006070:	f000 80b8 	beq.w	80061e4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800607c:	e0b2      	b.n	80061e4 <HAL_DMA_IRQHandler+0xe0c>
 800607e:	bf00      	nop
 8006080:	40020010 	.word	0x40020010
 8006084:	40020028 	.word	0x40020028
 8006088:	40020040 	.word	0x40020040
 800608c:	40020058 	.word	0x40020058
 8006090:	40020070 	.word	0x40020070
 8006094:	40020088 	.word	0x40020088
 8006098:	400200a0 	.word	0x400200a0
 800609c:	400200b8 	.word	0x400200b8
 80060a0:	40020410 	.word	0x40020410
 80060a4:	40020428 	.word	0x40020428
 80060a8:	40020440 	.word	0x40020440
 80060ac:	40020458 	.word	0x40020458
 80060b0:	40020470 	.word	0x40020470
 80060b4:	40020488 	.word	0x40020488
 80060b8:	400204a0 	.word	0x400204a0
 80060bc:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060c4:	f003 031f 	and.w	r3, r3, #31
 80060c8:	2208      	movs	r2, #8
 80060ca:	409a      	lsls	r2, r3
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	4013      	ands	r3, r2
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f000 8088 	beq.w	80061e6 <HAL_DMA_IRQHandler+0xe0e>
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	f003 0308 	and.w	r3, r3, #8
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f000 8082 	beq.w	80061e6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a41      	ldr	r2, [pc, #260]	; (80061ec <HAL_DMA_IRQHandler+0xe14>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d04a      	beq.n	8006182 <HAL_DMA_IRQHandler+0xdaa>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a3f      	ldr	r2, [pc, #252]	; (80061f0 <HAL_DMA_IRQHandler+0xe18>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d045      	beq.n	8006182 <HAL_DMA_IRQHandler+0xdaa>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a3e      	ldr	r2, [pc, #248]	; (80061f4 <HAL_DMA_IRQHandler+0xe1c>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d040      	beq.n	8006182 <HAL_DMA_IRQHandler+0xdaa>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a3c      	ldr	r2, [pc, #240]	; (80061f8 <HAL_DMA_IRQHandler+0xe20>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d03b      	beq.n	8006182 <HAL_DMA_IRQHandler+0xdaa>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a3b      	ldr	r2, [pc, #236]	; (80061fc <HAL_DMA_IRQHandler+0xe24>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d036      	beq.n	8006182 <HAL_DMA_IRQHandler+0xdaa>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a39      	ldr	r2, [pc, #228]	; (8006200 <HAL_DMA_IRQHandler+0xe28>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d031      	beq.n	8006182 <HAL_DMA_IRQHandler+0xdaa>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a38      	ldr	r2, [pc, #224]	; (8006204 <HAL_DMA_IRQHandler+0xe2c>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d02c      	beq.n	8006182 <HAL_DMA_IRQHandler+0xdaa>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a36      	ldr	r2, [pc, #216]	; (8006208 <HAL_DMA_IRQHandler+0xe30>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d027      	beq.n	8006182 <HAL_DMA_IRQHandler+0xdaa>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a35      	ldr	r2, [pc, #212]	; (800620c <HAL_DMA_IRQHandler+0xe34>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d022      	beq.n	8006182 <HAL_DMA_IRQHandler+0xdaa>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a33      	ldr	r2, [pc, #204]	; (8006210 <HAL_DMA_IRQHandler+0xe38>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d01d      	beq.n	8006182 <HAL_DMA_IRQHandler+0xdaa>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a32      	ldr	r2, [pc, #200]	; (8006214 <HAL_DMA_IRQHandler+0xe3c>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d018      	beq.n	8006182 <HAL_DMA_IRQHandler+0xdaa>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a30      	ldr	r2, [pc, #192]	; (8006218 <HAL_DMA_IRQHandler+0xe40>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d013      	beq.n	8006182 <HAL_DMA_IRQHandler+0xdaa>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a2f      	ldr	r2, [pc, #188]	; (800621c <HAL_DMA_IRQHandler+0xe44>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d00e      	beq.n	8006182 <HAL_DMA_IRQHandler+0xdaa>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a2d      	ldr	r2, [pc, #180]	; (8006220 <HAL_DMA_IRQHandler+0xe48>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d009      	beq.n	8006182 <HAL_DMA_IRQHandler+0xdaa>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a2c      	ldr	r2, [pc, #176]	; (8006224 <HAL_DMA_IRQHandler+0xe4c>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d004      	beq.n	8006182 <HAL_DMA_IRQHandler+0xdaa>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a2a      	ldr	r2, [pc, #168]	; (8006228 <HAL_DMA_IRQHandler+0xe50>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d108      	bne.n	8006194 <HAL_DMA_IRQHandler+0xdbc>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f022 021c 	bic.w	r2, r2, #28
 8006190:	601a      	str	r2, [r3, #0]
 8006192:	e007      	b.n	80061a4 <HAL_DMA_IRQHandler+0xdcc>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f022 020e 	bic.w	r2, r2, #14
 80061a2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061a8:	f003 031f 	and.w	r3, r3, #31
 80061ac:	2201      	movs	r2, #1
 80061ae:	409a      	lsls	r2, r3
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d009      	beq.n	80061e6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	4798      	blx	r3
 80061da:	e004      	b.n	80061e6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80061dc:	bf00      	nop
 80061de:	e002      	b.n	80061e6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061e0:	bf00      	nop
 80061e2:	e000      	b.n	80061e6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061e4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80061e6:	3728      	adds	r7, #40	; 0x28
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	40020010 	.word	0x40020010
 80061f0:	40020028 	.word	0x40020028
 80061f4:	40020040 	.word	0x40020040
 80061f8:	40020058 	.word	0x40020058
 80061fc:	40020070 	.word	0x40020070
 8006200:	40020088 	.word	0x40020088
 8006204:	400200a0 	.word	0x400200a0
 8006208:	400200b8 	.word	0x400200b8
 800620c:	40020410 	.word	0x40020410
 8006210:	40020428 	.word	0x40020428
 8006214:	40020440 	.word	0x40020440
 8006218:	40020458 	.word	0x40020458
 800621c:	40020470 	.word	0x40020470
 8006220:	40020488 	.word	0x40020488
 8006224:	400204a0 	.word	0x400204a0
 8006228:	400204b8 	.word	0x400204b8

0800622c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
 8006238:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800623e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006244:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a84      	ldr	r2, [pc, #528]	; (800645c <DMA_SetConfig+0x230>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d072      	beq.n	8006336 <DMA_SetConfig+0x10a>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a82      	ldr	r2, [pc, #520]	; (8006460 <DMA_SetConfig+0x234>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d06d      	beq.n	8006336 <DMA_SetConfig+0x10a>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a81      	ldr	r2, [pc, #516]	; (8006464 <DMA_SetConfig+0x238>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d068      	beq.n	8006336 <DMA_SetConfig+0x10a>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a7f      	ldr	r2, [pc, #508]	; (8006468 <DMA_SetConfig+0x23c>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d063      	beq.n	8006336 <DMA_SetConfig+0x10a>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a7e      	ldr	r2, [pc, #504]	; (800646c <DMA_SetConfig+0x240>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d05e      	beq.n	8006336 <DMA_SetConfig+0x10a>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a7c      	ldr	r2, [pc, #496]	; (8006470 <DMA_SetConfig+0x244>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d059      	beq.n	8006336 <DMA_SetConfig+0x10a>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a7b      	ldr	r2, [pc, #492]	; (8006474 <DMA_SetConfig+0x248>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d054      	beq.n	8006336 <DMA_SetConfig+0x10a>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a79      	ldr	r2, [pc, #484]	; (8006478 <DMA_SetConfig+0x24c>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d04f      	beq.n	8006336 <DMA_SetConfig+0x10a>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a78      	ldr	r2, [pc, #480]	; (800647c <DMA_SetConfig+0x250>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d04a      	beq.n	8006336 <DMA_SetConfig+0x10a>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a76      	ldr	r2, [pc, #472]	; (8006480 <DMA_SetConfig+0x254>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d045      	beq.n	8006336 <DMA_SetConfig+0x10a>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a75      	ldr	r2, [pc, #468]	; (8006484 <DMA_SetConfig+0x258>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d040      	beq.n	8006336 <DMA_SetConfig+0x10a>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a73      	ldr	r2, [pc, #460]	; (8006488 <DMA_SetConfig+0x25c>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d03b      	beq.n	8006336 <DMA_SetConfig+0x10a>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a72      	ldr	r2, [pc, #456]	; (800648c <DMA_SetConfig+0x260>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d036      	beq.n	8006336 <DMA_SetConfig+0x10a>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a70      	ldr	r2, [pc, #448]	; (8006490 <DMA_SetConfig+0x264>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d031      	beq.n	8006336 <DMA_SetConfig+0x10a>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a6f      	ldr	r2, [pc, #444]	; (8006494 <DMA_SetConfig+0x268>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d02c      	beq.n	8006336 <DMA_SetConfig+0x10a>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a6d      	ldr	r2, [pc, #436]	; (8006498 <DMA_SetConfig+0x26c>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d027      	beq.n	8006336 <DMA_SetConfig+0x10a>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a6c      	ldr	r2, [pc, #432]	; (800649c <DMA_SetConfig+0x270>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d022      	beq.n	8006336 <DMA_SetConfig+0x10a>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a6a      	ldr	r2, [pc, #424]	; (80064a0 <DMA_SetConfig+0x274>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d01d      	beq.n	8006336 <DMA_SetConfig+0x10a>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a69      	ldr	r2, [pc, #420]	; (80064a4 <DMA_SetConfig+0x278>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d018      	beq.n	8006336 <DMA_SetConfig+0x10a>
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a67      	ldr	r2, [pc, #412]	; (80064a8 <DMA_SetConfig+0x27c>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d013      	beq.n	8006336 <DMA_SetConfig+0x10a>
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a66      	ldr	r2, [pc, #408]	; (80064ac <DMA_SetConfig+0x280>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d00e      	beq.n	8006336 <DMA_SetConfig+0x10a>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a64      	ldr	r2, [pc, #400]	; (80064b0 <DMA_SetConfig+0x284>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d009      	beq.n	8006336 <DMA_SetConfig+0x10a>
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a63      	ldr	r2, [pc, #396]	; (80064b4 <DMA_SetConfig+0x288>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d004      	beq.n	8006336 <DMA_SetConfig+0x10a>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a61      	ldr	r2, [pc, #388]	; (80064b8 <DMA_SetConfig+0x28c>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d101      	bne.n	800633a <DMA_SetConfig+0x10e>
 8006336:	2301      	movs	r3, #1
 8006338:	e000      	b.n	800633c <DMA_SetConfig+0x110>
 800633a:	2300      	movs	r3, #0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00d      	beq.n	800635c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006344:	68fa      	ldr	r2, [r7, #12]
 8006346:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006348:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800634e:	2b00      	cmp	r3, #0
 8006350:	d004      	beq.n	800635c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800635a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a3e      	ldr	r2, [pc, #248]	; (800645c <DMA_SetConfig+0x230>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d04a      	beq.n	80063fc <DMA_SetConfig+0x1d0>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a3d      	ldr	r2, [pc, #244]	; (8006460 <DMA_SetConfig+0x234>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d045      	beq.n	80063fc <DMA_SetConfig+0x1d0>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a3b      	ldr	r2, [pc, #236]	; (8006464 <DMA_SetConfig+0x238>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d040      	beq.n	80063fc <DMA_SetConfig+0x1d0>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a3a      	ldr	r2, [pc, #232]	; (8006468 <DMA_SetConfig+0x23c>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d03b      	beq.n	80063fc <DMA_SetConfig+0x1d0>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a38      	ldr	r2, [pc, #224]	; (800646c <DMA_SetConfig+0x240>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d036      	beq.n	80063fc <DMA_SetConfig+0x1d0>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a37      	ldr	r2, [pc, #220]	; (8006470 <DMA_SetConfig+0x244>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d031      	beq.n	80063fc <DMA_SetConfig+0x1d0>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a35      	ldr	r2, [pc, #212]	; (8006474 <DMA_SetConfig+0x248>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d02c      	beq.n	80063fc <DMA_SetConfig+0x1d0>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a34      	ldr	r2, [pc, #208]	; (8006478 <DMA_SetConfig+0x24c>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d027      	beq.n	80063fc <DMA_SetConfig+0x1d0>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a32      	ldr	r2, [pc, #200]	; (800647c <DMA_SetConfig+0x250>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d022      	beq.n	80063fc <DMA_SetConfig+0x1d0>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a31      	ldr	r2, [pc, #196]	; (8006480 <DMA_SetConfig+0x254>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d01d      	beq.n	80063fc <DMA_SetConfig+0x1d0>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a2f      	ldr	r2, [pc, #188]	; (8006484 <DMA_SetConfig+0x258>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d018      	beq.n	80063fc <DMA_SetConfig+0x1d0>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a2e      	ldr	r2, [pc, #184]	; (8006488 <DMA_SetConfig+0x25c>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d013      	beq.n	80063fc <DMA_SetConfig+0x1d0>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a2c      	ldr	r2, [pc, #176]	; (800648c <DMA_SetConfig+0x260>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d00e      	beq.n	80063fc <DMA_SetConfig+0x1d0>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a2b      	ldr	r2, [pc, #172]	; (8006490 <DMA_SetConfig+0x264>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d009      	beq.n	80063fc <DMA_SetConfig+0x1d0>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a29      	ldr	r2, [pc, #164]	; (8006494 <DMA_SetConfig+0x268>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d004      	beq.n	80063fc <DMA_SetConfig+0x1d0>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a28      	ldr	r2, [pc, #160]	; (8006498 <DMA_SetConfig+0x26c>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d101      	bne.n	8006400 <DMA_SetConfig+0x1d4>
 80063fc:	2301      	movs	r3, #1
 80063fe:	e000      	b.n	8006402 <DMA_SetConfig+0x1d6>
 8006400:	2300      	movs	r3, #0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d05a      	beq.n	80064bc <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800640a:	f003 031f 	and.w	r3, r3, #31
 800640e:	223f      	movs	r2, #63	; 0x3f
 8006410:	409a      	lsls	r2, r3
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006424:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	683a      	ldr	r2, [r7, #0]
 800642c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	2b40      	cmp	r3, #64	; 0x40
 8006434:	d108      	bne.n	8006448 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68ba      	ldr	r2, [r7, #8]
 8006444:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006446:	e087      	b.n	8006558 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	60da      	str	r2, [r3, #12]
}
 8006458:	e07e      	b.n	8006558 <DMA_SetConfig+0x32c>
 800645a:	bf00      	nop
 800645c:	40020010 	.word	0x40020010
 8006460:	40020028 	.word	0x40020028
 8006464:	40020040 	.word	0x40020040
 8006468:	40020058 	.word	0x40020058
 800646c:	40020070 	.word	0x40020070
 8006470:	40020088 	.word	0x40020088
 8006474:	400200a0 	.word	0x400200a0
 8006478:	400200b8 	.word	0x400200b8
 800647c:	40020410 	.word	0x40020410
 8006480:	40020428 	.word	0x40020428
 8006484:	40020440 	.word	0x40020440
 8006488:	40020458 	.word	0x40020458
 800648c:	40020470 	.word	0x40020470
 8006490:	40020488 	.word	0x40020488
 8006494:	400204a0 	.word	0x400204a0
 8006498:	400204b8 	.word	0x400204b8
 800649c:	58025408 	.word	0x58025408
 80064a0:	5802541c 	.word	0x5802541c
 80064a4:	58025430 	.word	0x58025430
 80064a8:	58025444 	.word	0x58025444
 80064ac:	58025458 	.word	0x58025458
 80064b0:	5802546c 	.word	0x5802546c
 80064b4:	58025480 	.word	0x58025480
 80064b8:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a28      	ldr	r2, [pc, #160]	; (8006564 <DMA_SetConfig+0x338>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d022      	beq.n	800650c <DMA_SetConfig+0x2e0>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a27      	ldr	r2, [pc, #156]	; (8006568 <DMA_SetConfig+0x33c>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d01d      	beq.n	800650c <DMA_SetConfig+0x2e0>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a25      	ldr	r2, [pc, #148]	; (800656c <DMA_SetConfig+0x340>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d018      	beq.n	800650c <DMA_SetConfig+0x2e0>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a24      	ldr	r2, [pc, #144]	; (8006570 <DMA_SetConfig+0x344>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d013      	beq.n	800650c <DMA_SetConfig+0x2e0>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a22      	ldr	r2, [pc, #136]	; (8006574 <DMA_SetConfig+0x348>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d00e      	beq.n	800650c <DMA_SetConfig+0x2e0>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a21      	ldr	r2, [pc, #132]	; (8006578 <DMA_SetConfig+0x34c>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d009      	beq.n	800650c <DMA_SetConfig+0x2e0>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a1f      	ldr	r2, [pc, #124]	; (800657c <DMA_SetConfig+0x350>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d004      	beq.n	800650c <DMA_SetConfig+0x2e0>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a1e      	ldr	r2, [pc, #120]	; (8006580 <DMA_SetConfig+0x354>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d101      	bne.n	8006510 <DMA_SetConfig+0x2e4>
 800650c:	2301      	movs	r3, #1
 800650e:	e000      	b.n	8006512 <DMA_SetConfig+0x2e6>
 8006510:	2300      	movs	r3, #0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d020      	beq.n	8006558 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800651a:	f003 031f 	and.w	r3, r3, #31
 800651e:	2201      	movs	r2, #1
 8006520:	409a      	lsls	r2, r3
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	683a      	ldr	r2, [r7, #0]
 800652c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	2b40      	cmp	r3, #64	; 0x40
 8006534:	d108      	bne.n	8006548 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	60da      	str	r2, [r3, #12]
}
 8006546:	e007      	b.n	8006558 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	60da      	str	r2, [r3, #12]
}
 8006558:	bf00      	nop
 800655a:	371c      	adds	r7, #28
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr
 8006564:	58025408 	.word	0x58025408
 8006568:	5802541c 	.word	0x5802541c
 800656c:	58025430 	.word	0x58025430
 8006570:	58025444 	.word	0x58025444
 8006574:	58025458 	.word	0x58025458
 8006578:	5802546c 	.word	0x5802546c
 800657c:	58025480 	.word	0x58025480
 8006580:	58025494 	.word	0x58025494

08006584 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a42      	ldr	r2, [pc, #264]	; (800669c <DMA_CalcBaseAndBitshift+0x118>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d04a      	beq.n	800662c <DMA_CalcBaseAndBitshift+0xa8>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a41      	ldr	r2, [pc, #260]	; (80066a0 <DMA_CalcBaseAndBitshift+0x11c>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d045      	beq.n	800662c <DMA_CalcBaseAndBitshift+0xa8>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a3f      	ldr	r2, [pc, #252]	; (80066a4 <DMA_CalcBaseAndBitshift+0x120>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d040      	beq.n	800662c <DMA_CalcBaseAndBitshift+0xa8>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a3e      	ldr	r2, [pc, #248]	; (80066a8 <DMA_CalcBaseAndBitshift+0x124>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d03b      	beq.n	800662c <DMA_CalcBaseAndBitshift+0xa8>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a3c      	ldr	r2, [pc, #240]	; (80066ac <DMA_CalcBaseAndBitshift+0x128>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d036      	beq.n	800662c <DMA_CalcBaseAndBitshift+0xa8>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a3b      	ldr	r2, [pc, #236]	; (80066b0 <DMA_CalcBaseAndBitshift+0x12c>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d031      	beq.n	800662c <DMA_CalcBaseAndBitshift+0xa8>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a39      	ldr	r2, [pc, #228]	; (80066b4 <DMA_CalcBaseAndBitshift+0x130>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d02c      	beq.n	800662c <DMA_CalcBaseAndBitshift+0xa8>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a38      	ldr	r2, [pc, #224]	; (80066b8 <DMA_CalcBaseAndBitshift+0x134>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d027      	beq.n	800662c <DMA_CalcBaseAndBitshift+0xa8>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a36      	ldr	r2, [pc, #216]	; (80066bc <DMA_CalcBaseAndBitshift+0x138>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d022      	beq.n	800662c <DMA_CalcBaseAndBitshift+0xa8>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a35      	ldr	r2, [pc, #212]	; (80066c0 <DMA_CalcBaseAndBitshift+0x13c>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d01d      	beq.n	800662c <DMA_CalcBaseAndBitshift+0xa8>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a33      	ldr	r2, [pc, #204]	; (80066c4 <DMA_CalcBaseAndBitshift+0x140>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d018      	beq.n	800662c <DMA_CalcBaseAndBitshift+0xa8>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a32      	ldr	r2, [pc, #200]	; (80066c8 <DMA_CalcBaseAndBitshift+0x144>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d013      	beq.n	800662c <DMA_CalcBaseAndBitshift+0xa8>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a30      	ldr	r2, [pc, #192]	; (80066cc <DMA_CalcBaseAndBitshift+0x148>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d00e      	beq.n	800662c <DMA_CalcBaseAndBitshift+0xa8>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a2f      	ldr	r2, [pc, #188]	; (80066d0 <DMA_CalcBaseAndBitshift+0x14c>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d009      	beq.n	800662c <DMA_CalcBaseAndBitshift+0xa8>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a2d      	ldr	r2, [pc, #180]	; (80066d4 <DMA_CalcBaseAndBitshift+0x150>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d004      	beq.n	800662c <DMA_CalcBaseAndBitshift+0xa8>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a2c      	ldr	r2, [pc, #176]	; (80066d8 <DMA_CalcBaseAndBitshift+0x154>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d101      	bne.n	8006630 <DMA_CalcBaseAndBitshift+0xac>
 800662c:	2301      	movs	r3, #1
 800662e:	e000      	b.n	8006632 <DMA_CalcBaseAndBitshift+0xae>
 8006630:	2300      	movs	r3, #0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d024      	beq.n	8006680 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	b2db      	uxtb	r3, r3
 800663c:	3b10      	subs	r3, #16
 800663e:	4a27      	ldr	r2, [pc, #156]	; (80066dc <DMA_CalcBaseAndBitshift+0x158>)
 8006640:	fba2 2303 	umull	r2, r3, r2, r3
 8006644:	091b      	lsrs	r3, r3, #4
 8006646:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f003 0307 	and.w	r3, r3, #7
 800664e:	4a24      	ldr	r2, [pc, #144]	; (80066e0 <DMA_CalcBaseAndBitshift+0x15c>)
 8006650:	5cd3      	ldrb	r3, [r2, r3]
 8006652:	461a      	mov	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2b03      	cmp	r3, #3
 800665c:	d908      	bls.n	8006670 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	461a      	mov	r2, r3
 8006664:	4b1f      	ldr	r3, [pc, #124]	; (80066e4 <DMA_CalcBaseAndBitshift+0x160>)
 8006666:	4013      	ands	r3, r2
 8006668:	1d1a      	adds	r2, r3, #4
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	659a      	str	r2, [r3, #88]	; 0x58
 800666e:	e00d      	b.n	800668c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	461a      	mov	r2, r3
 8006676:	4b1b      	ldr	r3, [pc, #108]	; (80066e4 <DMA_CalcBaseAndBitshift+0x160>)
 8006678:	4013      	ands	r3, r2
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	6593      	str	r3, [r2, #88]	; 0x58
 800667e:	e005      	b.n	800668c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006690:	4618      	mov	r0, r3
 8006692:	3714      	adds	r7, #20
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr
 800669c:	40020010 	.word	0x40020010
 80066a0:	40020028 	.word	0x40020028
 80066a4:	40020040 	.word	0x40020040
 80066a8:	40020058 	.word	0x40020058
 80066ac:	40020070 	.word	0x40020070
 80066b0:	40020088 	.word	0x40020088
 80066b4:	400200a0 	.word	0x400200a0
 80066b8:	400200b8 	.word	0x400200b8
 80066bc:	40020410 	.word	0x40020410
 80066c0:	40020428 	.word	0x40020428
 80066c4:	40020440 	.word	0x40020440
 80066c8:	40020458 	.word	0x40020458
 80066cc:	40020470 	.word	0x40020470
 80066d0:	40020488 	.word	0x40020488
 80066d4:	400204a0 	.word	0x400204a0
 80066d8:	400204b8 	.word	0x400204b8
 80066dc:	aaaaaaab 	.word	0xaaaaaaab
 80066e0:	0801af34 	.word	0x0801af34
 80066e4:	fffffc00 	.word	0xfffffc00

080066e8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066f0:	2300      	movs	r3, #0
 80066f2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	699b      	ldr	r3, [r3, #24]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d120      	bne.n	800673e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006700:	2b03      	cmp	r3, #3
 8006702:	d858      	bhi.n	80067b6 <DMA_CheckFifoParam+0xce>
 8006704:	a201      	add	r2, pc, #4	; (adr r2, 800670c <DMA_CheckFifoParam+0x24>)
 8006706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800670a:	bf00      	nop
 800670c:	0800671d 	.word	0x0800671d
 8006710:	0800672f 	.word	0x0800672f
 8006714:	0800671d 	.word	0x0800671d
 8006718:	080067b7 	.word	0x080067b7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006720:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d048      	beq.n	80067ba <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800672c:	e045      	b.n	80067ba <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006732:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006736:	d142      	bne.n	80067be <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800673c:	e03f      	b.n	80067be <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006746:	d123      	bne.n	8006790 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800674c:	2b03      	cmp	r3, #3
 800674e:	d838      	bhi.n	80067c2 <DMA_CheckFifoParam+0xda>
 8006750:	a201      	add	r2, pc, #4	; (adr r2, 8006758 <DMA_CheckFifoParam+0x70>)
 8006752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006756:	bf00      	nop
 8006758:	08006769 	.word	0x08006769
 800675c:	0800676f 	.word	0x0800676f
 8006760:	08006769 	.word	0x08006769
 8006764:	08006781 	.word	0x08006781
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	73fb      	strb	r3, [r7, #15]
        break;
 800676c:	e030      	b.n	80067d0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006772:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006776:	2b00      	cmp	r3, #0
 8006778:	d025      	beq.n	80067c6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800677e:	e022      	b.n	80067c6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006784:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006788:	d11f      	bne.n	80067ca <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800678e:	e01c      	b.n	80067ca <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006794:	2b02      	cmp	r3, #2
 8006796:	d902      	bls.n	800679e <DMA_CheckFifoParam+0xb6>
 8006798:	2b03      	cmp	r3, #3
 800679a:	d003      	beq.n	80067a4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800679c:	e018      	b.n	80067d0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	73fb      	strb	r3, [r7, #15]
        break;
 80067a2:	e015      	b.n	80067d0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00e      	beq.n	80067ce <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	73fb      	strb	r3, [r7, #15]
    break;
 80067b4:	e00b      	b.n	80067ce <DMA_CheckFifoParam+0xe6>
        break;
 80067b6:	bf00      	nop
 80067b8:	e00a      	b.n	80067d0 <DMA_CheckFifoParam+0xe8>
        break;
 80067ba:	bf00      	nop
 80067bc:	e008      	b.n	80067d0 <DMA_CheckFifoParam+0xe8>
        break;
 80067be:	bf00      	nop
 80067c0:	e006      	b.n	80067d0 <DMA_CheckFifoParam+0xe8>
        break;
 80067c2:	bf00      	nop
 80067c4:	e004      	b.n	80067d0 <DMA_CheckFifoParam+0xe8>
        break;
 80067c6:	bf00      	nop
 80067c8:	e002      	b.n	80067d0 <DMA_CheckFifoParam+0xe8>
        break;
 80067ca:	bf00      	nop
 80067cc:	e000      	b.n	80067d0 <DMA_CheckFifoParam+0xe8>
    break;
 80067ce:	bf00      	nop
    }
  }

  return status;
 80067d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3714      	adds	r7, #20
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop

080067e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a38      	ldr	r2, [pc, #224]	; (80068d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d022      	beq.n	800683e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a36      	ldr	r2, [pc, #216]	; (80068d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d01d      	beq.n	800683e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a35      	ldr	r2, [pc, #212]	; (80068dc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d018      	beq.n	800683e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a33      	ldr	r2, [pc, #204]	; (80068e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d013      	beq.n	800683e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a32      	ldr	r2, [pc, #200]	; (80068e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d00e      	beq.n	800683e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a30      	ldr	r2, [pc, #192]	; (80068e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d009      	beq.n	800683e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a2f      	ldr	r2, [pc, #188]	; (80068ec <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d004      	beq.n	800683e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a2d      	ldr	r2, [pc, #180]	; (80068f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d101      	bne.n	8006842 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800683e:	2301      	movs	r3, #1
 8006840:	e000      	b.n	8006844 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006842:	2300      	movs	r3, #0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d01a      	beq.n	800687e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	b2db      	uxtb	r3, r3
 800684e:	3b08      	subs	r3, #8
 8006850:	4a28      	ldr	r2, [pc, #160]	; (80068f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006852:	fba2 2303 	umull	r2, r3, r2, r3
 8006856:	091b      	lsrs	r3, r3, #4
 8006858:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	4b26      	ldr	r3, [pc, #152]	; (80068f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800685e:	4413      	add	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	461a      	mov	r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a24      	ldr	r2, [pc, #144]	; (80068fc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800686c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f003 031f 	and.w	r3, r3, #31
 8006874:	2201      	movs	r2, #1
 8006876:	409a      	lsls	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800687c:	e024      	b.n	80068c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	b2db      	uxtb	r3, r3
 8006884:	3b10      	subs	r3, #16
 8006886:	4a1e      	ldr	r2, [pc, #120]	; (8006900 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006888:	fba2 2303 	umull	r2, r3, r2, r3
 800688c:	091b      	lsrs	r3, r3, #4
 800688e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	4a1c      	ldr	r2, [pc, #112]	; (8006904 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d806      	bhi.n	80068a6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	4a1b      	ldr	r2, [pc, #108]	; (8006908 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d902      	bls.n	80068a6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	3308      	adds	r3, #8
 80068a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	4b18      	ldr	r3, [pc, #96]	; (800690c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80068aa:	4413      	add	r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	461a      	mov	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a16      	ldr	r2, [pc, #88]	; (8006910 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80068b8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f003 031f 	and.w	r3, r3, #31
 80068c0:	2201      	movs	r2, #1
 80068c2:	409a      	lsls	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80068c8:	bf00      	nop
 80068ca:	3714      	adds	r7, #20
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr
 80068d4:	58025408 	.word	0x58025408
 80068d8:	5802541c 	.word	0x5802541c
 80068dc:	58025430 	.word	0x58025430
 80068e0:	58025444 	.word	0x58025444
 80068e4:	58025458 	.word	0x58025458
 80068e8:	5802546c 	.word	0x5802546c
 80068ec:	58025480 	.word	0x58025480
 80068f0:	58025494 	.word	0x58025494
 80068f4:	cccccccd 	.word	0xcccccccd
 80068f8:	16009600 	.word	0x16009600
 80068fc:	58025880 	.word	0x58025880
 8006900:	aaaaaaab 	.word	0xaaaaaaab
 8006904:	400204b8 	.word	0x400204b8
 8006908:	4002040f 	.word	0x4002040f
 800690c:	10008200 	.word	0x10008200
 8006910:	40020880 	.word	0x40020880

08006914 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	b2db      	uxtb	r3, r3
 8006922:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d04a      	beq.n	80069c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2b08      	cmp	r3, #8
 800692e:	d847      	bhi.n	80069c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a25      	ldr	r2, [pc, #148]	; (80069cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d022      	beq.n	8006980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a24      	ldr	r2, [pc, #144]	; (80069d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d01d      	beq.n	8006980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a22      	ldr	r2, [pc, #136]	; (80069d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d018      	beq.n	8006980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a21      	ldr	r2, [pc, #132]	; (80069d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d013      	beq.n	8006980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a1f      	ldr	r2, [pc, #124]	; (80069dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d00e      	beq.n	8006980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a1e      	ldr	r2, [pc, #120]	; (80069e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d009      	beq.n	8006980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a1c      	ldr	r2, [pc, #112]	; (80069e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d004      	beq.n	8006980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a1b      	ldr	r2, [pc, #108]	; (80069e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d101      	bne.n	8006984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006980:	2301      	movs	r3, #1
 8006982:	e000      	b.n	8006986 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006984:	2300      	movs	r3, #0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00a      	beq.n	80069a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	4b17      	ldr	r3, [pc, #92]	; (80069ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800698e:	4413      	add	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	461a      	mov	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a15      	ldr	r2, [pc, #84]	; (80069f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800699c:	671a      	str	r2, [r3, #112]	; 0x70
 800699e:	e009      	b.n	80069b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	4b14      	ldr	r3, [pc, #80]	; (80069f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80069a4:	4413      	add	r3, r2
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	461a      	mov	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a11      	ldr	r2, [pc, #68]	; (80069f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80069b2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	3b01      	subs	r3, #1
 80069b8:	2201      	movs	r2, #1
 80069ba:	409a      	lsls	r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80069c0:	bf00      	nop
 80069c2:	3714      	adds	r7, #20
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr
 80069cc:	58025408 	.word	0x58025408
 80069d0:	5802541c 	.word	0x5802541c
 80069d4:	58025430 	.word	0x58025430
 80069d8:	58025444 	.word	0x58025444
 80069dc:	58025458 	.word	0x58025458
 80069e0:	5802546c 	.word	0x5802546c
 80069e4:	58025480 	.word	0x58025480
 80069e8:	58025494 	.word	0x58025494
 80069ec:	1600963f 	.word	0x1600963f
 80069f0:	58025940 	.word	0x58025940
 80069f4:	1000823f 	.word	0x1000823f
 80069f8:	40020940 	.word	0x40020940

080069fc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b098      	sub	sp, #96	; 0x60
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006a04:	4a84      	ldr	r2, [pc, #528]	; (8006c18 <HAL_FDCAN_Init+0x21c>)
 8006a06:	f107 030c 	add.w	r3, r7, #12
 8006a0a:	4611      	mov	r1, r2
 8006a0c:	224c      	movs	r2, #76	; 0x4c
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f012 fd28 	bl	8019464 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d101      	bne.n	8006a1e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e1ca      	b.n	8006db4 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a7e      	ldr	r2, [pc, #504]	; (8006c1c <HAL_FDCAN_Init+0x220>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d106      	bne.n	8006a36 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006a30:	461a      	mov	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d106      	bne.n	8006a50 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f7fd f94e 	bl	8003cec <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	699a      	ldr	r2, [r3, #24]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f022 0210 	bic.w	r2, r2, #16
 8006a5e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a60:	f7fd fdaa 	bl	80045b8 <HAL_GetTick>
 8006a64:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006a66:	e014      	b.n	8006a92 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006a68:	f7fd fda6 	bl	80045b8 <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	2b0a      	cmp	r3, #10
 8006a74:	d90d      	bls.n	8006a92 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a7c:	f043 0201 	orr.w	r2, r3, #1
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2203      	movs	r2, #3
 8006a8a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e190      	b.n	8006db4 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	f003 0308 	and.w	r3, r3, #8
 8006a9c:	2b08      	cmp	r3, #8
 8006a9e:	d0e3      	beq.n	8006a68 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	699a      	ldr	r2, [r3, #24]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f042 0201 	orr.w	r2, r2, #1
 8006aae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ab0:	f7fd fd82 	bl	80045b8 <HAL_GetTick>
 8006ab4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006ab6:	e014      	b.n	8006ae2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006ab8:	f7fd fd7e 	bl	80045b8 <HAL_GetTick>
 8006abc:	4602      	mov	r2, r0
 8006abe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	2b0a      	cmp	r3, #10
 8006ac4:	d90d      	bls.n	8006ae2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006acc:	f043 0201 	orr.w	r2, r3, #1
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2203      	movs	r2, #3
 8006ada:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e168      	b.n	8006db4 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	699b      	ldr	r3, [r3, #24]
 8006ae8:	f003 0301 	and.w	r3, r3, #1
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d0e3      	beq.n	8006ab8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	699a      	ldr	r2, [r3, #24]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f042 0202 	orr.w	r2, r2, #2
 8006afe:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	7c1b      	ldrb	r3, [r3, #16]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d108      	bne.n	8006b1a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	699a      	ldr	r2, [r3, #24]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b16:	619a      	str	r2, [r3, #24]
 8006b18:	e007      	b.n	8006b2a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	699a      	ldr	r2, [r3, #24]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b28:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	7c5b      	ldrb	r3, [r3, #17]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d108      	bne.n	8006b44 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	699a      	ldr	r2, [r3, #24]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b40:	619a      	str	r2, [r3, #24]
 8006b42:	e007      	b.n	8006b54 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	699a      	ldr	r2, [r3, #24]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006b52:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	7c9b      	ldrb	r3, [r3, #18]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d108      	bne.n	8006b6e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	699a      	ldr	r2, [r3, #24]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b6a:	619a      	str	r2, [r3, #24]
 8006b6c:	e007      	b.n	8006b7e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	699a      	ldr	r2, [r3, #24]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b7c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	689a      	ldr	r2, [r3, #8]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	430a      	orrs	r2, r1
 8006b92:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	699a      	ldr	r2, [r3, #24]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006ba2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	691a      	ldr	r2, [r3, #16]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f022 0210 	bic.w	r2, r2, #16
 8006bb2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d108      	bne.n	8006bce <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	699a      	ldr	r2, [r3, #24]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f042 0204 	orr.w	r2, r2, #4
 8006bca:	619a      	str	r2, [r3, #24]
 8006bcc:	e030      	b.n	8006c30 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d02c      	beq.n	8006c30 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d020      	beq.n	8006c20 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	699a      	ldr	r2, [r3, #24]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006bec:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	691a      	ldr	r2, [r3, #16]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f042 0210 	orr.w	r2, r2, #16
 8006bfc:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	2b03      	cmp	r3, #3
 8006c04:	d114      	bne.n	8006c30 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	699a      	ldr	r2, [r3, #24]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f042 0220 	orr.w	r2, r2, #32
 8006c14:	619a      	str	r2, [r3, #24]
 8006c16:	e00b      	b.n	8006c30 <HAL_FDCAN_Init+0x234>
 8006c18:	0801ae40 	.word	0x0801ae40
 8006c1c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	699a      	ldr	r2, [r3, #24]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f042 0220 	orr.w	r2, r2, #32
 8006c2e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	3b01      	subs	r3, #1
 8006c36:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	69db      	ldr	r3, [r3, #28]
 8006c3c:	3b01      	subs	r3, #1
 8006c3e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c40:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006c48:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	695b      	ldr	r3, [r3, #20]
 8006c50:	3b01      	subs	r3, #1
 8006c52:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006c58:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c5a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c64:	d115      	bne.n	8006c92 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c70:	3b01      	subs	r3, #1
 8006c72:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006c74:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006c7e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c86:	3b01      	subs	r3, #1
 8006c88:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006c8e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006c90:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00a      	beq.n	8006cb0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	430a      	orrs	r2, r1
 8006cac:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cb8:	4413      	add	r3, r2
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d012      	beq.n	8006ce4 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006cc6:	f023 0107 	bic.w	r1, r3, #7
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006cd4:	4413      	add	r3, r2
 8006cd6:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	430a      	orrs	r2, r1
 8006ce0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d012      	beq.n	8006d12 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006cf4:	f023 0107 	bic.w	r1, r3, #7
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006d02:	4413      	add	r3, r2
 8006d04:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	430a      	orrs	r2, r1
 8006d0e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d013      	beq.n	8006d42 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006d22:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006d30:	4413      	add	r3, r2
 8006d32:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006d36:	011a      	lsls	r2, r3, #4
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	430a      	orrs	r2, r1
 8006d3e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d013      	beq.n	8006d72 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006d52:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006d60:	4413      	add	r3, r2
 8006d62:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006d66:	021a      	lsls	r2, r3, #8
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	430a      	orrs	r2, r1
 8006d6e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a11      	ldr	r2, [pc, #68]	; (8006dbc <HAL_FDCAN_Init+0x3c0>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d107      	bne.n	8006d8c <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	689a      	ldr	r2, [r3, #8]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	f022 0203 	bic.w	r2, r2, #3
 8006d8a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 fddf 	bl	8007968 <FDCAN_CalcultateRamBlockAddresses>
 8006daa:	4603      	mov	r3, r0
 8006dac:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8006db0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3760      	adds	r7, #96	; 0x60
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	4000a000 	.word	0x4000a000

08006dc0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b087      	sub	sp, #28
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006dd0:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006dd2:	7bfb      	ldrb	r3, [r7, #15]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d002      	beq.n	8006dde <HAL_FDCAN_ConfigFilter+0x1e>
 8006dd8:	7bfb      	ldrb	r3, [r7, #15]
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d157      	bne.n	8006e8e <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d12b      	bne.n	8006e3e <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	2b07      	cmp	r3, #7
 8006dec:	d10d      	bne.n	8006e0a <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	69db      	ldr	r3, [r3, #28]
 8006df8:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8006dfa:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8006e00:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8006e02:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8006e06:	617b      	str	r3, [r7, #20]
 8006e08:	e00e      	b.n	8006e28 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006e16:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	691b      	ldr	r3, [r3, #16]
 8006e1c:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8006e1e:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006e24:	4313      	orrs	r3, r2
 8006e26:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	4413      	add	r3, r2
 8006e34:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	601a      	str	r2, [r3, #0]
 8006e3c:	e025      	b.n	8006e8a <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	075a      	lsls	r2, r3, #29
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	2b07      	cmp	r3, #7
 8006e52:	d103      	bne.n	8006e5c <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	699b      	ldr	r3, [r3, #24]
 8006e58:	613b      	str	r3, [r7, #16]
 8006e5a:	e006      	b.n	8006e6a <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	079a      	lsls	r2, r3, #30
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	695b      	ldr	r3, [r3, #20]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	00db      	lsls	r3, r3, #3
 8006e74:	4413      	add	r3, r2
 8006e76:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	697a      	ldr	r2, [r7, #20]
 8006e7c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	3304      	adds	r3, #4
 8006e82:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	e008      	b.n	8006ea0 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e94:	f043 0202 	orr.w	r2, r3, #2
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
  }
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	371c      	adds	r7, #28
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
 8006eb8:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d110      	bne.n	8006ee8 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8006ece:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8006ed4:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8006edc:	69ba      	ldr	r2, [r7, #24]
 8006ede:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8006ee0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	e008      	b.n	8006efa <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006eee:	f043 0204 	orr.w	r2, r3, #4
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
  }
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3714      	adds	r7, #20
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr

08006f06 <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 8006f06:	b480      	push	{r7}
 8006f08:	b083      	sub	sp, #12
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d109      	bne.n	8006f2e <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68da      	ldr	r2, [r3, #12]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006f28:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	e008      	b.n	8006f40 <HAL_FDCAN_EnableTxDelayCompensation+0x3a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f34:	f043 0204 	orr.w	r2, r3, #4
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
  }
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d111      	bne.n	8006f84 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2202      	movs	r2, #2
 8006f64:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	699a      	ldr	r2, [r3, #24]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f022 0201 	bic.w	r2, r2, #1
 8006f76:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8006f80:	2300      	movs	r3, #0
 8006f82:	e008      	b.n	8006f96 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f8a:	f043 0204 	orr.w	r2, r3, #4
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
  }
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	370c      	adds	r7, #12
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
	...

08006fa4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b08b      	sub	sp, #44	; 0x2c
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]
 8006fb0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006fbc:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8006fbe:	7efb      	ldrb	r3, [r7, #27]
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	f040 813b 	bne.w	800723c <HAL_FDCAN_GetRxMessage+0x298>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	2b40      	cmp	r3, #64	; 0x40
 8006fca:	d145      	bne.n	8007058 <HAL_FDCAN_GetRxMessage+0xb4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006fd4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d109      	bne.n	8006ff0 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006fe2:	f043 0220 	orr.w	r2, r3, #32
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e12e      	b.n	800724e <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006ff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d109      	bne.n	8007014 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007006:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e11c      	b.n	800724e <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800701c:	0e1b      	lsrs	r3, r3, #24
 800701e:	f003 0301 	and.w	r3, r3, #1
 8007022:	2b01      	cmp	r3, #1
 8007024:	d103      	bne.n	800702e <HAL_FDCAN_GetRxMessage+0x8a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007036:	0a1b      	lsrs	r3, r3, #8
 8007038:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800703c:	69fa      	ldr	r2, [r7, #28]
 800703e:	4413      	add	r3, r2
 8007040:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800704a:	69f9      	ldr	r1, [r7, #28]
 800704c:	fb01 f303 	mul.w	r3, r1, r3
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	4413      	add	r3, r2
 8007054:	627b      	str	r3, [r7, #36]	; 0x24
 8007056:	e061      	b.n	800711c <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	2b41      	cmp	r3, #65	; 0x41
 800705c:	d145      	bne.n	80070ea <HAL_FDCAN_GetRxMessage+0x146>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007066:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800706a:	2b00      	cmp	r3, #0
 800706c:	d109      	bne.n	8007082 <HAL_FDCAN_GetRxMessage+0xde>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007074:	f043 0220 	orr.w	r2, r3, #32
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e0e5      	b.n	800724e <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800708a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800708e:	2b00      	cmp	r3, #0
 8007090:	d109      	bne.n	80070a6 <HAL_FDCAN_GetRxMessage+0x102>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007098:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e0d3      	b.n	800724e <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80070ae:	0e1b      	lsrs	r3, r3, #24
 80070b0:	f003 0301 	and.w	r3, r3, #1
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d103      	bne.n	80070c0 <HAL_FDCAN_GetRxMessage+0x11c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80070c8:	0a1b      	lsrs	r3, r3, #8
 80070ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070ce:	69fa      	ldr	r2, [r7, #28]
 80070d0:	4413      	add	r3, r2
 80070d2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070dc:	69f9      	ldr	r1, [r7, #28]
 80070de:	fb01 f303 	mul.w	r3, r1, r3
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	4413      	add	r3, r2
 80070e6:	627b      	str	r3, [r7, #36]	; 0x24
 80070e8:	e018      	b.n	800711c <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ee:	68ba      	ldr	r2, [r7, #8]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d309      	bcc.n	8007108 <HAL_FDCAN_GetRxMessage+0x164>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070fa:	f043 0220 	orr.w	r2, r3, #32
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e0a2      	b.n	800724e <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007110:	68b9      	ldr	r1, [r7, #8]
 8007112:	fb01 f303 	mul.w	r3, r1, r3
 8007116:	009b      	lsls	r3, r3, #2
 8007118:	4413      	add	r3, r2
 800711a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800711c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d107      	bne.n	8007140 <HAL_FDCAN_GetRxMessage+0x19c>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8007130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	0c9b      	lsrs	r3, r3, #18
 8007136:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	601a      	str	r2, [r3, #0]
 800713e:	e005      	b.n	800714c <HAL_FDCAN_GetRxMessage+0x1a8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8007140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800714c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8007158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8007164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007166:	3304      	adds	r3, #4
 8007168:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800716a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	b29a      	uxth	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8007174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8007180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800718c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8007198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	0e1b      	lsrs	r3, r3, #24
 800719e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80071a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	0fda      	lsrs	r2, r3, #31
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80071b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b2:	3304      	adds	r3, #4
 80071b4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80071b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b8:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80071ba:	2300      	movs	r3, #0
 80071bc:	623b      	str	r3, [r7, #32]
 80071be:	e00a      	b.n	80071d6 <HAL_FDCAN_GetRxMessage+0x232>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80071c0:	697a      	ldr	r2, [r7, #20]
 80071c2:	6a3b      	ldr	r3, [r7, #32]
 80071c4:	441a      	add	r2, r3
 80071c6:	6839      	ldr	r1, [r7, #0]
 80071c8:	6a3b      	ldr	r3, [r7, #32]
 80071ca:	440b      	add	r3, r1
 80071cc:	7812      	ldrb	r2, [r2, #0]
 80071ce:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80071d0:	6a3b      	ldr	r3, [r7, #32]
 80071d2:	3301      	adds	r3, #1
 80071d4:	623b      	str	r3, [r7, #32]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	0c1b      	lsrs	r3, r3, #16
 80071dc:	4a1f      	ldr	r2, [pc, #124]	; (800725c <HAL_FDCAN_GetRxMessage+0x2b8>)
 80071de:	5cd3      	ldrb	r3, [r2, r3]
 80071e0:	461a      	mov	r2, r3
 80071e2:	6a3b      	ldr	r3, [r7, #32]
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d3eb      	bcc.n	80071c0 <HAL_FDCAN_GetRxMessage+0x21c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	2b40      	cmp	r3, #64	; 0x40
 80071ec:	d105      	bne.n	80071fa <HAL_FDCAN_GetRxMessage+0x256>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	69fa      	ldr	r2, [r7, #28]
 80071f4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80071f8:	e01e      	b.n	8007238 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	2b41      	cmp	r3, #65	; 0x41
 80071fe:	d105      	bne.n	800720c <HAL_FDCAN_GetRxMessage+0x268>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	69fa      	ldr	r2, [r7, #28]
 8007206:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800720a:	e015      	b.n	8007238 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	2b1f      	cmp	r3, #31
 8007210:	d808      	bhi.n	8007224 <HAL_FDCAN_GetRxMessage+0x280>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2101      	movs	r1, #1
 8007218:	68ba      	ldr	r2, [r7, #8]
 800721a:	fa01 f202 	lsl.w	r2, r1, r2
 800721e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8007222:	e009      	b.n	8007238 <HAL_FDCAN_GetRxMessage+0x294>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	f003 021f 	and.w	r2, r3, #31
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2101      	movs	r1, #1
 8007230:	fa01 f202 	lsl.w	r2, r1, r2
 8007234:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8007238:	2300      	movs	r3, #0
 800723a:	e008      	b.n	800724e <HAL_FDCAN_GetRxMessage+0x2aa>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007242:	f043 0208 	orr.w	r2, r3, #8
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800724c:	2301      	movs	r3, #1
  }
}
 800724e:	4618      	mov	r0, r3
 8007250:	372c      	adds	r7, #44	; 0x2c
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	0801af3c 	.word	0x0801af3c

08007260 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8007260:	b480      	push	{r7}
 8007262:	b087      	sub	sp, #28
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007272:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007274:	7dfb      	ldrb	r3, [r7, #23]
 8007276:	2b01      	cmp	r3, #1
 8007278:	d002      	beq.n	8007280 <HAL_FDCAN_ActivateNotification+0x20>
 800727a:	7dfb      	ldrb	r3, [r7, #23]
 800727c:	2b02      	cmp	r3, #2
 800727e:	d155      	bne.n	800732c <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	4013      	ands	r3, r2
 800728a:	2b00      	cmp	r3, #0
 800728c:	d108      	bne.n	80072a0 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f042 0201 	orr.w	r2, r2, #1
 800729c:	65da      	str	r2, [r3, #92]	; 0x5c
 800729e:	e014      	b.n	80072ca <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	4013      	ands	r3, r2
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d108      	bne.n	80072c2 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f042 0202 	orr.w	r2, r2, #2
 80072be:	65da      	str	r2, [r3, #92]	; 0x5c
 80072c0:	e003      	b.n	80072ca <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2203      	movs	r2, #3
 80072c8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d009      	beq.n	80072e8 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	430a      	orrs	r2, r1
 80072e4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d009      	beq.n	8007306 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	430a      	orrs	r2, r1
 8007302:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	4b0f      	ldr	r3, [pc, #60]	; (800734c <HAL_FDCAN_ActivateNotification+0xec>)
 8007310:	4013      	ands	r3, r2
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	6812      	ldr	r2, [r2, #0]
 8007316:	430b      	orrs	r3, r1
 8007318:	6553      	str	r3, [r2, #84]	; 0x54
 800731a:	4b0d      	ldr	r3, [pc, #52]	; (8007350 <HAL_FDCAN_ActivateNotification+0xf0>)
 800731c:	695a      	ldr	r2, [r3, #20]
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	0f9b      	lsrs	r3, r3, #30
 8007322:	490b      	ldr	r1, [pc, #44]	; (8007350 <HAL_FDCAN_ActivateNotification+0xf0>)
 8007324:	4313      	orrs	r3, r2
 8007326:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8007328:	2300      	movs	r3, #0
 800732a:	e008      	b.n	800733e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007332:	f043 0202 	orr.w	r2, r3, #2
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800733c:	2301      	movs	r3, #1
  }
}
 800733e:	4618      	mov	r0, r3
 8007340:	371c      	adds	r7, #28
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	3fcfffff 	.word	0x3fcfffff
 8007350:	4000a800 	.word	0x4000a800

08007354 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b092      	sub	sp, #72	; 0x48
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 800735c:	4b90      	ldr	r3, [pc, #576]	; (80075a0 <HAL_FDCAN_IRQHandler+0x24c>)
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	079b      	lsls	r3, r3, #30
 8007362:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8007364:	4b8e      	ldr	r3, [pc, #568]	; (80075a0 <HAL_FDCAN_IRQHandler+0x24c>)
 8007366:	695b      	ldr	r3, [r3, #20]
 8007368:	079b      	lsls	r3, r3, #30
 800736a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800736c:	4013      	ands	r3, r2
 800736e:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007376:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800737a:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007382:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007384:	4013      	ands	r3, r2
 8007386:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800738e:	f003 030f 	and.w	r3, r3, #15
 8007392:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800739a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800739c:	4013      	ands	r3, r2
 800739e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073b4:	4013      	ands	r3, r2
 80073b6:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073be:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 80073c2:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073cc:	4013      	ands	r3, r2
 80073ce:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073d6:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 80073da:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073e4:	4013      	ands	r3, r2
 80073e6:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d011      	beq.n	800741a <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00a      	beq.n	800741a <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f44f 7280 	mov.w	r2, #256	; 0x100
 800740c:	651a      	str	r2, [r3, #80]	; 0x50
 800740e:	4b64      	ldr	r3, [pc, #400]	; (80075a0 <HAL_FDCAN_IRQHandler+0x24c>)
 8007410:	2200      	movs	r2, #0
 8007412:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 fa5a 	bl	80078ce <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007424:	2b00      	cmp	r3, #0
 8007426:	d01e      	beq.n	8007466 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800742e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007432:	2b00      	cmp	r3, #0
 8007434:	d017      	beq.n	8007466 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800743e:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800744a:	4013      	ands	r3, r2
 800744c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007456:	651a      	str	r2, [r3, #80]	; 0x50
 8007458:	4b51      	ldr	r3, [pc, #324]	; (80075a0 <HAL_FDCAN_IRQHandler+0x24c>)
 800745a:	2200      	movs	r2, #0
 800745c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800745e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 fa0b 	bl	800787c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8007466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00d      	beq.n	8007488 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007472:	4b4c      	ldr	r3, [pc, #304]	; (80075a4 <HAL_FDCAN_IRQHandler+0x250>)
 8007474:	400b      	ands	r3, r1
 8007476:	6513      	str	r3, [r2, #80]	; 0x50
 8007478:	4a49      	ldr	r2, [pc, #292]	; (80075a0 <HAL_FDCAN_IRQHandler+0x24c>)
 800747a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800747c:	0f9b      	lsrs	r3, r3, #30
 800747e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8007480:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 f9c4 	bl	8007810 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8007488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00d      	beq.n	80074aa <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007494:	4b43      	ldr	r3, [pc, #268]	; (80075a4 <HAL_FDCAN_IRQHandler+0x250>)
 8007496:	400b      	ands	r3, r1
 8007498:	6513      	str	r3, [r2, #80]	; 0x50
 800749a:	4a41      	ldr	r2, [pc, #260]	; (80075a0 <HAL_FDCAN_IRQHandler+0x24c>)
 800749c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800749e:	0f9b      	lsrs	r3, r3, #30
 80074a0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80074a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f9be 	bl	8007826 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80074aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00d      	beq.n	80074cc <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80074b6:	4b3b      	ldr	r3, [pc, #236]	; (80075a4 <HAL_FDCAN_IRQHandler+0x250>)
 80074b8:	400b      	ands	r3, r1
 80074ba:	6513      	str	r3, [r2, #80]	; 0x50
 80074bc:	4a38      	ldr	r2, [pc, #224]	; (80075a0 <HAL_FDCAN_IRQHandler+0x24c>)
 80074be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074c0:	0f9b      	lsrs	r3, r3, #30
 80074c2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80074c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f7f9 f920 	bl	800070c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80074cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00d      	beq.n	80074ee <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80074d8:	4b32      	ldr	r3, [pc, #200]	; (80075a4 <HAL_FDCAN_IRQHandler+0x250>)
 80074da:	400b      	ands	r3, r1
 80074dc:	6513      	str	r3, [r2, #80]	; 0x50
 80074de:	4a30      	ldr	r2, [pc, #192]	; (80075a0 <HAL_FDCAN_IRQHandler+0x24c>)
 80074e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e2:	0f9b      	lsrs	r3, r3, #30
 80074e4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80074e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 f9a7 	bl	800783c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d011      	beq.n	8007520 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007502:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00a      	beq.n	8007520 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007512:	651a      	str	r2, [r3, #80]	; 0x50
 8007514:	4b22      	ldr	r3, [pc, #136]	; (80075a0 <HAL_FDCAN_IRQHandler+0x24c>)
 8007516:	2200      	movs	r2, #0
 8007518:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 f999 	bl	8007852 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007526:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800752a:	2b00      	cmp	r3, #0
 800752c:	d01e      	beq.n	800756c <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007534:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007538:	2b00      	cmp	r3, #0
 800753a:	d017      	beq.n	800756c <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007544:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800754e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007550:	4013      	ands	r3, r2
 8007552:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f44f 7200 	mov.w	r2, #512	; 0x200
 800755c:	651a      	str	r2, [r3, #80]	; 0x50
 800755e:	4b10      	ldr	r3, [pc, #64]	; (80075a0 <HAL_FDCAN_IRQHandler+0x24c>)
 8007560:	2200      	movs	r2, #0
 8007562:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007564:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f97d 	bl	8007866 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007572:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d016      	beq.n	80075a8 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007580:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007584:	2b00      	cmp	r3, #0
 8007586:	d00f      	beq.n	80075a8 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007590:	651a      	str	r2, [r3, #80]	; 0x50
 8007592:	4b03      	ldr	r3, [pc, #12]	; (80075a0 <HAL_FDCAN_IRQHandler+0x24c>)
 8007594:	2200      	movs	r2, #0
 8007596:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 f97a 	bl	8007892 <HAL_FDCAN_RxBufferNewMessageCallback>
 800759e:	e003      	b.n	80075a8 <HAL_FDCAN_IRQHandler+0x254>
 80075a0:	4000a800 	.word	0x4000a800
 80075a4:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d011      	beq.n	80075da <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00a      	beq.n	80075da <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80075cc:	651a      	str	r2, [r3, #80]	; 0x50
 80075ce:	4b8d      	ldr	r3, [pc, #564]	; (8007804 <HAL_FDCAN_IRQHandler+0x4b0>)
 80075d0:	2200      	movs	r2, #0
 80075d2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 f966 	bl	80078a6 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d011      	beq.n	800760c <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00a      	beq.n	800760c <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80075fe:	651a      	str	r2, [r3, #80]	; 0x50
 8007600:	4b80      	ldr	r3, [pc, #512]	; (8007804 <HAL_FDCAN_IRQHandler+0x4b0>)
 8007602:	2200      	movs	r2, #0
 8007604:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 f957 	bl	80078ba <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d016      	beq.n	8007648 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00f      	beq.n	8007648 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007630:	651a      	str	r2, [r3, #80]	; 0x50
 8007632:	4b74      	ldr	r3, [pc, #464]	; (8007804 <HAL_FDCAN_IRQHandler+0x4b0>)
 8007634:	2200      	movs	r2, #0
 8007636:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800763e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8007648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00d      	beq.n	800766a <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007654:	4b6c      	ldr	r3, [pc, #432]	; (8007808 <HAL_FDCAN_IRQHandler+0x4b4>)
 8007656:	400b      	ands	r3, r1
 8007658:	6513      	str	r3, [r2, #80]	; 0x50
 800765a:	4a6a      	ldr	r2, [pc, #424]	; (8007804 <HAL_FDCAN_IRQHandler+0x4b0>)
 800765c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765e:	0f9b      	lsrs	r3, r3, #30
 8007660:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007662:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 f946 	bl	80078f6 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800766a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800766c:	2b00      	cmp	r3, #0
 800766e:	d011      	beq.n	8007694 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007676:	4b64      	ldr	r3, [pc, #400]	; (8007808 <HAL_FDCAN_IRQHandler+0x4b4>)
 8007678:	400b      	ands	r3, r1
 800767a:	6513      	str	r3, [r2, #80]	; 0x50
 800767c:	4a61      	ldr	r2, [pc, #388]	; (8007804 <HAL_FDCAN_IRQHandler+0x4b0>)
 800767e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007680:	0f9b      	lsrs	r3, r3, #30
 8007682:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800768a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800768c:	431a      	orrs	r2, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a5c      	ldr	r2, [pc, #368]	; (800780c <HAL_FDCAN_IRQHandler+0x4b8>)
 800769a:	4293      	cmp	r3, r2
 800769c:	f040 80a6 	bne.w	80077ec <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	f003 0303 	and.w	r3, r3, #3
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	f000 809e 	beq.w	80077ec <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	6a1b      	ldr	r3, [r3, #32]
 80076b6:	f003 030f 	and.w	r3, r3, #15
 80076ba:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076c4:	4013      	ands	r3, r2
 80076c6:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	6a1b      	ldr	r3, [r3, #32]
 80076ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80076d2:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076da:	6a3a      	ldr	r2, [r7, #32]
 80076dc:	4013      	ands	r3, r2
 80076de:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	6a1b      	ldr	r3, [r3, #32]
 80076e6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80076ea:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f2:	69fa      	ldr	r2, [r7, #28]
 80076f4:	4013      	ands	r3, r2
 80076f6:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	6a1b      	ldr	r3, [r3, #32]
 80076fe:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8007702:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770a:	69ba      	ldr	r2, [r7, #24]
 800770c:	4013      	ands	r3, r2
 800770e:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	6a1b      	ldr	r3, [r3, #32]
 8007716:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 800771a:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007722:	697a      	ldr	r2, [r7, #20]
 8007724:	4013      	ands	r3, r2
 8007726:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8007728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772a:	2b00      	cmp	r3, #0
 800772c:	d007      	beq.n	800773e <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007734:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8007736:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 f8e7 	bl	800790c <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800773e:	6a3b      	ldr	r3, [r7, #32]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d007      	beq.n	8007754 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	6a3a      	ldr	r2, [r7, #32]
 800774a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800774c:	6a39      	ldr	r1, [r7, #32]
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 f8e7 	bl	8007922 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800775e:	2b00      	cmp	r3, #0
 8007760:	d01b      	beq.n	800779a <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	6a1b      	ldr	r3, [r3, #32]
 8007768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800776c:	2b00      	cmp	r3, #0
 800776e:	d014      	beq.n	800779a <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007776:	0c1b      	lsrs	r3, r3, #16
 8007778:	b29b      	uxth	r3, r3
 800777a:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007782:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007786:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	2240      	movs	r2, #64	; 0x40
 800778e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	6939      	ldr	r1, [r7, #16]
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 f8cf 	bl	8007938 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d007      	beq.n	80077b0 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	69fa      	ldr	r2, [r7, #28]
 80077a6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80077a8:	69f9      	ldr	r1, [r7, #28]
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f8d0 	bl	8007950 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00b      	beq.n	80077ce <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	69ba      	ldr	r2, [r7, #24]
 80077bc:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	431a      	orrs	r2, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d00b      	beq.n	80077ec <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	697a      	ldr	r2, [r7, #20]
 80077da:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	431a      	orrs	r2, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d002      	beq.n	80077fc <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f873 	bl	80078e2 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80077fc:	bf00      	nop
 80077fe:	3748      	adds	r7, #72	; 0x48
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}
 8007804:	4000a800 	.word	0x4000a800
 8007808:	3fcfffff 	.word	0x3fcfffff
 800780c:	4000a000 	.word	0x4000a000

08007810 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800781a:	bf00      	nop
 800781c:	370c      	adds	r7, #12
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr

08007826 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8007826:	b480      	push	{r7}
 8007828:	b083      	sub	sp, #12
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
 800782e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8007830:	bf00      	nop
 8007832:	370c      	adds	r7, #12
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8007846:	bf00      	nop
 8007848:	370c      	adds	r7, #12
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr

08007852 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007852:	b480      	push	{r7}
 8007854:	b083      	sub	sp, #12
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800785a:	bf00      	nop
 800785c:	370c      	adds	r7, #12
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr

08007866 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007866:	b480      	push	{r7}
 8007868:	b083      	sub	sp, #12
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
 800786e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8007886:	bf00      	nop
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007892:	b480      	push	{r7}
 8007894:	b083      	sub	sp, #12
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800789a:	bf00      	nop
 800789c:	370c      	adds	r7, #12
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr

080078a6 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80078a6:	b480      	push	{r7}
 80078a8:	b083      	sub	sp, #12
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80078ae:	bf00      	nop
 80078b0:	370c      	adds	r7, #12
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr

080078ba <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b083      	sub	sp, #12
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80078c2:	bf00      	nop
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr

080078ce <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80078ce:	b480      	push	{r7}
 80078d0:	b083      	sub	sp, #12
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80078d6:	bf00      	nop
 80078d8:	370c      	adds	r7, #12
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr

080078e2 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80078e2:	b480      	push	{r7}
 80078e4:	b083      	sub	sp, #12
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80078ea:	bf00      	nop
 80078ec:	370c      	adds	r7, #12
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr

080078f6 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80078f6:	b480      	push	{r7}
 80078f8:	b083      	sub	sp, #12
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
 80078fe:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8007900:	bf00      	nop
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8007916:	bf00      	nop
 8007918:	370c      	adds	r7, #12
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr

08007922 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8007922:	b480      	push	{r7}
 8007924:	b083      	sub	sp, #12
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
 800792a:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800792c:	bf00      	nop
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	60b9      	str	r1, [r7, #8]
 8007942:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8007944:	bf00      	nop
 8007946:	3714      	adds	r7, #20
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800795a:	bf00      	nop
 800795c:	370c      	adds	r7, #12
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr
	...

08007968 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007968:	b480      	push	{r7}
 800796a:	b085      	sub	sp, #20
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007974:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800797e:	4ba7      	ldr	r3, [pc, #668]	; (8007c1c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007980:	4013      	ands	r3, r2
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	0091      	lsls	r1, r2, #2
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	6812      	ldr	r2, [r2, #0]
 800798a:	430b      	orrs	r3, r1
 800798c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007998:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a0:	041a      	lsls	r2, r3, #16
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	430a      	orrs	r2, r1
 80079a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b0:	68ba      	ldr	r2, [r7, #8]
 80079b2:	4413      	add	r3, r2
 80079b4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80079be:	4b97      	ldr	r3, [pc, #604]	; (8007c1c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80079c0:	4013      	ands	r3, r2
 80079c2:	68ba      	ldr	r2, [r7, #8]
 80079c4:	0091      	lsls	r1, r2, #2
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	6812      	ldr	r2, [r2, #0]
 80079ca:	430b      	orrs	r3, r1
 80079cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079d8:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079e0:	041a      	lsls	r2, r3, #16
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	430a      	orrs	r2, r1
 80079e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079f0:	005b      	lsls	r3, r3, #1
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	4413      	add	r3, r2
 80079f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007a00:	4b86      	ldr	r3, [pc, #536]	; (8007c1c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a02:	4013      	ands	r3, r2
 8007a04:	68ba      	ldr	r2, [r7, #8]
 8007a06:	0091      	lsls	r1, r2, #2
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	6812      	ldr	r2, [r2, #0]
 8007a0c:	430b      	orrs	r3, r1
 8007a0e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007a1a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a22:	041a      	lsls	r2, r3, #16
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	430a      	orrs	r2, r1
 8007a2a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007a36:	fb02 f303 	mul.w	r3, r2, r3
 8007a3a:	68ba      	ldr	r2, [r7, #8]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007a48:	4b74      	ldr	r3, [pc, #464]	; (8007c1c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	68ba      	ldr	r2, [r7, #8]
 8007a4e:	0091      	lsls	r1, r2, #2
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	6812      	ldr	r2, [r2, #0]
 8007a54:	430b      	orrs	r3, r1
 8007a56:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a62:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a6a:	041a      	lsls	r2, r3, #16
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	430a      	orrs	r2, r1
 8007a72:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007a7e:	fb02 f303 	mul.w	r3, r2, r3
 8007a82:	68ba      	ldr	r2, [r7, #8]
 8007a84:	4413      	add	r3, r2
 8007a86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007a90:	4b62      	ldr	r3, [pc, #392]	; (8007c1c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a92:	4013      	ands	r3, r2
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	0091      	lsls	r1, r2, #2
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	6812      	ldr	r2, [r2, #0]
 8007a9c:	430b      	orrs	r3, r1
 8007a9e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007aaa:	fb02 f303 	mul.w	r3, r2, r3
 8007aae:	68ba      	ldr	r2, [r7, #8]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007abc:	4b57      	ldr	r3, [pc, #348]	; (8007c1c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007abe:	4013      	ands	r3, r2
 8007ac0:	68ba      	ldr	r2, [r7, #8]
 8007ac2:	0091      	lsls	r1, r2, #2
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	6812      	ldr	r2, [r2, #0]
 8007ac8:	430b      	orrs	r3, r1
 8007aca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ad6:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ade:	041a      	lsls	r2, r3, #16
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	430a      	orrs	r2, r1
 8007ae6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aee:	005b      	lsls	r3, r3, #1
 8007af0:	68ba      	ldr	r2, [r7, #8]
 8007af2:	4413      	add	r3, r2
 8007af4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007afe:	4b47      	ldr	r3, [pc, #284]	; (8007c1c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007b00:	4013      	ands	r3, r2
 8007b02:	68ba      	ldr	r2, [r7, #8]
 8007b04:	0091      	lsls	r1, r2, #2
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	6812      	ldr	r2, [r2, #0]
 8007b0a:	430b      	orrs	r3, r1
 8007b0c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007b18:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b20:	041a      	lsls	r2, r3, #16
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	430a      	orrs	r2, r1
 8007b28:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007b34:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b3c:	061a      	lsls	r2, r3, #24
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	430a      	orrs	r2, r1
 8007b44:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b4c:	4b34      	ldr	r3, [pc, #208]	; (8007c20 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007b4e:	4413      	add	r3, r2
 8007b50:	009a      	lsls	r2, r3, #2
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	441a      	add	r2, r3
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b6e:	00db      	lsls	r3, r3, #3
 8007b70:	441a      	add	r2, r3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7e:	6879      	ldr	r1, [r7, #4]
 8007b80:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007b82:	fb01 f303 	mul.w	r3, r1, r3
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	441a      	add	r2, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b96:	6879      	ldr	r1, [r7, #4]
 8007b98:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007b9a:	fb01 f303 	mul.w	r3, r1, r3
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	441a      	add	r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bae:	6879      	ldr	r1, [r7, #4]
 8007bb0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007bb2:	fb01 f303 	mul.w	r3, r1, r3
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	441a      	add	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bca:	00db      	lsls	r3, r3, #3
 8007bcc:	441a      	add	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bde:	6879      	ldr	r1, [r7, #4]
 8007be0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007be2:	fb01 f303 	mul.w	r3, r1, r3
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	441a      	add	r2, r3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bfa:	6879      	ldr	r1, [r7, #4]
 8007bfc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007bfe:	fb01 f303 	mul.w	r3, r1, r3
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	441a      	add	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c12:	4a04      	ldr	r2, [pc, #16]	; (8007c24 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d915      	bls.n	8007c44 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007c18:	e006      	b.n	8007c28 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007c1a:	bf00      	nop
 8007c1c:	ffff0003 	.word	0xffff0003
 8007c20:	10002b00 	.word	0x10002b00
 8007c24:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c2e:	f043 0220 	orr.w	r2, r3, #32
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2203      	movs	r2, #3
 8007c3c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	e010      	b.n	8007c66 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c48:	60fb      	str	r3, [r7, #12]
 8007c4a:	e005      	b.n	8007c58 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	3304      	adds	r3, #4
 8007c56:	60fb      	str	r3, [r7, #12]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d3f3      	bcc.n	8007c4c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3714      	adds	r7, #20
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop

08007c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b089      	sub	sp, #36	; 0x24
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007c82:	4b89      	ldr	r3, [pc, #548]	; (8007ea8 <HAL_GPIO_Init+0x234>)
 8007c84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007c86:	e194      	b.n	8007fb2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	2101      	movs	r1, #1
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	fa01 f303 	lsl.w	r3, r1, r3
 8007c94:	4013      	ands	r3, r2
 8007c96:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f000 8186 	beq.w	8007fac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d00b      	beq.n	8007cc0 <HAL_GPIO_Init+0x4c>
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	2b02      	cmp	r3, #2
 8007cae:	d007      	beq.n	8007cc0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007cb4:	2b11      	cmp	r3, #17
 8007cb6:	d003      	beq.n	8007cc0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	2b12      	cmp	r3, #18
 8007cbe:	d130      	bne.n	8007d22 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007cc6:	69fb      	ldr	r3, [r7, #28]
 8007cc8:	005b      	lsls	r3, r3, #1
 8007cca:	2203      	movs	r2, #3
 8007ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd0:	43db      	mvns	r3, r3
 8007cd2:	69ba      	ldr	r2, [r7, #24]
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	68da      	ldr	r2, [r3, #12]
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	005b      	lsls	r3, r3, #1
 8007ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce4:	69ba      	ldr	r2, [r7, #24]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	69ba      	ldr	r2, [r7, #24]
 8007cee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8007cfe:	43db      	mvns	r3, r3
 8007d00:	69ba      	ldr	r2, [r7, #24]
 8007d02:	4013      	ands	r3, r2
 8007d04:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	091b      	lsrs	r3, r3, #4
 8007d0c:	f003 0201 	and.w	r2, r3, #1
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	fa02 f303 	lsl.w	r3, r2, r3
 8007d16:	69ba      	ldr	r2, [r7, #24]
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	69ba      	ldr	r2, [r7, #24]
 8007d20:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	68db      	ldr	r3, [r3, #12]
 8007d26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	005b      	lsls	r3, r3, #1
 8007d2c:	2203      	movs	r2, #3
 8007d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d32:	43db      	mvns	r3, r3
 8007d34:	69ba      	ldr	r2, [r7, #24]
 8007d36:	4013      	ands	r3, r2
 8007d38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	689a      	ldr	r2, [r3, #8]
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	005b      	lsls	r3, r3, #1
 8007d42:	fa02 f303 	lsl.w	r3, r2, r3
 8007d46:	69ba      	ldr	r2, [r7, #24]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	69ba      	ldr	r2, [r7, #24]
 8007d50:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d003      	beq.n	8007d62 <HAL_GPIO_Init+0xee>
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	2b12      	cmp	r3, #18
 8007d60:	d123      	bne.n	8007daa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	08da      	lsrs	r2, r3, #3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	3208      	adds	r2, #8
 8007d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	f003 0307 	and.w	r3, r3, #7
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	220f      	movs	r2, #15
 8007d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d7e:	43db      	mvns	r3, r3
 8007d80:	69ba      	ldr	r2, [r7, #24]
 8007d82:	4013      	ands	r3, r2
 8007d84:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	691a      	ldr	r2, [r3, #16]
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	f003 0307 	and.w	r3, r3, #7
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	fa02 f303 	lsl.w	r3, r2, r3
 8007d96:	69ba      	ldr	r2, [r7, #24]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	08da      	lsrs	r2, r3, #3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	3208      	adds	r2, #8
 8007da4:	69b9      	ldr	r1, [r7, #24]
 8007da6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	005b      	lsls	r3, r3, #1
 8007db4:	2203      	movs	r2, #3
 8007db6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dba:	43db      	mvns	r3, r3
 8007dbc:	69ba      	ldr	r2, [r7, #24]
 8007dbe:	4013      	ands	r3, r2
 8007dc0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	f003 0203 	and.w	r2, r3, #3
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	005b      	lsls	r3, r3, #1
 8007dce:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd2:	69ba      	ldr	r2, [r7, #24]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	69ba      	ldr	r2, [r7, #24]
 8007ddc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	f000 80e0 	beq.w	8007fac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007dec:	4b2f      	ldr	r3, [pc, #188]	; (8007eac <HAL_GPIO_Init+0x238>)
 8007dee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007df2:	4a2e      	ldr	r2, [pc, #184]	; (8007eac <HAL_GPIO_Init+0x238>)
 8007df4:	f043 0302 	orr.w	r3, r3, #2
 8007df8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007dfc:	4b2b      	ldr	r3, [pc, #172]	; (8007eac <HAL_GPIO_Init+0x238>)
 8007dfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e02:	f003 0302 	and.w	r3, r3, #2
 8007e06:	60fb      	str	r3, [r7, #12]
 8007e08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007e0a:	4a29      	ldr	r2, [pc, #164]	; (8007eb0 <HAL_GPIO_Init+0x23c>)
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	089b      	lsrs	r3, r3, #2
 8007e10:	3302      	adds	r3, #2
 8007e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	f003 0303 	and.w	r3, r3, #3
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	220f      	movs	r2, #15
 8007e22:	fa02 f303 	lsl.w	r3, r2, r3
 8007e26:	43db      	mvns	r3, r3
 8007e28:	69ba      	ldr	r2, [r7, #24]
 8007e2a:	4013      	ands	r3, r2
 8007e2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a20      	ldr	r2, [pc, #128]	; (8007eb4 <HAL_GPIO_Init+0x240>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d052      	beq.n	8007edc <HAL_GPIO_Init+0x268>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a1f      	ldr	r2, [pc, #124]	; (8007eb8 <HAL_GPIO_Init+0x244>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d031      	beq.n	8007ea2 <HAL_GPIO_Init+0x22e>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a1e      	ldr	r2, [pc, #120]	; (8007ebc <HAL_GPIO_Init+0x248>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d02b      	beq.n	8007e9e <HAL_GPIO_Init+0x22a>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a1d      	ldr	r2, [pc, #116]	; (8007ec0 <HAL_GPIO_Init+0x24c>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d025      	beq.n	8007e9a <HAL_GPIO_Init+0x226>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4a1c      	ldr	r2, [pc, #112]	; (8007ec4 <HAL_GPIO_Init+0x250>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d01f      	beq.n	8007e96 <HAL_GPIO_Init+0x222>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a1b      	ldr	r2, [pc, #108]	; (8007ec8 <HAL_GPIO_Init+0x254>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d019      	beq.n	8007e92 <HAL_GPIO_Init+0x21e>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a1a      	ldr	r2, [pc, #104]	; (8007ecc <HAL_GPIO_Init+0x258>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d013      	beq.n	8007e8e <HAL_GPIO_Init+0x21a>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a19      	ldr	r2, [pc, #100]	; (8007ed0 <HAL_GPIO_Init+0x25c>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d00d      	beq.n	8007e8a <HAL_GPIO_Init+0x216>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4a18      	ldr	r2, [pc, #96]	; (8007ed4 <HAL_GPIO_Init+0x260>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d007      	beq.n	8007e86 <HAL_GPIO_Init+0x212>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a17      	ldr	r2, [pc, #92]	; (8007ed8 <HAL_GPIO_Init+0x264>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d101      	bne.n	8007e82 <HAL_GPIO_Init+0x20e>
 8007e7e:	2309      	movs	r3, #9
 8007e80:	e02d      	b.n	8007ede <HAL_GPIO_Init+0x26a>
 8007e82:	230a      	movs	r3, #10
 8007e84:	e02b      	b.n	8007ede <HAL_GPIO_Init+0x26a>
 8007e86:	2308      	movs	r3, #8
 8007e88:	e029      	b.n	8007ede <HAL_GPIO_Init+0x26a>
 8007e8a:	2307      	movs	r3, #7
 8007e8c:	e027      	b.n	8007ede <HAL_GPIO_Init+0x26a>
 8007e8e:	2306      	movs	r3, #6
 8007e90:	e025      	b.n	8007ede <HAL_GPIO_Init+0x26a>
 8007e92:	2305      	movs	r3, #5
 8007e94:	e023      	b.n	8007ede <HAL_GPIO_Init+0x26a>
 8007e96:	2304      	movs	r3, #4
 8007e98:	e021      	b.n	8007ede <HAL_GPIO_Init+0x26a>
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	e01f      	b.n	8007ede <HAL_GPIO_Init+0x26a>
 8007e9e:	2302      	movs	r3, #2
 8007ea0:	e01d      	b.n	8007ede <HAL_GPIO_Init+0x26a>
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	e01b      	b.n	8007ede <HAL_GPIO_Init+0x26a>
 8007ea6:	bf00      	nop
 8007ea8:	58000080 	.word	0x58000080
 8007eac:	58024400 	.word	0x58024400
 8007eb0:	58000400 	.word	0x58000400
 8007eb4:	58020000 	.word	0x58020000
 8007eb8:	58020400 	.word	0x58020400
 8007ebc:	58020800 	.word	0x58020800
 8007ec0:	58020c00 	.word	0x58020c00
 8007ec4:	58021000 	.word	0x58021000
 8007ec8:	58021400 	.word	0x58021400
 8007ecc:	58021800 	.word	0x58021800
 8007ed0:	58021c00 	.word	0x58021c00
 8007ed4:	58022000 	.word	0x58022000
 8007ed8:	58022400 	.word	0x58022400
 8007edc:	2300      	movs	r3, #0
 8007ede:	69fa      	ldr	r2, [r7, #28]
 8007ee0:	f002 0203 	and.w	r2, r2, #3
 8007ee4:	0092      	lsls	r2, r2, #2
 8007ee6:	4093      	lsls	r3, r2
 8007ee8:	69ba      	ldr	r2, [r7, #24]
 8007eea:	4313      	orrs	r3, r2
 8007eec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007eee:	4938      	ldr	r1, [pc, #224]	; (8007fd0 <HAL_GPIO_Init+0x35c>)
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	089b      	lsrs	r3, r3, #2
 8007ef4:	3302      	adds	r3, #2
 8007ef6:	69ba      	ldr	r2, [r7, #24]
 8007ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	43db      	mvns	r3, r3
 8007f06:	69ba      	ldr	r2, [r7, #24]
 8007f08:	4013      	ands	r3, r2
 8007f0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d003      	beq.n	8007f20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007f18:	69ba      	ldr	r2, [r7, #24]
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	69ba      	ldr	r2, [r7, #24]
 8007f24:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	43db      	mvns	r3, r3
 8007f30:	69ba      	ldr	r2, [r7, #24]
 8007f32:	4013      	ands	r3, r2
 8007f34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d003      	beq.n	8007f4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007f42:	69ba      	ldr	r2, [r7, #24]
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	69ba      	ldr	r2, [r7, #24]
 8007f4e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	43db      	mvns	r3, r3
 8007f5c:	69ba      	ldr	r2, [r7, #24]
 8007f5e:	4013      	ands	r3, r2
 8007f60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d003      	beq.n	8007f76 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8007f6e:	69ba      	ldr	r2, [r7, #24]
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007f76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	43db      	mvns	r3, r3
 8007f8a:	69ba      	ldr	r2, [r7, #24]
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d003      	beq.n	8007fa4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8007f9c:	69ba      	ldr	r2, [r7, #24]
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007fa4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	3301      	adds	r3, #1
 8007fb0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	f47f ae63 	bne.w	8007c88 <HAL_GPIO_Init+0x14>
  }
}
 8007fc2:	bf00      	nop
 8007fc4:	3724      	adds	r7, #36	; 0x24
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr
 8007fce:	bf00      	nop
 8007fd0:	58000400 	.word	0x58000400

08007fd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b085      	sub	sp, #20
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	460b      	mov	r3, r1
 8007fde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	691a      	ldr	r2, [r3, #16]
 8007fe4:	887b      	ldrh	r3, [r7, #2]
 8007fe6:	4013      	ands	r3, r2
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d002      	beq.n	8007ff2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007fec:	2301      	movs	r3, #1
 8007fee:	73fb      	strb	r3, [r7, #15]
 8007ff0:	e001      	b.n	8007ff6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3714      	adds	r7, #20
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	460b      	mov	r3, r1
 800800e:	807b      	strh	r3, [r7, #2]
 8008010:	4613      	mov	r3, r2
 8008012:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008014:	787b      	ldrb	r3, [r7, #1]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d003      	beq.n	8008022 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800801a:	887a      	ldrh	r2, [r7, #2]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008020:	e003      	b.n	800802a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008022:	887b      	ldrh	r3, [r7, #2]
 8008024:	041a      	lsls	r2, r3, #16
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	619a      	str	r2, [r3, #24]
}
 800802a:	bf00      	nop
 800802c:	370c      	adds	r7, #12
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr

08008036 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008036:	b480      	push	{r7}
 8008038:	b083      	sub	sp, #12
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
 800803e:	460b      	mov	r3, r1
 8008040:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	695a      	ldr	r2, [r3, #20]
 8008046:	887b      	ldrh	r3, [r7, #2]
 8008048:	401a      	ands	r2, r3
 800804a:	887b      	ldrh	r3, [r7, #2]
 800804c:	429a      	cmp	r2, r3
 800804e:	d104      	bne.n	800805a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008050:	887b      	ldrh	r3, [r7, #2]
 8008052:	041a      	lsls	r2, r3, #16
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8008058:	e002      	b.n	8008060 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800805a:	887a      	ldrh	r2, [r7, #2]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	619a      	str	r2, [r3, #24]
}
 8008060:	bf00      	nop
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	4603      	mov	r3, r0
 8008074:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8008076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800807a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800807e:	88fb      	ldrh	r3, [r7, #6]
 8008080:	4013      	ands	r3, r2
 8008082:	2b00      	cmp	r3, #0
 8008084:	d008      	beq.n	8008098 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008086:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800808a:	88fb      	ldrh	r3, [r7, #6]
 800808c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008090:	88fb      	ldrh	r3, [r7, #6]
 8008092:	4618      	mov	r0, r3
 8008094:	f7fb fd8c 	bl	8003bb0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8008098:	bf00      	nop
 800809a:	3708      	adds	r7, #8
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b085      	sub	sp, #20
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80080a8:	4b0d      	ldr	r3, [pc, #52]	; (80080e0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80080aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80080ae:	4a0c      	ldr	r2, [pc, #48]	; (80080e0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80080b0:	f043 0302 	orr.w	r3, r3, #2
 80080b4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80080b8:	4b09      	ldr	r3, [pc, #36]	; (80080e0 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80080ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80080be:	f003 0302 	and.w	r3, r3, #2
 80080c2:	60fb      	str	r3, [r7, #12]
 80080c4:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 80080c6:	4b07      	ldr	r3, [pc, #28]	; (80080e4 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80080c8:	685a      	ldr	r2, [r3, #4]
 80080ca:	4906      	ldr	r1, [pc, #24]	; (80080e4 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	604b      	str	r3, [r1, #4]
}
 80080d2:	bf00      	nop
 80080d4:	3714      	adds	r7, #20
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	58024400 	.word	0x58024400
 80080e4:	58000400 	.word	0x58000400

080080e8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80080e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080ea:	b08f      	sub	sp, #60	; 0x3c
 80080ec:	af0a      	add	r7, sp, #40	; 0x28
 80080ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d101      	bne.n	80080fa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	e116      	b.n	8008328 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8008106:	b2db      	uxtb	r3, r3
 8008108:	2b00      	cmp	r3, #0
 800810a:	d106      	bne.n	800811a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f010 fe4d 	bl	8018db4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2203      	movs	r2, #3
 800811e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800812a:	2b00      	cmp	r3, #0
 800812c:	d102      	bne.n	8008134 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4618      	mov	r0, r3
 800813a:	f009 fe52 	bl	8011de2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	603b      	str	r3, [r7, #0]
 8008144:	687e      	ldr	r6, [r7, #4]
 8008146:	466d      	mov	r5, sp
 8008148:	f106 0410 	add.w	r4, r6, #16
 800814c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800814e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008150:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008152:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008154:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008158:	e885 0003 	stmia.w	r5, {r0, r1}
 800815c:	1d33      	adds	r3, r6, #4
 800815e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008160:	6838      	ldr	r0, [r7, #0]
 8008162:	f009 fd29 	bl	8011bb8 <USB_CoreInit>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d005      	beq.n	8008178 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2202      	movs	r2, #2
 8008170:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008174:	2301      	movs	r3, #1
 8008176:	e0d7      	b.n	8008328 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2100      	movs	r1, #0
 800817e:	4618      	mov	r0, r3
 8008180:	f009 fe40 	bl	8011e04 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008184:	2300      	movs	r3, #0
 8008186:	73fb      	strb	r3, [r7, #15]
 8008188:	e04a      	b.n	8008220 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800818a:	7bfa      	ldrb	r2, [r7, #15]
 800818c:	6879      	ldr	r1, [r7, #4]
 800818e:	4613      	mov	r3, r2
 8008190:	00db      	lsls	r3, r3, #3
 8008192:	1a9b      	subs	r3, r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	440b      	add	r3, r1
 8008198:	333d      	adds	r3, #61	; 0x3d
 800819a:	2201      	movs	r2, #1
 800819c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800819e:	7bfa      	ldrb	r2, [r7, #15]
 80081a0:	6879      	ldr	r1, [r7, #4]
 80081a2:	4613      	mov	r3, r2
 80081a4:	00db      	lsls	r3, r3, #3
 80081a6:	1a9b      	subs	r3, r3, r2
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	440b      	add	r3, r1
 80081ac:	333c      	adds	r3, #60	; 0x3c
 80081ae:	7bfa      	ldrb	r2, [r7, #15]
 80081b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80081b2:	7bfa      	ldrb	r2, [r7, #15]
 80081b4:	7bfb      	ldrb	r3, [r7, #15]
 80081b6:	b298      	uxth	r0, r3
 80081b8:	6879      	ldr	r1, [r7, #4]
 80081ba:	4613      	mov	r3, r2
 80081bc:	00db      	lsls	r3, r3, #3
 80081be:	1a9b      	subs	r3, r3, r2
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	440b      	add	r3, r1
 80081c4:	3342      	adds	r3, #66	; 0x42
 80081c6:	4602      	mov	r2, r0
 80081c8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80081ca:	7bfa      	ldrb	r2, [r7, #15]
 80081cc:	6879      	ldr	r1, [r7, #4]
 80081ce:	4613      	mov	r3, r2
 80081d0:	00db      	lsls	r3, r3, #3
 80081d2:	1a9b      	subs	r3, r3, r2
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	440b      	add	r3, r1
 80081d8:	333f      	adds	r3, #63	; 0x3f
 80081da:	2200      	movs	r2, #0
 80081dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80081de:	7bfa      	ldrb	r2, [r7, #15]
 80081e0:	6879      	ldr	r1, [r7, #4]
 80081e2:	4613      	mov	r3, r2
 80081e4:	00db      	lsls	r3, r3, #3
 80081e6:	1a9b      	subs	r3, r3, r2
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	440b      	add	r3, r1
 80081ec:	3344      	adds	r3, #68	; 0x44
 80081ee:	2200      	movs	r2, #0
 80081f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80081f2:	7bfa      	ldrb	r2, [r7, #15]
 80081f4:	6879      	ldr	r1, [r7, #4]
 80081f6:	4613      	mov	r3, r2
 80081f8:	00db      	lsls	r3, r3, #3
 80081fa:	1a9b      	subs	r3, r3, r2
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	440b      	add	r3, r1
 8008200:	3348      	adds	r3, #72	; 0x48
 8008202:	2200      	movs	r2, #0
 8008204:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008206:	7bfa      	ldrb	r2, [r7, #15]
 8008208:	6879      	ldr	r1, [r7, #4]
 800820a:	4613      	mov	r3, r2
 800820c:	00db      	lsls	r3, r3, #3
 800820e:	1a9b      	subs	r3, r3, r2
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	440b      	add	r3, r1
 8008214:	3350      	adds	r3, #80	; 0x50
 8008216:	2200      	movs	r2, #0
 8008218:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800821a:	7bfb      	ldrb	r3, [r7, #15]
 800821c:	3301      	adds	r3, #1
 800821e:	73fb      	strb	r3, [r7, #15]
 8008220:	7bfa      	ldrb	r2, [r7, #15]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	429a      	cmp	r2, r3
 8008228:	d3af      	bcc.n	800818a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800822a:	2300      	movs	r3, #0
 800822c:	73fb      	strb	r3, [r7, #15]
 800822e:	e044      	b.n	80082ba <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008230:	7bfa      	ldrb	r2, [r7, #15]
 8008232:	6879      	ldr	r1, [r7, #4]
 8008234:	4613      	mov	r3, r2
 8008236:	00db      	lsls	r3, r3, #3
 8008238:	1a9b      	subs	r3, r3, r2
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	440b      	add	r3, r1
 800823e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8008242:	2200      	movs	r2, #0
 8008244:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008246:	7bfa      	ldrb	r2, [r7, #15]
 8008248:	6879      	ldr	r1, [r7, #4]
 800824a:	4613      	mov	r3, r2
 800824c:	00db      	lsls	r3, r3, #3
 800824e:	1a9b      	subs	r3, r3, r2
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	440b      	add	r3, r1
 8008254:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8008258:	7bfa      	ldrb	r2, [r7, #15]
 800825a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800825c:	7bfa      	ldrb	r2, [r7, #15]
 800825e:	6879      	ldr	r1, [r7, #4]
 8008260:	4613      	mov	r3, r2
 8008262:	00db      	lsls	r3, r3, #3
 8008264:	1a9b      	subs	r3, r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	440b      	add	r3, r1
 800826a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800826e:	2200      	movs	r2, #0
 8008270:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008272:	7bfa      	ldrb	r2, [r7, #15]
 8008274:	6879      	ldr	r1, [r7, #4]
 8008276:	4613      	mov	r3, r2
 8008278:	00db      	lsls	r3, r3, #3
 800827a:	1a9b      	subs	r3, r3, r2
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	440b      	add	r3, r1
 8008280:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008284:	2200      	movs	r2, #0
 8008286:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008288:	7bfa      	ldrb	r2, [r7, #15]
 800828a:	6879      	ldr	r1, [r7, #4]
 800828c:	4613      	mov	r3, r2
 800828e:	00db      	lsls	r3, r3, #3
 8008290:	1a9b      	subs	r3, r3, r2
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	440b      	add	r3, r1
 8008296:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800829a:	2200      	movs	r2, #0
 800829c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800829e:	7bfa      	ldrb	r2, [r7, #15]
 80082a0:	6879      	ldr	r1, [r7, #4]
 80082a2:	4613      	mov	r3, r2
 80082a4:	00db      	lsls	r3, r3, #3
 80082a6:	1a9b      	subs	r3, r3, r2
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	440b      	add	r3, r1
 80082ac:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80082b0:	2200      	movs	r2, #0
 80082b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80082b4:	7bfb      	ldrb	r3, [r7, #15]
 80082b6:	3301      	adds	r3, #1
 80082b8:	73fb      	strb	r3, [r7, #15]
 80082ba:	7bfa      	ldrb	r2, [r7, #15]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d3b5      	bcc.n	8008230 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	603b      	str	r3, [r7, #0]
 80082ca:	687e      	ldr	r6, [r7, #4]
 80082cc:	466d      	mov	r5, sp
 80082ce:	f106 0410 	add.w	r4, r6, #16
 80082d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80082d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80082d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80082d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80082da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80082de:	e885 0003 	stmia.w	r5, {r0, r1}
 80082e2:	1d33      	adds	r3, r6, #4
 80082e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80082e6:	6838      	ldr	r0, [r7, #0]
 80082e8:	f009 fdb6 	bl	8011e58 <USB_DevInit>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d005      	beq.n	80082fe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2202      	movs	r2, #2
 80082f6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	e014      	b.n	8008328 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2201      	movs	r2, #1
 800830a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008312:	2b01      	cmp	r3, #1
 8008314:	d102      	bne.n	800831c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f001 f8be 	bl	8009498 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4618      	mov	r0, r3
 8008322:	f00a fdf5 	bl	8012f10 <USB_DevDisconnect>

  return HAL_OK;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	3714      	adds	r7, #20
 800832c:	46bd      	mov	sp, r7
 800832e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008330 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008344:	2b01      	cmp	r3, #1
 8008346:	d101      	bne.n	800834c <HAL_PCD_Start+0x1c>
 8008348:	2302      	movs	r3, #2
 800834a:	e020      	b.n	800838e <HAL_PCD_Start+0x5e>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008358:	2b01      	cmp	r3, #1
 800835a:	d109      	bne.n	8008370 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008360:	2b01      	cmp	r3, #1
 8008362:	d005      	beq.n	8008370 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008368:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4618      	mov	r0, r3
 8008376:	f00a fdb3 	bl	8012ee0 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4618      	mov	r0, r3
 8008380:	f009 fd1e 	bl	8011dc0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008396:	b590      	push	{r4, r7, lr}
 8008398:	b08d      	sub	sp, #52	; 0x34
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083a4:	6a3b      	ldr	r3, [r7, #32]
 80083a6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4618      	mov	r0, r3
 80083ae:	f00a fe5a 	bl	8013066 <USB_GetMode>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	f040 83ca 	bne.w	8008b4e <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4618      	mov	r0, r3
 80083c0:	f00a fdbe 	bl	8012f40 <USB_ReadInterrupts>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	f000 83c0 	beq.w	8008b4c <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4618      	mov	r0, r3
 80083d2:	f00a fdb5 	bl	8012f40 <USB_ReadInterrupts>
 80083d6:	4603      	mov	r3, r0
 80083d8:	f003 0302 	and.w	r3, r3, #2
 80083dc:	2b02      	cmp	r3, #2
 80083de:	d107      	bne.n	80083f0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	695a      	ldr	r2, [r3, #20]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f002 0202 	and.w	r2, r2, #2
 80083ee:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4618      	mov	r0, r3
 80083f6:	f00a fda3 	bl	8012f40 <USB_ReadInterrupts>
 80083fa:	4603      	mov	r3, r0
 80083fc:	f003 0310 	and.w	r3, r3, #16
 8008400:	2b10      	cmp	r3, #16
 8008402:	d161      	bne.n	80084c8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	699a      	ldr	r2, [r3, #24]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f022 0210 	bic.w	r2, r2, #16
 8008412:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8008414:	6a3b      	ldr	r3, [r7, #32]
 8008416:	6a1b      	ldr	r3, [r3, #32]
 8008418:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800841a:	69bb      	ldr	r3, [r7, #24]
 800841c:	f003 020f 	and.w	r2, r3, #15
 8008420:	4613      	mov	r3, r2
 8008422:	00db      	lsls	r3, r3, #3
 8008424:	1a9b      	subs	r3, r3, r2
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	4413      	add	r3, r2
 8008430:	3304      	adds	r3, #4
 8008432:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008434:	69bb      	ldr	r3, [r7, #24]
 8008436:	0c5b      	lsrs	r3, r3, #17
 8008438:	f003 030f 	and.w	r3, r3, #15
 800843c:	2b02      	cmp	r3, #2
 800843e:	d124      	bne.n	800848a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008440:	69ba      	ldr	r2, [r7, #24]
 8008442:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008446:	4013      	ands	r3, r2
 8008448:	2b00      	cmp	r3, #0
 800844a:	d035      	beq.n	80084b8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	091b      	lsrs	r3, r3, #4
 8008454:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008456:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800845a:	b29b      	uxth	r3, r3
 800845c:	461a      	mov	r2, r3
 800845e:	6a38      	ldr	r0, [r7, #32]
 8008460:	f00a fc1b 	bl	8012c9a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	68da      	ldr	r2, [r3, #12]
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	091b      	lsrs	r3, r3, #4
 800846c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008470:	441a      	add	r2, r3
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	699a      	ldr	r2, [r3, #24]
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	091b      	lsrs	r3, r3, #4
 800847e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008482:	441a      	add	r2, r3
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	619a      	str	r2, [r3, #24]
 8008488:	e016      	b.n	80084b8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	0c5b      	lsrs	r3, r3, #17
 800848e:	f003 030f 	and.w	r3, r3, #15
 8008492:	2b06      	cmp	r3, #6
 8008494:	d110      	bne.n	80084b8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800849c:	2208      	movs	r2, #8
 800849e:	4619      	mov	r1, r3
 80084a0:	6a38      	ldr	r0, [r7, #32]
 80084a2:	f00a fbfa 	bl	8012c9a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	699a      	ldr	r2, [r3, #24]
 80084aa:	69bb      	ldr	r3, [r7, #24]
 80084ac:	091b      	lsrs	r3, r3, #4
 80084ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80084b2:	441a      	add	r2, r3
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	699a      	ldr	r2, [r3, #24]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f042 0210 	orr.w	r2, r2, #16
 80084c6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4618      	mov	r0, r3
 80084ce:	f00a fd37 	bl	8012f40 <USB_ReadInterrupts>
 80084d2:	4603      	mov	r3, r0
 80084d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80084dc:	d16e      	bne.n	80085bc <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80084de:	2300      	movs	r3, #0
 80084e0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4618      	mov	r0, r3
 80084e8:	f00a fd3d 	bl	8012f66 <USB_ReadDevAllOutEpInterrupt>
 80084ec:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80084ee:	e062      	b.n	80085b6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80084f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f2:	f003 0301 	and.w	r3, r3, #1
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d057      	beq.n	80085aa <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008500:	b2d2      	uxtb	r2, r2
 8008502:	4611      	mov	r1, r2
 8008504:	4618      	mov	r0, r3
 8008506:	f00a fd62 	bl	8012fce <USB_ReadDevOutEPInterrupt>
 800850a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	f003 0301 	and.w	r3, r3, #1
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00c      	beq.n	8008530 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008518:	015a      	lsls	r2, r3, #5
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	4413      	add	r3, r2
 800851e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008522:	461a      	mov	r2, r3
 8008524:	2301      	movs	r3, #1
 8008526:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008528:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 fe0a 	bl	8009144 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	f003 0308 	and.w	r3, r3, #8
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00c      	beq.n	8008554 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800853a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853c:	015a      	lsls	r2, r3, #5
 800853e:	69fb      	ldr	r3, [r7, #28]
 8008540:	4413      	add	r3, r2
 8008542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008546:	461a      	mov	r2, r3
 8008548:	2308      	movs	r3, #8
 800854a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800854c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 ff04 	bl	800935c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	f003 0310 	and.w	r3, r3, #16
 800855a:	2b00      	cmp	r3, #0
 800855c:	d008      	beq.n	8008570 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800855e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008560:	015a      	lsls	r2, r3, #5
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	4413      	add	r3, r2
 8008566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800856a:	461a      	mov	r2, r3
 800856c:	2310      	movs	r3, #16
 800856e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	f003 0320 	and.w	r3, r3, #32
 8008576:	2b00      	cmp	r3, #0
 8008578:	d008      	beq.n	800858c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800857a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857c:	015a      	lsls	r2, r3, #5
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	4413      	add	r3, r2
 8008582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008586:	461a      	mov	r2, r3
 8008588:	2320      	movs	r3, #32
 800858a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008592:	2b00      	cmp	r3, #0
 8008594:	d009      	beq.n	80085aa <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008598:	015a      	lsls	r2, r3, #5
 800859a:	69fb      	ldr	r3, [r7, #28]
 800859c:	4413      	add	r3, r2
 800859e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085a2:	461a      	mov	r2, r3
 80085a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80085a8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80085aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ac:	3301      	adds	r3, #1
 80085ae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80085b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b2:	085b      	lsrs	r3, r3, #1
 80085b4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80085b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d199      	bne.n	80084f0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4618      	mov	r0, r3
 80085c2:	f00a fcbd 	bl	8012f40 <USB_ReadInterrupts>
 80085c6:	4603      	mov	r3, r0
 80085c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80085d0:	f040 80c0 	bne.w	8008754 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4618      	mov	r0, r3
 80085da:	f00a fcde 	bl	8012f9a <USB_ReadDevAllInEpInterrupt>
 80085de:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80085e0:	2300      	movs	r3, #0
 80085e2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80085e4:	e0b2      	b.n	800874c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80085e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e8:	f003 0301 	and.w	r3, r3, #1
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f000 80a7 	beq.w	8008740 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085f8:	b2d2      	uxtb	r2, r2
 80085fa:	4611      	mov	r1, r2
 80085fc:	4618      	mov	r0, r3
 80085fe:	f00a fd04 	bl	801300a <USB_ReadDevInEPInterrupt>
 8008602:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	f003 0301 	and.w	r3, r3, #1
 800860a:	2b00      	cmp	r3, #0
 800860c:	d057      	beq.n	80086be <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800860e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008610:	f003 030f 	and.w	r3, r3, #15
 8008614:	2201      	movs	r2, #1
 8008616:	fa02 f303 	lsl.w	r3, r2, r3
 800861a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008622:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	43db      	mvns	r3, r3
 8008628:	69f9      	ldr	r1, [r7, #28]
 800862a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800862e:	4013      	ands	r3, r2
 8008630:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008634:	015a      	lsls	r2, r3, #5
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	4413      	add	r3, r2
 800863a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800863e:	461a      	mov	r2, r3
 8008640:	2301      	movs	r3, #1
 8008642:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	2b01      	cmp	r3, #1
 800864a:	d132      	bne.n	80086b2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800864c:	6879      	ldr	r1, [r7, #4]
 800864e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008650:	4613      	mov	r3, r2
 8008652:	00db      	lsls	r3, r3, #3
 8008654:	1a9b      	subs	r3, r3, r2
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	440b      	add	r3, r1
 800865a:	3348      	adds	r3, #72	; 0x48
 800865c:	6819      	ldr	r1, [r3, #0]
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008662:	4613      	mov	r3, r2
 8008664:	00db      	lsls	r3, r3, #3
 8008666:	1a9b      	subs	r3, r3, r2
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	4403      	add	r3, r0
 800866c:	3344      	adds	r3, #68	; 0x44
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4419      	add	r1, r3
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008676:	4613      	mov	r3, r2
 8008678:	00db      	lsls	r3, r3, #3
 800867a:	1a9b      	subs	r3, r3, r2
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	4403      	add	r3, r0
 8008680:	3348      	adds	r3, #72	; 0x48
 8008682:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008686:	2b00      	cmp	r3, #0
 8008688:	d113      	bne.n	80086b2 <HAL_PCD_IRQHandler+0x31c>
 800868a:	6879      	ldr	r1, [r7, #4]
 800868c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800868e:	4613      	mov	r3, r2
 8008690:	00db      	lsls	r3, r3, #3
 8008692:	1a9b      	subs	r3, r3, r2
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	440b      	add	r3, r1
 8008698:	3350      	adds	r3, #80	; 0x50
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d108      	bne.n	80086b2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6818      	ldr	r0, [r3, #0]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80086aa:	461a      	mov	r2, r3
 80086ac:	2101      	movs	r1, #1
 80086ae:	f00a fd0d 	bl	80130cc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80086b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	4619      	mov	r1, r3
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f010 fbfa 	bl	8018eb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	f003 0308 	and.w	r3, r3, #8
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d008      	beq.n	80086da <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80086c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ca:	015a      	lsls	r2, r3, #5
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	4413      	add	r3, r2
 80086d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086d4:	461a      	mov	r2, r3
 80086d6:	2308      	movs	r3, #8
 80086d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	f003 0310 	and.w	r3, r3, #16
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d008      	beq.n	80086f6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80086e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e6:	015a      	lsls	r2, r3, #5
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	4413      	add	r3, r2
 80086ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086f0:	461a      	mov	r2, r3
 80086f2:	2310      	movs	r3, #16
 80086f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d008      	beq.n	8008712 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008702:	015a      	lsls	r2, r3, #5
 8008704:	69fb      	ldr	r3, [r7, #28]
 8008706:	4413      	add	r3, r2
 8008708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800870c:	461a      	mov	r2, r3
 800870e:	2340      	movs	r3, #64	; 0x40
 8008710:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	f003 0302 	and.w	r3, r3, #2
 8008718:	2b00      	cmp	r3, #0
 800871a:	d008      	beq.n	800872e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800871c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871e:	015a      	lsls	r2, r3, #5
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	4413      	add	r3, r2
 8008724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008728:	461a      	mov	r2, r3
 800872a:	2302      	movs	r3, #2
 800872c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008734:	2b00      	cmp	r3, #0
 8008736:	d003      	beq.n	8008740 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008738:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 fc75 	bl	800902a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008742:	3301      	adds	r3, #1
 8008744:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008748:	085b      	lsrs	r3, r3, #1
 800874a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800874c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874e:	2b00      	cmp	r3, #0
 8008750:	f47f af49 	bne.w	80085e6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4618      	mov	r0, r3
 800875a:	f00a fbf1 	bl	8012f40 <USB_ReadInterrupts>
 800875e:	4603      	mov	r3, r0
 8008760:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008764:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008768:	d122      	bne.n	80087b0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	69fa      	ldr	r2, [r7, #28]
 8008774:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008778:	f023 0301 	bic.w	r3, r3, #1
 800877c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8008784:	2b01      	cmp	r3, #1
 8008786:	d108      	bne.n	800879a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008790:	2100      	movs	r1, #0
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 fea4 	bl	80094e0 <HAL_PCDEx_LPM_Callback>
 8008798:	e002      	b.n	80087a0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f010 fc00 	bl	8018fa0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	695a      	ldr	r2, [r3, #20]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80087ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4618      	mov	r0, r3
 80087b6:	f00a fbc3 	bl	8012f40 <USB_ReadInterrupts>
 80087ba:	4603      	mov	r3, r0
 80087bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087c4:	d112      	bne.n	80087ec <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	f003 0301 	and.w	r3, r3, #1
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d102      	bne.n	80087dc <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f010 fbbc 	bl	8018f54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	695a      	ldr	r2, [r3, #20]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80087ea:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4618      	mov	r0, r3
 80087f2:	f00a fba5 	bl	8012f40 <USB_ReadInterrupts>
 80087f6:	4603      	mov	r3, r0
 80087f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008800:	d121      	bne.n	8008846 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	695a      	ldr	r2, [r3, #20]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008810:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8008818:	2b00      	cmp	r3, #0
 800881a:	d111      	bne.n	8008840 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800882a:	089b      	lsrs	r3, r3, #2
 800882c:	f003 020f 	and.w	r2, r3, #15
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008836:	2101      	movs	r1, #1
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 fe51 	bl	80094e0 <HAL_PCDEx_LPM_Callback>
 800883e:	e002      	b.n	8008846 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f010 fb87 	bl	8018f54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4618      	mov	r0, r3
 800884c:	f00a fb78 	bl	8012f40 <USB_ReadInterrupts>
 8008850:	4603      	mov	r3, r0
 8008852:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800885a:	f040 80c7 	bne.w	80089ec <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800885e:	69fb      	ldr	r3, [r7, #28]
 8008860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	69fa      	ldr	r2, [r7, #28]
 8008868:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800886c:	f023 0301 	bic.w	r3, r3, #1
 8008870:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2110      	movs	r1, #16
 8008878:	4618      	mov	r0, r3
 800887a:	f009 fc4b 	bl	8012114 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800887e:	2300      	movs	r3, #0
 8008880:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008882:	e056      	b.n	8008932 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008886:	015a      	lsls	r2, r3, #5
 8008888:	69fb      	ldr	r3, [r7, #28]
 800888a:	4413      	add	r3, r2
 800888c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008890:	461a      	mov	r2, r3
 8008892:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008896:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800889a:	015a      	lsls	r2, r3, #5
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	4413      	add	r3, r2
 80088a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088a8:	0151      	lsls	r1, r2, #5
 80088aa:	69fa      	ldr	r2, [r7, #28]
 80088ac:	440a      	add	r2, r1
 80088ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80088b6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80088b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ba:	015a      	lsls	r2, r3, #5
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	4413      	add	r3, r2
 80088c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088c8:	0151      	lsls	r1, r2, #5
 80088ca:	69fa      	ldr	r2, [r7, #28]
 80088cc:	440a      	add	r2, r1
 80088ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80088d6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80088d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088da:	015a      	lsls	r2, r3, #5
 80088dc:	69fb      	ldr	r3, [r7, #28]
 80088de:	4413      	add	r3, r2
 80088e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088e4:	461a      	mov	r2, r3
 80088e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80088ea:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80088ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ee:	015a      	lsls	r2, r3, #5
 80088f0:	69fb      	ldr	r3, [r7, #28]
 80088f2:	4413      	add	r3, r2
 80088f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088fc:	0151      	lsls	r1, r2, #5
 80088fe:	69fa      	ldr	r2, [r7, #28]
 8008900:	440a      	add	r2, r1
 8008902:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008906:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800890a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800890c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800890e:	015a      	lsls	r2, r3, #5
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	4413      	add	r3, r2
 8008914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800891c:	0151      	lsls	r1, r2, #5
 800891e:	69fa      	ldr	r2, [r7, #28]
 8008920:	440a      	add	r2, r1
 8008922:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008926:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800892a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800892c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800892e:	3301      	adds	r3, #1
 8008930:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008938:	429a      	cmp	r2, r3
 800893a:	d3a3      	bcc.n	8008884 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800893c:	69fb      	ldr	r3, [r7, #28]
 800893e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008942:	69db      	ldr	r3, [r3, #28]
 8008944:	69fa      	ldr	r2, [r7, #28]
 8008946:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800894a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800894e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008954:	2b00      	cmp	r3, #0
 8008956:	d016      	beq.n	8008986 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800895e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008962:	69fa      	ldr	r2, [r7, #28]
 8008964:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008968:	f043 030b 	orr.w	r3, r3, #11
 800896c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008978:	69fa      	ldr	r2, [r7, #28]
 800897a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800897e:	f043 030b 	orr.w	r3, r3, #11
 8008982:	6453      	str	r3, [r2, #68]	; 0x44
 8008984:	e015      	b.n	80089b2 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800898c:	695a      	ldr	r2, [r3, #20]
 800898e:	69fb      	ldr	r3, [r7, #28]
 8008990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008994:	4619      	mov	r1, r3
 8008996:	f242 032b 	movw	r3, #8235	; 0x202b
 800899a:	4313      	orrs	r3, r2
 800899c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089a4:	691b      	ldr	r3, [r3, #16]
 80089a6:	69fa      	ldr	r2, [r7, #28]
 80089a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089ac:	f043 030b 	orr.w	r3, r3, #11
 80089b0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	69fa      	ldr	r2, [r7, #28]
 80089bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089c0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80089c4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6818      	ldr	r0, [r3, #0]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80089d6:	461a      	mov	r2, r3
 80089d8:	f00a fb78 	bl	80130cc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	695a      	ldr	r2, [r3, #20]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80089ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4618      	mov	r0, r3
 80089f2:	f00a faa5 	bl	8012f40 <USB_ReadInterrupts>
 80089f6:	4603      	mov	r3, r0
 80089f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80089fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a00:	d124      	bne.n	8008a4c <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4618      	mov	r0, r3
 8008a08:	f00a fb3c 	bl	8013084 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4618      	mov	r0, r3
 8008a12:	f009 fbe0 	bl	80121d6 <USB_GetDevSpeed>
 8008a16:	4603      	mov	r3, r0
 8008a18:	461a      	mov	r2, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681c      	ldr	r4, [r3, #0]
 8008a22:	f001 fdd9 	bl	800a5d8 <HAL_RCC_GetHCLKFreq>
 8008a26:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	461a      	mov	r2, r3
 8008a30:	4620      	mov	r0, r4
 8008a32:	f009 f923 	bl	8011c7c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f010 fa63 	bl	8018f02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	695a      	ldr	r2, [r3, #20]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008a4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4618      	mov	r0, r3
 8008a52:	f00a fa75 	bl	8012f40 <USB_ReadInterrupts>
 8008a56:	4603      	mov	r3, r0
 8008a58:	f003 0308 	and.w	r3, r3, #8
 8008a5c:	2b08      	cmp	r3, #8
 8008a5e:	d10a      	bne.n	8008a76 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f010 fa40 	bl	8018ee6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	695a      	ldr	r2, [r3, #20]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f002 0208 	and.w	r2, r2, #8
 8008a74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f00a fa60 	bl	8012f40 <USB_ReadInterrupts>
 8008a80:	4603      	mov	r3, r0
 8008a82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a8a:	d10f      	bne.n	8008aac <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	4619      	mov	r1, r3
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f010 faa2 	bl	8018fe0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	695a      	ldr	r2, [r3, #20]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008aaa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f00a fa45 	bl	8012f40 <USB_ReadInterrupts>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008abc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ac0:	d10f      	bne.n	8008ae2 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	4619      	mov	r1, r3
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f010 fa75 	bl	8018fbc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	695a      	ldr	r2, [r3, #20]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008ae0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f00a fa2a 	bl	8012f40 <USB_ReadInterrupts>
 8008aec:	4603      	mov	r3, r0
 8008aee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008af6:	d10a      	bne.n	8008b0e <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f010 fa83 	bl	8019004 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	695a      	ldr	r2, [r3, #20]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008b0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4618      	mov	r0, r3
 8008b14:	f00a fa14 	bl	8012f40 <USB_ReadInterrupts>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	f003 0304 	and.w	r3, r3, #4
 8008b1e:	2b04      	cmp	r3, #4
 8008b20:	d115      	bne.n	8008b4e <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008b2a:	69bb      	ldr	r3, [r7, #24]
 8008b2c:	f003 0304 	and.w	r3, r3, #4
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d002      	beq.n	8008b3a <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f010 fa73 	bl	8019020 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	6859      	ldr	r1, [r3, #4]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	69ba      	ldr	r2, [r7, #24]
 8008b46:	430a      	orrs	r2, r1
 8008b48:	605a      	str	r2, [r3, #4]
 8008b4a:	e000      	b.n	8008b4e <HAL_PCD_IRQHandler+0x7b8>
      return;
 8008b4c:	bf00      	nop
    }
  }
}
 8008b4e:	3734      	adds	r7, #52	; 0x34
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd90      	pop	{r4, r7, pc}

08008b54 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d101      	bne.n	8008b6e <HAL_PCD_SetAddress+0x1a>
 8008b6a:	2302      	movs	r3, #2
 8008b6c:	e013      	b.n	8008b96 <HAL_PCD_SetAddress+0x42>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2201      	movs	r2, #1
 8008b72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	78fa      	ldrb	r2, [r7, #3]
 8008b7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	78fa      	ldrb	r2, [r7, #3]
 8008b84:	4611      	mov	r1, r2
 8008b86:	4618      	mov	r0, r3
 8008b88:	f00a f984 	bl	8012e94 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3708      	adds	r7, #8
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}

08008b9e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8008b9e:	b580      	push	{r7, lr}
 8008ba0:	b084      	sub	sp, #16
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
 8008ba6:	4608      	mov	r0, r1
 8008ba8:	4611      	mov	r1, r2
 8008baa:	461a      	mov	r2, r3
 8008bac:	4603      	mov	r3, r0
 8008bae:	70fb      	strb	r3, [r7, #3]
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	803b      	strh	r3, [r7, #0]
 8008bb4:	4613      	mov	r3, r2
 8008bb6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008bbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	da0f      	bge.n	8008be4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008bc4:	78fb      	ldrb	r3, [r7, #3]
 8008bc6:	f003 020f 	and.w	r2, r3, #15
 8008bca:	4613      	mov	r3, r2
 8008bcc:	00db      	lsls	r3, r3, #3
 8008bce:	1a9b      	subs	r3, r3, r2
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	3338      	adds	r3, #56	; 0x38
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	3304      	adds	r3, #4
 8008bda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2201      	movs	r2, #1
 8008be0:	705a      	strb	r2, [r3, #1]
 8008be2:	e00f      	b.n	8008c04 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008be4:	78fb      	ldrb	r3, [r7, #3]
 8008be6:	f003 020f 	and.w	r2, r3, #15
 8008bea:	4613      	mov	r3, r2
 8008bec:	00db      	lsls	r3, r3, #3
 8008bee:	1a9b      	subs	r3, r3, r2
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	3304      	adds	r3, #4
 8008bfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2200      	movs	r2, #0
 8008c02:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008c04:	78fb      	ldrb	r3, [r7, #3]
 8008c06:	f003 030f 	and.w	r3, r3, #15
 8008c0a:	b2da      	uxtb	r2, r3
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008c10:	883a      	ldrh	r2, [r7, #0]
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	78ba      	ldrb	r2, [r7, #2]
 8008c1a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	785b      	ldrb	r3, [r3, #1]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d004      	beq.n	8008c2e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008c2e:	78bb      	ldrb	r3, [r7, #2]
 8008c30:	2b02      	cmp	r3, #2
 8008c32:	d102      	bne.n	8008c3a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2200      	movs	r2, #0
 8008c38:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d101      	bne.n	8008c48 <HAL_PCD_EP_Open+0xaa>
 8008c44:	2302      	movs	r3, #2
 8008c46:	e00e      	b.n	8008c66 <HAL_PCD_EP_Open+0xc8>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	68f9      	ldr	r1, [r7, #12]
 8008c56:	4618      	mov	r0, r3
 8008c58:	f009 fae2 	bl	8012220 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8008c64:	7afb      	ldrb	r3, [r7, #11]
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3710      	adds	r7, #16
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b084      	sub	sp, #16
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
 8008c76:	460b      	mov	r3, r1
 8008c78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008c7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	da0f      	bge.n	8008ca2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c82:	78fb      	ldrb	r3, [r7, #3]
 8008c84:	f003 020f 	and.w	r2, r3, #15
 8008c88:	4613      	mov	r3, r2
 8008c8a:	00db      	lsls	r3, r3, #3
 8008c8c:	1a9b      	subs	r3, r3, r2
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	3338      	adds	r3, #56	; 0x38
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	4413      	add	r3, r2
 8008c96:	3304      	adds	r3, #4
 8008c98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	705a      	strb	r2, [r3, #1]
 8008ca0:	e00f      	b.n	8008cc2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008ca2:	78fb      	ldrb	r3, [r7, #3]
 8008ca4:	f003 020f 	and.w	r2, r3, #15
 8008ca8:	4613      	mov	r3, r2
 8008caa:	00db      	lsls	r3, r3, #3
 8008cac:	1a9b      	subs	r3, r3, r2
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	3304      	adds	r3, #4
 8008cba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008cc2:	78fb      	ldrb	r3, [r7, #3]
 8008cc4:	f003 030f 	and.w	r3, r3, #15
 8008cc8:	b2da      	uxtb	r2, r3
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d101      	bne.n	8008cdc <HAL_PCD_EP_Close+0x6e>
 8008cd8:	2302      	movs	r3, #2
 8008cda:	e00e      	b.n	8008cfa <HAL_PCD_EP_Close+0x8c>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	68f9      	ldr	r1, [r7, #12]
 8008cea:	4618      	mov	r0, r3
 8008cec:	f009 fb20 	bl	8012330 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b086      	sub	sp, #24
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	60f8      	str	r0, [r7, #12]
 8008d0a:	607a      	str	r2, [r7, #4]
 8008d0c:	603b      	str	r3, [r7, #0]
 8008d0e:	460b      	mov	r3, r1
 8008d10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008d12:	7afb      	ldrb	r3, [r7, #11]
 8008d14:	f003 020f 	and.w	r2, r3, #15
 8008d18:	4613      	mov	r3, r2
 8008d1a:	00db      	lsls	r3, r3, #3
 8008d1c:	1a9b      	subs	r3, r3, r2
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008d24:	68fa      	ldr	r2, [r7, #12]
 8008d26:	4413      	add	r3, r2
 8008d28:	3304      	adds	r3, #4
 8008d2a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	683a      	ldr	r2, [r7, #0]
 8008d36:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	2200      	movs	r2, #0
 8008d42:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008d44:	7afb      	ldrb	r3, [r7, #11]
 8008d46:	f003 030f 	and.w	r3, r3, #15
 8008d4a:	b2da      	uxtb	r2, r3
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	691b      	ldr	r3, [r3, #16]
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d102      	bne.n	8008d5e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008d5e:	7afb      	ldrb	r3, [r7, #11]
 8008d60:	f003 030f 	and.w	r3, r3, #15
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d109      	bne.n	8008d7c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6818      	ldr	r0, [r3, #0]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	691b      	ldr	r3, [r3, #16]
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	461a      	mov	r2, r3
 8008d74:	6979      	ldr	r1, [r7, #20]
 8008d76:	f009 fe03 	bl	8012980 <USB_EP0StartXfer>
 8008d7a:	e008      	b.n	8008d8e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6818      	ldr	r0, [r3, #0]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	691b      	ldr	r3, [r3, #16]
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	461a      	mov	r2, r3
 8008d88:	6979      	ldr	r1, [r7, #20]
 8008d8a:	f009 fbad 	bl	80124e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008d8e:	2300      	movs	r3, #0
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3718      	adds	r7, #24
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	460b      	mov	r3, r1
 8008da2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008da4:	78fb      	ldrb	r3, [r7, #3]
 8008da6:	f003 020f 	and.w	r2, r3, #15
 8008daa:	6879      	ldr	r1, [r7, #4]
 8008dac:	4613      	mov	r3, r2
 8008dae:	00db      	lsls	r3, r3, #3
 8008db0:	1a9b      	subs	r3, r3, r2
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	440b      	add	r3, r1
 8008db6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008dba:	681b      	ldr	r3, [r3, #0]
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b086      	sub	sp, #24
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	60f8      	str	r0, [r7, #12]
 8008dd0:	607a      	str	r2, [r7, #4]
 8008dd2:	603b      	str	r3, [r7, #0]
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008dd8:	7afb      	ldrb	r3, [r7, #11]
 8008dda:	f003 020f 	and.w	r2, r3, #15
 8008dde:	4613      	mov	r3, r2
 8008de0:	00db      	lsls	r3, r3, #3
 8008de2:	1a9b      	subs	r3, r3, r2
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	3338      	adds	r3, #56	; 0x38
 8008de8:	68fa      	ldr	r2, [r7, #12]
 8008dea:	4413      	add	r3, r2
 8008dec:	3304      	adds	r3, #4
 8008dee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	683a      	ldr	r2, [r7, #0]
 8008dfa:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	2201      	movs	r2, #1
 8008e06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008e08:	7afb      	ldrb	r3, [r7, #11]
 8008e0a:	f003 030f 	and.w	r3, r3, #15
 8008e0e:	b2da      	uxtb	r2, r3
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	691b      	ldr	r3, [r3, #16]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d102      	bne.n	8008e22 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008e22:	7afb      	ldrb	r3, [r7, #11]
 8008e24:	f003 030f 	and.w	r3, r3, #15
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d109      	bne.n	8008e40 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6818      	ldr	r0, [r3, #0]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	461a      	mov	r2, r3
 8008e38:	6979      	ldr	r1, [r7, #20]
 8008e3a:	f009 fda1 	bl	8012980 <USB_EP0StartXfer>
 8008e3e:	e008      	b.n	8008e52 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6818      	ldr	r0, [r3, #0]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	6979      	ldr	r1, [r7, #20]
 8008e4e:	f009 fb4b 	bl	80124e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008e52:	2300      	movs	r3, #0
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3718      	adds	r7, #24
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	460b      	mov	r3, r1
 8008e66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008e68:	78fb      	ldrb	r3, [r7, #3]
 8008e6a:	f003 020f 	and.w	r2, r3, #15
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d901      	bls.n	8008e7a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008e76:	2301      	movs	r3, #1
 8008e78:	e050      	b.n	8008f1c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008e7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	da0f      	bge.n	8008ea2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e82:	78fb      	ldrb	r3, [r7, #3]
 8008e84:	f003 020f 	and.w	r2, r3, #15
 8008e88:	4613      	mov	r3, r2
 8008e8a:	00db      	lsls	r3, r3, #3
 8008e8c:	1a9b      	subs	r3, r3, r2
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	3338      	adds	r3, #56	; 0x38
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	4413      	add	r3, r2
 8008e96:	3304      	adds	r3, #4
 8008e98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	705a      	strb	r2, [r3, #1]
 8008ea0:	e00d      	b.n	8008ebe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008ea2:	78fa      	ldrb	r2, [r7, #3]
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	00db      	lsls	r3, r3, #3
 8008ea8:	1a9b      	subs	r3, r3, r2
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	4413      	add	r3, r2
 8008eb4:	3304      	adds	r3, #4
 8008eb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008ec4:	78fb      	ldrb	r3, [r7, #3]
 8008ec6:	f003 030f 	and.w	r3, r3, #15
 8008eca:	b2da      	uxtb	r2, r3
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008ed6:	2b01      	cmp	r3, #1
 8008ed8:	d101      	bne.n	8008ede <HAL_PCD_EP_SetStall+0x82>
 8008eda:	2302      	movs	r3, #2
 8008edc:	e01e      	b.n	8008f1c <HAL_PCD_EP_SetStall+0xc0>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	68f9      	ldr	r1, [r7, #12]
 8008eec:	4618      	mov	r0, r3
 8008eee:	f009 fefd 	bl	8012cec <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008ef2:	78fb      	ldrb	r3, [r7, #3]
 8008ef4:	f003 030f 	and.w	r3, r3, #15
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d10a      	bne.n	8008f12 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6818      	ldr	r0, [r3, #0]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	691b      	ldr	r3, [r3, #16]
 8008f04:	b2d9      	uxtb	r1, r3
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	f00a f8dd 	bl	80130cc <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008f1a:	2300      	movs	r3, #0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3710      	adds	r7, #16
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b084      	sub	sp, #16
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008f30:	78fb      	ldrb	r3, [r7, #3]
 8008f32:	f003 020f 	and.w	r2, r3, #15
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d901      	bls.n	8008f42 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e042      	b.n	8008fc8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008f42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	da0f      	bge.n	8008f6a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f4a:	78fb      	ldrb	r3, [r7, #3]
 8008f4c:	f003 020f 	and.w	r2, r3, #15
 8008f50:	4613      	mov	r3, r2
 8008f52:	00db      	lsls	r3, r3, #3
 8008f54:	1a9b      	subs	r3, r3, r2
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	3338      	adds	r3, #56	; 0x38
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	3304      	adds	r3, #4
 8008f60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2201      	movs	r2, #1
 8008f66:	705a      	strb	r2, [r3, #1]
 8008f68:	e00f      	b.n	8008f8a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f6a:	78fb      	ldrb	r3, [r7, #3]
 8008f6c:	f003 020f 	and.w	r2, r3, #15
 8008f70:	4613      	mov	r3, r2
 8008f72:	00db      	lsls	r3, r3, #3
 8008f74:	1a9b      	subs	r3, r3, r2
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	4413      	add	r3, r2
 8008f80:	3304      	adds	r3, #4
 8008f82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2200      	movs	r2, #0
 8008f88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008f90:	78fb      	ldrb	r3, [r7, #3]
 8008f92:	f003 030f 	and.w	r3, r3, #15
 8008f96:	b2da      	uxtb	r2, r3
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d101      	bne.n	8008faa <HAL_PCD_EP_ClrStall+0x86>
 8008fa6:	2302      	movs	r3, #2
 8008fa8:	e00e      	b.n	8008fc8 <HAL_PCD_EP_ClrStall+0xa4>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2201      	movs	r2, #1
 8008fae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	68f9      	ldr	r1, [r7, #12]
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f009 ff05 	bl	8012dc8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008fc6:	2300      	movs	r3, #0
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3710      	adds	r7, #16
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	460b      	mov	r3, r1
 8008fda:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d101      	bne.n	8008fea <HAL_PCD_EP_Flush+0x1a>
 8008fe6:	2302      	movs	r3, #2
 8008fe8:	e01b      	b.n	8009022 <HAL_PCD_EP_Flush+0x52>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2201      	movs	r2, #1
 8008fee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8008ff2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	da09      	bge.n	800900e <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681a      	ldr	r2, [r3, #0]
 8008ffe:	78fb      	ldrb	r3, [r7, #3]
 8009000:	f003 030f 	and.w	r3, r3, #15
 8009004:	4619      	mov	r1, r3
 8009006:	4610      	mov	r0, r2
 8009008:	f009 f884 	bl	8012114 <USB_FlushTxFifo>
 800900c:	e004      	b.n	8009018 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4618      	mov	r0, r3
 8009014:	f009 f8a4 	bl	8012160 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3708      	adds	r7, #8
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b08a      	sub	sp, #40	; 0x28
 800902e:	af02      	add	r7, sp, #8
 8009030:	6078      	str	r0, [r7, #4]
 8009032:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800903e:	683a      	ldr	r2, [r7, #0]
 8009040:	4613      	mov	r3, r2
 8009042:	00db      	lsls	r3, r3, #3
 8009044:	1a9b      	subs	r3, r3, r2
 8009046:	009b      	lsls	r3, r3, #2
 8009048:	3338      	adds	r3, #56	; 0x38
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	4413      	add	r3, r2
 800904e:	3304      	adds	r3, #4
 8009050:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	699a      	ldr	r2, [r3, #24]
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	695b      	ldr	r3, [r3, #20]
 800905a:	429a      	cmp	r2, r3
 800905c:	d901      	bls.n	8009062 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800905e:	2301      	movs	r3, #1
 8009060:	e06c      	b.n	800913c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	695a      	ldr	r2, [r3, #20]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	699b      	ldr	r3, [r3, #24]
 800906a:	1ad3      	subs	r3, r2, r3
 800906c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	69fa      	ldr	r2, [r7, #28]
 8009074:	429a      	cmp	r2, r3
 8009076:	d902      	bls.n	800907e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	689b      	ldr	r3, [r3, #8]
 800907c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800907e:	69fb      	ldr	r3, [r7, #28]
 8009080:	3303      	adds	r3, #3
 8009082:	089b      	lsrs	r3, r3, #2
 8009084:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009086:	e02b      	b.n	80090e0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	695a      	ldr	r2, [r3, #20]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	699b      	ldr	r3, [r3, #24]
 8009090:	1ad3      	subs	r3, r2, r3
 8009092:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	69fa      	ldr	r2, [r7, #28]
 800909a:	429a      	cmp	r2, r3
 800909c:	d902      	bls.n	80090a4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	3303      	adds	r3, #3
 80090a8:	089b      	lsrs	r3, r3, #2
 80090aa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	68d9      	ldr	r1, [r3, #12]
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	b2da      	uxtb	r2, r3
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	9300      	str	r3, [sp, #0]
 80090c0:	4603      	mov	r3, r0
 80090c2:	6978      	ldr	r0, [r7, #20]
 80090c4:	f009 fdb4 	bl	8012c30 <USB_WritePacket>

    ep->xfer_buff  += len;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	68da      	ldr	r2, [r3, #12]
 80090cc:	69fb      	ldr	r3, [r7, #28]
 80090ce:	441a      	add	r2, r3
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	699a      	ldr	r2, [r3, #24]
 80090d8:	69fb      	ldr	r3, [r7, #28]
 80090da:	441a      	add	r2, r3
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	015a      	lsls	r2, r3, #5
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	4413      	add	r3, r2
 80090e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090ec:	699b      	ldr	r3, [r3, #24]
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	69ba      	ldr	r2, [r7, #24]
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d809      	bhi.n	800910a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	699a      	ldr	r2, [r3, #24]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80090fe:	429a      	cmp	r2, r3
 8009100:	d203      	bcs.n	800910a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	695b      	ldr	r3, [r3, #20]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d1be      	bne.n	8009088 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	695a      	ldr	r2, [r3, #20]
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	699b      	ldr	r3, [r3, #24]
 8009112:	429a      	cmp	r2, r3
 8009114:	d811      	bhi.n	800913a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	f003 030f 	and.w	r3, r3, #15
 800911c:	2201      	movs	r2, #1
 800911e:	fa02 f303 	lsl.w	r3, r2, r3
 8009122:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800912a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	43db      	mvns	r3, r3
 8009130:	6939      	ldr	r1, [r7, #16]
 8009132:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009136:	4013      	ands	r3, r2
 8009138:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800913a:	2300      	movs	r3, #0
}
 800913c:	4618      	mov	r0, r3
 800913e:	3720      	adds	r7, #32
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b086      	sub	sp, #24
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	333c      	adds	r3, #60	; 0x3c
 800915c:	3304      	adds	r3, #4
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	015a      	lsls	r2, r3, #5
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	4413      	add	r3, r2
 800916a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	691b      	ldr	r3, [r3, #16]
 8009176:	2b01      	cmp	r3, #1
 8009178:	f040 80a0 	bne.w	80092bc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	f003 0308 	and.w	r3, r3, #8
 8009182:	2b00      	cmp	r3, #0
 8009184:	d015      	beq.n	80091b2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	4a72      	ldr	r2, [pc, #456]	; (8009354 <PCD_EP_OutXfrComplete_int+0x210>)
 800918a:	4293      	cmp	r3, r2
 800918c:	f240 80dd 	bls.w	800934a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009196:	2b00      	cmp	r3, #0
 8009198:	f000 80d7 	beq.w	800934a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	015a      	lsls	r2, r3, #5
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	4413      	add	r3, r2
 80091a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091a8:	461a      	mov	r2, r3
 80091aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091ae:	6093      	str	r3, [r2, #8]
 80091b0:	e0cb      	b.n	800934a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	f003 0320 	and.w	r3, r3, #32
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d009      	beq.n	80091d0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	015a      	lsls	r2, r3, #5
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	4413      	add	r3, r2
 80091c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091c8:	461a      	mov	r2, r3
 80091ca:	2320      	movs	r3, #32
 80091cc:	6093      	str	r3, [r2, #8]
 80091ce:	e0bc      	b.n	800934a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	f040 80b7 	bne.w	800934a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	4a5d      	ldr	r2, [pc, #372]	; (8009354 <PCD_EP_OutXfrComplete_int+0x210>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d90f      	bls.n	8009204 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d00a      	beq.n	8009204 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	015a      	lsls	r2, r3, #5
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	4413      	add	r3, r2
 80091f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091fa:	461a      	mov	r2, r3
 80091fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009200:	6093      	str	r3, [r2, #8]
 8009202:	e0a2      	b.n	800934a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8009204:	6879      	ldr	r1, [r7, #4]
 8009206:	683a      	ldr	r2, [r7, #0]
 8009208:	4613      	mov	r3, r2
 800920a:	00db      	lsls	r3, r3, #3
 800920c:	1a9b      	subs	r3, r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	440b      	add	r3, r1
 8009212:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009216:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	0159      	lsls	r1, r3, #5
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	440b      	add	r3, r1
 8009220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009224:	691b      	ldr	r3, [r3, #16]
 8009226:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800922a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	683a      	ldr	r2, [r7, #0]
 8009230:	4613      	mov	r3, r2
 8009232:	00db      	lsls	r3, r3, #3
 8009234:	1a9b      	subs	r3, r3, r2
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	4403      	add	r3, r0
 800923a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800923e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8009240:	6879      	ldr	r1, [r7, #4]
 8009242:	683a      	ldr	r2, [r7, #0]
 8009244:	4613      	mov	r3, r2
 8009246:	00db      	lsls	r3, r3, #3
 8009248:	1a9b      	subs	r3, r3, r2
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	440b      	add	r3, r1
 800924e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009252:	6819      	ldr	r1, [r3, #0]
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	683a      	ldr	r2, [r7, #0]
 8009258:	4613      	mov	r3, r2
 800925a:	00db      	lsls	r3, r3, #3
 800925c:	1a9b      	subs	r3, r3, r2
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	4403      	add	r3, r0
 8009262:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4419      	add	r1, r3
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	683a      	ldr	r2, [r7, #0]
 800926e:	4613      	mov	r3, r2
 8009270:	00db      	lsls	r3, r3, #3
 8009272:	1a9b      	subs	r3, r3, r2
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	4403      	add	r3, r0
 8009278:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800927c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d114      	bne.n	80092ae <PCD_EP_OutXfrComplete_int+0x16a>
 8009284:	6879      	ldr	r1, [r7, #4]
 8009286:	683a      	ldr	r2, [r7, #0]
 8009288:	4613      	mov	r3, r2
 800928a:	00db      	lsls	r3, r3, #3
 800928c:	1a9b      	subs	r3, r3, r2
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	440b      	add	r3, r1
 8009292:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d108      	bne.n	80092ae <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6818      	ldr	r0, [r3, #0]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80092a6:	461a      	mov	r2, r3
 80092a8:	2101      	movs	r1, #1
 80092aa:	f009 ff0f 	bl	80130cc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	4619      	mov	r1, r3
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f00f fde1 	bl	8018e7c <HAL_PCD_DataOutStageCallback>
 80092ba:	e046      	b.n	800934a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	4a26      	ldr	r2, [pc, #152]	; (8009358 <PCD_EP_OutXfrComplete_int+0x214>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d124      	bne.n	800930e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d00a      	beq.n	80092e4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	015a      	lsls	r2, r3, #5
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	4413      	add	r3, r2
 80092d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092da:	461a      	mov	r2, r3
 80092dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092e0:	6093      	str	r3, [r2, #8]
 80092e2:	e032      	b.n	800934a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	f003 0320 	and.w	r3, r3, #32
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d008      	beq.n	8009300 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	015a      	lsls	r2, r3, #5
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	4413      	add	r3, r2
 80092f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092fa:	461a      	mov	r2, r3
 80092fc:	2320      	movs	r3, #32
 80092fe:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	b2db      	uxtb	r3, r3
 8009304:	4619      	mov	r1, r3
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f00f fdb8 	bl	8018e7c <HAL_PCD_DataOutStageCallback>
 800930c:	e01d      	b.n	800934a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d114      	bne.n	800933e <PCD_EP_OutXfrComplete_int+0x1fa>
 8009314:	6879      	ldr	r1, [r7, #4]
 8009316:	683a      	ldr	r2, [r7, #0]
 8009318:	4613      	mov	r3, r2
 800931a:	00db      	lsls	r3, r3, #3
 800931c:	1a9b      	subs	r3, r3, r2
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	440b      	add	r3, r1
 8009322:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d108      	bne.n	800933e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6818      	ldr	r0, [r3, #0]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009336:	461a      	mov	r2, r3
 8009338:	2100      	movs	r1, #0
 800933a:	f009 fec7 	bl	80130cc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	b2db      	uxtb	r3, r3
 8009342:	4619      	mov	r1, r3
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f00f fd99 	bl	8018e7c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800934a:	2300      	movs	r3, #0
}
 800934c:	4618      	mov	r0, r3
 800934e:	3718      	adds	r7, #24
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}
 8009354:	4f54300a 	.word	0x4f54300a
 8009358:	4f54310a 	.word	0x4f54310a

0800935c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b086      	sub	sp, #24
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	333c      	adds	r3, #60	; 0x3c
 8009374:	3304      	adds	r3, #4
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	015a      	lsls	r2, r3, #5
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	4413      	add	r3, r2
 8009382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009386:	689b      	ldr	r3, [r3, #8]
 8009388:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	4a15      	ldr	r2, [pc, #84]	; (80093e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d90e      	bls.n	80093b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009398:	2b00      	cmp	r3, #0
 800939a:	d009      	beq.n	80093b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	015a      	lsls	r2, r3, #5
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	4413      	add	r3, r2
 80093a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093a8:	461a      	mov	r2, r3
 80093aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f00f fd51 	bl	8018e58 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	4a0a      	ldr	r2, [pc, #40]	; (80093e4 <PCD_EP_OutSetupPacket_int+0x88>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d90c      	bls.n	80093d8 <PCD_EP_OutSetupPacket_int+0x7c>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d108      	bne.n	80093d8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6818      	ldr	r0, [r3, #0]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80093d0:	461a      	mov	r2, r3
 80093d2:	2101      	movs	r1, #1
 80093d4:	f009 fe7a 	bl	80130cc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80093d8:	2300      	movs	r3, #0
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3718      	adds	r7, #24
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	bf00      	nop
 80093e4:	4f54300a 	.word	0x4f54300a

080093e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b085      	sub	sp, #20
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	460b      	mov	r3, r1
 80093f2:	70fb      	strb	r3, [r7, #3]
 80093f4:	4613      	mov	r3, r2
 80093f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009400:	78fb      	ldrb	r3, [r7, #3]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d107      	bne.n	8009416 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009406:	883b      	ldrh	r3, [r7, #0]
 8009408:	0419      	lsls	r1, r3, #16
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	68ba      	ldr	r2, [r7, #8]
 8009410:	430a      	orrs	r2, r1
 8009412:	629a      	str	r2, [r3, #40]	; 0x28
 8009414:	e028      	b.n	8009468 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800941c:	0c1b      	lsrs	r3, r3, #16
 800941e:	68ba      	ldr	r2, [r7, #8]
 8009420:	4413      	add	r3, r2
 8009422:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009424:	2300      	movs	r3, #0
 8009426:	73fb      	strb	r3, [r7, #15]
 8009428:	e00d      	b.n	8009446 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	7bfb      	ldrb	r3, [r7, #15]
 8009430:	3340      	adds	r3, #64	; 0x40
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	4413      	add	r3, r2
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	0c1b      	lsrs	r3, r3, #16
 800943a:	68ba      	ldr	r2, [r7, #8]
 800943c:	4413      	add	r3, r2
 800943e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009440:	7bfb      	ldrb	r3, [r7, #15]
 8009442:	3301      	adds	r3, #1
 8009444:	73fb      	strb	r3, [r7, #15]
 8009446:	7bfa      	ldrb	r2, [r7, #15]
 8009448:	78fb      	ldrb	r3, [r7, #3]
 800944a:	3b01      	subs	r3, #1
 800944c:	429a      	cmp	r2, r3
 800944e:	d3ec      	bcc.n	800942a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009450:	883b      	ldrh	r3, [r7, #0]
 8009452:	0418      	lsls	r0, r3, #16
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6819      	ldr	r1, [r3, #0]
 8009458:	78fb      	ldrb	r3, [r7, #3]
 800945a:	3b01      	subs	r3, #1
 800945c:	68ba      	ldr	r2, [r7, #8]
 800945e:	4302      	orrs	r2, r0
 8009460:	3340      	adds	r3, #64	; 0x40
 8009462:	009b      	lsls	r3, r3, #2
 8009464:	440b      	add	r3, r1
 8009466:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009468:	2300      	movs	r3, #0
}
 800946a:	4618      	mov	r0, r3
 800946c:	3714      	adds	r7, #20
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr

08009476 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009476:	b480      	push	{r7}
 8009478:	b083      	sub	sp, #12
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
 800947e:	460b      	mov	r3, r1
 8009480:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	887a      	ldrh	r2, [r7, #2]
 8009488:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	370c      	adds	r7, #12
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009498:	b480      	push	{r7}
 800949a:	b085      	sub	sp, #20
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2201      	movs	r2, #1
 80094aa:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2200      	movs	r2, #0
 80094b2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	699b      	ldr	r3, [r3, #24]
 80094ba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094c6:	4b05      	ldr	r3, [pc, #20]	; (80094dc <HAL_PCDEx_ActivateLPM+0x44>)
 80094c8:	4313      	orrs	r3, r2
 80094ca:	68fa      	ldr	r2, [r7, #12]
 80094cc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3714      	adds	r7, #20
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr
 80094dc:	10000003 	.word	0x10000003

080094e0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	460b      	mov	r3, r1
 80094ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80094ec:	bf00      	nop
 80094ee:	370c      	adds	r7, #12
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 80094f8:	b480      	push	{r7}
 80094fa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 80094fc:	4b05      	ldr	r3, [pc, #20]	; (8009514 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a04      	ldr	r2, [pc, #16]	; (8009514 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009506:	6013      	str	r3, [r2, #0]
}
 8009508:	bf00      	nop
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr
 8009512:	bf00      	nop
 8009514:	58024800 	.word	0x58024800

08009518 <HAL_PWR_ConfigPVD>:
  *         driver. All combination are allowed: wake up only Cortex-M7, wake up
  *         only Cortex-M4 or wake up Cortex-M7 and Cortex-M4.
  * @retval None.
  */
void HAL_PWR_ConfigPVD (PWR_PVDTypeDef *sConfigPVD)
{
 8009518:	b480      	push	{r7}
 800951a:	b083      	sub	sp, #12
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  /* Check the PVD configuration parameter */
  if (sConfigPVD == NULL)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d069      	beq.n	80095fa <HAL_PWR_ConfigPVD+0xe2>
  /* Check the parameters */
  assert_param (IS_PWR_PVD_LEVEL (sConfigPVD->PVDLevel));
  assert_param (IS_PWR_PVD_MODE (sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG (PWR->CR1, PWR_CR1_PLS, sConfigPVD->PVDLevel);
 8009526:	4b38      	ldr	r3, [pc, #224]	; (8009608 <HAL_PWR_ConfigPVD+0xf0>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4935      	ldr	r1, [pc, #212]	; (8009608 <HAL_PWR_ConfigPVD+0xf0>)
 8009534:	4313      	orrs	r3, r2
 8009536:	600b      	str	r3, [r1, #0]

  /* Clear previous config */
#if !defined (DUAL_CORE)
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT ();
 8009538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800953c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009540:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009548:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT ();
 800954c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009550:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009554:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009558:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800955c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* !defined (DUAL_CORE) */

  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE ();
 8009560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800956a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800956e:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE ();
 8009570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800957a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800957e:	6053      	str	r3, [r2, #4]

#if !defined (DUAL_CORE)
  /* Interrupt mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009588:	2b00      	cmp	r3, #0
 800958a:	d009      	beq.n	80095a0 <HAL_PWR_ConfigPVD+0x88>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT ();
 800958c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009590:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009594:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800959c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Event mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d009      	beq.n	80095c0 <HAL_PWR_ConfigPVD+0xa8>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT ();
 80095ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80095b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095bc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }
#endif /* !defined (DUAL_CORE) */

  /* Rising edge configuration */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	f003 0301 	and.w	r3, r3, #1
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d007      	beq.n	80095dc <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE ();
 80095cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80095d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095da:	6013      	str	r3, [r2, #0]
  }

  /* Falling edge configuration */
  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	f003 0302 	and.w	r3, r3, #2
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d009      	beq.n	80095fc <HAL_PWR_ConfigPVD+0xe4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE ();
 80095e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80095f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095f6:	6053      	str	r3, [r2, #4]
 80095f8:	e000      	b.n	80095fc <HAL_PWR_ConfigPVD+0xe4>
    return;
 80095fa:	bf00      	nop
  }
}
 80095fc:	370c      	adds	r7, #12
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr
 8009606:	bf00      	nop
 8009608:	58024800 	.word	0x58024800

0800960c <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Programmable Voltage Detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD (void)
{
 800960c:	b480      	push	{r7}
 800960e:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT (PWR->CR1, PWR_CR1_PVDEN);
 8009610:	4b05      	ldr	r3, [pc, #20]	; (8009628 <HAL_PWR_EnablePVD+0x1c>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a04      	ldr	r2, [pc, #16]	; (8009628 <HAL_PWR_EnablePVD+0x1c>)
 8009616:	f043 0310 	orr.w	r3, r3, #16
 800961a:	6013      	str	r3, [r2, #0]
}
 800961c:	bf00      	nop
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr
 8009626:	bf00      	nop
 8009628:	58024800 	.word	0x58024800

0800962c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009634:	4b19      	ldr	r3, [pc, #100]	; (800969c <HAL_PWREx_ConfigSupply+0x70>)
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	f003 0304 	and.w	r3, r3, #4
 800963c:	2b04      	cmp	r3, #4
 800963e:	d00a      	beq.n	8009656 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009640:	4b16      	ldr	r3, [pc, #88]	; (800969c <HAL_PWREx_ConfigSupply+0x70>)
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	f003 0307 	and.w	r3, r3, #7
 8009648:	687a      	ldr	r2, [r7, #4]
 800964a:	429a      	cmp	r2, r3
 800964c:	d001      	beq.n	8009652 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800964e:	2301      	movs	r3, #1
 8009650:	e01f      	b.n	8009692 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009652:	2300      	movs	r3, #0
 8009654:	e01d      	b.n	8009692 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009656:	4b11      	ldr	r3, [pc, #68]	; (800969c <HAL_PWREx_ConfigSupply+0x70>)
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	f023 0207 	bic.w	r2, r3, #7
 800965e:	490f      	ldr	r1, [pc, #60]	; (800969c <HAL_PWREx_ConfigSupply+0x70>)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	4313      	orrs	r3, r2
 8009664:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009666:	f7fa ffa7 	bl	80045b8 <HAL_GetTick>
 800966a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800966c:	e009      	b.n	8009682 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800966e:	f7fa ffa3 	bl	80045b8 <HAL_GetTick>
 8009672:	4602      	mov	r2, r0
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	1ad3      	subs	r3, r2, r3
 8009678:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800967c:	d901      	bls.n	8009682 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800967e:	2301      	movs	r3, #1
 8009680:	e007      	b.n	8009692 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009682:	4b06      	ldr	r3, [pc, #24]	; (800969c <HAL_PWREx_ConfigSupply+0x70>)
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800968a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800968e:	d1ee      	bne.n	800966e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009690:	2300      	movs	r3, #0
}
 8009692:	4618      	mov	r0, r3
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	58024800 	.word	0x58024800

080096a0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80096a0:	b480      	push	{r7}
 80096a2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80096a4:	4b05      	ldr	r3, [pc, #20]	; (80096bc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	4a04      	ldr	r2, [pc, #16]	; (80096bc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80096aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80096ae:	60d3      	str	r3, [r2, #12]
}
 80096b0:	bf00      	nop
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr
 80096ba:	bf00      	nop
 80096bc:	58024800 	.word	0x58024800

080096c0 <HAL_PWREx_PVD_AVD_IRQHandler>:
  * @brief  This function handles the PWR PVD/AVD interrupt request.
  * @note   This API should be called under the PVD_AVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_AVD_IRQHandler (void)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	af00      	add	r7, sp, #0
  /* Check if the Programmable Voltage Detector is enabled (PVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_PVDEN) != 0U)
 80096c4:	4b1b      	ldr	r3, [pc, #108]	; (8009734 <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f003 0310 	and.w	r3, r3, #16
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d014      	beq.n	80096fa <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR D1/CD EXTI flag */
      if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
 80096d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096e0:	d10b      	bne.n	80096fa <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
      {
        /* PWR PVD interrupt user callback */
        HAL_PWR_PVDCallback ();
 80096e2:	f7fa fa75 	bl	8003bd0 <HAL_PWR_PVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
 80096e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80096f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096f6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }
#endif /* defined (DUAL_CORE) */
  }

  /* Check if the Analog Voltage Detector is enabled (AVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_AVDEN) != 0U)
 80096fa:	4b0e      	ldr	r3, [pc, #56]	; (8009734 <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009702:	2b00      	cmp	r3, #0
 8009704:	d014      	beq.n	8009730 <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR EXTI D1/CD flag */
      if (__HAL_PWR_AVD_EXTI_GET_FLAG () != 0U)
 8009706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800970a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800970e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009716:	d10b      	bne.n	8009730 <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
      {
        /* PWR AVD interrupt user callback */
        HAL_PWREx_AVDCallback ();
 8009718:	f000 f80e 	bl	8009738 <HAL_PWREx_AVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_AVD_EXTI_CLEAR_FLAG ();
 800971c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009724:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800972c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        __HAL_PWR_AVD_EXTID2_CLEAR_FLAG ();
      }
    }
#endif /* defined (DUAL_CORE) */
  }
}
 8009730:	bf00      	nop
 8009732:	bd80      	pop	{r7, pc}
 8009734:	58024800 	.word	0x58024800

08009738 <HAL_PWREx_AVDCallback>:
/**
  * @brief PWR AVD interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_AVDCallback (void)
{
 8009738:	b480      	push	{r7}
 800973a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_AVDCallback can be implemented in the user file
  */
}
 800973c:	bf00      	nop
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr
	...

08009748 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b08c      	sub	sp, #48	; 0x30
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d101      	bne.n	800975a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	e3ff      	b.n	8009f5a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f003 0301 	and.w	r3, r3, #1
 8009762:	2b00      	cmp	r3, #0
 8009764:	f000 8087 	beq.w	8009876 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009768:	4b99      	ldr	r3, [pc, #612]	; (80099d0 <HAL_RCC_OscConfig+0x288>)
 800976a:	691b      	ldr	r3, [r3, #16]
 800976c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009770:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009772:	4b97      	ldr	r3, [pc, #604]	; (80099d0 <HAL_RCC_OscConfig+0x288>)
 8009774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009776:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800977a:	2b10      	cmp	r3, #16
 800977c:	d007      	beq.n	800978e <HAL_RCC_OscConfig+0x46>
 800977e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009780:	2b18      	cmp	r3, #24
 8009782:	d110      	bne.n	80097a6 <HAL_RCC_OscConfig+0x5e>
 8009784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009786:	f003 0303 	and.w	r3, r3, #3
 800978a:	2b02      	cmp	r3, #2
 800978c:	d10b      	bne.n	80097a6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800978e:	4b90      	ldr	r3, [pc, #576]	; (80099d0 <HAL_RCC_OscConfig+0x288>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009796:	2b00      	cmp	r3, #0
 8009798:	d06c      	beq.n	8009874 <HAL_RCC_OscConfig+0x12c>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d168      	bne.n	8009874 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80097a2:	2301      	movs	r3, #1
 80097a4:	e3d9      	b.n	8009f5a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097ae:	d106      	bne.n	80097be <HAL_RCC_OscConfig+0x76>
 80097b0:	4b87      	ldr	r3, [pc, #540]	; (80099d0 <HAL_RCC_OscConfig+0x288>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a86      	ldr	r2, [pc, #536]	; (80099d0 <HAL_RCC_OscConfig+0x288>)
 80097b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097ba:	6013      	str	r3, [r2, #0]
 80097bc:	e02e      	b.n	800981c <HAL_RCC_OscConfig+0xd4>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d10c      	bne.n	80097e0 <HAL_RCC_OscConfig+0x98>
 80097c6:	4b82      	ldr	r3, [pc, #520]	; (80099d0 <HAL_RCC_OscConfig+0x288>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4a81      	ldr	r2, [pc, #516]	; (80099d0 <HAL_RCC_OscConfig+0x288>)
 80097cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097d0:	6013      	str	r3, [r2, #0]
 80097d2:	4b7f      	ldr	r3, [pc, #508]	; (80099d0 <HAL_RCC_OscConfig+0x288>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a7e      	ldr	r2, [pc, #504]	; (80099d0 <HAL_RCC_OscConfig+0x288>)
 80097d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80097dc:	6013      	str	r3, [r2, #0]
 80097de:	e01d      	b.n	800981c <HAL_RCC_OscConfig+0xd4>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80097e8:	d10c      	bne.n	8009804 <HAL_RCC_OscConfig+0xbc>
 80097ea:	4b79      	ldr	r3, [pc, #484]	; (80099d0 <HAL_RCC_OscConfig+0x288>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a78      	ldr	r2, [pc, #480]	; (80099d0 <HAL_RCC_OscConfig+0x288>)
 80097f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80097f4:	6013      	str	r3, [r2, #0]
 80097f6:	4b76      	ldr	r3, [pc, #472]	; (80099d0 <HAL_RCC_OscConfig+0x288>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a75      	ldr	r2, [pc, #468]	; (80099d0 <HAL_RCC_OscConfig+0x288>)
 80097fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009800:	6013      	str	r3, [r2, #0]
 8009802:	e00b      	b.n	800981c <HAL_RCC_OscConfig+0xd4>
 8009804:	4b72      	ldr	r3, [pc, #456]	; (80099d0 <HAL_RCC_OscConfig+0x288>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4a71      	ldr	r2, [pc, #452]	; (80099d0 <HAL_RCC_OscConfig+0x288>)
 800980a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800980e:	6013      	str	r3, [r2, #0]
 8009810:	4b6f      	ldr	r3, [pc, #444]	; (80099d0 <HAL_RCC_OscConfig+0x288>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a6e      	ldr	r2, [pc, #440]	; (80099d0 <HAL_RCC_OscConfig+0x288>)
 8009816:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800981a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d013      	beq.n	800984c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009824:	f7fa fec8 	bl	80045b8 <HAL_GetTick>
 8009828:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800982a:	e008      	b.n	800983e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800982c:	f7fa fec4 	bl	80045b8 <HAL_GetTick>
 8009830:	4602      	mov	r2, r0
 8009832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009834:	1ad3      	subs	r3, r2, r3
 8009836:	2b64      	cmp	r3, #100	; 0x64
 8009838:	d901      	bls.n	800983e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800983a:	2303      	movs	r3, #3
 800983c:	e38d      	b.n	8009f5a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800983e:	4b64      	ldr	r3, [pc, #400]	; (80099d0 <HAL_RCC_OscConfig+0x288>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009846:	2b00      	cmp	r3, #0
 8009848:	d0f0      	beq.n	800982c <HAL_RCC_OscConfig+0xe4>
 800984a:	e014      	b.n	8009876 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800984c:	f7fa feb4 	bl	80045b8 <HAL_GetTick>
 8009850:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009852:	e008      	b.n	8009866 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009854:	f7fa feb0 	bl	80045b8 <HAL_GetTick>
 8009858:	4602      	mov	r2, r0
 800985a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985c:	1ad3      	subs	r3, r2, r3
 800985e:	2b64      	cmp	r3, #100	; 0x64
 8009860:	d901      	bls.n	8009866 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009862:	2303      	movs	r3, #3
 8009864:	e379      	b.n	8009f5a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009866:	4b5a      	ldr	r3, [pc, #360]	; (80099d0 <HAL_RCC_OscConfig+0x288>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800986e:	2b00      	cmp	r3, #0
 8009870:	d1f0      	bne.n	8009854 <HAL_RCC_OscConfig+0x10c>
 8009872:	e000      	b.n	8009876 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009874:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f003 0302 	and.w	r3, r3, #2
 800987e:	2b00      	cmp	r3, #0
 8009880:	f000 80ae 	beq.w	80099e0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009884:	4b52      	ldr	r3, [pc, #328]	; (80099d0 <HAL_RCC_OscConfig+0x288>)
 8009886:	691b      	ldr	r3, [r3, #16]
 8009888:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800988c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800988e:	4b50      	ldr	r3, [pc, #320]	; (80099d0 <HAL_RCC_OscConfig+0x288>)
 8009890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009892:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009894:	6a3b      	ldr	r3, [r7, #32]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d007      	beq.n	80098aa <HAL_RCC_OscConfig+0x162>
 800989a:	6a3b      	ldr	r3, [r7, #32]
 800989c:	2b18      	cmp	r3, #24
 800989e:	d13a      	bne.n	8009916 <HAL_RCC_OscConfig+0x1ce>
 80098a0:	69fb      	ldr	r3, [r7, #28]
 80098a2:	f003 0303 	and.w	r3, r3, #3
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d135      	bne.n	8009916 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80098aa:	4b49      	ldr	r3, [pc, #292]	; (80099d0 <HAL_RCC_OscConfig+0x288>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f003 0304 	and.w	r3, r3, #4
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d005      	beq.n	80098c2 <HAL_RCC_OscConfig+0x17a>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	68db      	ldr	r3, [r3, #12]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d101      	bne.n	80098c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80098be:	2301      	movs	r3, #1
 80098c0:	e34b      	b.n	8009f5a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098c2:	f7fa fea7 	bl	8004614 <HAL_GetREVID>
 80098c6:	4602      	mov	r2, r0
 80098c8:	f241 0303 	movw	r3, #4099	; 0x1003
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d817      	bhi.n	8009900 <HAL_RCC_OscConfig+0x1b8>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	691b      	ldr	r3, [r3, #16]
 80098d4:	2b40      	cmp	r3, #64	; 0x40
 80098d6:	d108      	bne.n	80098ea <HAL_RCC_OscConfig+0x1a2>
 80098d8:	4b3d      	ldr	r3, [pc, #244]	; (80099d0 <HAL_RCC_OscConfig+0x288>)
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80098e0:	4a3b      	ldr	r2, [pc, #236]	; (80099d0 <HAL_RCC_OscConfig+0x288>)
 80098e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098e6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80098e8:	e07a      	b.n	80099e0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098ea:	4b39      	ldr	r3, [pc, #228]	; (80099d0 <HAL_RCC_OscConfig+0x288>)
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	691b      	ldr	r3, [r3, #16]
 80098f6:	031b      	lsls	r3, r3, #12
 80098f8:	4935      	ldr	r1, [pc, #212]	; (80099d0 <HAL_RCC_OscConfig+0x288>)
 80098fa:	4313      	orrs	r3, r2
 80098fc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80098fe:	e06f      	b.n	80099e0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009900:	4b33      	ldr	r3, [pc, #204]	; (80099d0 <HAL_RCC_OscConfig+0x288>)
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	691b      	ldr	r3, [r3, #16]
 800990c:	061b      	lsls	r3, r3, #24
 800990e:	4930      	ldr	r1, [pc, #192]	; (80099d0 <HAL_RCC_OscConfig+0x288>)
 8009910:	4313      	orrs	r3, r2
 8009912:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009914:	e064      	b.n	80099e0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	68db      	ldr	r3, [r3, #12]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d045      	beq.n	80099aa <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800991e:	4b2c      	ldr	r3, [pc, #176]	; (80099d0 <HAL_RCC_OscConfig+0x288>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f023 0219 	bic.w	r2, r3, #25
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	68db      	ldr	r3, [r3, #12]
 800992a:	4929      	ldr	r1, [pc, #164]	; (80099d0 <HAL_RCC_OscConfig+0x288>)
 800992c:	4313      	orrs	r3, r2
 800992e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009930:	f7fa fe42 	bl	80045b8 <HAL_GetTick>
 8009934:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009936:	e008      	b.n	800994a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009938:	f7fa fe3e 	bl	80045b8 <HAL_GetTick>
 800993c:	4602      	mov	r2, r0
 800993e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009940:	1ad3      	subs	r3, r2, r3
 8009942:	2b02      	cmp	r3, #2
 8009944:	d901      	bls.n	800994a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8009946:	2303      	movs	r3, #3
 8009948:	e307      	b.n	8009f5a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800994a:	4b21      	ldr	r3, [pc, #132]	; (80099d0 <HAL_RCC_OscConfig+0x288>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f003 0304 	and.w	r3, r3, #4
 8009952:	2b00      	cmp	r3, #0
 8009954:	d0f0      	beq.n	8009938 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009956:	f7fa fe5d 	bl	8004614 <HAL_GetREVID>
 800995a:	4602      	mov	r2, r0
 800995c:	f241 0303 	movw	r3, #4099	; 0x1003
 8009960:	429a      	cmp	r2, r3
 8009962:	d817      	bhi.n	8009994 <HAL_RCC_OscConfig+0x24c>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	691b      	ldr	r3, [r3, #16]
 8009968:	2b40      	cmp	r3, #64	; 0x40
 800996a:	d108      	bne.n	800997e <HAL_RCC_OscConfig+0x236>
 800996c:	4b18      	ldr	r3, [pc, #96]	; (80099d0 <HAL_RCC_OscConfig+0x288>)
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009974:	4a16      	ldr	r2, [pc, #88]	; (80099d0 <HAL_RCC_OscConfig+0x288>)
 8009976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800997a:	6053      	str	r3, [r2, #4]
 800997c:	e030      	b.n	80099e0 <HAL_RCC_OscConfig+0x298>
 800997e:	4b14      	ldr	r3, [pc, #80]	; (80099d0 <HAL_RCC_OscConfig+0x288>)
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	691b      	ldr	r3, [r3, #16]
 800998a:	031b      	lsls	r3, r3, #12
 800998c:	4910      	ldr	r1, [pc, #64]	; (80099d0 <HAL_RCC_OscConfig+0x288>)
 800998e:	4313      	orrs	r3, r2
 8009990:	604b      	str	r3, [r1, #4]
 8009992:	e025      	b.n	80099e0 <HAL_RCC_OscConfig+0x298>
 8009994:	4b0e      	ldr	r3, [pc, #56]	; (80099d0 <HAL_RCC_OscConfig+0x288>)
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	691b      	ldr	r3, [r3, #16]
 80099a0:	061b      	lsls	r3, r3, #24
 80099a2:	490b      	ldr	r1, [pc, #44]	; (80099d0 <HAL_RCC_OscConfig+0x288>)
 80099a4:	4313      	orrs	r3, r2
 80099a6:	604b      	str	r3, [r1, #4]
 80099a8:	e01a      	b.n	80099e0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80099aa:	4b09      	ldr	r3, [pc, #36]	; (80099d0 <HAL_RCC_OscConfig+0x288>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a08      	ldr	r2, [pc, #32]	; (80099d0 <HAL_RCC_OscConfig+0x288>)
 80099b0:	f023 0301 	bic.w	r3, r3, #1
 80099b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099b6:	f7fa fdff 	bl	80045b8 <HAL_GetTick>
 80099ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80099bc:	e00a      	b.n	80099d4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80099be:	f7fa fdfb 	bl	80045b8 <HAL_GetTick>
 80099c2:	4602      	mov	r2, r0
 80099c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c6:	1ad3      	subs	r3, r2, r3
 80099c8:	2b02      	cmp	r3, #2
 80099ca:	d903      	bls.n	80099d4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80099cc:	2303      	movs	r3, #3
 80099ce:	e2c4      	b.n	8009f5a <HAL_RCC_OscConfig+0x812>
 80099d0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80099d4:	4ba4      	ldr	r3, [pc, #656]	; (8009c68 <HAL_RCC_OscConfig+0x520>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f003 0304 	and.w	r3, r3, #4
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d1ee      	bne.n	80099be <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f003 0310 	and.w	r3, r3, #16
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	f000 80a9 	beq.w	8009b40 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099ee:	4b9e      	ldr	r3, [pc, #632]	; (8009c68 <HAL_RCC_OscConfig+0x520>)
 80099f0:	691b      	ldr	r3, [r3, #16]
 80099f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099f6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80099f8:	4b9b      	ldr	r3, [pc, #620]	; (8009c68 <HAL_RCC_OscConfig+0x520>)
 80099fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099fc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80099fe:	69bb      	ldr	r3, [r7, #24]
 8009a00:	2b08      	cmp	r3, #8
 8009a02:	d007      	beq.n	8009a14 <HAL_RCC_OscConfig+0x2cc>
 8009a04:	69bb      	ldr	r3, [r7, #24]
 8009a06:	2b18      	cmp	r3, #24
 8009a08:	d13a      	bne.n	8009a80 <HAL_RCC_OscConfig+0x338>
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	f003 0303 	and.w	r3, r3, #3
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d135      	bne.n	8009a80 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a14:	4b94      	ldr	r3, [pc, #592]	; (8009c68 <HAL_RCC_OscConfig+0x520>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d005      	beq.n	8009a2c <HAL_RCC_OscConfig+0x2e4>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	69db      	ldr	r3, [r3, #28]
 8009a24:	2b80      	cmp	r3, #128	; 0x80
 8009a26:	d001      	beq.n	8009a2c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	e296      	b.n	8009f5a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a2c:	f7fa fdf2 	bl	8004614 <HAL_GetREVID>
 8009a30:	4602      	mov	r2, r0
 8009a32:	f241 0303 	movw	r3, #4099	; 0x1003
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d817      	bhi.n	8009a6a <HAL_RCC_OscConfig+0x322>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6a1b      	ldr	r3, [r3, #32]
 8009a3e:	2b20      	cmp	r3, #32
 8009a40:	d108      	bne.n	8009a54 <HAL_RCC_OscConfig+0x30c>
 8009a42:	4b89      	ldr	r3, [pc, #548]	; (8009c68 <HAL_RCC_OscConfig+0x520>)
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009a4a:	4a87      	ldr	r2, [pc, #540]	; (8009c68 <HAL_RCC_OscConfig+0x520>)
 8009a4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a50:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a52:	e075      	b.n	8009b40 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a54:	4b84      	ldr	r3, [pc, #528]	; (8009c68 <HAL_RCC_OscConfig+0x520>)
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6a1b      	ldr	r3, [r3, #32]
 8009a60:	069b      	lsls	r3, r3, #26
 8009a62:	4981      	ldr	r1, [pc, #516]	; (8009c68 <HAL_RCC_OscConfig+0x520>)
 8009a64:	4313      	orrs	r3, r2
 8009a66:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a68:	e06a      	b.n	8009b40 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a6a:	4b7f      	ldr	r3, [pc, #508]	; (8009c68 <HAL_RCC_OscConfig+0x520>)
 8009a6c:	68db      	ldr	r3, [r3, #12]
 8009a6e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6a1b      	ldr	r3, [r3, #32]
 8009a76:	061b      	lsls	r3, r3, #24
 8009a78:	497b      	ldr	r1, [pc, #492]	; (8009c68 <HAL_RCC_OscConfig+0x520>)
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a7e:	e05f      	b.n	8009b40 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	69db      	ldr	r3, [r3, #28]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d042      	beq.n	8009b0e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009a88:	4b77      	ldr	r3, [pc, #476]	; (8009c68 <HAL_RCC_OscConfig+0x520>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a76      	ldr	r2, [pc, #472]	; (8009c68 <HAL_RCC_OscConfig+0x520>)
 8009a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a94:	f7fa fd90 	bl	80045b8 <HAL_GetTick>
 8009a98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009a9a:	e008      	b.n	8009aae <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009a9c:	f7fa fd8c 	bl	80045b8 <HAL_GetTick>
 8009aa0:	4602      	mov	r2, r0
 8009aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa4:	1ad3      	subs	r3, r2, r3
 8009aa6:	2b02      	cmp	r3, #2
 8009aa8:	d901      	bls.n	8009aae <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8009aaa:	2303      	movs	r3, #3
 8009aac:	e255      	b.n	8009f5a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009aae:	4b6e      	ldr	r3, [pc, #440]	; (8009c68 <HAL_RCC_OscConfig+0x520>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d0f0      	beq.n	8009a9c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009aba:	f7fa fdab 	bl	8004614 <HAL_GetREVID>
 8009abe:	4602      	mov	r2, r0
 8009ac0:	f241 0303 	movw	r3, #4099	; 0x1003
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	d817      	bhi.n	8009af8 <HAL_RCC_OscConfig+0x3b0>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6a1b      	ldr	r3, [r3, #32]
 8009acc:	2b20      	cmp	r3, #32
 8009ace:	d108      	bne.n	8009ae2 <HAL_RCC_OscConfig+0x39a>
 8009ad0:	4b65      	ldr	r3, [pc, #404]	; (8009c68 <HAL_RCC_OscConfig+0x520>)
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009ad8:	4a63      	ldr	r2, [pc, #396]	; (8009c68 <HAL_RCC_OscConfig+0x520>)
 8009ada:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ade:	6053      	str	r3, [r2, #4]
 8009ae0:	e02e      	b.n	8009b40 <HAL_RCC_OscConfig+0x3f8>
 8009ae2:	4b61      	ldr	r3, [pc, #388]	; (8009c68 <HAL_RCC_OscConfig+0x520>)
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6a1b      	ldr	r3, [r3, #32]
 8009aee:	069b      	lsls	r3, r3, #26
 8009af0:	495d      	ldr	r1, [pc, #372]	; (8009c68 <HAL_RCC_OscConfig+0x520>)
 8009af2:	4313      	orrs	r3, r2
 8009af4:	604b      	str	r3, [r1, #4]
 8009af6:	e023      	b.n	8009b40 <HAL_RCC_OscConfig+0x3f8>
 8009af8:	4b5b      	ldr	r3, [pc, #364]	; (8009c68 <HAL_RCC_OscConfig+0x520>)
 8009afa:	68db      	ldr	r3, [r3, #12]
 8009afc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	6a1b      	ldr	r3, [r3, #32]
 8009b04:	061b      	lsls	r3, r3, #24
 8009b06:	4958      	ldr	r1, [pc, #352]	; (8009c68 <HAL_RCC_OscConfig+0x520>)
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	60cb      	str	r3, [r1, #12]
 8009b0c:	e018      	b.n	8009b40 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009b0e:	4b56      	ldr	r3, [pc, #344]	; (8009c68 <HAL_RCC_OscConfig+0x520>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4a55      	ldr	r2, [pc, #340]	; (8009c68 <HAL_RCC_OscConfig+0x520>)
 8009b14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b1a:	f7fa fd4d 	bl	80045b8 <HAL_GetTick>
 8009b1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009b20:	e008      	b.n	8009b34 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009b22:	f7fa fd49 	bl	80045b8 <HAL_GetTick>
 8009b26:	4602      	mov	r2, r0
 8009b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2a:	1ad3      	subs	r3, r2, r3
 8009b2c:	2b02      	cmp	r3, #2
 8009b2e:	d901      	bls.n	8009b34 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8009b30:	2303      	movs	r3, #3
 8009b32:	e212      	b.n	8009f5a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009b34:	4b4c      	ldr	r3, [pc, #304]	; (8009c68 <HAL_RCC_OscConfig+0x520>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d1f0      	bne.n	8009b22 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f003 0308 	and.w	r3, r3, #8
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d036      	beq.n	8009bba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	695b      	ldr	r3, [r3, #20]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d019      	beq.n	8009b88 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009b54:	4b44      	ldr	r3, [pc, #272]	; (8009c68 <HAL_RCC_OscConfig+0x520>)
 8009b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b58:	4a43      	ldr	r2, [pc, #268]	; (8009c68 <HAL_RCC_OscConfig+0x520>)
 8009b5a:	f043 0301 	orr.w	r3, r3, #1
 8009b5e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b60:	f7fa fd2a 	bl	80045b8 <HAL_GetTick>
 8009b64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009b66:	e008      	b.n	8009b7a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b68:	f7fa fd26 	bl	80045b8 <HAL_GetTick>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b70:	1ad3      	subs	r3, r2, r3
 8009b72:	2b02      	cmp	r3, #2
 8009b74:	d901      	bls.n	8009b7a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8009b76:	2303      	movs	r3, #3
 8009b78:	e1ef      	b.n	8009f5a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009b7a:	4b3b      	ldr	r3, [pc, #236]	; (8009c68 <HAL_RCC_OscConfig+0x520>)
 8009b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b7e:	f003 0302 	and.w	r3, r3, #2
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d0f0      	beq.n	8009b68 <HAL_RCC_OscConfig+0x420>
 8009b86:	e018      	b.n	8009bba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009b88:	4b37      	ldr	r3, [pc, #220]	; (8009c68 <HAL_RCC_OscConfig+0x520>)
 8009b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b8c:	4a36      	ldr	r2, [pc, #216]	; (8009c68 <HAL_RCC_OscConfig+0x520>)
 8009b8e:	f023 0301 	bic.w	r3, r3, #1
 8009b92:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b94:	f7fa fd10 	bl	80045b8 <HAL_GetTick>
 8009b98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009b9a:	e008      	b.n	8009bae <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b9c:	f7fa fd0c 	bl	80045b8 <HAL_GetTick>
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba4:	1ad3      	subs	r3, r2, r3
 8009ba6:	2b02      	cmp	r3, #2
 8009ba8:	d901      	bls.n	8009bae <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8009baa:	2303      	movs	r3, #3
 8009bac:	e1d5      	b.n	8009f5a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009bae:	4b2e      	ldr	r3, [pc, #184]	; (8009c68 <HAL_RCC_OscConfig+0x520>)
 8009bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bb2:	f003 0302 	and.w	r3, r3, #2
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d1f0      	bne.n	8009b9c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f003 0320 	and.w	r3, r3, #32
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d036      	beq.n	8009c34 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	699b      	ldr	r3, [r3, #24]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d019      	beq.n	8009c02 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009bce:	4b26      	ldr	r3, [pc, #152]	; (8009c68 <HAL_RCC_OscConfig+0x520>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4a25      	ldr	r2, [pc, #148]	; (8009c68 <HAL_RCC_OscConfig+0x520>)
 8009bd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009bd8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009bda:	f7fa fced 	bl	80045b8 <HAL_GetTick>
 8009bde:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009be0:	e008      	b.n	8009bf4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009be2:	f7fa fce9 	bl	80045b8 <HAL_GetTick>
 8009be6:	4602      	mov	r2, r0
 8009be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bea:	1ad3      	subs	r3, r2, r3
 8009bec:	2b02      	cmp	r3, #2
 8009bee:	d901      	bls.n	8009bf4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8009bf0:	2303      	movs	r3, #3
 8009bf2:	e1b2      	b.n	8009f5a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009bf4:	4b1c      	ldr	r3, [pc, #112]	; (8009c68 <HAL_RCC_OscConfig+0x520>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d0f0      	beq.n	8009be2 <HAL_RCC_OscConfig+0x49a>
 8009c00:	e018      	b.n	8009c34 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009c02:	4b19      	ldr	r3, [pc, #100]	; (8009c68 <HAL_RCC_OscConfig+0x520>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4a18      	ldr	r2, [pc, #96]	; (8009c68 <HAL_RCC_OscConfig+0x520>)
 8009c08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c0c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009c0e:	f7fa fcd3 	bl	80045b8 <HAL_GetTick>
 8009c12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009c14:	e008      	b.n	8009c28 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009c16:	f7fa fccf 	bl	80045b8 <HAL_GetTick>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1e:	1ad3      	subs	r3, r2, r3
 8009c20:	2b02      	cmp	r3, #2
 8009c22:	d901      	bls.n	8009c28 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8009c24:	2303      	movs	r3, #3
 8009c26:	e198      	b.n	8009f5a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009c28:	4b0f      	ldr	r3, [pc, #60]	; (8009c68 <HAL_RCC_OscConfig+0x520>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d1f0      	bne.n	8009c16 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f003 0304 	and.w	r3, r3, #4
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	f000 8085 	beq.w	8009d4c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009c42:	4b0a      	ldr	r3, [pc, #40]	; (8009c6c <HAL_RCC_OscConfig+0x524>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4a09      	ldr	r2, [pc, #36]	; (8009c6c <HAL_RCC_OscConfig+0x524>)
 8009c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009c4e:	f7fa fcb3 	bl	80045b8 <HAL_GetTick>
 8009c52:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c54:	e00c      	b.n	8009c70 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009c56:	f7fa fcaf 	bl	80045b8 <HAL_GetTick>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5e:	1ad3      	subs	r3, r2, r3
 8009c60:	2b64      	cmp	r3, #100	; 0x64
 8009c62:	d905      	bls.n	8009c70 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8009c64:	2303      	movs	r3, #3
 8009c66:	e178      	b.n	8009f5a <HAL_RCC_OscConfig+0x812>
 8009c68:	58024400 	.word	0x58024400
 8009c6c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c70:	4b96      	ldr	r3, [pc, #600]	; (8009ecc <HAL_RCC_OscConfig+0x784>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d0ec      	beq.n	8009c56 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	689b      	ldr	r3, [r3, #8]
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d106      	bne.n	8009c92 <HAL_RCC_OscConfig+0x54a>
 8009c84:	4b92      	ldr	r3, [pc, #584]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c88:	4a91      	ldr	r2, [pc, #580]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009c8a:	f043 0301 	orr.w	r3, r3, #1
 8009c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8009c90:	e02d      	b.n	8009cee <HAL_RCC_OscConfig+0x5a6>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d10c      	bne.n	8009cb4 <HAL_RCC_OscConfig+0x56c>
 8009c9a:	4b8d      	ldr	r3, [pc, #564]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c9e:	4a8c      	ldr	r2, [pc, #560]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009ca0:	f023 0301 	bic.w	r3, r3, #1
 8009ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8009ca6:	4b8a      	ldr	r3, [pc, #552]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009caa:	4a89      	ldr	r2, [pc, #548]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009cac:	f023 0304 	bic.w	r3, r3, #4
 8009cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8009cb2:	e01c      	b.n	8009cee <HAL_RCC_OscConfig+0x5a6>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	2b05      	cmp	r3, #5
 8009cba:	d10c      	bne.n	8009cd6 <HAL_RCC_OscConfig+0x58e>
 8009cbc:	4b84      	ldr	r3, [pc, #528]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cc0:	4a83      	ldr	r2, [pc, #524]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009cc2:	f043 0304 	orr.w	r3, r3, #4
 8009cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8009cc8:	4b81      	ldr	r3, [pc, #516]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ccc:	4a80      	ldr	r2, [pc, #512]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009cce:	f043 0301 	orr.w	r3, r3, #1
 8009cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8009cd4:	e00b      	b.n	8009cee <HAL_RCC_OscConfig+0x5a6>
 8009cd6:	4b7e      	ldr	r3, [pc, #504]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cda:	4a7d      	ldr	r2, [pc, #500]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009cdc:	f023 0301 	bic.w	r3, r3, #1
 8009ce0:	6713      	str	r3, [r2, #112]	; 0x70
 8009ce2:	4b7b      	ldr	r3, [pc, #492]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ce6:	4a7a      	ldr	r2, [pc, #488]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009ce8:	f023 0304 	bic.w	r3, r3, #4
 8009cec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	689b      	ldr	r3, [r3, #8]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d015      	beq.n	8009d22 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cf6:	f7fa fc5f 	bl	80045b8 <HAL_GetTick>
 8009cfa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009cfc:	e00a      	b.n	8009d14 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009cfe:	f7fa fc5b 	bl	80045b8 <HAL_GetTick>
 8009d02:	4602      	mov	r2, r0
 8009d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d06:	1ad3      	subs	r3, r2, r3
 8009d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d901      	bls.n	8009d14 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8009d10:	2303      	movs	r3, #3
 8009d12:	e122      	b.n	8009f5a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d14:	4b6e      	ldr	r3, [pc, #440]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d18:	f003 0302 	and.w	r3, r3, #2
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d0ee      	beq.n	8009cfe <HAL_RCC_OscConfig+0x5b6>
 8009d20:	e014      	b.n	8009d4c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d22:	f7fa fc49 	bl	80045b8 <HAL_GetTick>
 8009d26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009d28:	e00a      	b.n	8009d40 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009d2a:	f7fa fc45 	bl	80045b8 <HAL_GetTick>
 8009d2e:	4602      	mov	r2, r0
 8009d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d32:	1ad3      	subs	r3, r2, r3
 8009d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d901      	bls.n	8009d40 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8009d3c:	2303      	movs	r3, #3
 8009d3e:	e10c      	b.n	8009f5a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009d40:	4b63      	ldr	r3, [pc, #396]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d44:	f003 0302 	and.w	r3, r3, #2
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d1ee      	bne.n	8009d2a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	f000 8101 	beq.w	8009f58 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009d56:	4b5e      	ldr	r3, [pc, #376]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009d58:	691b      	ldr	r3, [r3, #16]
 8009d5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d5e:	2b18      	cmp	r3, #24
 8009d60:	f000 80bc 	beq.w	8009edc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d68:	2b02      	cmp	r3, #2
 8009d6a:	f040 8095 	bne.w	8009e98 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d6e:	4b58      	ldr	r3, [pc, #352]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a57      	ldr	r2, [pc, #348]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009d74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d7a:	f7fa fc1d 	bl	80045b8 <HAL_GetTick>
 8009d7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009d80:	e008      	b.n	8009d94 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009d82:	f7fa fc19 	bl	80045b8 <HAL_GetTick>
 8009d86:	4602      	mov	r2, r0
 8009d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8a:	1ad3      	subs	r3, r2, r3
 8009d8c:	2b02      	cmp	r3, #2
 8009d8e:	d901      	bls.n	8009d94 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8009d90:	2303      	movs	r3, #3
 8009d92:	e0e2      	b.n	8009f5a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009d94:	4b4e      	ldr	r3, [pc, #312]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d1f0      	bne.n	8009d82 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009da0:	4b4b      	ldr	r3, [pc, #300]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009da2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009da4:	4b4b      	ldr	r3, [pc, #300]	; (8009ed4 <HAL_RCC_OscConfig+0x78c>)
 8009da6:	4013      	ands	r3, r2
 8009da8:	687a      	ldr	r2, [r7, #4]
 8009daa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009db0:	0112      	lsls	r2, r2, #4
 8009db2:	430a      	orrs	r2, r1
 8009db4:	4946      	ldr	r1, [pc, #280]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009db6:	4313      	orrs	r3, r2
 8009db8:	628b      	str	r3, [r1, #40]	; 0x28
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dbe:	3b01      	subs	r3, #1
 8009dc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dc8:	3b01      	subs	r3, #1
 8009dca:	025b      	lsls	r3, r3, #9
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	431a      	orrs	r2, r3
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dd4:	3b01      	subs	r3, #1
 8009dd6:	041b      	lsls	r3, r3, #16
 8009dd8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009ddc:	431a      	orrs	r2, r3
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009de2:	3b01      	subs	r3, #1
 8009de4:	061b      	lsls	r3, r3, #24
 8009de6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009dea:	4939      	ldr	r1, [pc, #228]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009dec:	4313      	orrs	r3, r2
 8009dee:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009df0:	4b37      	ldr	r3, [pc, #220]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df4:	4a36      	ldr	r2, [pc, #216]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009df6:	f023 0301 	bic.w	r3, r3, #1
 8009dfa:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009dfc:	4b34      	ldr	r3, [pc, #208]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009dfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e00:	4b35      	ldr	r3, [pc, #212]	; (8009ed8 <HAL_RCC_OscConfig+0x790>)
 8009e02:	4013      	ands	r3, r2
 8009e04:	687a      	ldr	r2, [r7, #4]
 8009e06:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009e08:	00d2      	lsls	r2, r2, #3
 8009e0a:	4931      	ldr	r1, [pc, #196]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009e10:	4b2f      	ldr	r3, [pc, #188]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e14:	f023 020c 	bic.w	r2, r3, #12
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e1c:	492c      	ldr	r1, [pc, #176]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009e22:	4b2b      	ldr	r3, [pc, #172]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e26:	f023 0202 	bic.w	r2, r3, #2
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e2e:	4928      	ldr	r1, [pc, #160]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009e30:	4313      	orrs	r3, r2
 8009e32:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009e34:	4b26      	ldr	r3, [pc, #152]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e38:	4a25      	ldr	r2, [pc, #148]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009e3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e40:	4b23      	ldr	r3, [pc, #140]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e44:	4a22      	ldr	r2, [pc, #136]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009e46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009e4c:	4b20      	ldr	r3, [pc, #128]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e50:	4a1f      	ldr	r2, [pc, #124]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009e52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009e58:	4b1d      	ldr	r3, [pc, #116]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e5c:	4a1c      	ldr	r2, [pc, #112]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009e5e:	f043 0301 	orr.w	r3, r3, #1
 8009e62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009e64:	4b1a      	ldr	r3, [pc, #104]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a19      	ldr	r2, [pc, #100]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009e6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009e6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e70:	f7fa fba2 	bl	80045b8 <HAL_GetTick>
 8009e74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009e76:	e008      	b.n	8009e8a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e78:	f7fa fb9e 	bl	80045b8 <HAL_GetTick>
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e80:	1ad3      	subs	r3, r2, r3
 8009e82:	2b02      	cmp	r3, #2
 8009e84:	d901      	bls.n	8009e8a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8009e86:	2303      	movs	r3, #3
 8009e88:	e067      	b.n	8009f5a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009e8a:	4b11      	ldr	r3, [pc, #68]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d0f0      	beq.n	8009e78 <HAL_RCC_OscConfig+0x730>
 8009e96:	e05f      	b.n	8009f58 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e98:	4b0d      	ldr	r3, [pc, #52]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a0c      	ldr	r2, [pc, #48]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009e9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009ea2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ea4:	f7fa fb88 	bl	80045b8 <HAL_GetTick>
 8009ea8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009eaa:	e008      	b.n	8009ebe <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009eac:	f7fa fb84 	bl	80045b8 <HAL_GetTick>
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb4:	1ad3      	subs	r3, r2, r3
 8009eb6:	2b02      	cmp	r3, #2
 8009eb8:	d901      	bls.n	8009ebe <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8009eba:	2303      	movs	r3, #3
 8009ebc:	e04d      	b.n	8009f5a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009ebe:	4b04      	ldr	r3, [pc, #16]	; (8009ed0 <HAL_RCC_OscConfig+0x788>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d1f0      	bne.n	8009eac <HAL_RCC_OscConfig+0x764>
 8009eca:	e045      	b.n	8009f58 <HAL_RCC_OscConfig+0x810>
 8009ecc:	58024800 	.word	0x58024800
 8009ed0:	58024400 	.word	0x58024400
 8009ed4:	fffffc0c 	.word	0xfffffc0c
 8009ed8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009edc:	4b21      	ldr	r3, [pc, #132]	; (8009f64 <HAL_RCC_OscConfig+0x81c>)
 8009ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ee0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009ee2:	4b20      	ldr	r3, [pc, #128]	; (8009f64 <HAL_RCC_OscConfig+0x81c>)
 8009ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ee6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d031      	beq.n	8009f54 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	f003 0203 	and.w	r2, r3, #3
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009efa:	429a      	cmp	r2, r3
 8009efc:	d12a      	bne.n	8009f54 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	091b      	lsrs	r3, r3, #4
 8009f02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d122      	bne.n	8009f54 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f18:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d11a      	bne.n	8009f54 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	0a5b      	lsrs	r3, r3, #9
 8009f22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f2a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d111      	bne.n	8009f54 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	0c1b      	lsrs	r3, r3, #16
 8009f34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f3c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d108      	bne.n	8009f54 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	0e1b      	lsrs	r3, r3, #24
 8009f46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f4e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d001      	beq.n	8009f58 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8009f54:	2301      	movs	r3, #1
 8009f56:	e000      	b.n	8009f5a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8009f58:	2300      	movs	r3, #0
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3730      	adds	r7, #48	; 0x30
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}
 8009f62:	bf00      	nop
 8009f64:	58024400 	.word	0x58024400

08009f68 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b086      	sub	sp, #24
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d101      	bne.n	8009f7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	e19c      	b.n	800a2b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009f7c:	4b8a      	ldr	r3, [pc, #552]	; (800a1a8 <HAL_RCC_ClockConfig+0x240>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f003 030f 	and.w	r3, r3, #15
 8009f84:	683a      	ldr	r2, [r7, #0]
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d910      	bls.n	8009fac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f8a:	4b87      	ldr	r3, [pc, #540]	; (800a1a8 <HAL_RCC_ClockConfig+0x240>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f023 020f 	bic.w	r2, r3, #15
 8009f92:	4985      	ldr	r1, [pc, #532]	; (800a1a8 <HAL_RCC_ClockConfig+0x240>)
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	4313      	orrs	r3, r2
 8009f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f9a:	4b83      	ldr	r3, [pc, #524]	; (800a1a8 <HAL_RCC_ClockConfig+0x240>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f003 030f 	and.w	r3, r3, #15
 8009fa2:	683a      	ldr	r2, [r7, #0]
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d001      	beq.n	8009fac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	e184      	b.n	800a2b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f003 0304 	and.w	r3, r3, #4
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d010      	beq.n	8009fda <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	691a      	ldr	r2, [r3, #16]
 8009fbc:	4b7b      	ldr	r3, [pc, #492]	; (800a1ac <HAL_RCC_ClockConfig+0x244>)
 8009fbe:	699b      	ldr	r3, [r3, #24]
 8009fc0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d908      	bls.n	8009fda <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009fc8:	4b78      	ldr	r3, [pc, #480]	; (800a1ac <HAL_RCC_ClockConfig+0x244>)
 8009fca:	699b      	ldr	r3, [r3, #24]
 8009fcc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	691b      	ldr	r3, [r3, #16]
 8009fd4:	4975      	ldr	r1, [pc, #468]	; (800a1ac <HAL_RCC_ClockConfig+0x244>)
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f003 0308 	and.w	r3, r3, #8
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d010      	beq.n	800a008 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	695a      	ldr	r2, [r3, #20]
 8009fea:	4b70      	ldr	r3, [pc, #448]	; (800a1ac <HAL_RCC_ClockConfig+0x244>)
 8009fec:	69db      	ldr	r3, [r3, #28]
 8009fee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d908      	bls.n	800a008 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009ff6:	4b6d      	ldr	r3, [pc, #436]	; (800a1ac <HAL_RCC_ClockConfig+0x244>)
 8009ff8:	69db      	ldr	r3, [r3, #28]
 8009ffa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	695b      	ldr	r3, [r3, #20]
 800a002:	496a      	ldr	r1, [pc, #424]	; (800a1ac <HAL_RCC_ClockConfig+0x244>)
 800a004:	4313      	orrs	r3, r2
 800a006:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f003 0310 	and.w	r3, r3, #16
 800a010:	2b00      	cmp	r3, #0
 800a012:	d010      	beq.n	800a036 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	699a      	ldr	r2, [r3, #24]
 800a018:	4b64      	ldr	r3, [pc, #400]	; (800a1ac <HAL_RCC_ClockConfig+0x244>)
 800a01a:	69db      	ldr	r3, [r3, #28]
 800a01c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a020:	429a      	cmp	r2, r3
 800a022:	d908      	bls.n	800a036 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a024:	4b61      	ldr	r3, [pc, #388]	; (800a1ac <HAL_RCC_ClockConfig+0x244>)
 800a026:	69db      	ldr	r3, [r3, #28]
 800a028:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	699b      	ldr	r3, [r3, #24]
 800a030:	495e      	ldr	r1, [pc, #376]	; (800a1ac <HAL_RCC_ClockConfig+0x244>)
 800a032:	4313      	orrs	r3, r2
 800a034:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f003 0320 	and.w	r3, r3, #32
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d010      	beq.n	800a064 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	69da      	ldr	r2, [r3, #28]
 800a046:	4b59      	ldr	r3, [pc, #356]	; (800a1ac <HAL_RCC_ClockConfig+0x244>)
 800a048:	6a1b      	ldr	r3, [r3, #32]
 800a04a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a04e:	429a      	cmp	r2, r3
 800a050:	d908      	bls.n	800a064 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a052:	4b56      	ldr	r3, [pc, #344]	; (800a1ac <HAL_RCC_ClockConfig+0x244>)
 800a054:	6a1b      	ldr	r3, [r3, #32]
 800a056:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	69db      	ldr	r3, [r3, #28]
 800a05e:	4953      	ldr	r1, [pc, #332]	; (800a1ac <HAL_RCC_ClockConfig+0x244>)
 800a060:	4313      	orrs	r3, r2
 800a062:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f003 0302 	and.w	r3, r3, #2
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d010      	beq.n	800a092 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	68da      	ldr	r2, [r3, #12]
 800a074:	4b4d      	ldr	r3, [pc, #308]	; (800a1ac <HAL_RCC_ClockConfig+0x244>)
 800a076:	699b      	ldr	r3, [r3, #24]
 800a078:	f003 030f 	and.w	r3, r3, #15
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d908      	bls.n	800a092 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a080:	4b4a      	ldr	r3, [pc, #296]	; (800a1ac <HAL_RCC_ClockConfig+0x244>)
 800a082:	699b      	ldr	r3, [r3, #24]
 800a084:	f023 020f 	bic.w	r2, r3, #15
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	68db      	ldr	r3, [r3, #12]
 800a08c:	4947      	ldr	r1, [pc, #284]	; (800a1ac <HAL_RCC_ClockConfig+0x244>)
 800a08e:	4313      	orrs	r3, r2
 800a090:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f003 0301 	and.w	r3, r3, #1
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d055      	beq.n	800a14a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a09e:	4b43      	ldr	r3, [pc, #268]	; (800a1ac <HAL_RCC_ClockConfig+0x244>)
 800a0a0:	699b      	ldr	r3, [r3, #24]
 800a0a2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	689b      	ldr	r3, [r3, #8]
 800a0aa:	4940      	ldr	r1, [pc, #256]	; (800a1ac <HAL_RCC_ClockConfig+0x244>)
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	2b02      	cmp	r3, #2
 800a0b6:	d107      	bne.n	800a0c8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a0b8:	4b3c      	ldr	r3, [pc, #240]	; (800a1ac <HAL_RCC_ClockConfig+0x244>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d121      	bne.n	800a108 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	e0f6      	b.n	800a2b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	2b03      	cmp	r3, #3
 800a0ce:	d107      	bne.n	800a0e0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a0d0:	4b36      	ldr	r3, [pc, #216]	; (800a1ac <HAL_RCC_ClockConfig+0x244>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d115      	bne.n	800a108 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	e0ea      	b.n	800a2b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	2b01      	cmp	r3, #1
 800a0e6:	d107      	bne.n	800a0f8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a0e8:	4b30      	ldr	r3, [pc, #192]	; (800a1ac <HAL_RCC_ClockConfig+0x244>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d109      	bne.n	800a108 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	e0de      	b.n	800a2b6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a0f8:	4b2c      	ldr	r3, [pc, #176]	; (800a1ac <HAL_RCC_ClockConfig+0x244>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f003 0304 	and.w	r3, r3, #4
 800a100:	2b00      	cmp	r3, #0
 800a102:	d101      	bne.n	800a108 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a104:	2301      	movs	r3, #1
 800a106:	e0d6      	b.n	800a2b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a108:	4b28      	ldr	r3, [pc, #160]	; (800a1ac <HAL_RCC_ClockConfig+0x244>)
 800a10a:	691b      	ldr	r3, [r3, #16]
 800a10c:	f023 0207 	bic.w	r2, r3, #7
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	4925      	ldr	r1, [pc, #148]	; (800a1ac <HAL_RCC_ClockConfig+0x244>)
 800a116:	4313      	orrs	r3, r2
 800a118:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a11a:	f7fa fa4d 	bl	80045b8 <HAL_GetTick>
 800a11e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a120:	e00a      	b.n	800a138 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a122:	f7fa fa49 	bl	80045b8 <HAL_GetTick>
 800a126:	4602      	mov	r2, r0
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	1ad3      	subs	r3, r2, r3
 800a12c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a130:	4293      	cmp	r3, r2
 800a132:	d901      	bls.n	800a138 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a134:	2303      	movs	r3, #3
 800a136:	e0be      	b.n	800a2b6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a138:	4b1c      	ldr	r3, [pc, #112]	; (800a1ac <HAL_RCC_ClockConfig+0x244>)
 800a13a:	691b      	ldr	r3, [r3, #16]
 800a13c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	00db      	lsls	r3, r3, #3
 800a146:	429a      	cmp	r2, r3
 800a148:	d1eb      	bne.n	800a122 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f003 0302 	and.w	r3, r3, #2
 800a152:	2b00      	cmp	r3, #0
 800a154:	d010      	beq.n	800a178 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	68da      	ldr	r2, [r3, #12]
 800a15a:	4b14      	ldr	r3, [pc, #80]	; (800a1ac <HAL_RCC_ClockConfig+0x244>)
 800a15c:	699b      	ldr	r3, [r3, #24]
 800a15e:	f003 030f 	and.w	r3, r3, #15
 800a162:	429a      	cmp	r2, r3
 800a164:	d208      	bcs.n	800a178 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a166:	4b11      	ldr	r3, [pc, #68]	; (800a1ac <HAL_RCC_ClockConfig+0x244>)
 800a168:	699b      	ldr	r3, [r3, #24]
 800a16a:	f023 020f 	bic.w	r2, r3, #15
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	68db      	ldr	r3, [r3, #12]
 800a172:	490e      	ldr	r1, [pc, #56]	; (800a1ac <HAL_RCC_ClockConfig+0x244>)
 800a174:	4313      	orrs	r3, r2
 800a176:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a178:	4b0b      	ldr	r3, [pc, #44]	; (800a1a8 <HAL_RCC_ClockConfig+0x240>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f003 030f 	and.w	r3, r3, #15
 800a180:	683a      	ldr	r2, [r7, #0]
 800a182:	429a      	cmp	r2, r3
 800a184:	d214      	bcs.n	800a1b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a186:	4b08      	ldr	r3, [pc, #32]	; (800a1a8 <HAL_RCC_ClockConfig+0x240>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f023 020f 	bic.w	r2, r3, #15
 800a18e:	4906      	ldr	r1, [pc, #24]	; (800a1a8 <HAL_RCC_ClockConfig+0x240>)
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	4313      	orrs	r3, r2
 800a194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a196:	4b04      	ldr	r3, [pc, #16]	; (800a1a8 <HAL_RCC_ClockConfig+0x240>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f003 030f 	and.w	r3, r3, #15
 800a19e:	683a      	ldr	r2, [r7, #0]
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d005      	beq.n	800a1b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	e086      	b.n	800a2b6 <HAL_RCC_ClockConfig+0x34e>
 800a1a8:	52002000 	.word	0x52002000
 800a1ac:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f003 0304 	and.w	r3, r3, #4
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d010      	beq.n	800a1de <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	691a      	ldr	r2, [r3, #16]
 800a1c0:	4b3f      	ldr	r3, [pc, #252]	; (800a2c0 <HAL_RCC_ClockConfig+0x358>)
 800a1c2:	699b      	ldr	r3, [r3, #24]
 800a1c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d208      	bcs.n	800a1de <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a1cc:	4b3c      	ldr	r3, [pc, #240]	; (800a2c0 <HAL_RCC_ClockConfig+0x358>)
 800a1ce:	699b      	ldr	r3, [r3, #24]
 800a1d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	691b      	ldr	r3, [r3, #16]
 800a1d8:	4939      	ldr	r1, [pc, #228]	; (800a2c0 <HAL_RCC_ClockConfig+0x358>)
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f003 0308 	and.w	r3, r3, #8
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d010      	beq.n	800a20c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	695a      	ldr	r2, [r3, #20]
 800a1ee:	4b34      	ldr	r3, [pc, #208]	; (800a2c0 <HAL_RCC_ClockConfig+0x358>)
 800a1f0:	69db      	ldr	r3, [r3, #28]
 800a1f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d208      	bcs.n	800a20c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a1fa:	4b31      	ldr	r3, [pc, #196]	; (800a2c0 <HAL_RCC_ClockConfig+0x358>)
 800a1fc:	69db      	ldr	r3, [r3, #28]
 800a1fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	695b      	ldr	r3, [r3, #20]
 800a206:	492e      	ldr	r1, [pc, #184]	; (800a2c0 <HAL_RCC_ClockConfig+0x358>)
 800a208:	4313      	orrs	r3, r2
 800a20a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f003 0310 	and.w	r3, r3, #16
 800a214:	2b00      	cmp	r3, #0
 800a216:	d010      	beq.n	800a23a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	699a      	ldr	r2, [r3, #24]
 800a21c:	4b28      	ldr	r3, [pc, #160]	; (800a2c0 <HAL_RCC_ClockConfig+0x358>)
 800a21e:	69db      	ldr	r3, [r3, #28]
 800a220:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a224:	429a      	cmp	r2, r3
 800a226:	d208      	bcs.n	800a23a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a228:	4b25      	ldr	r3, [pc, #148]	; (800a2c0 <HAL_RCC_ClockConfig+0x358>)
 800a22a:	69db      	ldr	r3, [r3, #28]
 800a22c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	699b      	ldr	r3, [r3, #24]
 800a234:	4922      	ldr	r1, [pc, #136]	; (800a2c0 <HAL_RCC_ClockConfig+0x358>)
 800a236:	4313      	orrs	r3, r2
 800a238:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f003 0320 	and.w	r3, r3, #32
 800a242:	2b00      	cmp	r3, #0
 800a244:	d010      	beq.n	800a268 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	69da      	ldr	r2, [r3, #28]
 800a24a:	4b1d      	ldr	r3, [pc, #116]	; (800a2c0 <HAL_RCC_ClockConfig+0x358>)
 800a24c:	6a1b      	ldr	r3, [r3, #32]
 800a24e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a252:	429a      	cmp	r2, r3
 800a254:	d208      	bcs.n	800a268 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a256:	4b1a      	ldr	r3, [pc, #104]	; (800a2c0 <HAL_RCC_ClockConfig+0x358>)
 800a258:	6a1b      	ldr	r3, [r3, #32]
 800a25a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	69db      	ldr	r3, [r3, #28]
 800a262:	4917      	ldr	r1, [pc, #92]	; (800a2c0 <HAL_RCC_ClockConfig+0x358>)
 800a264:	4313      	orrs	r3, r2
 800a266:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a268:	f000 f844 	bl	800a2f4 <HAL_RCC_GetSysClockFreq>
 800a26c:	4601      	mov	r1, r0
 800a26e:	4b14      	ldr	r3, [pc, #80]	; (800a2c0 <HAL_RCC_ClockConfig+0x358>)
 800a270:	699b      	ldr	r3, [r3, #24]
 800a272:	0a1b      	lsrs	r3, r3, #8
 800a274:	f003 030f 	and.w	r3, r3, #15
 800a278:	4a12      	ldr	r2, [pc, #72]	; (800a2c4 <HAL_RCC_ClockConfig+0x35c>)
 800a27a:	5cd3      	ldrb	r3, [r2, r3]
 800a27c:	f003 031f 	and.w	r3, r3, #31
 800a280:	fa21 f303 	lsr.w	r3, r1, r3
 800a284:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a286:	4b0e      	ldr	r3, [pc, #56]	; (800a2c0 <HAL_RCC_ClockConfig+0x358>)
 800a288:	699b      	ldr	r3, [r3, #24]
 800a28a:	f003 030f 	and.w	r3, r3, #15
 800a28e:	4a0d      	ldr	r2, [pc, #52]	; (800a2c4 <HAL_RCC_ClockConfig+0x35c>)
 800a290:	5cd3      	ldrb	r3, [r2, r3]
 800a292:	f003 031f 	and.w	r3, r3, #31
 800a296:	693a      	ldr	r2, [r7, #16]
 800a298:	fa22 f303 	lsr.w	r3, r2, r3
 800a29c:	4a0a      	ldr	r2, [pc, #40]	; (800a2c8 <HAL_RCC_ClockConfig+0x360>)
 800a29e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a2a0:	4a0a      	ldr	r2, [pc, #40]	; (800a2cc <HAL_RCC_ClockConfig+0x364>)
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800a2a6:	4b0a      	ldr	r3, [pc, #40]	; (800a2d0 <HAL_RCC_ClockConfig+0x368>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f7fa f93a 	bl	8004524 <HAL_InitTick>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a2b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3718      	adds	r7, #24
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	58024400 	.word	0x58024400
 800a2c4:	0801af24 	.word	0x0801af24
 800a2c8:	24000014 	.word	0x24000014
 800a2cc:	24000010 	.word	0x24000010
 800a2d0:	24000018 	.word	0x24000018

0800a2d4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 800a2d8:	4b05      	ldr	r3, [pc, #20]	; (800a2f0 <HAL_RCC_EnableCSS+0x1c>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4a04      	ldr	r2, [pc, #16]	; (800a2f0 <HAL_RCC_EnableCSS+0x1c>)
 800a2de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a2e2:	6013      	str	r3, [r2, #0]
}
 800a2e4:	bf00      	nop
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr
 800a2ee:	bf00      	nop
 800a2f0:	58024400 	.word	0x58024400

0800a2f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b089      	sub	sp, #36	; 0x24
 800a2f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a2fa:	4baf      	ldr	r3, [pc, #700]	; (800a5b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a2fc:	691b      	ldr	r3, [r3, #16]
 800a2fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a302:	2b18      	cmp	r3, #24
 800a304:	f200 814e 	bhi.w	800a5a4 <HAL_RCC_GetSysClockFreq+0x2b0>
 800a308:	a201      	add	r2, pc, #4	; (adr r2, 800a310 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a30a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a30e:	bf00      	nop
 800a310:	0800a375 	.word	0x0800a375
 800a314:	0800a5a5 	.word	0x0800a5a5
 800a318:	0800a5a5 	.word	0x0800a5a5
 800a31c:	0800a5a5 	.word	0x0800a5a5
 800a320:	0800a5a5 	.word	0x0800a5a5
 800a324:	0800a5a5 	.word	0x0800a5a5
 800a328:	0800a5a5 	.word	0x0800a5a5
 800a32c:	0800a5a5 	.word	0x0800a5a5
 800a330:	0800a39b 	.word	0x0800a39b
 800a334:	0800a5a5 	.word	0x0800a5a5
 800a338:	0800a5a5 	.word	0x0800a5a5
 800a33c:	0800a5a5 	.word	0x0800a5a5
 800a340:	0800a5a5 	.word	0x0800a5a5
 800a344:	0800a5a5 	.word	0x0800a5a5
 800a348:	0800a5a5 	.word	0x0800a5a5
 800a34c:	0800a5a5 	.word	0x0800a5a5
 800a350:	0800a3a1 	.word	0x0800a3a1
 800a354:	0800a5a5 	.word	0x0800a5a5
 800a358:	0800a5a5 	.word	0x0800a5a5
 800a35c:	0800a5a5 	.word	0x0800a5a5
 800a360:	0800a5a5 	.word	0x0800a5a5
 800a364:	0800a5a5 	.word	0x0800a5a5
 800a368:	0800a5a5 	.word	0x0800a5a5
 800a36c:	0800a5a5 	.word	0x0800a5a5
 800a370:	0800a3a7 	.word	0x0800a3a7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a374:	4b90      	ldr	r3, [pc, #576]	; (800a5b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f003 0320 	and.w	r3, r3, #32
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d009      	beq.n	800a394 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a380:	4b8d      	ldr	r3, [pc, #564]	; (800a5b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	08db      	lsrs	r3, r3, #3
 800a386:	f003 0303 	and.w	r3, r3, #3
 800a38a:	4a8c      	ldr	r2, [pc, #560]	; (800a5bc <HAL_RCC_GetSysClockFreq+0x2c8>)
 800a38c:	fa22 f303 	lsr.w	r3, r2, r3
 800a390:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800a392:	e10a      	b.n	800a5aa <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a394:	4b89      	ldr	r3, [pc, #548]	; (800a5bc <HAL_RCC_GetSysClockFreq+0x2c8>)
 800a396:	61bb      	str	r3, [r7, #24]
    break;
 800a398:	e107      	b.n	800a5aa <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800a39a:	4b89      	ldr	r3, [pc, #548]	; (800a5c0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800a39c:	61bb      	str	r3, [r7, #24]
    break;
 800a39e:	e104      	b.n	800a5aa <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800a3a0:	4b88      	ldr	r3, [pc, #544]	; (800a5c4 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800a3a2:	61bb      	str	r3, [r7, #24]
    break;
 800a3a4:	e101      	b.n	800a5aa <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a3a6:	4b84      	ldr	r3, [pc, #528]	; (800a5b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a3a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3aa:	f003 0303 	and.w	r3, r3, #3
 800a3ae:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800a3b0:	4b81      	ldr	r3, [pc, #516]	; (800a5b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a3b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3b4:	091b      	lsrs	r3, r3, #4
 800a3b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a3ba:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a3bc:	4b7e      	ldr	r3, [pc, #504]	; (800a5b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c0:	f003 0301 	and.w	r3, r3, #1
 800a3c4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a3c6:	4b7c      	ldr	r3, [pc, #496]	; (800a5b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a3c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3ca:	08db      	lsrs	r3, r3, #3
 800a3cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a3d0:	68fa      	ldr	r2, [r7, #12]
 800a3d2:	fb02 f303 	mul.w	r3, r2, r3
 800a3d6:	ee07 3a90 	vmov	s15, r3
 800a3da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3de:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	f000 80da 	beq.w	800a59e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d05a      	beq.n	800a4a6 <HAL_RCC_GetSysClockFreq+0x1b2>
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d302      	bcc.n	800a3fa <HAL_RCC_GetSysClockFreq+0x106>
 800a3f4:	2b02      	cmp	r3, #2
 800a3f6:	d078      	beq.n	800a4ea <HAL_RCC_GetSysClockFreq+0x1f6>
 800a3f8:	e099      	b.n	800a52e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3fa:	4b6f      	ldr	r3, [pc, #444]	; (800a5b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f003 0320 	and.w	r3, r3, #32
 800a402:	2b00      	cmp	r3, #0
 800a404:	d02d      	beq.n	800a462 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a406:	4b6c      	ldr	r3, [pc, #432]	; (800a5b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	08db      	lsrs	r3, r3, #3
 800a40c:	f003 0303 	and.w	r3, r3, #3
 800a410:	4a6a      	ldr	r2, [pc, #424]	; (800a5bc <HAL_RCC_GetSysClockFreq+0x2c8>)
 800a412:	fa22 f303 	lsr.w	r3, r2, r3
 800a416:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	ee07 3a90 	vmov	s15, r3
 800a41e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	ee07 3a90 	vmov	s15, r3
 800a428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a42c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a430:	4b61      	ldr	r3, [pc, #388]	; (800a5b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a438:	ee07 3a90 	vmov	s15, r3
 800a43c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a440:	ed97 6a02 	vldr	s12, [r7, #8]
 800a444:	eddf 5a60 	vldr	s11, [pc, #384]	; 800a5c8 <HAL_RCC_GetSysClockFreq+0x2d4>
 800a448:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a44c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a450:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a454:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a45c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800a460:	e087      	b.n	800a572 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	ee07 3a90 	vmov	s15, r3
 800a468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a46c:	eddf 6a57 	vldr	s13, [pc, #348]	; 800a5cc <HAL_RCC_GetSysClockFreq+0x2d8>
 800a470:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a474:	4b50      	ldr	r3, [pc, #320]	; (800a5b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a47c:	ee07 3a90 	vmov	s15, r3
 800a480:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a484:	ed97 6a02 	vldr	s12, [r7, #8]
 800a488:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800a5c8 <HAL_RCC_GetSysClockFreq+0x2d4>
 800a48c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a490:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a494:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a498:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a49c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a4a4:	e065      	b.n	800a572 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	ee07 3a90 	vmov	s15, r3
 800a4ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4b0:	eddf 6a47 	vldr	s13, [pc, #284]	; 800a5d0 <HAL_RCC_GetSysClockFreq+0x2dc>
 800a4b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4b8:	4b3f      	ldr	r3, [pc, #252]	; (800a5b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a4ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4c0:	ee07 3a90 	vmov	s15, r3
 800a4c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4c8:	ed97 6a02 	vldr	s12, [r7, #8]
 800a4cc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800a5c8 <HAL_RCC_GetSysClockFreq+0x2d4>
 800a4d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a4e8:	e043      	b.n	800a572 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	ee07 3a90 	vmov	s15, r3
 800a4f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4f4:	eddf 6a37 	vldr	s13, [pc, #220]	; 800a5d4 <HAL_RCC_GetSysClockFreq+0x2e0>
 800a4f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4fc:	4b2e      	ldr	r3, [pc, #184]	; (800a5b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a4fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a504:	ee07 3a90 	vmov	s15, r3
 800a508:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a50c:	ed97 6a02 	vldr	s12, [r7, #8]
 800a510:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800a5c8 <HAL_RCC_GetSysClockFreq+0x2d4>
 800a514:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a518:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a51c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a520:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a524:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a528:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a52c:	e021      	b.n	800a572 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	ee07 3a90 	vmov	s15, r3
 800a534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a538:	eddf 6a25 	vldr	s13, [pc, #148]	; 800a5d0 <HAL_RCC_GetSysClockFreq+0x2dc>
 800a53c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a540:	4b1d      	ldr	r3, [pc, #116]	; (800a5b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a548:	ee07 3a90 	vmov	s15, r3
 800a54c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a550:	ed97 6a02 	vldr	s12, [r7, #8]
 800a554:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800a5c8 <HAL_RCC_GetSysClockFreq+0x2d4>
 800a558:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a55c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a560:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a564:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a568:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a56c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a570:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800a572:	4b11      	ldr	r3, [pc, #68]	; (800a5b8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a576:	0a5b      	lsrs	r3, r3, #9
 800a578:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a57c:	3301      	adds	r3, #1
 800a57e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	ee07 3a90 	vmov	s15, r3
 800a586:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a58a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a58e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a592:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a596:	ee17 3a90 	vmov	r3, s15
 800a59a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800a59c:	e005      	b.n	800a5aa <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	61bb      	str	r3, [r7, #24]
    break;
 800a5a2:	e002      	b.n	800a5aa <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800a5a4:	4b06      	ldr	r3, [pc, #24]	; (800a5c0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800a5a6:	61bb      	str	r3, [r7, #24]
    break;
 800a5a8:	bf00      	nop
  }

  return sysclockfreq;
 800a5aa:	69bb      	ldr	r3, [r7, #24]
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3724      	adds	r7, #36	; 0x24
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr
 800a5b8:	58024400 	.word	0x58024400
 800a5bc:	03d09000 	.word	0x03d09000
 800a5c0:	003d0900 	.word	0x003d0900
 800a5c4:	017d7840 	.word	0x017d7840
 800a5c8:	46000000 	.word	0x46000000
 800a5cc:	4c742400 	.word	0x4c742400
 800a5d0:	4a742400 	.word	0x4a742400
 800a5d4:	4bbebc20 	.word	0x4bbebc20

0800a5d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a5de:	f7ff fe89 	bl	800a2f4 <HAL_RCC_GetSysClockFreq>
 800a5e2:	4601      	mov	r1, r0
 800a5e4:	4b10      	ldr	r3, [pc, #64]	; (800a628 <HAL_RCC_GetHCLKFreq+0x50>)
 800a5e6:	699b      	ldr	r3, [r3, #24]
 800a5e8:	0a1b      	lsrs	r3, r3, #8
 800a5ea:	f003 030f 	and.w	r3, r3, #15
 800a5ee:	4a0f      	ldr	r2, [pc, #60]	; (800a62c <HAL_RCC_GetHCLKFreq+0x54>)
 800a5f0:	5cd3      	ldrb	r3, [r2, r3]
 800a5f2:	f003 031f 	and.w	r3, r3, #31
 800a5f6:	fa21 f303 	lsr.w	r3, r1, r3
 800a5fa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a5fc:	4b0a      	ldr	r3, [pc, #40]	; (800a628 <HAL_RCC_GetHCLKFreq+0x50>)
 800a5fe:	699b      	ldr	r3, [r3, #24]
 800a600:	f003 030f 	and.w	r3, r3, #15
 800a604:	4a09      	ldr	r2, [pc, #36]	; (800a62c <HAL_RCC_GetHCLKFreq+0x54>)
 800a606:	5cd3      	ldrb	r3, [r2, r3]
 800a608:	f003 031f 	and.w	r3, r3, #31
 800a60c:	687a      	ldr	r2, [r7, #4]
 800a60e:	fa22 f303 	lsr.w	r3, r2, r3
 800a612:	4a07      	ldr	r2, [pc, #28]	; (800a630 <HAL_RCC_GetHCLKFreq+0x58>)
 800a614:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a616:	4a07      	ldr	r2, [pc, #28]	; (800a634 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a61c:	4b04      	ldr	r3, [pc, #16]	; (800a630 <HAL_RCC_GetHCLKFreq+0x58>)
 800a61e:	681b      	ldr	r3, [r3, #0]
}
 800a620:	4618      	mov	r0, r3
 800a622:	3708      	adds	r7, #8
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}
 800a628:	58024400 	.word	0x58024400
 800a62c:	0801af24 	.word	0x0801af24
 800a630:	24000014 	.word	0x24000014
 800a634:	24000010 	.word	0x24000010

0800a638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a63c:	f7ff ffcc 	bl	800a5d8 <HAL_RCC_GetHCLKFreq>
 800a640:	4601      	mov	r1, r0
 800a642:	4b06      	ldr	r3, [pc, #24]	; (800a65c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a644:	69db      	ldr	r3, [r3, #28]
 800a646:	091b      	lsrs	r3, r3, #4
 800a648:	f003 0307 	and.w	r3, r3, #7
 800a64c:	4a04      	ldr	r2, [pc, #16]	; (800a660 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a64e:	5cd3      	ldrb	r3, [r2, r3]
 800a650:	f003 031f 	and.w	r3, r3, #31
 800a654:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a658:	4618      	mov	r0, r3
 800a65a:	bd80      	pop	{r7, pc}
 800a65c:	58024400 	.word	0x58024400
 800a660:	0801af24 	.word	0x0801af24

0800a664 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a668:	f7ff ffb6 	bl	800a5d8 <HAL_RCC_GetHCLKFreq>
 800a66c:	4601      	mov	r1, r0
 800a66e:	4b06      	ldr	r3, [pc, #24]	; (800a688 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a670:	69db      	ldr	r3, [r3, #28]
 800a672:	0a1b      	lsrs	r3, r3, #8
 800a674:	f003 0307 	and.w	r3, r3, #7
 800a678:	4a04      	ldr	r2, [pc, #16]	; (800a68c <HAL_RCC_GetPCLK2Freq+0x28>)
 800a67a:	5cd3      	ldrb	r3, [r2, r3]
 800a67c:	f003 031f 	and.w	r3, r3, #31
 800a680:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a684:	4618      	mov	r0, r3
 800a686:	bd80      	pop	{r7, pc}
 800a688:	58024400 	.word	0x58024400
 800a68c:	0801af24 	.word	0x0801af24

0800a690 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800a694:	4b07      	ldr	r3, [pc, #28]	; (800a6b4 <HAL_RCC_NMI_IRQHandler+0x24>)
 800a696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a69c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6a0:	d105      	bne.n	800a6ae <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 800a6a2:	f000 f809 	bl	800a6b8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800a6a6:	4b03      	ldr	r3, [pc, #12]	; (800a6b4 <HAL_RCC_NMI_IRQHandler+0x24>)
 800a6a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a6ac:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800a6ae:	bf00      	nop
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	58024400 	.word	0x58024400

0800a6b8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 800a6bc:	bf00      	nop
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr
	...

0800a6c8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b086      	sub	sp, #24
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d03d      	beq.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a6ec:	d013      	beq.n	800a716 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800a6ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a6f2:	d802      	bhi.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0x32>
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d007      	beq.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800a6f8:	e01f      	b.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800a6fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a6fe:	d013      	beq.n	800a728 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800a700:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a704:	d01c      	beq.n	800a740 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800a706:	e018      	b.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a708:	4baf      	ldr	r3, [pc, #700]	; (800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a70c:	4aae      	ldr	r2, [pc, #696]	; (800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a70e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a712:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a714:	e015      	b.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	3304      	adds	r3, #4
 800a71a:	2102      	movs	r1, #2
 800a71c:	4618      	mov	r0, r3
 800a71e:	f001 fd33 	bl	800c188 <RCCEx_PLL2_Config>
 800a722:	4603      	mov	r3, r0
 800a724:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a726:	e00c      	b.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	3324      	adds	r3, #36	; 0x24
 800a72c:	2102      	movs	r1, #2
 800a72e:	4618      	mov	r0, r3
 800a730:	f001 fddc 	bl	800c2ec <RCCEx_PLL3_Config>
 800a734:	4603      	mov	r3, r0
 800a736:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a738:	e003      	b.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a73a:	2301      	movs	r3, #1
 800a73c:	75fb      	strb	r3, [r7, #23]
      break;
 800a73e:	e000      	b.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800a740:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a742:	7dfb      	ldrb	r3, [r7, #23]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d109      	bne.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a748:	4b9f      	ldr	r3, [pc, #636]	; (800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a74a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a74c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a754:	499c      	ldr	r1, [pc, #624]	; (800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a756:	4313      	orrs	r3, r2
 800a758:	650b      	str	r3, [r1, #80]	; 0x50
 800a75a:	e001      	b.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a75c:	7dfb      	ldrb	r3, [r7, #23]
 800a75e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d03d      	beq.n	800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a770:	2b04      	cmp	r3, #4
 800a772:	d826      	bhi.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800a774:	a201      	add	r2, pc, #4	; (adr r2, 800a77c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800a776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a77a:	bf00      	nop
 800a77c:	0800a791 	.word	0x0800a791
 800a780:	0800a79f 	.word	0x0800a79f
 800a784:	0800a7b1 	.word	0x0800a7b1
 800a788:	0800a7c9 	.word	0x0800a7c9
 800a78c:	0800a7c9 	.word	0x0800a7c9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a790:	4b8d      	ldr	r3, [pc, #564]	; (800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a794:	4a8c      	ldr	r2, [pc, #560]	; (800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a796:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a79a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a79c:	e015      	b.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	3304      	adds	r3, #4
 800a7a2:	2100      	movs	r1, #0
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f001 fcef 	bl	800c188 <RCCEx_PLL2_Config>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a7ae:	e00c      	b.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	3324      	adds	r3, #36	; 0x24
 800a7b4:	2100      	movs	r1, #0
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f001 fd98 	bl	800c2ec <RCCEx_PLL3_Config>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a7c0:	e003      	b.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	75fb      	strb	r3, [r7, #23]
      break;
 800a7c6:	e000      	b.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800a7c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a7ca:	7dfb      	ldrb	r3, [r7, #23]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d109      	bne.n	800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a7d0:	4b7d      	ldr	r3, [pc, #500]	; (800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a7d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7d4:	f023 0207 	bic.w	r2, r3, #7
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7dc:	497a      	ldr	r1, [pc, #488]	; (800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a7de:	4313      	orrs	r3, r2
 800a7e0:	650b      	str	r3, [r1, #80]	; 0x50
 800a7e2:	e001      	b.n	800a7e8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7e4:	7dfb      	ldrb	r3, [r7, #23]
 800a7e6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d03e      	beq.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7f8:	2b80      	cmp	r3, #128	; 0x80
 800a7fa:	d01c      	beq.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800a7fc:	2b80      	cmp	r3, #128	; 0x80
 800a7fe:	d804      	bhi.n	800a80a <HAL_RCCEx_PeriphCLKConfig+0x142>
 800a800:	2b00      	cmp	r3, #0
 800a802:	d008      	beq.n	800a816 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800a804:	2b40      	cmp	r3, #64	; 0x40
 800a806:	d00d      	beq.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800a808:	e01e      	b.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800a80a:	2bc0      	cmp	r3, #192	; 0xc0
 800a80c:	d01f      	beq.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0x186>
 800a80e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a812:	d01e      	beq.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800a814:	e018      	b.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a816:	4b6c      	ldr	r3, [pc, #432]	; (800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a81a:	4a6b      	ldr	r2, [pc, #428]	; (800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a81c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a820:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a822:	e017      	b.n	800a854 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	3304      	adds	r3, #4
 800a828:	2100      	movs	r1, #0
 800a82a:	4618      	mov	r0, r3
 800a82c:	f001 fcac 	bl	800c188 <RCCEx_PLL2_Config>
 800a830:	4603      	mov	r3, r0
 800a832:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a834:	e00e      	b.n	800a854 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	3324      	adds	r3, #36	; 0x24
 800a83a:	2100      	movs	r1, #0
 800a83c:	4618      	mov	r0, r3
 800a83e:	f001 fd55 	bl	800c2ec <RCCEx_PLL3_Config>
 800a842:	4603      	mov	r3, r0
 800a844:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a846:	e005      	b.n	800a854 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a848:	2301      	movs	r3, #1
 800a84a:	75fb      	strb	r3, [r7, #23]
      break;
 800a84c:	e002      	b.n	800a854 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800a84e:	bf00      	nop
 800a850:	e000      	b.n	800a854 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800a852:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a854:	7dfb      	ldrb	r3, [r7, #23]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d109      	bne.n	800a86e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a85a:	4b5b      	ldr	r3, [pc, #364]	; (800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a85c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a85e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a866:	4958      	ldr	r1, [pc, #352]	; (800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a868:	4313      	orrs	r3, r2
 800a86a:	650b      	str	r3, [r1, #80]	; 0x50
 800a86c:	e001      	b.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a86e:	7dfb      	ldrb	r3, [r7, #23]
 800a870:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d044      	beq.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a884:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a888:	d01f      	beq.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a88a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a88e:	d805      	bhi.n	800a89c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800a890:	2b00      	cmp	r3, #0
 800a892:	d00a      	beq.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a894:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a898:	d00e      	beq.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800a89a:	e01f      	b.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0x214>
 800a89c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a8a0:	d01f      	beq.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800a8a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a8a6:	d01e      	beq.n	800a8e6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800a8a8:	e018      	b.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8aa:	4b47      	ldr	r3, [pc, #284]	; (800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a8ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ae:	4a46      	ldr	r2, [pc, #280]	; (800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a8b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a8b6:	e017      	b.n	800a8e8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	3304      	adds	r3, #4
 800a8bc:	2100      	movs	r1, #0
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f001 fc62 	bl	800c188 <RCCEx_PLL2_Config>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a8c8:	e00e      	b.n	800a8e8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	3324      	adds	r3, #36	; 0x24
 800a8ce:	2100      	movs	r1, #0
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f001 fd0b 	bl	800c2ec <RCCEx_PLL3_Config>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a8da:	e005      	b.n	800a8e8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	75fb      	strb	r3, [r7, #23]
      break;
 800a8e0:	e002      	b.n	800a8e8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800a8e2:	bf00      	nop
 800a8e4:	e000      	b.n	800a8e8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800a8e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a8e8:	7dfb      	ldrb	r3, [r7, #23]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d10a      	bne.n	800a904 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a8ee:	4b36      	ldr	r3, [pc, #216]	; (800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a8f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8f2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a8fc:	4932      	ldr	r1, [pc, #200]	; (800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a8fe:	4313      	orrs	r3, r2
 800a900:	658b      	str	r3, [r1, #88]	; 0x58
 800a902:	e001      	b.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a904:	7dfb      	ldrb	r3, [r7, #23]
 800a906:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a910:	2b00      	cmp	r3, #0
 800a912:	d044      	beq.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a91a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a91e:	d01f      	beq.n	800a960 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a920:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a924:	d805      	bhi.n	800a932 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800a926:	2b00      	cmp	r3, #0
 800a928:	d00a      	beq.n	800a940 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800a92a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a92e:	d00e      	beq.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0x286>
 800a930:	e01f      	b.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800a932:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a936:	d01f      	beq.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800a938:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a93c:	d01e      	beq.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800a93e:	e018      	b.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a940:	4b21      	ldr	r3, [pc, #132]	; (800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a944:	4a20      	ldr	r2, [pc, #128]	; (800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a946:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a94a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a94c:	e017      	b.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	3304      	adds	r3, #4
 800a952:	2100      	movs	r1, #0
 800a954:	4618      	mov	r0, r3
 800a956:	f001 fc17 	bl	800c188 <RCCEx_PLL2_Config>
 800a95a:	4603      	mov	r3, r0
 800a95c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a95e:	e00e      	b.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	3324      	adds	r3, #36	; 0x24
 800a964:	2100      	movs	r1, #0
 800a966:	4618      	mov	r0, r3
 800a968:	f001 fcc0 	bl	800c2ec <RCCEx_PLL3_Config>
 800a96c:	4603      	mov	r3, r0
 800a96e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a970:	e005      	b.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a972:	2301      	movs	r3, #1
 800a974:	75fb      	strb	r3, [r7, #23]
      break;
 800a976:	e002      	b.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800a978:	bf00      	nop
 800a97a:	e000      	b.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800a97c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a97e:	7dfb      	ldrb	r3, [r7, #23]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d10a      	bne.n	800a99a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a984:	4b10      	ldr	r3, [pc, #64]	; (800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a988:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a992:	490d      	ldr	r1, [pc, #52]	; (800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a994:	4313      	orrs	r3, r2
 800a996:	658b      	str	r3, [r1, #88]	; 0x58
 800a998:	e001      	b.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a99a:	7dfb      	ldrb	r3, [r7, #23]
 800a99c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d035      	beq.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9ae:	2b10      	cmp	r3, #16
 800a9b0:	d00c      	beq.n	800a9cc <HAL_RCCEx_PeriphCLKConfig+0x304>
 800a9b2:	2b10      	cmp	r3, #16
 800a9b4:	d802      	bhi.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d01b      	beq.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800a9ba:	e017      	b.n	800a9ec <HAL_RCCEx_PeriphCLKConfig+0x324>
 800a9bc:	2b20      	cmp	r3, #32
 800a9be:	d00c      	beq.n	800a9da <HAL_RCCEx_PeriphCLKConfig+0x312>
 800a9c0:	2b30      	cmp	r3, #48	; 0x30
 800a9c2:	d018      	beq.n	800a9f6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800a9c4:	e012      	b.n	800a9ec <HAL_RCCEx_PeriphCLKConfig+0x324>
 800a9c6:	bf00      	nop
 800a9c8:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9cc:	4baf      	ldr	r3, [pc, #700]	; (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d0:	4aae      	ldr	r2, [pc, #696]	; (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a9d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a9d8:	e00e      	b.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	3304      	adds	r3, #4
 800a9de:	2102      	movs	r1, #2
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f001 fbd1 	bl	800c188 <RCCEx_PLL2_Config>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a9ea:	e005      	b.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	75fb      	strb	r3, [r7, #23]
      break;
 800a9f0:	e002      	b.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800a9f2:	bf00      	nop
 800a9f4:	e000      	b.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800a9f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a9f8:	7dfb      	ldrb	r3, [r7, #23]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d109      	bne.n	800aa12 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a9fe:	4ba3      	ldr	r3, [pc, #652]	; (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800aa00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa02:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa0a:	49a0      	ldr	r1, [pc, #640]	; (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800aa0c:	4313      	orrs	r3, r2
 800aa0e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800aa10:	e001      	b.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa12:	7dfb      	ldrb	r3, [r7, #23]
 800aa14:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d042      	beq.n	800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa2a:	d01f      	beq.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800aa2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa30:	d805      	bhi.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d00a      	beq.n	800aa4c <HAL_RCCEx_PeriphCLKConfig+0x384>
 800aa36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa3a:	d00e      	beq.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x392>
 800aa3c:	e01f      	b.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800aa3e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aa42:	d01f      	beq.n	800aa84 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800aa44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa48:	d01e      	beq.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800aa4a:	e018      	b.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa4c:	4b8f      	ldr	r3, [pc, #572]	; (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800aa4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa50:	4a8e      	ldr	r2, [pc, #568]	; (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800aa52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800aa58:	e017      	b.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	3304      	adds	r3, #4
 800aa5e:	2100      	movs	r1, #0
 800aa60:	4618      	mov	r0, r3
 800aa62:	f001 fb91 	bl	800c188 <RCCEx_PLL2_Config>
 800aa66:	4603      	mov	r3, r0
 800aa68:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800aa6a:	e00e      	b.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	3324      	adds	r3, #36	; 0x24
 800aa70:	2100      	movs	r1, #0
 800aa72:	4618      	mov	r0, r3
 800aa74:	f001 fc3a 	bl	800c2ec <RCCEx_PLL3_Config>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800aa7c:	e005      	b.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aa7e:	2301      	movs	r3, #1
 800aa80:	75fb      	strb	r3, [r7, #23]
      break;
 800aa82:	e002      	b.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800aa84:	bf00      	nop
 800aa86:	e000      	b.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800aa88:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa8a:	7dfb      	ldrb	r3, [r7, #23]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d109      	bne.n	800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800aa90:	4b7e      	ldr	r3, [pc, #504]	; (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800aa92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa94:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa9c:	497b      	ldr	r1, [pc, #492]	; (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800aa9e:	4313      	orrs	r3, r2
 800aaa0:	650b      	str	r3, [r1, #80]	; 0x50
 800aaa2:	e001      	b.n	800aaa8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaa4:	7dfb      	ldrb	r3, [r7, #23]
 800aaa6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d042      	beq.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aab8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aabc:	d01b      	beq.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800aabe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aac2:	d805      	bhi.n	800aad0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d022      	beq.n	800ab0e <HAL_RCCEx_PeriphCLKConfig+0x446>
 800aac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aacc:	d00a      	beq.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800aace:	e01b      	b.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800aad0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aad4:	d01d      	beq.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800aad6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aada:	d01c      	beq.n	800ab16 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800aadc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aae0:	d01b      	beq.n	800ab1a <HAL_RCCEx_PeriphCLKConfig+0x452>
 800aae2:	e011      	b.n	800ab08 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	3304      	adds	r3, #4
 800aae8:	2101      	movs	r1, #1
 800aaea:	4618      	mov	r0, r3
 800aaec:	f001 fb4c 	bl	800c188 <RCCEx_PLL2_Config>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800aaf4:	e012      	b.n	800ab1c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	3324      	adds	r3, #36	; 0x24
 800aafa:	2101      	movs	r1, #1
 800aafc:	4618      	mov	r0, r3
 800aafe:	f001 fbf5 	bl	800c2ec <RCCEx_PLL3_Config>
 800ab02:	4603      	mov	r3, r0
 800ab04:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800ab06:	e009      	b.n	800ab1c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ab08:	2301      	movs	r3, #1
 800ab0a:	75fb      	strb	r3, [r7, #23]
      break;
 800ab0c:	e006      	b.n	800ab1c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800ab0e:	bf00      	nop
 800ab10:	e004      	b.n	800ab1c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800ab12:	bf00      	nop
 800ab14:	e002      	b.n	800ab1c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800ab16:	bf00      	nop
 800ab18:	e000      	b.n	800ab1c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800ab1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab1c:	7dfb      	ldrb	r3, [r7, #23]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d109      	bne.n	800ab36 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ab22:	4b5a      	ldr	r3, [pc, #360]	; (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ab24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab26:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab2e:	4957      	ldr	r1, [pc, #348]	; (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ab30:	4313      	orrs	r3, r2
 800ab32:	650b      	str	r3, [r1, #80]	; 0x50
 800ab34:	e001      	b.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab36:	7dfb      	ldrb	r3, [r7, #23]
 800ab38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d044      	beq.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ab4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab50:	d01b      	beq.n	800ab8a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800ab52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab56:	d805      	bhi.n	800ab64 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d022      	beq.n	800aba2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800ab5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab60:	d00a      	beq.n	800ab78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800ab62:	e01b      	b.n	800ab9c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800ab64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab68:	d01d      	beq.n	800aba6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800ab6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ab6e:	d01c      	beq.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800ab70:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ab74:	d01b      	beq.n	800abae <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800ab76:	e011      	b.n	800ab9c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	3304      	adds	r3, #4
 800ab7c:	2101      	movs	r1, #1
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f001 fb02 	bl	800c188 <RCCEx_PLL2_Config>
 800ab84:	4603      	mov	r3, r0
 800ab86:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800ab88:	e012      	b.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	3324      	adds	r3, #36	; 0x24
 800ab8e:	2101      	movs	r1, #1
 800ab90:	4618      	mov	r0, r3
 800ab92:	f001 fbab 	bl	800c2ec <RCCEx_PLL3_Config>
 800ab96:	4603      	mov	r3, r0
 800ab98:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800ab9a:	e009      	b.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	75fb      	strb	r3, [r7, #23]
      break;
 800aba0:	e006      	b.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800aba2:	bf00      	nop
 800aba4:	e004      	b.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800aba6:	bf00      	nop
 800aba8:	e002      	b.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800abaa:	bf00      	nop
 800abac:	e000      	b.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800abae:	bf00      	nop
    }

    if(ret == HAL_OK)
 800abb0:	7dfb      	ldrb	r3, [r7, #23]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d10a      	bne.n	800abcc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800abb6:	4b35      	ldr	r3, [pc, #212]	; (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800abb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abba:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800abc4:	4931      	ldr	r1, [pc, #196]	; (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800abc6:	4313      	orrs	r3, r2
 800abc8:	658b      	str	r3, [r1, #88]	; 0x58
 800abca:	e001      	b.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abcc:	7dfb      	ldrb	r3, [r7, #23]
 800abce:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d02d      	beq.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abe0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800abe4:	d005      	beq.n	800abf2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800abe6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abea:	d009      	beq.n	800ac00 <HAL_RCCEx_PeriphCLKConfig+0x538>
 800abec:	2b00      	cmp	r3, #0
 800abee:	d013      	beq.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800abf0:	e00f      	b.n	800ac12 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abf2:	4b26      	ldr	r3, [pc, #152]	; (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800abf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abf6:	4a25      	ldr	r2, [pc, #148]	; (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800abf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abfc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800abfe:	e00c      	b.n	800ac1a <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	3304      	adds	r3, #4
 800ac04:	2101      	movs	r1, #1
 800ac06:	4618      	mov	r0, r3
 800ac08:	f001 fabe 	bl	800c188 <RCCEx_PLL2_Config>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800ac10:	e003      	b.n	800ac1a <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ac12:	2301      	movs	r3, #1
 800ac14:	75fb      	strb	r3, [r7, #23]
      break;
 800ac16:	e000      	b.n	800ac1a <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800ac18:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac1a:	7dfb      	ldrb	r3, [r7, #23]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d109      	bne.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ac20:	4b1a      	ldr	r3, [pc, #104]	; (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ac22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac24:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac2c:	4917      	ldr	r1, [pc, #92]	; (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	650b      	str	r3, [r1, #80]	; 0x50
 800ac32:	e001      	b.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac34:	7dfb      	ldrb	r3, [r7, #23]
 800ac36:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d035      	beq.n	800acb0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac48:	2b03      	cmp	r3, #3
 800ac4a:	d81b      	bhi.n	800ac84 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800ac4c:	a201      	add	r2, pc, #4	; (adr r2, 800ac54 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800ac4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac52:	bf00      	nop
 800ac54:	0800ac91 	.word	0x0800ac91
 800ac58:	0800ac65 	.word	0x0800ac65
 800ac5c:	0800ac73 	.word	0x0800ac73
 800ac60:	0800ac91 	.word	0x0800ac91
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac64:	4b09      	ldr	r3, [pc, #36]	; (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ac66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac68:	4a08      	ldr	r2, [pc, #32]	; (800ac8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ac6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800ac70:	e00f      	b.n	800ac92 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	3304      	adds	r3, #4
 800ac76:	2102      	movs	r1, #2
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f001 fa85 	bl	800c188 <RCCEx_PLL2_Config>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800ac82:	e006      	b.n	800ac92 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800ac84:	2301      	movs	r3, #1
 800ac86:	75fb      	strb	r3, [r7, #23]
      break;
 800ac88:	e003      	b.n	800ac92 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800ac8a:	bf00      	nop
 800ac8c:	58024400 	.word	0x58024400
      break;
 800ac90:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac92:	7dfb      	ldrb	r3, [r7, #23]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d109      	bne.n	800acac <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ac98:	4bba      	ldr	r3, [pc, #744]	; (800af84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ac9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac9c:	f023 0203 	bic.w	r2, r3, #3
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aca4:	49b7      	ldr	r1, [pc, #732]	; (800af84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800aca6:	4313      	orrs	r3, r2
 800aca8:	64cb      	str	r3, [r1, #76]	; 0x4c
 800acaa:	e001      	b.n	800acb0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acac:	7dfb      	ldrb	r3, [r7, #23]
 800acae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800acb8:	2b00      	cmp	r3, #0
 800acba:	f000 8086 	beq.w	800adca <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800acbe:	4bb2      	ldr	r3, [pc, #712]	; (800af88 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4ab1      	ldr	r2, [pc, #708]	; (800af88 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800acc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acc8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800acca:	f7f9 fc75 	bl	80045b8 <HAL_GetTick>
 800acce:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800acd0:	e009      	b.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800acd2:	f7f9 fc71 	bl	80045b8 <HAL_GetTick>
 800acd6:	4602      	mov	r2, r0
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	1ad3      	subs	r3, r2, r3
 800acdc:	2b64      	cmp	r3, #100	; 0x64
 800acde:	d902      	bls.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 800ace0:	2303      	movs	r3, #3
 800ace2:	75fb      	strb	r3, [r7, #23]
        break;
 800ace4:	e005      	b.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ace6:	4ba8      	ldr	r3, [pc, #672]	; (800af88 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d0ef      	beq.n	800acd2 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800acf2:	7dfb      	ldrb	r3, [r7, #23]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d166      	bne.n	800adc6 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800acf8:	4ba2      	ldr	r3, [pc, #648]	; (800af84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800acfa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ad02:	4053      	eors	r3, r2
 800ad04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d013      	beq.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ad0c:	4b9d      	ldr	r3, [pc, #628]	; (800af84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad14:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ad16:	4b9b      	ldr	r3, [pc, #620]	; (800af84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad1a:	4a9a      	ldr	r2, [pc, #616]	; (800af84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad20:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ad22:	4b98      	ldr	r3, [pc, #608]	; (800af84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad26:	4a97      	ldr	r2, [pc, #604]	; (800af84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad2c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ad2e:	4a95      	ldr	r2, [pc, #596]	; (800af84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ad3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad3e:	d115      	bne.n	800ad6c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad40:	f7f9 fc3a 	bl	80045b8 <HAL_GetTick>
 800ad44:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ad46:	e00b      	b.n	800ad60 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad48:	f7f9 fc36 	bl	80045b8 <HAL_GetTick>
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	1ad3      	subs	r3, r2, r3
 800ad52:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad56:	4293      	cmp	r3, r2
 800ad58:	d902      	bls.n	800ad60 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800ad5a:	2303      	movs	r3, #3
 800ad5c:	75fb      	strb	r3, [r7, #23]
            break;
 800ad5e:	e005      	b.n	800ad6c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ad60:	4b88      	ldr	r3, [pc, #544]	; (800af84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad64:	f003 0302 	and.w	r3, r3, #2
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d0ed      	beq.n	800ad48 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 800ad6c:	7dfb      	ldrb	r3, [r7, #23]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d126      	bne.n	800adc0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ad78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad80:	d10d      	bne.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800ad82:	4b80      	ldr	r3, [pc, #512]	; (800af84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad84:	691b      	ldr	r3, [r3, #16]
 800ad86:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ad90:	0919      	lsrs	r1, r3, #4
 800ad92:	4b7e      	ldr	r3, [pc, #504]	; (800af8c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800ad94:	400b      	ands	r3, r1
 800ad96:	497b      	ldr	r1, [pc, #492]	; (800af84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad98:	4313      	orrs	r3, r2
 800ad9a:	610b      	str	r3, [r1, #16]
 800ad9c:	e005      	b.n	800adaa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800ad9e:	4b79      	ldr	r3, [pc, #484]	; (800af84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ada0:	691b      	ldr	r3, [r3, #16]
 800ada2:	4a78      	ldr	r2, [pc, #480]	; (800af84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ada4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ada8:	6113      	str	r3, [r2, #16]
 800adaa:	4b76      	ldr	r3, [pc, #472]	; (800af84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800adac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800adb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800adb8:	4972      	ldr	r1, [pc, #456]	; (800af84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800adba:	4313      	orrs	r3, r2
 800adbc:	670b      	str	r3, [r1, #112]	; 0x70
 800adbe:	e004      	b.n	800adca <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800adc0:	7dfb      	ldrb	r3, [r7, #23]
 800adc2:	75bb      	strb	r3, [r7, #22]
 800adc4:	e001      	b.n	800adca <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adc6:	7dfb      	ldrb	r3, [r7, #23]
 800adc8:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f003 0301 	and.w	r3, r3, #1
 800add2:	2b00      	cmp	r3, #0
 800add4:	d07d      	beq.n	800aed2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800adda:	2b28      	cmp	r3, #40	; 0x28
 800addc:	d866      	bhi.n	800aeac <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800adde:	a201      	add	r2, pc, #4	; (adr r2, 800ade4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800ade0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ade4:	0800aeb3 	.word	0x0800aeb3
 800ade8:	0800aead 	.word	0x0800aead
 800adec:	0800aead 	.word	0x0800aead
 800adf0:	0800aead 	.word	0x0800aead
 800adf4:	0800aead 	.word	0x0800aead
 800adf8:	0800aead 	.word	0x0800aead
 800adfc:	0800aead 	.word	0x0800aead
 800ae00:	0800aead 	.word	0x0800aead
 800ae04:	0800ae89 	.word	0x0800ae89
 800ae08:	0800aead 	.word	0x0800aead
 800ae0c:	0800aead 	.word	0x0800aead
 800ae10:	0800aead 	.word	0x0800aead
 800ae14:	0800aead 	.word	0x0800aead
 800ae18:	0800aead 	.word	0x0800aead
 800ae1c:	0800aead 	.word	0x0800aead
 800ae20:	0800aead 	.word	0x0800aead
 800ae24:	0800ae9b 	.word	0x0800ae9b
 800ae28:	0800aead 	.word	0x0800aead
 800ae2c:	0800aead 	.word	0x0800aead
 800ae30:	0800aead 	.word	0x0800aead
 800ae34:	0800aead 	.word	0x0800aead
 800ae38:	0800aead 	.word	0x0800aead
 800ae3c:	0800aead 	.word	0x0800aead
 800ae40:	0800aead 	.word	0x0800aead
 800ae44:	0800aeb3 	.word	0x0800aeb3
 800ae48:	0800aead 	.word	0x0800aead
 800ae4c:	0800aead 	.word	0x0800aead
 800ae50:	0800aead 	.word	0x0800aead
 800ae54:	0800aead 	.word	0x0800aead
 800ae58:	0800aead 	.word	0x0800aead
 800ae5c:	0800aead 	.word	0x0800aead
 800ae60:	0800aead 	.word	0x0800aead
 800ae64:	0800aeb3 	.word	0x0800aeb3
 800ae68:	0800aead 	.word	0x0800aead
 800ae6c:	0800aead 	.word	0x0800aead
 800ae70:	0800aead 	.word	0x0800aead
 800ae74:	0800aead 	.word	0x0800aead
 800ae78:	0800aead 	.word	0x0800aead
 800ae7c:	0800aead 	.word	0x0800aead
 800ae80:	0800aead 	.word	0x0800aead
 800ae84:	0800aeb3 	.word	0x0800aeb3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	3304      	adds	r3, #4
 800ae8c:	2101      	movs	r1, #1
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f001 f97a 	bl	800c188 <RCCEx_PLL2_Config>
 800ae94:	4603      	mov	r3, r0
 800ae96:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800ae98:	e00c      	b.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	3324      	adds	r3, #36	; 0x24
 800ae9e:	2101      	movs	r1, #1
 800aea0:	4618      	mov	r0, r3
 800aea2:	f001 fa23 	bl	800c2ec <RCCEx_PLL3_Config>
 800aea6:	4603      	mov	r3, r0
 800aea8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800aeaa:	e003      	b.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aeac:	2301      	movs	r3, #1
 800aeae:	75fb      	strb	r3, [r7, #23]
      break;
 800aeb0:	e000      	b.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800aeb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aeb4:	7dfb      	ldrb	r3, [r7, #23]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d109      	bne.n	800aece <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800aeba:	4b32      	ldr	r3, [pc, #200]	; (800af84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800aebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aebe:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aec6:	492f      	ldr	r1, [pc, #188]	; (800af84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800aec8:	4313      	orrs	r3, r2
 800aeca:	654b      	str	r3, [r1, #84]	; 0x54
 800aecc:	e001      	b.n	800aed2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aece:	7dfb      	ldrb	r3, [r7, #23]
 800aed0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f003 0302 	and.w	r3, r3, #2
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d037      	beq.n	800af4e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aee2:	2b05      	cmp	r3, #5
 800aee4:	d820      	bhi.n	800af28 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800aee6:	a201      	add	r2, pc, #4	; (adr r2, 800aeec <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800aee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeec:	0800af2f 	.word	0x0800af2f
 800aef0:	0800af05 	.word	0x0800af05
 800aef4:	0800af17 	.word	0x0800af17
 800aef8:	0800af2f 	.word	0x0800af2f
 800aefc:	0800af2f 	.word	0x0800af2f
 800af00:	0800af2f 	.word	0x0800af2f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	3304      	adds	r3, #4
 800af08:	2101      	movs	r1, #1
 800af0a:	4618      	mov	r0, r3
 800af0c:	f001 f93c 	bl	800c188 <RCCEx_PLL2_Config>
 800af10:	4603      	mov	r3, r0
 800af12:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800af14:	e00c      	b.n	800af30 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	3324      	adds	r3, #36	; 0x24
 800af1a:	2101      	movs	r1, #1
 800af1c:	4618      	mov	r0, r3
 800af1e:	f001 f9e5 	bl	800c2ec <RCCEx_PLL3_Config>
 800af22:	4603      	mov	r3, r0
 800af24:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800af26:	e003      	b.n	800af30 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800af28:	2301      	movs	r3, #1
 800af2a:	75fb      	strb	r3, [r7, #23]
      break;
 800af2c:	e000      	b.n	800af30 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800af2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af30:	7dfb      	ldrb	r3, [r7, #23]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d109      	bne.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800af36:	4b13      	ldr	r3, [pc, #76]	; (800af84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800af38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af3a:	f023 0207 	bic.w	r2, r3, #7
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af42:	4910      	ldr	r1, [pc, #64]	; (800af84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800af44:	4313      	orrs	r3, r2
 800af46:	654b      	str	r3, [r1, #84]	; 0x54
 800af48:	e001      	b.n	800af4e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af4a:	7dfb      	ldrb	r3, [r7, #23]
 800af4c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f003 0304 	and.w	r3, r3, #4
 800af56:	2b00      	cmp	r3, #0
 800af58:	d040      	beq.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af60:	2b05      	cmp	r3, #5
 800af62:	d827      	bhi.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800af64:	a201      	add	r2, pc, #4	; (adr r2, 800af6c <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800af66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af6a:	bf00      	nop
 800af6c:	0800afbb 	.word	0x0800afbb
 800af70:	0800af91 	.word	0x0800af91
 800af74:	0800afa3 	.word	0x0800afa3
 800af78:	0800afbb 	.word	0x0800afbb
 800af7c:	0800afbb 	.word	0x0800afbb
 800af80:	0800afbb 	.word	0x0800afbb
 800af84:	58024400 	.word	0x58024400
 800af88:	58024800 	.word	0x58024800
 800af8c:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	3304      	adds	r3, #4
 800af94:	2101      	movs	r1, #1
 800af96:	4618      	mov	r0, r3
 800af98:	f001 f8f6 	bl	800c188 <RCCEx_PLL2_Config>
 800af9c:	4603      	mov	r3, r0
 800af9e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800afa0:	e00c      	b.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	3324      	adds	r3, #36	; 0x24
 800afa6:	2101      	movs	r1, #1
 800afa8:	4618      	mov	r0, r3
 800afaa:	f001 f99f 	bl	800c2ec <RCCEx_PLL3_Config>
 800afae:	4603      	mov	r3, r0
 800afb0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800afb2:	e003      	b.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800afb4:	2301      	movs	r3, #1
 800afb6:	75fb      	strb	r3, [r7, #23]
      break;
 800afb8:	e000      	b.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800afba:	bf00      	nop
    }

    if(ret == HAL_OK)
 800afbc:	7dfb      	ldrb	r3, [r7, #23]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d10a      	bne.n	800afd8 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800afc2:	4bb2      	ldr	r3, [pc, #712]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800afc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afc6:	f023 0207 	bic.w	r2, r3, #7
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afd0:	49ae      	ldr	r1, [pc, #696]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800afd2:	4313      	orrs	r3, r2
 800afd4:	658b      	str	r3, [r1, #88]	; 0x58
 800afd6:	e001      	b.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afd8:	7dfb      	ldrb	r3, [r7, #23]
 800afda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f003 0320 	and.w	r3, r3, #32
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d044      	beq.n	800b072 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800afee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aff2:	d01b      	beq.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0x964>
 800aff4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aff8:	d805      	bhi.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800affa:	2b00      	cmp	r3, #0
 800affc:	d022      	beq.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800affe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b002:	d00a      	beq.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x952>
 800b004:	e01b      	b.n	800b03e <HAL_RCCEx_PeriphCLKConfig+0x976>
 800b006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b00a:	d01d      	beq.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800b00c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b010:	d01c      	beq.n	800b04c <HAL_RCCEx_PeriphCLKConfig+0x984>
 800b012:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b016:	d01b      	beq.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800b018:	e011      	b.n	800b03e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	3304      	adds	r3, #4
 800b01e:	2100      	movs	r1, #0
 800b020:	4618      	mov	r0, r3
 800b022:	f001 f8b1 	bl	800c188 <RCCEx_PLL2_Config>
 800b026:	4603      	mov	r3, r0
 800b028:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b02a:	e012      	b.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	3324      	adds	r3, #36	; 0x24
 800b030:	2102      	movs	r1, #2
 800b032:	4618      	mov	r0, r3
 800b034:	f001 f95a 	bl	800c2ec <RCCEx_PLL3_Config>
 800b038:	4603      	mov	r3, r0
 800b03a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b03c:	e009      	b.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b03e:	2301      	movs	r3, #1
 800b040:	75fb      	strb	r3, [r7, #23]
      break;
 800b042:	e006      	b.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800b044:	bf00      	nop
 800b046:	e004      	b.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800b048:	bf00      	nop
 800b04a:	e002      	b.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800b04c:	bf00      	nop
 800b04e:	e000      	b.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800b050:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b052:	7dfb      	ldrb	r3, [r7, #23]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d10a      	bne.n	800b06e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b058:	4b8c      	ldr	r3, [pc, #560]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b05a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b05c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b066:	4989      	ldr	r1, [pc, #548]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b068:	4313      	orrs	r3, r2
 800b06a:	654b      	str	r3, [r1, #84]	; 0x54
 800b06c:	e001      	b.n	800b072 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b06e:	7dfb      	ldrb	r3, [r7, #23]
 800b070:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d044      	beq.n	800b108 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b084:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b088:	d01b      	beq.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800b08a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b08e:	d805      	bhi.n	800b09c <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800b090:	2b00      	cmp	r3, #0
 800b092:	d022      	beq.n	800b0da <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800b094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b098:	d00a      	beq.n	800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800b09a:	e01b      	b.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 800b09c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0a0:	d01d      	beq.n	800b0de <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800b0a2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b0a6:	d01c      	beq.n	800b0e2 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800b0a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b0ac:	d01b      	beq.n	800b0e6 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800b0ae:	e011      	b.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	3304      	adds	r3, #4
 800b0b4:	2100      	movs	r1, #0
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f001 f866 	bl	800c188 <RCCEx_PLL2_Config>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b0c0:	e012      	b.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	3324      	adds	r3, #36	; 0x24
 800b0c6:	2102      	movs	r1, #2
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f001 f90f 	bl	800c2ec <RCCEx_PLL3_Config>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b0d2:	e009      	b.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	75fb      	strb	r3, [r7, #23]
      break;
 800b0d8:	e006      	b.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800b0da:	bf00      	nop
 800b0dc:	e004      	b.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800b0de:	bf00      	nop
 800b0e0:	e002      	b.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800b0e2:	bf00      	nop
 800b0e4:	e000      	b.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800b0e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b0e8:	7dfb      	ldrb	r3, [r7, #23]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d10a      	bne.n	800b104 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b0ee:	4b67      	ldr	r3, [pc, #412]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b0f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0f2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b0fc:	4963      	ldr	r1, [pc, #396]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b0fe:	4313      	orrs	r3, r2
 800b100:	658b      	str	r3, [r1, #88]	; 0x58
 800b102:	e001      	b.n	800b108 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b104:	7dfb      	ldrb	r3, [r7, #23]
 800b106:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b110:	2b00      	cmp	r3, #0
 800b112:	d044      	beq.n	800b19e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b11a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b11e:	d01b      	beq.n	800b158 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800b120:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b124:	d805      	bhi.n	800b132 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800b126:	2b00      	cmp	r3, #0
 800b128:	d022      	beq.n	800b170 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800b12a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b12e:	d00a      	beq.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800b130:	e01b      	b.n	800b16a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800b132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b136:	d01d      	beq.n	800b174 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800b138:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b13c:	d01c      	beq.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800b13e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b142:	d01b      	beq.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800b144:	e011      	b.n	800b16a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	3304      	adds	r3, #4
 800b14a:	2100      	movs	r1, #0
 800b14c:	4618      	mov	r0, r3
 800b14e:	f001 f81b 	bl	800c188 <RCCEx_PLL2_Config>
 800b152:	4603      	mov	r3, r0
 800b154:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b156:	e012      	b.n	800b17e <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	3324      	adds	r3, #36	; 0x24
 800b15c:	2102      	movs	r1, #2
 800b15e:	4618      	mov	r0, r3
 800b160:	f001 f8c4 	bl	800c2ec <RCCEx_PLL3_Config>
 800b164:	4603      	mov	r3, r0
 800b166:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b168:	e009      	b.n	800b17e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b16a:	2301      	movs	r3, #1
 800b16c:	75fb      	strb	r3, [r7, #23]
      break;
 800b16e:	e006      	b.n	800b17e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800b170:	bf00      	nop
 800b172:	e004      	b.n	800b17e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800b174:	bf00      	nop
 800b176:	e002      	b.n	800b17e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800b178:	bf00      	nop
 800b17a:	e000      	b.n	800b17e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800b17c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b17e:	7dfb      	ldrb	r3, [r7, #23]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d10a      	bne.n	800b19a <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b184:	4b41      	ldr	r3, [pc, #260]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b188:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b192:	493e      	ldr	r1, [pc, #248]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b194:	4313      	orrs	r3, r2
 800b196:	658b      	str	r3, [r1, #88]	; 0x58
 800b198:	e001      	b.n	800b19e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b19a:	7dfb      	ldrb	r3, [r7, #23]
 800b19c:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f003 0308 	and.w	r3, r3, #8
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d01a      	beq.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1b4:	d10a      	bne.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	3324      	adds	r3, #36	; 0x24
 800b1ba:	2102      	movs	r1, #2
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f001 f895 	bl	800c2ec <RCCEx_PLL3_Config>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d001      	beq.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b1cc:	4b2f      	ldr	r3, [pc, #188]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b1ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1da:	492c      	ldr	r1, [pc, #176]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b1dc:	4313      	orrs	r3, r2
 800b1de:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f003 0310 	and.w	r3, r3, #16
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d01a      	beq.n	800b222 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b1f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1f6:	d10a      	bne.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	3324      	adds	r3, #36	; 0x24
 800b1fc:	2102      	movs	r1, #2
 800b1fe:	4618      	mov	r0, r3
 800b200:	f001 f874 	bl	800c2ec <RCCEx_PLL3_Config>
 800b204:	4603      	mov	r3, r0
 800b206:	2b00      	cmp	r3, #0
 800b208:	d001      	beq.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800b20a:	2301      	movs	r3, #1
 800b20c:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b20e:	4b1f      	ldr	r3, [pc, #124]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b212:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b21c:	491b      	ldr	r1, [pc, #108]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b21e:	4313      	orrs	r3, r2
 800b220:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d032      	beq.n	800b294 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b238:	d00d      	beq.n	800b256 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800b23a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b23e:	d016      	beq.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0xba6>
 800b240:	2b00      	cmp	r3, #0
 800b242:	d111      	bne.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	3304      	adds	r3, #4
 800b248:	2100      	movs	r1, #0
 800b24a:	4618      	mov	r0, r3
 800b24c:	f000 ff9c 	bl	800c188 <RCCEx_PLL2_Config>
 800b250:	4603      	mov	r3, r0
 800b252:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b254:	e00c      	b.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	3324      	adds	r3, #36	; 0x24
 800b25a:	2102      	movs	r1, #2
 800b25c:	4618      	mov	r0, r3
 800b25e:	f001 f845 	bl	800c2ec <RCCEx_PLL3_Config>
 800b262:	4603      	mov	r3, r0
 800b264:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b266:	e003      	b.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b268:	2301      	movs	r3, #1
 800b26a:	75fb      	strb	r3, [r7, #23]
      break;
 800b26c:	e000      	b.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800b26e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b270:	7dfb      	ldrb	r3, [r7, #23]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d10c      	bne.n	800b290 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b276:	4b05      	ldr	r3, [pc, #20]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b27a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b284:	4901      	ldr	r1, [pc, #4]	; (800b28c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b286:	4313      	orrs	r3, r2
 800b288:	658b      	str	r3, [r1, #88]	; 0x58
 800b28a:	e003      	b.n	800b294 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 800b28c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b290:	7dfb      	ldrb	r3, [r7, #23]
 800b292:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d02f      	beq.n	800b300 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b2aa:	d00c      	beq.n	800b2c6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800b2ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b2b0:	d015      	beq.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800b2b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b2b6:	d10f      	bne.n	800b2d8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2b8:	4b79      	ldr	r3, [pc, #484]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2bc:	4a78      	ldr	r2, [pc, #480]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b2be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800b2c4:	e00c      	b.n	800b2e0 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	3324      	adds	r3, #36	; 0x24
 800b2ca:	2101      	movs	r1, #1
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f001 f80d 	bl	800c2ec <RCCEx_PLL3_Config>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800b2d6:	e003      	b.n	800b2e0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b2d8:	2301      	movs	r3, #1
 800b2da:	75fb      	strb	r3, [r7, #23]
      break;
 800b2dc:	e000      	b.n	800b2e0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800b2de:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b2e0:	7dfb      	ldrb	r3, [r7, #23]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d10a      	bne.n	800b2fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b2e6:	4b6e      	ldr	r3, [pc, #440]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b2e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2f4:	496a      	ldr	r1, [pc, #424]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	654b      	str	r3, [r1, #84]	; 0x54
 800b2fa:	e001      	b.n	800b300 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2fc:	7dfb      	ldrb	r3, [r7, #23]
 800b2fe:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d029      	beq.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b310:	2b00      	cmp	r3, #0
 800b312:	d003      	beq.n	800b31c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800b314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b318:	d007      	beq.n	800b32a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800b31a:	e00f      	b.n	800b33c <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b31c:	4b60      	ldr	r3, [pc, #384]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b31e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b320:	4a5f      	ldr	r2, [pc, #380]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b326:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b328:	e00b      	b.n	800b342 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	3304      	adds	r3, #4
 800b32e:	2102      	movs	r1, #2
 800b330:	4618      	mov	r0, r3
 800b332:	f000 ff29 	bl	800c188 <RCCEx_PLL2_Config>
 800b336:	4603      	mov	r3, r0
 800b338:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b33a:	e002      	b.n	800b342 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 800b33c:	2301      	movs	r3, #1
 800b33e:	75fb      	strb	r3, [r7, #23]
      break;
 800b340:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b342:	7dfb      	ldrb	r3, [r7, #23]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d109      	bne.n	800b35c <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b348:	4b55      	ldr	r3, [pc, #340]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b34a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b34c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b354:	4952      	ldr	r1, [pc, #328]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b356:	4313      	orrs	r3, r2
 800b358:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b35a:	e001      	b.n	800b360 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b35c:	7dfb      	ldrb	r3, [r7, #23]
 800b35e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d00a      	beq.n	800b382 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	3324      	adds	r3, #36	; 0x24
 800b370:	2102      	movs	r1, #2
 800b372:	4618      	mov	r0, r3
 800b374:	f000 ffba 	bl	800c2ec <RCCEx_PLL3_Config>
 800b378:	4603      	mov	r3, r0
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d001      	beq.n	800b382 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800b37e:	2301      	movs	r3, #1
 800b380:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d02f      	beq.n	800b3ee <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b396:	d00c      	beq.n	800b3b2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b39c:	d802      	bhi.n	800b3a4 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d011      	beq.n	800b3c6 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800b3a2:	e00d      	b.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800b3a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3a8:	d00f      	beq.n	800b3ca <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800b3aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b3ae:	d00e      	beq.n	800b3ce <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800b3b0:	e006      	b.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3b2:	4b3b      	ldr	r3, [pc, #236]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3b6:	4a3a      	ldr	r2, [pc, #232]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b3b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800b3be:	e007      	b.n	800b3d0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	75fb      	strb	r3, [r7, #23]
      break;
 800b3c4:	e004      	b.n	800b3d0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800b3c6:	bf00      	nop
 800b3c8:	e002      	b.n	800b3d0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800b3ca:	bf00      	nop
 800b3cc:	e000      	b.n	800b3d0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800b3ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b3d0:	7dfb      	ldrb	r3, [r7, #23]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d109      	bne.n	800b3ea <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b3d6:	4b32      	ldr	r3, [pc, #200]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b3d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3e2:	492f      	ldr	r1, [pc, #188]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	654b      	str	r3, [r1, #84]	; 0x54
 800b3e8:	e001      	b.n	800b3ee <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3ea:	7dfb      	ldrb	r3, [r7, #23]
 800b3ec:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d008      	beq.n	800b40c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b3fa:	4b29      	ldr	r3, [pc, #164]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b3fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b406:	4926      	ldr	r1, [pc, #152]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b408:	4313      	orrs	r3, r2
 800b40a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b414:	2b00      	cmp	r3, #0
 800b416:	d009      	beq.n	800b42c <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b418:	4b21      	ldr	r3, [pc, #132]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b41a:	691b      	ldr	r3, [r3, #16]
 800b41c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b426:	491e      	ldr	r1, [pc, #120]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b428:	4313      	orrs	r3, r2
 800b42a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b434:	2b00      	cmp	r3, #0
 800b436:	d008      	beq.n	800b44a <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b438:	4b19      	ldr	r3, [pc, #100]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b43a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b43c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b444:	4916      	ldr	r1, [pc, #88]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b446:	4313      	orrs	r3, r2
 800b448:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b452:	2b00      	cmp	r3, #0
 800b454:	d00d      	beq.n	800b472 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b456:	4b12      	ldr	r3, [pc, #72]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b458:	691b      	ldr	r3, [r3, #16]
 800b45a:	4a11      	ldr	r2, [pc, #68]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b45c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b460:	6113      	str	r3, [r2, #16]
 800b462:	4b0f      	ldr	r3, [pc, #60]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b464:	691a      	ldr	r2, [r3, #16]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b46c:	490c      	ldr	r1, [pc, #48]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b46e:	4313      	orrs	r3, r2
 800b470:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	da08      	bge.n	800b48c <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b47a:	4b09      	ldr	r3, [pc, #36]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b47c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b47e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b486:	4906      	ldr	r1, [pc, #24]	; (800b4a0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b488:	4313      	orrs	r3, r2
 800b48a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800b48c:	7dbb      	ldrb	r3, [r7, #22]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d101      	bne.n	800b496 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 800b492:	2300      	movs	r3, #0
 800b494:	e000      	b.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800b496:	2301      	movs	r3, #1
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3718      	adds	r7, #24
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}
 800b4a0:	58024400 	.word	0x58024400

0800b4a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b090      	sub	sp, #64	; 0x40
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4b2:	d150      	bne.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800b4b4:	4ba1      	ldr	r3, [pc, #644]	; (800b73c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b4b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4b8:	f003 0307 	and.w	r3, r3, #7
 800b4bc:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c0:	2b04      	cmp	r3, #4
 800b4c2:	d844      	bhi.n	800b54e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800b4c4:	a201      	add	r2, pc, #4	; (adr r2, 800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800b4c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ca:	bf00      	nop
 800b4cc:	0800b4e1 	.word	0x0800b4e1
 800b4d0:	0800b4f1 	.word	0x0800b4f1
 800b4d4:	0800b501 	.word	0x0800b501
 800b4d8:	0800b549 	.word	0x0800b549
 800b4dc:	0800b511 	.word	0x0800b511
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b4e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f000 fd03 	bl	800bef0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4ee:	e241      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4f0:	f107 0318 	add.w	r3, r7, #24
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f000 fa63 	bl	800b9c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b4fa:	69bb      	ldr	r3, [r7, #24]
 800b4fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4fe:	e239      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b500:	f107 030c 	add.w	r3, r7, #12
 800b504:	4618      	mov	r0, r3
 800b506:	f000 fba7 	bl	800bc58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b50e:	e231      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b510:	4b8a      	ldr	r3, [pc, #552]	; (800b73c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b514:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b518:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b51a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d102      	bne.n	800b526 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b520:	4b87      	ldr	r3, [pc, #540]	; (800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b522:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b524:	e226      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b528:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b52c:	d102      	bne.n	800b534 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800b52e:	4b85      	ldr	r3, [pc, #532]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b530:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b532:	e21f      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b536:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b53a:	d102      	bne.n	800b542 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 800b53c:	4b82      	ldr	r3, [pc, #520]	; (800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b53e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b540:	e218      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b542:	2300      	movs	r3, #0
 800b544:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b546:	e215      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b548:	4b80      	ldr	r3, [pc, #512]	; (800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b54a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b54c:	e212      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800b54e:	2300      	movs	r3, #0
 800b550:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b552:	bf00      	nop
 800b554:	e20e      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b55c:	d14f      	bne.n	800b5fe <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800b55e:	4b77      	ldr	r3, [pc, #476]	; (800b73c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b562:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800b566:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b56a:	2b80      	cmp	r3, #128	; 0x80
 800b56c:	d01c      	beq.n	800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800b56e:	2b80      	cmp	r3, #128	; 0x80
 800b570:	d804      	bhi.n	800b57c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800b572:	2b00      	cmp	r3, #0
 800b574:	d008      	beq.n	800b588 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800b576:	2b40      	cmp	r3, #64	; 0x40
 800b578:	d00e      	beq.n	800b598 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800b57a:	e03c      	b.n	800b5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800b57c:	2bc0      	cmp	r3, #192	; 0xc0
 800b57e:	d037      	beq.n	800b5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800b580:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b584:	d018      	beq.n	800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800b586:	e036      	b.n	800b5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b58c:	4618      	mov	r0, r3
 800b58e:	f000 fcaf 	bl	800bef0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b594:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b596:	e1ed      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b598:	f107 0318 	add.w	r3, r7, #24
 800b59c:	4618      	mov	r0, r3
 800b59e:	f000 fa0f 	bl	800b9c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b5a2:	69bb      	ldr	r3, [r7, #24]
 800b5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5a6:	e1e5      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5a8:	f107 030c 	add.w	r3, r7, #12
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f000 fb53 	bl	800bc58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5b6:	e1dd      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b5b8:	4b60      	ldr	r3, [pc, #384]	; (800b73c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b5ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b5c0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b5c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d102      	bne.n	800b5ce <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b5c8:	4b5d      	ldr	r3, [pc, #372]	; (800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b5ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b5cc:	e1d2      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b5ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5d4:	d102      	bne.n	800b5dc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800b5d6:	4b5b      	ldr	r3, [pc, #364]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b5d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5da:	e1cb      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b5dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5e2:	d102      	bne.n	800b5ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800b5e4:	4b58      	ldr	r3, [pc, #352]	; (800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b5e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5e8:	e1c4      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5ee:	e1c1      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b5f0:	4b56      	ldr	r3, [pc, #344]	; (800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5f4:	e1be      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5fa:	bf00      	nop
 800b5fc:	e1ba      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b604:	d153      	bne.n	800b6ae <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800b606:	4b4d      	ldr	r3, [pc, #308]	; (800b73c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b60a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b60e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b612:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b616:	d01f      	beq.n	800b658 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800b618:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b61c:	d805      	bhi.n	800b62a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d00a      	beq.n	800b638 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800b622:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b626:	d00f      	beq.n	800b648 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800b628:	e03d      	b.n	800b6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800b62a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b62e:	d037      	beq.n	800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800b630:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b634:	d018      	beq.n	800b668 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800b636:	e036      	b.n	800b6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b638:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b63c:	4618      	mov	r0, r3
 800b63e:	f000 fc57 	bl	800bef0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b644:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b646:	e195      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b648:	f107 0318 	add.w	r3, r7, #24
 800b64c:	4618      	mov	r0, r3
 800b64e:	f000 f9b7 	bl	800b9c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b652:	69bb      	ldr	r3, [r7, #24]
 800b654:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b656:	e18d      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b658:	f107 030c 	add.w	r3, r7, #12
 800b65c:	4618      	mov	r0, r3
 800b65e:	f000 fafb 	bl	800bc58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b666:	e185      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b668:	4b34      	ldr	r3, [pc, #208]	; (800b73c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b66a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b66c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b670:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b674:	2b00      	cmp	r3, #0
 800b676:	d102      	bne.n	800b67e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b678:	4b31      	ldr	r3, [pc, #196]	; (800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b67a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b67c:	e17a      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b67e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b680:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b684:	d102      	bne.n	800b68c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800b686:	4b2f      	ldr	r3, [pc, #188]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b688:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b68a:	e173      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b68c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b68e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b692:	d102      	bne.n	800b69a <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 800b694:	4b2c      	ldr	r3, [pc, #176]	; (800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b696:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b698:	e16c      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b69a:	2300      	movs	r3, #0
 800b69c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b69e:	e169      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b6a0:	4b2a      	ldr	r3, [pc, #168]	; (800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b6a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6a4:	e166      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6aa:	bf00      	nop
 800b6ac:	e162      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b6b4:	d15d      	bne.n	800b772 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800b6b6:	4b21      	ldr	r3, [pc, #132]	; (800b73c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b6b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6ba:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b6be:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b6c6:	d01f      	beq.n	800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800b6c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b6cc:	d805      	bhi.n	800b6da <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d00a      	beq.n	800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800b6d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b6d6:	d00f      	beq.n	800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800b6d8:	e047      	b.n	800b76a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800b6da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b6de:	d041      	beq.n	800b764 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800b6e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b6e4:	d018      	beq.n	800b718 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800b6e6:	e040      	b.n	800b76a <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b6e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f000 fbff 	bl	800bef0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6f6:	e13d      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6f8:	f107 0318 	add.w	r3, r7, #24
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f000 f95f 	bl	800b9c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b702:	69bb      	ldr	r3, [r7, #24]
 800b704:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b706:	e135      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b708:	f107 030c 	add.w	r3, r7, #12
 800b70c:	4618      	mov	r0, r3
 800b70e:	f000 faa3 	bl	800bc58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b716:	e12d      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b718:	4b08      	ldr	r3, [pc, #32]	; (800b73c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b71a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b71c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b720:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b724:	2b00      	cmp	r3, #0
 800b726:	d102      	bne.n	800b72e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b728:	4b05      	ldr	r3, [pc, #20]	; (800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b72a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b72c:	e122      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b72e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b730:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b734:	d10c      	bne.n	800b750 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800b736:	4b03      	ldr	r3, [pc, #12]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b738:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b73a:	e11b      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800b73c:	58024400 	.word	0x58024400
 800b740:	03d09000 	.word	0x03d09000
 800b744:	003d0900 	.word	0x003d0900
 800b748:	017d7840 	.word	0x017d7840
 800b74c:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b752:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b756:	d102      	bne.n	800b75e <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 800b758:	4b89      	ldr	r3, [pc, #548]	; (800b980 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800b75a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b75c:	e10a      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b75e:	2300      	movs	r3, #0
 800b760:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b762:	e107      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b764:	4b87      	ldr	r3, [pc, #540]	; (800b984 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800b766:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b768:	e104      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800b76a:	2300      	movs	r3, #0
 800b76c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b76e:	bf00      	nop
 800b770:	e100      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b778:	d153      	bne.n	800b822 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800b77a:	4b83      	ldr	r3, [pc, #524]	; (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b77c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b77e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b782:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b78a:	d01f      	beq.n	800b7cc <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800b78c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b790:	d805      	bhi.n	800b79e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800b792:	2b00      	cmp	r3, #0
 800b794:	d00a      	beq.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800b796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b79a:	d00f      	beq.n	800b7bc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800b79c:	e03d      	b.n	800b81a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800b79e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b7a2:	d037      	beq.n	800b814 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800b7a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7a8:	d018      	beq.n	800b7dc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800b7aa:	e036      	b.n	800b81a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b7ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f000 fb9d 	bl	800bef0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7ba:	e0db      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7bc:	f107 0318 	add.w	r3, r7, #24
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f000 f8fd 	bl	800b9c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b7c6:	69bb      	ldr	r3, [r7, #24]
 800b7c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7ca:	e0d3      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7cc:	f107 030c 	add.w	r3, r7, #12
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f000 fa41 	bl	800bc58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7da:	e0cb      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b7dc:	4b6a      	ldr	r3, [pc, #424]	; (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b7de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b7e4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b7e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d102      	bne.n	800b7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b7ec:	4b67      	ldr	r3, [pc, #412]	; (800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800b7ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b7f0:	e0c0      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b7f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b7f8:	d102      	bne.n	800b800 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800b7fa:	4b65      	ldr	r3, [pc, #404]	; (800b990 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800b7fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7fe:	e0b9      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b802:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b806:	d102      	bne.n	800b80e <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 800b808:	4b5d      	ldr	r3, [pc, #372]	; (800b980 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800b80a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b80c:	e0b2      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b80e:	2300      	movs	r3, #0
 800b810:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b812:	e0af      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b814:	4b5b      	ldr	r3, [pc, #364]	; (800b984 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800b816:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b818:	e0ac      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800b81a:	2300      	movs	r3, #0
 800b81c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b81e:	bf00      	nop
 800b820:	e0a8      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b828:	d13d      	bne.n	800b8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800b82a:	4b57      	ldr	r3, [pc, #348]	; (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b82c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b82e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b832:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b836:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b83a:	d00c      	beq.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b83c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b840:	d011      	beq.n	800b866 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800b842:	2b00      	cmp	r3, #0
 800b844:	d12b      	bne.n	800b89e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b846:	f107 0318 	add.w	r3, r7, #24
 800b84a:	4618      	mov	r0, r3
 800b84c:	f000 f8b8 	bl	800b9c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b850:	69bb      	ldr	r3, [r7, #24]
 800b852:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b854:	e08e      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b856:	f107 030c 	add.w	r3, r7, #12
 800b85a:	4618      	mov	r0, r3
 800b85c:	f000 f9fc 	bl	800bc58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b864:	e086      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b866:	4b48      	ldr	r3, [pc, #288]	; (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b86a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b86e:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b872:	2b00      	cmp	r3, #0
 800b874:	d102      	bne.n	800b87c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b876:	4b45      	ldr	r3, [pc, #276]	; (800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800b878:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b87a:	e07b      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b87c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b87e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b882:	d102      	bne.n	800b88a <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 800b884:	4b42      	ldr	r3, [pc, #264]	; (800b990 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800b886:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b888:	e074      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b88a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b88c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b890:	d102      	bne.n	800b898 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800b892:	4b3b      	ldr	r3, [pc, #236]	; (800b980 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800b894:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b896:	e06d      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b898:	2300      	movs	r3, #0
 800b89a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b89c:	e06a      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8a2:	bf00      	nop
 800b8a4:	e066      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8ac:	d11f      	bne.n	800b8ee <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800b8ae:	4b36      	ldr	r3, [pc, #216]	; (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b8b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b8b6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d003      	beq.n	800b8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800b8be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8c2:	d008      	beq.n	800b8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800b8c4:	e00f      	b.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b8c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f000 fb10 	bl	800bef0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8d4:	e04e      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8d6:	f107 0318 	add.w	r3, r7, #24
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f000 f870 	bl	800b9c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b8e0:	6a3b      	ldr	r3, [r7, #32]
 800b8e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8e4:	e046      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8ea:	bf00      	nop
 800b8ec:	e042      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b8f4:	d13c      	bne.n	800b970 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800b8f6:	4b24      	ldr	r3, [pc, #144]	; (800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b8f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8fa:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b8fe:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b902:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b906:	d01e      	beq.n	800b946 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 800b908:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b90c:	d805      	bhi.n	800b91a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d00d      	beq.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800b912:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b916:	d00e      	beq.n	800b936 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 800b918:	e026      	b.n	800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800b91a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b91e:	d01d      	beq.n	800b95c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800b920:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b924:	d01d      	beq.n	800b962 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800b926:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b92a:	d014      	beq.n	800b956 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800b92c:	e01c      	b.n	800b968 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b92e:	f000 f831 	bl	800b994 <HAL_RCCEx_GetD3PCLK1Freq>
 800b932:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800b934:	e01e      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b936:	f107 0318 	add.w	r3, r7, #24
 800b93a:	4618      	mov	r0, r3
 800b93c:	f000 f840 	bl	800b9c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b940:	69fb      	ldr	r3, [r7, #28]
 800b942:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b944:	e016      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b946:	f107 030c 	add.w	r3, r7, #12
 800b94a:	4618      	mov	r0, r3
 800b94c:	f000 f984 	bl	800bc58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b954:	e00e      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800b956:	4b0d      	ldr	r3, [pc, #52]	; (800b98c <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800b958:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b95a:	e00b      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 800b95c:	4b0c      	ldr	r3, [pc, #48]	; (800b990 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800b95e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b960:	e008      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800b962:	4b07      	ldr	r3, [pc, #28]	; (800b980 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800b964:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b966:	e005      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800b968:	2300      	movs	r3, #0
 800b96a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b96c:	bf00      	nop
 800b96e:	e001      	b.n	800b974 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 800b970:	2300      	movs	r3, #0
 800b972:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800b974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b976:	4618      	mov	r0, r3
 800b978:	3740      	adds	r7, #64	; 0x40
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
 800b97e:	bf00      	nop
 800b980:	017d7840 	.word	0x017d7840
 800b984:	00bb8000 	.word	0x00bb8000
 800b988:	58024400 	.word	0x58024400
 800b98c:	03d09000 	.word	0x03d09000
 800b990:	003d0900 	.word	0x003d0900

0800b994 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b998:	f7fe fe1e 	bl	800a5d8 <HAL_RCC_GetHCLKFreq>
 800b99c:	4601      	mov	r1, r0
 800b99e:	4b06      	ldr	r3, [pc, #24]	; (800b9b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b9a0:	6a1b      	ldr	r3, [r3, #32]
 800b9a2:	091b      	lsrs	r3, r3, #4
 800b9a4:	f003 0307 	and.w	r3, r3, #7
 800b9a8:	4a04      	ldr	r2, [pc, #16]	; (800b9bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b9aa:	5cd3      	ldrb	r3, [r2, r3]
 800b9ac:	f003 031f 	and.w	r3, r3, #31
 800b9b0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	bd80      	pop	{r7, pc}
 800b9b8:	58024400 	.word	0x58024400
 800b9bc:	0801af24 	.word	0x0801af24

0800b9c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b089      	sub	sp, #36	; 0x24
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b9c8:	4b9d      	ldr	r3, [pc, #628]	; (800bc40 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800b9ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9cc:	f003 0303 	and.w	r3, r3, #3
 800b9d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800b9d2:	4b9b      	ldr	r3, [pc, #620]	; (800bc40 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800b9d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9d6:	0b1b      	lsrs	r3, r3, #12
 800b9d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b9dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b9de:	4b98      	ldr	r3, [pc, #608]	; (800bc40 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800b9e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9e2:	091b      	lsrs	r3, r3, #4
 800b9e4:	f003 0301 	and.w	r3, r3, #1
 800b9e8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800b9ea:	4b95      	ldr	r3, [pc, #596]	; (800bc40 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800b9ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9ee:	08db      	lsrs	r3, r3, #3
 800b9f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b9f4:	693a      	ldr	r2, [r7, #16]
 800b9f6:	fb02 f303 	mul.w	r3, r2, r3
 800b9fa:	ee07 3a90 	vmov	s15, r3
 800b9fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	f000 810a 	beq.w	800bc22 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800ba0e:	69bb      	ldr	r3, [r7, #24]
 800ba10:	2b01      	cmp	r3, #1
 800ba12:	d05a      	beq.n	800baca <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	d302      	bcc.n	800ba1e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800ba18:	2b02      	cmp	r3, #2
 800ba1a:	d078      	beq.n	800bb0e <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800ba1c:	e099      	b.n	800bb52 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba1e:	4b88      	ldr	r3, [pc, #544]	; (800bc40 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	f003 0320 	and.w	r3, r3, #32
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d02d      	beq.n	800ba86 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ba2a:	4b85      	ldr	r3, [pc, #532]	; (800bc40 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	08db      	lsrs	r3, r3, #3
 800ba30:	f003 0303 	and.w	r3, r3, #3
 800ba34:	4a83      	ldr	r2, [pc, #524]	; (800bc44 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800ba36:	fa22 f303 	lsr.w	r3, r2, r3
 800ba3a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	ee07 3a90 	vmov	s15, r3
 800ba42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	ee07 3a90 	vmov	s15, r3
 800ba4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba54:	4b7a      	ldr	r3, [pc, #488]	; (800bc40 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ba56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba5c:	ee07 3a90 	vmov	s15, r3
 800ba60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba64:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba68:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bc48 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800ba6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba80:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ba84:	e087      	b.n	800bb96 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ba86:	697b      	ldr	r3, [r7, #20]
 800ba88:	ee07 3a90 	vmov	s15, r3
 800ba8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba90:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800bc4c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800ba94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba98:	4b69      	ldr	r3, [pc, #420]	; (800bc40 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ba9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800baa0:	ee07 3a90 	vmov	s15, r3
 800baa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800baa8:	ed97 6a03 	vldr	s12, [r7, #12]
 800baac:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bc48 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800bab0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bab4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bab8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800babc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bac4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bac8:	e065      	b.n	800bb96 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	ee07 3a90 	vmov	s15, r3
 800bad0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bad4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800bc50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800bad8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800badc:	4b58      	ldr	r3, [pc, #352]	; (800bc40 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bae4:	ee07 3a90 	vmov	s15, r3
 800bae8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800baec:	ed97 6a03 	vldr	s12, [r7, #12]
 800baf0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bc48 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800baf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800baf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bafc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb04:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb08:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb0c:	e043      	b.n	800bb96 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	ee07 3a90 	vmov	s15, r3
 800bb14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb18:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bc54 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800bb1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb20:	4b47      	ldr	r3, [pc, #284]	; (800bc40 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bb22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb28:	ee07 3a90 	vmov	s15, r3
 800bb2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb30:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb34:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bc48 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800bb38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb48:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb4c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb50:	e021      	b.n	800bb96 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	ee07 3a90 	vmov	s15, r3
 800bb58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb5c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800bc50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800bb60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb64:	4b36      	ldr	r3, [pc, #216]	; (800bc40 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bb66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb6c:	ee07 3a90 	vmov	s15, r3
 800bb70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb74:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb78:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bc48 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800bb7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb90:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb94:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800bb96:	4b2a      	ldr	r3, [pc, #168]	; (800bc40 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bb98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb9a:	0a5b      	lsrs	r3, r3, #9
 800bb9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bba0:	ee07 3a90 	vmov	s15, r3
 800bba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bba8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bbac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bbb0:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbbc:	ee17 2a90 	vmov	r2, s15
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800bbc4:	4b1e      	ldr	r3, [pc, #120]	; (800bc40 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bbc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbc8:	0c1b      	lsrs	r3, r3, #16
 800bbca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbce:	ee07 3a90 	vmov	s15, r3
 800bbd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bbda:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bbde:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbe2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbe6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbea:	ee17 2a90 	vmov	r2, s15
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800bbf2:	4b13      	ldr	r3, [pc, #76]	; (800bc40 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bbf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbf6:	0e1b      	lsrs	r3, r3, #24
 800bbf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbfc:	ee07 3a90 	vmov	s15, r3
 800bc00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc08:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc0c:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc18:	ee17 2a90 	vmov	r2, s15
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bc20:	e008      	b.n	800bc34 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2200      	movs	r2, #0
 800bc26:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2200      	movs	r2, #0
 800bc32:	609a      	str	r2, [r3, #8]
}
 800bc34:	bf00      	nop
 800bc36:	3724      	adds	r7, #36	; 0x24
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3e:	4770      	bx	lr
 800bc40:	58024400 	.word	0x58024400
 800bc44:	03d09000 	.word	0x03d09000
 800bc48:	46000000 	.word	0x46000000
 800bc4c:	4c742400 	.word	0x4c742400
 800bc50:	4a742400 	.word	0x4a742400
 800bc54:	4bbebc20 	.word	0x4bbebc20

0800bc58 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b089      	sub	sp, #36	; 0x24
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bc60:	4b9d      	ldr	r3, [pc, #628]	; (800bed8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bc62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc64:	f003 0303 	and.w	r3, r3, #3
 800bc68:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800bc6a:	4b9b      	ldr	r3, [pc, #620]	; (800bed8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bc6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc6e:	0d1b      	lsrs	r3, r3, #20
 800bc70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc74:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bc76:	4b98      	ldr	r3, [pc, #608]	; (800bed8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bc78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc7a:	0a1b      	lsrs	r3, r3, #8
 800bc7c:	f003 0301 	and.w	r3, r3, #1
 800bc80:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800bc82:	4b95      	ldr	r3, [pc, #596]	; (800bed8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bc84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc86:	08db      	lsrs	r3, r3, #3
 800bc88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bc8c:	693a      	ldr	r2, [r7, #16]
 800bc8e:	fb02 f303 	mul.w	r3, r2, r3
 800bc92:	ee07 3a90 	vmov	s15, r3
 800bc96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	f000 810a 	beq.w	800beba <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800bca6:	69bb      	ldr	r3, [r7, #24]
 800bca8:	2b01      	cmp	r3, #1
 800bcaa:	d05a      	beq.n	800bd62 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800bcac:	2b01      	cmp	r3, #1
 800bcae:	d302      	bcc.n	800bcb6 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800bcb0:	2b02      	cmp	r3, #2
 800bcb2:	d078      	beq.n	800bda6 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800bcb4:	e099      	b.n	800bdea <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bcb6:	4b88      	ldr	r3, [pc, #544]	; (800bed8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f003 0320 	and.w	r3, r3, #32
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d02d      	beq.n	800bd1e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bcc2:	4b85      	ldr	r3, [pc, #532]	; (800bed8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	08db      	lsrs	r3, r3, #3
 800bcc8:	f003 0303 	and.w	r3, r3, #3
 800bccc:	4a83      	ldr	r2, [pc, #524]	; (800bedc <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800bcce:	fa22 f303 	lsr.w	r3, r2, r3
 800bcd2:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	ee07 3a90 	vmov	s15, r3
 800bcda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	ee07 3a90 	vmov	s15, r3
 800bce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bce8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcec:	4b7a      	ldr	r3, [pc, #488]	; (800bed8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bcee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcf4:	ee07 3a90 	vmov	s15, r3
 800bcf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcfc:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd00:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bee0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800bd04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd14:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd18:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bd1c:	e087      	b.n	800be2e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bd1e:	697b      	ldr	r3, [r7, #20]
 800bd20:	ee07 3a90 	vmov	s15, r3
 800bd24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd28:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800bee4 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800bd2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd30:	4b69      	ldr	r3, [pc, #420]	; (800bed8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bd32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd38:	ee07 3a90 	vmov	s15, r3
 800bd3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd40:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd44:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bee0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800bd48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd58:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd5c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd60:	e065      	b.n	800be2e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	ee07 3a90 	vmov	s15, r3
 800bd68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd6c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800bee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800bd70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd74:	4b58      	ldr	r3, [pc, #352]	; (800bed8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bd76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd7c:	ee07 3a90 	vmov	s15, r3
 800bd80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd84:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd88:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bee0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800bd8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bda0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bda4:	e043      	b.n	800be2e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	ee07 3a90 	vmov	s15, r3
 800bdac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdb0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800beec <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800bdb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdb8:	4b47      	ldr	r3, [pc, #284]	; (800bed8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bdba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdc0:	ee07 3a90 	vmov	s15, r3
 800bdc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdc8:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdcc:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bee0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800bdd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bddc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bde0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bde4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bde8:	e021      	b.n	800be2e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	ee07 3a90 	vmov	s15, r3
 800bdf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdf4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800bee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800bdf8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdfc:	4b36      	ldr	r3, [pc, #216]	; (800bed8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bdfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be04:	ee07 3a90 	vmov	s15, r3
 800be08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be0c:	ed97 6a03 	vldr	s12, [r7, #12]
 800be10:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bee0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800be14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be24:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be28:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be2c:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800be2e:	4b2a      	ldr	r3, [pc, #168]	; (800bed8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800be30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be32:	0a5b      	lsrs	r3, r3, #9
 800be34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be38:	ee07 3a90 	vmov	s15, r3
 800be3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be44:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be48:	edd7 6a07 	vldr	s13, [r7, #28]
 800be4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be54:	ee17 2a90 	vmov	r2, s15
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800be5c:	4b1e      	ldr	r3, [pc, #120]	; (800bed8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800be5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be60:	0c1b      	lsrs	r3, r3, #16
 800be62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be66:	ee07 3a90 	vmov	s15, r3
 800be6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be72:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be76:	edd7 6a07 	vldr	s13, [r7, #28]
 800be7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be82:	ee17 2a90 	vmov	r2, s15
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800be8a:	4b13      	ldr	r3, [pc, #76]	; (800bed8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800be8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be8e:	0e1b      	lsrs	r3, r3, #24
 800be90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be94:	ee07 3a90 	vmov	s15, r3
 800be98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bea0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bea4:	edd7 6a07 	vldr	s13, [r7, #28]
 800bea8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800beac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800beb0:	ee17 2a90 	vmov	r2, s15
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800beb8:	e008      	b.n	800becc <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2200      	movs	r2, #0
 800bebe:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2200      	movs	r2, #0
 800bec4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2200      	movs	r2, #0
 800beca:	609a      	str	r2, [r3, #8]
}
 800becc:	bf00      	nop
 800bece:	3724      	adds	r7, #36	; 0x24
 800bed0:	46bd      	mov	sp, r7
 800bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed6:	4770      	bx	lr
 800bed8:	58024400 	.word	0x58024400
 800bedc:	03d09000 	.word	0x03d09000
 800bee0:	46000000 	.word	0x46000000
 800bee4:	4c742400 	.word	0x4c742400
 800bee8:	4a742400 	.word	0x4a742400
 800beec:	4bbebc20 	.word	0x4bbebc20

0800bef0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b089      	sub	sp, #36	; 0x24
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bef8:	4b9d      	ldr	r3, [pc, #628]	; (800c170 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800befa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800befc:	f003 0303 	and.w	r3, r3, #3
 800bf00:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800bf02:	4b9b      	ldr	r3, [pc, #620]	; (800c170 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bf04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf06:	091b      	lsrs	r3, r3, #4
 800bf08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf0c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bf0e:	4b98      	ldr	r3, [pc, #608]	; (800c170 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bf10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf12:	f003 0301 	and.w	r3, r3, #1
 800bf16:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800bf18:	4b95      	ldr	r3, [pc, #596]	; (800c170 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bf1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf1c:	08db      	lsrs	r3, r3, #3
 800bf1e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bf22:	693a      	ldr	r2, [r7, #16]
 800bf24:	fb02 f303 	mul.w	r3, r2, r3
 800bf28:	ee07 3a90 	vmov	s15, r3
 800bf2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf30:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bf34:	697b      	ldr	r3, [r7, #20]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	f000 810a 	beq.w	800c150 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 800bf3c:	69bb      	ldr	r3, [r7, #24]
 800bf3e:	2b01      	cmp	r3, #1
 800bf40:	d05a      	beq.n	800bff8 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800bf42:	2b01      	cmp	r3, #1
 800bf44:	d302      	bcc.n	800bf4c <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800bf46:	2b02      	cmp	r3, #2
 800bf48:	d078      	beq.n	800c03c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800bf4a:	e099      	b.n	800c080 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf4c:	4b88      	ldr	r3, [pc, #544]	; (800c170 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f003 0320 	and.w	r3, r3, #32
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d02d      	beq.n	800bfb4 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bf58:	4b85      	ldr	r3, [pc, #532]	; (800c170 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	08db      	lsrs	r3, r3, #3
 800bf5e:	f003 0303 	and.w	r3, r3, #3
 800bf62:	4a84      	ldr	r2, [pc, #528]	; (800c174 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800bf64:	fa22 f303 	lsr.w	r3, r2, r3
 800bf68:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	ee07 3a90 	vmov	s15, r3
 800bf70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	ee07 3a90 	vmov	s15, r3
 800bf7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf82:	4b7b      	ldr	r3, [pc, #492]	; (800c170 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bf84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf8a:	ee07 3a90 	vmov	s15, r3
 800bf8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf92:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf96:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c178 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800bf9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bfb2:	e087      	b.n	800c0c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bfb4:	697b      	ldr	r3, [r7, #20]
 800bfb6:	ee07 3a90 	vmov	s15, r3
 800bfba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfbe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c17c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800bfc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfc6:	4b6a      	ldr	r3, [pc, #424]	; (800c170 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bfc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfce:	ee07 3a90 	vmov	s15, r3
 800bfd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfd6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfda:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c178 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800bfde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bff2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bff6:	e065      	b.n	800c0c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	ee07 3a90 	vmov	s15, r3
 800bffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c002:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c180 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800c006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c00a:	4b59      	ldr	r3, [pc, #356]	; (800c170 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c00c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c00e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c012:	ee07 3a90 	vmov	s15, r3
 800c016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c01a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c01e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c178 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800c022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c02a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c02e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c032:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c036:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c03a:	e043      	b.n	800c0c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c03c:	697b      	ldr	r3, [r7, #20]
 800c03e:	ee07 3a90 	vmov	s15, r3
 800c042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c046:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c184 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c04a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c04e:	4b48      	ldr	r3, [pc, #288]	; (800c170 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c056:	ee07 3a90 	vmov	s15, r3
 800c05a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c05e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c062:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c178 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800c066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c06a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c06e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c07a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c07e:	e021      	b.n	800c0c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c080:	697b      	ldr	r3, [r7, #20]
 800c082:	ee07 3a90 	vmov	s15, r3
 800c086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c08a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c180 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800c08e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c092:	4b37      	ldr	r3, [pc, #220]	; (800c170 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c09a:	ee07 3a90 	vmov	s15, r3
 800c09e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c178 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800c0aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c0c2:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800c0c4:	4b2a      	ldr	r3, [pc, #168]	; (800c170 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c0c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0c8:	0a5b      	lsrs	r3, r3, #9
 800c0ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0ce:	ee07 3a90 	vmov	s15, r3
 800c0d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c0da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c0de:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0ea:	ee17 2a90 	vmov	r2, s15
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800c0f2:	4b1f      	ldr	r3, [pc, #124]	; (800c170 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c0f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0f6:	0c1b      	lsrs	r3, r3, #16
 800c0f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0fc:	ee07 3a90 	vmov	s15, r3
 800c100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c104:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c108:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c10c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c110:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c118:	ee17 2a90 	vmov	r2, s15
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800c120:	4b13      	ldr	r3, [pc, #76]	; (800c170 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c124:	0e1b      	lsrs	r3, r3, #24
 800c126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c12a:	ee07 3a90 	vmov	s15, r3
 800c12e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c132:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c136:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c13a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c13e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c142:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c146:	ee17 2a90 	vmov	r2, s15
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c14e:	e008      	b.n	800c162 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2200      	movs	r2, #0
 800c154:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2200      	movs	r2, #0
 800c15a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2200      	movs	r2, #0
 800c160:	609a      	str	r2, [r3, #8]
}
 800c162:	bf00      	nop
 800c164:	3724      	adds	r7, #36	; 0x24
 800c166:	46bd      	mov	sp, r7
 800c168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16c:	4770      	bx	lr
 800c16e:	bf00      	nop
 800c170:	58024400 	.word	0x58024400
 800c174:	03d09000 	.word	0x03d09000
 800c178:	46000000 	.word	0x46000000
 800c17c:	4c742400 	.word	0x4c742400
 800c180:	4a742400 	.word	0x4a742400
 800c184:	4bbebc20 	.word	0x4bbebc20

0800c188 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b084      	sub	sp, #16
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
 800c190:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c192:	2300      	movs	r3, #0
 800c194:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c196:	4b53      	ldr	r3, [pc, #332]	; (800c2e4 <RCCEx_PLL2_Config+0x15c>)
 800c198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c19a:	f003 0303 	and.w	r3, r3, #3
 800c19e:	2b03      	cmp	r3, #3
 800c1a0:	d101      	bne.n	800c1a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	e099      	b.n	800c2da <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c1a6:	4b4f      	ldr	r3, [pc, #316]	; (800c2e4 <RCCEx_PLL2_Config+0x15c>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	4a4e      	ldr	r2, [pc, #312]	; (800c2e4 <RCCEx_PLL2_Config+0x15c>)
 800c1ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c1b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c1b2:	f7f8 fa01 	bl	80045b8 <HAL_GetTick>
 800c1b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c1b8:	e008      	b.n	800c1cc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c1ba:	f7f8 f9fd 	bl	80045b8 <HAL_GetTick>
 800c1be:	4602      	mov	r2, r0
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	1ad3      	subs	r3, r2, r3
 800c1c4:	2b02      	cmp	r3, #2
 800c1c6:	d901      	bls.n	800c1cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c1c8:	2303      	movs	r3, #3
 800c1ca:	e086      	b.n	800c2da <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c1cc:	4b45      	ldr	r3, [pc, #276]	; (800c2e4 <RCCEx_PLL2_Config+0x15c>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d1f0      	bne.n	800c1ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c1d8:	4b42      	ldr	r3, [pc, #264]	; (800c2e4 <RCCEx_PLL2_Config+0x15c>)
 800c1da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1dc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	031b      	lsls	r3, r3, #12
 800c1e6:	493f      	ldr	r1, [pc, #252]	; (800c2e4 <RCCEx_PLL2_Config+0x15c>)
 800c1e8:	4313      	orrs	r3, r2
 800c1ea:	628b      	str	r3, [r1, #40]	; 0x28
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	685b      	ldr	r3, [r3, #4]
 800c1f0:	3b01      	subs	r3, #1
 800c1f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	689b      	ldr	r3, [r3, #8]
 800c1fa:	3b01      	subs	r3, #1
 800c1fc:	025b      	lsls	r3, r3, #9
 800c1fe:	b29b      	uxth	r3, r3
 800c200:	431a      	orrs	r2, r3
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	68db      	ldr	r3, [r3, #12]
 800c206:	3b01      	subs	r3, #1
 800c208:	041b      	lsls	r3, r3, #16
 800c20a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c20e:	431a      	orrs	r2, r3
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	691b      	ldr	r3, [r3, #16]
 800c214:	3b01      	subs	r3, #1
 800c216:	061b      	lsls	r3, r3, #24
 800c218:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c21c:	4931      	ldr	r1, [pc, #196]	; (800c2e4 <RCCEx_PLL2_Config+0x15c>)
 800c21e:	4313      	orrs	r3, r2
 800c220:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c222:	4b30      	ldr	r3, [pc, #192]	; (800c2e4 <RCCEx_PLL2_Config+0x15c>)
 800c224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c226:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	695b      	ldr	r3, [r3, #20]
 800c22e:	492d      	ldr	r1, [pc, #180]	; (800c2e4 <RCCEx_PLL2_Config+0x15c>)
 800c230:	4313      	orrs	r3, r2
 800c232:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c234:	4b2b      	ldr	r3, [pc, #172]	; (800c2e4 <RCCEx_PLL2_Config+0x15c>)
 800c236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c238:	f023 0220 	bic.w	r2, r3, #32
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	699b      	ldr	r3, [r3, #24]
 800c240:	4928      	ldr	r1, [pc, #160]	; (800c2e4 <RCCEx_PLL2_Config+0x15c>)
 800c242:	4313      	orrs	r3, r2
 800c244:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c246:	4b27      	ldr	r3, [pc, #156]	; (800c2e4 <RCCEx_PLL2_Config+0x15c>)
 800c248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c24a:	4a26      	ldr	r2, [pc, #152]	; (800c2e4 <RCCEx_PLL2_Config+0x15c>)
 800c24c:	f023 0310 	bic.w	r3, r3, #16
 800c250:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c252:	4b24      	ldr	r3, [pc, #144]	; (800c2e4 <RCCEx_PLL2_Config+0x15c>)
 800c254:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c256:	4b24      	ldr	r3, [pc, #144]	; (800c2e8 <RCCEx_PLL2_Config+0x160>)
 800c258:	4013      	ands	r3, r2
 800c25a:	687a      	ldr	r2, [r7, #4]
 800c25c:	69d2      	ldr	r2, [r2, #28]
 800c25e:	00d2      	lsls	r2, r2, #3
 800c260:	4920      	ldr	r1, [pc, #128]	; (800c2e4 <RCCEx_PLL2_Config+0x15c>)
 800c262:	4313      	orrs	r3, r2
 800c264:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c266:	4b1f      	ldr	r3, [pc, #124]	; (800c2e4 <RCCEx_PLL2_Config+0x15c>)
 800c268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c26a:	4a1e      	ldr	r2, [pc, #120]	; (800c2e4 <RCCEx_PLL2_Config+0x15c>)
 800c26c:	f043 0310 	orr.w	r3, r3, #16
 800c270:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d106      	bne.n	800c286 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c278:	4b1a      	ldr	r3, [pc, #104]	; (800c2e4 <RCCEx_PLL2_Config+0x15c>)
 800c27a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c27c:	4a19      	ldr	r2, [pc, #100]	; (800c2e4 <RCCEx_PLL2_Config+0x15c>)
 800c27e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c282:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c284:	e00f      	b.n	800c2a6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	2b01      	cmp	r3, #1
 800c28a:	d106      	bne.n	800c29a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c28c:	4b15      	ldr	r3, [pc, #84]	; (800c2e4 <RCCEx_PLL2_Config+0x15c>)
 800c28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c290:	4a14      	ldr	r2, [pc, #80]	; (800c2e4 <RCCEx_PLL2_Config+0x15c>)
 800c292:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c296:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c298:	e005      	b.n	800c2a6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c29a:	4b12      	ldr	r3, [pc, #72]	; (800c2e4 <RCCEx_PLL2_Config+0x15c>)
 800c29c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c29e:	4a11      	ldr	r2, [pc, #68]	; (800c2e4 <RCCEx_PLL2_Config+0x15c>)
 800c2a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c2a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c2a6:	4b0f      	ldr	r3, [pc, #60]	; (800c2e4 <RCCEx_PLL2_Config+0x15c>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	4a0e      	ldr	r2, [pc, #56]	; (800c2e4 <RCCEx_PLL2_Config+0x15c>)
 800c2ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c2b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c2b2:	f7f8 f981 	bl	80045b8 <HAL_GetTick>
 800c2b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c2b8:	e008      	b.n	800c2cc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c2ba:	f7f8 f97d 	bl	80045b8 <HAL_GetTick>
 800c2be:	4602      	mov	r2, r0
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	1ad3      	subs	r3, r2, r3
 800c2c4:	2b02      	cmp	r3, #2
 800c2c6:	d901      	bls.n	800c2cc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c2c8:	2303      	movs	r3, #3
 800c2ca:	e006      	b.n	800c2da <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c2cc:	4b05      	ldr	r3, [pc, #20]	; (800c2e4 <RCCEx_PLL2_Config+0x15c>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d0f0      	beq.n	800c2ba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c2d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3710      	adds	r7, #16
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}
 800c2e2:	bf00      	nop
 800c2e4:	58024400 	.word	0x58024400
 800c2e8:	ffff0007 	.word	0xffff0007

0800c2ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b084      	sub	sp, #16
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c2fa:	4b53      	ldr	r3, [pc, #332]	; (800c448 <RCCEx_PLL3_Config+0x15c>)
 800c2fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2fe:	f003 0303 	and.w	r3, r3, #3
 800c302:	2b03      	cmp	r3, #3
 800c304:	d101      	bne.n	800c30a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c306:	2301      	movs	r3, #1
 800c308:	e099      	b.n	800c43e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c30a:	4b4f      	ldr	r3, [pc, #316]	; (800c448 <RCCEx_PLL3_Config+0x15c>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	4a4e      	ldr	r2, [pc, #312]	; (800c448 <RCCEx_PLL3_Config+0x15c>)
 800c310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c314:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c316:	f7f8 f94f 	bl	80045b8 <HAL_GetTick>
 800c31a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c31c:	e008      	b.n	800c330 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c31e:	f7f8 f94b 	bl	80045b8 <HAL_GetTick>
 800c322:	4602      	mov	r2, r0
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	1ad3      	subs	r3, r2, r3
 800c328:	2b02      	cmp	r3, #2
 800c32a:	d901      	bls.n	800c330 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c32c:	2303      	movs	r3, #3
 800c32e:	e086      	b.n	800c43e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c330:	4b45      	ldr	r3, [pc, #276]	; (800c448 <RCCEx_PLL3_Config+0x15c>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d1f0      	bne.n	800c31e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c33c:	4b42      	ldr	r3, [pc, #264]	; (800c448 <RCCEx_PLL3_Config+0x15c>)
 800c33e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c340:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	051b      	lsls	r3, r3, #20
 800c34a:	493f      	ldr	r1, [pc, #252]	; (800c448 <RCCEx_PLL3_Config+0x15c>)
 800c34c:	4313      	orrs	r3, r2
 800c34e:	628b      	str	r3, [r1, #40]	; 0x28
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	685b      	ldr	r3, [r3, #4]
 800c354:	3b01      	subs	r3, #1
 800c356:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	689b      	ldr	r3, [r3, #8]
 800c35e:	3b01      	subs	r3, #1
 800c360:	025b      	lsls	r3, r3, #9
 800c362:	b29b      	uxth	r3, r3
 800c364:	431a      	orrs	r2, r3
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	68db      	ldr	r3, [r3, #12]
 800c36a:	3b01      	subs	r3, #1
 800c36c:	041b      	lsls	r3, r3, #16
 800c36e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c372:	431a      	orrs	r2, r3
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	691b      	ldr	r3, [r3, #16]
 800c378:	3b01      	subs	r3, #1
 800c37a:	061b      	lsls	r3, r3, #24
 800c37c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c380:	4931      	ldr	r1, [pc, #196]	; (800c448 <RCCEx_PLL3_Config+0x15c>)
 800c382:	4313      	orrs	r3, r2
 800c384:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c386:	4b30      	ldr	r3, [pc, #192]	; (800c448 <RCCEx_PLL3_Config+0x15c>)
 800c388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c38a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	695b      	ldr	r3, [r3, #20]
 800c392:	492d      	ldr	r1, [pc, #180]	; (800c448 <RCCEx_PLL3_Config+0x15c>)
 800c394:	4313      	orrs	r3, r2
 800c396:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c398:	4b2b      	ldr	r3, [pc, #172]	; (800c448 <RCCEx_PLL3_Config+0x15c>)
 800c39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c39c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	699b      	ldr	r3, [r3, #24]
 800c3a4:	4928      	ldr	r1, [pc, #160]	; (800c448 <RCCEx_PLL3_Config+0x15c>)
 800c3a6:	4313      	orrs	r3, r2
 800c3a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c3aa:	4b27      	ldr	r3, [pc, #156]	; (800c448 <RCCEx_PLL3_Config+0x15c>)
 800c3ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3ae:	4a26      	ldr	r2, [pc, #152]	; (800c448 <RCCEx_PLL3_Config+0x15c>)
 800c3b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c3b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c3b6:	4b24      	ldr	r3, [pc, #144]	; (800c448 <RCCEx_PLL3_Config+0x15c>)
 800c3b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c3ba:	4b24      	ldr	r3, [pc, #144]	; (800c44c <RCCEx_PLL3_Config+0x160>)
 800c3bc:	4013      	ands	r3, r2
 800c3be:	687a      	ldr	r2, [r7, #4]
 800c3c0:	69d2      	ldr	r2, [r2, #28]
 800c3c2:	00d2      	lsls	r2, r2, #3
 800c3c4:	4920      	ldr	r1, [pc, #128]	; (800c448 <RCCEx_PLL3_Config+0x15c>)
 800c3c6:	4313      	orrs	r3, r2
 800c3c8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c3ca:	4b1f      	ldr	r3, [pc, #124]	; (800c448 <RCCEx_PLL3_Config+0x15c>)
 800c3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3ce:	4a1e      	ldr	r2, [pc, #120]	; (800c448 <RCCEx_PLL3_Config+0x15c>)
 800c3d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c3d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d106      	bne.n	800c3ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c3dc:	4b1a      	ldr	r3, [pc, #104]	; (800c448 <RCCEx_PLL3_Config+0x15c>)
 800c3de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3e0:	4a19      	ldr	r2, [pc, #100]	; (800c448 <RCCEx_PLL3_Config+0x15c>)
 800c3e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c3e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c3e8:	e00f      	b.n	800c40a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	2b01      	cmp	r3, #1
 800c3ee:	d106      	bne.n	800c3fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c3f0:	4b15      	ldr	r3, [pc, #84]	; (800c448 <RCCEx_PLL3_Config+0x15c>)
 800c3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3f4:	4a14      	ldr	r2, [pc, #80]	; (800c448 <RCCEx_PLL3_Config+0x15c>)
 800c3f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c3fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c3fc:	e005      	b.n	800c40a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c3fe:	4b12      	ldr	r3, [pc, #72]	; (800c448 <RCCEx_PLL3_Config+0x15c>)
 800c400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c402:	4a11      	ldr	r2, [pc, #68]	; (800c448 <RCCEx_PLL3_Config+0x15c>)
 800c404:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c408:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c40a:	4b0f      	ldr	r3, [pc, #60]	; (800c448 <RCCEx_PLL3_Config+0x15c>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	4a0e      	ldr	r2, [pc, #56]	; (800c448 <RCCEx_PLL3_Config+0x15c>)
 800c410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c414:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c416:	f7f8 f8cf 	bl	80045b8 <HAL_GetTick>
 800c41a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c41c:	e008      	b.n	800c430 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c41e:	f7f8 f8cb 	bl	80045b8 <HAL_GetTick>
 800c422:	4602      	mov	r2, r0
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	1ad3      	subs	r3, r2, r3
 800c428:	2b02      	cmp	r3, #2
 800c42a:	d901      	bls.n	800c430 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c42c:	2303      	movs	r3, #3
 800c42e:	e006      	b.n	800c43e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c430:	4b05      	ldr	r3, [pc, #20]	; (800c448 <RCCEx_PLL3_Config+0x15c>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d0f0      	beq.n	800c41e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c43c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3710      	adds	r7, #16
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}
 800c446:	bf00      	nop
 800c448:	58024400 	.word	0x58024400
 800c44c:	ffff0007 	.word	0xffff0007

0800c450 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b084      	sub	sp, #16
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c458:	2301      	movs	r3, #1
 800c45a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d067      	beq.n	800c532 <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c468:	b2db      	uxtb	r3, r3
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d106      	bne.n	800c47c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2200      	movs	r2, #0
 800c472:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f7f7 fce2 	bl	8003e40 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2202      	movs	r2, #2
 800c480:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	22ca      	movs	r2, #202	; 0xca
 800c48a:	625a      	str	r2, [r3, #36]	; 0x24
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	2253      	movs	r2, #83	; 0x53
 800c492:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800c494:	6878      	ldr	r0, [r7, #4]
 800c496:	f000 fa49 	bl	800c92c <RTC_EnterInitMode>
 800c49a:	4603      	mov	r3, r0
 800c49c:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800c49e:	7bfb      	ldrb	r3, [r7, #15]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d13b      	bne.n	800c51c <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	6899      	ldr	r1, [r3, #8]
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681a      	ldr	r2, [r3, #0]
 800c4ae:	4b23      	ldr	r3, [pc, #140]	; (800c53c <HAL_RTC_Init+0xec>)
 800c4b0:	400b      	ands	r3, r1
 800c4b2:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	6899      	ldr	r1, [r3, #8]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	685a      	ldr	r2, [r3, #4]
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	691b      	ldr	r3, [r3, #16]
 800c4c2:	431a      	orrs	r2, r3
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	699b      	ldr	r3, [r3, #24]
 800c4c8:	431a      	orrs	r2, r3
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	430a      	orrs	r2, r1
 800c4d0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	689b      	ldr	r3, [r3, #8]
 800c4d6:	0419      	lsls	r1, r3, #16
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	68da      	ldr	r2, [r3, #12]
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	430a      	orrs	r2, r1
 800c4e2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f000 fa51 	bl	800c98c <RTC_ExitInitMode>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800c4ee:	7bfb      	ldrb	r3, [r7, #15]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d113      	bne.n	800c51c <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f022 0203 	bic.w	r2, r2, #3
 800c502:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	69da      	ldr	r2, [r3, #28]
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	695b      	ldr	r3, [r3, #20]
 800c512:	431a      	orrs	r2, r3
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	430a      	orrs	r2, r1
 800c51a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	22ff      	movs	r2, #255	; 0xff
 800c522:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800c524:	7bfb      	ldrb	r3, [r7, #15]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d103      	bne.n	800c532 <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	2201      	movs	r2, #1
 800c52e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800c532:	7bfb      	ldrb	r3, [r7, #15]
}
 800c534:	4618      	mov	r0, r3
 800c536:	3710      	adds	r7, #16
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}
 800c53c:	ff8fffbf 	.word	0xff8fffbf

0800c540 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c540:	b590      	push	{r4, r7, lr}
 800c542:	b087      	sub	sp, #28
 800c544:	af00      	add	r7, sp, #0
 800c546:	60f8      	str	r0, [r7, #12]
 800c548:	60b9      	str	r1, [r7, #8]
 800c54a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c552:	2b01      	cmp	r3, #1
 800c554:	d101      	bne.n	800c55a <HAL_RTC_SetTime+0x1a>
 800c556:	2302      	movs	r3, #2
 800c558:	e089      	b.n	800c66e <HAL_RTC_SetTime+0x12e>
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	2201      	movs	r2, #1
 800c55e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	2202      	movs	r2, #2
 800c566:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	22ca      	movs	r2, #202	; 0xca
 800c570:	625a      	str	r2, [r3, #36]	; 0x24
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	2253      	movs	r2, #83	; 0x53
 800c578:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c57a:	68f8      	ldr	r0, [r7, #12]
 800c57c:	f000 f9d6 	bl	800c92c <RTC_EnterInitMode>
 800c580:	4603      	mov	r3, r0
 800c582:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c584:	7cfb      	ldrb	r3, [r7, #19]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d161      	bne.n	800c64e <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d126      	bne.n	800c5de <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	689b      	ldr	r3, [r3, #8]
 800c596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d102      	bne.n	800c5a4 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f000 fa2d 	bl	800ca08 <RTC_ByteToBcd2>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	785b      	ldrb	r3, [r3, #1]
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f000 fa26 	bl	800ca08 <RTC_ByteToBcd2>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c5c0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	789b      	ldrb	r3, [r3, #2]
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f000 fa1e 	bl	800ca08 <RTC_ByteToBcd2>
 800c5cc:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c5ce:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	78db      	ldrb	r3, [r3, #3]
 800c5d6:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c5d8:	4313      	orrs	r3, r2
 800c5da:	617b      	str	r3, [r7, #20]
 800c5dc:	e018      	b.n	800c610 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	689b      	ldr	r3, [r3, #8]
 800c5e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d102      	bne.n	800c5f2 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c5f2:	68bb      	ldr	r3, [r7, #8]
 800c5f4:	781b      	ldrb	r3, [r3, #0]
 800c5f6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	785b      	ldrb	r3, [r3, #1]
 800c5fc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c5fe:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c600:	68ba      	ldr	r2, [r7, #8]
 800c602:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c604:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	78db      	ldrb	r3, [r3, #3]
 800c60a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c60c:	4313      	orrs	r3, r2
 800c60e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	681a      	ldr	r2, [r3, #0]
 800c614:	6979      	ldr	r1, [r7, #20]
 800c616:	4b18      	ldr	r3, [pc, #96]	; (800c678 <HAL_RTC_SetTime+0x138>)
 800c618:	400b      	ands	r3, r1
 800c61a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	689a      	ldr	r2, [r3, #8]
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c62a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	6899      	ldr	r1, [r3, #8]
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	68da      	ldr	r2, [r3, #12]
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	691b      	ldr	r3, [r3, #16]
 800c63a:	431a      	orrs	r2, r3
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	430a      	orrs	r2, r1
 800c642:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c644:	68f8      	ldr	r0, [r7, #12]
 800c646:	f000 f9a1 	bl	800c98c <RTC_ExitInitMode>
 800c64a:	4603      	mov	r3, r0
 800c64c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	22ff      	movs	r2, #255	; 0xff
 800c654:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c656:	7cfb      	ldrb	r3, [r7, #19]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d103      	bne.n	800c664 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2201      	movs	r2, #1
 800c660:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	2200      	movs	r2, #0
 800c668:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c66c:	7cfb      	ldrb	r3, [r7, #19]
}
 800c66e:	4618      	mov	r0, r3
 800c670:	371c      	adds	r7, #28
 800c672:	46bd      	mov	sp, r7
 800c674:	bd90      	pop	{r4, r7, pc}
 800c676:	bf00      	nop
 800c678:	007f7f7f 	.word	0x007f7f7f

0800c67c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b086      	sub	sp, #24
 800c680:	af00      	add	r7, sp, #0
 800c682:	60f8      	str	r0, [r7, #12]
 800c684:	60b9      	str	r1, [r7, #8]
 800c686:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	691b      	ldr	r3, [r3, #16]
 800c698:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	681a      	ldr	r2, [r3, #0]
 800c6a6:	4b22      	ldr	r3, [pc, #136]	; (800c730 <HAL_RTC_GetTime+0xb4>)
 800c6a8:	4013      	ands	r3, r2
 800c6aa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	0c1b      	lsrs	r3, r3, #16
 800c6b0:	b2db      	uxtb	r3, r3
 800c6b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c6b6:	b2da      	uxtb	r2, r3
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	0a1b      	lsrs	r3, r3, #8
 800c6c0:	b2db      	uxtb	r3, r3
 800c6c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6c6:	b2da      	uxtb	r2, r3
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800c6cc:	697b      	ldr	r3, [r7, #20]
 800c6ce:	b2db      	uxtb	r3, r3
 800c6d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6d4:	b2da      	uxtb	r2, r3
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	0d9b      	lsrs	r3, r3, #22
 800c6de:	b2db      	uxtb	r3, r3
 800c6e0:	f003 0301 	and.w	r3, r3, #1
 800c6e4:	b2da      	uxtb	r2, r3
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d11a      	bne.n	800c726 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	781b      	ldrb	r3, [r3, #0]
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f000 f9a7 	bl	800ca48 <RTC_Bcd2ToByte>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	461a      	mov	r2, r3
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	785b      	ldrb	r3, [r3, #1]
 800c706:	4618      	mov	r0, r3
 800c708:	f000 f99e 	bl	800ca48 <RTC_Bcd2ToByte>
 800c70c:	4603      	mov	r3, r0
 800c70e:	461a      	mov	r2, r3
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	789b      	ldrb	r3, [r3, #2]
 800c718:	4618      	mov	r0, r3
 800c71a:	f000 f995 	bl	800ca48 <RTC_Bcd2ToByte>
 800c71e:	4603      	mov	r3, r0
 800c720:	461a      	mov	r2, r3
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c726:	2300      	movs	r3, #0
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3718      	adds	r7, #24
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}
 800c730:	007f7f7f 	.word	0x007f7f7f

0800c734 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c734:	b590      	push	{r4, r7, lr}
 800c736:	b087      	sub	sp, #28
 800c738:	af00      	add	r7, sp, #0
 800c73a:	60f8      	str	r0, [r7, #12]
 800c73c:	60b9      	str	r1, [r7, #8]
 800c73e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c746:	2b01      	cmp	r3, #1
 800c748:	d101      	bne.n	800c74e <HAL_RTC_SetDate+0x1a>
 800c74a:	2302      	movs	r3, #2
 800c74c:	e073      	b.n	800c836 <HAL_RTC_SetDate+0x102>
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	2201      	movs	r2, #1
 800c752:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	2202      	movs	r2, #2
 800c75a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d10e      	bne.n	800c782 <HAL_RTC_SetDate+0x4e>
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	785b      	ldrb	r3, [r3, #1]
 800c768:	f003 0310 	and.w	r3, r3, #16
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d008      	beq.n	800c782 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	785b      	ldrb	r3, [r3, #1]
 800c774:	f023 0310 	bic.w	r3, r3, #16
 800c778:	b2db      	uxtb	r3, r3
 800c77a:	330a      	adds	r3, #10
 800c77c:	b2da      	uxtb	r2, r3
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d11c      	bne.n	800c7c2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	78db      	ldrb	r3, [r3, #3]
 800c78c:	4618      	mov	r0, r3
 800c78e:	f000 f93b 	bl	800ca08 <RTC_ByteToBcd2>
 800c792:	4603      	mov	r3, r0
 800c794:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	785b      	ldrb	r3, [r3, #1]
 800c79a:	4618      	mov	r0, r3
 800c79c:	f000 f934 	bl	800ca08 <RTC_ByteToBcd2>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c7a4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	789b      	ldrb	r3, [r3, #2]
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f000 f92c 	bl	800ca08 <RTC_ByteToBcd2>
 800c7b0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c7b2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	781b      	ldrb	r3, [r3, #0]
 800c7ba:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c7bc:	4313      	orrs	r3, r2
 800c7be:	617b      	str	r3, [r7, #20]
 800c7c0:	e00e      	b.n	800c7e0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	78db      	ldrb	r3, [r3, #3]
 800c7c6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	785b      	ldrb	r3, [r3, #1]
 800c7cc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c7ce:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800c7d0:	68ba      	ldr	r2, [r7, #8]
 800c7d2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c7d4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	781b      	ldrb	r3, [r3, #0]
 800c7da:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c7dc:	4313      	orrs	r3, r2
 800c7de:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	22ca      	movs	r2, #202	; 0xca
 800c7e6:	625a      	str	r2, [r3, #36]	; 0x24
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	2253      	movs	r2, #83	; 0x53
 800c7ee:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c7f0:	68f8      	ldr	r0, [r7, #12]
 800c7f2:	f000 f89b 	bl	800c92c <RTC_EnterInitMode>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c7fa:	7cfb      	ldrb	r3, [r7, #19]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d10a      	bne.n	800c816 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	681a      	ldr	r2, [r3, #0]
 800c804:	6979      	ldr	r1, [r7, #20]
 800c806:	4b0e      	ldr	r3, [pc, #56]	; (800c840 <HAL_RTC_SetDate+0x10c>)
 800c808:	400b      	ands	r3, r1
 800c80a:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c80c:	68f8      	ldr	r0, [r7, #12]
 800c80e:	f000 f8bd 	bl	800c98c <RTC_ExitInitMode>
 800c812:	4603      	mov	r3, r0
 800c814:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	22ff      	movs	r2, #255	; 0xff
 800c81c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c81e:	7cfb      	ldrb	r3, [r7, #19]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d103      	bne.n	800c82c <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	2201      	movs	r2, #1
 800c828:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	2200      	movs	r2, #0
 800c830:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c834:	7cfb      	ldrb	r3, [r7, #19]


}
 800c836:	4618      	mov	r0, r3
 800c838:	371c      	adds	r7, #28
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd90      	pop	{r4, r7, pc}
 800c83e:	bf00      	nop
 800c840:	00ffff3f 	.word	0x00ffff3f

0800c844 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b086      	sub	sp, #24
 800c848:	af00      	add	r7, sp, #0
 800c84a:	60f8      	str	r0, [r7, #12]
 800c84c:	60b9      	str	r1, [r7, #8]
 800c84e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	685a      	ldr	r2, [r3, #4]
 800c856:	4b21      	ldr	r3, [pc, #132]	; (800c8dc <HAL_RTC_GetDate+0x98>)
 800c858:	4013      	ands	r3, r2
 800c85a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	0c1b      	lsrs	r3, r3, #16
 800c860:	b2da      	uxtb	r2, r3
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	0a1b      	lsrs	r3, r3, #8
 800c86a:	b2db      	uxtb	r3, r3
 800c86c:	f003 031f 	and.w	r3, r3, #31
 800c870:	b2da      	uxtb	r2, r3
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	b2db      	uxtb	r3, r3
 800c87a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c87e:	b2da      	uxtb	r2, r3
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800c884:	697b      	ldr	r3, [r7, #20]
 800c886:	0b5b      	lsrs	r3, r3, #13
 800c888:	b2db      	uxtb	r3, r3
 800c88a:	f003 0307 	and.w	r3, r3, #7
 800c88e:	b2da      	uxtb	r2, r3
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d11a      	bne.n	800c8d0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	78db      	ldrb	r3, [r3, #3]
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f000 f8d2 	bl	800ca48 <RTC_Bcd2ToByte>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	785b      	ldrb	r3, [r3, #1]
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f000 f8c9 	bl	800ca48 <RTC_Bcd2ToByte>
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	461a      	mov	r2, r3
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	789b      	ldrb	r3, [r3, #2]
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f000 f8c0 	bl	800ca48 <RTC_Bcd2ToByte>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	461a      	mov	r2, r3
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c8d0:	2300      	movs	r3, #0
}
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	3718      	adds	r7, #24
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}
 800c8da:	bf00      	nop
 800c8dc:	00ffff3f 	.word	0x00ffff3f

0800c8e0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b084      	sub	sp, #16
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	68da      	ldr	r2, [r3, #12]
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c8f6:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800c8f8:	f7f7 fe5e 	bl	80045b8 <HAL_GetTick>
 800c8fc:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c8fe:	e009      	b.n	800c914 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c900:	f7f7 fe5a 	bl	80045b8 <HAL_GetTick>
 800c904:	4602      	mov	r2, r0
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	1ad3      	subs	r3, r2, r3
 800c90a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c90e:	d901      	bls.n	800c914 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800c910:	2303      	movs	r3, #3
 800c912:	e007      	b.n	800c924 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	68db      	ldr	r3, [r3, #12]
 800c91a:	f003 0320 	and.w	r3, r3, #32
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d0ee      	beq.n	800c900 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800c922:	2300      	movs	r3, #0
}
 800c924:	4618      	mov	r0, r3
 800c926:	3710      	adds	r7, #16
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}

0800c92c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b084      	sub	sp, #16
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c934:	2300      	movs	r3, #0
 800c936:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	68db      	ldr	r3, [r3, #12]
 800c93e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c942:	2b00      	cmp	r3, #0
 800c944:	d11d      	bne.n	800c982 <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	f04f 32ff 	mov.w	r2, #4294967295
 800c94e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c950:	f7f7 fe32 	bl	80045b8 <HAL_GetTick>
 800c954:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c956:	e00d      	b.n	800c974 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c958:	f7f7 fe2e 	bl	80045b8 <HAL_GetTick>
 800c95c:	4602      	mov	r2, r0
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	1ad3      	subs	r3, r2, r3
 800c962:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c966:	d905      	bls.n	800c974 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800c968:	2303      	movs	r3, #3
 800c96a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2203      	movs	r2, #3
 800c970:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	68db      	ldr	r3, [r3, #12]
 800c97a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d0ea      	beq.n	800c958 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800c982:	7bfb      	ldrb	r3, [r7, #15]
}
 800c984:	4618      	mov	r0, r3
 800c986:	3710      	adds	r7, #16
 800c988:	46bd      	mov	sp, r7
 800c98a:	bd80      	pop	{r7, pc}

0800c98c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b084      	sub	sp, #16
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c994:	2300      	movs	r3, #0
 800c996:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800c998:	4b1a      	ldr	r3, [pc, #104]	; (800ca04 <RTC_ExitInitMode+0x78>)
 800c99a:	68db      	ldr	r3, [r3, #12]
 800c99c:	4a19      	ldr	r2, [pc, #100]	; (800ca04 <RTC_ExitInitMode+0x78>)
 800c99e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c9a2:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c9a4:	4b17      	ldr	r3, [pc, #92]	; (800ca04 <RTC_ExitInitMode+0x78>)
 800c9a6:	689b      	ldr	r3, [r3, #8]
 800c9a8:	f003 0320 	and.w	r3, r3, #32
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d10c      	bne.n	800c9ca <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f7ff ff95 	bl	800c8e0 <HAL_RTC_WaitForSynchro>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d01e      	beq.n	800c9fa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2203      	movs	r2, #3
 800c9c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c9c4:	2303      	movs	r3, #3
 800c9c6:	73fb      	strb	r3, [r7, #15]
 800c9c8:	e017      	b.n	800c9fa <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c9ca:	4b0e      	ldr	r3, [pc, #56]	; (800ca04 <RTC_ExitInitMode+0x78>)
 800c9cc:	689b      	ldr	r3, [r3, #8]
 800c9ce:	4a0d      	ldr	r2, [pc, #52]	; (800ca04 <RTC_ExitInitMode+0x78>)
 800c9d0:	f023 0320 	bic.w	r3, r3, #32
 800c9d4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f7ff ff82 	bl	800c8e0 <HAL_RTC_WaitForSynchro>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d005      	beq.n	800c9ee <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2203      	movs	r2, #3
 800c9e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c9ea:	2303      	movs	r3, #3
 800c9ec:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c9ee:	4b05      	ldr	r3, [pc, #20]	; (800ca04 <RTC_ExitInitMode+0x78>)
 800c9f0:	689b      	ldr	r3, [r3, #8]
 800c9f2:	4a04      	ldr	r2, [pc, #16]	; (800ca04 <RTC_ExitInitMode+0x78>)
 800c9f4:	f043 0320 	orr.w	r3, r3, #32
 800c9f8:	6093      	str	r3, [r2, #8]
  }

  return status;
 800c9fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3710      	adds	r7, #16
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}
 800ca04:	58004000 	.word	0x58004000

0800ca08 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800ca08:	b480      	push	{r7}
 800ca0a:	b085      	sub	sp, #20
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	4603      	mov	r3, r0
 800ca10:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800ca12:	2300      	movs	r3, #0
 800ca14:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800ca16:	79fb      	ldrb	r3, [r7, #7]
 800ca18:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800ca1a:	e005      	b.n	800ca28 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	3301      	adds	r3, #1
 800ca20:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800ca22:	7afb      	ldrb	r3, [r7, #11]
 800ca24:	3b0a      	subs	r3, #10
 800ca26:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800ca28:	7afb      	ldrb	r3, [r7, #11]
 800ca2a:	2b09      	cmp	r3, #9
 800ca2c:	d8f6      	bhi.n	800ca1c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	b2db      	uxtb	r3, r3
 800ca32:	011b      	lsls	r3, r3, #4
 800ca34:	b2da      	uxtb	r2, r3
 800ca36:	7afb      	ldrb	r3, [r7, #11]
 800ca38:	4313      	orrs	r3, r2
 800ca3a:	b2db      	uxtb	r3, r3
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3714      	adds	r7, #20
 800ca40:	46bd      	mov	sp, r7
 800ca42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca46:	4770      	bx	lr

0800ca48 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800ca48:	b480      	push	{r7}
 800ca4a:	b085      	sub	sp, #20
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	4603      	mov	r3, r0
 800ca50:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800ca52:	79fb      	ldrb	r3, [r7, #7]
 800ca54:	091b      	lsrs	r3, r3, #4
 800ca56:	b2db      	uxtb	r3, r3
 800ca58:	461a      	mov	r2, r3
 800ca5a:	0092      	lsls	r2, r2, #2
 800ca5c:	4413      	add	r3, r2
 800ca5e:	005b      	lsls	r3, r3, #1
 800ca60:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800ca62:	79fb      	ldrb	r3, [r7, #7]
 800ca64:	f003 030f 	and.w	r3, r3, #15
 800ca68:	b2da      	uxtb	r2, r3
 800ca6a:	7bfb      	ldrb	r3, [r7, #15]
 800ca6c:	4413      	add	r3, r2
 800ca6e:	b2db      	uxtb	r3, r3
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3714      	adds	r7, #20
 800ca74:	46bd      	mov	sp, r7
 800ca76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7a:	4770      	bx	lr

0800ca7c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b08a      	sub	sp, #40	; 0x28
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d101      	bne.n	800ca8e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	e07c      	b.n	800cb88 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ca94:	b2db      	uxtb	r3, r3
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d10c      	bne.n	800cab4 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	699b      	ldr	r3, [r3, #24]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d102      	bne.n	800caae <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2202      	movs	r2, #2
 800caac:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f7f7 f9e0 	bl	8003e74 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2203      	movs	r2, #3
 800cab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cabc:	6878      	ldr	r0, [r7, #4]
 800cabe:	f000 f867 	bl	800cb90 <HAL_SD_InitCard>
 800cac2:	4603      	mov	r3, r0
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d001      	beq.n	800cacc <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 800cac8:	2301      	movs	r3, #1
 800caca:	e05d      	b.n	800cb88 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800cacc:	f107 0308 	add.w	r3, r7, #8
 800cad0:	4619      	mov	r1, r3
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f001 f8ce 	bl	800dc74 <HAL_SD_GetCardStatus>
 800cad8:	4603      	mov	r3, r0
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d001      	beq.n	800cae2 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 800cade:	2301      	movs	r3, #1
 800cae0:	e052      	b.n	800cb88 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800cae2:	7e3b      	ldrb	r3, [r7, #24]
 800cae4:	b2db      	uxtb	r3, r3
 800cae6:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800cae8:	7e7b      	ldrb	r3, [r7, #25]
 800caea:	b2db      	uxtb	r3, r3
 800caec:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caf2:	2b01      	cmp	r3, #1
 800caf4:	d10a      	bne.n	800cb0c <HAL_SD_Init+0x90>
 800caf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d102      	bne.n	800cb02 <HAL_SD_Init+0x86>
 800cafc:	6a3b      	ldr	r3, [r7, #32]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d004      	beq.n	800cb0c <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cb08:	65da      	str	r2, [r3, #92]	; 0x5c
 800cb0a:	e00b      	b.n	800cb24 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb10:	2b01      	cmp	r3, #1
 800cb12:	d104      	bne.n	800cb1e <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cb1a:	65da      	str	r2, [r3, #92]	; 0x5c
 800cb1c:	e002      	b.n	800cb24 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2200      	movs	r2, #0
 800cb22:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	68db      	ldr	r3, [r3, #12]
 800cb28:	4619      	mov	r1, r3
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f001 f984 	bl	800de38 <HAL_SD_ConfigWideBusOperation>
 800cb30:	4603      	mov	r3, r0
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d001      	beq.n	800cb3a <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800cb36:	2301      	movs	r3, #1
 800cb38:	e026      	b.n	800cb88 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800cb3a:	f7f7 fd3d 	bl	80045b8 <HAL_GetTick>
 800cb3e:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cb40:	e011      	b.n	800cb66 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800cb42:	f7f7 fd39 	bl	80045b8 <HAL_GetTick>
 800cb46:	4602      	mov	r2, r0
 800cb48:	69fb      	ldr	r3, [r7, #28]
 800cb4a:	1ad3      	subs	r3, r2, r3
 800cb4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb50:	d109      	bne.n	800cb66 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cb58:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2201      	movs	r2, #1
 800cb5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800cb62:	2303      	movs	r3, #3
 800cb64:	e010      	b.n	800cb88 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f001 fa10 	bl	800df8c <HAL_SD_GetCardState>
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	2b04      	cmp	r3, #4
 800cb70:	d1e7      	bne.n	800cb42 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2200      	movs	r2, #0
 800cb76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2201      	movs	r2, #1
 800cb82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800cb86:	2300      	movs	r3, #0
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3728      	adds	r7, #40	; 0x28
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}

0800cb90 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cb90:	b5b0      	push	{r4, r5, r7, lr}
 800cb92:	b08e      	sub	sp, #56	; 0x38
 800cb94:	af04      	add	r7, sp, #16
 800cb96:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800cba0:	2300      	movs	r3, #0
 800cba2:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800cba4:	2300      	movs	r3, #0
 800cba6:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800cba8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800cbac:	f7fe fc7a 	bl	800b4a4 <HAL_RCCEx_GetPeriphCLKFreq>
 800cbb0:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800cbb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbb4:	0a1b      	lsrs	r3, r3, #8
 800cbb6:	4a40      	ldr	r2, [pc, #256]	; (800ccb8 <HAL_SD_InitCard+0x128>)
 800cbb8:	fba2 2303 	umull	r2, r3, r2, r3
 800cbbc:	091b      	lsrs	r3, r3, #4
 800cbbe:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	699b      	ldr	r3, [r3, #24]
 800cbc4:	2b02      	cmp	r3, #2
 800cbc6:	d107      	bne.n	800cbd8 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	681a      	ldr	r2, [r3, #0]
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f042 0210 	orr.w	r2, r2, #16
 800cbd6:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681d      	ldr	r5, [r3, #0]
 800cbdc:	466c      	mov	r4, sp
 800cbde:	f107 0314 	add.w	r3, r7, #20
 800cbe2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cbe6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cbea:	f107 0308 	add.w	r3, r7, #8
 800cbee:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cbf0:	4628      	mov	r0, r5
 800cbf2:	f004 f9f5 	bl	8010fe0 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f004 fa38 	bl	8011070 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800cc00:	69bb      	ldr	r3, [r7, #24]
 800cc02:	005b      	lsls	r3, r3, #1
 800cc04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc06:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc0a:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 800cc0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d008      	beq.n	800cc24 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800cc12:	4a2a      	ldr	r2, [pc, #168]	; (800ccbc <HAL_SD_InitCard+0x12c>)
 800cc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc16:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc1a:	3301      	adds	r3, #1
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f7f7 fcd7 	bl	80045d0 <HAL_Delay>
 800cc22:	e002      	b.n	800cc2a <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 800cc24:	2002      	movs	r0, #2
 800cc26:	f7f7 fcd3 	bl	80045d0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f001 fa8c 	bl	800e148 <SD_PowerON>
 800cc30:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc32:	6a3b      	ldr	r3, [r7, #32]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d00b      	beq.n	800cc50 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2201      	movs	r2, #1
 800cc3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc44:	6a3b      	ldr	r3, [r7, #32]
 800cc46:	431a      	orrs	r2, r3
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	e02e      	b.n	800ccae <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f001 f9bb 	bl	800dfcc <SD_InitCard>
 800cc56:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc58:	6a3b      	ldr	r3, [r7, #32]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d00b      	beq.n	800cc76 <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2201      	movs	r2, #1
 800cc62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc6a:	6a3b      	ldr	r3, [r7, #32]
 800cc6c:	431a      	orrs	r2, r3
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cc72:	2301      	movs	r3, #1
 800cc74:	e01b      	b.n	800ccae <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f004 fa8c 	bl	801119c <SDMMC_CmdBlockLength>
 800cc84:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc86:	6a3b      	ldr	r3, [r7, #32]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d00f      	beq.n	800ccac <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	4a0b      	ldr	r2, [pc, #44]	; (800ccc0 <HAL_SD_InitCard+0x130>)
 800cc92:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc98:	6a3b      	ldr	r3, [r7, #32]
 800cc9a:	431a      	orrs	r2, r3
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2201      	movs	r2, #1
 800cca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cca8:	2301      	movs	r3, #1
 800ccaa:	e000      	b.n	800ccae <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 800ccac:	2300      	movs	r3, #0
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3728      	adds	r7, #40	; 0x28
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bdb0      	pop	{r4, r5, r7, pc}
 800ccb6:	bf00      	nop
 800ccb8:	014f8b59 	.word	0x014f8b59
 800ccbc:	00012110 	.word	0x00012110
 800ccc0:	1fe00fff 	.word	0x1fe00fff

0800ccc4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b092      	sub	sp, #72	; 0x48
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	60f8      	str	r0, [r7, #12]
 800cccc:	60b9      	str	r1, [r7, #8]
 800ccce:	607a      	str	r2, [r7, #4]
 800ccd0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ccd2:	f7f7 fc71 	bl	80045b8 <HAL_GetTick>
 800ccd6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d107      	bne.n	800ccf6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ccf2:	2301      	movs	r3, #1
 800ccf4:	e167      	b.n	800cfc6 <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ccfc:	b2db      	uxtb	r3, r3
 800ccfe:	2b01      	cmp	r3, #1
 800cd00:	f040 815a 	bne.w	800cfb8 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	2200      	movs	r2, #0
 800cd08:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cd0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	441a      	add	r2, r3
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d907      	bls.n	800cd28 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd1c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800cd24:	2301      	movs	r3, #1
 800cd26:	e14e      	b.n	800cfc6 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	2203      	movs	r2, #3
 800cd2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	2200      	movs	r2, #0
 800cd36:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd3c:	2b01      	cmp	r3, #1
 800cd3e:	d002      	beq.n	800cd46 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800cd40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd42:	025b      	lsls	r3, r3, #9
 800cd44:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cd46:	f04f 33ff 	mov.w	r3, #4294967295
 800cd4a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	025b      	lsls	r3, r3, #9
 800cd50:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cd52:	2390      	movs	r3, #144	; 0x90
 800cd54:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cd56:	2302      	movs	r3, #2
 800cd58:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	f107 0214 	add.w	r2, r7, #20
 800cd6a:	4611      	mov	r1, r2
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f004 f9e9 	bl	8011144 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	68da      	ldr	r2, [r3, #12]
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cd80:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	2b01      	cmp	r3, #1
 800cd86:	d90a      	bls.n	800cd9e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	2202      	movs	r2, #2
 800cd8c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cd94:	4618      	mov	r0, r3
 800cd96:	f004 fa47 	bl	8011228 <SDMMC_CmdReadMultiBlock>
 800cd9a:	6478      	str	r0, [r7, #68]	; 0x44
 800cd9c:	e009      	b.n	800cdb2 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	2201      	movs	r2, #1
 800cda2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f004 fa19 	bl	80111e2 <SDMMC_CmdReadSingleBlock>
 800cdb0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cdb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d012      	beq.n	800cdde <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	4a84      	ldr	r2, [pc, #528]	; (800cfd0 <HAL_SD_ReadBlocks+0x30c>)
 800cdbe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cdc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cdc6:	431a      	orrs	r2, r3
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	2201      	movs	r2, #1
 800cdd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cdda:	2301      	movs	r3, #1
 800cddc:	e0f3      	b.n	800cfc6 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800cdde:	69bb      	ldr	r3, [r7, #24]
 800cde0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800cde2:	e058      	b.n	800ce96 <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d033      	beq.n	800ce5a <HAL_SD_ReadBlocks+0x196>
 800cdf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdf4:	2b1f      	cmp	r3, #31
 800cdf6:	d930      	bls.n	800ce5a <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	643b      	str	r3, [r7, #64]	; 0x40
 800cdfc:	e027      	b.n	800ce4e <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	4618      	mov	r0, r3
 800ce04:	f004 f916 	bl	8011034 <SDMMC_ReadFIFO>
 800ce08:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800ce0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce0c:	b2da      	uxtb	r2, r3
 800ce0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce10:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800ce12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce14:	3301      	adds	r3, #1
 800ce16:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800ce18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce1a:	0a1b      	lsrs	r3, r3, #8
 800ce1c:	b2da      	uxtb	r2, r3
 800ce1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce20:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800ce22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce24:	3301      	adds	r3, #1
 800ce26:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800ce28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce2a:	0c1b      	lsrs	r3, r3, #16
 800ce2c:	b2da      	uxtb	r2, r3
 800ce2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce30:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800ce32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce34:	3301      	adds	r3, #1
 800ce36:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800ce38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce3a:	0e1b      	lsrs	r3, r3, #24
 800ce3c:	b2da      	uxtb	r2, r3
 800ce3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce40:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800ce42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce44:	3301      	adds	r3, #1
 800ce46:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 800ce48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce4a:	3301      	adds	r3, #1
 800ce4c:	643b      	str	r3, [r7, #64]	; 0x40
 800ce4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce50:	2b07      	cmp	r3, #7
 800ce52:	d9d4      	bls.n	800cdfe <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800ce54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce56:	3b20      	subs	r3, #32
 800ce58:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800ce5a:	f7f7 fbad 	bl	80045b8 <HAL_GetTick>
 800ce5e:	4602      	mov	r2, r0
 800ce60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce62:	1ad3      	subs	r3, r2, r3
 800ce64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ce66:	429a      	cmp	r2, r3
 800ce68:	d902      	bls.n	800ce70 <HAL_SD_ReadBlocks+0x1ac>
 800ce6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d112      	bne.n	800ce96 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	4a56      	ldr	r2, [pc, #344]	; (800cfd0 <HAL_SD_ReadBlocks+0x30c>)
 800ce76:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce7c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	2201      	movs	r2, #1
 800ce88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800ce92:	2303      	movs	r3, #3
 800ce94:	e097      	b.n	800cfc6 <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce9c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d09f      	beq.n	800cde4 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	68da      	ldr	r2, [r3, #12]
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ceb2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ceba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d022      	beq.n	800cf08 <HAL_SD_ReadBlocks+0x244>
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	2b01      	cmp	r3, #1
 800cec6:	d91f      	bls.n	800cf08 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cecc:	2b03      	cmp	r3, #3
 800cece:	d01b      	beq.n	800cf08 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	4618      	mov	r0, r3
 800ced6:	f004 fa11 	bl	80112fc <SDMMC_CmdStopTransfer>
 800ceda:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800cedc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d012      	beq.n	800cf08 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	4a3a      	ldr	r2, [pc, #232]	; (800cfd0 <HAL_SD_ReadBlocks+0x30c>)
 800cee8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ceee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cef0:	431a      	orrs	r2, r3
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	2201      	movs	r2, #1
 800cefa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	2200      	movs	r2, #0
 800cf02:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800cf04:	2301      	movs	r3, #1
 800cf06:	e05e      	b.n	800cfc6 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf0e:	f003 0308 	and.w	r3, r3, #8
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d012      	beq.n	800cf3c <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	4a2d      	ldr	r2, [pc, #180]	; (800cfd0 <HAL_SD_ReadBlocks+0x30c>)
 800cf1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf22:	f043 0208 	orr.w	r2, r3, #8
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	2201      	movs	r2, #1
 800cf2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	2200      	movs	r2, #0
 800cf36:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cf38:	2301      	movs	r3, #1
 800cf3a:	e044      	b.n	800cfc6 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf42:	f003 0302 	and.w	r3, r3, #2
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d012      	beq.n	800cf70 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	4a20      	ldr	r2, [pc, #128]	; (800cfd0 <HAL_SD_ReadBlocks+0x30c>)
 800cf50:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf56:	f043 0202 	orr.w	r2, r3, #2
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	2201      	movs	r2, #1
 800cf62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	2200      	movs	r2, #0
 800cf6a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	e02a      	b.n	800cfc6 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf76:	f003 0320 	and.w	r3, r3, #32
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d012      	beq.n	800cfa4 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	4a13      	ldr	r2, [pc, #76]	; (800cfd0 <HAL_SD_ReadBlocks+0x30c>)
 800cf84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf8a:	f043 0220 	orr.w	r2, r3, #32
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	2201      	movs	r2, #1
 800cf96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	e010      	b.n	800cfc6 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	4a0a      	ldr	r2, [pc, #40]	; (800cfd4 <HAL_SD_ReadBlocks+0x310>)
 800cfaa:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	2201      	movs	r2, #1
 800cfb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	e006      	b.n	800cfc6 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfbc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cfc4:	2301      	movs	r3, #1
  }
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3748      	adds	r7, #72	; 0x48
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}
 800cfce:	bf00      	nop
 800cfd0:	1fe00fff 	.word	0x1fe00fff
 800cfd4:	18000f3a 	.word	0x18000f3a

0800cfd8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b092      	sub	sp, #72	; 0x48
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	60f8      	str	r0, [r7, #12]
 800cfe0:	60b9      	str	r1, [r7, #8]
 800cfe2:	607a      	str	r2, [r7, #4]
 800cfe4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cfe6:	f7f7 fae7 	bl	80045b8 <HAL_GetTick>
 800cfea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d107      	bne.n	800d00a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cffe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d006:	2301      	movs	r3, #1
 800d008:	e16b      	b.n	800d2e2 <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d010:	b2db      	uxtb	r3, r3
 800d012:	2b01      	cmp	r3, #1
 800d014:	f040 815e 	bne.w	800d2d4 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	2200      	movs	r2, #0
 800d01c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d01e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	441a      	add	r2, r3
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d028:	429a      	cmp	r2, r3
 800d02a:	d907      	bls.n	800d03c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d030:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d038:	2301      	movs	r3, #1
 800d03a:	e152      	b.n	800d2e2 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	2203      	movs	r2, #3
 800d040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	2200      	movs	r2, #0
 800d04a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d050:	2b01      	cmp	r3, #1
 800d052:	d002      	beq.n	800d05a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800d054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d056:	025b      	lsls	r3, r3, #9
 800d058:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d05a:	f04f 33ff 	mov.w	r3, #4294967295
 800d05e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	025b      	lsls	r3, r3, #9
 800d064:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d066:	2390      	movs	r3, #144	; 0x90
 800d068:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d06a:	2300      	movs	r3, #0
 800d06c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d06e:	2300      	movs	r3, #0
 800d070:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d072:	2300      	movs	r3, #0
 800d074:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	f107 0218 	add.w	r2, r7, #24
 800d07e:	4611      	mov	r1, r2
 800d080:	4618      	mov	r0, r3
 800d082:	f004 f85f 	bl	8011144 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	68da      	ldr	r2, [r3, #12]
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d094:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	2b01      	cmp	r3, #1
 800d09a:	d90a      	bls.n	800d0b2 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	2220      	movs	r2, #32
 800d0a0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f004 f903 	bl	80112b4 <SDMMC_CmdWriteMultiBlock>
 800d0ae:	6478      	str	r0, [r7, #68]	; 0x44
 800d0b0:	e009      	b.n	800d0c6 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	2210      	movs	r2, #16
 800d0b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f004 f8d5 	bl	801126e <SDMMC_CmdWriteSingleBlock>
 800d0c4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d0c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d012      	beq.n	800d0f2 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	4a86      	ldr	r2, [pc, #536]	; (800d2ec <HAL_SD_WriteBlocks+0x314>)
 800d0d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0da:	431a      	orrs	r2, r3
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	2201      	movs	r2, #1
 800d0e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	e0f7      	b.n	800d2e2 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800d0f2:	69fb      	ldr	r3, [r7, #28]
 800d0f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d0f6:	e05c      	b.n	800d1b2 <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d102:	2b00      	cmp	r3, #0
 800d104:	d037      	beq.n	800d176 <HAL_SD_WriteBlocks+0x19e>
 800d106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d108:	2b1f      	cmp	r3, #31
 800d10a:	d934      	bls.n	800d176 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800d10c:	2300      	movs	r3, #0
 800d10e:	643b      	str	r3, [r7, #64]	; 0x40
 800d110:	e02b      	b.n	800d16a <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800d112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d114:	781b      	ldrb	r3, [r3, #0]
 800d116:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d11a:	3301      	adds	r3, #1
 800d11c:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800d11e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	021a      	lsls	r2, r3, #8
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	4313      	orrs	r3, r2
 800d128:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d12a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d12c:	3301      	adds	r3, #1
 800d12e:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800d130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d132:	781b      	ldrb	r3, [r3, #0]
 800d134:	041a      	lsls	r2, r3, #16
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	4313      	orrs	r3, r2
 800d13a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d13c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d13e:	3301      	adds	r3, #1
 800d140:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800d142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d144:	781b      	ldrb	r3, [r3, #0]
 800d146:	061a      	lsls	r2, r3, #24
 800d148:	697b      	ldr	r3, [r7, #20]
 800d14a:	4313      	orrs	r3, r2
 800d14c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d14e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d150:	3301      	adds	r3, #1
 800d152:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	f107 0214 	add.w	r2, r7, #20
 800d15c:	4611      	mov	r1, r2
 800d15e:	4618      	mov	r0, r3
 800d160:	f003 ff75 	bl	801104e <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800d164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d166:	3301      	adds	r3, #1
 800d168:	643b      	str	r3, [r7, #64]	; 0x40
 800d16a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d16c:	2b07      	cmp	r3, #7
 800d16e:	d9d0      	bls.n	800d112 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800d170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d172:	3b20      	subs	r3, #32
 800d174:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d176:	f7f7 fa1f 	bl	80045b8 <HAL_GetTick>
 800d17a:	4602      	mov	r2, r0
 800d17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d17e:	1ad3      	subs	r3, r2, r3
 800d180:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d182:	429a      	cmp	r2, r3
 800d184:	d902      	bls.n	800d18c <HAL_SD_WriteBlocks+0x1b4>
 800d186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d112      	bne.n	800d1b2 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	4a56      	ldr	r2, [pc, #344]	; (800d2ec <HAL_SD_WriteBlocks+0x314>)
 800d192:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d19a:	431a      	orrs	r2, r3
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	2201      	movs	r2, #1
 800d1a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800d1ae:	2303      	movs	r3, #3
 800d1b0:	e097      	b.n	800d2e2 <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1b8:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d09b      	beq.n	800d0f8 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	68da      	ldr	r2, [r3, #12]
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d1ce:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d022      	beq.n	800d224 <HAL_SD_WriteBlocks+0x24c>
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	2b01      	cmp	r3, #1
 800d1e2:	d91f      	bls.n	800d224 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1e8:	2b03      	cmp	r3, #3
 800d1ea:	d01b      	beq.n	800d224 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f004 f883 	bl	80112fc <SDMMC_CmdStopTransfer>
 800d1f6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800d1f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d012      	beq.n	800d224 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	4a3a      	ldr	r2, [pc, #232]	; (800d2ec <HAL_SD_WriteBlocks+0x314>)
 800d204:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d20a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d20c:	431a      	orrs	r2, r3
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	2201      	movs	r2, #1
 800d216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	2200      	movs	r2, #0
 800d21e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800d220:	2301      	movs	r3, #1
 800d222:	e05e      	b.n	800d2e2 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d22a:	f003 0308 	and.w	r3, r3, #8
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d012      	beq.n	800d258 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	4a2d      	ldr	r2, [pc, #180]	; (800d2ec <HAL_SD_WriteBlocks+0x314>)
 800d238:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d23e:	f043 0208 	orr.w	r2, r3, #8
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	2201      	movs	r2, #1
 800d24a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	2200      	movs	r2, #0
 800d252:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d254:	2301      	movs	r3, #1
 800d256:	e044      	b.n	800d2e2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d25e:	f003 0302 	and.w	r3, r3, #2
 800d262:	2b00      	cmp	r3, #0
 800d264:	d012      	beq.n	800d28c <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	4a20      	ldr	r2, [pc, #128]	; (800d2ec <HAL_SD_WriteBlocks+0x314>)
 800d26c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d272:	f043 0202 	orr.w	r2, r3, #2
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	2201      	movs	r2, #1
 800d27e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2200      	movs	r2, #0
 800d286:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d288:	2301      	movs	r3, #1
 800d28a:	e02a      	b.n	800d2e2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d292:	f003 0310 	and.w	r3, r3, #16
 800d296:	2b00      	cmp	r3, #0
 800d298:	d012      	beq.n	800d2c0 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	4a13      	ldr	r2, [pc, #76]	; (800d2ec <HAL_SD_WriteBlocks+0x314>)
 800d2a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2a6:	f043 0210 	orr.w	r2, r3, #16
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	2201      	movs	r2, #1
 800d2b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d2bc:	2301      	movs	r3, #1
 800d2be:	e010      	b.n	800d2e2 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	4a0a      	ldr	r2, [pc, #40]	; (800d2f0 <HAL_SD_WriteBlocks+0x318>)
 800d2c6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	2201      	movs	r2, #1
 800d2cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	e006      	b.n	800d2e2 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d2e0:	2301      	movs	r3, #1
  }
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3748      	adds	r7, #72	; 0x48
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}
 800d2ea:	bf00      	nop
 800d2ec:	1fe00fff 	.word	0x1fe00fff
 800d2f0:	18000f3a 	.word	0x18000f3a

0800d2f4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b08c      	sub	sp, #48	; 0x30
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	60f8      	str	r0, [r7, #12]
 800d2fc:	60b9      	str	r1, [r7, #8]
 800d2fe:	607a      	str	r2, [r7, #4]
 800d300:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d107      	bne.n	800d31c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d310:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d318:	2301      	movs	r3, #1
 800d31a:	e08d      	b.n	800d438 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d322:	b2db      	uxtb	r3, r3
 800d324:	2b01      	cmp	r3, #1
 800d326:	f040 8086 	bne.w	800d436 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	2200      	movs	r2, #0
 800d32e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d330:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	441a      	add	r2, r3
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d33a:	429a      	cmp	r2, r3
 800d33c:	d907      	bls.n	800d34e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d342:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d34a:	2301      	movs	r3, #1
 800d34c:	e074      	b.n	800d438 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	2203      	movs	r2, #3
 800d352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	2200      	movs	r2, #0
 800d35c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	68ba      	ldr	r2, [r7, #8]
 800d362:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	025a      	lsls	r2, r3, #9
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d370:	2b01      	cmp	r3, #1
 800d372:	d002      	beq.n	800d37a <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d376:	025b      	lsls	r3, r3, #9
 800d378:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d37a:	f04f 33ff 	mov.w	r3, #4294967295
 800d37e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	025b      	lsls	r3, r3, #9
 800d384:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d386:	2390      	movs	r3, #144	; 0x90
 800d388:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d38a:	2302      	movs	r3, #2
 800d38c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d38e:	2300      	movs	r3, #0
 800d390:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d392:	2300      	movs	r3, #0
 800d394:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	f107 0210 	add.w	r2, r7, #16
 800d39e:	4611      	mov	r1, r2
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f003 fecf 	bl	8011144 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	68da      	ldr	r2, [r3, #12]
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d3b4:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	68ba      	ldr	r2, [r7, #8]
 800d3bc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	2201      	movs	r2, #1
 800d3c4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	2b01      	cmp	r3, #1
 800d3ca:	d90a      	bls.n	800d3e2 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	2282      	movs	r2, #130	; 0x82
 800d3d0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f003 ff25 	bl	8011228 <SDMMC_CmdReadMultiBlock>
 800d3de:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d3e0:	e009      	b.n	800d3f6 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	2281      	movs	r2, #129	; 0x81
 800d3e6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f003 fef7 	bl	80111e2 <SDMMC_CmdReadSingleBlock>
 800d3f4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d012      	beq.n	800d422 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	4a0f      	ldr	r2, [pc, #60]	; (800d440 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d402:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d40a:	431a      	orrs	r2, r3
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	2201      	movs	r2, #1
 800d414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	2200      	movs	r2, #0
 800d41c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d41e:	2301      	movs	r3, #1
 800d420:	e00a      	b.n	800d438 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d430:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800d432:	2300      	movs	r3, #0
 800d434:	e000      	b.n	800d438 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d436:	2302      	movs	r3, #2
  }
}
 800d438:	4618      	mov	r0, r3
 800d43a:	3730      	adds	r7, #48	; 0x30
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}
 800d440:	1fe00fff 	.word	0x1fe00fff

0800d444 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b08c      	sub	sp, #48	; 0x30
 800d448:	af00      	add	r7, sp, #0
 800d44a:	60f8      	str	r0, [r7, #12]
 800d44c:	60b9      	str	r1, [r7, #8]
 800d44e:	607a      	str	r2, [r7, #4]
 800d450:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d107      	bne.n	800d46c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d460:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d468:	2301      	movs	r3, #1
 800d46a:	e08d      	b.n	800d588 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d472:	b2db      	uxtb	r3, r3
 800d474:	2b01      	cmp	r3, #1
 800d476:	f040 8086 	bne.w	800d586 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	2200      	movs	r2, #0
 800d47e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	441a      	add	r2, r3
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d48a:	429a      	cmp	r2, r3
 800d48c:	d907      	bls.n	800d49e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d492:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d49a:	2301      	movs	r3, #1
 800d49c:	e074      	b.n	800d588 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	2203      	movs	r2, #3
 800d4a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	68ba      	ldr	r2, [r7, #8]
 800d4b2:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	025a      	lsls	r2, r3, #9
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	625a      	str	r2, [r3, #36]	; 0x24

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4c0:	2b01      	cmp	r3, #1
 800d4c2:	d002      	beq.n	800d4ca <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d4c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4c6:	025b      	lsls	r3, r3, #9
 800d4c8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d4ca:	f04f 33ff 	mov.w	r3, #4294967295
 800d4ce:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	025b      	lsls	r3, r3, #9
 800d4d4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d4d6:	2390      	movs	r3, #144	; 0x90
 800d4d8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	f107 0210 	add.w	r2, r7, #16
 800d4ee:	4611      	mov	r1, r2
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	f003 fe27 	bl	8011144 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	68da      	ldr	r2, [r3, #12]
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d504:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	68ba      	ldr	r2, [r7, #8]
 800d50c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	2201      	movs	r2, #1
 800d514:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	2b01      	cmp	r3, #1
 800d51a:	d90a      	bls.n	800d532 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	22a0      	movs	r2, #160	; 0xa0
 800d520:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d528:	4618      	mov	r0, r3
 800d52a:	f003 fec3 	bl	80112b4 <SDMMC_CmdWriteMultiBlock>
 800d52e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d530:	e009      	b.n	800d546 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	2290      	movs	r2, #144	; 0x90
 800d536:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d53e:	4618      	mov	r0, r3
 800d540:	f003 fe95 	bl	801126e <SDMMC_CmdWriteSingleBlock>
 800d544:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d012      	beq.n	800d572 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	4a0f      	ldr	r2, [pc, #60]	; (800d590 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800d552:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d55a:	431a      	orrs	r2, r3
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	2201      	movs	r2, #1
 800d564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	2200      	movs	r2, #0
 800d56c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d56e:	2301      	movs	r3, #1
 800d570:	e00a      	b.n	800d588 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800d580:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d582:	2300      	movs	r3, #0
 800d584:	e000      	b.n	800d588 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d586:	2302      	movs	r3, #2
  }
}
 800d588:	4618      	mov	r0, r3
 800d58a:	3730      	adds	r7, #48	; 0x30
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}
 800d590:	1fe00fff 	.word	0x1fe00fff

0800d594 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b084      	sub	sp, #16
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5a0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d008      	beq.n	800d5c2 <HAL_SD_IRQHandler+0x2e>
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	f003 0308 	and.w	r3, r3, #8
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d003      	beq.n	800d5c2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f001 f92a 	bl	800e814 <SD_Read_IT>
 800d5c0:	e19a      	b.n	800d8f8 <HAL_SD_IRQHandler+0x364>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	f000 80ac 	beq.w	800d72a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d5da:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681a      	ldr	r2, [r3, #0]
 800d5e6:	4b9d      	ldr	r3, [pc, #628]	; (800d85c <HAL_SD_IRQHandler+0x2c8>)
 800d5e8:	400b      	ands	r3, r1
 800d5ea:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d5fa:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	68da      	ldr	r2, [r3, #12]
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d60a:	60da      	str	r2, [r3, #12]

    if((context & SD_CONTEXT_IT) != 0U)
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	f003 0308 	and.w	r3, r3, #8
 800d612:	2b00      	cmp	r3, #0
 800d614:	d038      	beq.n	800d688 <HAL_SD_IRQHandler+0xf4>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	f003 0302 	and.w	r3, r3, #2
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d104      	bne.n	800d62a <HAL_SD_IRQHandler+0x96>
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	f003 0320 	and.w	r3, r3, #32
 800d626:	2b00      	cmp	r3, #0
 800d628:	d011      	beq.n	800d64e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	4618      	mov	r0, r3
 800d630:	f003 fe64 	bl	80112fc <SDMMC_CmdStopTransfer>
 800d634:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d008      	beq.n	800d64e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	431a      	orrs	r2, r3
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d648:	6878      	ldr	r0, [r7, #4]
 800d64a:	f000 f959 	bl	800d900 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	4a83      	ldr	r2, [pc, #524]	; (800d860 <HAL_SD_IRQHandler+0x2cc>)
 800d654:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2201      	movs	r2, #1
 800d65a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	2200      	movs	r2, #0
 800d662:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	f003 0301 	and.w	r3, r3, #1
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d104      	bne.n	800d678 <HAL_SD_IRQHandler+0xe4>
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	f003 0302 	and.w	r3, r3, #2
 800d674:	2b00      	cmp	r3, #0
 800d676:	d003      	beq.n	800d680 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	f005 fe55 	bl	8013328 <HAL_SD_RxCpltCallback>
 800d67e:	e13b      	b.n	800d8f8 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f005 fe47 	bl	8013314 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d686:	e137      	b.n	800d8f8 <HAL_SD_IRQHandler+0x364>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d68e:	2b00      	cmp	r3, #0
 800d690:	f000 8132 	beq.w	800d8f8 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	2200      	movs	r2, #0
 800d69a:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	f003 0302 	and.w	r3, r3, #2
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d104      	bne.n	800d6c0 <HAL_SD_IRQHandler+0x12c>
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	f003 0320 	and.w	r3, r3, #32
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d011      	beq.n	800d6e4 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f003 fe19 	bl	80112fc <SDMMC_CmdStopTransfer>
 800d6ca:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d008      	beq.n	800d6e4 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6d6:	68bb      	ldr	r3, [r7, #8]
 800d6d8:	431a      	orrs	r2, r3
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f000 f90e 	bl	800d900 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2201      	movs	r2, #1
 800d6e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	f003 0310 	and.w	r3, r3, #16
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d104      	bne.n	800d706 <HAL_SD_IRQHandler+0x172>
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	f003 0320 	and.w	r3, r3, #32
 800d702:	2b00      	cmp	r3, #0
 800d704:	d002      	beq.n	800d70c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f005 fe04 	bl	8013314 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	f003 0301 	and.w	r3, r3, #1
 800d712:	2b00      	cmp	r3, #0
 800d714:	d105      	bne.n	800d722 <HAL_SD_IRQHandler+0x18e>
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	f003 0302 	and.w	r3, r3, #2
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	f000 80eb 	beq.w	800d8f8 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800d722:	6878      	ldr	r0, [r7, #4]
 800d724:	f005 fe00 	bl	8013328 <HAL_SD_RxCpltCallback>
}
 800d728:	e0e6      	b.n	800d8f8 <HAL_SD_IRQHandler+0x364>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d730:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d734:	2b00      	cmp	r3, #0
 800d736:	d008      	beq.n	800d74a <HAL_SD_IRQHandler+0x1b6>
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	f003 0308 	and.w	r3, r3, #8
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d003      	beq.n	800d74a <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 800d742:	6878      	ldr	r0, [r7, #4]
 800d744:	f001 f8ac 	bl	800e8a0 <SD_Write_IT>
 800d748:	e0d6      	b.n	800d8f8 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d750:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d754:	2b00      	cmp	r3, #0
 800d756:	f000 80a2 	beq.w	800d89e <HAL_SD_IRQHandler+0x30a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d760:	f003 0302 	and.w	r3, r3, #2
 800d764:	2b00      	cmp	r3, #0
 800d766:	d005      	beq.n	800d774 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d76c:	f043 0202 	orr.w	r2, r3, #2
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d77a:	f003 0308 	and.w	r3, r3, #8
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d005      	beq.n	800d78e <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d786:	f043 0208 	orr.w	r2, r3, #8
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d794:	f003 0320 	and.w	r3, r3, #32
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d005      	beq.n	800d7a8 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7a0:	f043 0220 	orr.w	r2, r3, #32
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7ae:	f003 0310 	and.w	r3, r3, #16
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d005      	beq.n	800d7c2 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7ba:	f043 0210 	orr.w	r2, r3, #16
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	4a26      	ldr	r2, [pc, #152]	; (800d860 <HAL_SD_IRQHandler+0x2cc>)
 800d7c8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d7d8:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	68da      	ldr	r2, [r3, #12]
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d7e8:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d7f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	68da      	ldr	r2, [r3, #12]
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d808:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	4618      	mov	r0, r3
 800d810:	f003 fd74 	bl	80112fc <SDMMC_CmdStopTransfer>
 800d814:	4602      	mov	r2, r0
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d81a:	431a      	orrs	r2, r3
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	68da      	ldr	r2, [r3, #12]
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d82e:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d838:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	f003 0308 	and.w	r3, r3, #8
 800d840:	2b00      	cmp	r3, #0
 800d842:	d00f      	beq.n	800d864 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2201      	movs	r2, #1
 800d848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2200      	movs	r2, #0
 800d850:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	f000 f854 	bl	800d900 <HAL_SD_ErrorCallback>
}
 800d858:	e04e      	b.n	800d8f8 <HAL_SD_IRQHandler+0x364>
 800d85a:	bf00      	nop
 800d85c:	ffff3ec5 	.word	0xffff3ec5
 800d860:	18000f3a 	.word	0x18000f3a
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d044      	beq.n	800d8f8 <HAL_SD_IRQHandler+0x364>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d872:	2b00      	cmp	r3, #0
 800d874:	d040      	beq.n	800d8f8 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d884:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	2200      	movs	r2, #0
 800d88c:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	2201      	movs	r2, #1
 800d892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f000 f832 	bl	800d900 <HAL_SD_ErrorCallback>
}
 800d89c:	e02c      	b.n	800d8f8 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d025      	beq.n	800d8f8 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8b4:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8bc:	f003 0304 	and.w	r3, r3, #4
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d10c      	bne.n	800d8de <HAL_SD_IRQHandler+0x34a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	f003 0320 	and.w	r3, r3, #32
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d003      	beq.n	800d8d6 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800d8ce:	6878      	ldr	r0, [r7, #4]
 800d8d0:	f001 f84e 	bl	800e970 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800d8d4:	e010      	b.n	800d8f8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800d8d6:	6878      	ldr	r0, [r7, #4]
 800d8d8:	f001 f836 	bl	800e948 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800d8dc:	e00c      	b.n	800d8f8 <HAL_SD_IRQHandler+0x364>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	f003 0320 	and.w	r3, r3, #32
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d003      	beq.n	800d8f0 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800d8e8:	6878      	ldr	r0, [r7, #4]
 800d8ea:	f001 f837 	bl	800e95c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800d8ee:	e003      	b.n	800d8f8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800d8f0:	6878      	ldr	r0, [r7, #4]
 800d8f2:	f001 f81f 	bl	800e934 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800d8f6:	e7ff      	b.n	800d8f8 <HAL_SD_IRQHandler+0x364>
 800d8f8:	bf00      	nop
 800d8fa:	3710      	adds	r7, #16
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	bd80      	pop	{r7, pc}

0800d900 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d900:	b480      	push	{r7}
 800d902:	b083      	sub	sp, #12
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d908:	bf00      	nop
 800d90a:	370c      	adds	r7, #12
 800d90c:	46bd      	mov	sp, r7
 800d90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d912:	4770      	bx	lr

0800d914 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800d914:	b480      	push	{r7}
 800d916:	b083      	sub	sp, #12
 800d918:	af00      	add	r7, sp, #0
 800d91a:	4603      	mov	r3, r0
 800d91c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 800d91e:	bf00      	nop
 800d920:	370c      	adds	r7, #12
 800d922:	46bd      	mov	sp, r7
 800d924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d928:	4770      	bx	lr
	...

0800d92c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d92c:	b480      	push	{r7}
 800d92e:	b083      	sub	sp, #12
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
 800d934:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d93a:	0f9b      	lsrs	r3, r3, #30
 800d93c:	b2da      	uxtb	r2, r3
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d946:	0e9b      	lsrs	r3, r3, #26
 800d948:	b2db      	uxtb	r3, r3
 800d94a:	f003 030f 	and.w	r3, r3, #15
 800d94e:	b2da      	uxtb	r2, r3
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d958:	0e1b      	lsrs	r3, r3, #24
 800d95a:	b2db      	uxtb	r3, r3
 800d95c:	f003 0303 	and.w	r3, r3, #3
 800d960:	b2da      	uxtb	r2, r3
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d96a:	0c1b      	lsrs	r3, r3, #16
 800d96c:	b2da      	uxtb	r2, r3
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d976:	0a1b      	lsrs	r3, r3, #8
 800d978:	b2da      	uxtb	r2, r3
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d982:	b2da      	uxtb	r2, r3
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d98c:	0d1b      	lsrs	r3, r3, #20
 800d98e:	b29a      	uxth	r2, r3
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d998:	0c1b      	lsrs	r3, r3, #16
 800d99a:	b2db      	uxtb	r3, r3
 800d99c:	f003 030f 	and.w	r3, r3, #15
 800d9a0:	b2da      	uxtb	r2, r3
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9aa:	0bdb      	lsrs	r3, r3, #15
 800d9ac:	b2db      	uxtb	r3, r3
 800d9ae:	f003 0301 	and.w	r3, r3, #1
 800d9b2:	b2da      	uxtb	r2, r3
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9bc:	0b9b      	lsrs	r3, r3, #14
 800d9be:	b2db      	uxtb	r3, r3
 800d9c0:	f003 0301 	and.w	r3, r3, #1
 800d9c4:	b2da      	uxtb	r2, r3
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9ce:	0b5b      	lsrs	r3, r3, #13
 800d9d0:	b2db      	uxtb	r3, r3
 800d9d2:	f003 0301 	and.w	r3, r3, #1
 800d9d6:	b2da      	uxtb	r2, r3
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9e0:	0b1b      	lsrs	r3, r3, #12
 800d9e2:	b2db      	uxtb	r3, r3
 800d9e4:	f003 0301 	and.w	r3, r3, #1
 800d9e8:	b2da      	uxtb	r2, r3
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d9ee:	683b      	ldr	r3, [r7, #0]
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d163      	bne.n	800dac4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da00:	009a      	lsls	r2, r3, #2
 800da02:	f640 73fc 	movw	r3, #4092	; 0xffc
 800da06:	4013      	ands	r3, r2
 800da08:	687a      	ldr	r2, [r7, #4]
 800da0a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800da0c:	0f92      	lsrs	r2, r2, #30
 800da0e:	431a      	orrs	r2, r3
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da18:	0edb      	lsrs	r3, r3, #27
 800da1a:	b2db      	uxtb	r3, r3
 800da1c:	f003 0307 	and.w	r3, r3, #7
 800da20:	b2da      	uxtb	r2, r3
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da2a:	0e1b      	lsrs	r3, r3, #24
 800da2c:	b2db      	uxtb	r3, r3
 800da2e:	f003 0307 	and.w	r3, r3, #7
 800da32:	b2da      	uxtb	r2, r3
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da3c:	0d5b      	lsrs	r3, r3, #21
 800da3e:	b2db      	uxtb	r3, r3
 800da40:	f003 0307 	and.w	r3, r3, #7
 800da44:	b2da      	uxtb	r2, r3
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da4e:	0c9b      	lsrs	r3, r3, #18
 800da50:	b2db      	uxtb	r3, r3
 800da52:	f003 0307 	and.w	r3, r3, #7
 800da56:	b2da      	uxtb	r2, r3
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da60:	0bdb      	lsrs	r3, r3, #15
 800da62:	b2db      	uxtb	r3, r3
 800da64:	f003 0307 	and.w	r3, r3, #7
 800da68:	b2da      	uxtb	r2, r3
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	691b      	ldr	r3, [r3, #16]
 800da72:	1c5a      	adds	r2, r3, #1
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	7e1b      	ldrb	r3, [r3, #24]
 800da7c:	b2db      	uxtb	r3, r3
 800da7e:	f003 0307 	and.w	r3, r3, #7
 800da82:	3302      	adds	r3, #2
 800da84:	2201      	movs	r2, #1
 800da86:	fa02 f303 	lsl.w	r3, r2, r3
 800da8a:	687a      	ldr	r2, [r7, #4]
 800da8c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800da8e:	fb02 f203 	mul.w	r2, r2, r3
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	7a1b      	ldrb	r3, [r3, #8]
 800da9a:	b2db      	uxtb	r3, r3
 800da9c:	f003 030f 	and.w	r3, r3, #15
 800daa0:	2201      	movs	r2, #1
 800daa2:	409a      	lsls	r2, r3
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800daac:	687a      	ldr	r2, [r7, #4]
 800daae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800dab0:	0a52      	lsrs	r2, r2, #9
 800dab2:	fb02 f203 	mul.w	r2, r2, r3
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dac0:	659a      	str	r2, [r3, #88]	; 0x58
 800dac2:	e031      	b.n	800db28 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dac8:	2b01      	cmp	r3, #1
 800daca:	d11d      	bne.n	800db08 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dad0:	041b      	lsls	r3, r3, #16
 800dad2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dada:	0c1b      	lsrs	r3, r3, #16
 800dadc:	431a      	orrs	r2, r3
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	691b      	ldr	r3, [r3, #16]
 800dae6:	3301      	adds	r3, #1
 800dae8:	029a      	lsls	r2, r3, #10
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dafc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	659a      	str	r2, [r3, #88]	; 0x58
 800db06:	e00f      	b.n	800db28 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	4a58      	ldr	r2, [pc, #352]	; (800dc70 <HAL_SD_GetCardCSD+0x344>)
 800db0e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db14:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2201      	movs	r2, #1
 800db20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800db24:	2301      	movs	r3, #1
 800db26:	e09d      	b.n	800dc64 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db2c:	0b9b      	lsrs	r3, r3, #14
 800db2e:	b2db      	uxtb	r3, r3
 800db30:	f003 0301 	and.w	r3, r3, #1
 800db34:	b2da      	uxtb	r2, r3
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db3e:	09db      	lsrs	r3, r3, #7
 800db40:	b2db      	uxtb	r3, r3
 800db42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db46:	b2da      	uxtb	r2, r3
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db50:	b2db      	uxtb	r3, r3
 800db52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db56:	b2da      	uxtb	r2, r3
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db60:	0fdb      	lsrs	r3, r3, #31
 800db62:	b2da      	uxtb	r2, r3
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db6c:	0f5b      	lsrs	r3, r3, #29
 800db6e:	b2db      	uxtb	r3, r3
 800db70:	f003 0303 	and.w	r3, r3, #3
 800db74:	b2da      	uxtb	r2, r3
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db7e:	0e9b      	lsrs	r3, r3, #26
 800db80:	b2db      	uxtb	r3, r3
 800db82:	f003 0307 	and.w	r3, r3, #7
 800db86:	b2da      	uxtb	r2, r3
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db90:	0d9b      	lsrs	r3, r3, #22
 800db92:	b2db      	uxtb	r3, r3
 800db94:	f003 030f 	and.w	r3, r3, #15
 800db98:	b2da      	uxtb	r2, r3
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dba2:	0d5b      	lsrs	r3, r3, #21
 800dba4:	b2db      	uxtb	r3, r3
 800dba6:	f003 0301 	and.w	r3, r3, #1
 800dbaa:	b2da      	uxtb	r2, r3
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbbe:	0c1b      	lsrs	r3, r3, #16
 800dbc0:	b2db      	uxtb	r3, r3
 800dbc2:	f003 0301 	and.w	r3, r3, #1
 800dbc6:	b2da      	uxtb	r2, r3
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbd2:	0bdb      	lsrs	r3, r3, #15
 800dbd4:	b2db      	uxtb	r3, r3
 800dbd6:	f003 0301 	and.w	r3, r3, #1
 800dbda:	b2da      	uxtb	r2, r3
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbe6:	0b9b      	lsrs	r3, r3, #14
 800dbe8:	b2db      	uxtb	r3, r3
 800dbea:	f003 0301 	and.w	r3, r3, #1
 800dbee:	b2da      	uxtb	r2, r3
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbfa:	0b5b      	lsrs	r3, r3, #13
 800dbfc:	b2db      	uxtb	r3, r3
 800dbfe:	f003 0301 	and.w	r3, r3, #1
 800dc02:	b2da      	uxtb	r2, r3
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc0e:	0b1b      	lsrs	r3, r3, #12
 800dc10:	b2db      	uxtb	r3, r3
 800dc12:	f003 0301 	and.w	r3, r3, #1
 800dc16:	b2da      	uxtb	r2, r3
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc22:	0a9b      	lsrs	r3, r3, #10
 800dc24:	b2db      	uxtb	r3, r3
 800dc26:	f003 0303 	and.w	r3, r3, #3
 800dc2a:	b2da      	uxtb	r2, r3
 800dc2c:	683b      	ldr	r3, [r7, #0]
 800dc2e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc36:	0a1b      	lsrs	r3, r3, #8
 800dc38:	b2db      	uxtb	r3, r3
 800dc3a:	f003 0303 	and.w	r3, r3, #3
 800dc3e:	b2da      	uxtb	r2, r3
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc4a:	085b      	lsrs	r3, r3, #1
 800dc4c:	b2db      	uxtb	r3, r3
 800dc4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc52:	b2da      	uxtb	r2, r3
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	2201      	movs	r2, #1
 800dc5e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800dc62:	2300      	movs	r3, #0
}
 800dc64:	4618      	mov	r0, r3
 800dc66:	370c      	adds	r7, #12
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6e:	4770      	bx	lr
 800dc70:	1fe00fff 	.word	0x1fe00fff

0800dc74 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b094      	sub	sp, #80	; 0x50
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
 800dc7c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800dc84:	f107 0308 	add.w	r3, r7, #8
 800dc88:	4619      	mov	r1, r3
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	f000 fb64 	bl	800e358 <SD_SendSDStatus>
 800dc90:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d011      	beq.n	800dcbc <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	4a4f      	ldr	r2, [pc, #316]	; (800dddc <HAL_SD_GetCardStatus+0x168>)
 800dc9e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dca6:	431a      	orrs	r2, r3
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2201      	movs	r2, #1
 800dcb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800dcba:	e070      	b.n	800dd9e <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	099b      	lsrs	r3, r3, #6
 800dcc0:	b2db      	uxtb	r3, r3
 800dcc2:	f003 0303 	and.w	r3, r3, #3
 800dcc6:	b2da      	uxtb	r2, r3
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	095b      	lsrs	r3, r3, #5
 800dcd0:	b2db      	uxtb	r3, r3
 800dcd2:	f003 0301 	and.w	r3, r3, #1
 800dcd6:	b2da      	uxtb	r2, r3
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	0a1b      	lsrs	r3, r3, #8
 800dce0:	b29b      	uxth	r3, r3
 800dce2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dce6:	b29a      	uxth	r2, r3
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	0e1b      	lsrs	r3, r3, #24
 800dcec:	b29b      	uxth	r3, r3
 800dcee:	4313      	orrs	r3, r2
 800dcf0:	b29a      	uxth	r2, r3
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	061a      	lsls	r2, r3, #24
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	021b      	lsls	r3, r3, #8
 800dcfe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dd02:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	0a1b      	lsrs	r3, r3, #8
 800dd08:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dd0c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	0e1b      	lsrs	r3, r3, #24
 800dd12:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800dd18:	693b      	ldr	r3, [r7, #16]
 800dd1a:	b2da      	uxtb	r2, r3
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800dd20:	693b      	ldr	r3, [r7, #16]
 800dd22:	0a1b      	lsrs	r3, r3, #8
 800dd24:	b2da      	uxtb	r2, r3
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800dd2a:	693b      	ldr	r3, [r7, #16]
 800dd2c:	0d1b      	lsrs	r3, r3, #20
 800dd2e:	b2db      	uxtb	r3, r3
 800dd30:	f003 030f 	and.w	r3, r3, #15
 800dd34:	b2da      	uxtb	r2, r3
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	0c1b      	lsrs	r3, r3, #16
 800dd3e:	b29b      	uxth	r3, r3
 800dd40:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dd44:	b29a      	uxth	r2, r3
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	b29b      	uxth	r3, r3
 800dd4a:	b2db      	uxtb	r3, r3
 800dd4c:	b29b      	uxth	r3, r3
 800dd4e:	4313      	orrs	r3, r2
 800dd50:	b29a      	uxth	r2, r3
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800dd56:	697b      	ldr	r3, [r7, #20]
 800dd58:	0a9b      	lsrs	r3, r3, #10
 800dd5a:	b2db      	uxtb	r3, r3
 800dd5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd60:	b2da      	uxtb	r2, r3
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	0a1b      	lsrs	r3, r3, #8
 800dd6a:	b2db      	uxtb	r3, r3
 800dd6c:	f003 0303 	and.w	r3, r3, #3
 800dd70:	b2da      	uxtb	r2, r3
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	091b      	lsrs	r3, r3, #4
 800dd7a:	b2db      	uxtb	r3, r3
 800dd7c:	f003 030f 	and.w	r3, r3, #15
 800dd80:	b2da      	uxtb	r2, r3
 800dd82:	683b      	ldr	r3, [r7, #0]
 800dd84:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800dd86:	697b      	ldr	r3, [r7, #20]
 800dd88:	b2db      	uxtb	r3, r3
 800dd8a:	f003 030f 	and.w	r3, r3, #15
 800dd8e:	b2da      	uxtb	r2, r3
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800dd94:	69bb      	ldr	r3, [r7, #24]
 800dd96:	0e1b      	lsrs	r3, r3, #24
 800dd98:	b2da      	uxtb	r2, r3
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dda6:	4618      	mov	r0, r3
 800dda8:	f003 f9f8 	bl	801119c <SDMMC_CmdBlockLength>
 800ddac:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800ddae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d00d      	beq.n	800ddd0 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	4a08      	ldr	r2, [pc, #32]	; (800dddc <HAL_SD_GetCardStatus+0x168>)
 800ddba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ddc0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2201      	movs	r2, #1
 800ddc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800ddca:	2301      	movs	r3, #1
 800ddcc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800ddd0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	3750      	adds	r7, #80	; 0x50
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd80      	pop	{r7, pc}
 800dddc:	1fe00fff 	.word	0x1fe00fff

0800dde0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800dde0:	b480      	push	{r7}
 800dde2:	b083      	sub	sp, #12
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
 800dde8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800de0e:	683b      	ldr	r3, [r7, #0]
 800de10:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800de2a:	2300      	movs	r3, #0
}
 800de2c:	4618      	mov	r0, r3
 800de2e:	370c      	adds	r7, #12
 800de30:	46bd      	mov	sp, r7
 800de32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de36:	4770      	bx	lr

0800de38 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800de38:	b5b0      	push	{r4, r5, r7, lr}
 800de3a:	b08e      	sub	sp, #56	; 0x38
 800de3c:	af04      	add	r7, sp, #16
 800de3e:	6078      	str	r0, [r7, #4]
 800de40:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800de42:	2300      	movs	r3, #0
 800de44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	2203      	movs	r2, #3
 800de4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de54:	2b03      	cmp	r3, #3
 800de56:	d02e      	beq.n	800deb6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de5e:	d106      	bne.n	800de6e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de64:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	639a      	str	r2, [r3, #56]	; 0x38
 800de6c:	e029      	b.n	800dec2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800de74:	d10a      	bne.n	800de8c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800de76:	6878      	ldr	r0, [r7, #4]
 800de78:	f000 fb66 	bl	800e548 <SD_WideBus_Enable>
 800de7c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de82:	6a3b      	ldr	r3, [r7, #32]
 800de84:	431a      	orrs	r2, r3
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	639a      	str	r2, [r3, #56]	; 0x38
 800de8a:	e01a      	b.n	800dec2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d10a      	bne.n	800dea8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	f000 fba3 	bl	800e5de <SD_WideBus_Disable>
 800de98:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de9e:	6a3b      	ldr	r3, [r7, #32]
 800dea0:	431a      	orrs	r2, r3
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	639a      	str	r2, [r3, #56]	; 0x38
 800dea6:	e00c      	b.n	800dec2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deac:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	639a      	str	r2, [r3, #56]	; 0x38
 800deb4:	e005      	b.n	800dec2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deba:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d007      	beq.n	800deda <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	4a2e      	ldr	r2, [pc, #184]	; (800df88 <HAL_SD_ConfigWideBusOperation+0x150>)
 800ded0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ded2:	2301      	movs	r3, #1
 800ded4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ded8:	e034      	b.n	800df44 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	685b      	ldr	r3, [r3, #4]
 800dede:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	689b      	ldr	r3, [r3, #8]
 800dee4:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	691b      	ldr	r3, [r3, #16]
 800deee:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	695b      	ldr	r3, [r3, #20]
 800def4:	2b03      	cmp	r3, #3
 800def6:	d903      	bls.n	800df00 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	695b      	ldr	r3, [r3, #20]
 800defc:	61bb      	str	r3, [r7, #24]
 800defe:	e012      	b.n	800df26 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df08:	d103      	bne.n	800df12 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	695b      	ldr	r3, [r3, #20]
 800df0e:	61bb      	str	r3, [r7, #24]
 800df10:	e009      	b.n	800df26 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df1a:	d102      	bne.n	800df22 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800df1c:	2302      	movs	r3, #2
 800df1e:	61bb      	str	r3, [r7, #24]
 800df20:	e001      	b.n	800df26 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800df22:	2304      	movs	r3, #4
 800df24:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681d      	ldr	r5, [r3, #0]
 800df2a:	466c      	mov	r4, sp
 800df2c:	f107 0314 	add.w	r3, r7, #20
 800df30:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800df34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800df38:	f107 0308 	add.w	r3, r7, #8
 800df3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800df3e:	4628      	mov	r0, r5
 800df40:	f003 f84e 	bl	8010fe0 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	f44f 7100 	mov.w	r1, #512	; 0x200
 800df4c:	4618      	mov	r0, r3
 800df4e:	f003 f925 	bl	801119c <SDMMC_CmdBlockLength>
 800df52:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800df54:	6a3b      	ldr	r3, [r7, #32]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d00c      	beq.n	800df74 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	4a0a      	ldr	r2, [pc, #40]	; (800df88 <HAL_SD_ConfigWideBusOperation+0x150>)
 800df60:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df66:	6a3b      	ldr	r3, [r7, #32]
 800df68:	431a      	orrs	r2, r3
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800df6e:	2301      	movs	r3, #1
 800df70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2201      	movs	r2, #1
 800df78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800df7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800df80:	4618      	mov	r0, r3
 800df82:	3728      	adds	r7, #40	; 0x28
 800df84:	46bd      	mov	sp, r7
 800df86:	bdb0      	pop	{r4, r5, r7, pc}
 800df88:	1fe00fff 	.word	0x1fe00fff

0800df8c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b086      	sub	sp, #24
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800df94:	2300      	movs	r3, #0
 800df96:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800df98:	f107 030c 	add.w	r3, r7, #12
 800df9c:	4619      	mov	r1, r3
 800df9e:	6878      	ldr	r0, [r7, #4]
 800dfa0:	f000 faaa 	bl	800e4f8 <SD_SendStatus>
 800dfa4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d005      	beq.n	800dfb8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dfb0:	697b      	ldr	r3, [r7, #20]
 800dfb2:	431a      	orrs	r2, r3
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	0a5b      	lsrs	r3, r3, #9
 800dfbc:	f003 030f 	and.w	r3, r3, #15
 800dfc0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800dfc2:	693b      	ldr	r3, [r7, #16]
}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	3718      	adds	r7, #24
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}

0800dfcc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800dfcc:	b590      	push	{r4, r7, lr}
 800dfce:	b091      	sub	sp, #68	; 0x44
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f003 f858 	bl	8011092 <SDMMC_GetPowerState>
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d102      	bne.n	800dfee <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dfe8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800dfec:	e0a8      	b.n	800e140 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dff2:	2b03      	cmp	r3, #3
 800dff4:	d02e      	beq.n	800e054 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	4618      	mov	r0, r3
 800dffc:	f003 faa4 	bl	8011548 <SDMMC_CmdSendCID>
 800e000:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e004:	2b00      	cmp	r3, #0
 800e006:	d001      	beq.n	800e00c <SD_InitCard+0x40>
    {
      return errorstate;
 800e008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e00a:	e099      	b.n	800e140 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	2100      	movs	r1, #0
 800e012:	4618      	mov	r0, r3
 800e014:	f003 f883 	bl	801111e <SDMMC_GetResponse>
 800e018:	4602      	mov	r2, r0
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	2104      	movs	r1, #4
 800e024:	4618      	mov	r0, r3
 800e026:	f003 f87a 	bl	801111e <SDMMC_GetResponse>
 800e02a:	4602      	mov	r2, r0
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	2108      	movs	r1, #8
 800e036:	4618      	mov	r0, r3
 800e038:	f003 f871 	bl	801111e <SDMMC_GetResponse>
 800e03c:	4602      	mov	r2, r0
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	210c      	movs	r1, #12
 800e048:	4618      	mov	r0, r3
 800e04a:	f003 f868 	bl	801111e <SDMMC_GetResponse>
 800e04e:	4602      	mov	r2, r0
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e058:	2b03      	cmp	r3, #3
 800e05a:	d00d      	beq.n	800e078 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	f107 020e 	add.w	r2, r7, #14
 800e064:	4611      	mov	r1, r2
 800e066:	4618      	mov	r0, r3
 800e068:	f003 faad 	bl	80115c6 <SDMMC_CmdSetRelAdd>
 800e06c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e06e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e070:	2b00      	cmp	r3, #0
 800e072:	d001      	beq.n	800e078 <SD_InitCard+0xac>
    {
      return errorstate;
 800e074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e076:	e063      	b.n	800e140 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e07c:	2b03      	cmp	r3, #3
 800e07e:	d036      	beq.n	800e0ee <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e080:	89fb      	ldrh	r3, [r7, #14]
 800e082:	461a      	mov	r2, r3
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681a      	ldr	r2, [r3, #0]
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e090:	041b      	lsls	r3, r3, #16
 800e092:	4619      	mov	r1, r3
 800e094:	4610      	mov	r0, r2
 800e096:	f003 fa76 	bl	8011586 <SDMMC_CmdSendCSD>
 800e09a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e09c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d001      	beq.n	800e0a6 <SD_InitCard+0xda>
    {
      return errorstate;
 800e0a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0a4:	e04c      	b.n	800e140 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	2100      	movs	r1, #0
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f003 f836 	bl	801111e <SDMMC_GetResponse>
 800e0b2:	4602      	mov	r2, r0
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	2104      	movs	r1, #4
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f003 f82d 	bl	801111e <SDMMC_GetResponse>
 800e0c4:	4602      	mov	r2, r0
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	2108      	movs	r1, #8
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f003 f824 	bl	801111e <SDMMC_GetResponse>
 800e0d6:	4602      	mov	r2, r0
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	210c      	movs	r1, #12
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f003 f81b 	bl	801111e <SDMMC_GetResponse>
 800e0e8:	4602      	mov	r2, r0
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	2104      	movs	r1, #4
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f003 f812 	bl	801111e <SDMMC_GetResponse>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	0d1a      	lsrs	r2, r3, #20
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e102:	f107 0310 	add.w	r3, r7, #16
 800e106:	4619      	mov	r1, r3
 800e108:	6878      	ldr	r0, [r7, #4]
 800e10a:	f7ff fc0f 	bl	800d92c <HAL_SD_GetCardCSD>
 800e10e:	4603      	mov	r3, r0
 800e110:	2b00      	cmp	r3, #0
 800e112:	d002      	beq.n	800e11a <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e114:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e118:	e012      	b.n	800e140 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6819      	ldr	r1, [r3, #0]
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e122:	041b      	lsls	r3, r3, #16
 800e124:	f04f 0400 	mov.w	r4, #0
 800e128:	461a      	mov	r2, r3
 800e12a:	4623      	mov	r3, r4
 800e12c:	4608      	mov	r0, r1
 800e12e:	f003 f921 	bl	8011374 <SDMMC_CmdSelDesel>
 800e132:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e136:	2b00      	cmp	r3, #0
 800e138:	d001      	beq.n	800e13e <SD_InitCard+0x172>
  {
    return errorstate;
 800e13a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e13c:	e000      	b.n	800e140 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e13e:	2300      	movs	r3, #0
}
 800e140:	4618      	mov	r0, r3
 800e142:	3744      	adds	r7, #68	; 0x44
 800e144:	46bd      	mov	sp, r7
 800e146:	bd90      	pop	{r4, r7, pc}

0800e148 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b088      	sub	sp, #32
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e150:	2300      	movs	r3, #0
 800e152:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800e154:	2300      	movs	r3, #0
 800e156:	61fb      	str	r3, [r7, #28]
 800e158:	2300      	movs	r3, #0
 800e15a:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800e15c:	f7f6 fa2c 	bl	80045b8 <HAL_GetTick>
 800e160:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	4618      	mov	r0, r3
 800e168:	f003 f928 	bl	80113bc <SDMMC_CmdGoIdleState>
 800e16c:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e16e:	693b      	ldr	r3, [r7, #16]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d001      	beq.n	800e178 <SD_PowerON+0x30>
  {
    return errorstate;
 800e174:	693b      	ldr	r3, [r7, #16]
 800e176:	e0e9      	b.n	800e34c <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	4618      	mov	r0, r3
 800e17e:	f003 f93b 	bl	80113f8 <SDMMC_CmdOperCond>
 800e182:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e184:	693b      	ldr	r3, [r7, #16]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d00d      	beq.n	800e1a6 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2200      	movs	r2, #0
 800e18e:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	4618      	mov	r0, r3
 800e196:	f003 f911 	bl	80113bc <SDMMC_CmdGoIdleState>
 800e19a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e19c:	693b      	ldr	r3, [r7, #16]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d004      	beq.n	800e1ac <SD_PowerON+0x64>
    {
      return errorstate;
 800e1a2:	693b      	ldr	r3, [r7, #16]
 800e1a4:	e0d2      	b.n	800e34c <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2201      	movs	r2, #1
 800e1aa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1b0:	2b01      	cmp	r3, #1
 800e1b2:	d137      	bne.n	800e224 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	2100      	movs	r1, #0
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f003 f93c 	bl	8011438 <SDMMC_CmdAppCommand>
 800e1c0:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1c2:	693b      	ldr	r3, [r7, #16]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d02d      	beq.n	800e224 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e1c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e1cc:	e0be      	b.n	800e34c <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	2100      	movs	r1, #0
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f003 f92f 	bl	8011438 <SDMMC_CmdAppCommand>
 800e1da:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1dc:	693b      	ldr	r3, [r7, #16]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d001      	beq.n	800e1e6 <SD_PowerON+0x9e>
    {
      return errorstate;
 800e1e2:	693b      	ldr	r3, [r7, #16]
 800e1e4:	e0b2      	b.n	800e34c <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	495a      	ldr	r1, [pc, #360]	; (800e354 <SD_PowerON+0x20c>)
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	f003 f946 	bl	801147e <SDMMC_CmdAppOperCommand>
 800e1f2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1f4:	693b      	ldr	r3, [r7, #16]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d002      	beq.n	800e200 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e1fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e1fe:	e0a5      	b.n	800e34c <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	2100      	movs	r1, #0
 800e206:	4618      	mov	r0, r3
 800e208:	f002 ff89 	bl	801111e <SDMMC_GetResponse>
 800e20c:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e20e:	69fb      	ldr	r3, [r7, #28]
 800e210:	0fdb      	lsrs	r3, r3, #31
 800e212:	2b01      	cmp	r3, #1
 800e214:	d101      	bne.n	800e21a <SD_PowerON+0xd2>
 800e216:	2301      	movs	r3, #1
 800e218:	e000      	b.n	800e21c <SD_PowerON+0xd4>
 800e21a:	2300      	movs	r3, #0
 800e21c:	61bb      	str	r3, [r7, #24]

    count++;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	3301      	adds	r3, #1
 800e222:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e22a:	4293      	cmp	r3, r2
 800e22c:	d802      	bhi.n	800e234 <SD_PowerON+0xec>
 800e22e:	69bb      	ldr	r3, [r7, #24]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d0cc      	beq.n	800e1ce <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e23a:	4293      	cmp	r3, r2
 800e23c:	d902      	bls.n	800e244 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e23e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e242:	e083      	b.n	800e34c <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e244:	69fb      	ldr	r3, [r7, #28]
 800e246:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d07d      	beq.n	800e34a <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	2201      	movs	r2, #1
 800e252:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	699b      	ldr	r3, [r3, #24]
 800e258:	2b02      	cmp	r3, #2
 800e25a:	d176      	bne.n	800e34a <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800e25c:	69fb      	ldr	r3, [r7, #28]
 800e25e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e262:	2b00      	cmp	r3, #0
 800e264:	d071      	beq.n	800e34a <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e26c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	681a      	ldr	r2, [r3, #0]
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	f042 0208 	orr.w	r2, r2, #8
 800e27c:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	4618      	mov	r0, r3
 800e284:	f003 fa06 	bl	8011694 <SDMMC_CmdVoltageSwitch>
 800e288:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800e28a:	693b      	ldr	r3, [r7, #16]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d00c      	beq.n	800e2aa <SD_PowerON+0x162>
        {
          return errorstate;
 800e290:	693b      	ldr	r3, [r7, #16]
 800e292:	e05b      	b.n	800e34c <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e294:	f7f6 f990 	bl	80045b8 <HAL_GetTick>
 800e298:	4602      	mov	r2, r0
 800e29a:	697b      	ldr	r3, [r7, #20]
 800e29c:	1ad3      	subs	r3, r2, r3
 800e29e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2a2:	d102      	bne.n	800e2aa <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800e2a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e2a8:	e050      	b.n	800e34c <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e2b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e2b8:	d1ec      	bne.n	800e294 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800e2c2:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e2ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e2d2:	d002      	beq.n	800e2da <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800e2d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e2d8:	e038      	b.n	800e34c <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800e2da:	2001      	movs	r0, #1
 800e2dc:	f7ff fb1a 	bl	800d914 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	681a      	ldr	r2, [r3, #0]
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	f042 0204 	orr.w	r2, r2, #4
 800e2ee:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800e2f0:	e00a      	b.n	800e308 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e2f2:	f7f6 f961 	bl	80045b8 <HAL_GetTick>
 800e2f6:	4602      	mov	r2, r0
 800e2f8:	697b      	ldr	r3, [r7, #20]
 800e2fa:	1ad3      	subs	r3, r2, r3
 800e2fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e300:	d102      	bne.n	800e308 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800e302:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e306:	e021      	b.n	800e34c <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e30e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e312:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e316:	d1ec      	bne.n	800e2f2 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e320:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e328:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e32c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e330:	d102      	bne.n	800e338 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e332:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e336:	e009      	b.n	800e34c <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	2213      	movs	r2, #19
 800e33e:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	f04f 32ff 	mov.w	r2, #4294967295
 800e348:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e34a:	2300      	movs	r3, #0
}
 800e34c:	4618      	mov	r0, r3
 800e34e:	3720      	adds	r7, #32
 800e350:	46bd      	mov	sp, r7
 800e352:	bd80      	pop	{r7, pc}
 800e354:	c1100000 	.word	0xc1100000

0800e358 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b08c      	sub	sp, #48	; 0x30
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
 800e360:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e362:	f7f6 f929 	bl	80045b8 <HAL_GetTick>
 800e366:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	2100      	movs	r1, #0
 800e372:	4618      	mov	r0, r3
 800e374:	f002 fed3 	bl	801111e <SDMMC_GetResponse>
 800e378:	4603      	mov	r3, r0
 800e37a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e37e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e382:	d102      	bne.n	800e38a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e384:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e388:	e0b0      	b.n	800e4ec <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	2140      	movs	r1, #64	; 0x40
 800e390:	4618      	mov	r0, r3
 800e392:	f002 ff03 	bl	801119c <SDMMC_CmdBlockLength>
 800e396:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e398:	6a3b      	ldr	r3, [r7, #32]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d005      	beq.n	800e3aa <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800e3a6:	6a3b      	ldr	r3, [r7, #32]
 800e3a8:	e0a0      	b.n	800e4ec <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681a      	ldr	r2, [r3, #0]
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e3b2:	041b      	lsls	r3, r3, #16
 800e3b4:	4619      	mov	r1, r3
 800e3b6:	4610      	mov	r0, r2
 800e3b8:	f003 f83e 	bl	8011438 <SDMMC_CmdAppCommand>
 800e3bc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e3be:	6a3b      	ldr	r3, [r7, #32]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d005      	beq.n	800e3d0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800e3cc:	6a3b      	ldr	r3, [r7, #32]
 800e3ce:	e08d      	b.n	800e4ec <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e3d0:	f04f 33ff 	mov.w	r3, #4294967295
 800e3d4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e3d6:	2340      	movs	r3, #64	; 0x40
 800e3d8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e3da:	2360      	movs	r3, #96	; 0x60
 800e3dc:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e3de:	2302      	movs	r3, #2
 800e3e0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	f107 0208 	add.w	r2, r7, #8
 800e3f2:	4611      	mov	r1, r2
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	f002 fea5 	bl	8011144 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	4618      	mov	r0, r3
 800e400:	f003 f926 	bl	8011650 <SDMMC_CmdStatusRegister>
 800e404:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e406:	6a3b      	ldr	r3, [r7, #32]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d02b      	beq.n	800e464 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800e414:	6a3b      	ldr	r3, [r7, #32]
 800e416:	e069      	b.n	800e4ec <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e41e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e422:	2b00      	cmp	r3, #0
 800e424:	d013      	beq.n	800e44e <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800e426:	2300      	movs	r3, #0
 800e428:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e42a:	e00d      	b.n	800e448 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	4618      	mov	r0, r3
 800e432:	f002 fdff 	bl	8011034 <SDMMC_ReadFIFO>
 800e436:	4602      	mov	r2, r0
 800e438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e43a:	601a      	str	r2, [r3, #0]
        pData++;
 800e43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e43e:	3304      	adds	r3, #4
 800e440:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800e442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e444:	3301      	adds	r3, #1
 800e446:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e44a:	2b07      	cmp	r3, #7
 800e44c:	d9ee      	bls.n	800e42c <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e44e:	f7f6 f8b3 	bl	80045b8 <HAL_GetTick>
 800e452:	4602      	mov	r2, r0
 800e454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e456:	1ad3      	subs	r3, r2, r3
 800e458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e45c:	d102      	bne.n	800e464 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e45e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e462:	e043      	b.n	800e4ec <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e46a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d0d2      	beq.n	800e418 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e478:	f003 0308 	and.w	r3, r3, #8
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d001      	beq.n	800e484 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e480:	2308      	movs	r3, #8
 800e482:	e033      	b.n	800e4ec <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e48a:	f003 0302 	and.w	r3, r3, #2
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d001      	beq.n	800e496 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e492:	2302      	movs	r3, #2
 800e494:	e02a      	b.n	800e4ec <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e49c:	f003 0320 	and.w	r3, r3, #32
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d017      	beq.n	800e4d4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e4a4:	2320      	movs	r3, #32
 800e4a6:	e021      	b.n	800e4ec <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f002 fdc1 	bl	8011034 <SDMMC_ReadFIFO>
 800e4b2:	4602      	mov	r2, r0
 800e4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b6:	601a      	str	r2, [r3, #0]
    pData++;
 800e4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ba:	3304      	adds	r3, #4
 800e4bc:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e4be:	f7f6 f87b 	bl	80045b8 <HAL_GetTick>
 800e4c2:	4602      	mov	r2, r0
 800e4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c6:	1ad3      	subs	r3, r2, r3
 800e4c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4cc:	d102      	bne.n	800e4d4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e4ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e4d2:	e00b      	b.n	800e4ec <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d1e2      	bne.n	800e4a8 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	4a03      	ldr	r2, [pc, #12]	; (800e4f4 <SD_SendSDStatus+0x19c>)
 800e4e8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e4ea:	2300      	movs	r3, #0
}
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	3730      	adds	r7, #48	; 0x30
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}
 800e4f4:	18000f3a 	.word	0x18000f3a

0800e4f8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b084      	sub	sp, #16
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
 800e500:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e502:	683b      	ldr	r3, [r7, #0]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d102      	bne.n	800e50e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e508:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e50c:	e018      	b.n	800e540 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681a      	ldr	r2, [r3, #0]
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e516:	041b      	lsls	r3, r3, #16
 800e518:	4619      	mov	r1, r3
 800e51a:	4610      	mov	r0, r2
 800e51c:	f003 f875 	bl	801160a <SDMMC_CmdSendStatus>
 800e520:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d001      	beq.n	800e52c <SD_SendStatus+0x34>
  {
    return errorstate;
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	e009      	b.n	800e540 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	2100      	movs	r1, #0
 800e532:	4618      	mov	r0, r3
 800e534:	f002 fdf3 	bl	801111e <SDMMC_GetResponse>
 800e538:	4602      	mov	r2, r0
 800e53a:	683b      	ldr	r3, [r7, #0]
 800e53c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e53e:	2300      	movs	r3, #0
}
 800e540:	4618      	mov	r0, r3
 800e542:	3710      	adds	r7, #16
 800e544:	46bd      	mov	sp, r7
 800e546:	bd80      	pop	{r7, pc}

0800e548 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b086      	sub	sp, #24
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e550:	2300      	movs	r3, #0
 800e552:	60fb      	str	r3, [r7, #12]
 800e554:	2300      	movs	r3, #0
 800e556:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	2100      	movs	r1, #0
 800e55e:	4618      	mov	r0, r3
 800e560:	f002 fddd 	bl	801111e <SDMMC_GetResponse>
 800e564:	4603      	mov	r3, r0
 800e566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e56a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e56e:	d102      	bne.n	800e576 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e570:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e574:	e02f      	b.n	800e5d6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e576:	f107 030c 	add.w	r3, r7, #12
 800e57a:	4619      	mov	r1, r3
 800e57c:	6878      	ldr	r0, [r7, #4]
 800e57e:	f000 f879 	bl	800e674 <SD_FindSCR>
 800e582:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e584:	697b      	ldr	r3, [r7, #20]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d001      	beq.n	800e58e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e58a:	697b      	ldr	r3, [r7, #20]
 800e58c:	e023      	b.n	800e5d6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e58e:	693b      	ldr	r3, [r7, #16]
 800e590:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e594:	2b00      	cmp	r3, #0
 800e596:	d01c      	beq.n	800e5d2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681a      	ldr	r2, [r3, #0]
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5a0:	041b      	lsls	r3, r3, #16
 800e5a2:	4619      	mov	r1, r3
 800e5a4:	4610      	mov	r0, r2
 800e5a6:	f002 ff47 	bl	8011438 <SDMMC_CmdAppCommand>
 800e5aa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e5ac:	697b      	ldr	r3, [r7, #20]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d001      	beq.n	800e5b6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e5b2:	697b      	ldr	r3, [r7, #20]
 800e5b4:	e00f      	b.n	800e5d6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	2102      	movs	r1, #2
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f002 ff7e 	bl	80114be <SDMMC_CmdBusWidth>
 800e5c2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e5c4:	697b      	ldr	r3, [r7, #20]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d001      	beq.n	800e5ce <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e5ca:	697b      	ldr	r3, [r7, #20]
 800e5cc:	e003      	b.n	800e5d6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	e001      	b.n	800e5d6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e5d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	3718      	adds	r7, #24
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	bd80      	pop	{r7, pc}

0800e5de <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e5de:	b580      	push	{r7, lr}
 800e5e0:	b086      	sub	sp, #24
 800e5e2:	af00      	add	r7, sp, #0
 800e5e4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	60fb      	str	r3, [r7, #12]
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	2100      	movs	r1, #0
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	f002 fd92 	bl	801111e <SDMMC_GetResponse>
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e600:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e604:	d102      	bne.n	800e60c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e606:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e60a:	e02f      	b.n	800e66c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e60c:	f107 030c 	add.w	r3, r7, #12
 800e610:	4619      	mov	r1, r3
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	f000 f82e 	bl	800e674 <SD_FindSCR>
 800e618:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e61a:	697b      	ldr	r3, [r7, #20]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d001      	beq.n	800e624 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e620:	697b      	ldr	r3, [r7, #20]
 800e622:	e023      	b.n	800e66c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e624:	693b      	ldr	r3, [r7, #16]
 800e626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d01c      	beq.n	800e668 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681a      	ldr	r2, [r3, #0]
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e636:	041b      	lsls	r3, r3, #16
 800e638:	4619      	mov	r1, r3
 800e63a:	4610      	mov	r0, r2
 800e63c:	f002 fefc 	bl	8011438 <SDMMC_CmdAppCommand>
 800e640:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e642:	697b      	ldr	r3, [r7, #20]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d001      	beq.n	800e64c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e648:	697b      	ldr	r3, [r7, #20]
 800e64a:	e00f      	b.n	800e66c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	2100      	movs	r1, #0
 800e652:	4618      	mov	r0, r3
 800e654:	f002 ff33 	bl	80114be <SDMMC_CmdBusWidth>
 800e658:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e65a:	697b      	ldr	r3, [r7, #20]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d001      	beq.n	800e664 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e660:	697b      	ldr	r3, [r7, #20]
 800e662:	e003      	b.n	800e66c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e664:	2300      	movs	r3, #0
 800e666:	e001      	b.n	800e66c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e668:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e66c:	4618      	mov	r0, r3
 800e66e:	3718      	adds	r7, #24
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}

0800e674 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b08e      	sub	sp, #56	; 0x38
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
 800e67c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e67e:	f7f5 ff9b 	bl	80045b8 <HAL_GetTick>
 800e682:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e684:	2300      	movs	r3, #0
 800e686:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e688:	2300      	movs	r3, #0
 800e68a:	60bb      	str	r3, [r7, #8]
 800e68c:	2300      	movs	r3, #0
 800e68e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	2108      	movs	r1, #8
 800e69a:	4618      	mov	r0, r3
 800e69c:	f002 fd7e 	bl	801119c <SDMMC_CmdBlockLength>
 800e6a0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d001      	beq.n	800e6ac <SD_FindSCR+0x38>
  {
    return errorstate;
 800e6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6aa:	e0ad      	b.n	800e808 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681a      	ldr	r2, [r3, #0]
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6b4:	041b      	lsls	r3, r3, #16
 800e6b6:	4619      	mov	r1, r3
 800e6b8:	4610      	mov	r0, r2
 800e6ba:	f002 febd 	bl	8011438 <SDMMC_CmdAppCommand>
 800e6be:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d001      	beq.n	800e6ca <SD_FindSCR+0x56>
  {
    return errorstate;
 800e6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6c8:	e09e      	b.n	800e808 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e6ca:	f04f 33ff 	mov.w	r3, #4294967295
 800e6ce:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e6d0:	2308      	movs	r3, #8
 800e6d2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e6d4:	2330      	movs	r3, #48	; 0x30
 800e6d6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e6d8:	2302      	movs	r3, #2
 800e6da:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e6dc:	2300      	movs	r3, #0
 800e6de:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	f107 0210 	add.w	r2, r7, #16
 800e6ec:	4611      	mov	r1, r2
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	f002 fd28 	bl	8011144 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	f002 ff03 	bl	8011504 <SDMMC_CmdSendSCR>
 800e6fe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e702:	2b00      	cmp	r3, #0
 800e704:	d027      	beq.n	800e756 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800e706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e708:	e07e      	b.n	800e808 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e710:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e714:	2b00      	cmp	r3, #0
 800e716:	d113      	bne.n	800e740 <SD_FindSCR+0xcc>
 800e718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d110      	bne.n	800e740 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	4618      	mov	r0, r3
 800e724:	f002 fc86 	bl	8011034 <SDMMC_ReadFIFO>
 800e728:	4603      	mov	r3, r0
 800e72a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	4618      	mov	r0, r3
 800e732:	f002 fc7f 	bl	8011034 <SDMMC_ReadFIFO>
 800e736:	4603      	mov	r3, r0
 800e738:	60fb      	str	r3, [r7, #12]
      index++;
 800e73a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e73c:	3301      	adds	r3, #1
 800e73e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e740:	f7f5 ff3a 	bl	80045b8 <HAL_GetTick>
 800e744:	4602      	mov	r2, r0
 800e746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e748:	1ad3      	subs	r3, r2, r3
 800e74a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e74e:	d102      	bne.n	800e756 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e750:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e754:	e058      	b.n	800e808 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e75c:	f240 532a 	movw	r3, #1322	; 0x52a
 800e760:	4013      	ands	r3, r2
 800e762:	2b00      	cmp	r3, #0
 800e764:	d0d1      	beq.n	800e70a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e76c:	f003 0308 	and.w	r3, r3, #8
 800e770:	2b00      	cmp	r3, #0
 800e772:	d005      	beq.n	800e780 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	2208      	movs	r2, #8
 800e77a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e77c:	2308      	movs	r3, #8
 800e77e:	e043      	b.n	800e808 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e786:	f003 0302 	and.w	r3, r3, #2
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d005      	beq.n	800e79a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	2202      	movs	r2, #2
 800e794:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e796:	2302      	movs	r3, #2
 800e798:	e036      	b.n	800e808 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7a0:	f003 0320 	and.w	r3, r3, #32
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d005      	beq.n	800e7b4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	2220      	movs	r2, #32
 800e7ae:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e7b0:	2320      	movs	r3, #32
 800e7b2:	e029      	b.n	800e808 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	4a15      	ldr	r2, [pc, #84]	; (800e810 <SD_FindSCR+0x19c>)
 800e7ba:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	061a      	lsls	r2, r3, #24
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	021b      	lsls	r3, r3, #8
 800e7c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e7c8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	0a1b      	lsrs	r3, r3, #8
 800e7ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e7d2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	0e1b      	lsrs	r3, r3, #24
 800e7d8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7dc:	601a      	str	r2, [r3, #0]
    scr++;
 800e7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7e0:	3304      	adds	r3, #4
 800e7e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e7e4:	68bb      	ldr	r3, [r7, #8]
 800e7e6:	061a      	lsls	r2, r3, #24
 800e7e8:	68bb      	ldr	r3, [r7, #8]
 800e7ea:	021b      	lsls	r3, r3, #8
 800e7ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e7f0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e7f2:	68bb      	ldr	r3, [r7, #8]
 800e7f4:	0a1b      	lsrs	r3, r3, #8
 800e7f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e7fa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e7fc:	68bb      	ldr	r3, [r7, #8]
 800e7fe:	0e1b      	lsrs	r3, r3, #24
 800e800:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e804:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e806:	2300      	movs	r3, #0
}
 800e808:	4618      	mov	r0, r3
 800e80a:	3738      	adds	r7, #56	; 0x38
 800e80c:	46bd      	mov	sp, r7
 800e80e:	bd80      	pop	{r7, pc}
 800e810:	18000f3a 	.word	0x18000f3a

0800e814 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b086      	sub	sp, #24
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e820:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e826:	2b1f      	cmp	r3, #31
 800e828:	d936      	bls.n	800e898 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e82a:	2300      	movs	r3, #0
 800e82c:	617b      	str	r3, [r7, #20]
 800e82e:	e027      	b.n	800e880 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	4618      	mov	r0, r3
 800e836:	f002 fbfd 	bl	8011034 <SDMMC_ReadFIFO>
 800e83a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	b2da      	uxtb	r2, r3
 800e840:	693b      	ldr	r3, [r7, #16]
 800e842:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e844:	693b      	ldr	r3, [r7, #16]
 800e846:	3301      	adds	r3, #1
 800e848:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	0a1b      	lsrs	r3, r3, #8
 800e84e:	b2da      	uxtb	r2, r3
 800e850:	693b      	ldr	r3, [r7, #16]
 800e852:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e854:	693b      	ldr	r3, [r7, #16]
 800e856:	3301      	adds	r3, #1
 800e858:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	0c1b      	lsrs	r3, r3, #16
 800e85e:	b2da      	uxtb	r2, r3
 800e860:	693b      	ldr	r3, [r7, #16]
 800e862:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	3301      	adds	r3, #1
 800e868:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	0e1b      	lsrs	r3, r3, #24
 800e86e:	b2da      	uxtb	r2, r3
 800e870:	693b      	ldr	r3, [r7, #16]
 800e872:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e874:	693b      	ldr	r3, [r7, #16]
 800e876:	3301      	adds	r3, #1
 800e878:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e87a:	697b      	ldr	r3, [r7, #20]
 800e87c:	3301      	adds	r3, #1
 800e87e:	617b      	str	r3, [r7, #20]
 800e880:	697b      	ldr	r3, [r7, #20]
 800e882:	2b07      	cmp	r3, #7
 800e884:	d9d4      	bls.n	800e830 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	693a      	ldr	r2, [r7, #16]
 800e88a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e890:	f1a3 0220 	sub.w	r2, r3, #32
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e898:	bf00      	nop
 800e89a:	3718      	adds	r7, #24
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}

0800e8a0 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b086      	sub	sp, #24
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	6a1b      	ldr	r3, [r3, #32]
 800e8ac:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8b2:	2b1f      	cmp	r3, #31
 800e8b4:	d93a      	bls.n	800e92c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	617b      	str	r3, [r7, #20]
 800e8ba:	e02b      	b.n	800e914 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800e8bc:	693b      	ldr	r3, [r7, #16]
 800e8be:	781b      	ldrb	r3, [r3, #0]
 800e8c0:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e8c2:	693b      	ldr	r3, [r7, #16]
 800e8c4:	3301      	adds	r3, #1
 800e8c6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e8c8:	693b      	ldr	r3, [r7, #16]
 800e8ca:	781b      	ldrb	r3, [r3, #0]
 800e8cc:	021a      	lsls	r2, r3, #8
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	4313      	orrs	r3, r2
 800e8d2:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e8d4:	693b      	ldr	r3, [r7, #16]
 800e8d6:	3301      	adds	r3, #1
 800e8d8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e8da:	693b      	ldr	r3, [r7, #16]
 800e8dc:	781b      	ldrb	r3, [r3, #0]
 800e8de:	041a      	lsls	r2, r3, #16
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	4313      	orrs	r3, r2
 800e8e4:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e8e6:	693b      	ldr	r3, [r7, #16]
 800e8e8:	3301      	adds	r3, #1
 800e8ea:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e8ec:	693b      	ldr	r3, [r7, #16]
 800e8ee:	781b      	ldrb	r3, [r3, #0]
 800e8f0:	061a      	lsls	r2, r3, #24
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	4313      	orrs	r3, r2
 800e8f6:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e8f8:	693b      	ldr	r3, [r7, #16]
 800e8fa:	3301      	adds	r3, #1
 800e8fc:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	f107 020c 	add.w	r2, r7, #12
 800e906:	4611      	mov	r1, r2
 800e908:	4618      	mov	r0, r3
 800e90a:	f002 fba0 	bl	801104e <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e90e:	697b      	ldr	r3, [r7, #20]
 800e910:	3301      	adds	r3, #1
 800e912:	617b      	str	r3, [r7, #20]
 800e914:	697b      	ldr	r3, [r7, #20]
 800e916:	2b07      	cmp	r3, #7
 800e918:	d9d0      	bls.n	800e8bc <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	693a      	ldr	r2, [r7, #16]
 800e91e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e924:	f1a3 0220 	sub.w	r2, r3, #32
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800e92c:	bf00      	nop
 800e92e:	3718      	adds	r7, #24
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}

0800e934 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e934:	b480      	push	{r7}
 800e936:	b083      	sub	sp, #12
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e93c:	bf00      	nop
 800e93e:	370c      	adds	r7, #12
 800e940:	46bd      	mov	sp, r7
 800e942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e946:	4770      	bx	lr

0800e948 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e948:	b480      	push	{r7}
 800e94a:	b083      	sub	sp, #12
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e950:	bf00      	nop
 800e952:	370c      	adds	r7, #12
 800e954:	46bd      	mov	sp, r7
 800e956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95a:	4770      	bx	lr

0800e95c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e95c:	b480      	push	{r7}
 800e95e:	b083      	sub	sp, #12
 800e960:	af00      	add	r7, sp, #0
 800e962:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e964:	bf00      	nop
 800e966:	370c      	adds	r7, #12
 800e968:	46bd      	mov	sp, r7
 800e96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96e:	4770      	bx	lr

0800e970 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e970:	b480      	push	{r7}
 800e972:	b083      	sub	sp, #12
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e978:	bf00      	nop
 800e97a:	370c      	adds	r7, #12
 800e97c:	46bd      	mov	sp, r7
 800e97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e982:	4770      	bx	lr

0800e984 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b084      	sub	sp, #16
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800e98c:	2300      	movs	r3, #0
 800e98e:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d101      	bne.n	800e99a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800e996:	2301      	movs	r3, #1
 800e998:	e0e2      	b.n	800eb60 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	2200      	movs	r2, #0
 800e99e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	4a70      	ldr	r2, [pc, #448]	; (800eb68 <HAL_SPI_Init+0x1e4>)
 800e9a6:	4293      	cmp	r3, r2
 800e9a8:	d00f      	beq.n	800e9ca <HAL_SPI_Init+0x46>
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	4a6f      	ldr	r2, [pc, #444]	; (800eb6c <HAL_SPI_Init+0x1e8>)
 800e9b0:	4293      	cmp	r3, r2
 800e9b2:	d00a      	beq.n	800e9ca <HAL_SPI_Init+0x46>
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	4a6d      	ldr	r2, [pc, #436]	; (800eb70 <HAL_SPI_Init+0x1ec>)
 800e9ba:	4293      	cmp	r3, r2
 800e9bc:	d005      	beq.n	800e9ca <HAL_SPI_Init+0x46>
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	68db      	ldr	r3, [r3, #12]
 800e9c2:	2b0f      	cmp	r3, #15
 800e9c4:	d901      	bls.n	800e9ca <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800e9c6:	2301      	movs	r3, #1
 800e9c8:	e0ca      	b.n	800eb60 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e9ca:	6878      	ldr	r0, [r7, #4]
 800e9cc:	f001 f870 	bl	800fab0 <SPI_GetPacketSize>
 800e9d0:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	4a64      	ldr	r2, [pc, #400]	; (800eb68 <HAL_SPI_Init+0x1e4>)
 800e9d8:	4293      	cmp	r3, r2
 800e9da:	d00c      	beq.n	800e9f6 <HAL_SPI_Init+0x72>
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	4a62      	ldr	r2, [pc, #392]	; (800eb6c <HAL_SPI_Init+0x1e8>)
 800e9e2:	4293      	cmp	r3, r2
 800e9e4:	d007      	beq.n	800e9f6 <HAL_SPI_Init+0x72>
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	4a61      	ldr	r2, [pc, #388]	; (800eb70 <HAL_SPI_Init+0x1ec>)
 800e9ec:	4293      	cmp	r3, r2
 800e9ee:	d002      	beq.n	800e9f6 <HAL_SPI_Init+0x72>
 800e9f0:	68bb      	ldr	r3, [r7, #8]
 800e9f2:	2b08      	cmp	r3, #8
 800e9f4:	d811      	bhi.n	800ea1a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e9fa:	4a5b      	ldr	r2, [pc, #364]	; (800eb68 <HAL_SPI_Init+0x1e4>)
 800e9fc:	4293      	cmp	r3, r2
 800e9fe:	d009      	beq.n	800ea14 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	4a59      	ldr	r2, [pc, #356]	; (800eb6c <HAL_SPI_Init+0x1e8>)
 800ea06:	4293      	cmp	r3, r2
 800ea08:	d004      	beq.n	800ea14 <HAL_SPI_Init+0x90>
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	4a58      	ldr	r2, [pc, #352]	; (800eb70 <HAL_SPI_Init+0x1ec>)
 800ea10:	4293      	cmp	r3, r2
 800ea12:	d104      	bne.n	800ea1e <HAL_SPI_Init+0x9a>
 800ea14:	68bb      	ldr	r3, [r7, #8]
 800ea16:	2b10      	cmp	r3, #16
 800ea18:	d901      	bls.n	800ea1e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800ea1a:	2301      	movs	r3, #1
 800ea1c:	e0a0      	b.n	800eb60 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ea24:	b2db      	uxtb	r3, r3
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d106      	bne.n	800ea38 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ea32:	6878      	ldr	r0, [r7, #4]
 800ea34:	f7f5 fa92 	bl	8003f5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	2202      	movs	r2, #2
 800ea3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	681a      	ldr	r2, [r3, #0]
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	f022 0201 	bic.w	r2, r2, #1
 800ea4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	699b      	ldr	r3, [r3, #24]
 800ea54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ea58:	d110      	bne.n	800ea7c <HAL_SPI_Init+0xf8>
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	685b      	ldr	r3, [r3, #4]
 800ea5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ea62:	d10b      	bne.n	800ea7c <HAL_SPI_Init+0xf8>
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d107      	bne.n	800ea7c <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	681a      	ldr	r2, [r3, #0]
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ea7a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	69da      	ldr	r2, [r3, #28]
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea84:	431a      	orrs	r2, r3
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	431a      	orrs	r2, r3
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea8e:	ea42 0103 	orr.w	r1, r2, r3
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	68da      	ldr	r2, [r3, #12]
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	430a      	orrs	r2, r1
 800ea9c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaa6:	431a      	orrs	r2, r3
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eaac:	431a      	orrs	r2, r3
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	699b      	ldr	r3, [r3, #24]
 800eab2:	431a      	orrs	r2, r3
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	691b      	ldr	r3, [r3, #16]
 800eab8:	431a      	orrs	r2, r3
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	695b      	ldr	r3, [r3, #20]
 800eabe:	431a      	orrs	r2, r3
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	6a1b      	ldr	r3, [r3, #32]
 800eac4:	431a      	orrs	r2, r3
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	685b      	ldr	r3, [r3, #4]
 800eaca:	431a      	orrs	r2, r3
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ead0:	431a      	orrs	r2, r3
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	689b      	ldr	r3, [r3, #8]
 800ead6:	431a      	orrs	r2, r3
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eadc:	ea42 0103 	orr.w	r1, r2, r3
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	430a      	orrs	r2, r1
 800eaea:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	685b      	ldr	r3, [r3, #4]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d113      	bne.n	800eb1c <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	689b      	ldr	r3, [r3, #8]
 800eafa:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eb06:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	689b      	ldr	r3, [r3, #8]
 800eb0e:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800eb1a:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	f022 0201 	bic.w	r2, r2, #1
 800eb2a:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	685b      	ldr	r3, [r3, #4]
 800eb30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d00a      	beq.n	800eb4e <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	68db      	ldr	r3, [r3, #12]
 800eb3e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	430a      	orrs	r2, r1
 800eb4c:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	2200      	movs	r2, #0
 800eb52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	2201      	movs	r2, #1
 800eb5a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800eb5e:	2300      	movs	r3, #0
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	3710      	adds	r7, #16
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}
 800eb68:	40013000 	.word	0x40013000
 800eb6c:	40003800 	.word	0x40003800
 800eb70:	40003c00 	.word	0x40003c00

0800eb74 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b08a      	sub	sp, #40	; 0x28
 800eb78:	af02      	add	r7, sp, #8
 800eb7a:	60f8      	str	r0, [r7, #12]
 800eb7c:	60b9      	str	r1, [r7, #8]
 800eb7e:	603b      	str	r3, [r7, #0]
 800eb80:	4613      	mov	r3, r2
 800eb82:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	3320      	adds	r3, #32
 800eb8a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eb96:	2b01      	cmp	r3, #1
 800eb98:	d101      	bne.n	800eb9e <HAL_SPI_Transmit+0x2a>
 800eb9a:	2302      	movs	r3, #2
 800eb9c:	e1d7      	b.n	800ef4e <HAL_SPI_Transmit+0x3da>
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	2201      	movs	r2, #1
 800eba2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800eba6:	f7f5 fd07 	bl	80045b8 <HAL_GetTick>
 800ebaa:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ebb2:	b2db      	uxtb	r3, r3
 800ebb4:	2b01      	cmp	r3, #1
 800ebb6:	d007      	beq.n	800ebc8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800ebb8:	2302      	movs	r3, #2
 800ebba:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ebc4:	7efb      	ldrb	r3, [r7, #27]
 800ebc6:	e1c2      	b.n	800ef4e <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ebc8:	68bb      	ldr	r3, [r7, #8]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d002      	beq.n	800ebd4 <HAL_SPI_Transmit+0x60>
 800ebce:	88fb      	ldrh	r3, [r7, #6]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d107      	bne.n	800ebe4 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800ebd4:	2301      	movs	r3, #1
 800ebd6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	2200      	movs	r2, #0
 800ebdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ebe0:	7efb      	ldrb	r3, [r7, #27]
 800ebe2:	e1b4      	b.n	800ef4e <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	2203      	movs	r2, #3
 800ebe8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	2200      	movs	r2, #0
 800ebf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	68ba      	ldr	r2, [r7, #8]
 800ebf8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	88fa      	ldrh	r2, [r7, #6]
 800ebfe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	88fa      	ldrh	r2, [r7, #6]
 800ec06:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	2200      	movs	r2, #0
 800ec14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	2200      	movs	r2, #0
 800ec24:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	2200      	movs	r2, #0
 800ec2a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	689b      	ldr	r3, [r3, #8]
 800ec30:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ec34:	d107      	bne.n	800ec46 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	681a      	ldr	r2, [r3, #0]
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ec44:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	685a      	ldr	r2, [r3, #4]
 800ec4c:	4b96      	ldr	r3, [pc, #600]	; (800eea8 <HAL_SPI_Transmit+0x334>)
 800ec4e:	4013      	ands	r3, r2
 800ec50:	88f9      	ldrh	r1, [r7, #6]
 800ec52:	68fa      	ldr	r2, [r7, #12]
 800ec54:	6812      	ldr	r2, [r2, #0]
 800ec56:	430b      	orrs	r3, r1
 800ec58:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	681a      	ldr	r2, [r3, #0]
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	f042 0201 	orr.w	r2, r2, #1
 800ec68:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	685b      	ldr	r3, [r3, #4]
 800ec6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ec72:	d107      	bne.n	800ec84 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	681a      	ldr	r2, [r3, #0]
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ec82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	68db      	ldr	r3, [r3, #12]
 800ec88:	2b0f      	cmp	r3, #15
 800ec8a:	d947      	bls.n	800ed1c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ec8c:	e03f      	b.n	800ed0e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	695b      	ldr	r3, [r3, #20]
 800ec94:	f003 0302 	and.w	r3, r3, #2
 800ec98:	2b02      	cmp	r3, #2
 800ec9a:	d114      	bne.n	800ecc6 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	6812      	ldr	r2, [r2, #0]
 800eca6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ecac:	1d1a      	adds	r2, r3, #4
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ecb8:	b29b      	uxth	r3, r3
 800ecba:	3b01      	subs	r3, #1
 800ecbc:	b29a      	uxth	r2, r3
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ecc4:	e023      	b.n	800ed0e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ecc6:	f7f5 fc77 	bl	80045b8 <HAL_GetTick>
 800ecca:	4602      	mov	r2, r0
 800eccc:	697b      	ldr	r3, [r7, #20]
 800ecce:	1ad3      	subs	r3, r2, r3
 800ecd0:	683a      	ldr	r2, [r7, #0]
 800ecd2:	429a      	cmp	r2, r3
 800ecd4:	d803      	bhi.n	800ecde <HAL_SPI_Transmit+0x16a>
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecdc:	d102      	bne.n	800ece4 <HAL_SPI_Transmit+0x170>
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d114      	bne.n	800ed0e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ece4:	68f8      	ldr	r0, [r7, #12]
 800ece6:	f000 fe15 	bl	800f914 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	2200      	movs	r2, #0
 800ecee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ecf8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	2201      	movs	r2, #1
 800ed06:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800ed0a:	2301      	movs	r3, #1
 800ed0c:	e11f      	b.n	800ef4e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed14:	b29b      	uxth	r3, r3
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d1b9      	bne.n	800ec8e <HAL_SPI_Transmit+0x11a>
 800ed1a:	e0f2      	b.n	800ef02 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	68db      	ldr	r3, [r3, #12]
 800ed20:	2b07      	cmp	r3, #7
 800ed22:	f240 80e7 	bls.w	800eef4 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ed26:	e05d      	b.n	800ede4 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	695b      	ldr	r3, [r3, #20]
 800ed2e:	f003 0302 	and.w	r3, r3, #2
 800ed32:	2b02      	cmp	r3, #2
 800ed34:	d132      	bne.n	800ed9c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed3c:	b29b      	uxth	r3, r3
 800ed3e:	2b01      	cmp	r3, #1
 800ed40:	d918      	bls.n	800ed74 <HAL_SPI_Transmit+0x200>
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d014      	beq.n	800ed74 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	6812      	ldr	r2, [r2, #0]
 800ed54:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed5a:	1d1a      	adds	r2, r3, #4
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed66:	b29b      	uxth	r3, r3
 800ed68:	3b02      	subs	r3, #2
 800ed6a:	b29a      	uxth	r2, r3
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ed72:	e037      	b.n	800ede4 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed78:	881a      	ldrh	r2, [r3, #0]
 800ed7a:	69fb      	ldr	r3, [r7, #28]
 800ed7c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed82:	1c9a      	adds	r2, r3, #2
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed8e:	b29b      	uxth	r3, r3
 800ed90:	3b01      	subs	r3, #1
 800ed92:	b29a      	uxth	r2, r3
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ed9a:	e023      	b.n	800ede4 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ed9c:	f7f5 fc0c 	bl	80045b8 <HAL_GetTick>
 800eda0:	4602      	mov	r2, r0
 800eda2:	697b      	ldr	r3, [r7, #20]
 800eda4:	1ad3      	subs	r3, r2, r3
 800eda6:	683a      	ldr	r2, [r7, #0]
 800eda8:	429a      	cmp	r2, r3
 800edaa:	d803      	bhi.n	800edb4 <HAL_SPI_Transmit+0x240>
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edb2:	d102      	bne.n	800edba <HAL_SPI_Transmit+0x246>
 800edb4:	683b      	ldr	r3, [r7, #0]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d114      	bne.n	800ede4 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800edba:	68f8      	ldr	r0, [r7, #12]
 800edbc:	f000 fdaa 	bl	800f914 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	2200      	movs	r2, #0
 800edc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800edce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	2201      	movs	r2, #1
 800eddc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800ede0:	2301      	movs	r3, #1
 800ede2:	e0b4      	b.n	800ef4e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800edea:	b29b      	uxth	r3, r3
 800edec:	2b00      	cmp	r3, #0
 800edee:	d19b      	bne.n	800ed28 <HAL_SPI_Transmit+0x1b4>
 800edf0:	e087      	b.n	800ef02 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	695b      	ldr	r3, [r3, #20]
 800edf8:	f003 0302 	and.w	r3, r3, #2
 800edfc:	2b02      	cmp	r3, #2
 800edfe:	d155      	bne.n	800eeac <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee06:	b29b      	uxth	r3, r3
 800ee08:	2b03      	cmp	r3, #3
 800ee0a:	d918      	bls.n	800ee3e <HAL_SPI_Transmit+0x2ca>
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee10:	2b40      	cmp	r3, #64	; 0x40
 800ee12:	d914      	bls.n	800ee3e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	6812      	ldr	r2, [r2, #0]
 800ee1e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee24:	1d1a      	adds	r2, r3, #4
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee30:	b29b      	uxth	r3, r3
 800ee32:	3b04      	subs	r3, #4
 800ee34:	b29a      	uxth	r2, r3
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ee3c:	e05a      	b.n	800eef4 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee44:	b29b      	uxth	r3, r3
 800ee46:	2b01      	cmp	r3, #1
 800ee48:	d917      	bls.n	800ee7a <HAL_SPI_Transmit+0x306>
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d013      	beq.n	800ee7a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee56:	881a      	ldrh	r2, [r3, #0]
 800ee58:	69fb      	ldr	r3, [r7, #28]
 800ee5a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee60:	1c9a      	adds	r2, r3, #2
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee6c:	b29b      	uxth	r3, r3
 800ee6e:	3b02      	subs	r3, #2
 800ee70:	b29a      	uxth	r2, r3
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ee78:	e03c      	b.n	800eef4 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	3320      	adds	r3, #32
 800ee84:	7812      	ldrb	r2, [r2, #0]
 800ee86:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee8c:	1c5a      	adds	r2, r3, #1
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee98:	b29b      	uxth	r3, r3
 800ee9a:	3b01      	subs	r3, #1
 800ee9c:	b29a      	uxth	r2, r3
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800eea4:	e026      	b.n	800eef4 <HAL_SPI_Transmit+0x380>
 800eea6:	bf00      	nop
 800eea8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eeac:	f7f5 fb84 	bl	80045b8 <HAL_GetTick>
 800eeb0:	4602      	mov	r2, r0
 800eeb2:	697b      	ldr	r3, [r7, #20]
 800eeb4:	1ad3      	subs	r3, r2, r3
 800eeb6:	683a      	ldr	r2, [r7, #0]
 800eeb8:	429a      	cmp	r2, r3
 800eeba:	d803      	bhi.n	800eec4 <HAL_SPI_Transmit+0x350>
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eec2:	d102      	bne.n	800eeca <HAL_SPI_Transmit+0x356>
 800eec4:	683b      	ldr	r3, [r7, #0]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d114      	bne.n	800eef4 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800eeca:	68f8      	ldr	r0, [r7, #12]
 800eecc:	f000 fd22 	bl	800f914 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	2200      	movs	r2, #0
 800eed4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eede:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	2201      	movs	r2, #1
 800eeec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800eef0:	2301      	movs	r3, #1
 800eef2:	e02c      	b.n	800ef4e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eefa:	b29b      	uxth	r3, r3
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	f47f af78 	bne.w	800edf2 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	9300      	str	r3, [sp, #0]
 800ef06:	697b      	ldr	r3, [r7, #20]
 800ef08:	2200      	movs	r2, #0
 800ef0a:	2108      	movs	r1, #8
 800ef0c:	68f8      	ldr	r0, [r7, #12]
 800ef0e:	f000 fda1 	bl	800fa54 <SPI_WaitOnFlagUntilTimeout>
 800ef12:	4603      	mov	r3, r0
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d007      	beq.n	800ef28 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef1e:	f043 0220 	orr.w	r2, r3, #32
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ef28:	68f8      	ldr	r0, [r7, #12]
 800ef2a:	f000 fcf3 	bl	800f914 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	2200      	movs	r2, #0
 800ef32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	2201      	movs	r2, #1
 800ef3a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d001      	beq.n	800ef4c <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800ef48:	2301      	movs	r3, #1
 800ef4a:	e000      	b.n	800ef4e <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800ef4c:	7efb      	ldrb	r3, [r7, #27]
}
 800ef4e:	4618      	mov	r0, r3
 800ef50:	3720      	adds	r7, #32
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}
 800ef56:	bf00      	nop

0800ef58 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b08a      	sub	sp, #40	; 0x28
 800ef5c:	af02      	add	r7, sp, #8
 800ef5e:	60f8      	str	r0, [r7, #12]
 800ef60:	60b9      	str	r1, [r7, #8]
 800ef62:	603b      	str	r3, [r7, #0]
 800ef64:	4613      	mov	r3, r2
 800ef66:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ef68:	2300      	movs	r3, #0
 800ef6a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	3330      	adds	r3, #48	; 0x30
 800ef72:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	685b      	ldr	r3, [r3, #4]
 800ef78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ef7c:	d112      	bne.n	800efa4 <HAL_SPI_Receive+0x4c>
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	689b      	ldr	r3, [r3, #8]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d10e      	bne.n	800efa4 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	2204      	movs	r2, #4
 800ef8a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ef8e:	88fa      	ldrh	r2, [r7, #6]
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	9300      	str	r3, [sp, #0]
 800ef94:	4613      	mov	r3, r2
 800ef96:	68ba      	ldr	r2, [r7, #8]
 800ef98:	68b9      	ldr	r1, [r7, #8]
 800ef9a:	68f8      	ldr	r0, [r7, #12]
 800ef9c:	f000 f9ce 	bl	800f33c <HAL_SPI_TransmitReceive>
 800efa0:	4603      	mov	r3, r0
 800efa2:	e1c7      	b.n	800f334 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800efaa:	2b01      	cmp	r3, #1
 800efac:	d101      	bne.n	800efb2 <HAL_SPI_Receive+0x5a>
 800efae:	2302      	movs	r3, #2
 800efb0:	e1c0      	b.n	800f334 <HAL_SPI_Receive+0x3dc>
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	2201      	movs	r2, #1
 800efb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800efba:	f7f5 fafd 	bl	80045b8 <HAL_GetTick>
 800efbe:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800efc6:	b2db      	uxtb	r3, r3
 800efc8:	2b01      	cmp	r3, #1
 800efca:	d007      	beq.n	800efdc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800efcc:	2302      	movs	r3, #2
 800efce:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	2200      	movs	r2, #0
 800efd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800efd8:	7ffb      	ldrb	r3, [r7, #31]
 800efda:	e1ab      	b.n	800f334 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800efdc:	68bb      	ldr	r3, [r7, #8]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d002      	beq.n	800efe8 <HAL_SPI_Receive+0x90>
 800efe2:	88fb      	ldrh	r3, [r7, #6]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d107      	bne.n	800eff8 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800efe8:	2301      	movs	r3, #1
 800efea:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	2200      	movs	r2, #0
 800eff0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800eff4:	7ffb      	ldrb	r3, [r7, #31]
 800eff6:	e19d      	b.n	800f334 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	2204      	movs	r2, #4
 800effc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	2200      	movs	r2, #0
 800f004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	68ba      	ldr	r2, [r7, #8]
 800f00c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	88fa      	ldrh	r2, [r7, #6]
 800f012:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	88fa      	ldrh	r2, [r7, #6]
 800f01a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	2200      	movs	r2, #0
 800f022:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	2200      	movs	r2, #0
 800f028:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	2200      	movs	r2, #0
 800f030:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	2200      	movs	r2, #0
 800f038:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	2200      	movs	r2, #0
 800f03e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	689b      	ldr	r3, [r3, #8]
 800f044:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f048:	d107      	bne.n	800f05a <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	681a      	ldr	r2, [r3, #0]
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f058:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	685a      	ldr	r2, [r3, #4]
 800f060:	4b94      	ldr	r3, [pc, #592]	; (800f2b4 <HAL_SPI_Receive+0x35c>)
 800f062:	4013      	ands	r3, r2
 800f064:	88f9      	ldrh	r1, [r7, #6]
 800f066:	68fa      	ldr	r2, [r7, #12]
 800f068:	6812      	ldr	r2, [r2, #0]
 800f06a:	430b      	orrs	r3, r1
 800f06c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	681a      	ldr	r2, [r3, #0]
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	f042 0201 	orr.w	r2, r2, #1
 800f07c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	685b      	ldr	r3, [r3, #4]
 800f082:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f086:	d107      	bne.n	800f098 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	681a      	ldr	r2, [r3, #0]
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f096:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	68db      	ldr	r3, [r3, #12]
 800f09c:	2b0f      	cmp	r3, #15
 800f09e:	d948      	bls.n	800f132 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f0a0:	e040      	b.n	800f124 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	695a      	ldr	r2, [r3, #20]
 800f0a8:	f248 0308 	movw	r3, #32776	; 0x8008
 800f0ac:	4013      	ands	r3, r2
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d014      	beq.n	800f0dc <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	681a      	ldr	r2, [r3, #0]
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f0bc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0c2:	1d1a      	adds	r2, r3, #4
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f0ce:	b29b      	uxth	r3, r3
 800f0d0:	3b01      	subs	r3, #1
 800f0d2:	b29a      	uxth	r2, r3
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f0da:	e023      	b.n	800f124 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f0dc:	f7f5 fa6c 	bl	80045b8 <HAL_GetTick>
 800f0e0:	4602      	mov	r2, r0
 800f0e2:	697b      	ldr	r3, [r7, #20]
 800f0e4:	1ad3      	subs	r3, r2, r3
 800f0e6:	683a      	ldr	r2, [r7, #0]
 800f0e8:	429a      	cmp	r2, r3
 800f0ea:	d803      	bhi.n	800f0f4 <HAL_SPI_Receive+0x19c>
 800f0ec:	683b      	ldr	r3, [r7, #0]
 800f0ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0f2:	d102      	bne.n	800f0fa <HAL_SPI_Receive+0x1a2>
 800f0f4:	683b      	ldr	r3, [r7, #0]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d114      	bne.n	800f124 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f0fa:	68f8      	ldr	r0, [r7, #12]
 800f0fc:	f000 fc0a 	bl	800f914 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	2200      	movs	r2, #0
 800f104:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f10e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	2201      	movs	r2, #1
 800f11c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800f120:	2301      	movs	r3, #1
 800f122:	e107      	b.n	800f334 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f12a:	b29b      	uxth	r3, r3
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d1b8      	bne.n	800f0a2 <HAL_SPI_Receive+0x14a>
 800f130:	e0ed      	b.n	800f30e <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	68db      	ldr	r3, [r3, #12]
 800f136:	2b07      	cmp	r3, #7
 800f138:	f240 80e2 	bls.w	800f300 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f13c:	e05b      	b.n	800f1f6 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	695b      	ldr	r3, [r3, #20]
 800f144:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d030      	beq.n	800f1ae <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	695b      	ldr	r3, [r3, #20]
 800f152:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f156:	2b00      	cmp	r3, #0
 800f158:	d014      	beq.n	800f184 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	681a      	ldr	r2, [r3, #0]
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f162:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f164:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f16a:	1d1a      	adds	r2, r3, #4
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f176:	b29b      	uxth	r3, r3
 800f178:	3b02      	subs	r3, #2
 800f17a:	b29a      	uxth	r2, r3
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f182:	e038      	b.n	800f1f6 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f188:	69ba      	ldr	r2, [r7, #24]
 800f18a:	8812      	ldrh	r2, [r2, #0]
 800f18c:	b292      	uxth	r2, r2
 800f18e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f194:	1c9a      	adds	r2, r3, #2
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f1a0:	b29b      	uxth	r3, r3
 800f1a2:	3b01      	subs	r3, #1
 800f1a4:	b29a      	uxth	r2, r3
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f1ac:	e023      	b.n	800f1f6 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f1ae:	f7f5 fa03 	bl	80045b8 <HAL_GetTick>
 800f1b2:	4602      	mov	r2, r0
 800f1b4:	697b      	ldr	r3, [r7, #20]
 800f1b6:	1ad3      	subs	r3, r2, r3
 800f1b8:	683a      	ldr	r2, [r7, #0]
 800f1ba:	429a      	cmp	r2, r3
 800f1bc:	d803      	bhi.n	800f1c6 <HAL_SPI_Receive+0x26e>
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1c4:	d102      	bne.n	800f1cc <HAL_SPI_Receive+0x274>
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d114      	bne.n	800f1f6 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f1cc:	68f8      	ldr	r0, [r7, #12]
 800f1ce:	f000 fba1 	bl	800f914 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	2201      	movs	r2, #1
 800f1ee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800f1f2:	2301      	movs	r3, #1
 800f1f4:	e09e      	b.n	800f334 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f1fc:	b29b      	uxth	r3, r3
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d19d      	bne.n	800f13e <HAL_SPI_Receive+0x1e6>
 800f202:	e084      	b.n	800f30e <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	695b      	ldr	r3, [r3, #20]
 800f20a:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d052      	beq.n	800f2b8 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	695b      	ldr	r3, [r3, #20]
 800f218:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d014      	beq.n	800f24a <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	681a      	ldr	r2, [r3, #0]
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f228:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f22a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f230:	1d1a      	adds	r2, r3, #4
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f23c:	b29b      	uxth	r3, r3
 800f23e:	3b04      	subs	r3, #4
 800f240:	b29a      	uxth	r2, r3
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f248:	e05a      	b.n	800f300 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	695b      	ldr	r3, [r3, #20]
 800f250:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800f254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f258:	d914      	bls.n	800f284 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f25e:	69ba      	ldr	r2, [r7, #24]
 800f260:	8812      	ldrh	r2, [r2, #0]
 800f262:	b292      	uxth	r2, r2
 800f264:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f26a:	1c9a      	adds	r2, r3, #2
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f276:	b29b      	uxth	r3, r3
 800f278:	3b02      	subs	r3, #2
 800f27a:	b29a      	uxth	r2, r3
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f282:	e03d      	b.n	800f300 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f290:	7812      	ldrb	r2, [r2, #0]
 800f292:	b2d2      	uxtb	r2, r2
 800f294:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f29a:	1c5a      	adds	r2, r3, #1
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f2a6:	b29b      	uxth	r3, r3
 800f2a8:	3b01      	subs	r3, #1
 800f2aa:	b29a      	uxth	r2, r3
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f2b2:	e025      	b.n	800f300 <HAL_SPI_Receive+0x3a8>
 800f2b4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f2b8:	f7f5 f97e 	bl	80045b8 <HAL_GetTick>
 800f2bc:	4602      	mov	r2, r0
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	1ad3      	subs	r3, r2, r3
 800f2c2:	683a      	ldr	r2, [r7, #0]
 800f2c4:	429a      	cmp	r2, r3
 800f2c6:	d803      	bhi.n	800f2d0 <HAL_SPI_Receive+0x378>
 800f2c8:	683b      	ldr	r3, [r7, #0]
 800f2ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2ce:	d102      	bne.n	800f2d6 <HAL_SPI_Receive+0x37e>
 800f2d0:	683b      	ldr	r3, [r7, #0]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d114      	bne.n	800f300 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f2d6:	68f8      	ldr	r0, [r7, #12]
 800f2d8:	f000 fb1c 	bl	800f914 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	2200      	movs	r2, #0
 800f2e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	2201      	movs	r2, #1
 800f2f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800f2fc:	2301      	movs	r3, #1
 800f2fe:	e019      	b.n	800f334 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f306:	b29b      	uxth	r3, r3
 800f308:	2b00      	cmp	r3, #0
 800f30a:	f47f af7b 	bne.w	800f204 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f30e:	68f8      	ldr	r0, [r7, #12]
 800f310:	f000 fb00 	bl	800f914 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	2200      	movs	r2, #0
 800f318:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	2201      	movs	r2, #1
 800f320:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d001      	beq.n	800f332 <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800f32e:	2301      	movs	r3, #1
 800f330:	e000      	b.n	800f334 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800f332:	7ffb      	ldrb	r3, [r7, #31]
}
 800f334:	4618      	mov	r0, r3
 800f336:	3720      	adds	r7, #32
 800f338:	46bd      	mov	sp, r7
 800f33a:	bd80      	pop	{r7, pc}

0800f33c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b08e      	sub	sp, #56	; 0x38
 800f340:	af02      	add	r7, sp, #8
 800f342:	60f8      	str	r0, [r7, #12]
 800f344:	60b9      	str	r1, [r7, #8]
 800f346:	607a      	str	r2, [r7, #4]
 800f348:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f34a:	2300      	movs	r3, #0
 800f34c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	3320      	adds	r3, #32
 800f356:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	3330      	adds	r3, #48	; 0x30
 800f35e:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f366:	2b01      	cmp	r3, #1
 800f368:	d101      	bne.n	800f36e <HAL_SPI_TransmitReceive+0x32>
 800f36a:	2302      	movs	r3, #2
 800f36c:	e2ce      	b.n	800f90c <HAL_SPI_TransmitReceive+0x5d0>
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	2201      	movs	r2, #1
 800f372:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f376:	f7f5 f91f 	bl	80045b8 <HAL_GetTick>
 800f37a:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800f37c:	887b      	ldrh	r3, [r7, #2]
 800f37e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800f380:	887b      	ldrh	r3, [r7, #2]
 800f382:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f38a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	685b      	ldr	r3, [r3, #4]
 800f390:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f392:	7efb      	ldrb	r3, [r7, #27]
 800f394:	2b01      	cmp	r3, #1
 800f396:	d014      	beq.n	800f3c2 <HAL_SPI_TransmitReceive+0x86>
 800f398:	697b      	ldr	r3, [r7, #20]
 800f39a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f39e:	d106      	bne.n	800f3ae <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	689b      	ldr	r3, [r3, #8]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d102      	bne.n	800f3ae <HAL_SPI_TransmitReceive+0x72>
 800f3a8:	7efb      	ldrb	r3, [r7, #27]
 800f3aa:	2b04      	cmp	r3, #4
 800f3ac:	d009      	beq.n	800f3c2 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800f3ae:	2302      	movs	r3, #2
 800f3b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f3bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f3c0:	e2a4      	b.n	800f90c <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800f3c2:	68bb      	ldr	r3, [r7, #8]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d005      	beq.n	800f3d4 <HAL_SPI_TransmitReceive+0x98>
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d002      	beq.n	800f3d4 <HAL_SPI_TransmitReceive+0x98>
 800f3ce:	887b      	ldrh	r3, [r7, #2]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d109      	bne.n	800f3e8 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800f3d4:	2301      	movs	r3, #1
 800f3d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	2200      	movs	r2, #0
 800f3de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f3e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f3e6:	e291      	b.n	800f90c <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f3ee:	b2db      	uxtb	r3, r3
 800f3f0:	2b04      	cmp	r3, #4
 800f3f2:	d003      	beq.n	800f3fc <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	2205      	movs	r2, #5
 800f3f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	2200      	movs	r2, #0
 800f400:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	687a      	ldr	r2, [r7, #4]
 800f408:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	887a      	ldrh	r2, [r7, #2]
 800f40e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	887a      	ldrh	r2, [r7, #2]
 800f416:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	68ba      	ldr	r2, [r7, #8]
 800f41e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	887a      	ldrh	r2, [r7, #2]
 800f424:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	887a      	ldrh	r2, [r7, #2]
 800f42c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	2200      	movs	r2, #0
 800f434:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	2200      	movs	r2, #0
 800f43a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	685a      	ldr	r2, [r3, #4]
 800f442:	4b9f      	ldr	r3, [pc, #636]	; (800f6c0 <HAL_SPI_TransmitReceive+0x384>)
 800f444:	4013      	ands	r3, r2
 800f446:	8879      	ldrh	r1, [r7, #2]
 800f448:	68fa      	ldr	r2, [r7, #12]
 800f44a:	6812      	ldr	r2, [r2, #0]
 800f44c:	430b      	orrs	r3, r1
 800f44e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	681a      	ldr	r2, [r3, #0]
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	f042 0201 	orr.w	r2, r2, #1
 800f45e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	685b      	ldr	r3, [r3, #4]
 800f464:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f468:	d107      	bne.n	800f47a <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	681a      	ldr	r2, [r3, #0]
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f478:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	68db      	ldr	r3, [r3, #12]
 800f47e:	2b0f      	cmp	r3, #15
 800f480:	d970      	bls.n	800f564 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f482:	e068      	b.n	800f556 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	695b      	ldr	r3, [r3, #20]
 800f48a:	f003 0302 	and.w	r3, r3, #2
 800f48e:	2b02      	cmp	r3, #2
 800f490:	d11a      	bne.n	800f4c8 <HAL_SPI_TransmitReceive+0x18c>
 800f492:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f494:	2b00      	cmp	r3, #0
 800f496:	d017      	beq.n	800f4c8 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	6812      	ldr	r2, [r2, #0]
 800f4a2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f4a8:	1d1a      	adds	r2, r3, #4
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f4b4:	b29b      	uxth	r3, r3
 800f4b6:	3b01      	subs	r3, #1
 800f4b8:	b29a      	uxth	r2, r3
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f4c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	695a      	ldr	r2, [r3, #20]
 800f4ce:	f248 0308 	movw	r3, #32776	; 0x8008
 800f4d2:	4013      	ands	r3, r2
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d01a      	beq.n	800f50e <HAL_SPI_TransmitReceive+0x1d2>
 800f4d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d017      	beq.n	800f50e <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	681a      	ldr	r2, [r3, #0]
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f4e6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f4e8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f4ee:	1d1a      	adds	r2, r3, #4
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f4fa:	b29b      	uxth	r3, r3
 800f4fc:	3b01      	subs	r3, #1
 800f4fe:	b29a      	uxth	r2, r3
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f50c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f50e:	f7f5 f853 	bl	80045b8 <HAL_GetTick>
 800f512:	4602      	mov	r2, r0
 800f514:	69fb      	ldr	r3, [r7, #28]
 800f516:	1ad3      	subs	r3, r2, r3
 800f518:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f51a:	429a      	cmp	r2, r3
 800f51c:	d803      	bhi.n	800f526 <HAL_SPI_TransmitReceive+0x1ea>
 800f51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f520:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f524:	d102      	bne.n	800f52c <HAL_SPI_TransmitReceive+0x1f0>
 800f526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d114      	bne.n	800f556 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800f52c:	68f8      	ldr	r0, [r7, #12]
 800f52e:	f000 f9f1 	bl	800f914 <SPI_CloseTransfer>
      
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	2200      	movs	r2, #0
 800f536:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f540:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	2201      	movs	r2, #1
 800f54e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800f552:	2301      	movs	r3, #1
 800f554:	e1da      	b.n	800f90c <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f556:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d193      	bne.n	800f484 <HAL_SPI_TransmitReceive+0x148>
 800f55c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d190      	bne.n	800f484 <HAL_SPI_TransmitReceive+0x148>
 800f562:	e1ac      	b.n	800f8be <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	68db      	ldr	r3, [r3, #12]
 800f568:	2b07      	cmp	r3, #7
 800f56a:	f240 81a0 	bls.w	800f8ae <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f56e:	e0a9      	b.n	800f6c4 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	695b      	ldr	r3, [r3, #20]
 800f576:	f003 0302 	and.w	r3, r3, #2
 800f57a:	2b02      	cmp	r3, #2
 800f57c:	d139      	bne.n	800f5f2 <HAL_SPI_TransmitReceive+0x2b6>
 800f57e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f580:	2b00      	cmp	r3, #0
 800f582:	d036      	beq.n	800f5f2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f584:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f586:	2b01      	cmp	r3, #1
 800f588:	d91c      	bls.n	800f5c4 <HAL_SPI_TransmitReceive+0x288>
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d018      	beq.n	800f5c4 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	6812      	ldr	r2, [r2, #0]
 800f59c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f5a2:	1d1a      	adds	r2, r3, #4
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f5ae:	b29b      	uxth	r3, r3
 800f5b0:	3b02      	subs	r3, #2
 800f5b2:	b29a      	uxth	r2, r3
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f5c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f5c2:	e016      	b.n	800f5f2 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f5c8:	881a      	ldrh	r2, [r3, #0]
 800f5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5cc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f5d2:	1c9a      	adds	r2, r3, #2
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f5de:	b29b      	uxth	r3, r3
 800f5e0:	3b01      	subs	r3, #1
 800f5e2:	b29a      	uxth	r2, r3
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f5f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	695b      	ldr	r3, [r3, #20]
 800f5f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d03a      	beq.n	800f676 <HAL_SPI_TransmitReceive+0x33a>
 800f600:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f602:	2b00      	cmp	r3, #0
 800f604:	d037      	beq.n	800f676 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	695b      	ldr	r3, [r3, #20]
 800f60c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f610:	2b00      	cmp	r3, #0
 800f612:	d018      	beq.n	800f646 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	681a      	ldr	r2, [r3, #0]
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f61c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f61e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f624:	1d1a      	adds	r2, r3, #4
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f630:	b29b      	uxth	r3, r3
 800f632:	3b02      	subs	r3, #2
 800f634:	b29a      	uxth	r2, r3
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f642:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f644:	e017      	b.n	800f676 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f64a:	6a3a      	ldr	r2, [r7, #32]
 800f64c:	8812      	ldrh	r2, [r2, #0]
 800f64e:	b292      	uxth	r2, r2
 800f650:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f656:	1c9a      	adds	r2, r3, #2
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f662:	b29b      	uxth	r3, r3
 800f664:	3b01      	subs	r3, #1
 800f666:	b29a      	uxth	r2, r3
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f674:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f676:	f7f4 ff9f 	bl	80045b8 <HAL_GetTick>
 800f67a:	4602      	mov	r2, r0
 800f67c:	69fb      	ldr	r3, [r7, #28]
 800f67e:	1ad3      	subs	r3, r2, r3
 800f680:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f682:	429a      	cmp	r2, r3
 800f684:	d803      	bhi.n	800f68e <HAL_SPI_TransmitReceive+0x352>
 800f686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f68c:	d102      	bne.n	800f694 <HAL_SPI_TransmitReceive+0x358>
 800f68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f690:	2b00      	cmp	r3, #0
 800f692:	d117      	bne.n	800f6c4 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800f694:	68f8      	ldr	r0, [r7, #12]
 800f696:	f000 f93d 	bl	800f914 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	2200      	movs	r2, #0
 800f69e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f6a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	2201      	movs	r2, #1
 800f6b6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800f6ba:	2301      	movs	r3, #1
 800f6bc:	e126      	b.n	800f90c <HAL_SPI_TransmitReceive+0x5d0>
 800f6be:	bf00      	nop
 800f6c0:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f6c4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	f47f af52 	bne.w	800f570 <HAL_SPI_TransmitReceive+0x234>
 800f6cc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	f47f af4e 	bne.w	800f570 <HAL_SPI_TransmitReceive+0x234>
 800f6d4:	e0f3      	b.n	800f8be <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	695b      	ldr	r3, [r3, #20]
 800f6dc:	f003 0302 	and.w	r3, r3, #2
 800f6e0:	2b02      	cmp	r3, #2
 800f6e2:	d15a      	bne.n	800f79a <HAL_SPI_TransmitReceive+0x45e>
 800f6e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d057      	beq.n	800f79a <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800f6ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f6ec:	2b03      	cmp	r3, #3
 800f6ee:	d91c      	bls.n	800f72a <HAL_SPI_TransmitReceive+0x3ee>
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6f4:	2b40      	cmp	r3, #64	; 0x40
 800f6f6:	d918      	bls.n	800f72a <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	6812      	ldr	r2, [r2, #0]
 800f702:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f708:	1d1a      	adds	r2, r3, #4
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f714:	b29b      	uxth	r3, r3
 800f716:	3b04      	subs	r3, #4
 800f718:	b29a      	uxth	r2, r3
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f726:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f728:	e037      	b.n	800f79a <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f72a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f72c:	2b01      	cmp	r3, #1
 800f72e:	d91b      	bls.n	800f768 <HAL_SPI_TransmitReceive+0x42c>
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f734:	2b00      	cmp	r3, #0
 800f736:	d017      	beq.n	800f768 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f73c:	881a      	ldrh	r2, [r3, #0]
 800f73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f740:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f746:	1c9a      	adds	r2, r3, #2
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f752:	b29b      	uxth	r3, r3
 800f754:	3b02      	subs	r3, #2
 800f756:	b29a      	uxth	r2, r3
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f764:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f766:	e018      	b.n	800f79a <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	3320      	adds	r3, #32
 800f772:	7812      	ldrb	r2, [r2, #0]
 800f774:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f77a:	1c5a      	adds	r2, r3, #1
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f786:	b29b      	uxth	r3, r3
 800f788:	3b01      	subs	r3, #1
 800f78a:	b29a      	uxth	r2, r3
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f798:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	695b      	ldr	r3, [r3, #20]
 800f7a0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d05e      	beq.n	800f866 <HAL_SPI_TransmitReceive+0x52a>
 800f7a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d05b      	beq.n	800f866 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	695b      	ldr	r3, [r3, #20]
 800f7b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d018      	beq.n	800f7ee <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	681a      	ldr	r2, [r3, #0]
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f7c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f7c6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f7cc:	1d1a      	adds	r2, r3, #4
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f7d8:	b29b      	uxth	r3, r3
 800f7da:	3b04      	subs	r3, #4
 800f7dc:	b29a      	uxth	r2, r3
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f7ea:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f7ec:	e03b      	b.n	800f866 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	695b      	ldr	r3, [r3, #20]
 800f7f4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800f7f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f7fc:	d918      	bls.n	800f830 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f802:	6a3a      	ldr	r2, [r7, #32]
 800f804:	8812      	ldrh	r2, [r2, #0]
 800f806:	b292      	uxth	r2, r2
 800f808:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f80e:	1c9a      	adds	r2, r3, #2
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f81a:	b29b      	uxth	r3, r3
 800f81c:	3b02      	subs	r3, #2
 800f81e:	b29a      	uxth	r2, r3
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f82c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f82e:	e01a      	b.n	800f866 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f83c:	7812      	ldrb	r2, [r2, #0]
 800f83e:	b2d2      	uxtb	r2, r2
 800f840:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f846:	1c5a      	adds	r2, r3, #1
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f852:	b29b      	uxth	r3, r3
 800f854:	3b01      	subs	r3, #1
 800f856:	b29a      	uxth	r2, r3
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f864:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f866:	f7f4 fea7 	bl	80045b8 <HAL_GetTick>
 800f86a:	4602      	mov	r2, r0
 800f86c:	69fb      	ldr	r3, [r7, #28]
 800f86e:	1ad3      	subs	r3, r2, r3
 800f870:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f872:	429a      	cmp	r2, r3
 800f874:	d803      	bhi.n	800f87e <HAL_SPI_TransmitReceive+0x542>
 800f876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f87c:	d102      	bne.n	800f884 <HAL_SPI_TransmitReceive+0x548>
 800f87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f880:	2b00      	cmp	r3, #0
 800f882:	d114      	bne.n	800f8ae <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800f884:	68f8      	ldr	r0, [r7, #12]
 800f886:	f000 f845 	bl	800f914 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	2200      	movs	r2, #0
 800f88e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f898:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	2201      	movs	r2, #1
 800f8a6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800f8aa:	2301      	movs	r3, #1
 800f8ac:	e02e      	b.n	800f90c <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f8ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	f47f af10 	bne.w	800f6d6 <HAL_SPI_TransmitReceive+0x39a>
 800f8b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	f47f af0c 	bne.w	800f6d6 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800f8be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8c0:	9300      	str	r3, [sp, #0]
 800f8c2:	69fb      	ldr	r3, [r7, #28]
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	2108      	movs	r1, #8
 800f8c8:	68f8      	ldr	r0, [r7, #12]
 800f8ca:	f000 f8c3 	bl	800fa54 <SPI_WaitOnFlagUntilTimeout>
 800f8ce:	4603      	mov	r3, r0
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d007      	beq.n	800f8e4 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f8da:	f043 0220 	orr.w	r2, r3, #32
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f8e4:	68f8      	ldr	r0, [r7, #12]
 800f8e6:	f000 f815 	bl	800f914 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	2201      	movs	r2, #1
 800f8f6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f900:	2b00      	cmp	r3, #0
 800f902:	d001      	beq.n	800f908 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800f904:	2301      	movs	r3, #1
 800f906:	e001      	b.n	800f90c <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800f908:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800f90c:	4618      	mov	r0, r3
 800f90e:	3730      	adds	r7, #48	; 0x30
 800f910:	46bd      	mov	sp, r7
 800f912:	bd80      	pop	{r7, pc}

0800f914 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f914:	b480      	push	{r7}
 800f916:	b085      	sub	sp, #20
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	695b      	ldr	r3, [r3, #20]
 800f922:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	699a      	ldr	r2, [r3, #24]
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	f042 0208 	orr.w	r2, r2, #8
 800f932:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	699a      	ldr	r2, [r3, #24]
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	f042 0210 	orr.w	r2, r2, #16
 800f942:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	681a      	ldr	r2, [r3, #0]
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	f022 0201 	bic.w	r2, r2, #1
 800f952:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	6919      	ldr	r1, [r3, #16]
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	681a      	ldr	r2, [r3, #0]
 800f95e:	4b3c      	ldr	r3, [pc, #240]	; (800fa50 <SPI_CloseTransfer+0x13c>)
 800f960:	400b      	ands	r3, r1
 800f962:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	689a      	ldr	r2, [r3, #8]
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f972:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f97a:	b2db      	uxtb	r3, r3
 800f97c:	2b04      	cmp	r3, #4
 800f97e:	d014      	beq.n	800f9aa <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	f003 0320 	and.w	r3, r3, #32
 800f986:	2b00      	cmp	r3, #0
 800f988:	d00f      	beq.n	800f9aa <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f990:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	699a      	ldr	r2, [r3, #24]
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	f042 0220 	orr.w	r2, r2, #32
 800f9a8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f9b0:	b2db      	uxtb	r3, r3
 800f9b2:	2b03      	cmp	r3, #3
 800f9b4:	d014      	beq.n	800f9e0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d00f      	beq.n	800f9e0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f9c6:	f043 0204 	orr.w	r2, r3, #4
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	699a      	ldr	r2, [r3, #24]
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f9de:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d00f      	beq.n	800fa0a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f9f0:	f043 0201 	orr.w	r2, r3, #1
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	699a      	ldr	r2, [r3, #24]
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fa08:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d00f      	beq.n	800fa34 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa1a:	f043 0208 	orr.w	r2, r3, #8
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	699a      	ldr	r2, [r3, #24]
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fa32:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	2200      	movs	r2, #0
 800fa38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2200      	movs	r2, #0
 800fa40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800fa44:	bf00      	nop
 800fa46:	3714      	adds	r7, #20
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4e:	4770      	bx	lr
 800fa50:	fffffc90 	.word	0xfffffc90

0800fa54 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b084      	sub	sp, #16
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	60f8      	str	r0, [r7, #12]
 800fa5c:	60b9      	str	r1, [r7, #8]
 800fa5e:	603b      	str	r3, [r7, #0]
 800fa60:	4613      	mov	r3, r2
 800fa62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800fa64:	e010      	b.n	800fa88 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fa66:	f7f4 fda7 	bl	80045b8 <HAL_GetTick>
 800fa6a:	4602      	mov	r2, r0
 800fa6c:	683b      	ldr	r3, [r7, #0]
 800fa6e:	1ad3      	subs	r3, r2, r3
 800fa70:	69ba      	ldr	r2, [r7, #24]
 800fa72:	429a      	cmp	r2, r3
 800fa74:	d803      	bhi.n	800fa7e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800fa76:	69bb      	ldr	r3, [r7, #24]
 800fa78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa7c:	d102      	bne.n	800fa84 <SPI_WaitOnFlagUntilTimeout+0x30>
 800fa7e:	69bb      	ldr	r3, [r7, #24]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d101      	bne.n	800fa88 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800fa84:	2303      	movs	r3, #3
 800fa86:	e00f      	b.n	800faa8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	695a      	ldr	r2, [r3, #20]
 800fa8e:	68bb      	ldr	r3, [r7, #8]
 800fa90:	4013      	ands	r3, r2
 800fa92:	68ba      	ldr	r2, [r7, #8]
 800fa94:	429a      	cmp	r2, r3
 800fa96:	bf0c      	ite	eq
 800fa98:	2301      	moveq	r3, #1
 800fa9a:	2300      	movne	r3, #0
 800fa9c:	b2db      	uxtb	r3, r3
 800fa9e:	461a      	mov	r2, r3
 800faa0:	79fb      	ldrb	r3, [r7, #7]
 800faa2:	429a      	cmp	r2, r3
 800faa4:	d0df      	beq.n	800fa66 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800faa6:	2300      	movs	r3, #0
}
 800faa8:	4618      	mov	r0, r3
 800faaa:	3710      	adds	r7, #16
 800faac:	46bd      	mov	sp, r7
 800faae:	bd80      	pop	{r7, pc}

0800fab0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800fab0:	b480      	push	{r7}
 800fab2:	b085      	sub	sp, #20
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fabc:	095b      	lsrs	r3, r3, #5
 800fabe:	3301      	adds	r3, #1
 800fac0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	68db      	ldr	r3, [r3, #12]
 800fac6:	3301      	adds	r3, #1
 800fac8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800faca:	68bb      	ldr	r3, [r7, #8]
 800facc:	3307      	adds	r3, #7
 800face:	08db      	lsrs	r3, r3, #3
 800fad0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800fad2:	68bb      	ldr	r3, [r7, #8]
 800fad4:	68fa      	ldr	r2, [r7, #12]
 800fad6:	fb02 f303 	mul.w	r3, r2, r3
}
 800fada:	4618      	mov	r0, r3
 800fadc:	3714      	adds	r7, #20
 800fade:	46bd      	mov	sp, r7
 800fae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae4:	4770      	bx	lr

0800fae6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fae6:	b580      	push	{r7, lr}
 800fae8:	b082      	sub	sp, #8
 800faea:	af00      	add	r7, sp, #0
 800faec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d101      	bne.n	800faf8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800faf4:	2301      	movs	r3, #1
 800faf6:	e042      	b.n	800fb7e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d106      	bne.n	800fb10 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	2200      	movs	r2, #0
 800fb06:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fb0a:	6878      	ldr	r0, [r7, #4]
 800fb0c:	f7f4 fa70 	bl	8003ff0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	2224      	movs	r2, #36	; 0x24
 800fb14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	681a      	ldr	r2, [r3, #0]
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	f022 0201 	bic.w	r2, r2, #1
 800fb26:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fb28:	6878      	ldr	r0, [r7, #4]
 800fb2a:	f000 f95f 	bl	800fdec <UART_SetConfig>
 800fb2e:	4603      	mov	r3, r0
 800fb30:	2b01      	cmp	r3, #1
 800fb32:	d101      	bne.n	800fb38 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800fb34:	2301      	movs	r3, #1
 800fb36:	e022      	b.n	800fb7e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d002      	beq.n	800fb46 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800fb40:	6878      	ldr	r0, [r7, #4]
 800fb42:	f000 ff03 	bl	801094c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	685a      	ldr	r2, [r3, #4]
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fb54:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	689a      	ldr	r2, [r3, #8]
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fb64:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	681a      	ldr	r2, [r3, #0]
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	f042 0201 	orr.w	r2, r2, #1
 800fb74:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fb76:	6878      	ldr	r0, [r7, #4]
 800fb78:	f000 ff8a 	bl	8010a90 <UART_CheckIdleState>
 800fb7c:	4603      	mov	r3, r0
}
 800fb7e:	4618      	mov	r0, r3
 800fb80:	3708      	adds	r7, #8
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}

0800fb86 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fb86:	b580      	push	{r7, lr}
 800fb88:	b08a      	sub	sp, #40	; 0x28
 800fb8a:	af02      	add	r7, sp, #8
 800fb8c:	60f8      	str	r0, [r7, #12]
 800fb8e:	60b9      	str	r1, [r7, #8]
 800fb90:	603b      	str	r3, [r7, #0]
 800fb92:	4613      	mov	r3, r2
 800fb94:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb9c:	2b20      	cmp	r3, #32
 800fb9e:	f040 8083 	bne.w	800fca8 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800fba2:	68bb      	ldr	r3, [r7, #8]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d002      	beq.n	800fbae <HAL_UART_Transmit+0x28>
 800fba8:	88fb      	ldrh	r3, [r7, #6]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d101      	bne.n	800fbb2 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800fbae:	2301      	movs	r3, #1
 800fbb0:	e07b      	b.n	800fcaa <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800fbb8:	2b01      	cmp	r3, #1
 800fbba:	d101      	bne.n	800fbc0 <HAL_UART_Transmit+0x3a>
 800fbbc:	2302      	movs	r3, #2
 800fbbe:	e074      	b.n	800fcaa <HAL_UART_Transmit+0x124>
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	2201      	movs	r2, #1
 800fbc4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	2200      	movs	r2, #0
 800fbcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	2221      	movs	r2, #33	; 0x21
 800fbd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800fbd8:	f7f4 fcee 	bl	80045b8 <HAL_GetTick>
 800fbdc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	88fa      	ldrh	r2, [r7, #6]
 800fbe2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	88fa      	ldrh	r2, [r7, #6]
 800fbea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	689b      	ldr	r3, [r3, #8]
 800fbf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fbf6:	d108      	bne.n	800fc0a <HAL_UART_Transmit+0x84>
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	691b      	ldr	r3, [r3, #16]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d104      	bne.n	800fc0a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800fc00:	2300      	movs	r3, #0
 800fc02:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fc04:	68bb      	ldr	r3, [r7, #8]
 800fc06:	61bb      	str	r3, [r7, #24]
 800fc08:	e003      	b.n	800fc12 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800fc0a:	68bb      	ldr	r3, [r7, #8]
 800fc0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fc0e:	2300      	movs	r3, #0
 800fc10:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	2200      	movs	r2, #0
 800fc16:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800fc1a:	e02c      	b.n	800fc76 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fc1c:	683b      	ldr	r3, [r7, #0]
 800fc1e:	9300      	str	r3, [sp, #0]
 800fc20:	697b      	ldr	r3, [r7, #20]
 800fc22:	2200      	movs	r2, #0
 800fc24:	2180      	movs	r1, #128	; 0x80
 800fc26:	68f8      	ldr	r0, [r7, #12]
 800fc28:	f000 ff7a 	bl	8010b20 <UART_WaitOnFlagUntilTimeout>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d001      	beq.n	800fc36 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800fc32:	2303      	movs	r3, #3
 800fc34:	e039      	b.n	800fcaa <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800fc36:	69fb      	ldr	r3, [r7, #28]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d10b      	bne.n	800fc54 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fc3c:	69bb      	ldr	r3, [r7, #24]
 800fc3e:	881b      	ldrh	r3, [r3, #0]
 800fc40:	461a      	mov	r2, r3
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fc4a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800fc4c:	69bb      	ldr	r3, [r7, #24]
 800fc4e:	3302      	adds	r3, #2
 800fc50:	61bb      	str	r3, [r7, #24]
 800fc52:	e007      	b.n	800fc64 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800fc54:	69fb      	ldr	r3, [r7, #28]
 800fc56:	781a      	ldrb	r2, [r3, #0]
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800fc5e:	69fb      	ldr	r3, [r7, #28]
 800fc60:	3301      	adds	r3, #1
 800fc62:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fc6a:	b29b      	uxth	r3, r3
 800fc6c:	3b01      	subs	r3, #1
 800fc6e:	b29a      	uxth	r2, r3
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fc7c:	b29b      	uxth	r3, r3
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d1cc      	bne.n	800fc1c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fc82:	683b      	ldr	r3, [r7, #0]
 800fc84:	9300      	str	r3, [sp, #0]
 800fc86:	697b      	ldr	r3, [r7, #20]
 800fc88:	2200      	movs	r2, #0
 800fc8a:	2140      	movs	r1, #64	; 0x40
 800fc8c:	68f8      	ldr	r0, [r7, #12]
 800fc8e:	f000 ff47 	bl	8010b20 <UART_WaitOnFlagUntilTimeout>
 800fc92:	4603      	mov	r3, r0
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d001      	beq.n	800fc9c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800fc98:	2303      	movs	r3, #3
 800fc9a:	e006      	b.n	800fcaa <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	2220      	movs	r2, #32
 800fca0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800fca4:	2300      	movs	r3, #0
 800fca6:	e000      	b.n	800fcaa <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800fca8:	2302      	movs	r3, #2
  }
}
 800fcaa:	4618      	mov	r0, r3
 800fcac:	3720      	adds	r7, #32
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	bd80      	pop	{r7, pc}
	...

0800fcb4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b084      	sub	sp, #16
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	60f8      	str	r0, [r7, #12]
 800fcbc:	60b9      	str	r1, [r7, #8]
 800fcbe:	4613      	mov	r3, r2
 800fcc0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fcc8:	2b20      	cmp	r3, #32
 800fcca:	d170      	bne.n	800fdae <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 800fccc:	68bb      	ldr	r3, [r7, #8]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d002      	beq.n	800fcd8 <HAL_UART_Receive_DMA+0x24>
 800fcd2:	88fb      	ldrh	r3, [r7, #6]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d101      	bne.n	800fcdc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800fcd8:	2301      	movs	r3, #1
 800fcda:	e069      	b.n	800fdb0 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800fce2:	2b01      	cmp	r3, #1
 800fce4:	d101      	bne.n	800fcea <HAL_UART_Receive_DMA+0x36>
 800fce6:	2302      	movs	r3, #2
 800fce8:	e062      	b.n	800fdb0 <HAL_UART_Receive_DMA+0xfc>
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	2201      	movs	r2, #1
 800fcee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	68ba      	ldr	r2, [r7, #8]
 800fcf6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	88fa      	ldrh	r2, [r7, #6]
 800fcfc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	2200      	movs	r2, #0
 800fd04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	2222      	movs	r2, #34	; 0x22
 800fd0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d02c      	beq.n	800fd72 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd1c:	4a26      	ldr	r2, [pc, #152]	; (800fdb8 <HAL_UART_Receive_DMA+0x104>)
 800fd1e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd24:	4a25      	ldr	r2, [pc, #148]	; (800fdbc <HAL_UART_Receive_DMA+0x108>)
 800fd26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd2c:	4a24      	ldr	r2, [pc, #144]	; (800fdc0 <HAL_UART_Receive_DMA+0x10c>)
 800fd2e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd34:	2200      	movs	r2, #0
 800fd36:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	3324      	adds	r3, #36	; 0x24
 800fd42:	4619      	mov	r1, r3
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd48:	461a      	mov	r2, r3
 800fd4a:	88fb      	ldrh	r3, [r7, #6]
 800fd4c:	f7f5 f8da 	bl	8004f04 <HAL_DMA_Start_IT>
 800fd50:	4603      	mov	r3, r0
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d00d      	beq.n	800fd72 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	2210      	movs	r2, #16
 800fd5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	2200      	movs	r2, #0
 800fd62:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	2220      	movs	r2, #32
 800fd6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800fd6e:	2301      	movs	r3, #1
 800fd70:	e01e      	b.n	800fdb0 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	2200      	movs	r2, #0
 800fd76:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	681a      	ldr	r2, [r3, #0]
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fd88:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	689a      	ldr	r2, [r3, #8]
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	f042 0201 	orr.w	r2, r2, #1
 800fd98:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	689a      	ldr	r2, [r3, #8]
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fda8:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800fdaa:	2300      	movs	r3, #0
 800fdac:	e000      	b.n	800fdb0 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800fdae:	2302      	movs	r3, #2
  }
}
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	3710      	adds	r7, #16
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	bd80      	pop	{r7, pc}
 800fdb8:	08010ca5 	.word	0x08010ca5
 800fdbc:	08010d0b 	.word	0x08010d0b
 800fdc0:	08010d27 	.word	0x08010d27

0800fdc4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800fdc4:	b480      	push	{r7}
 800fdc6:	b083      	sub	sp, #12
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800fdcc:	bf00      	nop
 800fdce:	370c      	adds	r7, #12
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd6:	4770      	bx	lr

0800fdd8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fdd8:	b480      	push	{r7}
 800fdda:	b083      	sub	sp, #12
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fde0:	bf00      	nop
 800fde2:	370c      	adds	r7, #12
 800fde4:	46bd      	mov	sp, r7
 800fde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdea:	4770      	bx	lr

0800fdec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fdec:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800fdf0:	b08e      	sub	sp, #56	; 0x38
 800fdf2:	af00      	add	r7, sp, #0
 800fdf4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	689a      	ldr	r2, [r3, #8]
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	691b      	ldr	r3, [r3, #16]
 800fe04:	431a      	orrs	r2, r3
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	695b      	ldr	r3, [r3, #20]
 800fe0a:	431a      	orrs	r2, r3
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	69db      	ldr	r3, [r3, #28]
 800fe10:	4313      	orrs	r3, r2
 800fe12:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fe18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe1a:	4313      	orrs	r3, r2
 800fe1c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	681a      	ldr	r2, [r3, #0]
 800fe24:	4bc1      	ldr	r3, [pc, #772]	; (801012c <UART_SetConfig+0x340>)
 800fe26:	4013      	ands	r3, r2
 800fe28:	687a      	ldr	r2, [r7, #4]
 800fe2a:	6812      	ldr	r2, [r2, #0]
 800fe2c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fe2e:	430b      	orrs	r3, r1
 800fe30:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	685b      	ldr	r3, [r3, #4]
 800fe38:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	68da      	ldr	r2, [r3, #12]
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	430a      	orrs	r2, r1
 800fe46:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	699b      	ldr	r3, [r3, #24]
 800fe4c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	4ab7      	ldr	r2, [pc, #732]	; (8010130 <UART_SetConfig+0x344>)
 800fe54:	4293      	cmp	r3, r2
 800fe56:	d004      	beq.n	800fe62 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	6a1b      	ldr	r3, [r3, #32]
 800fe5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe5e:	4313      	orrs	r3, r2
 800fe60:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	689a      	ldr	r2, [r3, #8]
 800fe68:	4bb2      	ldr	r3, [pc, #712]	; (8010134 <UART_SetConfig+0x348>)
 800fe6a:	4013      	ands	r3, r2
 800fe6c:	687a      	ldr	r2, [r7, #4]
 800fe6e:	6812      	ldr	r2, [r2, #0]
 800fe70:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fe72:	430b      	orrs	r3, r1
 800fe74:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe7c:	f023 010f 	bic.w	r1, r3, #15
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	430a      	orrs	r2, r1
 800fe8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	4aa9      	ldr	r2, [pc, #676]	; (8010138 <UART_SetConfig+0x34c>)
 800fe92:	4293      	cmp	r3, r2
 800fe94:	d177      	bne.n	800ff86 <UART_SetConfig+0x19a>
 800fe96:	4ba9      	ldr	r3, [pc, #676]	; (801013c <UART_SetConfig+0x350>)
 800fe98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fe9e:	2b28      	cmp	r3, #40	; 0x28
 800fea0:	d86c      	bhi.n	800ff7c <UART_SetConfig+0x190>
 800fea2:	a201      	add	r2, pc, #4	; (adr r2, 800fea8 <UART_SetConfig+0xbc>)
 800fea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fea8:	0800ff4d 	.word	0x0800ff4d
 800feac:	0800ff7d 	.word	0x0800ff7d
 800feb0:	0800ff7d 	.word	0x0800ff7d
 800feb4:	0800ff7d 	.word	0x0800ff7d
 800feb8:	0800ff7d 	.word	0x0800ff7d
 800febc:	0800ff7d 	.word	0x0800ff7d
 800fec0:	0800ff7d 	.word	0x0800ff7d
 800fec4:	0800ff7d 	.word	0x0800ff7d
 800fec8:	0800ff55 	.word	0x0800ff55
 800fecc:	0800ff7d 	.word	0x0800ff7d
 800fed0:	0800ff7d 	.word	0x0800ff7d
 800fed4:	0800ff7d 	.word	0x0800ff7d
 800fed8:	0800ff7d 	.word	0x0800ff7d
 800fedc:	0800ff7d 	.word	0x0800ff7d
 800fee0:	0800ff7d 	.word	0x0800ff7d
 800fee4:	0800ff7d 	.word	0x0800ff7d
 800fee8:	0800ff5d 	.word	0x0800ff5d
 800feec:	0800ff7d 	.word	0x0800ff7d
 800fef0:	0800ff7d 	.word	0x0800ff7d
 800fef4:	0800ff7d 	.word	0x0800ff7d
 800fef8:	0800ff7d 	.word	0x0800ff7d
 800fefc:	0800ff7d 	.word	0x0800ff7d
 800ff00:	0800ff7d 	.word	0x0800ff7d
 800ff04:	0800ff7d 	.word	0x0800ff7d
 800ff08:	0800ff65 	.word	0x0800ff65
 800ff0c:	0800ff7d 	.word	0x0800ff7d
 800ff10:	0800ff7d 	.word	0x0800ff7d
 800ff14:	0800ff7d 	.word	0x0800ff7d
 800ff18:	0800ff7d 	.word	0x0800ff7d
 800ff1c:	0800ff7d 	.word	0x0800ff7d
 800ff20:	0800ff7d 	.word	0x0800ff7d
 800ff24:	0800ff7d 	.word	0x0800ff7d
 800ff28:	0800ff6d 	.word	0x0800ff6d
 800ff2c:	0800ff7d 	.word	0x0800ff7d
 800ff30:	0800ff7d 	.word	0x0800ff7d
 800ff34:	0800ff7d 	.word	0x0800ff7d
 800ff38:	0800ff7d 	.word	0x0800ff7d
 800ff3c:	0800ff7d 	.word	0x0800ff7d
 800ff40:	0800ff7d 	.word	0x0800ff7d
 800ff44:	0800ff7d 	.word	0x0800ff7d
 800ff48:	0800ff75 	.word	0x0800ff75
 800ff4c:	2301      	movs	r3, #1
 800ff4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff52:	e233      	b.n	80103bc <UART_SetConfig+0x5d0>
 800ff54:	2304      	movs	r3, #4
 800ff56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff5a:	e22f      	b.n	80103bc <UART_SetConfig+0x5d0>
 800ff5c:	2308      	movs	r3, #8
 800ff5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff62:	e22b      	b.n	80103bc <UART_SetConfig+0x5d0>
 800ff64:	2310      	movs	r3, #16
 800ff66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff6a:	e227      	b.n	80103bc <UART_SetConfig+0x5d0>
 800ff6c:	2320      	movs	r3, #32
 800ff6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff72:	e223      	b.n	80103bc <UART_SetConfig+0x5d0>
 800ff74:	2340      	movs	r3, #64	; 0x40
 800ff76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff7a:	e21f      	b.n	80103bc <UART_SetConfig+0x5d0>
 800ff7c:	2380      	movs	r3, #128	; 0x80
 800ff7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff82:	bf00      	nop
 800ff84:	e21a      	b.n	80103bc <UART_SetConfig+0x5d0>
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	4a6d      	ldr	r2, [pc, #436]	; (8010140 <UART_SetConfig+0x354>)
 800ff8c:	4293      	cmp	r3, r2
 800ff8e:	d132      	bne.n	800fff6 <UART_SetConfig+0x20a>
 800ff90:	4b6a      	ldr	r3, [pc, #424]	; (801013c <UART_SetConfig+0x350>)
 800ff92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff94:	f003 0307 	and.w	r3, r3, #7
 800ff98:	2b05      	cmp	r3, #5
 800ff9a:	d827      	bhi.n	800ffec <UART_SetConfig+0x200>
 800ff9c:	a201      	add	r2, pc, #4	; (adr r2, 800ffa4 <UART_SetConfig+0x1b8>)
 800ff9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffa2:	bf00      	nop
 800ffa4:	0800ffbd 	.word	0x0800ffbd
 800ffa8:	0800ffc5 	.word	0x0800ffc5
 800ffac:	0800ffcd 	.word	0x0800ffcd
 800ffb0:	0800ffd5 	.word	0x0800ffd5
 800ffb4:	0800ffdd 	.word	0x0800ffdd
 800ffb8:	0800ffe5 	.word	0x0800ffe5
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffc2:	e1fb      	b.n	80103bc <UART_SetConfig+0x5d0>
 800ffc4:	2304      	movs	r3, #4
 800ffc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffca:	e1f7      	b.n	80103bc <UART_SetConfig+0x5d0>
 800ffcc:	2308      	movs	r3, #8
 800ffce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffd2:	e1f3      	b.n	80103bc <UART_SetConfig+0x5d0>
 800ffd4:	2310      	movs	r3, #16
 800ffd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffda:	e1ef      	b.n	80103bc <UART_SetConfig+0x5d0>
 800ffdc:	2320      	movs	r3, #32
 800ffde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffe2:	e1eb      	b.n	80103bc <UART_SetConfig+0x5d0>
 800ffe4:	2340      	movs	r3, #64	; 0x40
 800ffe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffea:	e1e7      	b.n	80103bc <UART_SetConfig+0x5d0>
 800ffec:	2380      	movs	r3, #128	; 0x80
 800ffee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fff2:	bf00      	nop
 800fff4:	e1e2      	b.n	80103bc <UART_SetConfig+0x5d0>
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	4a52      	ldr	r2, [pc, #328]	; (8010144 <UART_SetConfig+0x358>)
 800fffc:	4293      	cmp	r3, r2
 800fffe:	d132      	bne.n	8010066 <UART_SetConfig+0x27a>
 8010000:	4b4e      	ldr	r3, [pc, #312]	; (801013c <UART_SetConfig+0x350>)
 8010002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010004:	f003 0307 	and.w	r3, r3, #7
 8010008:	2b05      	cmp	r3, #5
 801000a:	d827      	bhi.n	801005c <UART_SetConfig+0x270>
 801000c:	a201      	add	r2, pc, #4	; (adr r2, 8010014 <UART_SetConfig+0x228>)
 801000e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010012:	bf00      	nop
 8010014:	0801002d 	.word	0x0801002d
 8010018:	08010035 	.word	0x08010035
 801001c:	0801003d 	.word	0x0801003d
 8010020:	08010045 	.word	0x08010045
 8010024:	0801004d 	.word	0x0801004d
 8010028:	08010055 	.word	0x08010055
 801002c:	2300      	movs	r3, #0
 801002e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010032:	e1c3      	b.n	80103bc <UART_SetConfig+0x5d0>
 8010034:	2304      	movs	r3, #4
 8010036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801003a:	e1bf      	b.n	80103bc <UART_SetConfig+0x5d0>
 801003c:	2308      	movs	r3, #8
 801003e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010042:	e1bb      	b.n	80103bc <UART_SetConfig+0x5d0>
 8010044:	2310      	movs	r3, #16
 8010046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801004a:	e1b7      	b.n	80103bc <UART_SetConfig+0x5d0>
 801004c:	2320      	movs	r3, #32
 801004e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010052:	e1b3      	b.n	80103bc <UART_SetConfig+0x5d0>
 8010054:	2340      	movs	r3, #64	; 0x40
 8010056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801005a:	e1af      	b.n	80103bc <UART_SetConfig+0x5d0>
 801005c:	2380      	movs	r3, #128	; 0x80
 801005e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010062:	bf00      	nop
 8010064:	e1aa      	b.n	80103bc <UART_SetConfig+0x5d0>
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	4a37      	ldr	r2, [pc, #220]	; (8010148 <UART_SetConfig+0x35c>)
 801006c:	4293      	cmp	r3, r2
 801006e:	d132      	bne.n	80100d6 <UART_SetConfig+0x2ea>
 8010070:	4b32      	ldr	r3, [pc, #200]	; (801013c <UART_SetConfig+0x350>)
 8010072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010074:	f003 0307 	and.w	r3, r3, #7
 8010078:	2b05      	cmp	r3, #5
 801007a:	d827      	bhi.n	80100cc <UART_SetConfig+0x2e0>
 801007c:	a201      	add	r2, pc, #4	; (adr r2, 8010084 <UART_SetConfig+0x298>)
 801007e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010082:	bf00      	nop
 8010084:	0801009d 	.word	0x0801009d
 8010088:	080100a5 	.word	0x080100a5
 801008c:	080100ad 	.word	0x080100ad
 8010090:	080100b5 	.word	0x080100b5
 8010094:	080100bd 	.word	0x080100bd
 8010098:	080100c5 	.word	0x080100c5
 801009c:	2300      	movs	r3, #0
 801009e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100a2:	e18b      	b.n	80103bc <UART_SetConfig+0x5d0>
 80100a4:	2304      	movs	r3, #4
 80100a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100aa:	e187      	b.n	80103bc <UART_SetConfig+0x5d0>
 80100ac:	2308      	movs	r3, #8
 80100ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100b2:	e183      	b.n	80103bc <UART_SetConfig+0x5d0>
 80100b4:	2310      	movs	r3, #16
 80100b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100ba:	e17f      	b.n	80103bc <UART_SetConfig+0x5d0>
 80100bc:	2320      	movs	r3, #32
 80100be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100c2:	e17b      	b.n	80103bc <UART_SetConfig+0x5d0>
 80100c4:	2340      	movs	r3, #64	; 0x40
 80100c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100ca:	e177      	b.n	80103bc <UART_SetConfig+0x5d0>
 80100cc:	2380      	movs	r3, #128	; 0x80
 80100ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100d2:	bf00      	nop
 80100d4:	e172      	b.n	80103bc <UART_SetConfig+0x5d0>
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	4a1c      	ldr	r2, [pc, #112]	; (801014c <UART_SetConfig+0x360>)
 80100dc:	4293      	cmp	r3, r2
 80100de:	d144      	bne.n	801016a <UART_SetConfig+0x37e>
 80100e0:	4b16      	ldr	r3, [pc, #88]	; (801013c <UART_SetConfig+0x350>)
 80100e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80100e4:	f003 0307 	and.w	r3, r3, #7
 80100e8:	2b05      	cmp	r3, #5
 80100ea:	d839      	bhi.n	8010160 <UART_SetConfig+0x374>
 80100ec:	a201      	add	r2, pc, #4	; (adr r2, 80100f4 <UART_SetConfig+0x308>)
 80100ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100f2:	bf00      	nop
 80100f4:	0801010d 	.word	0x0801010d
 80100f8:	08010115 	.word	0x08010115
 80100fc:	0801011d 	.word	0x0801011d
 8010100:	08010125 	.word	0x08010125
 8010104:	08010151 	.word	0x08010151
 8010108:	08010159 	.word	0x08010159
 801010c:	2300      	movs	r3, #0
 801010e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010112:	e153      	b.n	80103bc <UART_SetConfig+0x5d0>
 8010114:	2304      	movs	r3, #4
 8010116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801011a:	e14f      	b.n	80103bc <UART_SetConfig+0x5d0>
 801011c:	2308      	movs	r3, #8
 801011e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010122:	e14b      	b.n	80103bc <UART_SetConfig+0x5d0>
 8010124:	2310      	movs	r3, #16
 8010126:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801012a:	e147      	b.n	80103bc <UART_SetConfig+0x5d0>
 801012c:	cfff69f3 	.word	0xcfff69f3
 8010130:	58000c00 	.word	0x58000c00
 8010134:	11fff4ff 	.word	0x11fff4ff
 8010138:	40011000 	.word	0x40011000
 801013c:	58024400 	.word	0x58024400
 8010140:	40004400 	.word	0x40004400
 8010144:	40004800 	.word	0x40004800
 8010148:	40004c00 	.word	0x40004c00
 801014c:	40005000 	.word	0x40005000
 8010150:	2320      	movs	r3, #32
 8010152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010156:	e131      	b.n	80103bc <UART_SetConfig+0x5d0>
 8010158:	2340      	movs	r3, #64	; 0x40
 801015a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801015e:	e12d      	b.n	80103bc <UART_SetConfig+0x5d0>
 8010160:	2380      	movs	r3, #128	; 0x80
 8010162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010166:	bf00      	nop
 8010168:	e128      	b.n	80103bc <UART_SetConfig+0x5d0>
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	4ab6      	ldr	r2, [pc, #728]	; (8010448 <UART_SetConfig+0x65c>)
 8010170:	4293      	cmp	r3, r2
 8010172:	d178      	bne.n	8010266 <UART_SetConfig+0x47a>
 8010174:	4bb5      	ldr	r3, [pc, #724]	; (801044c <UART_SetConfig+0x660>)
 8010176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010178:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801017c:	2b28      	cmp	r3, #40	; 0x28
 801017e:	d86d      	bhi.n	801025c <UART_SetConfig+0x470>
 8010180:	a201      	add	r2, pc, #4	; (adr r2, 8010188 <UART_SetConfig+0x39c>)
 8010182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010186:	bf00      	nop
 8010188:	0801022d 	.word	0x0801022d
 801018c:	0801025d 	.word	0x0801025d
 8010190:	0801025d 	.word	0x0801025d
 8010194:	0801025d 	.word	0x0801025d
 8010198:	0801025d 	.word	0x0801025d
 801019c:	0801025d 	.word	0x0801025d
 80101a0:	0801025d 	.word	0x0801025d
 80101a4:	0801025d 	.word	0x0801025d
 80101a8:	08010235 	.word	0x08010235
 80101ac:	0801025d 	.word	0x0801025d
 80101b0:	0801025d 	.word	0x0801025d
 80101b4:	0801025d 	.word	0x0801025d
 80101b8:	0801025d 	.word	0x0801025d
 80101bc:	0801025d 	.word	0x0801025d
 80101c0:	0801025d 	.word	0x0801025d
 80101c4:	0801025d 	.word	0x0801025d
 80101c8:	0801023d 	.word	0x0801023d
 80101cc:	0801025d 	.word	0x0801025d
 80101d0:	0801025d 	.word	0x0801025d
 80101d4:	0801025d 	.word	0x0801025d
 80101d8:	0801025d 	.word	0x0801025d
 80101dc:	0801025d 	.word	0x0801025d
 80101e0:	0801025d 	.word	0x0801025d
 80101e4:	0801025d 	.word	0x0801025d
 80101e8:	08010245 	.word	0x08010245
 80101ec:	0801025d 	.word	0x0801025d
 80101f0:	0801025d 	.word	0x0801025d
 80101f4:	0801025d 	.word	0x0801025d
 80101f8:	0801025d 	.word	0x0801025d
 80101fc:	0801025d 	.word	0x0801025d
 8010200:	0801025d 	.word	0x0801025d
 8010204:	0801025d 	.word	0x0801025d
 8010208:	0801024d 	.word	0x0801024d
 801020c:	0801025d 	.word	0x0801025d
 8010210:	0801025d 	.word	0x0801025d
 8010214:	0801025d 	.word	0x0801025d
 8010218:	0801025d 	.word	0x0801025d
 801021c:	0801025d 	.word	0x0801025d
 8010220:	0801025d 	.word	0x0801025d
 8010224:	0801025d 	.word	0x0801025d
 8010228:	08010255 	.word	0x08010255
 801022c:	2301      	movs	r3, #1
 801022e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010232:	e0c3      	b.n	80103bc <UART_SetConfig+0x5d0>
 8010234:	2304      	movs	r3, #4
 8010236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801023a:	e0bf      	b.n	80103bc <UART_SetConfig+0x5d0>
 801023c:	2308      	movs	r3, #8
 801023e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010242:	e0bb      	b.n	80103bc <UART_SetConfig+0x5d0>
 8010244:	2310      	movs	r3, #16
 8010246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801024a:	e0b7      	b.n	80103bc <UART_SetConfig+0x5d0>
 801024c:	2320      	movs	r3, #32
 801024e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010252:	e0b3      	b.n	80103bc <UART_SetConfig+0x5d0>
 8010254:	2340      	movs	r3, #64	; 0x40
 8010256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801025a:	e0af      	b.n	80103bc <UART_SetConfig+0x5d0>
 801025c:	2380      	movs	r3, #128	; 0x80
 801025e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010262:	bf00      	nop
 8010264:	e0aa      	b.n	80103bc <UART_SetConfig+0x5d0>
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	4a79      	ldr	r2, [pc, #484]	; (8010450 <UART_SetConfig+0x664>)
 801026c:	4293      	cmp	r3, r2
 801026e:	d132      	bne.n	80102d6 <UART_SetConfig+0x4ea>
 8010270:	4b76      	ldr	r3, [pc, #472]	; (801044c <UART_SetConfig+0x660>)
 8010272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010274:	f003 0307 	and.w	r3, r3, #7
 8010278:	2b05      	cmp	r3, #5
 801027a:	d827      	bhi.n	80102cc <UART_SetConfig+0x4e0>
 801027c:	a201      	add	r2, pc, #4	; (adr r2, 8010284 <UART_SetConfig+0x498>)
 801027e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010282:	bf00      	nop
 8010284:	0801029d 	.word	0x0801029d
 8010288:	080102a5 	.word	0x080102a5
 801028c:	080102ad 	.word	0x080102ad
 8010290:	080102b5 	.word	0x080102b5
 8010294:	080102bd 	.word	0x080102bd
 8010298:	080102c5 	.word	0x080102c5
 801029c:	2300      	movs	r3, #0
 801029e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102a2:	e08b      	b.n	80103bc <UART_SetConfig+0x5d0>
 80102a4:	2304      	movs	r3, #4
 80102a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102aa:	e087      	b.n	80103bc <UART_SetConfig+0x5d0>
 80102ac:	2308      	movs	r3, #8
 80102ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102b2:	e083      	b.n	80103bc <UART_SetConfig+0x5d0>
 80102b4:	2310      	movs	r3, #16
 80102b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102ba:	e07f      	b.n	80103bc <UART_SetConfig+0x5d0>
 80102bc:	2320      	movs	r3, #32
 80102be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102c2:	e07b      	b.n	80103bc <UART_SetConfig+0x5d0>
 80102c4:	2340      	movs	r3, #64	; 0x40
 80102c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102ca:	e077      	b.n	80103bc <UART_SetConfig+0x5d0>
 80102cc:	2380      	movs	r3, #128	; 0x80
 80102ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102d2:	bf00      	nop
 80102d4:	e072      	b.n	80103bc <UART_SetConfig+0x5d0>
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	4a5e      	ldr	r2, [pc, #376]	; (8010454 <UART_SetConfig+0x668>)
 80102dc:	4293      	cmp	r3, r2
 80102de:	d132      	bne.n	8010346 <UART_SetConfig+0x55a>
 80102e0:	4b5a      	ldr	r3, [pc, #360]	; (801044c <UART_SetConfig+0x660>)
 80102e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80102e4:	f003 0307 	and.w	r3, r3, #7
 80102e8:	2b05      	cmp	r3, #5
 80102ea:	d827      	bhi.n	801033c <UART_SetConfig+0x550>
 80102ec:	a201      	add	r2, pc, #4	; (adr r2, 80102f4 <UART_SetConfig+0x508>)
 80102ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102f2:	bf00      	nop
 80102f4:	0801030d 	.word	0x0801030d
 80102f8:	08010315 	.word	0x08010315
 80102fc:	0801031d 	.word	0x0801031d
 8010300:	08010325 	.word	0x08010325
 8010304:	0801032d 	.word	0x0801032d
 8010308:	08010335 	.word	0x08010335
 801030c:	2300      	movs	r3, #0
 801030e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010312:	e053      	b.n	80103bc <UART_SetConfig+0x5d0>
 8010314:	2304      	movs	r3, #4
 8010316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801031a:	e04f      	b.n	80103bc <UART_SetConfig+0x5d0>
 801031c:	2308      	movs	r3, #8
 801031e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010322:	e04b      	b.n	80103bc <UART_SetConfig+0x5d0>
 8010324:	2310      	movs	r3, #16
 8010326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801032a:	e047      	b.n	80103bc <UART_SetConfig+0x5d0>
 801032c:	2320      	movs	r3, #32
 801032e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010332:	e043      	b.n	80103bc <UART_SetConfig+0x5d0>
 8010334:	2340      	movs	r3, #64	; 0x40
 8010336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801033a:	e03f      	b.n	80103bc <UART_SetConfig+0x5d0>
 801033c:	2380      	movs	r3, #128	; 0x80
 801033e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010342:	bf00      	nop
 8010344:	e03a      	b.n	80103bc <UART_SetConfig+0x5d0>
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	4a43      	ldr	r2, [pc, #268]	; (8010458 <UART_SetConfig+0x66c>)
 801034c:	4293      	cmp	r3, r2
 801034e:	d132      	bne.n	80103b6 <UART_SetConfig+0x5ca>
 8010350:	4b3e      	ldr	r3, [pc, #248]	; (801044c <UART_SetConfig+0x660>)
 8010352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010354:	f003 0307 	and.w	r3, r3, #7
 8010358:	2b05      	cmp	r3, #5
 801035a:	d827      	bhi.n	80103ac <UART_SetConfig+0x5c0>
 801035c:	a201      	add	r2, pc, #4	; (adr r2, 8010364 <UART_SetConfig+0x578>)
 801035e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010362:	bf00      	nop
 8010364:	0801037d 	.word	0x0801037d
 8010368:	08010385 	.word	0x08010385
 801036c:	0801038d 	.word	0x0801038d
 8010370:	08010395 	.word	0x08010395
 8010374:	0801039d 	.word	0x0801039d
 8010378:	080103a5 	.word	0x080103a5
 801037c:	2302      	movs	r3, #2
 801037e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010382:	e01b      	b.n	80103bc <UART_SetConfig+0x5d0>
 8010384:	2304      	movs	r3, #4
 8010386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801038a:	e017      	b.n	80103bc <UART_SetConfig+0x5d0>
 801038c:	2308      	movs	r3, #8
 801038e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010392:	e013      	b.n	80103bc <UART_SetConfig+0x5d0>
 8010394:	2310      	movs	r3, #16
 8010396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801039a:	e00f      	b.n	80103bc <UART_SetConfig+0x5d0>
 801039c:	2320      	movs	r3, #32
 801039e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103a2:	e00b      	b.n	80103bc <UART_SetConfig+0x5d0>
 80103a4:	2340      	movs	r3, #64	; 0x40
 80103a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103aa:	e007      	b.n	80103bc <UART_SetConfig+0x5d0>
 80103ac:	2380      	movs	r3, #128	; 0x80
 80103ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103b2:	bf00      	nop
 80103b4:	e002      	b.n	80103bc <UART_SetConfig+0x5d0>
 80103b6:	2380      	movs	r3, #128	; 0x80
 80103b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	4a25      	ldr	r2, [pc, #148]	; (8010458 <UART_SetConfig+0x66c>)
 80103c2:	4293      	cmp	r3, r2
 80103c4:	f040 80b8 	bne.w	8010538 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80103c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80103cc:	2b08      	cmp	r3, #8
 80103ce:	d019      	beq.n	8010404 <UART_SetConfig+0x618>
 80103d0:	2b08      	cmp	r3, #8
 80103d2:	dc04      	bgt.n	80103de <UART_SetConfig+0x5f2>
 80103d4:	2b02      	cmp	r3, #2
 80103d6:	d009      	beq.n	80103ec <UART_SetConfig+0x600>
 80103d8:	2b04      	cmp	r3, #4
 80103da:	d00b      	beq.n	80103f4 <UART_SetConfig+0x608>
 80103dc:	e042      	b.n	8010464 <UART_SetConfig+0x678>
 80103de:	2b20      	cmp	r3, #32
 80103e0:	d02b      	beq.n	801043a <UART_SetConfig+0x64e>
 80103e2:	2b40      	cmp	r3, #64	; 0x40
 80103e4:	d02c      	beq.n	8010440 <UART_SetConfig+0x654>
 80103e6:	2b10      	cmp	r3, #16
 80103e8:	d014      	beq.n	8010414 <UART_SetConfig+0x628>
 80103ea:	e03b      	b.n	8010464 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80103ec:	f7fb fad2 	bl	800b994 <HAL_RCCEx_GetD3PCLK1Freq>
 80103f0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80103f2:	e03d      	b.n	8010470 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80103f4:	f107 0314 	add.w	r3, r7, #20
 80103f8:	4618      	mov	r0, r3
 80103fa:	f7fb fae1 	bl	800b9c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80103fe:	69bb      	ldr	r3, [r7, #24]
 8010400:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010402:	e035      	b.n	8010470 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010404:	f107 0308 	add.w	r3, r7, #8
 8010408:	4618      	mov	r0, r3
 801040a:	f7fb fc25 	bl	800bc58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010412:	e02d      	b.n	8010470 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010414:	4b0d      	ldr	r3, [pc, #52]	; (801044c <UART_SetConfig+0x660>)
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	f003 0320 	and.w	r3, r3, #32
 801041c:	2b00      	cmp	r3, #0
 801041e:	d009      	beq.n	8010434 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010420:	4b0a      	ldr	r3, [pc, #40]	; (801044c <UART_SetConfig+0x660>)
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	08db      	lsrs	r3, r3, #3
 8010426:	f003 0303 	and.w	r3, r3, #3
 801042a:	4a0c      	ldr	r2, [pc, #48]	; (801045c <UART_SetConfig+0x670>)
 801042c:	fa22 f303 	lsr.w	r3, r2, r3
 8010430:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010432:	e01d      	b.n	8010470 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8010434:	4b09      	ldr	r3, [pc, #36]	; (801045c <UART_SetConfig+0x670>)
 8010436:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010438:	e01a      	b.n	8010470 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801043a:	4b09      	ldr	r3, [pc, #36]	; (8010460 <UART_SetConfig+0x674>)
 801043c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801043e:	e017      	b.n	8010470 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010440:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010444:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010446:	e013      	b.n	8010470 <UART_SetConfig+0x684>
 8010448:	40011400 	.word	0x40011400
 801044c:	58024400 	.word	0x58024400
 8010450:	40007800 	.word	0x40007800
 8010454:	40007c00 	.word	0x40007c00
 8010458:	58000c00 	.word	0x58000c00
 801045c:	03d09000 	.word	0x03d09000
 8010460:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8010464:	2300      	movs	r3, #0
 8010466:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8010468:	2301      	movs	r3, #1
 801046a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 801046e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010472:	2b00      	cmp	r3, #0
 8010474:	f000 824d 	beq.w	8010912 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801047c:	4aad      	ldr	r2, [pc, #692]	; (8010734 <UART_SetConfig+0x948>)
 801047e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010482:	461a      	mov	r2, r3
 8010484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010486:	fbb3 f3f2 	udiv	r3, r3, r2
 801048a:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	685a      	ldr	r2, [r3, #4]
 8010490:	4613      	mov	r3, r2
 8010492:	005b      	lsls	r3, r3, #1
 8010494:	4413      	add	r3, r2
 8010496:	6a3a      	ldr	r2, [r7, #32]
 8010498:	429a      	cmp	r2, r3
 801049a:	d305      	bcc.n	80104a8 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	685b      	ldr	r3, [r3, #4]
 80104a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80104a2:	6a3a      	ldr	r2, [r7, #32]
 80104a4:	429a      	cmp	r2, r3
 80104a6:	d903      	bls.n	80104b0 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 80104a8:	2301      	movs	r3, #1
 80104aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80104ae:	e230      	b.n	8010912 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80104b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104b2:	4618      	mov	r0, r3
 80104b4:	f04f 0100 	mov.w	r1, #0
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104bc:	4a9d      	ldr	r2, [pc, #628]	; (8010734 <UART_SetConfig+0x948>)
 80104be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80104c2:	b29b      	uxth	r3, r3
 80104c4:	f04f 0400 	mov.w	r4, #0
 80104c8:	461a      	mov	r2, r3
 80104ca:	4623      	mov	r3, r4
 80104cc:	f7ef ff60 	bl	8000390 <__aeabi_uldivmod>
 80104d0:	4603      	mov	r3, r0
 80104d2:	460c      	mov	r4, r1
 80104d4:	4619      	mov	r1, r3
 80104d6:	4622      	mov	r2, r4
 80104d8:	f04f 0300 	mov.w	r3, #0
 80104dc:	f04f 0400 	mov.w	r4, #0
 80104e0:	0214      	lsls	r4, r2, #8
 80104e2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80104e6:	020b      	lsls	r3, r1, #8
 80104e8:	687a      	ldr	r2, [r7, #4]
 80104ea:	6852      	ldr	r2, [r2, #4]
 80104ec:	0852      	lsrs	r2, r2, #1
 80104ee:	4611      	mov	r1, r2
 80104f0:	f04f 0200 	mov.w	r2, #0
 80104f4:	eb13 0b01 	adds.w	fp, r3, r1
 80104f8:	eb44 0c02 	adc.w	ip, r4, r2
 80104fc:	4658      	mov	r0, fp
 80104fe:	4661      	mov	r1, ip
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	685b      	ldr	r3, [r3, #4]
 8010504:	f04f 0400 	mov.w	r4, #0
 8010508:	461a      	mov	r2, r3
 801050a:	4623      	mov	r3, r4
 801050c:	f7ef ff40 	bl	8000390 <__aeabi_uldivmod>
 8010510:	4603      	mov	r3, r0
 8010512:	460c      	mov	r4, r1
 8010514:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010518:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801051c:	d308      	bcc.n	8010530 <UART_SetConfig+0x744>
 801051e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010520:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010524:	d204      	bcs.n	8010530 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801052c:	60da      	str	r2, [r3, #12]
 801052e:	e1f0      	b.n	8010912 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8010530:	2301      	movs	r3, #1
 8010532:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010536:	e1ec      	b.n	8010912 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	69db      	ldr	r3, [r3, #28]
 801053c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010540:	f040 8100 	bne.w	8010744 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8010544:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010548:	2b40      	cmp	r3, #64	; 0x40
 801054a:	f200 80b7 	bhi.w	80106bc <UART_SetConfig+0x8d0>
 801054e:	a201      	add	r2, pc, #4	; (adr r2, 8010554 <UART_SetConfig+0x768>)
 8010550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010554:	08010659 	.word	0x08010659
 8010558:	08010661 	.word	0x08010661
 801055c:	080106bd 	.word	0x080106bd
 8010560:	080106bd 	.word	0x080106bd
 8010564:	08010669 	.word	0x08010669
 8010568:	080106bd 	.word	0x080106bd
 801056c:	080106bd 	.word	0x080106bd
 8010570:	080106bd 	.word	0x080106bd
 8010574:	08010679 	.word	0x08010679
 8010578:	080106bd 	.word	0x080106bd
 801057c:	080106bd 	.word	0x080106bd
 8010580:	080106bd 	.word	0x080106bd
 8010584:	080106bd 	.word	0x080106bd
 8010588:	080106bd 	.word	0x080106bd
 801058c:	080106bd 	.word	0x080106bd
 8010590:	080106bd 	.word	0x080106bd
 8010594:	08010689 	.word	0x08010689
 8010598:	080106bd 	.word	0x080106bd
 801059c:	080106bd 	.word	0x080106bd
 80105a0:	080106bd 	.word	0x080106bd
 80105a4:	080106bd 	.word	0x080106bd
 80105a8:	080106bd 	.word	0x080106bd
 80105ac:	080106bd 	.word	0x080106bd
 80105b0:	080106bd 	.word	0x080106bd
 80105b4:	080106bd 	.word	0x080106bd
 80105b8:	080106bd 	.word	0x080106bd
 80105bc:	080106bd 	.word	0x080106bd
 80105c0:	080106bd 	.word	0x080106bd
 80105c4:	080106bd 	.word	0x080106bd
 80105c8:	080106bd 	.word	0x080106bd
 80105cc:	080106bd 	.word	0x080106bd
 80105d0:	080106bd 	.word	0x080106bd
 80105d4:	080106af 	.word	0x080106af
 80105d8:	080106bd 	.word	0x080106bd
 80105dc:	080106bd 	.word	0x080106bd
 80105e0:	080106bd 	.word	0x080106bd
 80105e4:	080106bd 	.word	0x080106bd
 80105e8:	080106bd 	.word	0x080106bd
 80105ec:	080106bd 	.word	0x080106bd
 80105f0:	080106bd 	.word	0x080106bd
 80105f4:	080106bd 	.word	0x080106bd
 80105f8:	080106bd 	.word	0x080106bd
 80105fc:	080106bd 	.word	0x080106bd
 8010600:	080106bd 	.word	0x080106bd
 8010604:	080106bd 	.word	0x080106bd
 8010608:	080106bd 	.word	0x080106bd
 801060c:	080106bd 	.word	0x080106bd
 8010610:	080106bd 	.word	0x080106bd
 8010614:	080106bd 	.word	0x080106bd
 8010618:	080106bd 	.word	0x080106bd
 801061c:	080106bd 	.word	0x080106bd
 8010620:	080106bd 	.word	0x080106bd
 8010624:	080106bd 	.word	0x080106bd
 8010628:	080106bd 	.word	0x080106bd
 801062c:	080106bd 	.word	0x080106bd
 8010630:	080106bd 	.word	0x080106bd
 8010634:	080106bd 	.word	0x080106bd
 8010638:	080106bd 	.word	0x080106bd
 801063c:	080106bd 	.word	0x080106bd
 8010640:	080106bd 	.word	0x080106bd
 8010644:	080106bd 	.word	0x080106bd
 8010648:	080106bd 	.word	0x080106bd
 801064c:	080106bd 	.word	0x080106bd
 8010650:	080106bd 	.word	0x080106bd
 8010654:	080106b5 	.word	0x080106b5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010658:	f7f9 ffee 	bl	800a638 <HAL_RCC_GetPCLK1Freq>
 801065c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 801065e:	e033      	b.n	80106c8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010660:	f7fa f800 	bl	800a664 <HAL_RCC_GetPCLK2Freq>
 8010664:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010666:	e02f      	b.n	80106c8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010668:	f107 0314 	add.w	r3, r7, #20
 801066c:	4618      	mov	r0, r3
 801066e:	f7fb f9a7 	bl	800b9c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010672:	69bb      	ldr	r3, [r7, #24]
 8010674:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010676:	e027      	b.n	80106c8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010678:	f107 0308 	add.w	r3, r7, #8
 801067c:	4618      	mov	r0, r3
 801067e:	f7fb faeb 	bl	800bc58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010686:	e01f      	b.n	80106c8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010688:	4b2b      	ldr	r3, [pc, #172]	; (8010738 <UART_SetConfig+0x94c>)
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	f003 0320 	and.w	r3, r3, #32
 8010690:	2b00      	cmp	r3, #0
 8010692:	d009      	beq.n	80106a8 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010694:	4b28      	ldr	r3, [pc, #160]	; (8010738 <UART_SetConfig+0x94c>)
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	08db      	lsrs	r3, r3, #3
 801069a:	f003 0303 	and.w	r3, r3, #3
 801069e:	4a27      	ldr	r2, [pc, #156]	; (801073c <UART_SetConfig+0x950>)
 80106a0:	fa22 f303 	lsr.w	r3, r2, r3
 80106a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80106a6:	e00f      	b.n	80106c8 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 80106a8:	4b24      	ldr	r3, [pc, #144]	; (801073c <UART_SetConfig+0x950>)
 80106aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80106ac:	e00c      	b.n	80106c8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80106ae:	4b24      	ldr	r3, [pc, #144]	; (8010740 <UART_SetConfig+0x954>)
 80106b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80106b2:	e009      	b.n	80106c8 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80106b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80106b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80106ba:	e005      	b.n	80106c8 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 80106bc:	2300      	movs	r3, #0
 80106be:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80106c0:	2301      	movs	r3, #1
 80106c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80106c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80106c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	f000 8121 	beq.w	8010912 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106d4:	4a17      	ldr	r2, [pc, #92]	; (8010734 <UART_SetConfig+0x948>)
 80106d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80106da:	461a      	mov	r2, r3
 80106dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106de:	fbb3 f3f2 	udiv	r3, r3, r2
 80106e2:	005a      	lsls	r2, r3, #1
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	685b      	ldr	r3, [r3, #4]
 80106e8:	085b      	lsrs	r3, r3, #1
 80106ea:	441a      	add	r2, r3
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	685b      	ldr	r3, [r3, #4]
 80106f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80106f4:	b29b      	uxth	r3, r3
 80106f6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80106f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106fa:	2b0f      	cmp	r3, #15
 80106fc:	d916      	bls.n	801072c <UART_SetConfig+0x940>
 80106fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010704:	d212      	bcs.n	801072c <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010708:	b29b      	uxth	r3, r3
 801070a:	f023 030f 	bic.w	r3, r3, #15
 801070e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010712:	085b      	lsrs	r3, r3, #1
 8010714:	b29b      	uxth	r3, r3
 8010716:	f003 0307 	and.w	r3, r3, #7
 801071a:	b29a      	uxth	r2, r3
 801071c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801071e:	4313      	orrs	r3, r2
 8010720:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010728:	60da      	str	r2, [r3, #12]
 801072a:	e0f2      	b.n	8010912 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 801072c:	2301      	movs	r3, #1
 801072e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010732:	e0ee      	b.n	8010912 <UART_SetConfig+0xb26>
 8010734:	0801af4c 	.word	0x0801af4c
 8010738:	58024400 	.word	0x58024400
 801073c:	03d09000 	.word	0x03d09000
 8010740:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8010744:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010748:	2b40      	cmp	r3, #64	; 0x40
 801074a:	f200 80b7 	bhi.w	80108bc <UART_SetConfig+0xad0>
 801074e:	a201      	add	r2, pc, #4	; (adr r2, 8010754 <UART_SetConfig+0x968>)
 8010750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010754:	08010859 	.word	0x08010859
 8010758:	08010861 	.word	0x08010861
 801075c:	080108bd 	.word	0x080108bd
 8010760:	080108bd 	.word	0x080108bd
 8010764:	08010869 	.word	0x08010869
 8010768:	080108bd 	.word	0x080108bd
 801076c:	080108bd 	.word	0x080108bd
 8010770:	080108bd 	.word	0x080108bd
 8010774:	08010879 	.word	0x08010879
 8010778:	080108bd 	.word	0x080108bd
 801077c:	080108bd 	.word	0x080108bd
 8010780:	080108bd 	.word	0x080108bd
 8010784:	080108bd 	.word	0x080108bd
 8010788:	080108bd 	.word	0x080108bd
 801078c:	080108bd 	.word	0x080108bd
 8010790:	080108bd 	.word	0x080108bd
 8010794:	08010889 	.word	0x08010889
 8010798:	080108bd 	.word	0x080108bd
 801079c:	080108bd 	.word	0x080108bd
 80107a0:	080108bd 	.word	0x080108bd
 80107a4:	080108bd 	.word	0x080108bd
 80107a8:	080108bd 	.word	0x080108bd
 80107ac:	080108bd 	.word	0x080108bd
 80107b0:	080108bd 	.word	0x080108bd
 80107b4:	080108bd 	.word	0x080108bd
 80107b8:	080108bd 	.word	0x080108bd
 80107bc:	080108bd 	.word	0x080108bd
 80107c0:	080108bd 	.word	0x080108bd
 80107c4:	080108bd 	.word	0x080108bd
 80107c8:	080108bd 	.word	0x080108bd
 80107cc:	080108bd 	.word	0x080108bd
 80107d0:	080108bd 	.word	0x080108bd
 80107d4:	080108af 	.word	0x080108af
 80107d8:	080108bd 	.word	0x080108bd
 80107dc:	080108bd 	.word	0x080108bd
 80107e0:	080108bd 	.word	0x080108bd
 80107e4:	080108bd 	.word	0x080108bd
 80107e8:	080108bd 	.word	0x080108bd
 80107ec:	080108bd 	.word	0x080108bd
 80107f0:	080108bd 	.word	0x080108bd
 80107f4:	080108bd 	.word	0x080108bd
 80107f8:	080108bd 	.word	0x080108bd
 80107fc:	080108bd 	.word	0x080108bd
 8010800:	080108bd 	.word	0x080108bd
 8010804:	080108bd 	.word	0x080108bd
 8010808:	080108bd 	.word	0x080108bd
 801080c:	080108bd 	.word	0x080108bd
 8010810:	080108bd 	.word	0x080108bd
 8010814:	080108bd 	.word	0x080108bd
 8010818:	080108bd 	.word	0x080108bd
 801081c:	080108bd 	.word	0x080108bd
 8010820:	080108bd 	.word	0x080108bd
 8010824:	080108bd 	.word	0x080108bd
 8010828:	080108bd 	.word	0x080108bd
 801082c:	080108bd 	.word	0x080108bd
 8010830:	080108bd 	.word	0x080108bd
 8010834:	080108bd 	.word	0x080108bd
 8010838:	080108bd 	.word	0x080108bd
 801083c:	080108bd 	.word	0x080108bd
 8010840:	080108bd 	.word	0x080108bd
 8010844:	080108bd 	.word	0x080108bd
 8010848:	080108bd 	.word	0x080108bd
 801084c:	080108bd 	.word	0x080108bd
 8010850:	080108bd 	.word	0x080108bd
 8010854:	080108b5 	.word	0x080108b5
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010858:	f7f9 feee 	bl	800a638 <HAL_RCC_GetPCLK1Freq>
 801085c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 801085e:	e033      	b.n	80108c8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010860:	f7f9 ff00 	bl	800a664 <HAL_RCC_GetPCLK2Freq>
 8010864:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010866:	e02f      	b.n	80108c8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010868:	f107 0314 	add.w	r3, r7, #20
 801086c:	4618      	mov	r0, r3
 801086e:	f7fb f8a7 	bl	800b9c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010872:	69bb      	ldr	r3, [r7, #24]
 8010874:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010876:	e027      	b.n	80108c8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010878:	f107 0308 	add.w	r3, r7, #8
 801087c:	4618      	mov	r0, r3
 801087e:	f7fb f9eb 	bl	800bc58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010886:	e01f      	b.n	80108c8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010888:	4b2c      	ldr	r3, [pc, #176]	; (801093c <UART_SetConfig+0xb50>)
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	f003 0320 	and.w	r3, r3, #32
 8010890:	2b00      	cmp	r3, #0
 8010892:	d009      	beq.n	80108a8 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010894:	4b29      	ldr	r3, [pc, #164]	; (801093c <UART_SetConfig+0xb50>)
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	08db      	lsrs	r3, r3, #3
 801089a:	f003 0303 	and.w	r3, r3, #3
 801089e:	4a28      	ldr	r2, [pc, #160]	; (8010940 <UART_SetConfig+0xb54>)
 80108a0:	fa22 f303 	lsr.w	r3, r2, r3
 80108a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80108a6:	e00f      	b.n	80108c8 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 80108a8:	4b25      	ldr	r3, [pc, #148]	; (8010940 <UART_SetConfig+0xb54>)
 80108aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80108ac:	e00c      	b.n	80108c8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80108ae:	4b25      	ldr	r3, [pc, #148]	; (8010944 <UART_SetConfig+0xb58>)
 80108b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80108b2:	e009      	b.n	80108c8 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80108b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80108b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80108ba:	e005      	b.n	80108c8 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 80108bc:	2300      	movs	r3, #0
 80108be:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80108c0:	2301      	movs	r3, #1
 80108c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80108c6:	bf00      	nop
    }

    if (pclk != 0U)
 80108c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d021      	beq.n	8010912 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108d2:	4a1d      	ldr	r2, [pc, #116]	; (8010948 <UART_SetConfig+0xb5c>)
 80108d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80108d8:	461a      	mov	r2, r3
 80108da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108dc:	fbb3 f2f2 	udiv	r2, r3, r2
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	685b      	ldr	r3, [r3, #4]
 80108e4:	085b      	lsrs	r3, r3, #1
 80108e6:	441a      	add	r2, r3
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	685b      	ldr	r3, [r3, #4]
 80108ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80108f0:	b29b      	uxth	r3, r3
 80108f2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80108f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108f6:	2b0f      	cmp	r3, #15
 80108f8:	d908      	bls.n	801090c <UART_SetConfig+0xb20>
 80108fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010900:	d204      	bcs.n	801090c <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010908:	60da      	str	r2, [r3, #12]
 801090a:	e002      	b.n	8010912 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 801090c:	2301      	movs	r3, #1
 801090e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	2201      	movs	r2, #1
 8010916:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	2201      	movs	r2, #1
 801091e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	2200      	movs	r2, #0
 8010926:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	2200      	movs	r2, #0
 801092c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 801092e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8010932:	4618      	mov	r0, r3
 8010934:	3738      	adds	r7, #56	; 0x38
 8010936:	46bd      	mov	sp, r7
 8010938:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 801093c:	58024400 	.word	0x58024400
 8010940:	03d09000 	.word	0x03d09000
 8010944:	003d0900 	.word	0x003d0900
 8010948:	0801af4c 	.word	0x0801af4c

0801094c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801094c:	b480      	push	{r7}
 801094e:	b083      	sub	sp, #12
 8010950:	af00      	add	r7, sp, #0
 8010952:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010958:	f003 0301 	and.w	r3, r3, #1
 801095c:	2b00      	cmp	r3, #0
 801095e:	d00a      	beq.n	8010976 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	685b      	ldr	r3, [r3, #4]
 8010966:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	430a      	orrs	r2, r1
 8010974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801097a:	f003 0302 	and.w	r3, r3, #2
 801097e:	2b00      	cmp	r3, #0
 8010980:	d00a      	beq.n	8010998 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	685b      	ldr	r3, [r3, #4]
 8010988:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	430a      	orrs	r2, r1
 8010996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801099c:	f003 0304 	and.w	r3, r3, #4
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d00a      	beq.n	80109ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	685b      	ldr	r3, [r3, #4]
 80109aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	430a      	orrs	r2, r1
 80109b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109be:	f003 0308 	and.w	r3, r3, #8
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d00a      	beq.n	80109dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	685b      	ldr	r3, [r3, #4]
 80109cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	430a      	orrs	r2, r1
 80109da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109e0:	f003 0310 	and.w	r3, r3, #16
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d00a      	beq.n	80109fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	689b      	ldr	r3, [r3, #8]
 80109ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	430a      	orrs	r2, r1
 80109fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a02:	f003 0320 	and.w	r3, r3, #32
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d00a      	beq.n	8010a20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	689b      	ldr	r3, [r3, #8]
 8010a10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	430a      	orrs	r2, r1
 8010a1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d01a      	beq.n	8010a62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	685b      	ldr	r3, [r3, #4]
 8010a32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	430a      	orrs	r2, r1
 8010a40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010a4a:	d10a      	bne.n	8010a62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	685b      	ldr	r3, [r3, #4]
 8010a52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	430a      	orrs	r2, r1
 8010a60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d00a      	beq.n	8010a84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	685b      	ldr	r3, [r3, #4]
 8010a74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	430a      	orrs	r2, r1
 8010a82:	605a      	str	r2, [r3, #4]
  }
}
 8010a84:	bf00      	nop
 8010a86:	370c      	adds	r7, #12
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a8e:	4770      	bx	lr

08010a90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b086      	sub	sp, #24
 8010a94:	af02      	add	r7, sp, #8
 8010a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8010aa0:	f7f3 fd8a 	bl	80045b8 <HAL_GetTick>
 8010aa4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	f003 0308 	and.w	r3, r3, #8
 8010ab0:	2b08      	cmp	r3, #8
 8010ab2:	d10e      	bne.n	8010ad2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010ab4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010ab8:	9300      	str	r3, [sp, #0]
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	2200      	movs	r2, #0
 8010abe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010ac2:	6878      	ldr	r0, [r7, #4]
 8010ac4:	f000 f82c 	bl	8010b20 <UART_WaitOnFlagUntilTimeout>
 8010ac8:	4603      	mov	r3, r0
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d001      	beq.n	8010ad2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010ace:	2303      	movs	r3, #3
 8010ad0:	e022      	b.n	8010b18 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	f003 0304 	and.w	r3, r3, #4
 8010adc:	2b04      	cmp	r3, #4
 8010ade:	d10e      	bne.n	8010afe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010ae0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010ae4:	9300      	str	r3, [sp, #0]
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	2200      	movs	r2, #0
 8010aea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010aee:	6878      	ldr	r0, [r7, #4]
 8010af0:	f000 f816 	bl	8010b20 <UART_WaitOnFlagUntilTimeout>
 8010af4:	4603      	mov	r3, r0
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d001      	beq.n	8010afe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010afa:	2303      	movs	r3, #3
 8010afc:	e00c      	b.n	8010b18 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	2220      	movs	r2, #32
 8010b02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	2220      	movs	r2, #32
 8010b0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	2200      	movs	r2, #0
 8010b12:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010b16:	2300      	movs	r3, #0
}
 8010b18:	4618      	mov	r0, r3
 8010b1a:	3710      	adds	r7, #16
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	bd80      	pop	{r7, pc}

08010b20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b084      	sub	sp, #16
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	60f8      	str	r0, [r7, #12]
 8010b28:	60b9      	str	r1, [r7, #8]
 8010b2a:	603b      	str	r3, [r7, #0]
 8010b2c:	4613      	mov	r3, r2
 8010b2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010b30:	e062      	b.n	8010bf8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010b32:	69bb      	ldr	r3, [r7, #24]
 8010b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b38:	d05e      	beq.n	8010bf8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010b3a:	f7f3 fd3d 	bl	80045b8 <HAL_GetTick>
 8010b3e:	4602      	mov	r2, r0
 8010b40:	683b      	ldr	r3, [r7, #0]
 8010b42:	1ad3      	subs	r3, r2, r3
 8010b44:	69ba      	ldr	r2, [r7, #24]
 8010b46:	429a      	cmp	r2, r3
 8010b48:	d302      	bcc.n	8010b50 <UART_WaitOnFlagUntilTimeout+0x30>
 8010b4a:	69bb      	ldr	r3, [r7, #24]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d11d      	bne.n	8010b8c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	681a      	ldr	r2, [r3, #0]
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010b5e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	689a      	ldr	r2, [r3, #8]
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	f022 0201 	bic.w	r2, r2, #1
 8010b6e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	2220      	movs	r2, #32
 8010b74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	2220      	movs	r2, #32
 8010b7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	2200      	movs	r2, #0
 8010b84:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8010b88:	2303      	movs	r3, #3
 8010b8a:	e045      	b.n	8010c18 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	f003 0304 	and.w	r3, r3, #4
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d02e      	beq.n	8010bf8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	69db      	ldr	r3, [r3, #28]
 8010ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010ba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010ba8:	d126      	bne.n	8010bf8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010bb2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	681a      	ldr	r2, [r3, #0]
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010bc2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	689a      	ldr	r2, [r3, #8]
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	f022 0201 	bic.w	r2, r2, #1
 8010bd2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	2220      	movs	r2, #32
 8010bd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	2220      	movs	r2, #32
 8010be0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	2220      	movs	r2, #32
 8010be8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	2200      	movs	r2, #0
 8010bf0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8010bf4:	2303      	movs	r3, #3
 8010bf6:	e00f      	b.n	8010c18 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	69da      	ldr	r2, [r3, #28]
 8010bfe:	68bb      	ldr	r3, [r7, #8]
 8010c00:	4013      	ands	r3, r2
 8010c02:	68ba      	ldr	r2, [r7, #8]
 8010c04:	429a      	cmp	r2, r3
 8010c06:	bf0c      	ite	eq
 8010c08:	2301      	moveq	r3, #1
 8010c0a:	2300      	movne	r3, #0
 8010c0c:	b2db      	uxtb	r3, r3
 8010c0e:	461a      	mov	r2, r3
 8010c10:	79fb      	ldrb	r3, [r7, #7]
 8010c12:	429a      	cmp	r2, r3
 8010c14:	d08d      	beq.n	8010b32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010c16:	2300      	movs	r3, #0
}
 8010c18:	4618      	mov	r0, r3
 8010c1a:	3710      	adds	r7, #16
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	bd80      	pop	{r7, pc}

08010c20 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010c20:	b480      	push	{r7}
 8010c22:	b083      	sub	sp, #12
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	681a      	ldr	r2, [r3, #0]
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8010c36:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	689a      	ldr	r2, [r3, #8]
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8010c46:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	2220      	movs	r2, #32
 8010c4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8010c50:	bf00      	nop
 8010c52:	370c      	adds	r7, #12
 8010c54:	46bd      	mov	sp, r7
 8010c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5a:	4770      	bx	lr

08010c5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010c5c:	b480      	push	{r7}
 8010c5e:	b083      	sub	sp, #12
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	681a      	ldr	r2, [r3, #0]
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010c72:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	6899      	ldr	r1, [r3, #8]
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	681a      	ldr	r2, [r3, #0]
 8010c7e:	4b08      	ldr	r3, [pc, #32]	; (8010ca0 <UART_EndRxTransfer+0x44>)
 8010c80:	400b      	ands	r3, r1
 8010c82:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	2220      	movs	r2, #32
 8010c88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	2200      	movs	r2, #0
 8010c90:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8010c92:	bf00      	nop
 8010c94:	370c      	adds	r7, #12
 8010c96:	46bd      	mov	sp, r7
 8010c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9c:	4770      	bx	lr
 8010c9e:	bf00      	nop
 8010ca0:	effffffe 	.word	0xeffffffe

08010ca4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	b084      	sub	sp, #16
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cb0:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	69db      	ldr	r3, [r3, #28]
 8010cb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010cba:	d01f      	beq.n	8010cfc <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	2200      	movs	r2, #0
 8010cc0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	681a      	ldr	r2, [r3, #0]
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010cd2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	689a      	ldr	r2, [r3, #8]
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	f022 0201 	bic.w	r2, r2, #1
 8010ce2:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	689a      	ldr	r2, [r3, #8]
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010cf2:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	2220      	movs	r2, #32
 8010cf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8010cfc:	68f8      	ldr	r0, [r7, #12]
 8010cfe:	f7ff f861 	bl	800fdc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010d02:	bf00      	nop
 8010d04:	3710      	adds	r7, #16
 8010d06:	46bd      	mov	sp, r7
 8010d08:	bd80      	pop	{r7, pc}

08010d0a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010d0a:	b580      	push	{r7, lr}
 8010d0c:	b084      	sub	sp, #16
 8010d0e:	af00      	add	r7, sp, #0
 8010d10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d16:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8010d18:	68f8      	ldr	r0, [r7, #12]
 8010d1a:	f7ef ff07 	bl	8000b2c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010d1e:	bf00      	nop
 8010d20:	3710      	adds	r7, #16
 8010d22:	46bd      	mov	sp, r7
 8010d24:	bd80      	pop	{r7, pc}

08010d26 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010d26:	b580      	push	{r7, lr}
 8010d28:	b086      	sub	sp, #24
 8010d2a:	af00      	add	r7, sp, #0
 8010d2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d32:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010d34:	697b      	ldr	r3, [r7, #20]
 8010d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d3a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010d3c:	697b      	ldr	r3, [r7, #20]
 8010d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010d42:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010d44:	697b      	ldr	r3, [r7, #20]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	689b      	ldr	r3, [r3, #8]
 8010d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d4e:	2b80      	cmp	r3, #128	; 0x80
 8010d50:	d109      	bne.n	8010d66 <UART_DMAError+0x40>
 8010d52:	693b      	ldr	r3, [r7, #16]
 8010d54:	2b21      	cmp	r3, #33	; 0x21
 8010d56:	d106      	bne.n	8010d66 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010d58:	697b      	ldr	r3, [r7, #20]
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8010d60:	6978      	ldr	r0, [r7, #20]
 8010d62:	f7ff ff5d 	bl	8010c20 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010d66:	697b      	ldr	r3, [r7, #20]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	689b      	ldr	r3, [r3, #8]
 8010d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d70:	2b40      	cmp	r3, #64	; 0x40
 8010d72:	d109      	bne.n	8010d88 <UART_DMAError+0x62>
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	2b22      	cmp	r3, #34	; 0x22
 8010d78:	d106      	bne.n	8010d88 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010d7a:	697b      	ldr	r3, [r7, #20]
 8010d7c:	2200      	movs	r2, #0
 8010d7e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8010d82:	6978      	ldr	r0, [r7, #20]
 8010d84:	f7ff ff6a 	bl	8010c5c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010d88:	697b      	ldr	r3, [r7, #20]
 8010d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010d8e:	f043 0210 	orr.w	r2, r3, #16
 8010d92:	697b      	ldr	r3, [r7, #20]
 8010d94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010d98:	6978      	ldr	r0, [r7, #20]
 8010d9a:	f7ff f81d 	bl	800fdd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010d9e:	bf00      	nop
 8010da0:	3718      	adds	r7, #24
 8010da2:	46bd      	mov	sp, r7
 8010da4:	bd80      	pop	{r7, pc}

08010da6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010da6:	b480      	push	{r7}
 8010da8:	b085      	sub	sp, #20
 8010daa:	af00      	add	r7, sp, #0
 8010dac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010db4:	2b01      	cmp	r3, #1
 8010db6:	d101      	bne.n	8010dbc <HAL_UARTEx_DisableFifoMode+0x16>
 8010db8:	2302      	movs	r3, #2
 8010dba:	e027      	b.n	8010e0c <HAL_UARTEx_DisableFifoMode+0x66>
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	2201      	movs	r2, #1
 8010dc0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	2224      	movs	r2, #36	; 0x24
 8010dc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	681a      	ldr	r2, [r3, #0]
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	f022 0201 	bic.w	r2, r2, #1
 8010de2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010dea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	2200      	movs	r2, #0
 8010df0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	68fa      	ldr	r2, [r7, #12]
 8010df8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	2220      	movs	r2, #32
 8010dfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	2200      	movs	r2, #0
 8010e06:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010e0a:	2300      	movs	r3, #0
}
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	3714      	adds	r7, #20
 8010e10:	46bd      	mov	sp, r7
 8010e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e16:	4770      	bx	lr

08010e18 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b084      	sub	sp, #16
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
 8010e20:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010e28:	2b01      	cmp	r3, #1
 8010e2a:	d101      	bne.n	8010e30 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010e2c:	2302      	movs	r3, #2
 8010e2e:	e02d      	b.n	8010e8c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	2201      	movs	r2, #1
 8010e34:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	2224      	movs	r2, #36	; 0x24
 8010e3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	681a      	ldr	r2, [r3, #0]
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	f022 0201 	bic.w	r2, r2, #1
 8010e56:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	689b      	ldr	r3, [r3, #8]
 8010e5e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	683a      	ldr	r2, [r7, #0]
 8010e68:	430a      	orrs	r2, r1
 8010e6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010e6c:	6878      	ldr	r0, [r7, #4]
 8010e6e:	f000 f84f 	bl	8010f10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	68fa      	ldr	r2, [r7, #12]
 8010e78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	2220      	movs	r2, #32
 8010e7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	2200      	movs	r2, #0
 8010e86:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010e8a:	2300      	movs	r3, #0
}
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	3710      	adds	r7, #16
 8010e90:	46bd      	mov	sp, r7
 8010e92:	bd80      	pop	{r7, pc}

08010e94 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010e94:	b580      	push	{r7, lr}
 8010e96:	b084      	sub	sp, #16
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
 8010e9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010ea4:	2b01      	cmp	r3, #1
 8010ea6:	d101      	bne.n	8010eac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010ea8:	2302      	movs	r3, #2
 8010eaa:	e02d      	b.n	8010f08 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	2201      	movs	r2, #1
 8010eb0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	2224      	movs	r2, #36	; 0x24
 8010eb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	681a      	ldr	r2, [r3, #0]
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	f022 0201 	bic.w	r2, r2, #1
 8010ed2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	689b      	ldr	r3, [r3, #8]
 8010eda:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	683a      	ldr	r2, [r7, #0]
 8010ee4:	430a      	orrs	r2, r1
 8010ee6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010ee8:	6878      	ldr	r0, [r7, #4]
 8010eea:	f000 f811 	bl	8010f10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	68fa      	ldr	r2, [r7, #12]
 8010ef4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	2220      	movs	r2, #32
 8010efa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	2200      	movs	r2, #0
 8010f02:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010f06:	2300      	movs	r3, #0
}
 8010f08:	4618      	mov	r0, r3
 8010f0a:	3710      	adds	r7, #16
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	bd80      	pop	{r7, pc}

08010f10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010f10:	b480      	push	{r7}
 8010f12:	b089      	sub	sp, #36	; 0x24
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8010f18:	4a2f      	ldr	r2, [pc, #188]	; (8010fd8 <UARTEx_SetNbDataToProcess+0xc8>)
 8010f1a:	f107 0314 	add.w	r3, r7, #20
 8010f1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f22:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8010f26:	4a2d      	ldr	r2, [pc, #180]	; (8010fdc <UARTEx_SetNbDataToProcess+0xcc>)
 8010f28:	f107 030c 	add.w	r3, r7, #12
 8010f2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f30:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d108      	bne.n	8010f4e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	2201      	movs	r2, #1
 8010f40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	2201      	movs	r2, #1
 8010f48:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010f4c:	e03d      	b.n	8010fca <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010f4e:	2310      	movs	r3, #16
 8010f50:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010f52:	2310      	movs	r3, #16
 8010f54:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	689b      	ldr	r3, [r3, #8]
 8010f5c:	0e5b      	lsrs	r3, r3, #25
 8010f5e:	b2db      	uxtb	r3, r3
 8010f60:	f003 0307 	and.w	r3, r3, #7
 8010f64:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	689b      	ldr	r3, [r3, #8]
 8010f6c:	0f5b      	lsrs	r3, r3, #29
 8010f6e:	b2db      	uxtb	r3, r3
 8010f70:	f003 0307 	and.w	r3, r3, #7
 8010f74:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8010f76:	7fbb      	ldrb	r3, [r7, #30]
 8010f78:	7f3a      	ldrb	r2, [r7, #28]
 8010f7a:	f107 0120 	add.w	r1, r7, #32
 8010f7e:	440a      	add	r2, r1
 8010f80:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8010f84:	fb02 f303 	mul.w	r3, r2, r3
 8010f88:	7f3a      	ldrb	r2, [r7, #28]
 8010f8a:	f107 0120 	add.w	r1, r7, #32
 8010f8e:	440a      	add	r2, r1
 8010f90:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8010f94:	fb93 f3f2 	sdiv	r3, r3, r2
 8010f98:	b29a      	uxth	r2, r3
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8010fa0:	7ffb      	ldrb	r3, [r7, #31]
 8010fa2:	7f7a      	ldrb	r2, [r7, #29]
 8010fa4:	f107 0120 	add.w	r1, r7, #32
 8010fa8:	440a      	add	r2, r1
 8010faa:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8010fae:	fb02 f303 	mul.w	r3, r2, r3
 8010fb2:	7f7a      	ldrb	r2, [r7, #29]
 8010fb4:	f107 0120 	add.w	r1, r7, #32
 8010fb8:	440a      	add	r2, r1
 8010fba:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8010fbe:	fb93 f3f2 	sdiv	r3, r3, r2
 8010fc2:	b29a      	uxth	r2, r3
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010fca:	bf00      	nop
 8010fcc:	3724      	adds	r7, #36	; 0x24
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd4:	4770      	bx	lr
 8010fd6:	bf00      	nop
 8010fd8:	0801ae8c 	.word	0x0801ae8c
 8010fdc:	0801ae94 	.word	0x0801ae94

08010fe0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010fe0:	b084      	sub	sp, #16
 8010fe2:	b480      	push	{r7}
 8010fe4:	b085      	sub	sp, #20
 8010fe6:	af00      	add	r7, sp, #0
 8010fe8:	6078      	str	r0, [r7, #4]
 8010fea:	f107 001c 	add.w	r0, r7, #28
 8010fee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8010ff6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8010ff8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8010ffa:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8010ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8010ffe:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8011000:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8011002:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8011006:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8011008:	68fa      	ldr	r2, [r7, #12]
 801100a:	4313      	orrs	r3, r2
 801100c:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	685a      	ldr	r2, [r3, #4]
 8011012:	4b07      	ldr	r3, [pc, #28]	; (8011030 <SDMMC_Init+0x50>)
 8011014:	4013      	ands	r3, r2
 8011016:	68fa      	ldr	r2, [r7, #12]
 8011018:	431a      	orrs	r2, r3
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801101e:	2300      	movs	r3, #0
}
 8011020:	4618      	mov	r0, r3
 8011022:	3714      	adds	r7, #20
 8011024:	46bd      	mov	sp, r7
 8011026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801102a:	b004      	add	sp, #16
 801102c:	4770      	bx	lr
 801102e:	bf00      	nop
 8011030:	ffc02c00 	.word	0xffc02c00

08011034 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8011034:	b480      	push	{r7}
 8011036:	b083      	sub	sp, #12
 8011038:	af00      	add	r7, sp, #0
 801103a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011042:	4618      	mov	r0, r3
 8011044:	370c      	adds	r7, #12
 8011046:	46bd      	mov	sp, r7
 8011048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104c:	4770      	bx	lr

0801104e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 801104e:	b480      	push	{r7}
 8011050:	b083      	sub	sp, #12
 8011052:	af00      	add	r7, sp, #0
 8011054:	6078      	str	r0, [r7, #4]
 8011056:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8011058:	683b      	ldr	r3, [r7, #0]
 801105a:	681a      	ldr	r2, [r3, #0]
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011062:	2300      	movs	r3, #0
}
 8011064:	4618      	mov	r0, r3
 8011066:	370c      	adds	r7, #12
 8011068:	46bd      	mov	sp, r7
 801106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106e:	4770      	bx	lr

08011070 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8011070:	b480      	push	{r7}
 8011072:	b083      	sub	sp, #12
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	f043 0203 	orr.w	r2, r3, #3
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8011084:	2300      	movs	r3, #0
}
 8011086:	4618      	mov	r0, r3
 8011088:	370c      	adds	r7, #12
 801108a:	46bd      	mov	sp, r7
 801108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011090:	4770      	bx	lr

08011092 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8011092:	b480      	push	{r7}
 8011094:	b083      	sub	sp, #12
 8011096:	af00      	add	r7, sp, #0
 8011098:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	f003 0303 	and.w	r3, r3, #3
}
 80110a2:	4618      	mov	r0, r3
 80110a4:	370c      	adds	r7, #12
 80110a6:	46bd      	mov	sp, r7
 80110a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ac:	4770      	bx	lr
	...

080110b0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80110b0:	b480      	push	{r7}
 80110b2:	b085      	sub	sp, #20
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
 80110b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80110ba:	2300      	movs	r3, #0
 80110bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80110be:	683b      	ldr	r3, [r7, #0]
 80110c0:	681a      	ldr	r2, [r3, #0]
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80110c6:	683b      	ldr	r3, [r7, #0]
 80110c8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80110ca:	683b      	ldr	r3, [r7, #0]
 80110cc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80110ce:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80110d0:	683b      	ldr	r3, [r7, #0]
 80110d2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80110d4:	431a      	orrs	r2, r3
                       Command->CPSM);
 80110d6:	683b      	ldr	r3, [r7, #0]
 80110d8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80110da:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80110dc:	68fa      	ldr	r2, [r7, #12]
 80110de:	4313      	orrs	r3, r2
 80110e0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	68da      	ldr	r2, [r3, #12]
 80110e6:	4b06      	ldr	r3, [pc, #24]	; (8011100 <SDMMC_SendCommand+0x50>)
 80110e8:	4013      	ands	r3, r2
 80110ea:	68fa      	ldr	r2, [r7, #12]
 80110ec:	431a      	orrs	r2, r3
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80110f2:	2300      	movs	r3, #0
}
 80110f4:	4618      	mov	r0, r3
 80110f6:	3714      	adds	r7, #20
 80110f8:	46bd      	mov	sp, r7
 80110fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fe:	4770      	bx	lr
 8011100:	fffee0c0 	.word	0xfffee0c0

08011104 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8011104:	b480      	push	{r7}
 8011106:	b083      	sub	sp, #12
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	691b      	ldr	r3, [r3, #16]
 8011110:	b2db      	uxtb	r3, r3
}
 8011112:	4618      	mov	r0, r3
 8011114:	370c      	adds	r7, #12
 8011116:	46bd      	mov	sp, r7
 8011118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801111c:	4770      	bx	lr

0801111e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 801111e:	b480      	push	{r7}
 8011120:	b085      	sub	sp, #20
 8011122:	af00      	add	r7, sp, #0
 8011124:	6078      	str	r0, [r7, #4]
 8011126:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	3314      	adds	r3, #20
 801112c:	461a      	mov	r2, r3
 801112e:	683b      	ldr	r3, [r7, #0]
 8011130:	4413      	add	r3, r2
 8011132:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	681b      	ldr	r3, [r3, #0]
}
 8011138:	4618      	mov	r0, r3
 801113a:	3714      	adds	r7, #20
 801113c:	46bd      	mov	sp, r7
 801113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011142:	4770      	bx	lr

08011144 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8011144:	b480      	push	{r7}
 8011146:	b085      	sub	sp, #20
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
 801114c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801114e:	2300      	movs	r3, #0
 8011150:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8011152:	683b      	ldr	r3, [r7, #0]
 8011154:	681a      	ldr	r2, [r3, #0]
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801115a:	683b      	ldr	r3, [r7, #0]
 801115c:	685a      	ldr	r2, [r3, #4]
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011162:	683b      	ldr	r3, [r7, #0]
 8011164:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8011166:	683b      	ldr	r3, [r7, #0]
 8011168:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801116a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 801116c:	683b      	ldr	r3, [r7, #0]
 801116e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8011170:	431a      	orrs	r2, r3
                       Data->DPSM);
 8011172:	683b      	ldr	r3, [r7, #0]
 8011174:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8011176:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011178:	68fa      	ldr	r2, [r7, #12]
 801117a:	4313      	orrs	r3, r2
 801117c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011182:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	431a      	orrs	r2, r3
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801118e:	2300      	movs	r3, #0

}
 8011190:	4618      	mov	r0, r3
 8011192:	3714      	adds	r7, #20
 8011194:	46bd      	mov	sp, r7
 8011196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801119a:	4770      	bx	lr

0801119c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 801119c:	b580      	push	{r7, lr}
 801119e:	b088      	sub	sp, #32
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	6078      	str	r0, [r7, #4]
 80111a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80111a6:	683b      	ldr	r3, [r7, #0]
 80111a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80111aa:	2310      	movs	r3, #16
 80111ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80111ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80111b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80111b4:	2300      	movs	r3, #0
 80111b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80111b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80111bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80111be:	f107 0308 	add.w	r3, r7, #8
 80111c2:	4619      	mov	r1, r3
 80111c4:	6878      	ldr	r0, [r7, #4]
 80111c6:	f7ff ff73 	bl	80110b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80111ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80111ce:	2110      	movs	r1, #16
 80111d0:	6878      	ldr	r0, [r7, #4]
 80111d2:	f000 faaf 	bl	8011734 <SDMMC_GetCmdResp1>
 80111d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80111d8:	69fb      	ldr	r3, [r7, #28]
}
 80111da:	4618      	mov	r0, r3
 80111dc:	3720      	adds	r7, #32
 80111de:	46bd      	mov	sp, r7
 80111e0:	bd80      	pop	{r7, pc}

080111e2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80111e2:	b580      	push	{r7, lr}
 80111e4:	b088      	sub	sp, #32
 80111e6:	af00      	add	r7, sp, #0
 80111e8:	6078      	str	r0, [r7, #4]
 80111ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80111ec:	683b      	ldr	r3, [r7, #0]
 80111ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80111f0:	2311      	movs	r3, #17
 80111f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80111f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80111f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80111fa:	2300      	movs	r3, #0
 80111fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80111fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011202:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011204:	f107 0308 	add.w	r3, r7, #8
 8011208:	4619      	mov	r1, r3
 801120a:	6878      	ldr	r0, [r7, #4]
 801120c:	f7ff ff50 	bl	80110b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011210:	f241 3288 	movw	r2, #5000	; 0x1388
 8011214:	2111      	movs	r1, #17
 8011216:	6878      	ldr	r0, [r7, #4]
 8011218:	f000 fa8c 	bl	8011734 <SDMMC_GetCmdResp1>
 801121c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801121e:	69fb      	ldr	r3, [r7, #28]
}
 8011220:	4618      	mov	r0, r3
 8011222:	3720      	adds	r7, #32
 8011224:	46bd      	mov	sp, r7
 8011226:	bd80      	pop	{r7, pc}

08011228 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011228:	b580      	push	{r7, lr}
 801122a:	b088      	sub	sp, #32
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
 8011230:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011232:	683b      	ldr	r3, [r7, #0]
 8011234:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8011236:	2312      	movs	r3, #18
 8011238:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801123a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801123e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011240:	2300      	movs	r3, #0
 8011242:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011244:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011248:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801124a:	f107 0308 	add.w	r3, r7, #8
 801124e:	4619      	mov	r1, r3
 8011250:	6878      	ldr	r0, [r7, #4]
 8011252:	f7ff ff2d 	bl	80110b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011256:	f241 3288 	movw	r2, #5000	; 0x1388
 801125a:	2112      	movs	r1, #18
 801125c:	6878      	ldr	r0, [r7, #4]
 801125e:	f000 fa69 	bl	8011734 <SDMMC_GetCmdResp1>
 8011262:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011264:	69fb      	ldr	r3, [r7, #28]
}
 8011266:	4618      	mov	r0, r3
 8011268:	3720      	adds	r7, #32
 801126a:	46bd      	mov	sp, r7
 801126c:	bd80      	pop	{r7, pc}

0801126e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801126e:	b580      	push	{r7, lr}
 8011270:	b088      	sub	sp, #32
 8011272:	af00      	add	r7, sp, #0
 8011274:	6078      	str	r0, [r7, #4]
 8011276:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011278:	683b      	ldr	r3, [r7, #0]
 801127a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 801127c:	2318      	movs	r3, #24
 801127e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011280:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011284:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011286:	2300      	movs	r3, #0
 8011288:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801128a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801128e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011290:	f107 0308 	add.w	r3, r7, #8
 8011294:	4619      	mov	r1, r3
 8011296:	6878      	ldr	r0, [r7, #4]
 8011298:	f7ff ff0a 	bl	80110b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801129c:	f241 3288 	movw	r2, #5000	; 0x1388
 80112a0:	2118      	movs	r1, #24
 80112a2:	6878      	ldr	r0, [r7, #4]
 80112a4:	f000 fa46 	bl	8011734 <SDMMC_GetCmdResp1>
 80112a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80112aa:	69fb      	ldr	r3, [r7, #28]
}
 80112ac:	4618      	mov	r0, r3
 80112ae:	3720      	adds	r7, #32
 80112b0:	46bd      	mov	sp, r7
 80112b2:	bd80      	pop	{r7, pc}

080112b4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b088      	sub	sp, #32
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	6078      	str	r0, [r7, #4]
 80112bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80112be:	683b      	ldr	r3, [r7, #0]
 80112c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80112c2:	2319      	movs	r3, #25
 80112c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80112c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80112ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80112cc:	2300      	movs	r3, #0
 80112ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80112d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80112d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80112d6:	f107 0308 	add.w	r3, r7, #8
 80112da:	4619      	mov	r1, r3
 80112dc:	6878      	ldr	r0, [r7, #4]
 80112de:	f7ff fee7 	bl	80110b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80112e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80112e6:	2119      	movs	r1, #25
 80112e8:	6878      	ldr	r0, [r7, #4]
 80112ea:	f000 fa23 	bl	8011734 <SDMMC_GetCmdResp1>
 80112ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80112f0:	69fb      	ldr	r3, [r7, #28]
}
 80112f2:	4618      	mov	r0, r3
 80112f4:	3720      	adds	r7, #32
 80112f6:	46bd      	mov	sp, r7
 80112f8:	bd80      	pop	{r7, pc}
	...

080112fc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b088      	sub	sp, #32
 8011300:	af00      	add	r7, sp, #0
 8011302:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8011304:	2300      	movs	r3, #0
 8011306:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8011308:	230c      	movs	r3, #12
 801130a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801130c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011310:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011312:	2300      	movs	r3, #0
 8011314:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011316:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801131a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	68db      	ldr	r3, [r3, #12]
 8011320:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	68db      	ldr	r3, [r3, #12]
 801132c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011334:	f107 0308 	add.w	r3, r7, #8
 8011338:	4619      	mov	r1, r3
 801133a:	6878      	ldr	r0, [r7, #4]
 801133c:	f7ff feb8 	bl	80110b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8011340:	4a0b      	ldr	r2, [pc, #44]	; (8011370 <SDMMC_CmdStopTransfer+0x74>)
 8011342:	210c      	movs	r1, #12
 8011344:	6878      	ldr	r0, [r7, #4]
 8011346:	f000 f9f5 	bl	8011734 <SDMMC_GetCmdResp1>
 801134a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	68db      	ldr	r3, [r3, #12]
 8011350:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8011358:	69fb      	ldr	r3, [r7, #28]
 801135a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801135e:	d101      	bne.n	8011364 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8011360:	2300      	movs	r3, #0
 8011362:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8011364:	69fb      	ldr	r3, [r7, #28]
}
 8011366:	4618      	mov	r0, r3
 8011368:	3720      	adds	r7, #32
 801136a:	46bd      	mov	sp, r7
 801136c:	bd80      	pop	{r7, pc}
 801136e:	bf00      	nop
 8011370:	05f5e100 	.word	0x05f5e100

08011374 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8011374:	b580      	push	{r7, lr}
 8011376:	b08a      	sub	sp, #40	; 0x28
 8011378:	af00      	add	r7, sp, #0
 801137a:	60f8      	str	r0, [r7, #12]
 801137c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8011380:	683b      	ldr	r3, [r7, #0]
 8011382:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8011384:	2307      	movs	r3, #7
 8011386:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011388:	f44f 7380 	mov.w	r3, #256	; 0x100
 801138c:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801138e:	2300      	movs	r3, #0
 8011390:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011392:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011396:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011398:	f107 0310 	add.w	r3, r7, #16
 801139c:	4619      	mov	r1, r3
 801139e:	68f8      	ldr	r0, [r7, #12]
 80113a0:	f7ff fe86 	bl	80110b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80113a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80113a8:	2107      	movs	r1, #7
 80113aa:	68f8      	ldr	r0, [r7, #12]
 80113ac:	f000 f9c2 	bl	8011734 <SDMMC_GetCmdResp1>
 80113b0:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80113b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80113b4:	4618      	mov	r0, r3
 80113b6:	3728      	adds	r7, #40	; 0x28
 80113b8:	46bd      	mov	sp, r7
 80113ba:	bd80      	pop	{r7, pc}

080113bc <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80113bc:	b580      	push	{r7, lr}
 80113be:	b088      	sub	sp, #32
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80113c4:	2300      	movs	r3, #0
 80113c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80113c8:	2300      	movs	r3, #0
 80113ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80113cc:	2300      	movs	r3, #0
 80113ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80113d0:	2300      	movs	r3, #0
 80113d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80113d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80113d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80113da:	f107 0308 	add.w	r3, r7, #8
 80113de:	4619      	mov	r1, r3
 80113e0:	6878      	ldr	r0, [r7, #4]
 80113e2:	f7ff fe65 	bl	80110b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80113e6:	6878      	ldr	r0, [r7, #4]
 80113e8:	f000 f976 	bl	80116d8 <SDMMC_GetCmdError>
 80113ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80113ee:	69fb      	ldr	r3, [r7, #28]
}
 80113f0:	4618      	mov	r0, r3
 80113f2:	3720      	adds	r7, #32
 80113f4:	46bd      	mov	sp, r7
 80113f6:	bd80      	pop	{r7, pc}

080113f8 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b088      	sub	sp, #32
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8011400:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8011404:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8011406:	2308      	movs	r3, #8
 8011408:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801140a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801140e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011410:	2300      	movs	r3, #0
 8011412:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011418:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801141a:	f107 0308 	add.w	r3, r7, #8
 801141e:	4619      	mov	r1, r3
 8011420:	6878      	ldr	r0, [r7, #4]
 8011422:	f7ff fe45 	bl	80110b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8011426:	6878      	ldr	r0, [r7, #4]
 8011428:	f000 fb78 	bl	8011b1c <SDMMC_GetCmdResp7>
 801142c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801142e:	69fb      	ldr	r3, [r7, #28]
}
 8011430:	4618      	mov	r0, r3
 8011432:	3720      	adds	r7, #32
 8011434:	46bd      	mov	sp, r7
 8011436:	bd80      	pop	{r7, pc}

08011438 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b088      	sub	sp, #32
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
 8011440:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8011442:	683b      	ldr	r3, [r7, #0]
 8011444:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8011446:	2337      	movs	r3, #55	; 0x37
 8011448:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801144a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801144e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011450:	2300      	movs	r3, #0
 8011452:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011458:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801145a:	f107 0308 	add.w	r3, r7, #8
 801145e:	4619      	mov	r1, r3
 8011460:	6878      	ldr	r0, [r7, #4]
 8011462:	f7ff fe25 	bl	80110b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8011466:	f241 3288 	movw	r2, #5000	; 0x1388
 801146a:	2137      	movs	r1, #55	; 0x37
 801146c:	6878      	ldr	r0, [r7, #4]
 801146e:	f000 f961 	bl	8011734 <SDMMC_GetCmdResp1>
 8011472:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011474:	69fb      	ldr	r3, [r7, #28]
}
 8011476:	4618      	mov	r0, r3
 8011478:	3720      	adds	r7, #32
 801147a:	46bd      	mov	sp, r7
 801147c:	bd80      	pop	{r7, pc}

0801147e <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801147e:	b580      	push	{r7, lr}
 8011480:	b088      	sub	sp, #32
 8011482:	af00      	add	r7, sp, #0
 8011484:	6078      	str	r0, [r7, #4]
 8011486:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8011488:	683b      	ldr	r3, [r7, #0]
 801148a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801148c:	2329      	movs	r3, #41	; 0x29
 801148e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011490:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011494:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011496:	2300      	movs	r3, #0
 8011498:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801149a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801149e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80114a0:	f107 0308 	add.w	r3, r7, #8
 80114a4:	4619      	mov	r1, r3
 80114a6:	6878      	ldr	r0, [r7, #4]
 80114a8:	f7ff fe02 	bl	80110b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80114ac:	6878      	ldr	r0, [r7, #4]
 80114ae:	f000 fa7d 	bl	80119ac <SDMMC_GetCmdResp3>
 80114b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80114b4:	69fb      	ldr	r3, [r7, #28]
}
 80114b6:	4618      	mov	r0, r3
 80114b8:	3720      	adds	r7, #32
 80114ba:	46bd      	mov	sp, r7
 80114bc:	bd80      	pop	{r7, pc}

080114be <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80114be:	b580      	push	{r7, lr}
 80114c0:	b088      	sub	sp, #32
 80114c2:	af00      	add	r7, sp, #0
 80114c4:	6078      	str	r0, [r7, #4]
 80114c6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80114c8:	683b      	ldr	r3, [r7, #0]
 80114ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80114cc:	2306      	movs	r3, #6
 80114ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80114d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80114d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80114d6:	2300      	movs	r3, #0
 80114d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80114da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80114de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80114e0:	f107 0308 	add.w	r3, r7, #8
 80114e4:	4619      	mov	r1, r3
 80114e6:	6878      	ldr	r0, [r7, #4]
 80114e8:	f7ff fde2 	bl	80110b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80114ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80114f0:	2106      	movs	r1, #6
 80114f2:	6878      	ldr	r0, [r7, #4]
 80114f4:	f000 f91e 	bl	8011734 <SDMMC_GetCmdResp1>
 80114f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80114fa:	69fb      	ldr	r3, [r7, #28]
}
 80114fc:	4618      	mov	r0, r3
 80114fe:	3720      	adds	r7, #32
 8011500:	46bd      	mov	sp, r7
 8011502:	bd80      	pop	{r7, pc}

08011504 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8011504:	b580      	push	{r7, lr}
 8011506:	b088      	sub	sp, #32
 8011508:	af00      	add	r7, sp, #0
 801150a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801150c:	2300      	movs	r3, #0
 801150e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8011510:	2333      	movs	r3, #51	; 0x33
 8011512:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011514:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011518:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801151a:	2300      	movs	r3, #0
 801151c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801151e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011522:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011524:	f107 0308 	add.w	r3, r7, #8
 8011528:	4619      	mov	r1, r3
 801152a:	6878      	ldr	r0, [r7, #4]
 801152c:	f7ff fdc0 	bl	80110b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8011530:	f241 3288 	movw	r2, #5000	; 0x1388
 8011534:	2133      	movs	r1, #51	; 0x33
 8011536:	6878      	ldr	r0, [r7, #4]
 8011538:	f000 f8fc 	bl	8011734 <SDMMC_GetCmdResp1>
 801153c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801153e:	69fb      	ldr	r3, [r7, #28]
}
 8011540:	4618      	mov	r0, r3
 8011542:	3720      	adds	r7, #32
 8011544:	46bd      	mov	sp, r7
 8011546:	bd80      	pop	{r7, pc}

08011548 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8011548:	b580      	push	{r7, lr}
 801154a:	b088      	sub	sp, #32
 801154c:	af00      	add	r7, sp, #0
 801154e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8011550:	2300      	movs	r3, #0
 8011552:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8011554:	2302      	movs	r3, #2
 8011556:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011558:	f44f 7340 	mov.w	r3, #768	; 0x300
 801155c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801155e:	2300      	movs	r3, #0
 8011560:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011562:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011566:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011568:	f107 0308 	add.w	r3, r7, #8
 801156c:	4619      	mov	r1, r3
 801156e:	6878      	ldr	r0, [r7, #4]
 8011570:	f7ff fd9e 	bl	80110b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011574:	6878      	ldr	r0, [r7, #4]
 8011576:	f000 f9cf 	bl	8011918 <SDMMC_GetCmdResp2>
 801157a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801157c:	69fb      	ldr	r3, [r7, #28]
}
 801157e:	4618      	mov	r0, r3
 8011580:	3720      	adds	r7, #32
 8011582:	46bd      	mov	sp, r7
 8011584:	bd80      	pop	{r7, pc}

08011586 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011586:	b580      	push	{r7, lr}
 8011588:	b088      	sub	sp, #32
 801158a:	af00      	add	r7, sp, #0
 801158c:	6078      	str	r0, [r7, #4]
 801158e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8011590:	683b      	ldr	r3, [r7, #0]
 8011592:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8011594:	2309      	movs	r3, #9
 8011596:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011598:	f44f 7340 	mov.w	r3, #768	; 0x300
 801159c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801159e:	2300      	movs	r3, #0
 80115a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80115a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80115a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80115a8:	f107 0308 	add.w	r3, r7, #8
 80115ac:	4619      	mov	r1, r3
 80115ae:	6878      	ldr	r0, [r7, #4]
 80115b0:	f7ff fd7e 	bl	80110b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80115b4:	6878      	ldr	r0, [r7, #4]
 80115b6:	f000 f9af 	bl	8011918 <SDMMC_GetCmdResp2>
 80115ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80115bc:	69fb      	ldr	r3, [r7, #28]
}
 80115be:	4618      	mov	r0, r3
 80115c0:	3720      	adds	r7, #32
 80115c2:	46bd      	mov	sp, r7
 80115c4:	bd80      	pop	{r7, pc}

080115c6 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80115c6:	b580      	push	{r7, lr}
 80115c8:	b088      	sub	sp, #32
 80115ca:	af00      	add	r7, sp, #0
 80115cc:	6078      	str	r0, [r7, #4]
 80115ce:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80115d0:	2300      	movs	r3, #0
 80115d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80115d4:	2303      	movs	r3, #3
 80115d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80115d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80115dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80115de:	2300      	movs	r3, #0
 80115e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80115e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80115e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80115e8:	f107 0308 	add.w	r3, r7, #8
 80115ec:	4619      	mov	r1, r3
 80115ee:	6878      	ldr	r0, [r7, #4]
 80115f0:	f7ff fd5e 	bl	80110b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80115f4:	683a      	ldr	r2, [r7, #0]
 80115f6:	2103      	movs	r1, #3
 80115f8:	6878      	ldr	r0, [r7, #4]
 80115fa:	f000 fa17 	bl	8011a2c <SDMMC_GetCmdResp6>
 80115fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011600:	69fb      	ldr	r3, [r7, #28]
}
 8011602:	4618      	mov	r0, r3
 8011604:	3720      	adds	r7, #32
 8011606:	46bd      	mov	sp, r7
 8011608:	bd80      	pop	{r7, pc}

0801160a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801160a:	b580      	push	{r7, lr}
 801160c:	b088      	sub	sp, #32
 801160e:	af00      	add	r7, sp, #0
 8011610:	6078      	str	r0, [r7, #4]
 8011612:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8011614:	683b      	ldr	r3, [r7, #0]
 8011616:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8011618:	230d      	movs	r3, #13
 801161a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801161c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011620:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011622:	2300      	movs	r3, #0
 8011624:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011626:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801162a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801162c:	f107 0308 	add.w	r3, r7, #8
 8011630:	4619      	mov	r1, r3
 8011632:	6878      	ldr	r0, [r7, #4]
 8011634:	f7ff fd3c 	bl	80110b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8011638:	f241 3288 	movw	r2, #5000	; 0x1388
 801163c:	210d      	movs	r1, #13
 801163e:	6878      	ldr	r0, [r7, #4]
 8011640:	f000 f878 	bl	8011734 <SDMMC_GetCmdResp1>
 8011644:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011646:	69fb      	ldr	r3, [r7, #28]
}
 8011648:	4618      	mov	r0, r3
 801164a:	3720      	adds	r7, #32
 801164c:	46bd      	mov	sp, r7
 801164e:	bd80      	pop	{r7, pc}

08011650 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b088      	sub	sp, #32
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8011658:	2300      	movs	r3, #0
 801165a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 801165c:	230d      	movs	r3, #13
 801165e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011660:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011664:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011666:	2300      	movs	r3, #0
 8011668:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801166a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801166e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011670:	f107 0308 	add.w	r3, r7, #8
 8011674:	4619      	mov	r1, r3
 8011676:	6878      	ldr	r0, [r7, #4]
 8011678:	f7ff fd1a 	bl	80110b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 801167c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011680:	210d      	movs	r1, #13
 8011682:	6878      	ldr	r0, [r7, #4]
 8011684:	f000 f856 	bl	8011734 <SDMMC_GetCmdResp1>
 8011688:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801168a:	69fb      	ldr	r3, [r7, #28]
}
 801168c:	4618      	mov	r0, r3
 801168e:	3720      	adds	r7, #32
 8011690:	46bd      	mov	sp, r7
 8011692:	bd80      	pop	{r7, pc}

08011694 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8011694:	b580      	push	{r7, lr}
 8011696:	b088      	sub	sp, #32
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 801169c:	2300      	movs	r3, #0
 801169e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 80116a0:	230b      	movs	r3, #11
 80116a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80116a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80116a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80116aa:	2300      	movs	r3, #0
 80116ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80116ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80116b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80116b4:	f107 0308 	add.w	r3, r7, #8
 80116b8:	4619      	mov	r1, r3
 80116ba:	6878      	ldr	r0, [r7, #4]
 80116bc:	f7ff fcf8 	bl	80110b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 80116c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80116c4:	210b      	movs	r1, #11
 80116c6:	6878      	ldr	r0, [r7, #4]
 80116c8:	f000 f834 	bl	8011734 <SDMMC_GetCmdResp1>
 80116cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80116ce:	69fb      	ldr	r3, [r7, #28]
}
 80116d0:	4618      	mov	r0, r3
 80116d2:	3720      	adds	r7, #32
 80116d4:	46bd      	mov	sp, r7
 80116d6:	bd80      	pop	{r7, pc}

080116d8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80116d8:	b480      	push	{r7}
 80116da:	b085      	sub	sp, #20
 80116dc:	af00      	add	r7, sp, #0
 80116de:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80116e0:	4b11      	ldr	r3, [pc, #68]	; (8011728 <SDMMC_GetCmdError+0x50>)
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	4a11      	ldr	r2, [pc, #68]	; (801172c <SDMMC_GetCmdError+0x54>)
 80116e6:	fba2 2303 	umull	r2, r3, r2, r3
 80116ea:	0a5b      	lsrs	r3, r3, #9
 80116ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80116f0:	fb02 f303 	mul.w	r3, r2, r3
 80116f4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	1e5a      	subs	r2, r3, #1
 80116fa:	60fa      	str	r2, [r7, #12]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d102      	bne.n	8011706 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011700:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011704:	e009      	b.n	801171a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801170a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801170e:	2b00      	cmp	r3, #0
 8011710:	d0f1      	beq.n	80116f6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	4a06      	ldr	r2, [pc, #24]	; (8011730 <SDMMC_GetCmdError+0x58>)
 8011716:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8011718:	2300      	movs	r3, #0
}
 801171a:	4618      	mov	r0, r3
 801171c:	3714      	adds	r7, #20
 801171e:	46bd      	mov	sp, r7
 8011720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011724:	4770      	bx	lr
 8011726:	bf00      	nop
 8011728:	24000010 	.word	0x24000010
 801172c:	10624dd3 	.word	0x10624dd3
 8011730:	002000c5 	.word	0x002000c5

08011734 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8011734:	b580      	push	{r7, lr}
 8011736:	b088      	sub	sp, #32
 8011738:	af00      	add	r7, sp, #0
 801173a:	60f8      	str	r0, [r7, #12]
 801173c:	460b      	mov	r3, r1
 801173e:	607a      	str	r2, [r7, #4]
 8011740:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011742:	4b70      	ldr	r3, [pc, #448]	; (8011904 <SDMMC_GetCmdResp1+0x1d0>)
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	4a70      	ldr	r2, [pc, #448]	; (8011908 <SDMMC_GetCmdResp1+0x1d4>)
 8011748:	fba2 2303 	umull	r2, r3, r2, r3
 801174c:	0a5a      	lsrs	r2, r3, #9
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	fb02 f303 	mul.w	r3, r2, r3
 8011754:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8011756:	69fb      	ldr	r3, [r7, #28]
 8011758:	1e5a      	subs	r2, r3, #1
 801175a:	61fa      	str	r2, [r7, #28]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d102      	bne.n	8011766 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011760:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011764:	e0c9      	b.n	80118fa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801176a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801176c:	69ba      	ldr	r2, [r7, #24]
 801176e:	4b67      	ldr	r3, [pc, #412]	; (801190c <SDMMC_GetCmdResp1+0x1d8>)
 8011770:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011772:	2b00      	cmp	r3, #0
 8011774:	d0ef      	beq.n	8011756 <SDMMC_GetCmdResp1+0x22>
 8011776:	69bb      	ldr	r3, [r7, #24]
 8011778:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 801177c:	2b00      	cmp	r3, #0
 801177e:	d1ea      	bne.n	8011756 <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011784:	f003 0304 	and.w	r3, r3, #4
 8011788:	2b00      	cmp	r3, #0
 801178a:	d004      	beq.n	8011796 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	2204      	movs	r2, #4
 8011790:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011792:	2304      	movs	r3, #4
 8011794:	e0b1      	b.n	80118fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801179a:	f003 0301 	and.w	r3, r3, #1
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d004      	beq.n	80117ac <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	2201      	movs	r2, #1
 80117a6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80117a8:	2301      	movs	r3, #1
 80117aa:	e0a6      	b.n	80118fa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	4a58      	ldr	r2, [pc, #352]	; (8011910 <SDMMC_GetCmdResp1+0x1dc>)
 80117b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80117b2:	68f8      	ldr	r0, [r7, #12]
 80117b4:	f7ff fca6 	bl	8011104 <SDMMC_GetCommandResponse>
 80117b8:	4603      	mov	r3, r0
 80117ba:	461a      	mov	r2, r3
 80117bc:	7afb      	ldrb	r3, [r7, #11]
 80117be:	4293      	cmp	r3, r2
 80117c0:	d001      	beq.n	80117c6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80117c2:	2301      	movs	r3, #1
 80117c4:	e099      	b.n	80118fa <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80117c6:	2100      	movs	r1, #0
 80117c8:	68f8      	ldr	r0, [r7, #12]
 80117ca:	f7ff fca8 	bl	801111e <SDMMC_GetResponse>
 80117ce:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80117d0:	697a      	ldr	r2, [r7, #20]
 80117d2:	4b50      	ldr	r3, [pc, #320]	; (8011914 <SDMMC_GetCmdResp1+0x1e0>)
 80117d4:	4013      	ands	r3, r2
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d101      	bne.n	80117de <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80117da:	2300      	movs	r3, #0
 80117dc:	e08d      	b.n	80118fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80117de:	697b      	ldr	r3, [r7, #20]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	da02      	bge.n	80117ea <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80117e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80117e8:	e087      	b.n	80118fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80117ea:	697b      	ldr	r3, [r7, #20]
 80117ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d001      	beq.n	80117f8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80117f4:	2340      	movs	r3, #64	; 0x40
 80117f6:	e080      	b.n	80118fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80117f8:	697b      	ldr	r3, [r7, #20]
 80117fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d001      	beq.n	8011806 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8011802:	2380      	movs	r3, #128	; 0x80
 8011804:	e079      	b.n	80118fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8011806:	697b      	ldr	r3, [r7, #20]
 8011808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801180c:	2b00      	cmp	r3, #0
 801180e:	d002      	beq.n	8011816 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011810:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011814:	e071      	b.n	80118fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8011816:	697b      	ldr	r3, [r7, #20]
 8011818:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801181c:	2b00      	cmp	r3, #0
 801181e:	d002      	beq.n	8011826 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011820:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011824:	e069      	b.n	80118fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8011826:	697b      	ldr	r3, [r7, #20]
 8011828:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801182c:	2b00      	cmp	r3, #0
 801182e:	d002      	beq.n	8011836 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011834:	e061      	b.n	80118fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8011836:	697b      	ldr	r3, [r7, #20]
 8011838:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801183c:	2b00      	cmp	r3, #0
 801183e:	d002      	beq.n	8011846 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011840:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011844:	e059      	b.n	80118fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8011846:	697b      	ldr	r3, [r7, #20]
 8011848:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801184c:	2b00      	cmp	r3, #0
 801184e:	d002      	beq.n	8011856 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011854:	e051      	b.n	80118fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8011856:	697b      	ldr	r3, [r7, #20]
 8011858:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801185c:	2b00      	cmp	r3, #0
 801185e:	d002      	beq.n	8011866 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011860:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011864:	e049      	b.n	80118fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8011866:	697b      	ldr	r3, [r7, #20]
 8011868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801186c:	2b00      	cmp	r3, #0
 801186e:	d002      	beq.n	8011876 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011870:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011874:	e041      	b.n	80118fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8011876:	697b      	ldr	r3, [r7, #20]
 8011878:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801187c:	2b00      	cmp	r3, #0
 801187e:	d002      	beq.n	8011886 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8011880:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011884:	e039      	b.n	80118fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8011886:	697b      	ldr	r3, [r7, #20]
 8011888:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801188c:	2b00      	cmp	r3, #0
 801188e:	d002      	beq.n	8011896 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011890:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011894:	e031      	b.n	80118fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8011896:	697b      	ldr	r3, [r7, #20]
 8011898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801189c:	2b00      	cmp	r3, #0
 801189e:	d002      	beq.n	80118a6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80118a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80118a4:	e029      	b.n	80118fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80118a6:	697b      	ldr	r3, [r7, #20]
 80118a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d002      	beq.n	80118b6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80118b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80118b4:	e021      	b.n	80118fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80118b6:	697b      	ldr	r3, [r7, #20]
 80118b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d002      	beq.n	80118c6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80118c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80118c4:	e019      	b.n	80118fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80118c6:	697b      	ldr	r3, [r7, #20]
 80118c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d002      	beq.n	80118d6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80118d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80118d4:	e011      	b.n	80118fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80118d6:	697b      	ldr	r3, [r7, #20]
 80118d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d002      	beq.n	80118e6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80118e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80118e4:	e009      	b.n	80118fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80118e6:	697b      	ldr	r3, [r7, #20]
 80118e8:	f003 0308 	and.w	r3, r3, #8
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d002      	beq.n	80118f6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80118f0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80118f4:	e001      	b.n	80118fa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80118f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80118fa:	4618      	mov	r0, r3
 80118fc:	3720      	adds	r7, #32
 80118fe:	46bd      	mov	sp, r7
 8011900:	bd80      	pop	{r7, pc}
 8011902:	bf00      	nop
 8011904:	24000010 	.word	0x24000010
 8011908:	10624dd3 	.word	0x10624dd3
 801190c:	00200045 	.word	0x00200045
 8011910:	002000c5 	.word	0x002000c5
 8011914:	fdffe008 	.word	0xfdffe008

08011918 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8011918:	b480      	push	{r7}
 801191a:	b085      	sub	sp, #20
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011920:	4b1f      	ldr	r3, [pc, #124]	; (80119a0 <SDMMC_GetCmdResp2+0x88>)
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	4a1f      	ldr	r2, [pc, #124]	; (80119a4 <SDMMC_GetCmdResp2+0x8c>)
 8011926:	fba2 2303 	umull	r2, r3, r2, r3
 801192a:	0a5b      	lsrs	r3, r3, #9
 801192c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011930:	fb02 f303 	mul.w	r3, r2, r3
 8011934:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	1e5a      	subs	r2, r3, #1
 801193a:	60fa      	str	r2, [r7, #12]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d102      	bne.n	8011946 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011940:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011944:	e026      	b.n	8011994 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801194a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801194c:	68bb      	ldr	r3, [r7, #8]
 801194e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011952:	2b00      	cmp	r3, #0
 8011954:	d0ef      	beq.n	8011936 <SDMMC_GetCmdResp2+0x1e>
 8011956:	68bb      	ldr	r3, [r7, #8]
 8011958:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801195c:	2b00      	cmp	r3, #0
 801195e:	d1ea      	bne.n	8011936 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011964:	f003 0304 	and.w	r3, r3, #4
 8011968:	2b00      	cmp	r3, #0
 801196a:	d004      	beq.n	8011976 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	2204      	movs	r2, #4
 8011970:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011972:	2304      	movs	r3, #4
 8011974:	e00e      	b.n	8011994 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801197a:	f003 0301 	and.w	r3, r3, #1
 801197e:	2b00      	cmp	r3, #0
 8011980:	d004      	beq.n	801198c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	2201      	movs	r2, #1
 8011986:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011988:	2301      	movs	r3, #1
 801198a:	e003      	b.n	8011994 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	4a06      	ldr	r2, [pc, #24]	; (80119a8 <SDMMC_GetCmdResp2+0x90>)
 8011990:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011992:	2300      	movs	r3, #0
}
 8011994:	4618      	mov	r0, r3
 8011996:	3714      	adds	r7, #20
 8011998:	46bd      	mov	sp, r7
 801199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801199e:	4770      	bx	lr
 80119a0:	24000010 	.word	0x24000010
 80119a4:	10624dd3 	.word	0x10624dd3
 80119a8:	002000c5 	.word	0x002000c5

080119ac <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80119ac:	b480      	push	{r7}
 80119ae:	b085      	sub	sp, #20
 80119b0:	af00      	add	r7, sp, #0
 80119b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80119b4:	4b1a      	ldr	r3, [pc, #104]	; (8011a20 <SDMMC_GetCmdResp3+0x74>)
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	4a1a      	ldr	r2, [pc, #104]	; (8011a24 <SDMMC_GetCmdResp3+0x78>)
 80119ba:	fba2 2303 	umull	r2, r3, r2, r3
 80119be:	0a5b      	lsrs	r3, r3, #9
 80119c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80119c4:	fb02 f303 	mul.w	r3, r2, r3
 80119c8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	1e5a      	subs	r2, r3, #1
 80119ce:	60fa      	str	r2, [r7, #12]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d102      	bne.n	80119da <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80119d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80119d8:	e01b      	b.n	8011a12 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119de:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80119e0:	68bb      	ldr	r3, [r7, #8]
 80119e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d0ef      	beq.n	80119ca <SDMMC_GetCmdResp3+0x1e>
 80119ea:	68bb      	ldr	r3, [r7, #8]
 80119ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d1ea      	bne.n	80119ca <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119f8:	f003 0304 	and.w	r3, r3, #4
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d004      	beq.n	8011a0a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	2204      	movs	r2, #4
 8011a04:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011a06:	2304      	movs	r3, #4
 8011a08:	e003      	b.n	8011a12 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	4a06      	ldr	r2, [pc, #24]	; (8011a28 <SDMMC_GetCmdResp3+0x7c>)
 8011a0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011a10:	2300      	movs	r3, #0
}
 8011a12:	4618      	mov	r0, r3
 8011a14:	3714      	adds	r7, #20
 8011a16:	46bd      	mov	sp, r7
 8011a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1c:	4770      	bx	lr
 8011a1e:	bf00      	nop
 8011a20:	24000010 	.word	0x24000010
 8011a24:	10624dd3 	.word	0x10624dd3
 8011a28:	002000c5 	.word	0x002000c5

08011a2c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011a2c:	b580      	push	{r7, lr}
 8011a2e:	b088      	sub	sp, #32
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	60f8      	str	r0, [r7, #12]
 8011a34:	460b      	mov	r3, r1
 8011a36:	607a      	str	r2, [r7, #4]
 8011a38:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011a3a:	4b35      	ldr	r3, [pc, #212]	; (8011b10 <SDMMC_GetCmdResp6+0xe4>)
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	4a35      	ldr	r2, [pc, #212]	; (8011b14 <SDMMC_GetCmdResp6+0xe8>)
 8011a40:	fba2 2303 	umull	r2, r3, r2, r3
 8011a44:	0a5b      	lsrs	r3, r3, #9
 8011a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8011a4a:	fb02 f303 	mul.w	r3, r2, r3
 8011a4e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8011a50:	69fb      	ldr	r3, [r7, #28]
 8011a52:	1e5a      	subs	r2, r3, #1
 8011a54:	61fa      	str	r2, [r7, #28]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d102      	bne.n	8011a60 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011a5a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011a5e:	e052      	b.n	8011b06 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a64:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011a66:	69bb      	ldr	r3, [r7, #24]
 8011a68:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d0ef      	beq.n	8011a50 <SDMMC_GetCmdResp6+0x24>
 8011a70:	69bb      	ldr	r3, [r7, #24]
 8011a72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d1ea      	bne.n	8011a50 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a7e:	f003 0304 	and.w	r3, r3, #4
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d004      	beq.n	8011a90 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	2204      	movs	r2, #4
 8011a8a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011a8c:	2304      	movs	r3, #4
 8011a8e:	e03a      	b.n	8011b06 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a94:	f003 0301 	and.w	r3, r3, #1
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d004      	beq.n	8011aa6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	2201      	movs	r2, #1
 8011aa0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011aa2:	2301      	movs	r3, #1
 8011aa4:	e02f      	b.n	8011b06 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011aa6:	68f8      	ldr	r0, [r7, #12]
 8011aa8:	f7ff fb2c 	bl	8011104 <SDMMC_GetCommandResponse>
 8011aac:	4603      	mov	r3, r0
 8011aae:	461a      	mov	r2, r3
 8011ab0:	7afb      	ldrb	r3, [r7, #11]
 8011ab2:	4293      	cmp	r3, r2
 8011ab4:	d001      	beq.n	8011aba <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011ab6:	2301      	movs	r3, #1
 8011ab8:	e025      	b.n	8011b06 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	4a16      	ldr	r2, [pc, #88]	; (8011b18 <SDMMC_GetCmdResp6+0xec>)
 8011abe:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011ac0:	2100      	movs	r1, #0
 8011ac2:	68f8      	ldr	r0, [r7, #12]
 8011ac4:	f7ff fb2b 	bl	801111e <SDMMC_GetResponse>
 8011ac8:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8011aca:	697b      	ldr	r3, [r7, #20]
 8011acc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d106      	bne.n	8011ae2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8011ad4:	697b      	ldr	r3, [r7, #20]
 8011ad6:	0c1b      	lsrs	r3, r3, #16
 8011ad8:	b29a      	uxth	r2, r3
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8011ade:	2300      	movs	r3, #0
 8011ae0:	e011      	b.n	8011b06 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8011ae2:	697b      	ldr	r3, [r7, #20]
 8011ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d002      	beq.n	8011af2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011aec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011af0:	e009      	b.n	8011b06 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8011af2:	697b      	ldr	r3, [r7, #20]
 8011af4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d002      	beq.n	8011b02 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011b00:	e001      	b.n	8011b06 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011b02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011b06:	4618      	mov	r0, r3
 8011b08:	3720      	adds	r7, #32
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd80      	pop	{r7, pc}
 8011b0e:	bf00      	nop
 8011b10:	24000010 	.word	0x24000010
 8011b14:	10624dd3 	.word	0x10624dd3
 8011b18:	002000c5 	.word	0x002000c5

08011b1c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8011b1c:	b480      	push	{r7}
 8011b1e:	b085      	sub	sp, #20
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011b24:	4b22      	ldr	r3, [pc, #136]	; (8011bb0 <SDMMC_GetCmdResp7+0x94>)
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	4a22      	ldr	r2, [pc, #136]	; (8011bb4 <SDMMC_GetCmdResp7+0x98>)
 8011b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8011b2e:	0a5b      	lsrs	r3, r3, #9
 8011b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8011b34:	fb02 f303 	mul.w	r3, r2, r3
 8011b38:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	1e5a      	subs	r2, r3, #1
 8011b3e:	60fa      	str	r2, [r7, #12]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d102      	bne.n	8011b4a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011b44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011b48:	e02c      	b.n	8011ba4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b4e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011b50:	68bb      	ldr	r3, [r7, #8]
 8011b52:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d0ef      	beq.n	8011b3a <SDMMC_GetCmdResp7+0x1e>
 8011b5a:	68bb      	ldr	r3, [r7, #8]
 8011b5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d1ea      	bne.n	8011b3a <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b68:	f003 0304 	and.w	r3, r3, #4
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d004      	beq.n	8011b7a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	2204      	movs	r2, #4
 8011b74:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011b76:	2304      	movs	r3, #4
 8011b78:	e014      	b.n	8011ba4 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b7e:	f003 0301 	and.w	r3, r3, #1
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d004      	beq.n	8011b90 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	2201      	movs	r2, #1
 8011b8a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011b8c:	2301      	movs	r3, #1
 8011b8e:	e009      	b.n	8011ba4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d002      	beq.n	8011ba2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	2240      	movs	r2, #64	; 0x40
 8011ba0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011ba2:	2300      	movs	r3, #0

}
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	3714      	adds	r7, #20
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bae:	4770      	bx	lr
 8011bb0:	24000010 	.word	0x24000010
 8011bb4:	10624dd3 	.word	0x10624dd3

08011bb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011bb8:	b084      	sub	sp, #16
 8011bba:	b580      	push	{r7, lr}
 8011bbc:	b084      	sub	sp, #16
 8011bbe:	af00      	add	r7, sp, #0
 8011bc0:	6078      	str	r0, [r7, #4]
 8011bc2:	f107 001c 	add.w	r0, r7, #28
 8011bc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bcc:	2b01      	cmp	r3, #1
 8011bce:	d120      	bne.n	8011c12 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bd4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	68da      	ldr	r2, [r3, #12]
 8011be0:	4b25      	ldr	r3, [pc, #148]	; (8011c78 <USB_CoreInit+0xc0>)
 8011be2:	4013      	ands	r3, r2
 8011be4:	687a      	ldr	r2, [r7, #4]
 8011be6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	68db      	ldr	r3, [r3, #12]
 8011bec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011bf6:	2b01      	cmp	r3, #1
 8011bf8:	d105      	bne.n	8011c06 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	68db      	ldr	r3, [r3, #12]
 8011bfe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8011c06:	6878      	ldr	r0, [r7, #4]
 8011c08:	f001 fabe 	bl	8013188 <USB_CoreReset>
 8011c0c:	4603      	mov	r3, r0
 8011c0e:	73fb      	strb	r3, [r7, #15]
 8011c10:	e01a      	b.n	8011c48 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	68db      	ldr	r3, [r3, #12]
 8011c16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8011c1e:	6878      	ldr	r0, [r7, #4]
 8011c20:	f001 fab2 	bl	8013188 <USB_CoreReset>
 8011c24:	4603      	mov	r3, r0
 8011c26:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8011c28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d106      	bne.n	8011c3c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c32:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	639a      	str	r2, [r3, #56]	; 0x38
 8011c3a:	e005      	b.n	8011c48 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8011c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c4a:	2b01      	cmp	r3, #1
 8011c4c:	d10b      	bne.n	8011c66 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	689b      	ldr	r3, [r3, #8]
 8011c52:	f043 0206 	orr.w	r2, r3, #6
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	689b      	ldr	r3, [r3, #8]
 8011c5e:	f043 0220 	orr.w	r2, r3, #32
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8011c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c68:	4618      	mov	r0, r3
 8011c6a:	3710      	adds	r7, #16
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011c72:	b004      	add	sp, #16
 8011c74:	4770      	bx	lr
 8011c76:	bf00      	nop
 8011c78:	ffbdffbf 	.word	0xffbdffbf

08011c7c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8011c7c:	b480      	push	{r7}
 8011c7e:	b087      	sub	sp, #28
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	60f8      	str	r0, [r7, #12]
 8011c84:	60b9      	str	r1, [r7, #8]
 8011c86:	4613      	mov	r3, r2
 8011c88:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8011c8a:	79fb      	ldrb	r3, [r7, #7]
 8011c8c:	2b02      	cmp	r3, #2
 8011c8e:	d165      	bne.n	8011d5c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8011c90:	68bb      	ldr	r3, [r7, #8]
 8011c92:	4a41      	ldr	r2, [pc, #260]	; (8011d98 <USB_SetTurnaroundTime+0x11c>)
 8011c94:	4293      	cmp	r3, r2
 8011c96:	d906      	bls.n	8011ca6 <USB_SetTurnaroundTime+0x2a>
 8011c98:	68bb      	ldr	r3, [r7, #8]
 8011c9a:	4a40      	ldr	r2, [pc, #256]	; (8011d9c <USB_SetTurnaroundTime+0x120>)
 8011c9c:	4293      	cmp	r3, r2
 8011c9e:	d802      	bhi.n	8011ca6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011ca0:	230f      	movs	r3, #15
 8011ca2:	617b      	str	r3, [r7, #20]
 8011ca4:	e062      	b.n	8011d6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8011ca6:	68bb      	ldr	r3, [r7, #8]
 8011ca8:	4a3c      	ldr	r2, [pc, #240]	; (8011d9c <USB_SetTurnaroundTime+0x120>)
 8011caa:	4293      	cmp	r3, r2
 8011cac:	d906      	bls.n	8011cbc <USB_SetTurnaroundTime+0x40>
 8011cae:	68bb      	ldr	r3, [r7, #8]
 8011cb0:	4a3b      	ldr	r2, [pc, #236]	; (8011da0 <USB_SetTurnaroundTime+0x124>)
 8011cb2:	4293      	cmp	r3, r2
 8011cb4:	d802      	bhi.n	8011cbc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8011cb6:	230e      	movs	r3, #14
 8011cb8:	617b      	str	r3, [r7, #20]
 8011cba:	e057      	b.n	8011d6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8011cbc:	68bb      	ldr	r3, [r7, #8]
 8011cbe:	4a38      	ldr	r2, [pc, #224]	; (8011da0 <USB_SetTurnaroundTime+0x124>)
 8011cc0:	4293      	cmp	r3, r2
 8011cc2:	d906      	bls.n	8011cd2 <USB_SetTurnaroundTime+0x56>
 8011cc4:	68bb      	ldr	r3, [r7, #8]
 8011cc6:	4a37      	ldr	r2, [pc, #220]	; (8011da4 <USB_SetTurnaroundTime+0x128>)
 8011cc8:	4293      	cmp	r3, r2
 8011cca:	d802      	bhi.n	8011cd2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8011ccc:	230d      	movs	r3, #13
 8011cce:	617b      	str	r3, [r7, #20]
 8011cd0:	e04c      	b.n	8011d6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8011cd2:	68bb      	ldr	r3, [r7, #8]
 8011cd4:	4a33      	ldr	r2, [pc, #204]	; (8011da4 <USB_SetTurnaroundTime+0x128>)
 8011cd6:	4293      	cmp	r3, r2
 8011cd8:	d906      	bls.n	8011ce8 <USB_SetTurnaroundTime+0x6c>
 8011cda:	68bb      	ldr	r3, [r7, #8]
 8011cdc:	4a32      	ldr	r2, [pc, #200]	; (8011da8 <USB_SetTurnaroundTime+0x12c>)
 8011cde:	4293      	cmp	r3, r2
 8011ce0:	d802      	bhi.n	8011ce8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8011ce2:	230c      	movs	r3, #12
 8011ce4:	617b      	str	r3, [r7, #20]
 8011ce6:	e041      	b.n	8011d6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8011ce8:	68bb      	ldr	r3, [r7, #8]
 8011cea:	4a2f      	ldr	r2, [pc, #188]	; (8011da8 <USB_SetTurnaroundTime+0x12c>)
 8011cec:	4293      	cmp	r3, r2
 8011cee:	d906      	bls.n	8011cfe <USB_SetTurnaroundTime+0x82>
 8011cf0:	68bb      	ldr	r3, [r7, #8]
 8011cf2:	4a2e      	ldr	r2, [pc, #184]	; (8011dac <USB_SetTurnaroundTime+0x130>)
 8011cf4:	4293      	cmp	r3, r2
 8011cf6:	d802      	bhi.n	8011cfe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8011cf8:	230b      	movs	r3, #11
 8011cfa:	617b      	str	r3, [r7, #20]
 8011cfc:	e036      	b.n	8011d6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8011cfe:	68bb      	ldr	r3, [r7, #8]
 8011d00:	4a2a      	ldr	r2, [pc, #168]	; (8011dac <USB_SetTurnaroundTime+0x130>)
 8011d02:	4293      	cmp	r3, r2
 8011d04:	d906      	bls.n	8011d14 <USB_SetTurnaroundTime+0x98>
 8011d06:	68bb      	ldr	r3, [r7, #8]
 8011d08:	4a29      	ldr	r2, [pc, #164]	; (8011db0 <USB_SetTurnaroundTime+0x134>)
 8011d0a:	4293      	cmp	r3, r2
 8011d0c:	d802      	bhi.n	8011d14 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8011d0e:	230a      	movs	r3, #10
 8011d10:	617b      	str	r3, [r7, #20]
 8011d12:	e02b      	b.n	8011d6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8011d14:	68bb      	ldr	r3, [r7, #8]
 8011d16:	4a26      	ldr	r2, [pc, #152]	; (8011db0 <USB_SetTurnaroundTime+0x134>)
 8011d18:	4293      	cmp	r3, r2
 8011d1a:	d906      	bls.n	8011d2a <USB_SetTurnaroundTime+0xae>
 8011d1c:	68bb      	ldr	r3, [r7, #8]
 8011d1e:	4a25      	ldr	r2, [pc, #148]	; (8011db4 <USB_SetTurnaroundTime+0x138>)
 8011d20:	4293      	cmp	r3, r2
 8011d22:	d802      	bhi.n	8011d2a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8011d24:	2309      	movs	r3, #9
 8011d26:	617b      	str	r3, [r7, #20]
 8011d28:	e020      	b.n	8011d6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8011d2a:	68bb      	ldr	r3, [r7, #8]
 8011d2c:	4a21      	ldr	r2, [pc, #132]	; (8011db4 <USB_SetTurnaroundTime+0x138>)
 8011d2e:	4293      	cmp	r3, r2
 8011d30:	d906      	bls.n	8011d40 <USB_SetTurnaroundTime+0xc4>
 8011d32:	68bb      	ldr	r3, [r7, #8]
 8011d34:	4a20      	ldr	r2, [pc, #128]	; (8011db8 <USB_SetTurnaroundTime+0x13c>)
 8011d36:	4293      	cmp	r3, r2
 8011d38:	d802      	bhi.n	8011d40 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8011d3a:	2308      	movs	r3, #8
 8011d3c:	617b      	str	r3, [r7, #20]
 8011d3e:	e015      	b.n	8011d6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8011d40:	68bb      	ldr	r3, [r7, #8]
 8011d42:	4a1d      	ldr	r2, [pc, #116]	; (8011db8 <USB_SetTurnaroundTime+0x13c>)
 8011d44:	4293      	cmp	r3, r2
 8011d46:	d906      	bls.n	8011d56 <USB_SetTurnaroundTime+0xda>
 8011d48:	68bb      	ldr	r3, [r7, #8]
 8011d4a:	4a1c      	ldr	r2, [pc, #112]	; (8011dbc <USB_SetTurnaroundTime+0x140>)
 8011d4c:	4293      	cmp	r3, r2
 8011d4e:	d802      	bhi.n	8011d56 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8011d50:	2307      	movs	r3, #7
 8011d52:	617b      	str	r3, [r7, #20]
 8011d54:	e00a      	b.n	8011d6c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8011d56:	2306      	movs	r3, #6
 8011d58:	617b      	str	r3, [r7, #20]
 8011d5a:	e007      	b.n	8011d6c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8011d5c:	79fb      	ldrb	r3, [r7, #7]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d102      	bne.n	8011d68 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8011d62:	2309      	movs	r3, #9
 8011d64:	617b      	str	r3, [r7, #20]
 8011d66:	e001      	b.n	8011d6c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8011d68:	2309      	movs	r3, #9
 8011d6a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	68db      	ldr	r3, [r3, #12]
 8011d70:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	68da      	ldr	r2, [r3, #12]
 8011d7c:	697b      	ldr	r3, [r7, #20]
 8011d7e:	029b      	lsls	r3, r3, #10
 8011d80:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8011d84:	431a      	orrs	r2, r3
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011d8a:	2300      	movs	r3, #0
}
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	371c      	adds	r7, #28
 8011d90:	46bd      	mov	sp, r7
 8011d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d96:	4770      	bx	lr
 8011d98:	00d8acbf 	.word	0x00d8acbf
 8011d9c:	00e4e1bf 	.word	0x00e4e1bf
 8011da0:	00f423ff 	.word	0x00f423ff
 8011da4:	0106737f 	.word	0x0106737f
 8011da8:	011a499f 	.word	0x011a499f
 8011dac:	01312cff 	.word	0x01312cff
 8011db0:	014ca43f 	.word	0x014ca43f
 8011db4:	016e35ff 	.word	0x016e35ff
 8011db8:	01a6ab1f 	.word	0x01a6ab1f
 8011dbc:	01e847ff 	.word	0x01e847ff

08011dc0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011dc0:	b480      	push	{r7}
 8011dc2:	b083      	sub	sp, #12
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	689b      	ldr	r3, [r3, #8]
 8011dcc:	f043 0201 	orr.w	r2, r3, #1
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011dd4:	2300      	movs	r3, #0
}
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	370c      	adds	r7, #12
 8011dda:	46bd      	mov	sp, r7
 8011ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de0:	4770      	bx	lr

08011de2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011de2:	b480      	push	{r7}
 8011de4:	b083      	sub	sp, #12
 8011de6:	af00      	add	r7, sp, #0
 8011de8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	689b      	ldr	r3, [r3, #8]
 8011dee:	f023 0201 	bic.w	r2, r3, #1
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011df6:	2300      	movs	r3, #0
}
 8011df8:	4618      	mov	r0, r3
 8011dfa:	370c      	adds	r7, #12
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e02:	4770      	bx	lr

08011e04 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b082      	sub	sp, #8
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
 8011e0c:	460b      	mov	r3, r1
 8011e0e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	68db      	ldr	r3, [r3, #12]
 8011e14:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011e1c:	78fb      	ldrb	r3, [r7, #3]
 8011e1e:	2b01      	cmp	r3, #1
 8011e20:	d106      	bne.n	8011e30 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	68db      	ldr	r3, [r3, #12]
 8011e26:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	60da      	str	r2, [r3, #12]
 8011e2e:	e00b      	b.n	8011e48 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8011e30:	78fb      	ldrb	r3, [r7, #3]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d106      	bne.n	8011e44 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	68db      	ldr	r3, [r3, #12]
 8011e3a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	60da      	str	r2, [r3, #12]
 8011e42:	e001      	b.n	8011e48 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8011e44:	2301      	movs	r3, #1
 8011e46:	e003      	b.n	8011e50 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8011e48:	2032      	movs	r0, #50	; 0x32
 8011e4a:	f7f2 fbc1 	bl	80045d0 <HAL_Delay>

  return HAL_OK;
 8011e4e:	2300      	movs	r3, #0
}
 8011e50:	4618      	mov	r0, r3
 8011e52:	3708      	adds	r7, #8
 8011e54:	46bd      	mov	sp, r7
 8011e56:	bd80      	pop	{r7, pc}

08011e58 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011e58:	b084      	sub	sp, #16
 8011e5a:	b580      	push	{r7, lr}
 8011e5c:	b086      	sub	sp, #24
 8011e5e:	af00      	add	r7, sp, #0
 8011e60:	6078      	str	r0, [r7, #4]
 8011e62:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8011e66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8011e72:	2300      	movs	r3, #0
 8011e74:	613b      	str	r3, [r7, #16]
 8011e76:	e009      	b.n	8011e8c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011e78:	687a      	ldr	r2, [r7, #4]
 8011e7a:	693b      	ldr	r3, [r7, #16]
 8011e7c:	3340      	adds	r3, #64	; 0x40
 8011e7e:	009b      	lsls	r3, r3, #2
 8011e80:	4413      	add	r3, r2
 8011e82:	2200      	movs	r2, #0
 8011e84:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8011e86:	693b      	ldr	r3, [r7, #16]
 8011e88:	3301      	adds	r3, #1
 8011e8a:	613b      	str	r3, [r7, #16]
 8011e8c:	693b      	ldr	r3, [r7, #16]
 8011e8e:	2b0e      	cmp	r3, #14
 8011e90:	d9f2      	bls.n	8011e78 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8011e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d11c      	bne.n	8011ed2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e9e:	685b      	ldr	r3, [r3, #4]
 8011ea0:	68fa      	ldr	r2, [r7, #12]
 8011ea2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011ea6:	f043 0302 	orr.w	r3, r3, #2
 8011eaa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011eb0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	601a      	str	r2, [r3, #0]
 8011ed0:	e005      	b.n	8011ede <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ed6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011ee4:	461a      	mov	r2, r3
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ef0:	4619      	mov	r1, r3
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ef8:	461a      	mov	r2, r3
 8011efa:	680b      	ldr	r3, [r1, #0]
 8011efc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f00:	2b01      	cmp	r3, #1
 8011f02:	d10c      	bne.n	8011f1e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8011f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d104      	bne.n	8011f14 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8011f0a:	2100      	movs	r1, #0
 8011f0c:	6878      	ldr	r0, [r7, #4]
 8011f0e:	f000 f949 	bl	80121a4 <USB_SetDevSpeed>
 8011f12:	e008      	b.n	8011f26 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8011f14:	2101      	movs	r1, #1
 8011f16:	6878      	ldr	r0, [r7, #4]
 8011f18:	f000 f944 	bl	80121a4 <USB_SetDevSpeed>
 8011f1c:	e003      	b.n	8011f26 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8011f1e:	2103      	movs	r1, #3
 8011f20:	6878      	ldr	r0, [r7, #4]
 8011f22:	f000 f93f 	bl	80121a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011f26:	2110      	movs	r1, #16
 8011f28:	6878      	ldr	r0, [r7, #4]
 8011f2a:	f000 f8f3 	bl	8012114 <USB_FlushTxFifo>
 8011f2e:	4603      	mov	r3, r0
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d001      	beq.n	8011f38 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8011f34:	2301      	movs	r3, #1
 8011f36:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011f38:	6878      	ldr	r0, [r7, #4]
 8011f3a:	f000 f911 	bl	8012160 <USB_FlushRxFifo>
 8011f3e:	4603      	mov	r3, r0
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d001      	beq.n	8011f48 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8011f44:	2301      	movs	r3, #1
 8011f46:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f4e:	461a      	mov	r2, r3
 8011f50:	2300      	movs	r3, #0
 8011f52:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f5a:	461a      	mov	r2, r3
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f66:	461a      	mov	r2, r3
 8011f68:	2300      	movs	r3, #0
 8011f6a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011f6c:	2300      	movs	r3, #0
 8011f6e:	613b      	str	r3, [r7, #16]
 8011f70:	e043      	b.n	8011ffa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011f72:	693b      	ldr	r3, [r7, #16]
 8011f74:	015a      	lsls	r2, r3, #5
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	4413      	add	r3, r2
 8011f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011f84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011f88:	d118      	bne.n	8011fbc <USB_DevInit+0x164>
    {
      if (i == 0U)
 8011f8a:	693b      	ldr	r3, [r7, #16]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d10a      	bne.n	8011fa6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8011f90:	693b      	ldr	r3, [r7, #16]
 8011f92:	015a      	lsls	r2, r3, #5
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	4413      	add	r3, r2
 8011f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f9c:	461a      	mov	r2, r3
 8011f9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011fa2:	6013      	str	r3, [r2, #0]
 8011fa4:	e013      	b.n	8011fce <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8011fa6:	693b      	ldr	r3, [r7, #16]
 8011fa8:	015a      	lsls	r2, r3, #5
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	4413      	add	r3, r2
 8011fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011fb2:	461a      	mov	r2, r3
 8011fb4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011fb8:	6013      	str	r3, [r2, #0]
 8011fba:	e008      	b.n	8011fce <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8011fbc:	693b      	ldr	r3, [r7, #16]
 8011fbe:	015a      	lsls	r2, r3, #5
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	4413      	add	r3, r2
 8011fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011fc8:	461a      	mov	r2, r3
 8011fca:	2300      	movs	r3, #0
 8011fcc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8011fce:	693b      	ldr	r3, [r7, #16]
 8011fd0:	015a      	lsls	r2, r3, #5
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	4413      	add	r3, r2
 8011fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011fda:	461a      	mov	r2, r3
 8011fdc:	2300      	movs	r3, #0
 8011fde:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8011fe0:	693b      	ldr	r3, [r7, #16]
 8011fe2:	015a      	lsls	r2, r3, #5
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	4413      	add	r3, r2
 8011fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011fec:	461a      	mov	r2, r3
 8011fee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011ff2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011ff4:	693b      	ldr	r3, [r7, #16]
 8011ff6:	3301      	adds	r3, #1
 8011ff8:	613b      	str	r3, [r7, #16]
 8011ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ffc:	693a      	ldr	r2, [r7, #16]
 8011ffe:	429a      	cmp	r2, r3
 8012000:	d3b7      	bcc.n	8011f72 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012002:	2300      	movs	r3, #0
 8012004:	613b      	str	r3, [r7, #16]
 8012006:	e043      	b.n	8012090 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012008:	693b      	ldr	r3, [r7, #16]
 801200a:	015a      	lsls	r2, r3, #5
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	4413      	add	r3, r2
 8012010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801201a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801201e:	d118      	bne.n	8012052 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8012020:	693b      	ldr	r3, [r7, #16]
 8012022:	2b00      	cmp	r3, #0
 8012024:	d10a      	bne.n	801203c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012026:	693b      	ldr	r3, [r7, #16]
 8012028:	015a      	lsls	r2, r3, #5
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	4413      	add	r3, r2
 801202e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012032:	461a      	mov	r2, r3
 8012034:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012038:	6013      	str	r3, [r2, #0]
 801203a:	e013      	b.n	8012064 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801203c:	693b      	ldr	r3, [r7, #16]
 801203e:	015a      	lsls	r2, r3, #5
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	4413      	add	r3, r2
 8012044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012048:	461a      	mov	r2, r3
 801204a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801204e:	6013      	str	r3, [r2, #0]
 8012050:	e008      	b.n	8012064 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012052:	693b      	ldr	r3, [r7, #16]
 8012054:	015a      	lsls	r2, r3, #5
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	4413      	add	r3, r2
 801205a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801205e:	461a      	mov	r2, r3
 8012060:	2300      	movs	r3, #0
 8012062:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012064:	693b      	ldr	r3, [r7, #16]
 8012066:	015a      	lsls	r2, r3, #5
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	4413      	add	r3, r2
 801206c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012070:	461a      	mov	r2, r3
 8012072:	2300      	movs	r3, #0
 8012074:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012076:	693b      	ldr	r3, [r7, #16]
 8012078:	015a      	lsls	r2, r3, #5
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	4413      	add	r3, r2
 801207e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012082:	461a      	mov	r2, r3
 8012084:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012088:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801208a:	693b      	ldr	r3, [r7, #16]
 801208c:	3301      	adds	r3, #1
 801208e:	613b      	str	r3, [r7, #16]
 8012090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012092:	693a      	ldr	r2, [r7, #16]
 8012094:	429a      	cmp	r2, r3
 8012096:	d3b7      	bcc.n	8012008 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801209e:	691b      	ldr	r3, [r3, #16]
 80120a0:	68fa      	ldr	r2, [r7, #12]
 80120a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80120a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80120aa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	2200      	movs	r2, #0
 80120b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80120b8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80120ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d105      	bne.n	80120cc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	699b      	ldr	r3, [r3, #24]
 80120c4:	f043 0210 	orr.w	r2, r3, #16
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	699a      	ldr	r2, [r3, #24]
 80120d0:	4b0e      	ldr	r3, [pc, #56]	; (801210c <USB_DevInit+0x2b4>)
 80120d2:	4313      	orrs	r3, r2
 80120d4:	687a      	ldr	r2, [r7, #4]
 80120d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80120d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d005      	beq.n	80120ea <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	699b      	ldr	r3, [r3, #24]
 80120e2:	f043 0208 	orr.w	r2, r3, #8
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80120ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80120ec:	2b01      	cmp	r3, #1
 80120ee:	d105      	bne.n	80120fc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	699a      	ldr	r2, [r3, #24]
 80120f4:	4b06      	ldr	r3, [pc, #24]	; (8012110 <USB_DevInit+0x2b8>)
 80120f6:	4313      	orrs	r3, r2
 80120f8:	687a      	ldr	r2, [r7, #4]
 80120fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80120fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80120fe:	4618      	mov	r0, r3
 8012100:	3718      	adds	r7, #24
 8012102:	46bd      	mov	sp, r7
 8012104:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012108:	b004      	add	sp, #16
 801210a:	4770      	bx	lr
 801210c:	803c3800 	.word	0x803c3800
 8012110:	40000004 	.word	0x40000004

08012114 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012114:	b480      	push	{r7}
 8012116:	b085      	sub	sp, #20
 8012118:	af00      	add	r7, sp, #0
 801211a:	6078      	str	r0, [r7, #4]
 801211c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 801211e:	2300      	movs	r3, #0
 8012120:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012122:	683b      	ldr	r3, [r7, #0]
 8012124:	019b      	lsls	r3, r3, #6
 8012126:	f043 0220 	orr.w	r2, r3, #32
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	3301      	adds	r3, #1
 8012132:	60fb      	str	r3, [r7, #12]
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	4a09      	ldr	r2, [pc, #36]	; (801215c <USB_FlushTxFifo+0x48>)
 8012138:	4293      	cmp	r3, r2
 801213a:	d901      	bls.n	8012140 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 801213c:	2303      	movs	r3, #3
 801213e:	e006      	b.n	801214e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	691b      	ldr	r3, [r3, #16]
 8012144:	f003 0320 	and.w	r3, r3, #32
 8012148:	2b20      	cmp	r3, #32
 801214a:	d0f0      	beq.n	801212e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 801214c:	2300      	movs	r3, #0
}
 801214e:	4618      	mov	r0, r3
 8012150:	3714      	adds	r7, #20
 8012152:	46bd      	mov	sp, r7
 8012154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012158:	4770      	bx	lr
 801215a:	bf00      	nop
 801215c:	00030d40 	.word	0x00030d40

08012160 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012160:	b480      	push	{r7}
 8012162:	b085      	sub	sp, #20
 8012164:	af00      	add	r7, sp, #0
 8012166:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8012168:	2300      	movs	r3, #0
 801216a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	2210      	movs	r2, #16
 8012170:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	3301      	adds	r3, #1
 8012176:	60fb      	str	r3, [r7, #12]
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	4a09      	ldr	r2, [pc, #36]	; (80121a0 <USB_FlushRxFifo+0x40>)
 801217c:	4293      	cmp	r3, r2
 801217e:	d901      	bls.n	8012184 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8012180:	2303      	movs	r3, #3
 8012182:	e006      	b.n	8012192 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	691b      	ldr	r3, [r3, #16]
 8012188:	f003 0310 	and.w	r3, r3, #16
 801218c:	2b10      	cmp	r3, #16
 801218e:	d0f0      	beq.n	8012172 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8012190:	2300      	movs	r3, #0
}
 8012192:	4618      	mov	r0, r3
 8012194:	3714      	adds	r7, #20
 8012196:	46bd      	mov	sp, r7
 8012198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801219c:	4770      	bx	lr
 801219e:	bf00      	nop
 80121a0:	00030d40 	.word	0x00030d40

080121a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80121a4:	b480      	push	{r7}
 80121a6:	b085      	sub	sp, #20
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	6078      	str	r0, [r7, #4]
 80121ac:	460b      	mov	r3, r1
 80121ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80121ba:	681a      	ldr	r2, [r3, #0]
 80121bc:	78fb      	ldrb	r3, [r7, #3]
 80121be:	68f9      	ldr	r1, [r7, #12]
 80121c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80121c4:	4313      	orrs	r3, r2
 80121c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80121c8:	2300      	movs	r3, #0
}
 80121ca:	4618      	mov	r0, r3
 80121cc:	3714      	adds	r7, #20
 80121ce:	46bd      	mov	sp, r7
 80121d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d4:	4770      	bx	lr

080121d6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80121d6:	b480      	push	{r7}
 80121d8:	b087      	sub	sp, #28
 80121da:	af00      	add	r7, sp, #0
 80121dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80121e2:	693b      	ldr	r3, [r7, #16]
 80121e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80121e8:	689b      	ldr	r3, [r3, #8]
 80121ea:	f003 0306 	and.w	r3, r3, #6
 80121ee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d102      	bne.n	80121fc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80121f6:	2300      	movs	r3, #0
 80121f8:	75fb      	strb	r3, [r7, #23]
 80121fa:	e00a      	b.n	8012212 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	2b02      	cmp	r3, #2
 8012200:	d002      	beq.n	8012208 <USB_GetDevSpeed+0x32>
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	2b06      	cmp	r3, #6
 8012206:	d102      	bne.n	801220e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8012208:	2302      	movs	r3, #2
 801220a:	75fb      	strb	r3, [r7, #23]
 801220c:	e001      	b.n	8012212 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801220e:	230f      	movs	r3, #15
 8012210:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8012212:	7dfb      	ldrb	r3, [r7, #23]
}
 8012214:	4618      	mov	r0, r3
 8012216:	371c      	adds	r7, #28
 8012218:	46bd      	mov	sp, r7
 801221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221e:	4770      	bx	lr

08012220 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012220:	b480      	push	{r7}
 8012222:	b085      	sub	sp, #20
 8012224:	af00      	add	r7, sp, #0
 8012226:	6078      	str	r0, [r7, #4]
 8012228:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801222e:	683b      	ldr	r3, [r7, #0]
 8012230:	781b      	ldrb	r3, [r3, #0]
 8012232:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012234:	683b      	ldr	r3, [r7, #0]
 8012236:	785b      	ldrb	r3, [r3, #1]
 8012238:	2b01      	cmp	r3, #1
 801223a:	d139      	bne.n	80122b0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012242:	69da      	ldr	r2, [r3, #28]
 8012244:	683b      	ldr	r3, [r7, #0]
 8012246:	781b      	ldrb	r3, [r3, #0]
 8012248:	f003 030f 	and.w	r3, r3, #15
 801224c:	2101      	movs	r1, #1
 801224e:	fa01 f303 	lsl.w	r3, r1, r3
 8012252:	b29b      	uxth	r3, r3
 8012254:	68f9      	ldr	r1, [r7, #12]
 8012256:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801225a:	4313      	orrs	r3, r2
 801225c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801225e:	68bb      	ldr	r3, [r7, #8]
 8012260:	015a      	lsls	r2, r3, #5
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	4413      	add	r3, r2
 8012266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012270:	2b00      	cmp	r3, #0
 8012272:	d153      	bne.n	801231c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012274:	68bb      	ldr	r3, [r7, #8]
 8012276:	015a      	lsls	r2, r3, #5
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	4413      	add	r3, r2
 801227c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012280:	681a      	ldr	r2, [r3, #0]
 8012282:	683b      	ldr	r3, [r7, #0]
 8012284:	689b      	ldr	r3, [r3, #8]
 8012286:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801228a:	683b      	ldr	r3, [r7, #0]
 801228c:	78db      	ldrb	r3, [r3, #3]
 801228e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012290:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012292:	68bb      	ldr	r3, [r7, #8]
 8012294:	059b      	lsls	r3, r3, #22
 8012296:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012298:	431a      	orrs	r2, r3
 801229a:	68bb      	ldr	r3, [r7, #8]
 801229c:	0159      	lsls	r1, r3, #5
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	440b      	add	r3, r1
 80122a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80122a6:	4619      	mov	r1, r3
 80122a8:	4b20      	ldr	r3, [pc, #128]	; (801232c <USB_ActivateEndpoint+0x10c>)
 80122aa:	4313      	orrs	r3, r2
 80122ac:	600b      	str	r3, [r1, #0]
 80122ae:	e035      	b.n	801231c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80122b6:	69da      	ldr	r2, [r3, #28]
 80122b8:	683b      	ldr	r3, [r7, #0]
 80122ba:	781b      	ldrb	r3, [r3, #0]
 80122bc:	f003 030f 	and.w	r3, r3, #15
 80122c0:	2101      	movs	r1, #1
 80122c2:	fa01 f303 	lsl.w	r3, r1, r3
 80122c6:	041b      	lsls	r3, r3, #16
 80122c8:	68f9      	ldr	r1, [r7, #12]
 80122ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80122ce:	4313      	orrs	r3, r2
 80122d0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80122d2:	68bb      	ldr	r3, [r7, #8]
 80122d4:	015a      	lsls	r2, r3, #5
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	4413      	add	r3, r2
 80122da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d119      	bne.n	801231c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80122e8:	68bb      	ldr	r3, [r7, #8]
 80122ea:	015a      	lsls	r2, r3, #5
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	4413      	add	r3, r2
 80122f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122f4:	681a      	ldr	r2, [r3, #0]
 80122f6:	683b      	ldr	r3, [r7, #0]
 80122f8:	689b      	ldr	r3, [r3, #8]
 80122fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80122fe:	683b      	ldr	r3, [r7, #0]
 8012300:	78db      	ldrb	r3, [r3, #3]
 8012302:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012304:	430b      	orrs	r3, r1
 8012306:	431a      	orrs	r2, r3
 8012308:	68bb      	ldr	r3, [r7, #8]
 801230a:	0159      	lsls	r1, r3, #5
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	440b      	add	r3, r1
 8012310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012314:	4619      	mov	r1, r3
 8012316:	4b05      	ldr	r3, [pc, #20]	; (801232c <USB_ActivateEndpoint+0x10c>)
 8012318:	4313      	orrs	r3, r2
 801231a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801231c:	2300      	movs	r3, #0
}
 801231e:	4618      	mov	r0, r3
 8012320:	3714      	adds	r7, #20
 8012322:	46bd      	mov	sp, r7
 8012324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012328:	4770      	bx	lr
 801232a:	bf00      	nop
 801232c:	10008000 	.word	0x10008000

08012330 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012330:	b480      	push	{r7}
 8012332:	b085      	sub	sp, #20
 8012334:	af00      	add	r7, sp, #0
 8012336:	6078      	str	r0, [r7, #4]
 8012338:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801233e:	683b      	ldr	r3, [r7, #0]
 8012340:	781b      	ldrb	r3, [r3, #0]
 8012342:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8012344:	683b      	ldr	r3, [r7, #0]
 8012346:	785b      	ldrb	r3, [r3, #1]
 8012348:	2b01      	cmp	r3, #1
 801234a:	d161      	bne.n	8012410 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801234c:	68bb      	ldr	r3, [r7, #8]
 801234e:	015a      	lsls	r2, r3, #5
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	4413      	add	r3, r2
 8012354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801235e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012362:	d11f      	bne.n	80123a4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8012364:	68bb      	ldr	r3, [r7, #8]
 8012366:	015a      	lsls	r2, r3, #5
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	4413      	add	r3, r2
 801236c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	68ba      	ldr	r2, [r7, #8]
 8012374:	0151      	lsls	r1, r2, #5
 8012376:	68fa      	ldr	r2, [r7, #12]
 8012378:	440a      	add	r2, r1
 801237a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801237e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012382:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8012384:	68bb      	ldr	r3, [r7, #8]
 8012386:	015a      	lsls	r2, r3, #5
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	4413      	add	r3, r2
 801238c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	68ba      	ldr	r2, [r7, #8]
 8012394:	0151      	lsls	r1, r2, #5
 8012396:	68fa      	ldr	r2, [r7, #12]
 8012398:	440a      	add	r2, r1
 801239a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801239e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80123a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80123aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80123ac:	683b      	ldr	r3, [r7, #0]
 80123ae:	781b      	ldrb	r3, [r3, #0]
 80123b0:	f003 030f 	and.w	r3, r3, #15
 80123b4:	2101      	movs	r1, #1
 80123b6:	fa01 f303 	lsl.w	r3, r1, r3
 80123ba:	b29b      	uxth	r3, r3
 80123bc:	43db      	mvns	r3, r3
 80123be:	68f9      	ldr	r1, [r7, #12]
 80123c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80123c4:	4013      	ands	r3, r2
 80123c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80123ce:	69da      	ldr	r2, [r3, #28]
 80123d0:	683b      	ldr	r3, [r7, #0]
 80123d2:	781b      	ldrb	r3, [r3, #0]
 80123d4:	f003 030f 	and.w	r3, r3, #15
 80123d8:	2101      	movs	r1, #1
 80123da:	fa01 f303 	lsl.w	r3, r1, r3
 80123de:	b29b      	uxth	r3, r3
 80123e0:	43db      	mvns	r3, r3
 80123e2:	68f9      	ldr	r1, [r7, #12]
 80123e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80123e8:	4013      	ands	r3, r2
 80123ea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80123ec:	68bb      	ldr	r3, [r7, #8]
 80123ee:	015a      	lsls	r2, r3, #5
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	4413      	add	r3, r2
 80123f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80123f8:	681a      	ldr	r2, [r3, #0]
 80123fa:	68bb      	ldr	r3, [r7, #8]
 80123fc:	0159      	lsls	r1, r3, #5
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	440b      	add	r3, r1
 8012402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012406:	4619      	mov	r1, r3
 8012408:	4b35      	ldr	r3, [pc, #212]	; (80124e0 <USB_DeactivateEndpoint+0x1b0>)
 801240a:	4013      	ands	r3, r2
 801240c:	600b      	str	r3, [r1, #0]
 801240e:	e060      	b.n	80124d2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012410:	68bb      	ldr	r3, [r7, #8]
 8012412:	015a      	lsls	r2, r3, #5
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	4413      	add	r3, r2
 8012418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012422:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012426:	d11f      	bne.n	8012468 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8012428:	68bb      	ldr	r3, [r7, #8]
 801242a:	015a      	lsls	r2, r3, #5
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	4413      	add	r3, r2
 8012430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	68ba      	ldr	r2, [r7, #8]
 8012438:	0151      	lsls	r1, r2, #5
 801243a:	68fa      	ldr	r2, [r7, #12]
 801243c:	440a      	add	r2, r1
 801243e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012442:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012446:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8012448:	68bb      	ldr	r3, [r7, #8]
 801244a:	015a      	lsls	r2, r3, #5
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	4413      	add	r3, r2
 8012450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	68ba      	ldr	r2, [r7, #8]
 8012458:	0151      	lsls	r1, r2, #5
 801245a:	68fa      	ldr	r2, [r7, #12]
 801245c:	440a      	add	r2, r1
 801245e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012462:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012466:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801246e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012470:	683b      	ldr	r3, [r7, #0]
 8012472:	781b      	ldrb	r3, [r3, #0]
 8012474:	f003 030f 	and.w	r3, r3, #15
 8012478:	2101      	movs	r1, #1
 801247a:	fa01 f303 	lsl.w	r3, r1, r3
 801247e:	041b      	lsls	r3, r3, #16
 8012480:	43db      	mvns	r3, r3
 8012482:	68f9      	ldr	r1, [r7, #12]
 8012484:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012488:	4013      	ands	r3, r2
 801248a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012492:	69da      	ldr	r2, [r3, #28]
 8012494:	683b      	ldr	r3, [r7, #0]
 8012496:	781b      	ldrb	r3, [r3, #0]
 8012498:	f003 030f 	and.w	r3, r3, #15
 801249c:	2101      	movs	r1, #1
 801249e:	fa01 f303 	lsl.w	r3, r1, r3
 80124a2:	041b      	lsls	r3, r3, #16
 80124a4:	43db      	mvns	r3, r3
 80124a6:	68f9      	ldr	r1, [r7, #12]
 80124a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80124ac:	4013      	ands	r3, r2
 80124ae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80124b0:	68bb      	ldr	r3, [r7, #8]
 80124b2:	015a      	lsls	r2, r3, #5
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	4413      	add	r3, r2
 80124b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80124bc:	681a      	ldr	r2, [r3, #0]
 80124be:	68bb      	ldr	r3, [r7, #8]
 80124c0:	0159      	lsls	r1, r3, #5
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	440b      	add	r3, r1
 80124c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80124ca:	4619      	mov	r1, r3
 80124cc:	4b05      	ldr	r3, [pc, #20]	; (80124e4 <USB_DeactivateEndpoint+0x1b4>)
 80124ce:	4013      	ands	r3, r2
 80124d0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80124d2:	2300      	movs	r3, #0
}
 80124d4:	4618      	mov	r0, r3
 80124d6:	3714      	adds	r7, #20
 80124d8:	46bd      	mov	sp, r7
 80124da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124de:	4770      	bx	lr
 80124e0:	ec337800 	.word	0xec337800
 80124e4:	eff37800 	.word	0xeff37800

080124e8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b08a      	sub	sp, #40	; 0x28
 80124ec:	af02      	add	r7, sp, #8
 80124ee:	60f8      	str	r0, [r7, #12]
 80124f0:	60b9      	str	r1, [r7, #8]
 80124f2:	4613      	mov	r3, r2
 80124f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80124fa:	68bb      	ldr	r3, [r7, #8]
 80124fc:	781b      	ldrb	r3, [r3, #0]
 80124fe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012500:	68bb      	ldr	r3, [r7, #8]
 8012502:	785b      	ldrb	r3, [r3, #1]
 8012504:	2b01      	cmp	r3, #1
 8012506:	f040 8163 	bne.w	80127d0 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801250a:	68bb      	ldr	r3, [r7, #8]
 801250c:	695b      	ldr	r3, [r3, #20]
 801250e:	2b00      	cmp	r3, #0
 8012510:	d132      	bne.n	8012578 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012512:	69bb      	ldr	r3, [r7, #24]
 8012514:	015a      	lsls	r2, r3, #5
 8012516:	69fb      	ldr	r3, [r7, #28]
 8012518:	4413      	add	r3, r2
 801251a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801251e:	691a      	ldr	r2, [r3, #16]
 8012520:	69bb      	ldr	r3, [r7, #24]
 8012522:	0159      	lsls	r1, r3, #5
 8012524:	69fb      	ldr	r3, [r7, #28]
 8012526:	440b      	add	r3, r1
 8012528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801252c:	4619      	mov	r1, r3
 801252e:	4ba5      	ldr	r3, [pc, #660]	; (80127c4 <USB_EPStartXfer+0x2dc>)
 8012530:	4013      	ands	r3, r2
 8012532:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012534:	69bb      	ldr	r3, [r7, #24]
 8012536:	015a      	lsls	r2, r3, #5
 8012538:	69fb      	ldr	r3, [r7, #28]
 801253a:	4413      	add	r3, r2
 801253c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012540:	691b      	ldr	r3, [r3, #16]
 8012542:	69ba      	ldr	r2, [r7, #24]
 8012544:	0151      	lsls	r1, r2, #5
 8012546:	69fa      	ldr	r2, [r7, #28]
 8012548:	440a      	add	r2, r1
 801254a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801254e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012552:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012554:	69bb      	ldr	r3, [r7, #24]
 8012556:	015a      	lsls	r2, r3, #5
 8012558:	69fb      	ldr	r3, [r7, #28]
 801255a:	4413      	add	r3, r2
 801255c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012560:	691a      	ldr	r2, [r3, #16]
 8012562:	69bb      	ldr	r3, [r7, #24]
 8012564:	0159      	lsls	r1, r3, #5
 8012566:	69fb      	ldr	r3, [r7, #28]
 8012568:	440b      	add	r3, r1
 801256a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801256e:	4619      	mov	r1, r3
 8012570:	4b95      	ldr	r3, [pc, #596]	; (80127c8 <USB_EPStartXfer+0x2e0>)
 8012572:	4013      	ands	r3, r2
 8012574:	610b      	str	r3, [r1, #16]
 8012576:	e074      	b.n	8012662 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012578:	69bb      	ldr	r3, [r7, #24]
 801257a:	015a      	lsls	r2, r3, #5
 801257c:	69fb      	ldr	r3, [r7, #28]
 801257e:	4413      	add	r3, r2
 8012580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012584:	691a      	ldr	r2, [r3, #16]
 8012586:	69bb      	ldr	r3, [r7, #24]
 8012588:	0159      	lsls	r1, r3, #5
 801258a:	69fb      	ldr	r3, [r7, #28]
 801258c:	440b      	add	r3, r1
 801258e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012592:	4619      	mov	r1, r3
 8012594:	4b8c      	ldr	r3, [pc, #560]	; (80127c8 <USB_EPStartXfer+0x2e0>)
 8012596:	4013      	ands	r3, r2
 8012598:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801259a:	69bb      	ldr	r3, [r7, #24]
 801259c:	015a      	lsls	r2, r3, #5
 801259e:	69fb      	ldr	r3, [r7, #28]
 80125a0:	4413      	add	r3, r2
 80125a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125a6:	691a      	ldr	r2, [r3, #16]
 80125a8:	69bb      	ldr	r3, [r7, #24]
 80125aa:	0159      	lsls	r1, r3, #5
 80125ac:	69fb      	ldr	r3, [r7, #28]
 80125ae:	440b      	add	r3, r1
 80125b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125b4:	4619      	mov	r1, r3
 80125b6:	4b83      	ldr	r3, [pc, #524]	; (80127c4 <USB_EPStartXfer+0x2dc>)
 80125b8:	4013      	ands	r3, r2
 80125ba:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80125bc:	69bb      	ldr	r3, [r7, #24]
 80125be:	015a      	lsls	r2, r3, #5
 80125c0:	69fb      	ldr	r3, [r7, #28]
 80125c2:	4413      	add	r3, r2
 80125c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125c8:	691a      	ldr	r2, [r3, #16]
 80125ca:	68bb      	ldr	r3, [r7, #8]
 80125cc:	6959      	ldr	r1, [r3, #20]
 80125ce:	68bb      	ldr	r3, [r7, #8]
 80125d0:	689b      	ldr	r3, [r3, #8]
 80125d2:	440b      	add	r3, r1
 80125d4:	1e59      	subs	r1, r3, #1
 80125d6:	68bb      	ldr	r3, [r7, #8]
 80125d8:	689b      	ldr	r3, [r3, #8]
 80125da:	fbb1 f3f3 	udiv	r3, r1, r3
 80125de:	04d9      	lsls	r1, r3, #19
 80125e0:	4b7a      	ldr	r3, [pc, #488]	; (80127cc <USB_EPStartXfer+0x2e4>)
 80125e2:	400b      	ands	r3, r1
 80125e4:	69b9      	ldr	r1, [r7, #24]
 80125e6:	0148      	lsls	r0, r1, #5
 80125e8:	69f9      	ldr	r1, [r7, #28]
 80125ea:	4401      	add	r1, r0
 80125ec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80125f0:	4313      	orrs	r3, r2
 80125f2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80125f4:	69bb      	ldr	r3, [r7, #24]
 80125f6:	015a      	lsls	r2, r3, #5
 80125f8:	69fb      	ldr	r3, [r7, #28]
 80125fa:	4413      	add	r3, r2
 80125fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012600:	691a      	ldr	r2, [r3, #16]
 8012602:	68bb      	ldr	r3, [r7, #8]
 8012604:	695b      	ldr	r3, [r3, #20]
 8012606:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801260a:	69b9      	ldr	r1, [r7, #24]
 801260c:	0148      	lsls	r0, r1, #5
 801260e:	69f9      	ldr	r1, [r7, #28]
 8012610:	4401      	add	r1, r0
 8012612:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012616:	4313      	orrs	r3, r2
 8012618:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801261a:	68bb      	ldr	r3, [r7, #8]
 801261c:	78db      	ldrb	r3, [r3, #3]
 801261e:	2b01      	cmp	r3, #1
 8012620:	d11f      	bne.n	8012662 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8012622:	69bb      	ldr	r3, [r7, #24]
 8012624:	015a      	lsls	r2, r3, #5
 8012626:	69fb      	ldr	r3, [r7, #28]
 8012628:	4413      	add	r3, r2
 801262a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801262e:	691b      	ldr	r3, [r3, #16]
 8012630:	69ba      	ldr	r2, [r7, #24]
 8012632:	0151      	lsls	r1, r2, #5
 8012634:	69fa      	ldr	r2, [r7, #28]
 8012636:	440a      	add	r2, r1
 8012638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801263c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8012640:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8012642:	69bb      	ldr	r3, [r7, #24]
 8012644:	015a      	lsls	r2, r3, #5
 8012646:	69fb      	ldr	r3, [r7, #28]
 8012648:	4413      	add	r3, r2
 801264a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801264e:	691b      	ldr	r3, [r3, #16]
 8012650:	69ba      	ldr	r2, [r7, #24]
 8012652:	0151      	lsls	r1, r2, #5
 8012654:	69fa      	ldr	r2, [r7, #28]
 8012656:	440a      	add	r2, r1
 8012658:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801265c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012660:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8012662:	79fb      	ldrb	r3, [r7, #7]
 8012664:	2b01      	cmp	r3, #1
 8012666:	d14b      	bne.n	8012700 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012668:	68bb      	ldr	r3, [r7, #8]
 801266a:	691b      	ldr	r3, [r3, #16]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d009      	beq.n	8012684 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012670:	69bb      	ldr	r3, [r7, #24]
 8012672:	015a      	lsls	r2, r3, #5
 8012674:	69fb      	ldr	r3, [r7, #28]
 8012676:	4413      	add	r3, r2
 8012678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801267c:	461a      	mov	r2, r3
 801267e:	68bb      	ldr	r3, [r7, #8]
 8012680:	691b      	ldr	r3, [r3, #16]
 8012682:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8012684:	68bb      	ldr	r3, [r7, #8]
 8012686:	78db      	ldrb	r3, [r3, #3]
 8012688:	2b01      	cmp	r3, #1
 801268a:	d128      	bne.n	80126de <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801268c:	69fb      	ldr	r3, [r7, #28]
 801268e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012692:	689b      	ldr	r3, [r3, #8]
 8012694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012698:	2b00      	cmp	r3, #0
 801269a:	d110      	bne.n	80126be <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801269c:	69bb      	ldr	r3, [r7, #24]
 801269e:	015a      	lsls	r2, r3, #5
 80126a0:	69fb      	ldr	r3, [r7, #28]
 80126a2:	4413      	add	r3, r2
 80126a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	69ba      	ldr	r2, [r7, #24]
 80126ac:	0151      	lsls	r1, r2, #5
 80126ae:	69fa      	ldr	r2, [r7, #28]
 80126b0:	440a      	add	r2, r1
 80126b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80126b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80126ba:	6013      	str	r3, [r2, #0]
 80126bc:	e00f      	b.n	80126de <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80126be:	69bb      	ldr	r3, [r7, #24]
 80126c0:	015a      	lsls	r2, r3, #5
 80126c2:	69fb      	ldr	r3, [r7, #28]
 80126c4:	4413      	add	r3, r2
 80126c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	69ba      	ldr	r2, [r7, #24]
 80126ce:	0151      	lsls	r1, r2, #5
 80126d0:	69fa      	ldr	r2, [r7, #28]
 80126d2:	440a      	add	r2, r1
 80126d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80126d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80126dc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80126de:	69bb      	ldr	r3, [r7, #24]
 80126e0:	015a      	lsls	r2, r3, #5
 80126e2:	69fb      	ldr	r3, [r7, #28]
 80126e4:	4413      	add	r3, r2
 80126e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	69ba      	ldr	r2, [r7, #24]
 80126ee:	0151      	lsls	r1, r2, #5
 80126f0:	69fa      	ldr	r2, [r7, #28]
 80126f2:	440a      	add	r2, r1
 80126f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80126f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80126fc:	6013      	str	r3, [r2, #0]
 80126fe:	e133      	b.n	8012968 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012700:	69bb      	ldr	r3, [r7, #24]
 8012702:	015a      	lsls	r2, r3, #5
 8012704:	69fb      	ldr	r3, [r7, #28]
 8012706:	4413      	add	r3, r2
 8012708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	69ba      	ldr	r2, [r7, #24]
 8012710:	0151      	lsls	r1, r2, #5
 8012712:	69fa      	ldr	r2, [r7, #28]
 8012714:	440a      	add	r2, r1
 8012716:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801271a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801271e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012720:	68bb      	ldr	r3, [r7, #8]
 8012722:	78db      	ldrb	r3, [r3, #3]
 8012724:	2b01      	cmp	r3, #1
 8012726:	d015      	beq.n	8012754 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8012728:	68bb      	ldr	r3, [r7, #8]
 801272a:	695b      	ldr	r3, [r3, #20]
 801272c:	2b00      	cmp	r3, #0
 801272e:	f000 811b 	beq.w	8012968 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012732:	69fb      	ldr	r3, [r7, #28]
 8012734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012738:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801273a:	68bb      	ldr	r3, [r7, #8]
 801273c:	781b      	ldrb	r3, [r3, #0]
 801273e:	f003 030f 	and.w	r3, r3, #15
 8012742:	2101      	movs	r1, #1
 8012744:	fa01 f303 	lsl.w	r3, r1, r3
 8012748:	69f9      	ldr	r1, [r7, #28]
 801274a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801274e:	4313      	orrs	r3, r2
 8012750:	634b      	str	r3, [r1, #52]	; 0x34
 8012752:	e109      	b.n	8012968 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012754:	69fb      	ldr	r3, [r7, #28]
 8012756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801275a:	689b      	ldr	r3, [r3, #8]
 801275c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012760:	2b00      	cmp	r3, #0
 8012762:	d110      	bne.n	8012786 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012764:	69bb      	ldr	r3, [r7, #24]
 8012766:	015a      	lsls	r2, r3, #5
 8012768:	69fb      	ldr	r3, [r7, #28]
 801276a:	4413      	add	r3, r2
 801276c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	69ba      	ldr	r2, [r7, #24]
 8012774:	0151      	lsls	r1, r2, #5
 8012776:	69fa      	ldr	r2, [r7, #28]
 8012778:	440a      	add	r2, r1
 801277a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801277e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012782:	6013      	str	r3, [r2, #0]
 8012784:	e00f      	b.n	80127a6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8012786:	69bb      	ldr	r3, [r7, #24]
 8012788:	015a      	lsls	r2, r3, #5
 801278a:	69fb      	ldr	r3, [r7, #28]
 801278c:	4413      	add	r3, r2
 801278e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	69ba      	ldr	r2, [r7, #24]
 8012796:	0151      	lsls	r1, r2, #5
 8012798:	69fa      	ldr	r2, [r7, #28]
 801279a:	440a      	add	r2, r1
 801279c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80127a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80127a4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80127a6:	68bb      	ldr	r3, [r7, #8]
 80127a8:	68d9      	ldr	r1, [r3, #12]
 80127aa:	68bb      	ldr	r3, [r7, #8]
 80127ac:	781a      	ldrb	r2, [r3, #0]
 80127ae:	68bb      	ldr	r3, [r7, #8]
 80127b0:	695b      	ldr	r3, [r3, #20]
 80127b2:	b298      	uxth	r0, r3
 80127b4:	79fb      	ldrb	r3, [r7, #7]
 80127b6:	9300      	str	r3, [sp, #0]
 80127b8:	4603      	mov	r3, r0
 80127ba:	68f8      	ldr	r0, [r7, #12]
 80127bc:	f000 fa38 	bl	8012c30 <USB_WritePacket>
 80127c0:	e0d2      	b.n	8012968 <USB_EPStartXfer+0x480>
 80127c2:	bf00      	nop
 80127c4:	e007ffff 	.word	0xe007ffff
 80127c8:	fff80000 	.word	0xfff80000
 80127cc:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80127d0:	69bb      	ldr	r3, [r7, #24]
 80127d2:	015a      	lsls	r2, r3, #5
 80127d4:	69fb      	ldr	r3, [r7, #28]
 80127d6:	4413      	add	r3, r2
 80127d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127dc:	691a      	ldr	r2, [r3, #16]
 80127de:	69bb      	ldr	r3, [r7, #24]
 80127e0:	0159      	lsls	r1, r3, #5
 80127e2:	69fb      	ldr	r3, [r7, #28]
 80127e4:	440b      	add	r3, r1
 80127e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127ea:	4619      	mov	r1, r3
 80127ec:	4b61      	ldr	r3, [pc, #388]	; (8012974 <USB_EPStartXfer+0x48c>)
 80127ee:	4013      	ands	r3, r2
 80127f0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80127f2:	69bb      	ldr	r3, [r7, #24]
 80127f4:	015a      	lsls	r2, r3, #5
 80127f6:	69fb      	ldr	r3, [r7, #28]
 80127f8:	4413      	add	r3, r2
 80127fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127fe:	691a      	ldr	r2, [r3, #16]
 8012800:	69bb      	ldr	r3, [r7, #24]
 8012802:	0159      	lsls	r1, r3, #5
 8012804:	69fb      	ldr	r3, [r7, #28]
 8012806:	440b      	add	r3, r1
 8012808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801280c:	4619      	mov	r1, r3
 801280e:	4b5a      	ldr	r3, [pc, #360]	; (8012978 <USB_EPStartXfer+0x490>)
 8012810:	4013      	ands	r3, r2
 8012812:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8012814:	68bb      	ldr	r3, [r7, #8]
 8012816:	695b      	ldr	r3, [r3, #20]
 8012818:	2b00      	cmp	r3, #0
 801281a:	d123      	bne.n	8012864 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801281c:	69bb      	ldr	r3, [r7, #24]
 801281e:	015a      	lsls	r2, r3, #5
 8012820:	69fb      	ldr	r3, [r7, #28]
 8012822:	4413      	add	r3, r2
 8012824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012828:	691a      	ldr	r2, [r3, #16]
 801282a:	68bb      	ldr	r3, [r7, #8]
 801282c:	689b      	ldr	r3, [r3, #8]
 801282e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012832:	69b9      	ldr	r1, [r7, #24]
 8012834:	0148      	lsls	r0, r1, #5
 8012836:	69f9      	ldr	r1, [r7, #28]
 8012838:	4401      	add	r1, r0
 801283a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801283e:	4313      	orrs	r3, r2
 8012840:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012842:	69bb      	ldr	r3, [r7, #24]
 8012844:	015a      	lsls	r2, r3, #5
 8012846:	69fb      	ldr	r3, [r7, #28]
 8012848:	4413      	add	r3, r2
 801284a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801284e:	691b      	ldr	r3, [r3, #16]
 8012850:	69ba      	ldr	r2, [r7, #24]
 8012852:	0151      	lsls	r1, r2, #5
 8012854:	69fa      	ldr	r2, [r7, #28]
 8012856:	440a      	add	r2, r1
 8012858:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801285c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012860:	6113      	str	r3, [r2, #16]
 8012862:	e033      	b.n	80128cc <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8012864:	68bb      	ldr	r3, [r7, #8]
 8012866:	695a      	ldr	r2, [r3, #20]
 8012868:	68bb      	ldr	r3, [r7, #8]
 801286a:	689b      	ldr	r3, [r3, #8]
 801286c:	4413      	add	r3, r2
 801286e:	1e5a      	subs	r2, r3, #1
 8012870:	68bb      	ldr	r3, [r7, #8]
 8012872:	689b      	ldr	r3, [r3, #8]
 8012874:	fbb2 f3f3 	udiv	r3, r2, r3
 8012878:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801287a:	69bb      	ldr	r3, [r7, #24]
 801287c:	015a      	lsls	r2, r3, #5
 801287e:	69fb      	ldr	r3, [r7, #28]
 8012880:	4413      	add	r3, r2
 8012882:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012886:	691a      	ldr	r2, [r3, #16]
 8012888:	8afb      	ldrh	r3, [r7, #22]
 801288a:	04d9      	lsls	r1, r3, #19
 801288c:	4b3b      	ldr	r3, [pc, #236]	; (801297c <USB_EPStartXfer+0x494>)
 801288e:	400b      	ands	r3, r1
 8012890:	69b9      	ldr	r1, [r7, #24]
 8012892:	0148      	lsls	r0, r1, #5
 8012894:	69f9      	ldr	r1, [r7, #28]
 8012896:	4401      	add	r1, r0
 8012898:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801289c:	4313      	orrs	r3, r2
 801289e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80128a0:	69bb      	ldr	r3, [r7, #24]
 80128a2:	015a      	lsls	r2, r3, #5
 80128a4:	69fb      	ldr	r3, [r7, #28]
 80128a6:	4413      	add	r3, r2
 80128a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128ac:	691a      	ldr	r2, [r3, #16]
 80128ae:	68bb      	ldr	r3, [r7, #8]
 80128b0:	689b      	ldr	r3, [r3, #8]
 80128b2:	8af9      	ldrh	r1, [r7, #22]
 80128b4:	fb01 f303 	mul.w	r3, r1, r3
 80128b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80128bc:	69b9      	ldr	r1, [r7, #24]
 80128be:	0148      	lsls	r0, r1, #5
 80128c0:	69f9      	ldr	r1, [r7, #28]
 80128c2:	4401      	add	r1, r0
 80128c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80128c8:	4313      	orrs	r3, r2
 80128ca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80128cc:	79fb      	ldrb	r3, [r7, #7]
 80128ce:	2b01      	cmp	r3, #1
 80128d0:	d10d      	bne.n	80128ee <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80128d2:	68bb      	ldr	r3, [r7, #8]
 80128d4:	68db      	ldr	r3, [r3, #12]
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d009      	beq.n	80128ee <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80128da:	68bb      	ldr	r3, [r7, #8]
 80128dc:	68d9      	ldr	r1, [r3, #12]
 80128de:	69bb      	ldr	r3, [r7, #24]
 80128e0:	015a      	lsls	r2, r3, #5
 80128e2:	69fb      	ldr	r3, [r7, #28]
 80128e4:	4413      	add	r3, r2
 80128e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128ea:	460a      	mov	r2, r1
 80128ec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80128ee:	68bb      	ldr	r3, [r7, #8]
 80128f0:	78db      	ldrb	r3, [r3, #3]
 80128f2:	2b01      	cmp	r3, #1
 80128f4:	d128      	bne.n	8012948 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80128f6:	69fb      	ldr	r3, [r7, #28]
 80128f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80128fc:	689b      	ldr	r3, [r3, #8]
 80128fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012902:	2b00      	cmp	r3, #0
 8012904:	d110      	bne.n	8012928 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8012906:	69bb      	ldr	r3, [r7, #24]
 8012908:	015a      	lsls	r2, r3, #5
 801290a:	69fb      	ldr	r3, [r7, #28]
 801290c:	4413      	add	r3, r2
 801290e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	69ba      	ldr	r2, [r7, #24]
 8012916:	0151      	lsls	r1, r2, #5
 8012918:	69fa      	ldr	r2, [r7, #28]
 801291a:	440a      	add	r2, r1
 801291c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012920:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012924:	6013      	str	r3, [r2, #0]
 8012926:	e00f      	b.n	8012948 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8012928:	69bb      	ldr	r3, [r7, #24]
 801292a:	015a      	lsls	r2, r3, #5
 801292c:	69fb      	ldr	r3, [r7, #28]
 801292e:	4413      	add	r3, r2
 8012930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	69ba      	ldr	r2, [r7, #24]
 8012938:	0151      	lsls	r1, r2, #5
 801293a:	69fa      	ldr	r2, [r7, #28]
 801293c:	440a      	add	r2, r1
 801293e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012946:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012948:	69bb      	ldr	r3, [r7, #24]
 801294a:	015a      	lsls	r2, r3, #5
 801294c:	69fb      	ldr	r3, [r7, #28]
 801294e:	4413      	add	r3, r2
 8012950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	69ba      	ldr	r2, [r7, #24]
 8012958:	0151      	lsls	r1, r2, #5
 801295a:	69fa      	ldr	r2, [r7, #28]
 801295c:	440a      	add	r2, r1
 801295e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012962:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012966:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012968:	2300      	movs	r3, #0
}
 801296a:	4618      	mov	r0, r3
 801296c:	3720      	adds	r7, #32
 801296e:	46bd      	mov	sp, r7
 8012970:	bd80      	pop	{r7, pc}
 8012972:	bf00      	nop
 8012974:	fff80000 	.word	0xfff80000
 8012978:	e007ffff 	.word	0xe007ffff
 801297c:	1ff80000 	.word	0x1ff80000

08012980 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8012980:	b480      	push	{r7}
 8012982:	b087      	sub	sp, #28
 8012984:	af00      	add	r7, sp, #0
 8012986:	60f8      	str	r0, [r7, #12]
 8012988:	60b9      	str	r1, [r7, #8]
 801298a:	4613      	mov	r3, r2
 801298c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8012992:	68bb      	ldr	r3, [r7, #8]
 8012994:	781b      	ldrb	r3, [r3, #0]
 8012996:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012998:	68bb      	ldr	r3, [r7, #8]
 801299a:	785b      	ldrb	r3, [r3, #1]
 801299c:	2b01      	cmp	r3, #1
 801299e:	f040 80cd 	bne.w	8012b3c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80129a2:	68bb      	ldr	r3, [r7, #8]
 80129a4:	695b      	ldr	r3, [r3, #20]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d132      	bne.n	8012a10 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80129aa:	693b      	ldr	r3, [r7, #16]
 80129ac:	015a      	lsls	r2, r3, #5
 80129ae:	697b      	ldr	r3, [r7, #20]
 80129b0:	4413      	add	r3, r2
 80129b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129b6:	691a      	ldr	r2, [r3, #16]
 80129b8:	693b      	ldr	r3, [r7, #16]
 80129ba:	0159      	lsls	r1, r3, #5
 80129bc:	697b      	ldr	r3, [r7, #20]
 80129be:	440b      	add	r3, r1
 80129c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129c4:	4619      	mov	r1, r3
 80129c6:	4b98      	ldr	r3, [pc, #608]	; (8012c28 <USB_EP0StartXfer+0x2a8>)
 80129c8:	4013      	ands	r3, r2
 80129ca:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80129cc:	693b      	ldr	r3, [r7, #16]
 80129ce:	015a      	lsls	r2, r3, #5
 80129d0:	697b      	ldr	r3, [r7, #20]
 80129d2:	4413      	add	r3, r2
 80129d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129d8:	691b      	ldr	r3, [r3, #16]
 80129da:	693a      	ldr	r2, [r7, #16]
 80129dc:	0151      	lsls	r1, r2, #5
 80129de:	697a      	ldr	r2, [r7, #20]
 80129e0:	440a      	add	r2, r1
 80129e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80129e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80129ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80129ec:	693b      	ldr	r3, [r7, #16]
 80129ee:	015a      	lsls	r2, r3, #5
 80129f0:	697b      	ldr	r3, [r7, #20]
 80129f2:	4413      	add	r3, r2
 80129f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129f8:	691a      	ldr	r2, [r3, #16]
 80129fa:	693b      	ldr	r3, [r7, #16]
 80129fc:	0159      	lsls	r1, r3, #5
 80129fe:	697b      	ldr	r3, [r7, #20]
 8012a00:	440b      	add	r3, r1
 8012a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a06:	4619      	mov	r1, r3
 8012a08:	4b88      	ldr	r3, [pc, #544]	; (8012c2c <USB_EP0StartXfer+0x2ac>)
 8012a0a:	4013      	ands	r3, r2
 8012a0c:	610b      	str	r3, [r1, #16]
 8012a0e:	e04e      	b.n	8012aae <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012a10:	693b      	ldr	r3, [r7, #16]
 8012a12:	015a      	lsls	r2, r3, #5
 8012a14:	697b      	ldr	r3, [r7, #20]
 8012a16:	4413      	add	r3, r2
 8012a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a1c:	691a      	ldr	r2, [r3, #16]
 8012a1e:	693b      	ldr	r3, [r7, #16]
 8012a20:	0159      	lsls	r1, r3, #5
 8012a22:	697b      	ldr	r3, [r7, #20]
 8012a24:	440b      	add	r3, r1
 8012a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a2a:	4619      	mov	r1, r3
 8012a2c:	4b7f      	ldr	r3, [pc, #508]	; (8012c2c <USB_EP0StartXfer+0x2ac>)
 8012a2e:	4013      	ands	r3, r2
 8012a30:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012a32:	693b      	ldr	r3, [r7, #16]
 8012a34:	015a      	lsls	r2, r3, #5
 8012a36:	697b      	ldr	r3, [r7, #20]
 8012a38:	4413      	add	r3, r2
 8012a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a3e:	691a      	ldr	r2, [r3, #16]
 8012a40:	693b      	ldr	r3, [r7, #16]
 8012a42:	0159      	lsls	r1, r3, #5
 8012a44:	697b      	ldr	r3, [r7, #20]
 8012a46:	440b      	add	r3, r1
 8012a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a4c:	4619      	mov	r1, r3
 8012a4e:	4b76      	ldr	r3, [pc, #472]	; (8012c28 <USB_EP0StartXfer+0x2a8>)
 8012a50:	4013      	ands	r3, r2
 8012a52:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8012a54:	68bb      	ldr	r3, [r7, #8]
 8012a56:	695a      	ldr	r2, [r3, #20]
 8012a58:	68bb      	ldr	r3, [r7, #8]
 8012a5a:	689b      	ldr	r3, [r3, #8]
 8012a5c:	429a      	cmp	r2, r3
 8012a5e:	d903      	bls.n	8012a68 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8012a60:	68bb      	ldr	r3, [r7, #8]
 8012a62:	689a      	ldr	r2, [r3, #8]
 8012a64:	68bb      	ldr	r3, [r7, #8]
 8012a66:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012a68:	693b      	ldr	r3, [r7, #16]
 8012a6a:	015a      	lsls	r2, r3, #5
 8012a6c:	697b      	ldr	r3, [r7, #20]
 8012a6e:	4413      	add	r3, r2
 8012a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a74:	691b      	ldr	r3, [r3, #16]
 8012a76:	693a      	ldr	r2, [r7, #16]
 8012a78:	0151      	lsls	r1, r2, #5
 8012a7a:	697a      	ldr	r2, [r7, #20]
 8012a7c:	440a      	add	r2, r1
 8012a7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012a82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012a86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012a88:	693b      	ldr	r3, [r7, #16]
 8012a8a:	015a      	lsls	r2, r3, #5
 8012a8c:	697b      	ldr	r3, [r7, #20]
 8012a8e:	4413      	add	r3, r2
 8012a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a94:	691a      	ldr	r2, [r3, #16]
 8012a96:	68bb      	ldr	r3, [r7, #8]
 8012a98:	695b      	ldr	r3, [r3, #20]
 8012a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012a9e:	6939      	ldr	r1, [r7, #16]
 8012aa0:	0148      	lsls	r0, r1, #5
 8012aa2:	6979      	ldr	r1, [r7, #20]
 8012aa4:	4401      	add	r1, r0
 8012aa6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012aaa:	4313      	orrs	r3, r2
 8012aac:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8012aae:	79fb      	ldrb	r3, [r7, #7]
 8012ab0:	2b01      	cmp	r3, #1
 8012ab2:	d11e      	bne.n	8012af2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012ab4:	68bb      	ldr	r3, [r7, #8]
 8012ab6:	691b      	ldr	r3, [r3, #16]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d009      	beq.n	8012ad0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012abc:	693b      	ldr	r3, [r7, #16]
 8012abe:	015a      	lsls	r2, r3, #5
 8012ac0:	697b      	ldr	r3, [r7, #20]
 8012ac2:	4413      	add	r3, r2
 8012ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ac8:	461a      	mov	r2, r3
 8012aca:	68bb      	ldr	r3, [r7, #8]
 8012acc:	691b      	ldr	r3, [r3, #16]
 8012ace:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012ad0:	693b      	ldr	r3, [r7, #16]
 8012ad2:	015a      	lsls	r2, r3, #5
 8012ad4:	697b      	ldr	r3, [r7, #20]
 8012ad6:	4413      	add	r3, r2
 8012ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	693a      	ldr	r2, [r7, #16]
 8012ae0:	0151      	lsls	r1, r2, #5
 8012ae2:	697a      	ldr	r2, [r7, #20]
 8012ae4:	440a      	add	r2, r1
 8012ae6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012aea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012aee:	6013      	str	r3, [r2, #0]
 8012af0:	e092      	b.n	8012c18 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012af2:	693b      	ldr	r3, [r7, #16]
 8012af4:	015a      	lsls	r2, r3, #5
 8012af6:	697b      	ldr	r3, [r7, #20]
 8012af8:	4413      	add	r3, r2
 8012afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	693a      	ldr	r2, [r7, #16]
 8012b02:	0151      	lsls	r1, r2, #5
 8012b04:	697a      	ldr	r2, [r7, #20]
 8012b06:	440a      	add	r2, r1
 8012b08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012b0c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012b10:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8012b12:	68bb      	ldr	r3, [r7, #8]
 8012b14:	695b      	ldr	r3, [r3, #20]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d07e      	beq.n	8012c18 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012b1a:	697b      	ldr	r3, [r7, #20]
 8012b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012b22:	68bb      	ldr	r3, [r7, #8]
 8012b24:	781b      	ldrb	r3, [r3, #0]
 8012b26:	f003 030f 	and.w	r3, r3, #15
 8012b2a:	2101      	movs	r1, #1
 8012b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8012b30:	6979      	ldr	r1, [r7, #20]
 8012b32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012b36:	4313      	orrs	r3, r2
 8012b38:	634b      	str	r3, [r1, #52]	; 0x34
 8012b3a:	e06d      	b.n	8012c18 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012b3c:	693b      	ldr	r3, [r7, #16]
 8012b3e:	015a      	lsls	r2, r3, #5
 8012b40:	697b      	ldr	r3, [r7, #20]
 8012b42:	4413      	add	r3, r2
 8012b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b48:	691a      	ldr	r2, [r3, #16]
 8012b4a:	693b      	ldr	r3, [r7, #16]
 8012b4c:	0159      	lsls	r1, r3, #5
 8012b4e:	697b      	ldr	r3, [r7, #20]
 8012b50:	440b      	add	r3, r1
 8012b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b56:	4619      	mov	r1, r3
 8012b58:	4b34      	ldr	r3, [pc, #208]	; (8012c2c <USB_EP0StartXfer+0x2ac>)
 8012b5a:	4013      	ands	r3, r2
 8012b5c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012b5e:	693b      	ldr	r3, [r7, #16]
 8012b60:	015a      	lsls	r2, r3, #5
 8012b62:	697b      	ldr	r3, [r7, #20]
 8012b64:	4413      	add	r3, r2
 8012b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b6a:	691a      	ldr	r2, [r3, #16]
 8012b6c:	693b      	ldr	r3, [r7, #16]
 8012b6e:	0159      	lsls	r1, r3, #5
 8012b70:	697b      	ldr	r3, [r7, #20]
 8012b72:	440b      	add	r3, r1
 8012b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b78:	4619      	mov	r1, r3
 8012b7a:	4b2b      	ldr	r3, [pc, #172]	; (8012c28 <USB_EP0StartXfer+0x2a8>)
 8012b7c:	4013      	ands	r3, r2
 8012b7e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8012b80:	68bb      	ldr	r3, [r7, #8]
 8012b82:	695b      	ldr	r3, [r3, #20]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d003      	beq.n	8012b90 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8012b88:	68bb      	ldr	r3, [r7, #8]
 8012b8a:	689a      	ldr	r2, [r3, #8]
 8012b8c:	68bb      	ldr	r3, [r7, #8]
 8012b8e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012b90:	693b      	ldr	r3, [r7, #16]
 8012b92:	015a      	lsls	r2, r3, #5
 8012b94:	697b      	ldr	r3, [r7, #20]
 8012b96:	4413      	add	r3, r2
 8012b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b9c:	691b      	ldr	r3, [r3, #16]
 8012b9e:	693a      	ldr	r2, [r7, #16]
 8012ba0:	0151      	lsls	r1, r2, #5
 8012ba2:	697a      	ldr	r2, [r7, #20]
 8012ba4:	440a      	add	r2, r1
 8012ba6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012baa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012bae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8012bb0:	693b      	ldr	r3, [r7, #16]
 8012bb2:	015a      	lsls	r2, r3, #5
 8012bb4:	697b      	ldr	r3, [r7, #20]
 8012bb6:	4413      	add	r3, r2
 8012bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012bbc:	691a      	ldr	r2, [r3, #16]
 8012bbe:	68bb      	ldr	r3, [r7, #8]
 8012bc0:	689b      	ldr	r3, [r3, #8]
 8012bc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012bc6:	6939      	ldr	r1, [r7, #16]
 8012bc8:	0148      	lsls	r0, r1, #5
 8012bca:	6979      	ldr	r1, [r7, #20]
 8012bcc:	4401      	add	r1, r0
 8012bce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012bd2:	4313      	orrs	r3, r2
 8012bd4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8012bd6:	79fb      	ldrb	r3, [r7, #7]
 8012bd8:	2b01      	cmp	r3, #1
 8012bda:	d10d      	bne.n	8012bf8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8012bdc:	68bb      	ldr	r3, [r7, #8]
 8012bde:	68db      	ldr	r3, [r3, #12]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d009      	beq.n	8012bf8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012be4:	68bb      	ldr	r3, [r7, #8]
 8012be6:	68d9      	ldr	r1, [r3, #12]
 8012be8:	693b      	ldr	r3, [r7, #16]
 8012bea:	015a      	lsls	r2, r3, #5
 8012bec:	697b      	ldr	r3, [r7, #20]
 8012bee:	4413      	add	r3, r2
 8012bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012bf4:	460a      	mov	r2, r1
 8012bf6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012bf8:	693b      	ldr	r3, [r7, #16]
 8012bfa:	015a      	lsls	r2, r3, #5
 8012bfc:	697b      	ldr	r3, [r7, #20]
 8012bfe:	4413      	add	r3, r2
 8012c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	693a      	ldr	r2, [r7, #16]
 8012c08:	0151      	lsls	r1, r2, #5
 8012c0a:	697a      	ldr	r2, [r7, #20]
 8012c0c:	440a      	add	r2, r1
 8012c0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012c12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012c16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012c18:	2300      	movs	r3, #0
}
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	371c      	adds	r7, #28
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c24:	4770      	bx	lr
 8012c26:	bf00      	nop
 8012c28:	e007ffff 	.word	0xe007ffff
 8012c2c:	fff80000 	.word	0xfff80000

08012c30 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8012c30:	b480      	push	{r7}
 8012c32:	b089      	sub	sp, #36	; 0x24
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	60f8      	str	r0, [r7, #12]
 8012c38:	60b9      	str	r1, [r7, #8]
 8012c3a:	4611      	mov	r1, r2
 8012c3c:	461a      	mov	r2, r3
 8012c3e:	460b      	mov	r3, r1
 8012c40:	71fb      	strb	r3, [r7, #7]
 8012c42:	4613      	mov	r3, r2
 8012c44:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8012c4a:	68bb      	ldr	r3, [r7, #8]
 8012c4c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8012c4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d11a      	bne.n	8012c8c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8012c56:	88bb      	ldrh	r3, [r7, #4]
 8012c58:	3303      	adds	r3, #3
 8012c5a:	089b      	lsrs	r3, r3, #2
 8012c5c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8012c5e:	2300      	movs	r3, #0
 8012c60:	61bb      	str	r3, [r7, #24]
 8012c62:	e00f      	b.n	8012c84 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012c64:	79fb      	ldrb	r3, [r7, #7]
 8012c66:	031a      	lsls	r2, r3, #12
 8012c68:	697b      	ldr	r3, [r7, #20]
 8012c6a:	4413      	add	r3, r2
 8012c6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012c70:	461a      	mov	r2, r3
 8012c72:	69fb      	ldr	r3, [r7, #28]
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	6013      	str	r3, [r2, #0]
      pSrc++;
 8012c78:	69fb      	ldr	r3, [r7, #28]
 8012c7a:	3304      	adds	r3, #4
 8012c7c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8012c7e:	69bb      	ldr	r3, [r7, #24]
 8012c80:	3301      	adds	r3, #1
 8012c82:	61bb      	str	r3, [r7, #24]
 8012c84:	69ba      	ldr	r2, [r7, #24]
 8012c86:	693b      	ldr	r3, [r7, #16]
 8012c88:	429a      	cmp	r2, r3
 8012c8a:	d3eb      	bcc.n	8012c64 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8012c8c:	2300      	movs	r3, #0
}
 8012c8e:	4618      	mov	r0, r3
 8012c90:	3724      	adds	r7, #36	; 0x24
 8012c92:	46bd      	mov	sp, r7
 8012c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c98:	4770      	bx	lr

08012c9a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8012c9a:	b480      	push	{r7}
 8012c9c:	b089      	sub	sp, #36	; 0x24
 8012c9e:	af00      	add	r7, sp, #0
 8012ca0:	60f8      	str	r0, [r7, #12]
 8012ca2:	60b9      	str	r1, [r7, #8]
 8012ca4:	4613      	mov	r3, r2
 8012ca6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8012cac:	68bb      	ldr	r3, [r7, #8]
 8012cae:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8012cb0:	88fb      	ldrh	r3, [r7, #6]
 8012cb2:	3303      	adds	r3, #3
 8012cb4:	089b      	lsrs	r3, r3, #2
 8012cb6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8012cb8:	2300      	movs	r3, #0
 8012cba:	61bb      	str	r3, [r7, #24]
 8012cbc:	e00b      	b.n	8012cd6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012cbe:	697b      	ldr	r3, [r7, #20]
 8012cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012cc4:	681a      	ldr	r2, [r3, #0]
 8012cc6:	69fb      	ldr	r3, [r7, #28]
 8012cc8:	601a      	str	r2, [r3, #0]
    pDest++;
 8012cca:	69fb      	ldr	r3, [r7, #28]
 8012ccc:	3304      	adds	r3, #4
 8012cce:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8012cd0:	69bb      	ldr	r3, [r7, #24]
 8012cd2:	3301      	adds	r3, #1
 8012cd4:	61bb      	str	r3, [r7, #24]
 8012cd6:	69ba      	ldr	r2, [r7, #24]
 8012cd8:	693b      	ldr	r3, [r7, #16]
 8012cda:	429a      	cmp	r2, r3
 8012cdc:	d3ef      	bcc.n	8012cbe <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8012cde:	69fb      	ldr	r3, [r7, #28]
}
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	3724      	adds	r7, #36	; 0x24
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cea:	4770      	bx	lr

08012cec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012cec:	b480      	push	{r7}
 8012cee:	b085      	sub	sp, #20
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]
 8012cf4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012cfa:	683b      	ldr	r3, [r7, #0]
 8012cfc:	781b      	ldrb	r3, [r3, #0]
 8012cfe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012d00:	683b      	ldr	r3, [r7, #0]
 8012d02:	785b      	ldrb	r3, [r3, #1]
 8012d04:	2b01      	cmp	r3, #1
 8012d06:	d12c      	bne.n	8012d62 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012d08:	68bb      	ldr	r3, [r7, #8]
 8012d0a:	015a      	lsls	r2, r3, #5
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	4413      	add	r3, r2
 8012d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	db12      	blt.n	8012d40 <USB_EPSetStall+0x54>
 8012d1a:	68bb      	ldr	r3, [r7, #8]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d00f      	beq.n	8012d40 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8012d20:	68bb      	ldr	r3, [r7, #8]
 8012d22:	015a      	lsls	r2, r3, #5
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	4413      	add	r3, r2
 8012d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	68ba      	ldr	r2, [r7, #8]
 8012d30:	0151      	lsls	r1, r2, #5
 8012d32:	68fa      	ldr	r2, [r7, #12]
 8012d34:	440a      	add	r2, r1
 8012d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012d3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012d3e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8012d40:	68bb      	ldr	r3, [r7, #8]
 8012d42:	015a      	lsls	r2, r3, #5
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	4413      	add	r3, r2
 8012d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	68ba      	ldr	r2, [r7, #8]
 8012d50:	0151      	lsls	r1, r2, #5
 8012d52:	68fa      	ldr	r2, [r7, #12]
 8012d54:	440a      	add	r2, r1
 8012d56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012d5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012d5e:	6013      	str	r3, [r2, #0]
 8012d60:	e02b      	b.n	8012dba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012d62:	68bb      	ldr	r3, [r7, #8]
 8012d64:	015a      	lsls	r2, r3, #5
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	4413      	add	r3, r2
 8012d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	db12      	blt.n	8012d9a <USB_EPSetStall+0xae>
 8012d74:	68bb      	ldr	r3, [r7, #8]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d00f      	beq.n	8012d9a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8012d7a:	68bb      	ldr	r3, [r7, #8]
 8012d7c:	015a      	lsls	r2, r3, #5
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	4413      	add	r3, r2
 8012d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	68ba      	ldr	r2, [r7, #8]
 8012d8a:	0151      	lsls	r1, r2, #5
 8012d8c:	68fa      	ldr	r2, [r7, #12]
 8012d8e:	440a      	add	r2, r1
 8012d90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012d94:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012d98:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8012d9a:	68bb      	ldr	r3, [r7, #8]
 8012d9c:	015a      	lsls	r2, r3, #5
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	4413      	add	r3, r2
 8012da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	68ba      	ldr	r2, [r7, #8]
 8012daa:	0151      	lsls	r1, r2, #5
 8012dac:	68fa      	ldr	r2, [r7, #12]
 8012dae:	440a      	add	r2, r1
 8012db0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012db4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012db8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012dba:	2300      	movs	r3, #0
}
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	3714      	adds	r7, #20
 8012dc0:	46bd      	mov	sp, r7
 8012dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dc6:	4770      	bx	lr

08012dc8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012dc8:	b480      	push	{r7}
 8012dca:	b085      	sub	sp, #20
 8012dcc:	af00      	add	r7, sp, #0
 8012dce:	6078      	str	r0, [r7, #4]
 8012dd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012dd6:	683b      	ldr	r3, [r7, #0]
 8012dd8:	781b      	ldrb	r3, [r3, #0]
 8012dda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012ddc:	683b      	ldr	r3, [r7, #0]
 8012dde:	785b      	ldrb	r3, [r3, #1]
 8012de0:	2b01      	cmp	r3, #1
 8012de2:	d128      	bne.n	8012e36 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8012de4:	68bb      	ldr	r3, [r7, #8]
 8012de6:	015a      	lsls	r2, r3, #5
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	4413      	add	r3, r2
 8012dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	68ba      	ldr	r2, [r7, #8]
 8012df4:	0151      	lsls	r1, r2, #5
 8012df6:	68fa      	ldr	r2, [r7, #12]
 8012df8:	440a      	add	r2, r1
 8012dfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012dfe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012e02:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012e04:	683b      	ldr	r3, [r7, #0]
 8012e06:	78db      	ldrb	r3, [r3, #3]
 8012e08:	2b03      	cmp	r3, #3
 8012e0a:	d003      	beq.n	8012e14 <USB_EPClearStall+0x4c>
 8012e0c:	683b      	ldr	r3, [r7, #0]
 8012e0e:	78db      	ldrb	r3, [r3, #3]
 8012e10:	2b02      	cmp	r3, #2
 8012e12:	d138      	bne.n	8012e86 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012e14:	68bb      	ldr	r3, [r7, #8]
 8012e16:	015a      	lsls	r2, r3, #5
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	4413      	add	r3, r2
 8012e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	68ba      	ldr	r2, [r7, #8]
 8012e24:	0151      	lsls	r1, r2, #5
 8012e26:	68fa      	ldr	r2, [r7, #12]
 8012e28:	440a      	add	r2, r1
 8012e2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012e32:	6013      	str	r3, [r2, #0]
 8012e34:	e027      	b.n	8012e86 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8012e36:	68bb      	ldr	r3, [r7, #8]
 8012e38:	015a      	lsls	r2, r3, #5
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	4413      	add	r3, r2
 8012e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	68ba      	ldr	r2, [r7, #8]
 8012e46:	0151      	lsls	r1, r2, #5
 8012e48:	68fa      	ldr	r2, [r7, #12]
 8012e4a:	440a      	add	r2, r1
 8012e4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012e50:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012e54:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012e56:	683b      	ldr	r3, [r7, #0]
 8012e58:	78db      	ldrb	r3, [r3, #3]
 8012e5a:	2b03      	cmp	r3, #3
 8012e5c:	d003      	beq.n	8012e66 <USB_EPClearStall+0x9e>
 8012e5e:	683b      	ldr	r3, [r7, #0]
 8012e60:	78db      	ldrb	r3, [r3, #3]
 8012e62:	2b02      	cmp	r3, #2
 8012e64:	d10f      	bne.n	8012e86 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012e66:	68bb      	ldr	r3, [r7, #8]
 8012e68:	015a      	lsls	r2, r3, #5
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	4413      	add	r3, r2
 8012e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e72:	681b      	ldr	r3, [r3, #0]
 8012e74:	68ba      	ldr	r2, [r7, #8]
 8012e76:	0151      	lsls	r1, r2, #5
 8012e78:	68fa      	ldr	r2, [r7, #12]
 8012e7a:	440a      	add	r2, r1
 8012e7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012e84:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8012e86:	2300      	movs	r3, #0
}
 8012e88:	4618      	mov	r0, r3
 8012e8a:	3714      	adds	r7, #20
 8012e8c:	46bd      	mov	sp, r7
 8012e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e92:	4770      	bx	lr

08012e94 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8012e94:	b480      	push	{r7}
 8012e96:	b085      	sub	sp, #20
 8012e98:	af00      	add	r7, sp, #0
 8012e9a:	6078      	str	r0, [r7, #4]
 8012e9c:	460b      	mov	r3, r1
 8012e9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	68fa      	ldr	r2, [r7, #12]
 8012eae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012eb2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8012eb6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ebe:	681a      	ldr	r2, [r3, #0]
 8012ec0:	78fb      	ldrb	r3, [r7, #3]
 8012ec2:	011b      	lsls	r3, r3, #4
 8012ec4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8012ec8:	68f9      	ldr	r1, [r7, #12]
 8012eca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012ece:	4313      	orrs	r3, r2
 8012ed0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8012ed2:	2300      	movs	r3, #0
}
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	3714      	adds	r7, #20
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ede:	4770      	bx	lr

08012ee0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8012ee0:	b580      	push	{r7, lr}
 8012ee2:	b084      	sub	sp, #16
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ef2:	685b      	ldr	r3, [r3, #4]
 8012ef4:	68fa      	ldr	r2, [r7, #12]
 8012ef6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012efa:	f023 0302 	bic.w	r3, r3, #2
 8012efe:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8012f00:	2003      	movs	r0, #3
 8012f02:	f7f1 fb65 	bl	80045d0 <HAL_Delay>

  return HAL_OK;
 8012f06:	2300      	movs	r3, #0
}
 8012f08:	4618      	mov	r0, r3
 8012f0a:	3710      	adds	r7, #16
 8012f0c:	46bd      	mov	sp, r7
 8012f0e:	bd80      	pop	{r7, pc}

08012f10 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8012f10:	b580      	push	{r7, lr}
 8012f12:	b084      	sub	sp, #16
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f22:	685b      	ldr	r3, [r3, #4]
 8012f24:	68fa      	ldr	r2, [r7, #12]
 8012f26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012f2a:	f043 0302 	orr.w	r3, r3, #2
 8012f2e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8012f30:	2003      	movs	r0, #3
 8012f32:	f7f1 fb4d 	bl	80045d0 <HAL_Delay>

  return HAL_OK;
 8012f36:	2300      	movs	r3, #0
}
 8012f38:	4618      	mov	r0, r3
 8012f3a:	3710      	adds	r7, #16
 8012f3c:	46bd      	mov	sp, r7
 8012f3e:	bd80      	pop	{r7, pc}

08012f40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8012f40:	b480      	push	{r7}
 8012f42:	b085      	sub	sp, #20
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	695b      	ldr	r3, [r3, #20]
 8012f4c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	699b      	ldr	r3, [r3, #24]
 8012f52:	68fa      	ldr	r2, [r7, #12]
 8012f54:	4013      	ands	r3, r2
 8012f56:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8012f58:	68fb      	ldr	r3, [r7, #12]
}
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	3714      	adds	r7, #20
 8012f5e:	46bd      	mov	sp, r7
 8012f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f64:	4770      	bx	lr

08012f66 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012f66:	b480      	push	{r7}
 8012f68:	b085      	sub	sp, #20
 8012f6a:	af00      	add	r7, sp, #0
 8012f6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f78:	699b      	ldr	r3, [r3, #24]
 8012f7a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f82:	69db      	ldr	r3, [r3, #28]
 8012f84:	68ba      	ldr	r2, [r7, #8]
 8012f86:	4013      	ands	r3, r2
 8012f88:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8012f8a:	68bb      	ldr	r3, [r7, #8]
 8012f8c:	0c1b      	lsrs	r3, r3, #16
}
 8012f8e:	4618      	mov	r0, r3
 8012f90:	3714      	adds	r7, #20
 8012f92:	46bd      	mov	sp, r7
 8012f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f98:	4770      	bx	lr

08012f9a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012f9a:	b480      	push	{r7}
 8012f9c:	b085      	sub	sp, #20
 8012f9e:	af00      	add	r7, sp, #0
 8012fa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fac:	699b      	ldr	r3, [r3, #24]
 8012fae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fb6:	69db      	ldr	r3, [r3, #28]
 8012fb8:	68ba      	ldr	r2, [r7, #8]
 8012fba:	4013      	ands	r3, r2
 8012fbc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8012fbe:	68bb      	ldr	r3, [r7, #8]
 8012fc0:	b29b      	uxth	r3, r3
}
 8012fc2:	4618      	mov	r0, r3
 8012fc4:	3714      	adds	r7, #20
 8012fc6:	46bd      	mov	sp, r7
 8012fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fcc:	4770      	bx	lr

08012fce <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012fce:	b480      	push	{r7}
 8012fd0:	b085      	sub	sp, #20
 8012fd2:	af00      	add	r7, sp, #0
 8012fd4:	6078      	str	r0, [r7, #4]
 8012fd6:	460b      	mov	r3, r1
 8012fd8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8012fde:	78fb      	ldrb	r3, [r7, #3]
 8012fe0:	015a      	lsls	r2, r3, #5
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	4413      	add	r3, r2
 8012fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fea:	689b      	ldr	r3, [r3, #8]
 8012fec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ff4:	695b      	ldr	r3, [r3, #20]
 8012ff6:	68ba      	ldr	r2, [r7, #8]
 8012ff8:	4013      	ands	r3, r2
 8012ffa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012ffc:	68bb      	ldr	r3, [r7, #8]
}
 8012ffe:	4618      	mov	r0, r3
 8013000:	3714      	adds	r7, #20
 8013002:	46bd      	mov	sp, r7
 8013004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013008:	4770      	bx	lr

0801300a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801300a:	b480      	push	{r7}
 801300c:	b087      	sub	sp, #28
 801300e:	af00      	add	r7, sp, #0
 8013010:	6078      	str	r0, [r7, #4]
 8013012:	460b      	mov	r3, r1
 8013014:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 801301a:	697b      	ldr	r3, [r7, #20]
 801301c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013020:	691b      	ldr	r3, [r3, #16]
 8013022:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013024:	697b      	ldr	r3, [r7, #20]
 8013026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801302a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801302c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801302e:	78fb      	ldrb	r3, [r7, #3]
 8013030:	f003 030f 	and.w	r3, r3, #15
 8013034:	68fa      	ldr	r2, [r7, #12]
 8013036:	fa22 f303 	lsr.w	r3, r2, r3
 801303a:	01db      	lsls	r3, r3, #7
 801303c:	b2db      	uxtb	r3, r3
 801303e:	693a      	ldr	r2, [r7, #16]
 8013040:	4313      	orrs	r3, r2
 8013042:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013044:	78fb      	ldrb	r3, [r7, #3]
 8013046:	015a      	lsls	r2, r3, #5
 8013048:	697b      	ldr	r3, [r7, #20]
 801304a:	4413      	add	r3, r2
 801304c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013050:	689b      	ldr	r3, [r3, #8]
 8013052:	693a      	ldr	r2, [r7, #16]
 8013054:	4013      	ands	r3, r2
 8013056:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013058:	68bb      	ldr	r3, [r7, #8]
}
 801305a:	4618      	mov	r0, r3
 801305c:	371c      	adds	r7, #28
 801305e:	46bd      	mov	sp, r7
 8013060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013064:	4770      	bx	lr

08013066 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013066:	b480      	push	{r7}
 8013068:	b083      	sub	sp, #12
 801306a:	af00      	add	r7, sp, #0
 801306c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	695b      	ldr	r3, [r3, #20]
 8013072:	f003 0301 	and.w	r3, r3, #1
}
 8013076:	4618      	mov	r0, r3
 8013078:	370c      	adds	r7, #12
 801307a:	46bd      	mov	sp, r7
 801307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013080:	4770      	bx	lr
	...

08013084 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8013084:	b480      	push	{r7}
 8013086:	b085      	sub	sp, #20
 8013088:	af00      	add	r7, sp, #0
 801308a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013096:	681a      	ldr	r2, [r3, #0]
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801309e:	4619      	mov	r1, r3
 80130a0:	4b09      	ldr	r3, [pc, #36]	; (80130c8 <USB_ActivateSetup+0x44>)
 80130a2:	4013      	ands	r3, r2
 80130a4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80130ac:	685b      	ldr	r3, [r3, #4]
 80130ae:	68fa      	ldr	r2, [r7, #12]
 80130b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80130b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80130b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80130ba:	2300      	movs	r3, #0
}
 80130bc:	4618      	mov	r0, r3
 80130be:	3714      	adds	r7, #20
 80130c0:	46bd      	mov	sp, r7
 80130c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c6:	4770      	bx	lr
 80130c8:	fffff800 	.word	0xfffff800

080130cc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80130cc:	b480      	push	{r7}
 80130ce:	b087      	sub	sp, #28
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	60f8      	str	r0, [r7, #12]
 80130d4:	460b      	mov	r3, r1
 80130d6:	607a      	str	r2, [r7, #4]
 80130d8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	333c      	adds	r3, #60	; 0x3c
 80130e2:	3304      	adds	r3, #4
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80130e8:	693b      	ldr	r3, [r7, #16]
 80130ea:	4a26      	ldr	r2, [pc, #152]	; (8013184 <USB_EP0_OutStart+0xb8>)
 80130ec:	4293      	cmp	r3, r2
 80130ee:	d90a      	bls.n	8013106 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80130f0:	697b      	ldr	r3, [r7, #20]
 80130f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80130fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013100:	d101      	bne.n	8013106 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8013102:	2300      	movs	r3, #0
 8013104:	e037      	b.n	8013176 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8013106:	697b      	ldr	r3, [r7, #20]
 8013108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801310c:	461a      	mov	r2, r3
 801310e:	2300      	movs	r3, #0
 8013110:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013112:	697b      	ldr	r3, [r7, #20]
 8013114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013118:	691b      	ldr	r3, [r3, #16]
 801311a:	697a      	ldr	r2, [r7, #20]
 801311c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013120:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013124:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8013126:	697b      	ldr	r3, [r7, #20]
 8013128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801312c:	691b      	ldr	r3, [r3, #16]
 801312e:	697a      	ldr	r2, [r7, #20]
 8013130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013134:	f043 0318 	orr.w	r3, r3, #24
 8013138:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801313a:	697b      	ldr	r3, [r7, #20]
 801313c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013140:	691b      	ldr	r3, [r3, #16]
 8013142:	697a      	ldr	r2, [r7, #20]
 8013144:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013148:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801314c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801314e:	7afb      	ldrb	r3, [r7, #11]
 8013150:	2b01      	cmp	r3, #1
 8013152:	d10f      	bne.n	8013174 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8013154:	697b      	ldr	r3, [r7, #20]
 8013156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801315a:	461a      	mov	r2, r3
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8013160:	697b      	ldr	r3, [r7, #20]
 8013162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	697a      	ldr	r2, [r7, #20]
 801316a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801316e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8013172:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013174:	2300      	movs	r3, #0
}
 8013176:	4618      	mov	r0, r3
 8013178:	371c      	adds	r7, #28
 801317a:	46bd      	mov	sp, r7
 801317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013180:	4770      	bx	lr
 8013182:	bf00      	nop
 8013184:	4f54300a 	.word	0x4f54300a

08013188 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013188:	b480      	push	{r7}
 801318a:	b085      	sub	sp, #20
 801318c:	af00      	add	r7, sp, #0
 801318e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8013190:	2300      	movs	r3, #0
 8013192:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	3301      	adds	r3, #1
 8013198:	60fb      	str	r3, [r7, #12]
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	4a13      	ldr	r2, [pc, #76]	; (80131ec <USB_CoreReset+0x64>)
 801319e:	4293      	cmp	r3, r2
 80131a0:	d901      	bls.n	80131a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80131a2:	2303      	movs	r3, #3
 80131a4:	e01b      	b.n	80131de <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	691b      	ldr	r3, [r3, #16]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	daf2      	bge.n	8013194 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80131ae:	2300      	movs	r3, #0
 80131b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	691b      	ldr	r3, [r3, #16]
 80131b6:	f043 0201 	orr.w	r2, r3, #1
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	3301      	adds	r3, #1
 80131c2:	60fb      	str	r3, [r7, #12]
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	4a09      	ldr	r2, [pc, #36]	; (80131ec <USB_CoreReset+0x64>)
 80131c8:	4293      	cmp	r3, r2
 80131ca:	d901      	bls.n	80131d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80131cc:	2303      	movs	r3, #3
 80131ce:	e006      	b.n	80131de <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	691b      	ldr	r3, [r3, #16]
 80131d4:	f003 0301 	and.w	r3, r3, #1
 80131d8:	2b01      	cmp	r3, #1
 80131da:	d0f0      	beq.n	80131be <USB_CoreReset+0x36>

  return HAL_OK;
 80131dc:	2300      	movs	r3, #0
}
 80131de:	4618      	mov	r0, r3
 80131e0:	3714      	adds	r7, #20
 80131e2:	46bd      	mov	sp, r7
 80131e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e8:	4770      	bx	lr
 80131ea:	bf00      	nop
 80131ec:	00030d40 	.word	0x00030d40

080131f0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80131f0:	b580      	push	{r7, lr}
 80131f2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80131f4:	4904      	ldr	r1, [pc, #16]	; (8013208 <MX_FATFS_Init+0x18>)
 80131f6:	4805      	ldr	r0, [pc, #20]	; (801320c <MX_FATFS_Init+0x1c>)
 80131f8:	f005 fbec 	bl	80189d4 <FATFS_LinkDriver>
 80131fc:	4603      	mov	r3, r0
 80131fe:	461a      	mov	r2, r3
 8013200:	4b03      	ldr	r3, [pc, #12]	; (8013210 <MX_FATFS_Init+0x20>)
 8013202:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8013204:	bf00      	nop
 8013206:	bd80      	pop	{r7, pc}
 8013208:	24001750 	.word	0x24001750
 801320c:	0801af64 	.word	0x0801af64
 8013210:	2400174c 	.word	0x2400174c

08013214 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8013214:	b480      	push	{r7}
 8013216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8013218:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801321a:	4618      	mov	r0, r3
 801321c:	46bd      	mov	sp, r7
 801321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013222:	4770      	bx	lr

08013224 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8013224:	b580      	push	{r7, lr}
 8013226:	b082      	sub	sp, #8
 8013228:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801322a:	2300      	movs	r3, #0
 801322c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801322e:	f000 f885 	bl	801333c <BSP_SD_IsDetected>
 8013232:	4603      	mov	r3, r0
 8013234:	2b01      	cmp	r3, #1
 8013236:	d001      	beq.n	801323c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8013238:	2302      	movs	r3, #2
 801323a:	e012      	b.n	8013262 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 801323c:	480b      	ldr	r0, [pc, #44]	; (801326c <BSP_SD_Init+0x48>)
 801323e:	f7f9 fc1d 	bl	800ca7c <HAL_SD_Init>
 8013242:	4603      	mov	r3, r0
 8013244:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8013246:	79fb      	ldrb	r3, [r7, #7]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d109      	bne.n	8013260 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 801324c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8013250:	4806      	ldr	r0, [pc, #24]	; (801326c <BSP_SD_Init+0x48>)
 8013252:	f7fa fdf1 	bl	800de38 <HAL_SD_ConfigWideBusOperation>
 8013256:	4603      	mov	r3, r0
 8013258:	2b00      	cmp	r3, #0
 801325a:	d001      	beq.n	8013260 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 801325c:	2301      	movs	r3, #1
 801325e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8013260:	79fb      	ldrb	r3, [r7, #7]
}
 8013262:	4618      	mov	r0, r3
 8013264:	3708      	adds	r7, #8
 8013266:	46bd      	mov	sp, r7
 8013268:	bd80      	pop	{r7, pc}
 801326a:	bf00      	nop
 801326c:	24001450 	.word	0x24001450

08013270 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8013270:	b580      	push	{r7, lr}
 8013272:	b086      	sub	sp, #24
 8013274:	af00      	add	r7, sp, #0
 8013276:	60f8      	str	r0, [r7, #12]
 8013278:	60b9      	str	r1, [r7, #8]
 801327a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801327c:	2300      	movs	r3, #0
 801327e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	68ba      	ldr	r2, [r7, #8]
 8013284:	68f9      	ldr	r1, [r7, #12]
 8013286:	4806      	ldr	r0, [pc, #24]	; (80132a0 <BSP_SD_ReadBlocks_DMA+0x30>)
 8013288:	f7fa f834 	bl	800d2f4 <HAL_SD_ReadBlocks_DMA>
 801328c:	4603      	mov	r3, r0
 801328e:	2b00      	cmp	r3, #0
 8013290:	d001      	beq.n	8013296 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013292:	2301      	movs	r3, #1
 8013294:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013296:	7dfb      	ldrb	r3, [r7, #23]
}
 8013298:	4618      	mov	r0, r3
 801329a:	3718      	adds	r7, #24
 801329c:	46bd      	mov	sp, r7
 801329e:	bd80      	pop	{r7, pc}
 80132a0:	24001450 	.word	0x24001450

080132a4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80132a4:	b580      	push	{r7, lr}
 80132a6:	b086      	sub	sp, #24
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	60f8      	str	r0, [r7, #12]
 80132ac:	60b9      	str	r1, [r7, #8]
 80132ae:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80132b0:	2300      	movs	r3, #0
 80132b2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	68ba      	ldr	r2, [r7, #8]
 80132b8:	68f9      	ldr	r1, [r7, #12]
 80132ba:	4806      	ldr	r0, [pc, #24]	; (80132d4 <BSP_SD_WriteBlocks_DMA+0x30>)
 80132bc:	f7fa f8c2 	bl	800d444 <HAL_SD_WriteBlocks_DMA>
 80132c0:	4603      	mov	r3, r0
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d001      	beq.n	80132ca <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80132c6:	2301      	movs	r3, #1
 80132c8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80132ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80132cc:	4618      	mov	r0, r3
 80132ce:	3718      	adds	r7, #24
 80132d0:	46bd      	mov	sp, r7
 80132d2:	bd80      	pop	{r7, pc}
 80132d4:	24001450 	.word	0x24001450

080132d8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80132d8:	b580      	push	{r7, lr}
 80132da:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80132dc:	4805      	ldr	r0, [pc, #20]	; (80132f4 <BSP_SD_GetCardState+0x1c>)
 80132de:	f7fa fe55 	bl	800df8c <HAL_SD_GetCardState>
 80132e2:	4603      	mov	r3, r0
 80132e4:	2b04      	cmp	r3, #4
 80132e6:	bf14      	ite	ne
 80132e8:	2301      	movne	r3, #1
 80132ea:	2300      	moveq	r3, #0
 80132ec:	b2db      	uxtb	r3, r3
}
 80132ee:	4618      	mov	r0, r3
 80132f0:	bd80      	pop	{r7, pc}
 80132f2:	bf00      	nop
 80132f4:	24001450 	.word	0x24001450

080132f8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80132f8:	b580      	push	{r7, lr}
 80132fa:	b082      	sub	sp, #8
 80132fc:	af00      	add	r7, sp, #0
 80132fe:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8013300:	6879      	ldr	r1, [r7, #4]
 8013302:	4803      	ldr	r0, [pc, #12]	; (8013310 <BSP_SD_GetCardInfo+0x18>)
 8013304:	f7fa fd6c 	bl	800dde0 <HAL_SD_GetCardInfo>
}
 8013308:	bf00      	nop
 801330a:	3708      	adds	r7, #8
 801330c:	46bd      	mov	sp, r7
 801330e:	bd80      	pop	{r7, pc}
 8013310:	24001450 	.word	0x24001450

08013314 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013314:	b580      	push	{r7, lr}
 8013316:	b082      	sub	sp, #8
 8013318:	af00      	add	r7, sp, #0
 801331a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 801331c:	f000 f9a0 	bl	8013660 <BSP_SD_WriteCpltCallback>
}
 8013320:	bf00      	nop
 8013322:	3708      	adds	r7, #8
 8013324:	46bd      	mov	sp, r7
 8013326:	bd80      	pop	{r7, pc}

08013328 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013328:	b580      	push	{r7, lr}
 801332a:	b082      	sub	sp, #8
 801332c:	af00      	add	r7, sp, #0
 801332e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8013330:	f000 f9a2 	bl	8013678 <BSP_SD_ReadCpltCallback>
}
 8013334:	bf00      	nop
 8013336:	3708      	adds	r7, #8
 8013338:	46bd      	mov	sp, r7
 801333a:	bd80      	pop	{r7, pc}

0801333c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801333c:	b580      	push	{r7, lr}
 801333e:	b082      	sub	sp, #8
 8013340:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8013342:	2301      	movs	r3, #1
 8013344:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8013346:	f000 f80b 	bl	8013360 <BSP_PlatformIsDetected>
 801334a:	4603      	mov	r3, r0
 801334c:	2b00      	cmp	r3, #0
 801334e:	d101      	bne.n	8013354 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8013350:	2300      	movs	r3, #0
 8013352:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8013354:	79fb      	ldrb	r3, [r7, #7]
 8013356:	b2db      	uxtb	r3, r3
}
 8013358:	4618      	mov	r0, r3
 801335a:	3708      	adds	r7, #8
 801335c:	46bd      	mov	sp, r7
 801335e:	bd80      	pop	{r7, pc}

08013360 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8013360:	b580      	push	{r7, lr}
 8013362:	b082      	sub	sp, #8
 8013364:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8013366:	2301      	movs	r3, #1
 8013368:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801336a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801336e:	4806      	ldr	r0, [pc, #24]	; (8013388 <BSP_PlatformIsDetected+0x28>)
 8013370:	f7f4 fe30 	bl	8007fd4 <HAL_GPIO_ReadPin>
 8013374:	4603      	mov	r3, r0
 8013376:	2b00      	cmp	r3, #0
 8013378:	d001      	beq.n	801337e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 801337a:	2300      	movs	r3, #0
 801337c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 801337e:	79fb      	ldrb	r3, [r7, #7]
}
 8013380:	4618      	mov	r0, r3
 8013382:	3708      	adds	r7, #8
 8013384:	46bd      	mov	sp, r7
 8013386:	bd80      	pop	{r7, pc}
 8013388:	58020000 	.word	0x58020000

0801338c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 801338c:	b580      	push	{r7, lr}
 801338e:	b084      	sub	sp, #16
 8013390:	af00      	add	r7, sp, #0
 8013392:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8013394:	f7f1 f910 	bl	80045b8 <HAL_GetTick>
 8013398:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801339a:	e006      	b.n	80133aa <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801339c:	f7ff ff9c 	bl	80132d8 <BSP_SD_GetCardState>
 80133a0:	4603      	mov	r3, r0
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d101      	bne.n	80133aa <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80133a6:	2300      	movs	r3, #0
 80133a8:	e009      	b.n	80133be <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80133aa:	f7f1 f905 	bl	80045b8 <HAL_GetTick>
 80133ae:	4602      	mov	r2, r0
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	1ad3      	subs	r3, r2, r3
 80133b4:	687a      	ldr	r2, [r7, #4]
 80133b6:	429a      	cmp	r2, r3
 80133b8:	d8f0      	bhi.n	801339c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80133ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80133be:	4618      	mov	r0, r3
 80133c0:	3710      	adds	r7, #16
 80133c2:	46bd      	mov	sp, r7
 80133c4:	bd80      	pop	{r7, pc}
	...

080133c8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80133c8:	b580      	push	{r7, lr}
 80133ca:	b082      	sub	sp, #8
 80133cc:	af00      	add	r7, sp, #0
 80133ce:	4603      	mov	r3, r0
 80133d0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80133d2:	4b0b      	ldr	r3, [pc, #44]	; (8013400 <SD_CheckStatus+0x38>)
 80133d4:	2201      	movs	r2, #1
 80133d6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80133d8:	f7ff ff7e 	bl	80132d8 <BSP_SD_GetCardState>
 80133dc:	4603      	mov	r3, r0
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d107      	bne.n	80133f2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80133e2:	4b07      	ldr	r3, [pc, #28]	; (8013400 <SD_CheckStatus+0x38>)
 80133e4:	781b      	ldrb	r3, [r3, #0]
 80133e6:	b2db      	uxtb	r3, r3
 80133e8:	f023 0301 	bic.w	r3, r3, #1
 80133ec:	b2da      	uxtb	r2, r3
 80133ee:	4b04      	ldr	r3, [pc, #16]	; (8013400 <SD_CheckStatus+0x38>)
 80133f0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80133f2:	4b03      	ldr	r3, [pc, #12]	; (8013400 <SD_CheckStatus+0x38>)
 80133f4:	781b      	ldrb	r3, [r3, #0]
 80133f6:	b2db      	uxtb	r3, r3
}
 80133f8:	4618      	mov	r0, r3
 80133fa:	3708      	adds	r7, #8
 80133fc:	46bd      	mov	sp, r7
 80133fe:	bd80      	pop	{r7, pc}
 8013400:	2400001d 	.word	0x2400001d

08013404 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8013404:	b580      	push	{r7, lr}
 8013406:	b082      	sub	sp, #8
 8013408:	af00      	add	r7, sp, #0
 801340a:	4603      	mov	r3, r0
 801340c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801340e:	f7ff ff09 	bl	8013224 <BSP_SD_Init>
 8013412:	4603      	mov	r3, r0
 8013414:	2b00      	cmp	r3, #0
 8013416:	d107      	bne.n	8013428 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8013418:	79fb      	ldrb	r3, [r7, #7]
 801341a:	4618      	mov	r0, r3
 801341c:	f7ff ffd4 	bl	80133c8 <SD_CheckStatus>
 8013420:	4603      	mov	r3, r0
 8013422:	461a      	mov	r2, r3
 8013424:	4b04      	ldr	r3, [pc, #16]	; (8013438 <SD_initialize+0x34>)
 8013426:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8013428:	4b03      	ldr	r3, [pc, #12]	; (8013438 <SD_initialize+0x34>)
 801342a:	781b      	ldrb	r3, [r3, #0]
 801342c:	b2db      	uxtb	r3, r3
}
 801342e:	4618      	mov	r0, r3
 8013430:	3708      	adds	r7, #8
 8013432:	46bd      	mov	sp, r7
 8013434:	bd80      	pop	{r7, pc}
 8013436:	bf00      	nop
 8013438:	2400001d 	.word	0x2400001d

0801343c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801343c:	b580      	push	{r7, lr}
 801343e:	b082      	sub	sp, #8
 8013440:	af00      	add	r7, sp, #0
 8013442:	4603      	mov	r3, r0
 8013444:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8013446:	79fb      	ldrb	r3, [r7, #7]
 8013448:	4618      	mov	r0, r3
 801344a:	f7ff ffbd 	bl	80133c8 <SD_CheckStatus>
 801344e:	4603      	mov	r3, r0
}
 8013450:	4618      	mov	r0, r3
 8013452:	3708      	adds	r7, #8
 8013454:	46bd      	mov	sp, r7
 8013456:	bd80      	pop	{r7, pc}

08013458 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8013458:	b580      	push	{r7, lr}
 801345a:	b086      	sub	sp, #24
 801345c:	af00      	add	r7, sp, #0
 801345e:	60b9      	str	r1, [r7, #8]
 8013460:	607a      	str	r2, [r7, #4]
 8013462:	603b      	str	r3, [r7, #0]
 8013464:	4603      	mov	r3, r0
 8013466:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013468:	2301      	movs	r3, #1
 801346a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801346c:	f247 5030 	movw	r0, #30000	; 0x7530
 8013470:	f7ff ff8c 	bl	801338c <SD_CheckStatusWithTimeout>
 8013474:	4603      	mov	r3, r0
 8013476:	2b00      	cmp	r3, #0
 8013478:	da01      	bge.n	801347e <SD_read+0x26>
  {
    return res;
 801347a:	7dfb      	ldrb	r3, [r7, #23]
 801347c:	e03b      	b.n	80134f6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801347e:	683a      	ldr	r2, [r7, #0]
 8013480:	6879      	ldr	r1, [r7, #4]
 8013482:	68b8      	ldr	r0, [r7, #8]
 8013484:	f7ff fef4 	bl	8013270 <BSP_SD_ReadBlocks_DMA>
 8013488:	4603      	mov	r3, r0
 801348a:	2b00      	cmp	r3, #0
 801348c:	d132      	bne.n	80134f4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801348e:	4b1c      	ldr	r3, [pc, #112]	; (8013500 <SD_read+0xa8>)
 8013490:	2200      	movs	r2, #0
 8013492:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8013494:	f7f1 f890 	bl	80045b8 <HAL_GetTick>
 8013498:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801349a:	bf00      	nop
 801349c:	4b18      	ldr	r3, [pc, #96]	; (8013500 <SD_read+0xa8>)
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d108      	bne.n	80134b6 <SD_read+0x5e>
 80134a4:	f7f1 f888 	bl	80045b8 <HAL_GetTick>
 80134a8:	4602      	mov	r2, r0
 80134aa:	693b      	ldr	r3, [r7, #16]
 80134ac:	1ad3      	subs	r3, r2, r3
 80134ae:	f247 522f 	movw	r2, #29999	; 0x752f
 80134b2:	4293      	cmp	r3, r2
 80134b4:	d9f2      	bls.n	801349c <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 80134b6:	4b12      	ldr	r3, [pc, #72]	; (8013500 <SD_read+0xa8>)
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d102      	bne.n	80134c4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80134be:	2301      	movs	r3, #1
 80134c0:	75fb      	strb	r3, [r7, #23]
 80134c2:	e017      	b.n	80134f4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80134c4:	4b0e      	ldr	r3, [pc, #56]	; (8013500 <SD_read+0xa8>)
 80134c6:	2200      	movs	r2, #0
 80134c8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80134ca:	f7f1 f875 	bl	80045b8 <HAL_GetTick>
 80134ce:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80134d0:	e007      	b.n	80134e2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80134d2:	f7ff ff01 	bl	80132d8 <BSP_SD_GetCardState>
 80134d6:	4603      	mov	r3, r0
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d102      	bne.n	80134e2 <SD_read+0x8a>
          {
            res = RES_OK;
 80134dc:	2300      	movs	r3, #0
 80134de:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80134e0:	e008      	b.n	80134f4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80134e2:	f7f1 f869 	bl	80045b8 <HAL_GetTick>
 80134e6:	4602      	mov	r2, r0
 80134e8:	693b      	ldr	r3, [r7, #16]
 80134ea:	1ad3      	subs	r3, r2, r3
 80134ec:	f247 522f 	movw	r2, #29999	; 0x752f
 80134f0:	4293      	cmp	r3, r2
 80134f2:	d9ee      	bls.n	80134d2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80134f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80134f6:	4618      	mov	r0, r3
 80134f8:	3718      	adds	r7, #24
 80134fa:	46bd      	mov	sp, r7
 80134fc:	bd80      	pop	{r7, pc}
 80134fe:	bf00      	nop
 8013500:	24000b54 	.word	0x24000b54

08013504 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8013504:	b580      	push	{r7, lr}
 8013506:	b086      	sub	sp, #24
 8013508:	af00      	add	r7, sp, #0
 801350a:	60b9      	str	r1, [r7, #8]
 801350c:	607a      	str	r2, [r7, #4]
 801350e:	603b      	str	r3, [r7, #0]
 8013510:	4603      	mov	r3, r0
 8013512:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013514:	2301      	movs	r3, #1
 8013516:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8013518:	4b24      	ldr	r3, [pc, #144]	; (80135ac <SD_write+0xa8>)
 801351a:	2200      	movs	r2, #0
 801351c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801351e:	f247 5030 	movw	r0, #30000	; 0x7530
 8013522:	f7ff ff33 	bl	801338c <SD_CheckStatusWithTimeout>
 8013526:	4603      	mov	r3, r0
 8013528:	2b00      	cmp	r3, #0
 801352a:	da01      	bge.n	8013530 <SD_write+0x2c>
  {
    return res;
 801352c:	7dfb      	ldrb	r3, [r7, #23]
 801352e:	e038      	b.n	80135a2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8013530:	683a      	ldr	r2, [r7, #0]
 8013532:	6879      	ldr	r1, [r7, #4]
 8013534:	68b8      	ldr	r0, [r7, #8]
 8013536:	f7ff feb5 	bl	80132a4 <BSP_SD_WriteBlocks_DMA>
 801353a:	4603      	mov	r3, r0
 801353c:	2b00      	cmp	r3, #0
 801353e:	d12f      	bne.n	80135a0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8013540:	f7f1 f83a 	bl	80045b8 <HAL_GetTick>
 8013544:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8013546:	bf00      	nop
 8013548:	4b18      	ldr	r3, [pc, #96]	; (80135ac <SD_write+0xa8>)
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	2b00      	cmp	r3, #0
 801354e:	d108      	bne.n	8013562 <SD_write+0x5e>
 8013550:	f7f1 f832 	bl	80045b8 <HAL_GetTick>
 8013554:	4602      	mov	r2, r0
 8013556:	693b      	ldr	r3, [r7, #16]
 8013558:	1ad3      	subs	r3, r2, r3
 801355a:	f247 522f 	movw	r2, #29999	; 0x752f
 801355e:	4293      	cmp	r3, r2
 8013560:	d9f2      	bls.n	8013548 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8013562:	4b12      	ldr	r3, [pc, #72]	; (80135ac <SD_write+0xa8>)
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d102      	bne.n	8013570 <SD_write+0x6c>
      {
        res = RES_ERROR;
 801356a:	2301      	movs	r3, #1
 801356c:	75fb      	strb	r3, [r7, #23]
 801356e:	e017      	b.n	80135a0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8013570:	4b0e      	ldr	r3, [pc, #56]	; (80135ac <SD_write+0xa8>)
 8013572:	2200      	movs	r2, #0
 8013574:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8013576:	f7f1 f81f 	bl	80045b8 <HAL_GetTick>
 801357a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801357c:	e007      	b.n	801358e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801357e:	f7ff feab 	bl	80132d8 <BSP_SD_GetCardState>
 8013582:	4603      	mov	r3, r0
 8013584:	2b00      	cmp	r3, #0
 8013586:	d102      	bne.n	801358e <SD_write+0x8a>
          {
            res = RES_OK;
 8013588:	2300      	movs	r3, #0
 801358a:	75fb      	strb	r3, [r7, #23]
            break;
 801358c:	e008      	b.n	80135a0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801358e:	f7f1 f813 	bl	80045b8 <HAL_GetTick>
 8013592:	4602      	mov	r2, r0
 8013594:	693b      	ldr	r3, [r7, #16]
 8013596:	1ad3      	subs	r3, r2, r3
 8013598:	f247 522f 	movw	r2, #29999	; 0x752f
 801359c:	4293      	cmp	r3, r2
 801359e:	d9ee      	bls.n	801357e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80135a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80135a2:	4618      	mov	r0, r3
 80135a4:	3718      	adds	r7, #24
 80135a6:	46bd      	mov	sp, r7
 80135a8:	bd80      	pop	{r7, pc}
 80135aa:	bf00      	nop
 80135ac:	24000b50 	.word	0x24000b50

080135b0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80135b0:	b580      	push	{r7, lr}
 80135b2:	b08c      	sub	sp, #48	; 0x30
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	4603      	mov	r3, r0
 80135b8:	603a      	str	r2, [r7, #0]
 80135ba:	71fb      	strb	r3, [r7, #7]
 80135bc:	460b      	mov	r3, r1
 80135be:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80135c0:	2301      	movs	r3, #1
 80135c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80135c6:	4b25      	ldr	r3, [pc, #148]	; (801365c <SD_ioctl+0xac>)
 80135c8:	781b      	ldrb	r3, [r3, #0]
 80135ca:	b2db      	uxtb	r3, r3
 80135cc:	f003 0301 	and.w	r3, r3, #1
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d001      	beq.n	80135d8 <SD_ioctl+0x28>
 80135d4:	2303      	movs	r3, #3
 80135d6:	e03c      	b.n	8013652 <SD_ioctl+0xa2>

  switch (cmd)
 80135d8:	79bb      	ldrb	r3, [r7, #6]
 80135da:	2b03      	cmp	r3, #3
 80135dc:	d834      	bhi.n	8013648 <SD_ioctl+0x98>
 80135de:	a201      	add	r2, pc, #4	; (adr r2, 80135e4 <SD_ioctl+0x34>)
 80135e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135e4:	080135f5 	.word	0x080135f5
 80135e8:	080135fd 	.word	0x080135fd
 80135ec:	08013615 	.word	0x08013615
 80135f0:	0801362f 	.word	0x0801362f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80135f4:	2300      	movs	r3, #0
 80135f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80135fa:	e028      	b.n	801364e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80135fc:	f107 0308 	add.w	r3, r7, #8
 8013600:	4618      	mov	r0, r3
 8013602:	f7ff fe79 	bl	80132f8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8013606:	6a3a      	ldr	r2, [r7, #32]
 8013608:	683b      	ldr	r3, [r7, #0]
 801360a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801360c:	2300      	movs	r3, #0
 801360e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013612:	e01c      	b.n	801364e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013614:	f107 0308 	add.w	r3, r7, #8
 8013618:	4618      	mov	r0, r3
 801361a:	f7ff fe6d 	bl	80132f8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013620:	b29a      	uxth	r2, r3
 8013622:	683b      	ldr	r3, [r7, #0]
 8013624:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8013626:	2300      	movs	r3, #0
 8013628:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801362c:	e00f      	b.n	801364e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801362e:	f107 0308 	add.w	r3, r7, #8
 8013632:	4618      	mov	r0, r3
 8013634:	f7ff fe60 	bl	80132f8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8013638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801363a:	0a5a      	lsrs	r2, r3, #9
 801363c:	683b      	ldr	r3, [r7, #0]
 801363e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013640:	2300      	movs	r3, #0
 8013642:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013646:	e002      	b.n	801364e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8013648:	2304      	movs	r3, #4
 801364a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801364e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8013652:	4618      	mov	r0, r3
 8013654:	3730      	adds	r7, #48	; 0x30
 8013656:	46bd      	mov	sp, r7
 8013658:	bd80      	pop	{r7, pc}
 801365a:	bf00      	nop
 801365c:	2400001d 	.word	0x2400001d

08013660 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8013660:	b480      	push	{r7}
 8013662:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8013664:	4b03      	ldr	r3, [pc, #12]	; (8013674 <BSP_SD_WriteCpltCallback+0x14>)
 8013666:	2201      	movs	r2, #1
 8013668:	601a      	str	r2, [r3, #0]
}
 801366a:	bf00      	nop
 801366c:	46bd      	mov	sp, r7
 801366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013672:	4770      	bx	lr
 8013674:	24000b50 	.word	0x24000b50

08013678 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8013678:	b480      	push	{r7}
 801367a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 801367c:	4b03      	ldr	r3, [pc, #12]	; (801368c <BSP_SD_ReadCpltCallback+0x14>)
 801367e:	2201      	movs	r2, #1
 8013680:	601a      	str	r2, [r3, #0]
}
 8013682:	bf00      	nop
 8013684:	46bd      	mov	sp, r7
 8013686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801368a:	4770      	bx	lr
 801368c:	24000b54 	.word	0x24000b54

08013690 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013690:	b580      	push	{r7, lr}
 8013692:	b084      	sub	sp, #16
 8013694:	af00      	add	r7, sp, #0
 8013696:	6078      	str	r0, [r7, #4]
 8013698:	460b      	mov	r3, r1
 801369a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 801369c:	f248 0074 	movw	r0, #32884	; 0x8074
 80136a0:	f005 fed0 	bl	8019444 <malloc>
 80136a4:	4603      	mov	r3, r0
 80136a6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d105      	bne.n	80136ba <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	2200      	movs	r2, #0
 80136b2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80136b6:	2302      	movs	r3, #2
 80136b8:	e034      	b.n	8013724 <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	68fa      	ldr	r2, [r7, #12]
 80136be:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	7c1b      	ldrb	r3, [r3, #16]
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d115      	bne.n	80136f6 <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80136ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80136ce:	2202      	movs	r2, #2
 80136d0:	2101      	movs	r1, #1
 80136d2:	6878      	ldr	r0, [r7, #4]
 80136d4:	f005 fd1d 	bl	8019112 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	2201      	movs	r2, #1
 80136dc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80136e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80136e4:	2202      	movs	r2, #2
 80136e6:	2181      	movs	r1, #129	; 0x81
 80136e8:	6878      	ldr	r0, [r7, #4]
 80136ea:	f005 fd12 	bl	8019112 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	2201      	movs	r2, #1
 80136f2:	871a      	strh	r2, [r3, #56]	; 0x38
 80136f4:	e012      	b.n	801371c <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80136f6:	2340      	movs	r3, #64	; 0x40
 80136f8:	2202      	movs	r2, #2
 80136fa:	2101      	movs	r1, #1
 80136fc:	6878      	ldr	r0, [r7, #4]
 80136fe:	f005 fd08 	bl	8019112 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	2201      	movs	r2, #1
 8013706:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801370a:	2340      	movs	r3, #64	; 0x40
 801370c:	2202      	movs	r2, #2
 801370e:	2181      	movs	r1, #129	; 0x81
 8013710:	6878      	ldr	r0, [r7, #4]
 8013712:	f005 fcfe 	bl	8019112 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	2201      	movs	r2, #1
 801371a:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 801371c:	6878      	ldr	r0, [r7, #4]
 801371e:	f000 f98e 	bl	8013a3e <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8013722:	2300      	movs	r3, #0
}
 8013724:	4618      	mov	r0, r3
 8013726:	3710      	adds	r7, #16
 8013728:	46bd      	mov	sp, r7
 801372a:	bd80      	pop	{r7, pc}

0801372c <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801372c:	b580      	push	{r7, lr}
 801372e:	b082      	sub	sp, #8
 8013730:	af00      	add	r7, sp, #0
 8013732:	6078      	str	r0, [r7, #4]
 8013734:	460b      	mov	r3, r1
 8013736:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8013738:	2101      	movs	r1, #1
 801373a:	6878      	ldr	r0, [r7, #4]
 801373c:	f005 fd0f 	bl	801915e <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	2200      	movs	r2, #0
 8013744:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8013748:	2181      	movs	r1, #129	; 0x81
 801374a:	6878      	ldr	r0, [r7, #4]
 801374c:	f005 fd07 	bl	801915e <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	2200      	movs	r2, #0
 8013754:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8013756:	6878      	ldr	r0, [r7, #4]
 8013758:	f000 f9cf 	bl	8013afa <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013762:	2b00      	cmp	r3, #0
 8013764:	d009      	beq.n	801377a <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801376c:	4618      	mov	r0, r3
 801376e:	f005 fe71 	bl	8019454 <free>
    pdev->pClassData = NULL;
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	2200      	movs	r2, #0
 8013776:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801377a:	2300      	movs	r3, #0
}
 801377c:	4618      	mov	r0, r3
 801377e:	3708      	adds	r7, #8
 8013780:	46bd      	mov	sp, r7
 8013782:	bd80      	pop	{r7, pc}

08013784 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013784:	b580      	push	{r7, lr}
 8013786:	b086      	sub	sp, #24
 8013788:	af00      	add	r7, sp, #0
 801378a:	6078      	str	r0, [r7, #4]
 801378c:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013794:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8013796:	2300      	movs	r3, #0
 8013798:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 801379a:	2300      	movs	r3, #0
 801379c:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801379e:	683b      	ldr	r3, [r7, #0]
 80137a0:	781b      	ldrb	r3, [r3, #0]
 80137a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d04d      	beq.n	8013846 <USBD_MSC_Setup+0xc2>
 80137aa:	2b20      	cmp	r3, #32
 80137ac:	f040 80c6 	bne.w	801393c <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 80137b0:	683b      	ldr	r3, [r7, #0]
 80137b2:	785b      	ldrb	r3, [r3, #1]
 80137b4:	2bfe      	cmp	r3, #254	; 0xfe
 80137b6:	d002      	beq.n	80137be <USBD_MSC_Setup+0x3a>
 80137b8:	2bff      	cmp	r3, #255	; 0xff
 80137ba:	d024      	beq.n	8013806 <USBD_MSC_Setup+0x82>
 80137bc:	e03b      	b.n	8013836 <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80137be:	683b      	ldr	r3, [r7, #0]
 80137c0:	885b      	ldrh	r3, [r3, #2]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d118      	bne.n	80137f8 <USBD_MSC_Setup+0x74>
 80137c6:	683b      	ldr	r3, [r7, #0]
 80137c8:	88db      	ldrh	r3, [r3, #6]
 80137ca:	2b01      	cmp	r3, #1
 80137cc:	d114      	bne.n	80137f8 <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 80137ce:	683b      	ldr	r3, [r7, #0]
 80137d0:	781b      	ldrb	r3, [r3, #0]
 80137d2:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	da0f      	bge.n	80137f8 <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80137de:	699b      	ldr	r3, [r3, #24]
 80137e0:	4798      	blx	r3
 80137e2:	4603      	mov	r3, r0
 80137e4:	461a      	mov	r2, r3
 80137e6:	693b      	ldr	r3, [r7, #16]
 80137e8:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 80137ea:	693b      	ldr	r3, [r7, #16]
 80137ec:	2201      	movs	r2, #1
 80137ee:	4619      	mov	r1, r3
 80137f0:	6878      	ldr	r0, [r7, #4]
 80137f2:	f002 fdaa 	bl	801634a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80137f6:	e025      	b.n	8013844 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 80137f8:	6839      	ldr	r1, [r7, #0]
 80137fa:	6878      	ldr	r0, [r7, #4]
 80137fc:	f002 fd34 	bl	8016268 <USBD_CtlError>
        ret = USBD_FAIL;
 8013800:	2303      	movs	r3, #3
 8013802:	75fb      	strb	r3, [r7, #23]
      break;
 8013804:	e01e      	b.n	8013844 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8013806:	683b      	ldr	r3, [r7, #0]
 8013808:	885b      	ldrh	r3, [r3, #2]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d10c      	bne.n	8013828 <USBD_MSC_Setup+0xa4>
 801380e:	683b      	ldr	r3, [r7, #0]
 8013810:	88db      	ldrh	r3, [r3, #6]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d108      	bne.n	8013828 <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 8013816:	683b      	ldr	r3, [r7, #0]
 8013818:	781b      	ldrb	r3, [r3, #0]
 801381a:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801381c:	2b00      	cmp	r3, #0
 801381e:	db03      	blt.n	8013828 <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 8013820:	6878      	ldr	r0, [r7, #4]
 8013822:	f000 f947 	bl	8013ab4 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8013826:	e00d      	b.n	8013844 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 8013828:	6839      	ldr	r1, [r7, #0]
 801382a:	6878      	ldr	r0, [r7, #4]
 801382c:	f002 fd1c 	bl	8016268 <USBD_CtlError>
        ret = USBD_FAIL;
 8013830:	2303      	movs	r3, #3
 8013832:	75fb      	strb	r3, [r7, #23]
      break;
 8013834:	e006      	b.n	8013844 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 8013836:	6839      	ldr	r1, [r7, #0]
 8013838:	6878      	ldr	r0, [r7, #4]
 801383a:	f002 fd15 	bl	8016268 <USBD_CtlError>
      ret = USBD_FAIL;
 801383e:	2303      	movs	r3, #3
 8013840:	75fb      	strb	r3, [r7, #23]
      break;
 8013842:	bf00      	nop
    }
    break;
 8013844:	e081      	b.n	801394a <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8013846:	683b      	ldr	r3, [r7, #0]
 8013848:	785b      	ldrb	r3, [r3, #1]
 801384a:	2b0b      	cmp	r3, #11
 801384c:	d86d      	bhi.n	801392a <USBD_MSC_Setup+0x1a6>
 801384e:	a201      	add	r2, pc, #4	; (adr r2, 8013854 <USBD_MSC_Setup+0xd0>)
 8013850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013854:	08013885 	.word	0x08013885
 8013858:	080138fb 	.word	0x080138fb
 801385c:	0801392b 	.word	0x0801392b
 8013860:	0801392b 	.word	0x0801392b
 8013864:	0801392b 	.word	0x0801392b
 8013868:	0801392b 	.word	0x0801392b
 801386c:	0801392b 	.word	0x0801392b
 8013870:	0801392b 	.word	0x0801392b
 8013874:	0801392b 	.word	0x0801392b
 8013878:	0801392b 	.word	0x0801392b
 801387c:	080138ad 	.word	0x080138ad
 8013880:	080138d5 	.word	0x080138d5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801388a:	2b03      	cmp	r3, #3
 801388c:	d107      	bne.n	801389e <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801388e:	f107 030e 	add.w	r3, r7, #14
 8013892:	2202      	movs	r2, #2
 8013894:	4619      	mov	r1, r3
 8013896:	6878      	ldr	r0, [r7, #4]
 8013898:	f002 fd57 	bl	801634a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 801389c:	e04d      	b.n	801393a <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 801389e:	6839      	ldr	r1, [r7, #0]
 80138a0:	6878      	ldr	r0, [r7, #4]
 80138a2:	f002 fce1 	bl	8016268 <USBD_CtlError>
        ret = USBD_FAIL;
 80138a6:	2303      	movs	r3, #3
 80138a8:	75fb      	strb	r3, [r7, #23]
      break;
 80138aa:	e046      	b.n	801393a <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80138b2:	2b03      	cmp	r3, #3
 80138b4:	d107      	bne.n	80138c6 <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80138b6:	693b      	ldr	r3, [r7, #16]
 80138b8:	3304      	adds	r3, #4
 80138ba:	2201      	movs	r2, #1
 80138bc:	4619      	mov	r1, r3
 80138be:	6878      	ldr	r0, [r7, #4]
 80138c0:	f002 fd43 	bl	801634a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80138c4:	e039      	b.n	801393a <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 80138c6:	6839      	ldr	r1, [r7, #0]
 80138c8:	6878      	ldr	r0, [r7, #4]
 80138ca:	f002 fccd 	bl	8016268 <USBD_CtlError>
        ret = USBD_FAIL;
 80138ce:	2303      	movs	r3, #3
 80138d0:	75fb      	strb	r3, [r7, #23]
      break;
 80138d2:	e032      	b.n	801393a <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80138da:	2b03      	cmp	r3, #3
 80138dc:	d106      	bne.n	80138ec <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 80138de:	683b      	ldr	r3, [r7, #0]
 80138e0:	885b      	ldrh	r3, [r3, #2]
 80138e2:	b2db      	uxtb	r3, r3
 80138e4:	461a      	mov	r2, r3
 80138e6:	693b      	ldr	r3, [r7, #16]
 80138e8:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80138ea:	e026      	b.n	801393a <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 80138ec:	6839      	ldr	r1, [r7, #0]
 80138ee:	6878      	ldr	r0, [r7, #4]
 80138f0:	f002 fcba 	bl	8016268 <USBD_CtlError>
        ret = USBD_FAIL;
 80138f4:	2303      	movs	r3, #3
 80138f6:	75fb      	strb	r3, [r7, #23]
      break;
 80138f8:	e01f      	b.n	801393a <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013900:	2b03      	cmp	r3, #3
 8013902:	d119      	bne.n	8013938 <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 8013904:	683b      	ldr	r3, [r7, #0]
 8013906:	885b      	ldrh	r3, [r3, #2]
 8013908:	2b00      	cmp	r3, #0
 801390a:	d115      	bne.n	8013938 <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 801390c:	683b      	ldr	r3, [r7, #0]
 801390e:	889b      	ldrh	r3, [r3, #4]
 8013910:	b2db      	uxtb	r3, r3
 8013912:	4619      	mov	r1, r3
 8013914:	6878      	ldr	r0, [r7, #4]
 8013916:	f005 fc41 	bl	801919c <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801391a:	683b      	ldr	r3, [r7, #0]
 801391c:	889b      	ldrh	r3, [r3, #4]
 801391e:	b2db      	uxtb	r3, r3
 8013920:	4619      	mov	r1, r3
 8013922:	6878      	ldr	r0, [r7, #4]
 8013924:	f000 fa90 	bl	8013e48 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 8013928:	e006      	b.n	8013938 <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 801392a:	6839      	ldr	r1, [r7, #0]
 801392c:	6878      	ldr	r0, [r7, #4]
 801392e:	f002 fc9b 	bl	8016268 <USBD_CtlError>
      ret = USBD_FAIL;
 8013932:	2303      	movs	r3, #3
 8013934:	75fb      	strb	r3, [r7, #23]
      break;
 8013936:	e000      	b.n	801393a <USBD_MSC_Setup+0x1b6>
      break;
 8013938:	bf00      	nop
    }
    break;
 801393a:	e006      	b.n	801394a <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 801393c:	6839      	ldr	r1, [r7, #0]
 801393e:	6878      	ldr	r0, [r7, #4]
 8013940:	f002 fc92 	bl	8016268 <USBD_CtlError>
    ret = USBD_FAIL;
 8013944:	2303      	movs	r3, #3
 8013946:	75fb      	strb	r3, [r7, #23]
    break;
 8013948:	bf00      	nop
  }

  return (uint8_t)ret;
 801394a:	7dfb      	ldrb	r3, [r7, #23]
}
 801394c:	4618      	mov	r0, r3
 801394e:	3718      	adds	r7, #24
 8013950:	46bd      	mov	sp, r7
 8013952:	bd80      	pop	{r7, pc}

08013954 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013954:	b580      	push	{r7, lr}
 8013956:	b082      	sub	sp, #8
 8013958:	af00      	add	r7, sp, #0
 801395a:	6078      	str	r0, [r7, #4]
 801395c:	460b      	mov	r3, r1
 801395e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8013960:	78fb      	ldrb	r3, [r7, #3]
 8013962:	4619      	mov	r1, r3
 8013964:	6878      	ldr	r0, [r7, #4]
 8013966:	f000 f8d9 	bl	8013b1c <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 801396a:	2300      	movs	r3, #0
}
 801396c:	4618      	mov	r0, r3
 801396e:	3708      	adds	r7, #8
 8013970:	46bd      	mov	sp, r7
 8013972:	bd80      	pop	{r7, pc}

08013974 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013974:	b580      	push	{r7, lr}
 8013976:	b082      	sub	sp, #8
 8013978:	af00      	add	r7, sp, #0
 801397a:	6078      	str	r0, [r7, #4]
 801397c:	460b      	mov	r3, r1
 801397e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8013980:	78fb      	ldrb	r3, [r7, #3]
 8013982:	4619      	mov	r1, r3
 8013984:	6878      	ldr	r0, [r7, #4]
 8013986:	f000 f8fd 	bl	8013b84 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 801398a:	2300      	movs	r3, #0
}
 801398c:	4618      	mov	r0, r3
 801398e:	3708      	adds	r7, #8
 8013990:	46bd      	mov	sp, r7
 8013992:	bd80      	pop	{r7, pc}

08013994 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8013994:	b480      	push	{r7}
 8013996:	b083      	sub	sp, #12
 8013998:	af00      	add	r7, sp, #0
 801399a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	2220      	movs	r2, #32
 80139a0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 80139a2:	4b03      	ldr	r3, [pc, #12]	; (80139b0 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 80139a4:	4618      	mov	r0, r3
 80139a6:	370c      	adds	r7, #12
 80139a8:	46bd      	mov	sp, r7
 80139aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ae:	4770      	bx	lr
 80139b0:	24000058 	.word	0x24000058

080139b4 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80139b4:	b480      	push	{r7}
 80139b6:	b083      	sub	sp, #12
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	2220      	movs	r2, #32
 80139c0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 80139c2:	4b03      	ldr	r3, [pc, #12]	; (80139d0 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 80139c4:	4618      	mov	r0, r3
 80139c6:	370c      	adds	r7, #12
 80139c8:	46bd      	mov	sp, r7
 80139ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ce:	4770      	bx	lr
 80139d0:	24000078 	.word	0x24000078

080139d4 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80139d4:	b480      	push	{r7}
 80139d6:	b083      	sub	sp, #12
 80139d8:	af00      	add	r7, sp, #0
 80139da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	2220      	movs	r2, #32
 80139e0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 80139e2:	4b03      	ldr	r3, [pc, #12]	; (80139f0 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 80139e4:	4618      	mov	r0, r3
 80139e6:	370c      	adds	r7, #12
 80139e8:	46bd      	mov	sp, r7
 80139ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ee:	4770      	bx	lr
 80139f0:	24000098 	.word	0x24000098

080139f4 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80139f4:	b480      	push	{r7}
 80139f6:	b083      	sub	sp, #12
 80139f8:	af00      	add	r7, sp, #0
 80139fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	220a      	movs	r2, #10
 8013a00:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8013a02:	4b03      	ldr	r3, [pc, #12]	; (8013a10 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013a04:	4618      	mov	r0, r3
 8013a06:	370c      	adds	r7, #12
 8013a08:	46bd      	mov	sp, r7
 8013a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a0e:	4770      	bx	lr
 8013a10:	240000b8 	.word	0x240000b8

08013a14 <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8013a14:	b480      	push	{r7}
 8013a16:	b083      	sub	sp, #12
 8013a18:	af00      	add	r7, sp, #0
 8013a1a:	6078      	str	r0, [r7, #4]
 8013a1c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8013a1e:	683b      	ldr	r3, [r7, #0]
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d101      	bne.n	8013a28 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013a24:	2303      	movs	r3, #3
 8013a26:	e004      	b.n	8013a32 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	683a      	ldr	r2, [r7, #0]
 8013a2c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8013a30:	2300      	movs	r3, #0
}
 8013a32:	4618      	mov	r0, r3
 8013a34:	370c      	adds	r7, #12
 8013a36:	46bd      	mov	sp, r7
 8013a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a3c:	4770      	bx	lr

08013a3e <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8013a3e:	b580      	push	{r7, lr}
 8013a40:	b084      	sub	sp, #16
 8013a42:	af00      	add	r7, sp, #0
 8013a44:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013a4c:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	2200      	movs	r2, #0
 8013a52:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	2200      	movs	r2, #0
 8013a58:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8013a5a:	68fa      	ldr	r2, [r7, #12]
 8013a5c:	f248 0361 	movw	r3, #32865	; 0x8061
 8013a60:	4413      	add	r3, r2
 8013a62:	2200      	movs	r2, #0
 8013a64:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_sense_head = 0U;
 8013a66:	68fa      	ldr	r2, [r7, #12]
 8013a68:	f248 0360 	movw	r3, #32864	; 0x8060
 8013a6c:	4413      	add	r3, r2
 8013a6e:	2200      	movs	r2, #0
 8013a70:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8013a72:	68fa      	ldr	r2, [r7, #12]
 8013a74:	f248 0362 	movw	r3, #32866	; 0x8062
 8013a78:	4413      	add	r3, r2
 8013a7a:	2200      	movs	r2, #0
 8013a7c:	701a      	strb	r2, [r3, #0]

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	2000      	movs	r0, #0
 8013a88:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8013a8a:	2101      	movs	r1, #1
 8013a8c:	6878      	ldr	r0, [r7, #4]
 8013a8e:	f005 fb85 	bl	801919c <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8013a92:	2181      	movs	r1, #129	; 0x81
 8013a94:	6878      	ldr	r0, [r7, #4]
 8013a96:	f005 fb81 	bl	801919c <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	f248 0210 	movw	r2, #32784	; 0x8010
 8013aa0:	441a      	add	r2, r3
 8013aa2:	231f      	movs	r3, #31
 8013aa4:	2101      	movs	r1, #1
 8013aa6:	6878      	ldr	r0, [r7, #4]
 8013aa8:	f005 fc41 	bl	801932e <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8013aac:	bf00      	nop
 8013aae:	3710      	adds	r7, #16
 8013ab0:	46bd      	mov	sp, r7
 8013ab2:	bd80      	pop	{r7, pc}

08013ab4 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8013ab4:	b580      	push	{r7, lr}
 8013ab6:	b084      	sub	sp, #16
 8013ab8:	af00      	add	r7, sp, #0
 8013aba:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013ac2:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	2200      	movs	r2, #0
 8013ac8:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	2201      	movs	r2, #1
 8013ace:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8013ad0:	2181      	movs	r1, #129	; 0x81
 8013ad2:	6878      	ldr	r0, [r7, #4]
 8013ad4:	f005 fba0 	bl	8019218 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 8013ad8:	2101      	movs	r1, #1
 8013ada:	6878      	ldr	r0, [r7, #4]
 8013adc:	f005 fb9c 	bl	8019218 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	f248 0210 	movw	r2, #32784	; 0x8010
 8013ae6:	441a      	add	r2, r3
 8013ae8:	231f      	movs	r3, #31
 8013aea:	2101      	movs	r1, #1
 8013aec:	6878      	ldr	r0, [r7, #4]
 8013aee:	f005 fc1e 	bl	801932e <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8013af2:	bf00      	nop
 8013af4:	3710      	adds	r7, #16
 8013af6:	46bd      	mov	sp, r7
 8013af8:	bd80      	pop	{r7, pc}

08013afa <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8013afa:	b480      	push	{r7}
 8013afc:	b085      	sub	sp, #20
 8013afe:	af00      	add	r7, sp, #0
 8013b00:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013b08:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	2200      	movs	r2, #0
 8013b0e:	721a      	strb	r2, [r3, #8]
}
 8013b10:	bf00      	nop
 8013b12:	3714      	adds	r7, #20
 8013b14:	46bd      	mov	sp, r7
 8013b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b1a:	4770      	bx	lr

08013b1c <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013b1c:	b580      	push	{r7, lr}
 8013b1e:	b084      	sub	sp, #16
 8013b20:	af00      	add	r7, sp, #0
 8013b22:	6078      	str	r0, [r7, #4]
 8013b24:	460b      	mov	r3, r1
 8013b26:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013b2e:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	7a1b      	ldrb	r3, [r3, #8]
 8013b34:	2b02      	cmp	r3, #2
 8013b36:	d004      	beq.n	8013b42 <MSC_BOT_DataIn+0x26>
 8013b38:	2b02      	cmp	r3, #2
 8013b3a:	db1c      	blt.n	8013b76 <MSC_BOT_DataIn+0x5a>
 8013b3c:	2b04      	cmp	r3, #4
 8013b3e:	dc1a      	bgt.n	8013b76 <MSC_BOT_DataIn+0x5a>
 8013b40:	e014      	b.n	8013b6c <MSC_BOT_DataIn+0x50>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013b42:	68fa      	ldr	r2, [r7, #12]
 8013b44:	f248 031d 	movw	r3, #32797	; 0x801d
 8013b48:	4413      	add	r3, r2
 8013b4a:	7819      	ldrb	r1, [r3, #0]
 8013b4c:	68fa      	ldr	r2, [r7, #12]
 8013b4e:	f248 031f 	movw	r3, #32799	; 0x801f
 8013b52:	4413      	add	r3, r2
 8013b54:	461a      	mov	r2, r3
 8013b56:	6878      	ldr	r0, [r7, #4]
 8013b58:	f000 f99e 	bl	8013e98 <SCSI_ProcessCmd>
 8013b5c:	4603      	mov	r3, r0
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	da0b      	bge.n	8013b7a <MSC_BOT_DataIn+0x5e>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013b62:	2101      	movs	r1, #1
 8013b64:	6878      	ldr	r0, [r7, #4]
 8013b66:	f000 f90b 	bl	8013d80 <MSC_BOT_SendCSW>
    }
    break;
 8013b6a:	e006      	b.n	8013b7a <MSC_BOT_DataIn+0x5e>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8013b6c:	2100      	movs	r1, #0
 8013b6e:	6878      	ldr	r0, [r7, #4]
 8013b70:	f000 f906 	bl	8013d80 <MSC_BOT_SendCSW>
    break;
 8013b74:	e002      	b.n	8013b7c <MSC_BOT_DataIn+0x60>

  default:
    break;
 8013b76:	bf00      	nop
 8013b78:	e000      	b.n	8013b7c <MSC_BOT_DataIn+0x60>
    break;
 8013b7a:	bf00      	nop
  }
}
 8013b7c:	bf00      	nop
 8013b7e:	3710      	adds	r7, #16
 8013b80:	46bd      	mov	sp, r7
 8013b82:	bd80      	pop	{r7, pc}

08013b84 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013b84:	b580      	push	{r7, lr}
 8013b86:	b084      	sub	sp, #16
 8013b88:	af00      	add	r7, sp, #0
 8013b8a:	6078      	str	r0, [r7, #4]
 8013b8c:	460b      	mov	r3, r1
 8013b8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013b96:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	7a1b      	ldrb	r3, [r3, #8]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d002      	beq.n	8013ba6 <MSC_BOT_DataOut+0x22>
 8013ba0:	2b01      	cmp	r3, #1
 8013ba2:	d004      	beq.n	8013bae <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8013ba4:	e018      	b.n	8013bd8 <MSC_BOT_DataOut+0x54>
      MSC_BOT_CBW_Decode(pdev);
 8013ba6:	6878      	ldr	r0, [r7, #4]
 8013ba8:	f000 f81a 	bl	8013be0 <MSC_BOT_CBW_Decode>
      break;
 8013bac:	e014      	b.n	8013bd8 <MSC_BOT_DataOut+0x54>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013bae:	68fa      	ldr	r2, [r7, #12]
 8013bb0:	f248 031d 	movw	r3, #32797	; 0x801d
 8013bb4:	4413      	add	r3, r2
 8013bb6:	7819      	ldrb	r1, [r3, #0]
 8013bb8:	68fa      	ldr	r2, [r7, #12]
 8013bba:	f248 031f 	movw	r3, #32799	; 0x801f
 8013bbe:	4413      	add	r3, r2
 8013bc0:	461a      	mov	r2, r3
 8013bc2:	6878      	ldr	r0, [r7, #4]
 8013bc4:	f000 f968 	bl	8013e98 <SCSI_ProcessCmd>
 8013bc8:	4603      	mov	r3, r0
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	da03      	bge.n	8013bd6 <MSC_BOT_DataOut+0x52>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013bce:	2101      	movs	r1, #1
 8013bd0:	6878      	ldr	r0, [r7, #4]
 8013bd2:	f000 f8d5 	bl	8013d80 <MSC_BOT_SendCSW>
      break;
 8013bd6:	bf00      	nop
  }
}
 8013bd8:	bf00      	nop
 8013bda:	3710      	adds	r7, #16
 8013bdc:	46bd      	mov	sp, r7
 8013bde:	bd80      	pop	{r7, pc}

08013be0 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8013be0:	b580      	push	{r7, lr}
 8013be2:	b084      	sub	sp, #16
 8013be4:	af00      	add	r7, sp, #0
 8013be6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013bee:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8013bf0:	68fa      	ldr	r2, [r7, #12]
 8013bf2:	f248 0314 	movw	r3, #32788	; 0x8014
 8013bf6:	4413      	add	r3, r2
 8013bf8:	681a      	ldr	r2, [r3, #0]
 8013bfa:	68f9      	ldr	r1, [r7, #12]
 8013bfc:	f248 0334 	movw	r3, #32820	; 0x8034
 8013c00:	440b      	add	r3, r1
 8013c02:	601a      	str	r2, [r3, #0]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8013c04:	68fa      	ldr	r2, [r7, #12]
 8013c06:	f248 0318 	movw	r3, #32792	; 0x8018
 8013c0a:	4413      	add	r3, r2
 8013c0c:	681a      	ldr	r2, [r3, #0]
 8013c0e:	68f9      	ldr	r1, [r7, #12]
 8013c10:	f248 0338 	movw	r3, #32824	; 0x8038
 8013c14:	440b      	add	r3, r1
 8013c16:	601a      	str	r2, [r3, #0]

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8013c18:	2101      	movs	r1, #1
 8013c1a:	6878      	ldr	r0, [r7, #4]
 8013c1c:	f005 fba8 	bl	8019370 <USBD_LL_GetRxDataSize>
 8013c20:	4603      	mov	r3, r0
 8013c22:	2b1f      	cmp	r3, #31
 8013c24:	d11c      	bne.n	8013c60 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8013c26:	68fa      	ldr	r2, [r7, #12]
 8013c28:	f248 0310 	movw	r3, #32784	; 0x8010
 8013c2c:	4413      	add	r3, r2
 8013c2e:	681b      	ldr	r3, [r3, #0]
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8013c30:	4a38      	ldr	r2, [pc, #224]	; (8013d14 <MSC_BOT_CBW_Decode+0x134>)
 8013c32:	4293      	cmp	r3, r2
 8013c34:	d114      	bne.n	8013c60 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8013c36:	68fa      	ldr	r2, [r7, #12]
 8013c38:	f248 031d 	movw	r3, #32797	; 0x801d
 8013c3c:	4413      	add	r3, r2
 8013c3e:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8013c40:	2b01      	cmp	r3, #1
 8013c42:	d80d      	bhi.n	8013c60 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8013c44:	68fa      	ldr	r2, [r7, #12]
 8013c46:	f248 031e 	movw	r3, #32798	; 0x801e
 8013c4a:	4413      	add	r3, r2
 8013c4c:	781b      	ldrb	r3, [r3, #0]
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d006      	beq.n	8013c60 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bCBLength > 16U))
 8013c52:	68fa      	ldr	r2, [r7, #12]
 8013c54:	f248 031e 	movw	r3, #32798	; 0x801e
 8013c58:	4413      	add	r3, r2
 8013c5a:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8013c5c:	2b10      	cmp	r3, #16
 8013c5e:	d910      	bls.n	8013c82 <MSC_BOT_CBW_Decode+0xa2>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013c60:	68fa      	ldr	r2, [r7, #12]
 8013c62:	f248 031d 	movw	r3, #32797	; 0x801d
 8013c66:	4413      	add	r3, r2
 8013c68:	7819      	ldrb	r1, [r3, #0]
 8013c6a:	2320      	movs	r3, #32
 8013c6c:	2205      	movs	r2, #5
 8013c6e:	6878      	ldr	r0, [r7, #4]
 8013c70:	f000 fd36 	bl	80146e0 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	2202      	movs	r2, #2
 8013c78:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8013c7a:	6878      	ldr	r0, [r7, #4]
 8013c7c:	f000 f8b2 	bl	8013de4 <MSC_BOT_Abort>
 8013c80:	e044      	b.n	8013d0c <MSC_BOT_CBW_Decode+0x12c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013c82:	68fa      	ldr	r2, [r7, #12]
 8013c84:	f248 031d 	movw	r3, #32797	; 0x801d
 8013c88:	4413      	add	r3, r2
 8013c8a:	7819      	ldrb	r1, [r3, #0]
 8013c8c:	68fa      	ldr	r2, [r7, #12]
 8013c8e:	f248 031f 	movw	r3, #32799	; 0x801f
 8013c92:	4413      	add	r3, r2
 8013c94:	461a      	mov	r2, r3
 8013c96:	6878      	ldr	r0, [r7, #4]
 8013c98:	f000 f8fe 	bl	8013e98 <SCSI_ProcessCmd>
 8013c9c:	4603      	mov	r3, r0
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	da0c      	bge.n	8013cbc <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	7a1b      	ldrb	r3, [r3, #8]
 8013ca6:	2b05      	cmp	r3, #5
 8013ca8:	d104      	bne.n	8013cb4 <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013caa:	2101      	movs	r1, #1
 8013cac:	6878      	ldr	r0, [r7, #4]
 8013cae:	f000 f867 	bl	8013d80 <MSC_BOT_SendCSW>
 8013cb2:	e02b      	b.n	8013d0c <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8013cb4:	6878      	ldr	r0, [r7, #4]
 8013cb6:	f000 f895 	bl	8013de4 <MSC_BOT_Abort>
 8013cba:	e027      	b.n	8013d0c <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	7a1b      	ldrb	r3, [r3, #8]
 8013cc0:	2b02      	cmp	r3, #2
 8013cc2:	d022      	beq.n	8013d0a <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8013cc8:	2b01      	cmp	r3, #1
 8013cca:	d01e      	beq.n	8013d0a <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8013cd0:	2b03      	cmp	r3, #3
 8013cd2:	d01a      	beq.n	8013d0a <MSC_BOT_CBW_Decode+0x12a>
    {
      if (hmsc->bot_data_length > 0U)
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	68db      	ldr	r3, [r3, #12]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d009      	beq.n	8013cf0 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	f103 0110 	add.w	r1, r3, #16
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	68db      	ldr	r3, [r3, #12]
 8013ce6:	461a      	mov	r2, r3
 8013ce8:	6878      	ldr	r0, [r7, #4]
 8013cea:	f000 f815 	bl	8013d18 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8013cee:	e00d      	b.n	8013d0c <MSC_BOT_CBW_Decode+0x12c>
      }
      else if (hmsc->bot_data_length == 0U)
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	68db      	ldr	r3, [r3, #12]
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d104      	bne.n	8013d02 <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8013cf8:	2100      	movs	r1, #0
 8013cfa:	6878      	ldr	r0, [r7, #4]
 8013cfc:	f000 f840 	bl	8013d80 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8013d00:	e004      	b.n	8013d0c <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8013d02:	6878      	ldr	r0, [r7, #4]
 8013d04:	f000 f86e 	bl	8013de4 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8013d08:	e000      	b.n	8013d0c <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    else
    {
      return;
 8013d0a:	bf00      	nop
    }
  }
}
 8013d0c:	3710      	adds	r7, #16
 8013d0e:	46bd      	mov	sp, r7
 8013d10:	bd80      	pop	{r7, pc}
 8013d12:	bf00      	nop
 8013d14:	43425355 	.word	0x43425355

08013d18 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8013d18:	b580      	push	{r7, lr}
 8013d1a:	b086      	sub	sp, #24
 8013d1c:	af00      	add	r7, sp, #0
 8013d1e:	60f8      	str	r0, [r7, #12]
 8013d20:	60b9      	str	r1, [r7, #8]
 8013d22:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013d2a:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8013d2c:	697a      	ldr	r2, [r7, #20]
 8013d2e:	f248 0318 	movw	r3, #32792	; 0x8018
 8013d32:	4413      	add	r3, r2
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	687a      	ldr	r2, [r7, #4]
 8013d38:	4293      	cmp	r3, r2
 8013d3a:	bf28      	it	cs
 8013d3c:	4613      	movcs	r3, r2
 8013d3e:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8013d40:	697a      	ldr	r2, [r7, #20]
 8013d42:	f248 0338 	movw	r3, #32824	; 0x8038
 8013d46:	4413      	add	r3, r2
 8013d48:	681a      	ldr	r2, [r3, #0]
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	1ad2      	subs	r2, r2, r3
 8013d4e:	6979      	ldr	r1, [r7, #20]
 8013d50:	f248 0338 	movw	r3, #32824	; 0x8038
 8013d54:	440b      	add	r3, r1
 8013d56:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8013d58:	697a      	ldr	r2, [r7, #20]
 8013d5a:	f248 033c 	movw	r3, #32828	; 0x803c
 8013d5e:	4413      	add	r3, r2
 8013d60:	2200      	movs	r2, #0
 8013d62:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8013d64:	697b      	ldr	r3, [r7, #20]
 8013d66:	2204      	movs	r2, #4
 8013d68:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8013d6a:	693b      	ldr	r3, [r7, #16]
 8013d6c:	68ba      	ldr	r2, [r7, #8]
 8013d6e:	2181      	movs	r1, #129	; 0x81
 8013d70:	68f8      	ldr	r0, [r7, #12]
 8013d72:	f005 fabb 	bl	80192ec <USBD_LL_Transmit>
}
 8013d76:	bf00      	nop
 8013d78:	3718      	adds	r7, #24
 8013d7a:	46bd      	mov	sp, r7
 8013d7c:	bd80      	pop	{r7, pc}
	...

08013d80 <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8013d80:	b580      	push	{r7, lr}
 8013d82:	b084      	sub	sp, #16
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	6078      	str	r0, [r7, #4]
 8013d88:	460b      	mov	r3, r1
 8013d8a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013d92:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8013d94:	68fa      	ldr	r2, [r7, #12]
 8013d96:	f248 0330 	movw	r3, #32816	; 0x8030
 8013d9a:	4413      	add	r3, r2
 8013d9c:	4a10      	ldr	r2, [pc, #64]	; (8013de0 <MSC_BOT_SendCSW+0x60>)
 8013d9e:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = CSW_Status;
 8013da0:	68fa      	ldr	r2, [r7, #12]
 8013da2:	f248 033c 	movw	r3, #32828	; 0x803c
 8013da6:	4413      	add	r3, r2
 8013da8:	78fa      	ldrb	r2, [r7, #3]
 8013daa:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_IDLE;
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	2200      	movs	r2, #0
 8013db0:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	f248 0230 	movw	r2, #32816	; 0x8030
 8013db8:	441a      	add	r2, r3
 8013dba:	230d      	movs	r3, #13
 8013dbc:	2181      	movs	r1, #129	; 0x81
 8013dbe:	6878      	ldr	r0, [r7, #4]
 8013dc0:	f005 fa94 	bl	80192ec <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	f248 0210 	movw	r2, #32784	; 0x8010
 8013dca:	441a      	add	r2, r3
 8013dcc:	231f      	movs	r3, #31
 8013dce:	2101      	movs	r1, #1
 8013dd0:	6878      	ldr	r0, [r7, #4]
 8013dd2:	f005 faac 	bl	801932e <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8013dd6:	bf00      	nop
 8013dd8:	3710      	adds	r7, #16
 8013dda:	46bd      	mov	sp, r7
 8013ddc:	bd80      	pop	{r7, pc}
 8013dde:	bf00      	nop
 8013de0:	53425355 	.word	0x53425355

08013de4 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8013de4:	b580      	push	{r7, lr}
 8013de6:	b084      	sub	sp, #16
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013df2:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8013df4:	68fa      	ldr	r2, [r7, #12]
 8013df6:	f248 031c 	movw	r3, #32796	; 0x801c
 8013dfa:	4413      	add	r3, r2
 8013dfc:	781b      	ldrb	r3, [r3, #0]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d10e      	bne.n	8013e20 <MSC_BOT_Abort+0x3c>
      (hmsc->cbw.dDataLength != 0U) &&
 8013e02:	68fa      	ldr	r2, [r7, #12]
 8013e04:	f248 0318 	movw	r3, #32792	; 0x8018
 8013e08:	4413      	add	r3, r2
 8013e0a:	681b      	ldr	r3, [r3, #0]
  if ((hmsc->cbw.bmFlags == 0U) &&
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d007      	beq.n	8013e20 <MSC_BOT_Abort+0x3c>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d103      	bne.n	8013e20 <MSC_BOT_Abort+0x3c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8013e18:	2101      	movs	r1, #1
 8013e1a:	6878      	ldr	r0, [r7, #4]
 8013e1c:	f005 f9dd 	bl	80191da <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8013e20:	2181      	movs	r1, #129	; 0x81
 8013e22:	6878      	ldr	r0, [r7, #4]
 8013e24:	f005 f9d9 	bl	80191da <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	7a5b      	ldrb	r3, [r3, #9]
 8013e2c:	2b02      	cmp	r3, #2
 8013e2e:	d107      	bne.n	8013e40 <MSC_BOT_Abort+0x5c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8013e30:	2181      	movs	r1, #129	; 0x81
 8013e32:	6878      	ldr	r0, [r7, #4]
 8013e34:	f005 f9d1 	bl	80191da <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8013e38:	2101      	movs	r1, #1
 8013e3a:	6878      	ldr	r0, [r7, #4]
 8013e3c:	f005 f9cd 	bl	80191da <USBD_LL_StallEP>
  }
}
 8013e40:	bf00      	nop
 8013e42:	3710      	adds	r7, #16
 8013e44:	46bd      	mov	sp, r7
 8013e46:	bd80      	pop	{r7, pc}

08013e48 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013e48:	b580      	push	{r7, lr}
 8013e4a:	b084      	sub	sp, #16
 8013e4c:	af00      	add	r7, sp, #0
 8013e4e:	6078      	str	r0, [r7, #4]
 8013e50:	460b      	mov	r3, r1
 8013e52:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013e5a:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	7a5b      	ldrb	r3, [r3, #9]
 8013e60:	2b02      	cmp	r3, #2
 8013e62:	d108      	bne.n	8013e76 <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8013e64:	2181      	movs	r1, #129	; 0x81
 8013e66:	6878      	ldr	r0, [r7, #4]
 8013e68:	f005 f9b7 	bl	80191da <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8013e6c:	2101      	movs	r1, #1
 8013e6e:	6878      	ldr	r0, [r7, #4]
 8013e70:	f005 f9b3 	bl	80191da <USBD_LL_StallEP>
 8013e74:	e00d      	b.n	8013e92 <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8013e76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	da08      	bge.n	8013e90 <MSC_BOT_CplClrFeature+0x48>
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	7a5b      	ldrb	r3, [r3, #9]
 8013e82:	2b01      	cmp	r3, #1
 8013e84:	d004      	beq.n	8013e90 <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013e86:	2101      	movs	r1, #1
 8013e88:	6878      	ldr	r0, [r7, #4]
 8013e8a:	f7ff ff79 	bl	8013d80 <MSC_BOT_SendCSW>
 8013e8e:	e000      	b.n	8013e92 <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 8013e90:	bf00      	nop
  }
}
 8013e92:	3710      	adds	r7, #16
 8013e94:	46bd      	mov	sp, r7
 8013e96:	bd80      	pop	{r7, pc}

08013e98 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8013e98:	b580      	push	{r7, lr}
 8013e9a:	b086      	sub	sp, #24
 8013e9c:	af00      	add	r7, sp, #0
 8013e9e:	60f8      	str	r0, [r7, #12]
 8013ea0:	460b      	mov	r3, r1
 8013ea2:	607a      	str	r2, [r7, #4]
 8013ea4:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013eac:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	781b      	ldrb	r3, [r3, #0]
 8013eb2:	2b25      	cmp	r3, #37	; 0x25
 8013eb4:	d06e      	beq.n	8013f94 <SCSI_ProcessCmd+0xfc>
 8013eb6:	2b25      	cmp	r3, #37	; 0x25
 8013eb8:	dc11      	bgt.n	8013ede <SCSI_ProcessCmd+0x46>
 8013eba:	2b1a      	cmp	r3, #26
 8013ebc:	d04f      	beq.n	8013f5e <SCSI_ProcessCmd+0xc6>
 8013ebe:	2b1a      	cmp	r3, #26
 8013ec0:	dc06      	bgt.n	8013ed0 <SCSI_ProcessCmd+0x38>
 8013ec2:	2b03      	cmp	r3, #3
 8013ec4:	d027      	beq.n	8013f16 <SCSI_ProcessCmd+0x7e>
 8013ec6:	2b12      	cmp	r3, #18
 8013ec8:	d02e      	beq.n	8013f28 <SCSI_ProcessCmd+0x90>
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d01a      	beq.n	8013f04 <SCSI_ProcessCmd+0x6c>
 8013ece:	e0a0      	b.n	8014012 <SCSI_ProcessCmd+0x17a>
 8013ed0:	2b1e      	cmp	r3, #30
 8013ed2:	d03b      	beq.n	8013f4c <SCSI_ProcessCmd+0xb4>
 8013ed4:	2b23      	cmp	r3, #35	; 0x23
 8013ed6:	d054      	beq.n	8013f82 <SCSI_ProcessCmd+0xea>
 8013ed8:	2b1b      	cmp	r3, #27
 8013eda:	d02e      	beq.n	8013f3a <SCSI_ProcessCmd+0xa2>
 8013edc:	e099      	b.n	8014012 <SCSI_ProcessCmd+0x17a>
 8013ede:	2b5a      	cmp	r3, #90	; 0x5a
 8013ee0:	d046      	beq.n	8013f70 <SCSI_ProcessCmd+0xd8>
 8013ee2:	2b5a      	cmp	r3, #90	; 0x5a
 8013ee4:	dc07      	bgt.n	8013ef6 <SCSI_ProcessCmd+0x5e>
 8013ee6:	2b2a      	cmp	r3, #42	; 0x2a
 8013ee8:	d078      	beq.n	8013fdc <SCSI_ProcessCmd+0x144>
 8013eea:	2b2f      	cmp	r3, #47	; 0x2f
 8013eec:	f000 8088 	beq.w	8014000 <SCSI_ProcessCmd+0x168>
 8013ef0:	2b28      	cmp	r3, #40	; 0x28
 8013ef2:	d061      	beq.n	8013fb8 <SCSI_ProcessCmd+0x120>
 8013ef4:	e08d      	b.n	8014012 <SCSI_ProcessCmd+0x17a>
 8013ef6:	2ba8      	cmp	r3, #168	; 0xa8
 8013ef8:	d067      	beq.n	8013fca <SCSI_ProcessCmd+0x132>
 8013efa:	2baa      	cmp	r3, #170	; 0xaa
 8013efc:	d077      	beq.n	8013fee <SCSI_ProcessCmd+0x156>
 8013efe:	2b9e      	cmp	r3, #158	; 0x9e
 8013f00:	d051      	beq.n	8013fa6 <SCSI_ProcessCmd+0x10e>
 8013f02:	e086      	b.n	8014012 <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8013f04:	7afb      	ldrb	r3, [r7, #11]
 8013f06:	687a      	ldr	r2, [r7, #4]
 8013f08:	4619      	mov	r1, r3
 8013f0a:	68f8      	ldr	r0, [r7, #12]
 8013f0c:	f000 f893 	bl	8014036 <SCSI_TestUnitReady>
 8013f10:	4603      	mov	r3, r0
 8013f12:	75fb      	strb	r3, [r7, #23]
    break;
 8013f14:	e089      	b.n	801402a <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 8013f16:	7afb      	ldrb	r3, [r7, #11]
 8013f18:	687a      	ldr	r2, [r7, #4]
 8013f1a:	4619      	mov	r1, r3
 8013f1c:	68f8      	ldr	r0, [r7, #12]
 8013f1e:	f000 fb47 	bl	80145b0 <SCSI_RequestSense>
 8013f22:	4603      	mov	r3, r0
 8013f24:	75fb      	strb	r3, [r7, #23]
    break;
 8013f26:	e080      	b.n	801402a <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 8013f28:	7afb      	ldrb	r3, [r7, #11]
 8013f2a:	687a      	ldr	r2, [r7, #4]
 8013f2c:	4619      	mov	r1, r3
 8013f2e:	68f8      	ldr	r0, [r7, #12]
 8013f30:	f000 f8d2 	bl	80140d8 <SCSI_Inquiry>
 8013f34:	4603      	mov	r3, r0
 8013f36:	75fb      	strb	r3, [r7, #23]
    break;
 8013f38:	e077      	b.n	801402a <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8013f3a:	7afb      	ldrb	r3, [r7, #11]
 8013f3c:	687a      	ldr	r2, [r7, #4]
 8013f3e:	4619      	mov	r1, r3
 8013f40:	68f8      	ldr	r0, [r7, #12]
 8013f42:	f000 fc27 	bl	8014794 <SCSI_StartStopUnit>
 8013f46:	4603      	mov	r3, r0
 8013f48:	75fb      	strb	r3, [r7, #23]
    break;
 8013f4a:	e06e      	b.n	801402a <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8013f4c:	7afb      	ldrb	r3, [r7, #11]
 8013f4e:	687a      	ldr	r2, [r7, #4]
 8013f50:	4619      	mov	r1, r3
 8013f52:	68f8      	ldr	r0, [r7, #12]
 8013f54:	f000 fc71 	bl	801483a <SCSI_AllowPreventRemovable>
 8013f58:	4603      	mov	r3, r0
 8013f5a:	75fb      	strb	r3, [r7, #23]
    break;
 8013f5c:	e065      	b.n	801402a <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 8013f5e:	7afb      	ldrb	r3, [r7, #11]
 8013f60:	687a      	ldr	r2, [r7, #4]
 8013f62:	4619      	mov	r1, r3
 8013f64:	68f8      	ldr	r0, [r7, #12]
 8013f66:	f000 fad7 	bl	8014518 <SCSI_ModeSense6>
 8013f6a:	4603      	mov	r3, r0
 8013f6c:	75fb      	strb	r3, [r7, #23]
    break;
 8013f6e:	e05c      	b.n	801402a <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 8013f70:	7afb      	ldrb	r3, [r7, #11]
 8013f72:	687a      	ldr	r2, [r7, #4]
 8013f74:	4619      	mov	r1, r3
 8013f76:	68f8      	ldr	r0, [r7, #12]
 8013f78:	f000 faf4 	bl	8014564 <SCSI_ModeSense10>
 8013f7c:	4603      	mov	r3, r0
 8013f7e:	75fb      	strb	r3, [r7, #23]
    break;
 8013f80:	e053      	b.n	801402a <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8013f82:	7afb      	ldrb	r3, [r7, #11]
 8013f84:	687a      	ldr	r2, [r7, #4]
 8013f86:	4619      	mov	r1, r3
 8013f88:	68f8      	ldr	r0, [r7, #12]
 8013f8a:	f000 fa56 	bl	801443a <SCSI_ReadFormatCapacity>
 8013f8e:	4603      	mov	r3, r0
 8013f90:	75fb      	strb	r3, [r7, #23]
    break;
 8013f92:	e04a      	b.n	801402a <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8013f94:	7afb      	ldrb	r3, [r7, #11]
 8013f96:	687a      	ldr	r2, [r7, #4]
 8013f98:	4619      	mov	r1, r3
 8013f9a:	68f8      	ldr	r0, [r7, #12]
 8013f9c:	f000 f910 	bl	80141c0 <SCSI_ReadCapacity10>
 8013fa0:	4603      	mov	r3, r0
 8013fa2:	75fb      	strb	r3, [r7, #23]
    break;
 8013fa4:	e041      	b.n	801402a <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8013fa6:	7afb      	ldrb	r3, [r7, #11]
 8013fa8:	687a      	ldr	r2, [r7, #4]
 8013faa:	4619      	mov	r1, r3
 8013fac:	68f8      	ldr	r0, [r7, #12]
 8013fae:	f000 f98b 	bl	80142c8 <SCSI_ReadCapacity16>
 8013fb2:	4603      	mov	r3, r0
 8013fb4:	75fb      	strb	r3, [r7, #23]
    break;
 8013fb6:	e038      	b.n	801402a <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 8013fb8:	7afb      	ldrb	r3, [r7, #11]
 8013fba:	687a      	ldr	r2, [r7, #4]
 8013fbc:	4619      	mov	r1, r3
 8013fbe:	68f8      	ldr	r0, [r7, #12]
 8013fc0:	f000 fc62 	bl	8014888 <SCSI_Read10>
 8013fc4:	4603      	mov	r3, r0
 8013fc6:	75fb      	strb	r3, [r7, #23]
    break;
 8013fc8:	e02f      	b.n	801402a <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 8013fca:	7afb      	ldrb	r3, [r7, #11]
 8013fcc:	687a      	ldr	r2, [r7, #4]
 8013fce:	4619      	mov	r1, r3
 8013fd0:	68f8      	ldr	r0, [r7, #12]
 8013fd2:	f000 fd0b 	bl	80149ec <SCSI_Read12>
 8013fd6:	4603      	mov	r3, r0
 8013fd8:	75fb      	strb	r3, [r7, #23]
    break;
 8013fda:	e026      	b.n	801402a <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 8013fdc:	7afb      	ldrb	r3, [r7, #11]
 8013fde:	687a      	ldr	r2, [r7, #4]
 8013fe0:	4619      	mov	r1, r3
 8013fe2:	68f8      	ldr	r0, [r7, #12]
 8013fe4:	f000 fdbe 	bl	8014b64 <SCSI_Write10>
 8013fe8:	4603      	mov	r3, r0
 8013fea:	75fb      	strb	r3, [r7, #23]
    break;
 8013fec:	e01d      	b.n	801402a <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 8013fee:	7afb      	ldrb	r3, [r7, #11]
 8013ff0:	687a      	ldr	r2, [r7, #4]
 8013ff2:	4619      	mov	r1, r3
 8013ff4:	68f8      	ldr	r0, [r7, #12]
 8013ff6:	f000 fe8d 	bl	8014d14 <SCSI_Write12>
 8013ffa:	4603      	mov	r3, r0
 8013ffc:	75fb      	strb	r3, [r7, #23]
    break;
 8013ffe:	e014      	b.n	801402a <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 8014000:	7afb      	ldrb	r3, [r7, #11]
 8014002:	687a      	ldr	r2, [r7, #4]
 8014004:	4619      	mov	r1, r3
 8014006:	68f8      	ldr	r0, [r7, #12]
 8014008:	f000 ff6c 	bl	8014ee4 <SCSI_Verify10>
 801400c:	4603      	mov	r3, r0
 801400e:	75fb      	strb	r3, [r7, #23]
    break;
 8014010:	e00b      	b.n	801402a <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8014012:	7af9      	ldrb	r1, [r7, #11]
 8014014:	2320      	movs	r3, #32
 8014016:	2205      	movs	r2, #5
 8014018:	68f8      	ldr	r0, [r7, #12]
 801401a:	f000 fb61 	bl	80146e0 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801401e:	693b      	ldr	r3, [r7, #16]
 8014020:	2202      	movs	r2, #2
 8014022:	725a      	strb	r2, [r3, #9]
    ret = -1;
 8014024:	23ff      	movs	r3, #255	; 0xff
 8014026:	75fb      	strb	r3, [r7, #23]
    break;
 8014028:	bf00      	nop
  }

  return ret;
 801402a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801402e:	4618      	mov	r0, r3
 8014030:	3718      	adds	r7, #24
 8014032:	46bd      	mov	sp, r7
 8014034:	bd80      	pop	{r7, pc}

08014036 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014036:	b580      	push	{r7, lr}
 8014038:	b086      	sub	sp, #24
 801403a:	af00      	add	r7, sp, #0
 801403c:	60f8      	str	r0, [r7, #12]
 801403e:	460b      	mov	r3, r1
 8014040:	607a      	str	r2, [r7, #4]
 8014042:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801404a:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 801404c:	697a      	ldr	r2, [r7, #20]
 801404e:	f248 0318 	movw	r3, #32792	; 0x8018
 8014052:	4413      	add	r3, r2
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	2b00      	cmp	r3, #0
 8014058:	d00c      	beq.n	8014074 <SCSI_TestUnitReady+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801405a:	697a      	ldr	r2, [r7, #20]
 801405c:	f248 031d 	movw	r3, #32797	; 0x801d
 8014060:	4413      	add	r3, r2
 8014062:	7819      	ldrb	r1, [r3, #0]
 8014064:	2320      	movs	r3, #32
 8014066:	2205      	movs	r2, #5
 8014068:	68f8      	ldr	r0, [r7, #12]
 801406a:	f000 fb39 	bl	80146e0 <SCSI_SenseCode>

    return -1;
 801406e:	f04f 33ff 	mov.w	r3, #4294967295
 8014072:	e02c      	b.n	80140ce <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8014074:	697a      	ldr	r2, [r7, #20]
 8014076:	f248 0362 	movw	r3, #32866	; 0x8062
 801407a:	4413      	add	r3, r2
 801407c:	781b      	ldrb	r3, [r3, #0]
 801407e:	2b02      	cmp	r3, #2
 8014080:	d10b      	bne.n	801409a <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014082:	7af9      	ldrb	r1, [r7, #11]
 8014084:	233a      	movs	r3, #58	; 0x3a
 8014086:	2202      	movs	r2, #2
 8014088:	68f8      	ldr	r0, [r7, #12]
 801408a:	f000 fb29 	bl	80146e0 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801408e:	697b      	ldr	r3, [r7, #20]
 8014090:	2205      	movs	r2, #5
 8014092:	721a      	strb	r2, [r3, #8]
    return -1;
 8014094:	f04f 33ff 	mov.w	r3, #4294967295
 8014098:	e019      	b.n	80140ce <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80140a0:	689b      	ldr	r3, [r3, #8]
 80140a2:	7afa      	ldrb	r2, [r7, #11]
 80140a4:	4610      	mov	r0, r2
 80140a6:	4798      	blx	r3
 80140a8:	4603      	mov	r3, r0
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d00b      	beq.n	80140c6 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80140ae:	7af9      	ldrb	r1, [r7, #11]
 80140b0:	233a      	movs	r3, #58	; 0x3a
 80140b2:	2202      	movs	r2, #2
 80140b4:	68f8      	ldr	r0, [r7, #12]
 80140b6:	f000 fb13 	bl	80146e0 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80140ba:	697b      	ldr	r3, [r7, #20]
 80140bc:	2205      	movs	r2, #5
 80140be:	721a      	strb	r2, [r3, #8]

    return -1;
 80140c0:	f04f 33ff 	mov.w	r3, #4294967295
 80140c4:	e003      	b.n	80140ce <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 80140c6:	697b      	ldr	r3, [r7, #20]
 80140c8:	2200      	movs	r2, #0
 80140ca:	60da      	str	r2, [r3, #12]

  return 0;
 80140cc:	2300      	movs	r3, #0
}
 80140ce:	4618      	mov	r0, r3
 80140d0:	3718      	adds	r7, #24
 80140d2:	46bd      	mov	sp, r7
 80140d4:	bd80      	pop	{r7, pc}
	...

080140d8 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80140d8:	b580      	push	{r7, lr}
 80140da:	b088      	sub	sp, #32
 80140dc:	af00      	add	r7, sp, #0
 80140de:	60f8      	str	r0, [r7, #12]
 80140e0:	460b      	mov	r3, r1
 80140e2:	607a      	str	r2, [r7, #4]
 80140e4:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80140ec:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 80140ee:	69ba      	ldr	r2, [r7, #24]
 80140f0:	f248 0318 	movw	r3, #32792	; 0x8018
 80140f4:	4413      	add	r3, r2
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d10c      	bne.n	8014116 <SCSI_Inquiry+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80140fc:	69ba      	ldr	r2, [r7, #24]
 80140fe:	f248 031d 	movw	r3, #32797	; 0x801d
 8014102:	4413      	add	r3, r2
 8014104:	7819      	ldrb	r1, [r3, #0]
 8014106:	2320      	movs	r3, #32
 8014108:	2205      	movs	r2, #5
 801410a:	68f8      	ldr	r0, [r7, #12]
 801410c:	f000 fae8 	bl	80146e0 <SCSI_SenseCode>
    return -1;
 8014110:	f04f 33ff 	mov.w	r3, #4294967295
 8014114:	e04c      	b.n	80141b0 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	3301      	adds	r3, #1
 801411a:	781b      	ldrb	r3, [r3, #0]
 801411c:	f003 0301 	and.w	r3, r3, #1
 8014120:	2b00      	cmp	r3, #0
 8014122:	d022      	beq.n	801416a <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	3302      	adds	r3, #2
 8014128:	781b      	ldrb	r3, [r3, #0]
 801412a:	2b00      	cmp	r3, #0
 801412c:	d105      	bne.n	801413a <SCSI_Inquiry+0x62>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 801412e:	2206      	movs	r2, #6
 8014130:	4921      	ldr	r1, [pc, #132]	; (80141b8 <SCSI_Inquiry+0xe0>)
 8014132:	69b8      	ldr	r0, [r7, #24]
 8014134:	f001 f862 	bl	80151fc <SCSI_UpdateBotData>
 8014138:	e039      	b.n	80141ae <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	3302      	adds	r3, #2
 801413e:	781b      	ldrb	r3, [r3, #0]
 8014140:	2b80      	cmp	r3, #128	; 0x80
 8014142:	d105      	bne.n	8014150 <SCSI_Inquiry+0x78>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8014144:	2208      	movs	r2, #8
 8014146:	491d      	ldr	r1, [pc, #116]	; (80141bc <SCSI_Inquiry+0xe4>)
 8014148:	69b8      	ldr	r0, [r7, #24]
 801414a:	f001 f857 	bl	80151fc <SCSI_UpdateBotData>
 801414e:	e02e      	b.n	80141ae <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8014150:	69ba      	ldr	r2, [r7, #24]
 8014152:	f248 031d 	movw	r3, #32797	; 0x801d
 8014156:	4413      	add	r3, r2
 8014158:	7819      	ldrb	r1, [r3, #0]
 801415a:	2324      	movs	r3, #36	; 0x24
 801415c:	2205      	movs	r2, #5
 801415e:	68f8      	ldr	r0, [r7, #12]
 8014160:	f000 fabe 	bl	80146e0 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8014164:	f04f 33ff 	mov.w	r3, #4294967295
 8014168:	e022      	b.n	80141b0 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014170:	69d9      	ldr	r1, [r3, #28]
 8014172:	7afa      	ldrb	r2, [r7, #11]
 8014174:	4613      	mov	r3, r2
 8014176:	00db      	lsls	r3, r3, #3
 8014178:	4413      	add	r3, r2
 801417a:	009b      	lsls	r3, r3, #2
 801417c:	440b      	add	r3, r1
 801417e:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8014180:	697b      	ldr	r3, [r7, #20]
 8014182:	3304      	adds	r3, #4
 8014184:	781b      	ldrb	r3, [r3, #0]
 8014186:	b29b      	uxth	r3, r3
 8014188:	3305      	adds	r3, #5
 801418a:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	3304      	adds	r3, #4
 8014190:	781b      	ldrb	r3, [r3, #0]
 8014192:	b29b      	uxth	r3, r3
 8014194:	8bfa      	ldrh	r2, [r7, #30]
 8014196:	429a      	cmp	r2, r3
 8014198:	d303      	bcc.n	80141a2 <SCSI_Inquiry+0xca>
    {
      len = params[4];
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	3304      	adds	r3, #4
 801419e:	781b      	ldrb	r3, [r3, #0]
 80141a0:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 80141a2:	8bfb      	ldrh	r3, [r7, #30]
 80141a4:	461a      	mov	r2, r3
 80141a6:	6979      	ldr	r1, [r7, #20]
 80141a8:	69b8      	ldr	r0, [r7, #24]
 80141aa:	f001 f827 	bl	80151fc <SCSI_UpdateBotData>
  }

  return 0;
 80141ae:	2300      	movs	r3, #0
}
 80141b0:	4618      	mov	r0, r3
 80141b2:	3720      	adds	r7, #32
 80141b4:	46bd      	mov	sp, r7
 80141b6:	bd80      	pop	{r7, pc}
 80141b8:	240000c4 	.word	0x240000c4
 80141bc:	240000cc 	.word	0x240000cc

080141c0 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80141c0:	b590      	push	{r4, r7, lr}
 80141c2:	b087      	sub	sp, #28
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	60f8      	str	r0, [r7, #12]
 80141c8:	460b      	mov	r3, r1
 80141ca:	607a      	str	r2, [r7, #4]
 80141cc:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80141d4:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80141d6:	68fb      	ldr	r3, [r7, #12]
 80141d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80141dc:	685c      	ldr	r4, [r3, #4]
 80141de:	697a      	ldr	r2, [r7, #20]
 80141e0:	f248 0368 	movw	r3, #32872	; 0x8068
 80141e4:	4413      	add	r3, r2
 80141e6:	6979      	ldr	r1, [r7, #20]
 80141e8:	f248 0264 	movw	r2, #32868	; 0x8064
 80141ec:	440a      	add	r2, r1
 80141ee:	7af8      	ldrb	r0, [r7, #11]
 80141f0:	4619      	mov	r1, r3
 80141f2:	47a0      	blx	r4
 80141f4:	4603      	mov	r3, r0
 80141f6:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80141f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d106      	bne.n	801420e <SCSI_ReadCapacity10+0x4e>
 8014200:	697a      	ldr	r2, [r7, #20]
 8014202:	f248 0362 	movw	r3, #32866	; 0x8062
 8014206:	4413      	add	r3, r2
 8014208:	781b      	ldrb	r3, [r3, #0]
 801420a:	2b02      	cmp	r3, #2
 801420c:	d108      	bne.n	8014220 <SCSI_ReadCapacity10+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801420e:	7af9      	ldrb	r1, [r7, #11]
 8014210:	233a      	movs	r3, #58	; 0x3a
 8014212:	2202      	movs	r2, #2
 8014214:	68f8      	ldr	r0, [r7, #12]
 8014216:	f000 fa63 	bl	80146e0 <SCSI_SenseCode>
    return -1;
 801421a:	f04f 33ff 	mov.w	r3, #4294967295
 801421e:	e04f      	b.n	80142c0 <SCSI_ReadCapacity10+0x100>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8014220:	697a      	ldr	r2, [r7, #20]
 8014222:	f248 0368 	movw	r3, #32872	; 0x8068
 8014226:	4413      	add	r3, r2
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	3b01      	subs	r3, #1
 801422c:	0e1b      	lsrs	r3, r3, #24
 801422e:	b2da      	uxtb	r2, r3
 8014230:	697b      	ldr	r3, [r7, #20]
 8014232:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8014234:	697a      	ldr	r2, [r7, #20]
 8014236:	f248 0368 	movw	r3, #32872	; 0x8068
 801423a:	4413      	add	r3, r2
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	3b01      	subs	r3, #1
 8014240:	0c1b      	lsrs	r3, r3, #16
 8014242:	b2da      	uxtb	r2, r3
 8014244:	697b      	ldr	r3, [r7, #20]
 8014246:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8014248:	697a      	ldr	r2, [r7, #20]
 801424a:	f248 0368 	movw	r3, #32872	; 0x8068
 801424e:	4413      	add	r3, r2
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	3b01      	subs	r3, #1
 8014254:	0a1b      	lsrs	r3, r3, #8
 8014256:	b2da      	uxtb	r2, r3
 8014258:	697b      	ldr	r3, [r7, #20]
 801425a:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 801425c:	697a      	ldr	r2, [r7, #20]
 801425e:	f248 0368 	movw	r3, #32872	; 0x8068
 8014262:	4413      	add	r3, r2
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	b2db      	uxtb	r3, r3
 8014268:	3b01      	subs	r3, #1
 801426a:	b2da      	uxtb	r2, r3
 801426c:	697b      	ldr	r3, [r7, #20]
 801426e:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8014270:	697a      	ldr	r2, [r7, #20]
 8014272:	f248 0364 	movw	r3, #32868	; 0x8064
 8014276:	4413      	add	r3, r2
 8014278:	881b      	ldrh	r3, [r3, #0]
 801427a:	161b      	asrs	r3, r3, #24
 801427c:	b2da      	uxtb	r2, r3
 801427e:	697b      	ldr	r3, [r7, #20]
 8014280:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8014282:	697a      	ldr	r2, [r7, #20]
 8014284:	f248 0364 	movw	r3, #32868	; 0x8064
 8014288:	4413      	add	r3, r2
 801428a:	881b      	ldrh	r3, [r3, #0]
 801428c:	141b      	asrs	r3, r3, #16
 801428e:	b2da      	uxtb	r2, r3
 8014290:	697b      	ldr	r3, [r7, #20]
 8014292:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8014294:	697a      	ldr	r2, [r7, #20]
 8014296:	f248 0364 	movw	r3, #32868	; 0x8064
 801429a:	4413      	add	r3, r2
 801429c:	881b      	ldrh	r3, [r3, #0]
 801429e:	0a1b      	lsrs	r3, r3, #8
 80142a0:	b29b      	uxth	r3, r3
 80142a2:	b2da      	uxtb	r2, r3
 80142a4:	697b      	ldr	r3, [r7, #20]
 80142a6:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 80142a8:	697a      	ldr	r2, [r7, #20]
 80142aa:	f248 0364 	movw	r3, #32868	; 0x8064
 80142ae:	4413      	add	r3, r2
 80142b0:	881b      	ldrh	r3, [r3, #0]
 80142b2:	b2da      	uxtb	r2, r3
 80142b4:	697b      	ldr	r3, [r7, #20]
 80142b6:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 80142b8:	697b      	ldr	r3, [r7, #20]
 80142ba:	2208      	movs	r2, #8
 80142bc:	60da      	str	r2, [r3, #12]

  return 0;
 80142be:	2300      	movs	r3, #0

}
 80142c0:	4618      	mov	r0, r3
 80142c2:	371c      	adds	r7, #28
 80142c4:	46bd      	mov	sp, r7
 80142c6:	bd90      	pop	{r4, r7, pc}

080142c8 <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80142c8:	b590      	push	{r4, r7, lr}
 80142ca:	b089      	sub	sp, #36	; 0x24
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	60f8      	str	r0, [r7, #12]
 80142d0:	460b      	mov	r3, r1
 80142d2:	607a      	str	r2, [r7, #4]
 80142d4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80142dc:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80142de:	68fb      	ldr	r3, [r7, #12]
 80142e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80142e4:	685c      	ldr	r4, [r3, #4]
 80142e6:	69ba      	ldr	r2, [r7, #24]
 80142e8:	f248 0368 	movw	r3, #32872	; 0x8068
 80142ec:	4413      	add	r3, r2
 80142ee:	69b9      	ldr	r1, [r7, #24]
 80142f0:	f248 0264 	movw	r2, #32868	; 0x8064
 80142f4:	440a      	add	r2, r1
 80142f6:	7af8      	ldrb	r0, [r7, #11]
 80142f8:	4619      	mov	r1, r3
 80142fa:	47a0      	blx	r4
 80142fc:	4603      	mov	r3, r0
 80142fe:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8014300:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d106      	bne.n	8014316 <SCSI_ReadCapacity16+0x4e>
 8014308:	69ba      	ldr	r2, [r7, #24]
 801430a:	f248 0362 	movw	r3, #32866	; 0x8062
 801430e:	4413      	add	r3, r2
 8014310:	781b      	ldrb	r3, [r3, #0]
 8014312:	2b02      	cmp	r3, #2
 8014314:	d108      	bne.n	8014328 <SCSI_ReadCapacity16+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014316:	7af9      	ldrb	r1, [r7, #11]
 8014318:	233a      	movs	r3, #58	; 0x3a
 801431a:	2202      	movs	r2, #2
 801431c:	68f8      	ldr	r0, [r7, #12]
 801431e:	f000 f9df 	bl	80146e0 <SCSI_SenseCode>
    return -1;
 8014322:	f04f 33ff 	mov.w	r3, #4294967295
 8014326:	e084      	b.n	8014432 <SCSI_ReadCapacity16+0x16a>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	330a      	adds	r3, #10
 801432c:	781b      	ldrb	r3, [r3, #0]
 801432e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	330b      	adds	r3, #11
 8014334:	781b      	ldrb	r3, [r3, #0]
 8014336:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014338:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	330c      	adds	r3, #12
 801433e:	781b      	ldrb	r3, [r3, #0]
 8014340:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8014342:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8014344:	687a      	ldr	r2, [r7, #4]
 8014346:	320d      	adds	r2, #13
 8014348:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801434a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801434c:	69bb      	ldr	r3, [r7, #24]
 801434e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8014350:	2300      	movs	r3, #0
 8014352:	77fb      	strb	r3, [r7, #31]
 8014354:	e007      	b.n	8014366 <SCSI_ReadCapacity16+0x9e>
  {
    hmsc->bot_data[idx] = 0U;
 8014356:	7ffb      	ldrb	r3, [r7, #31]
 8014358:	69ba      	ldr	r2, [r7, #24]
 801435a:	4413      	add	r3, r2
 801435c:	2200      	movs	r2, #0
 801435e:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8014360:	7ffb      	ldrb	r3, [r7, #31]
 8014362:	3301      	adds	r3, #1
 8014364:	77fb      	strb	r3, [r7, #31]
 8014366:	7ffa      	ldrb	r2, [r7, #31]
 8014368:	69bb      	ldr	r3, [r7, #24]
 801436a:	68db      	ldr	r3, [r3, #12]
 801436c:	429a      	cmp	r2, r3
 801436e:	d3f2      	bcc.n	8014356 <SCSI_ReadCapacity16+0x8e>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8014370:	69ba      	ldr	r2, [r7, #24]
 8014372:	f248 0368 	movw	r3, #32872	; 0x8068
 8014376:	4413      	add	r3, r2
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	3b01      	subs	r3, #1
 801437c:	0e1b      	lsrs	r3, r3, #24
 801437e:	b2da      	uxtb	r2, r3
 8014380:	69bb      	ldr	r3, [r7, #24]
 8014382:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8014384:	69ba      	ldr	r2, [r7, #24]
 8014386:	f248 0368 	movw	r3, #32872	; 0x8068
 801438a:	4413      	add	r3, r2
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	3b01      	subs	r3, #1
 8014390:	0c1b      	lsrs	r3, r3, #16
 8014392:	b2da      	uxtb	r2, r3
 8014394:	69bb      	ldr	r3, [r7, #24]
 8014396:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8014398:	69ba      	ldr	r2, [r7, #24]
 801439a:	f248 0368 	movw	r3, #32872	; 0x8068
 801439e:	4413      	add	r3, r2
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	3b01      	subs	r3, #1
 80143a4:	0a1b      	lsrs	r3, r3, #8
 80143a6:	b2da      	uxtb	r2, r3
 80143a8:	69bb      	ldr	r3, [r7, #24]
 80143aa:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80143ac:	69ba      	ldr	r2, [r7, #24]
 80143ae:	f248 0368 	movw	r3, #32872	; 0x8068
 80143b2:	4413      	add	r3, r2
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	b2db      	uxtb	r3, r3
 80143b8:	3b01      	subs	r3, #1
 80143ba:	b2da      	uxtb	r2, r3
 80143bc:	69bb      	ldr	r3, [r7, #24]
 80143be:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80143c0:	69ba      	ldr	r2, [r7, #24]
 80143c2:	f248 0364 	movw	r3, #32868	; 0x8064
 80143c6:	4413      	add	r3, r2
 80143c8:	881b      	ldrh	r3, [r3, #0]
 80143ca:	161b      	asrs	r3, r3, #24
 80143cc:	b2da      	uxtb	r2, r3
 80143ce:	69bb      	ldr	r3, [r7, #24]
 80143d0:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80143d2:	69ba      	ldr	r2, [r7, #24]
 80143d4:	f248 0364 	movw	r3, #32868	; 0x8064
 80143d8:	4413      	add	r3, r2
 80143da:	881b      	ldrh	r3, [r3, #0]
 80143dc:	141b      	asrs	r3, r3, #16
 80143de:	b2da      	uxtb	r2, r3
 80143e0:	69bb      	ldr	r3, [r7, #24]
 80143e2:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80143e4:	69ba      	ldr	r2, [r7, #24]
 80143e6:	f248 0364 	movw	r3, #32868	; 0x8064
 80143ea:	4413      	add	r3, r2
 80143ec:	881b      	ldrh	r3, [r3, #0]
 80143ee:	0a1b      	lsrs	r3, r3, #8
 80143f0:	b29b      	uxth	r3, r3
 80143f2:	b2da      	uxtb	r2, r3
 80143f4:	69bb      	ldr	r3, [r7, #24]
 80143f6:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 80143f8:	69ba      	ldr	r2, [r7, #24]
 80143fa:	f248 0364 	movw	r3, #32868	; 0x8064
 80143fe:	4413      	add	r3, r2
 8014400:	881b      	ldrh	r3, [r3, #0]
 8014402:	b2da      	uxtb	r2, r3
 8014404:	69bb      	ldr	r3, [r7, #24]
 8014406:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	330a      	adds	r3, #10
 801440c:	781b      	ldrb	r3, [r3, #0]
 801440e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	330b      	adds	r3, #11
 8014414:	781b      	ldrb	r3, [r3, #0]
 8014416:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014418:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	330c      	adds	r3, #12
 801441e:	781b      	ldrb	r3, [r3, #0]
 8014420:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8014422:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8014424:	687a      	ldr	r2, [r7, #4]
 8014426:	320d      	adds	r2, #13
 8014428:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801442a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801442c:	69bb      	ldr	r3, [r7, #24]
 801442e:	60da      	str	r2, [r3, #12]

  return 0;
 8014430:	2300      	movs	r3, #0
}
 8014432:	4618      	mov	r0, r3
 8014434:	3724      	adds	r7, #36	; 0x24
 8014436:	46bd      	mov	sp, r7
 8014438:	bd90      	pop	{r4, r7, pc}

0801443a <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801443a:	b580      	push	{r7, lr}
 801443c:	b088      	sub	sp, #32
 801443e:	af00      	add	r7, sp, #0
 8014440:	60f8      	str	r0, [r7, #12]
 8014442:	460b      	mov	r3, r1
 8014444:	607a      	str	r2, [r7, #4]
 8014446:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014448:	68fb      	ldr	r3, [r7, #12]
 801444a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801444e:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 8014450:	68fb      	ldr	r3, [r7, #12]
 8014452:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014456:	685b      	ldr	r3, [r3, #4]
 8014458:	f107 0214 	add.w	r2, r7, #20
 801445c:	f107 0110 	add.w	r1, r7, #16
 8014460:	7af8      	ldrb	r0, [r7, #11]
 8014462:	4798      	blx	r3
 8014464:	4603      	mov	r3, r0
 8014466:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8014468:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801446c:	2b00      	cmp	r3, #0
 801446e:	d106      	bne.n	801447e <SCSI_ReadFormatCapacity+0x44>
 8014470:	69ba      	ldr	r2, [r7, #24]
 8014472:	f248 0362 	movw	r3, #32866	; 0x8062
 8014476:	4413      	add	r3, r2
 8014478:	781b      	ldrb	r3, [r3, #0]
 801447a:	2b02      	cmp	r3, #2
 801447c:	d108      	bne.n	8014490 <SCSI_ReadFormatCapacity+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801447e:	7af9      	ldrb	r1, [r7, #11]
 8014480:	233a      	movs	r3, #58	; 0x3a
 8014482:	2202      	movs	r2, #2
 8014484:	68f8      	ldr	r0, [r7, #12]
 8014486:	f000 f92b 	bl	80146e0 <SCSI_SenseCode>
    return -1;
 801448a:	f04f 33ff 	mov.w	r3, #4294967295
 801448e:	e03e      	b.n	801450e <SCSI_ReadFormatCapacity+0xd4>
  }

  for (i = 0U; i < 12U ; i++)
 8014490:	2300      	movs	r3, #0
 8014492:	83fb      	strh	r3, [r7, #30]
 8014494:	e007      	b.n	80144a6 <SCSI_ReadFormatCapacity+0x6c>
  {
    hmsc->bot_data[i] = 0U;
 8014496:	8bfb      	ldrh	r3, [r7, #30]
 8014498:	69ba      	ldr	r2, [r7, #24]
 801449a:	4413      	add	r3, r2
 801449c:	2200      	movs	r2, #0
 801449e:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 80144a0:	8bfb      	ldrh	r3, [r7, #30]
 80144a2:	3301      	adds	r3, #1
 80144a4:	83fb      	strh	r3, [r7, #30]
 80144a6:	8bfb      	ldrh	r3, [r7, #30]
 80144a8:	2b0b      	cmp	r3, #11
 80144aa:	d9f4      	bls.n	8014496 <SCSI_ReadFormatCapacity+0x5c>
  }

  hmsc->bot_data[3] = 0x08U;
 80144ac:	69bb      	ldr	r3, [r7, #24]
 80144ae:	2208      	movs	r2, #8
 80144b0:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80144b2:	693b      	ldr	r3, [r7, #16]
 80144b4:	3b01      	subs	r3, #1
 80144b6:	0e1b      	lsrs	r3, r3, #24
 80144b8:	b2da      	uxtb	r2, r3
 80144ba:	69bb      	ldr	r3, [r7, #24]
 80144bc:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80144be:	693b      	ldr	r3, [r7, #16]
 80144c0:	3b01      	subs	r3, #1
 80144c2:	0c1b      	lsrs	r3, r3, #16
 80144c4:	b2da      	uxtb	r2, r3
 80144c6:	69bb      	ldr	r3, [r7, #24]
 80144c8:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80144ca:	693b      	ldr	r3, [r7, #16]
 80144cc:	3b01      	subs	r3, #1
 80144ce:	0a1b      	lsrs	r3, r3, #8
 80144d0:	b2da      	uxtb	r2, r3
 80144d2:	69bb      	ldr	r3, [r7, #24]
 80144d4:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80144d6:	693b      	ldr	r3, [r7, #16]
 80144d8:	b2db      	uxtb	r3, r3
 80144da:	3b01      	subs	r3, #1
 80144dc:	b2da      	uxtb	r2, r3
 80144de:	69bb      	ldr	r3, [r7, #24]
 80144e0:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 80144e2:	69bb      	ldr	r3, [r7, #24]
 80144e4:	2202      	movs	r2, #2
 80144e6:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80144e8:	8abb      	ldrh	r3, [r7, #20]
 80144ea:	141b      	asrs	r3, r3, #16
 80144ec:	b2da      	uxtb	r2, r3
 80144ee:	69bb      	ldr	r3, [r7, #24]
 80144f0:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80144f2:	8abb      	ldrh	r3, [r7, #20]
 80144f4:	0a1b      	lsrs	r3, r3, #8
 80144f6:	b29b      	uxth	r3, r3
 80144f8:	b2da      	uxtb	r2, r3
 80144fa:	69bb      	ldr	r3, [r7, #24]
 80144fc:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 80144fe:	8abb      	ldrh	r3, [r7, #20]
 8014500:	b2da      	uxtb	r2, r3
 8014502:	69bb      	ldr	r3, [r7, #24]
 8014504:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8014506:	69bb      	ldr	r3, [r7, #24]
 8014508:	220c      	movs	r2, #12
 801450a:	60da      	str	r2, [r3, #12]

  return 0;
 801450c:	2300      	movs	r3, #0
}
 801450e:	4618      	mov	r0, r3
 8014510:	3720      	adds	r7, #32
 8014512:	46bd      	mov	sp, r7
 8014514:	bd80      	pop	{r7, pc}
	...

08014518 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014518:	b580      	push	{r7, lr}
 801451a:	b086      	sub	sp, #24
 801451c:	af00      	add	r7, sp, #0
 801451e:	60f8      	str	r0, [r7, #12]
 8014520:	460b      	mov	r3, r1
 8014522:	607a      	str	r2, [r7, #4]
 8014524:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014526:	68fb      	ldr	r3, [r7, #12]
 8014528:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801452c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 801452e:	2317      	movs	r3, #23
 8014530:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	3304      	adds	r3, #4
 8014536:	781b      	ldrb	r3, [r3, #0]
 8014538:	b29b      	uxth	r3, r3
 801453a:	8afa      	ldrh	r2, [r7, #22]
 801453c:	429a      	cmp	r2, r3
 801453e:	d303      	bcc.n	8014548 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	3304      	adds	r3, #4
 8014544:	781b      	ldrb	r3, [r3, #0]
 8014546:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8014548:	8afb      	ldrh	r3, [r7, #22]
 801454a:	461a      	mov	r2, r3
 801454c:	4904      	ldr	r1, [pc, #16]	; (8014560 <SCSI_ModeSense6+0x48>)
 801454e:	6938      	ldr	r0, [r7, #16]
 8014550:	f000 fe54 	bl	80151fc <SCSI_UpdateBotData>

  return 0;
 8014554:	2300      	movs	r3, #0
}
 8014556:	4618      	mov	r0, r3
 8014558:	3718      	adds	r7, #24
 801455a:	46bd      	mov	sp, r7
 801455c:	bd80      	pop	{r7, pc}
 801455e:	bf00      	nop
 8014560:	240000d4 	.word	0x240000d4

08014564 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014564:	b580      	push	{r7, lr}
 8014566:	b086      	sub	sp, #24
 8014568:	af00      	add	r7, sp, #0
 801456a:	60f8      	str	r0, [r7, #12]
 801456c:	460b      	mov	r3, r1
 801456e:	607a      	str	r2, [r7, #4]
 8014570:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014578:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 801457a:	231b      	movs	r3, #27
 801457c:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	3308      	adds	r3, #8
 8014582:	781b      	ldrb	r3, [r3, #0]
 8014584:	b29b      	uxth	r3, r3
 8014586:	8afa      	ldrh	r2, [r7, #22]
 8014588:	429a      	cmp	r2, r3
 801458a:	d303      	bcc.n	8014594 <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	3308      	adds	r3, #8
 8014590:	781b      	ldrb	r3, [r3, #0]
 8014592:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8014594:	8afb      	ldrh	r3, [r7, #22]
 8014596:	461a      	mov	r2, r3
 8014598:	4904      	ldr	r1, [pc, #16]	; (80145ac <SCSI_ModeSense10+0x48>)
 801459a:	6938      	ldr	r0, [r7, #16]
 801459c:	f000 fe2e 	bl	80151fc <SCSI_UpdateBotData>

  return 0;
 80145a0:	2300      	movs	r3, #0
}
 80145a2:	4618      	mov	r0, r3
 80145a4:	3718      	adds	r7, #24
 80145a6:	46bd      	mov	sp, r7
 80145a8:	bd80      	pop	{r7, pc}
 80145aa:	bf00      	nop
 80145ac:	240000ec 	.word	0x240000ec

080145b0 <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80145b0:	b580      	push	{r7, lr}
 80145b2:	b086      	sub	sp, #24
 80145b4:	af00      	add	r7, sp, #0
 80145b6:	60f8      	str	r0, [r7, #12]
 80145b8:	460b      	mov	r3, r1
 80145ba:	607a      	str	r2, [r7, #4]
 80145bc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80145c4:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 80145c6:	693a      	ldr	r2, [r7, #16]
 80145c8:	f248 0318 	movw	r3, #32792	; 0x8018
 80145cc:	4413      	add	r3, r2
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d10c      	bne.n	80145ee <SCSI_RequestSense+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80145d4:	693a      	ldr	r2, [r7, #16]
 80145d6:	f248 031d 	movw	r3, #32797	; 0x801d
 80145da:	4413      	add	r3, r2
 80145dc:	7819      	ldrb	r1, [r3, #0]
 80145de:	2320      	movs	r3, #32
 80145e0:	2205      	movs	r2, #5
 80145e2:	68f8      	ldr	r0, [r7, #12]
 80145e4:	f000 f87c 	bl	80146e0 <SCSI_SenseCode>
    return -1;
 80145e8:	f04f 33ff 	mov.w	r3, #4294967295
 80145ec:	e074      	b.n	80146d8 <SCSI_RequestSense+0x128>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80145ee:	2300      	movs	r3, #0
 80145f0:	75fb      	strb	r3, [r7, #23]
 80145f2:	e007      	b.n	8014604 <SCSI_RequestSense+0x54>
  {
    hmsc->bot_data[i] = 0U;
 80145f4:	7dfb      	ldrb	r3, [r7, #23]
 80145f6:	693a      	ldr	r2, [r7, #16]
 80145f8:	4413      	add	r3, r2
 80145fa:	2200      	movs	r2, #0
 80145fc:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80145fe:	7dfb      	ldrb	r3, [r7, #23]
 8014600:	3301      	adds	r3, #1
 8014602:	75fb      	strb	r3, [r7, #23]
 8014604:	7dfb      	ldrb	r3, [r7, #23]
 8014606:	2b11      	cmp	r3, #17
 8014608:	d9f4      	bls.n	80145f4 <SCSI_RequestSense+0x44>
  }

  hmsc->bot_data[0] = 0x70U;
 801460a:	693b      	ldr	r3, [r7, #16]
 801460c:	2270      	movs	r2, #112	; 0x70
 801460e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8014610:	693b      	ldr	r3, [r7, #16]
 8014612:	220c      	movs	r2, #12
 8014614:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8014616:	693a      	ldr	r2, [r7, #16]
 8014618:	f248 0360 	movw	r3, #32864	; 0x8060
 801461c:	4413      	add	r3, r2
 801461e:	781a      	ldrb	r2, [r3, #0]
 8014620:	6939      	ldr	r1, [r7, #16]
 8014622:	f248 0361 	movw	r3, #32865	; 0x8061
 8014626:	440b      	add	r3, r1
 8014628:	781b      	ldrb	r3, [r3, #0]
 801462a:	429a      	cmp	r2, r3
 801462c:	d045      	beq.n	80146ba <SCSI_RequestSense+0x10a>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 801462e:	693a      	ldr	r2, [r7, #16]
 8014630:	f248 0360 	movw	r3, #32864	; 0x8060
 8014634:	4413      	add	r3, r2
 8014636:	781b      	ldrb	r3, [r3, #0]
 8014638:	4619      	mov	r1, r3
 801463a:	693a      	ldr	r2, [r7, #16]
 801463c:	f241 0308 	movw	r3, #4104	; 0x1008
 8014640:	440b      	add	r3, r1
 8014642:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8014646:	693b      	ldr	r3, [r7, #16]
 8014648:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 801464a:	693a      	ldr	r2, [r7, #16]
 801464c:	f248 0360 	movw	r3, #32864	; 0x8060
 8014650:	4413      	add	r3, r2
 8014652:	781b      	ldrb	r3, [r3, #0]
 8014654:	4619      	mov	r1, r3
 8014656:	693a      	ldr	r2, [r7, #16]
 8014658:	f241 0308 	movw	r3, #4104	; 0x1008
 801465c:	440b      	add	r3, r1
 801465e:	00db      	lsls	r3, r3, #3
 8014660:	4413      	add	r3, r2
 8014662:	791a      	ldrb	r2, [r3, #4]
 8014664:	693b      	ldr	r3, [r7, #16]
 8014666:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8014668:	693a      	ldr	r2, [r7, #16]
 801466a:	f248 0360 	movw	r3, #32864	; 0x8060
 801466e:	4413      	add	r3, r2
 8014670:	781b      	ldrb	r3, [r3, #0]
 8014672:	4619      	mov	r1, r3
 8014674:	693a      	ldr	r2, [r7, #16]
 8014676:	f241 0308 	movw	r3, #4104	; 0x1008
 801467a:	440b      	add	r3, r1
 801467c:	00db      	lsls	r3, r3, #3
 801467e:	4413      	add	r3, r2
 8014680:	795a      	ldrb	r2, [r3, #5]
 8014682:	693b      	ldr	r3, [r7, #16]
 8014684:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8014686:	693a      	ldr	r2, [r7, #16]
 8014688:	f248 0360 	movw	r3, #32864	; 0x8060
 801468c:	4413      	add	r3, r2
 801468e:	781b      	ldrb	r3, [r3, #0]
 8014690:	3301      	adds	r3, #1
 8014692:	b2d9      	uxtb	r1, r3
 8014694:	693a      	ldr	r2, [r7, #16]
 8014696:	f248 0360 	movw	r3, #32864	; 0x8060
 801469a:	4413      	add	r3, r2
 801469c:	460a      	mov	r2, r1
 801469e:	701a      	strb	r2, [r3, #0]

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80146a0:	693a      	ldr	r2, [r7, #16]
 80146a2:	f248 0360 	movw	r3, #32864	; 0x8060
 80146a6:	4413      	add	r3, r2
 80146a8:	781b      	ldrb	r3, [r3, #0]
 80146aa:	2b04      	cmp	r3, #4
 80146ac:	d105      	bne.n	80146ba <SCSI_RequestSense+0x10a>
    {
      hmsc->scsi_sense_head = 0U;
 80146ae:	693a      	ldr	r2, [r7, #16]
 80146b0:	f248 0360 	movw	r3, #32864	; 0x8060
 80146b4:	4413      	add	r3, r2
 80146b6:	2200      	movs	r2, #0
 80146b8:	701a      	strb	r2, [r3, #0]
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80146ba:	693b      	ldr	r3, [r7, #16]
 80146bc:	2212      	movs	r2, #18
 80146be:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	3304      	adds	r3, #4
 80146c4:	781b      	ldrb	r3, [r3, #0]
 80146c6:	2b12      	cmp	r3, #18
 80146c8:	d805      	bhi.n	80146d6 <SCSI_RequestSense+0x126>
  {
    hmsc->bot_data_length = params[4];
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	3304      	adds	r3, #4
 80146ce:	781b      	ldrb	r3, [r3, #0]
 80146d0:	461a      	mov	r2, r3
 80146d2:	693b      	ldr	r3, [r7, #16]
 80146d4:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80146d6:	2300      	movs	r3, #0
}
 80146d8:	4618      	mov	r0, r3
 80146da:	3718      	adds	r7, #24
 80146dc:	46bd      	mov	sp, r7
 80146de:	bd80      	pop	{r7, pc}

080146e0 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80146e0:	b480      	push	{r7}
 80146e2:	b085      	sub	sp, #20
 80146e4:	af00      	add	r7, sp, #0
 80146e6:	6078      	str	r0, [r7, #4]
 80146e8:	4608      	mov	r0, r1
 80146ea:	4611      	mov	r1, r2
 80146ec:	461a      	mov	r2, r3
 80146ee:	4603      	mov	r3, r0
 80146f0:	70fb      	strb	r3, [r7, #3]
 80146f2:	460b      	mov	r3, r1
 80146f4:	70bb      	strb	r3, [r7, #2]
 80146f6:	4613      	mov	r3, r2
 80146f8:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014700:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8014702:	68fa      	ldr	r2, [r7, #12]
 8014704:	f248 0361 	movw	r3, #32865	; 0x8061
 8014708:	4413      	add	r3, r2
 801470a:	781b      	ldrb	r3, [r3, #0]
 801470c:	4619      	mov	r1, r3
 801470e:	68fa      	ldr	r2, [r7, #12]
 8014710:	f241 0308 	movw	r3, #4104	; 0x1008
 8014714:	440b      	add	r3, r1
 8014716:	78b9      	ldrb	r1, [r7, #2]
 8014718:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 801471c:	68fa      	ldr	r2, [r7, #12]
 801471e:	f248 0361 	movw	r3, #32865	; 0x8061
 8014722:	4413      	add	r3, r2
 8014724:	781b      	ldrb	r3, [r3, #0]
 8014726:	4619      	mov	r1, r3
 8014728:	68fa      	ldr	r2, [r7, #12]
 801472a:	f241 0308 	movw	r3, #4104	; 0x1008
 801472e:	440b      	add	r3, r1
 8014730:	00db      	lsls	r3, r3, #3
 8014732:	4413      	add	r3, r2
 8014734:	787a      	ldrb	r2, [r7, #1]
 8014736:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8014738:	68fa      	ldr	r2, [r7, #12]
 801473a:	f248 0361 	movw	r3, #32865	; 0x8061
 801473e:	4413      	add	r3, r2
 8014740:	781b      	ldrb	r3, [r3, #0]
 8014742:	4619      	mov	r1, r3
 8014744:	68fa      	ldr	r2, [r7, #12]
 8014746:	f241 0308 	movw	r3, #4104	; 0x1008
 801474a:	440b      	add	r3, r1
 801474c:	00db      	lsls	r3, r3, #3
 801474e:	4413      	add	r3, r2
 8014750:	2200      	movs	r2, #0
 8014752:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8014754:	68fa      	ldr	r2, [r7, #12]
 8014756:	f248 0361 	movw	r3, #32865	; 0x8061
 801475a:	4413      	add	r3, r2
 801475c:	781b      	ldrb	r3, [r3, #0]
 801475e:	3301      	adds	r3, #1
 8014760:	b2d9      	uxtb	r1, r3
 8014762:	68fa      	ldr	r2, [r7, #12]
 8014764:	f248 0361 	movw	r3, #32865	; 0x8061
 8014768:	4413      	add	r3, r2
 801476a:	460a      	mov	r2, r1
 801476c:	701a      	strb	r2, [r3, #0]

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 801476e:	68fa      	ldr	r2, [r7, #12]
 8014770:	f248 0361 	movw	r3, #32865	; 0x8061
 8014774:	4413      	add	r3, r2
 8014776:	781b      	ldrb	r3, [r3, #0]
 8014778:	2b04      	cmp	r3, #4
 801477a:	d105      	bne.n	8014788 <SCSI_SenseCode+0xa8>
  {
    hmsc->scsi_sense_tail = 0U;
 801477c:	68fa      	ldr	r2, [r7, #12]
 801477e:	f248 0361 	movw	r3, #32865	; 0x8061
 8014782:	4413      	add	r3, r2
 8014784:	2200      	movs	r2, #0
 8014786:	701a      	strb	r2, [r3, #0]
  }
}
 8014788:	bf00      	nop
 801478a:	3714      	adds	r7, #20
 801478c:	46bd      	mov	sp, r7
 801478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014792:	4770      	bx	lr

08014794 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014794:	b580      	push	{r7, lr}
 8014796:	b086      	sub	sp, #24
 8014798:	af00      	add	r7, sp, #0
 801479a:	60f8      	str	r0, [r7, #12]
 801479c:	460b      	mov	r3, r1
 801479e:	607a      	str	r2, [r7, #4]
 80147a0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80147a8:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80147aa:	697a      	ldr	r2, [r7, #20]
 80147ac:	f248 0362 	movw	r3, #32866	; 0x8062
 80147b0:	4413      	add	r3, r2
 80147b2:	781b      	ldrb	r3, [r3, #0]
 80147b4:	2b01      	cmp	r3, #1
 80147b6:	d10f      	bne.n	80147d8 <SCSI_StartStopUnit+0x44>
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	3304      	adds	r3, #4
 80147bc:	781b      	ldrb	r3, [r3, #0]
 80147be:	f003 0303 	and.w	r3, r3, #3
 80147c2:	2b02      	cmp	r3, #2
 80147c4:	d108      	bne.n	80147d8 <SCSI_StartStopUnit+0x44>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80147c6:	7af9      	ldrb	r1, [r7, #11]
 80147c8:	2324      	movs	r3, #36	; 0x24
 80147ca:	2205      	movs	r2, #5
 80147cc:	68f8      	ldr	r0, [r7, #12]
 80147ce:	f7ff ff87 	bl	80146e0 <SCSI_SenseCode>

    return -1;
 80147d2:	f04f 33ff 	mov.w	r3, #4294967295
 80147d6:	e02c      	b.n	8014832 <SCSI_StartStopUnit+0x9e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	3304      	adds	r3, #4
 80147dc:	781b      	ldrb	r3, [r3, #0]
 80147de:	f003 0303 	and.w	r3, r3, #3
 80147e2:	2b01      	cmp	r3, #1
 80147e4:	d106      	bne.n	80147f4 <SCSI_StartStopUnit+0x60>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80147e6:	697a      	ldr	r2, [r7, #20]
 80147e8:	f248 0362 	movw	r3, #32866	; 0x8062
 80147ec:	4413      	add	r3, r2
 80147ee:	2200      	movs	r2, #0
 80147f0:	701a      	strb	r2, [r3, #0]
 80147f2:	e01a      	b.n	801482a <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	3304      	adds	r3, #4
 80147f8:	781b      	ldrb	r3, [r3, #0]
 80147fa:	f003 0303 	and.w	r3, r3, #3
 80147fe:	2b02      	cmp	r3, #2
 8014800:	d106      	bne.n	8014810 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8014802:	697a      	ldr	r2, [r7, #20]
 8014804:	f248 0362 	movw	r3, #32866	; 0x8062
 8014808:	4413      	add	r3, r2
 801480a:	2202      	movs	r2, #2
 801480c:	701a      	strb	r2, [r3, #0]
 801480e:	e00c      	b.n	801482a <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	3304      	adds	r3, #4
 8014814:	781b      	ldrb	r3, [r3, #0]
 8014816:	f003 0303 	and.w	r3, r3, #3
 801481a:	2b03      	cmp	r3, #3
 801481c:	d105      	bne.n	801482a <SCSI_StartStopUnit+0x96>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801481e:	697a      	ldr	r2, [r7, #20]
 8014820:	f248 0362 	movw	r3, #32866	; 0x8062
 8014824:	4413      	add	r3, r2
 8014826:	2200      	movs	r2, #0
 8014828:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 801482a:	697b      	ldr	r3, [r7, #20]
 801482c:	2200      	movs	r2, #0
 801482e:	60da      	str	r2, [r3, #12]

  return 0;
 8014830:	2300      	movs	r3, #0
}
 8014832:	4618      	mov	r0, r3
 8014834:	3718      	adds	r7, #24
 8014836:	46bd      	mov	sp, r7
 8014838:	bd80      	pop	{r7, pc}

0801483a <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801483a:	b480      	push	{r7}
 801483c:	b087      	sub	sp, #28
 801483e:	af00      	add	r7, sp, #0
 8014840:	60f8      	str	r0, [r7, #12]
 8014842:	460b      	mov	r3, r1
 8014844:	607a      	str	r2, [r7, #4]
 8014846:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801484e:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	3304      	adds	r3, #4
 8014854:	781b      	ldrb	r3, [r3, #0]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d106      	bne.n	8014868 <SCSI_AllowPreventRemovable+0x2e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801485a:	697a      	ldr	r2, [r7, #20]
 801485c:	f248 0362 	movw	r3, #32866	; 0x8062
 8014860:	4413      	add	r3, r2
 8014862:	2200      	movs	r2, #0
 8014864:	701a      	strb	r2, [r3, #0]
 8014866:	e005      	b.n	8014874 <SCSI_AllowPreventRemovable+0x3a>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8014868:	697a      	ldr	r2, [r7, #20]
 801486a:	f248 0362 	movw	r3, #32866	; 0x8062
 801486e:	4413      	add	r3, r2
 8014870:	2201      	movs	r2, #1
 8014872:	701a      	strb	r2, [r3, #0]
  }

  hmsc->bot_data_length = 0U;
 8014874:	697b      	ldr	r3, [r7, #20]
 8014876:	2200      	movs	r2, #0
 8014878:	60da      	str	r2, [r3, #12]

  return 0;
 801487a:	2300      	movs	r3, #0
}
 801487c:	4618      	mov	r0, r3
 801487e:	371c      	adds	r7, #28
 8014880:	46bd      	mov	sp, r7
 8014882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014886:	4770      	bx	lr

08014888 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014888:	b580      	push	{r7, lr}
 801488a:	b086      	sub	sp, #24
 801488c:	af00      	add	r7, sp, #0
 801488e:	60f8      	str	r0, [r7, #12]
 8014890:	460b      	mov	r3, r1
 8014892:	607a      	str	r2, [r7, #4]
 8014894:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801489c:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801489e:	697b      	ldr	r3, [r7, #20]
 80148a0:	7a1b      	ldrb	r3, [r3, #8]
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	f040 8094 	bne.w	80149d0 <SCSI_Read10+0x148>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80148a8:	697a      	ldr	r2, [r7, #20]
 80148aa:	f248 031c 	movw	r3, #32796	; 0x801c
 80148ae:	4413      	add	r3, r2
 80148b0:	781b      	ldrb	r3, [r3, #0]
 80148b2:	b25b      	sxtb	r3, r3
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	db0c      	blt.n	80148d2 <SCSI_Read10+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80148b8:	697a      	ldr	r2, [r7, #20]
 80148ba:	f248 031d 	movw	r3, #32797	; 0x801d
 80148be:	4413      	add	r3, r2
 80148c0:	7819      	ldrb	r1, [r3, #0]
 80148c2:	2320      	movs	r3, #32
 80148c4:	2205      	movs	r2, #5
 80148c6:	68f8      	ldr	r0, [r7, #12]
 80148c8:	f7ff ff0a 	bl	80146e0 <SCSI_SenseCode>
      return -1;
 80148cc:	f04f 33ff 	mov.w	r3, #4294967295
 80148d0:	e088      	b.n	80149e4 <SCSI_Read10+0x15c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80148d2:	697a      	ldr	r2, [r7, #20]
 80148d4:	f248 0362 	movw	r3, #32866	; 0x8062
 80148d8:	4413      	add	r3, r2
 80148da:	781b      	ldrb	r3, [r3, #0]
 80148dc:	2b02      	cmp	r3, #2
 80148de:	d108      	bne.n	80148f2 <SCSI_Read10+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80148e0:	7af9      	ldrb	r1, [r7, #11]
 80148e2:	233a      	movs	r3, #58	; 0x3a
 80148e4:	2202      	movs	r2, #2
 80148e6:	68f8      	ldr	r0, [r7, #12]
 80148e8:	f7ff fefa 	bl	80146e0 <SCSI_SenseCode>

      return -1;
 80148ec:	f04f 33ff 	mov.w	r3, #4294967295
 80148f0:	e078      	b.n	80149e4 <SCSI_Read10+0x15c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80148f8:	689b      	ldr	r3, [r3, #8]
 80148fa:	7afa      	ldrb	r2, [r7, #11]
 80148fc:	4610      	mov	r0, r2
 80148fe:	4798      	blx	r3
 8014900:	4603      	mov	r3, r0
 8014902:	2b00      	cmp	r3, #0
 8014904:	d008      	beq.n	8014918 <SCSI_Read10+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014906:	7af9      	ldrb	r1, [r7, #11]
 8014908:	233a      	movs	r3, #58	; 0x3a
 801490a:	2202      	movs	r2, #2
 801490c:	68f8      	ldr	r0, [r7, #12]
 801490e:	f7ff fee7 	bl	80146e0 <SCSI_SenseCode>
      return -1;
 8014912:	f04f 33ff 	mov.w	r3, #4294967295
 8014916:	e065      	b.n	80149e4 <SCSI_Read10+0x15c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	3302      	adds	r3, #2
 801491c:	781b      	ldrb	r3, [r3, #0]
 801491e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	3303      	adds	r3, #3
 8014924:	781b      	ldrb	r3, [r3, #0]
 8014926:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014928:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	3304      	adds	r3, #4
 801492e:	781b      	ldrb	r3, [r3, #0]
 8014930:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014932:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014934:	687a      	ldr	r2, [r7, #4]
 8014936:	3205      	adds	r2, #5
 8014938:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 801493a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801493c:	6979      	ldr	r1, [r7, #20]
 801493e:	f248 036c 	movw	r3, #32876	; 0x806c
 8014942:	440b      	add	r3, r1
 8014944:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	3307      	adds	r3, #7
 801494a:	781b      	ldrb	r3, [r3, #0]
 801494c:	021b      	lsls	r3, r3, #8
 801494e:	687a      	ldr	r2, [r7, #4]
 8014950:	3208      	adds	r2, #8
 8014952:	7812      	ldrb	r2, [r2, #0]
 8014954:	431a      	orrs	r2, r3
 8014956:	6979      	ldr	r1, [r7, #20]
 8014958:	f248 0370 	movw	r3, #32880	; 0x8070
 801495c:	440b      	add	r3, r1
 801495e:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014960:	697a      	ldr	r2, [r7, #20]
 8014962:	f248 036c 	movw	r3, #32876	; 0x806c
 8014966:	4413      	add	r3, r2
 8014968:	6818      	ldr	r0, [r3, #0]
 801496a:	697a      	ldr	r2, [r7, #20]
 801496c:	f248 0370 	movw	r3, #32880	; 0x8070
 8014970:	4413      	add	r3, r2
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	7af9      	ldrb	r1, [r7, #11]
 8014976:	4602      	mov	r2, r0
 8014978:	68f8      	ldr	r0, [r7, #12]
 801497a:	f000 faeb 	bl	8014f54 <SCSI_CheckAddressRange>
 801497e:	4603      	mov	r3, r0
 8014980:	2b00      	cmp	r3, #0
 8014982:	da02      	bge.n	801498a <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014984:	f04f 33ff 	mov.w	r3, #4294967295
 8014988:	e02c      	b.n	80149e4 <SCSI_Read10+0x15c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 801498a:	697a      	ldr	r2, [r7, #20]
 801498c:	f248 0318 	movw	r3, #32792	; 0x8018
 8014990:	4413      	add	r3, r2
 8014992:	681a      	ldr	r2, [r3, #0]
 8014994:	6979      	ldr	r1, [r7, #20]
 8014996:	f248 0370 	movw	r3, #32880	; 0x8070
 801499a:	440b      	add	r3, r1
 801499c:	6819      	ldr	r1, [r3, #0]
 801499e:	6978      	ldr	r0, [r7, #20]
 80149a0:	f248 0364 	movw	r3, #32868	; 0x8064
 80149a4:	4403      	add	r3, r0
 80149a6:	881b      	ldrh	r3, [r3, #0]
 80149a8:	fb03 f301 	mul.w	r3, r3, r1
 80149ac:	429a      	cmp	r2, r3
 80149ae:	d00c      	beq.n	80149ca <SCSI_Read10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80149b0:	697a      	ldr	r2, [r7, #20]
 80149b2:	f248 031d 	movw	r3, #32797	; 0x801d
 80149b6:	4413      	add	r3, r2
 80149b8:	7819      	ldrb	r1, [r3, #0]
 80149ba:	2320      	movs	r3, #32
 80149bc:	2205      	movs	r2, #5
 80149be:	68f8      	ldr	r0, [r7, #12]
 80149c0:	f7ff fe8e 	bl	80146e0 <SCSI_SenseCode>
      return -1;
 80149c4:	f04f 33ff 	mov.w	r3, #4294967295
 80149c8:	e00c      	b.n	80149e4 <SCSI_Read10+0x15c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80149ca:	697b      	ldr	r3, [r7, #20]
 80149cc:	2202      	movs	r2, #2
 80149ce:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80149d0:	697b      	ldr	r3, [r7, #20]
 80149d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80149d6:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80149d8:	7afb      	ldrb	r3, [r7, #11]
 80149da:	4619      	mov	r1, r3
 80149dc:	68f8      	ldr	r0, [r7, #12]
 80149de:	f000 fadd 	bl	8014f9c <SCSI_ProcessRead>
 80149e2:	4603      	mov	r3, r0
}
 80149e4:	4618      	mov	r0, r3
 80149e6:	3718      	adds	r7, #24
 80149e8:	46bd      	mov	sp, r7
 80149ea:	bd80      	pop	{r7, pc}

080149ec <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80149ec:	b580      	push	{r7, lr}
 80149ee:	b086      	sub	sp, #24
 80149f0:	af00      	add	r7, sp, #0
 80149f2:	60f8      	str	r0, [r7, #12]
 80149f4:	460b      	mov	r3, r1
 80149f6:	607a      	str	r2, [r7, #4]
 80149f8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014a00:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014a02:	697b      	ldr	r3, [r7, #20]
 8014a04:	7a1b      	ldrb	r3, [r3, #8]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	f040 809e 	bne.w	8014b48 <SCSI_Read12+0x15c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8014a0c:	697a      	ldr	r2, [r7, #20]
 8014a0e:	f248 031c 	movw	r3, #32796	; 0x801c
 8014a12:	4413      	add	r3, r2
 8014a14:	781b      	ldrb	r3, [r3, #0]
 8014a16:	b25b      	sxtb	r3, r3
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	db0c      	blt.n	8014a36 <SCSI_Read12+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014a1c:	697a      	ldr	r2, [r7, #20]
 8014a1e:	f248 031d 	movw	r3, #32797	; 0x801d
 8014a22:	4413      	add	r3, r2
 8014a24:	7819      	ldrb	r1, [r3, #0]
 8014a26:	2320      	movs	r3, #32
 8014a28:	2205      	movs	r2, #5
 8014a2a:	68f8      	ldr	r0, [r7, #12]
 8014a2c:	f7ff fe58 	bl	80146e0 <SCSI_SenseCode>
      return -1;
 8014a30:	f04f 33ff 	mov.w	r3, #4294967295
 8014a34:	e092      	b.n	8014b5c <SCSI_Read12+0x170>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8014a36:	697a      	ldr	r2, [r7, #20]
 8014a38:	f248 0362 	movw	r3, #32866	; 0x8062
 8014a3c:	4413      	add	r3, r2
 8014a3e:	781b      	ldrb	r3, [r3, #0]
 8014a40:	2b02      	cmp	r3, #2
 8014a42:	d108      	bne.n	8014a56 <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014a44:	7af9      	ldrb	r1, [r7, #11]
 8014a46:	233a      	movs	r3, #58	; 0x3a
 8014a48:	2202      	movs	r2, #2
 8014a4a:	68f8      	ldr	r0, [r7, #12]
 8014a4c:	f7ff fe48 	bl	80146e0 <SCSI_SenseCode>
      return -1;
 8014a50:	f04f 33ff 	mov.w	r3, #4294967295
 8014a54:	e082      	b.n	8014b5c <SCSI_Read12+0x170>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014a5c:	689b      	ldr	r3, [r3, #8]
 8014a5e:	7afa      	ldrb	r2, [r7, #11]
 8014a60:	4610      	mov	r0, r2
 8014a62:	4798      	blx	r3
 8014a64:	4603      	mov	r3, r0
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d008      	beq.n	8014a7c <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014a6a:	7af9      	ldrb	r1, [r7, #11]
 8014a6c:	233a      	movs	r3, #58	; 0x3a
 8014a6e:	2202      	movs	r2, #2
 8014a70:	68f8      	ldr	r0, [r7, #12]
 8014a72:	f7ff fe35 	bl	80146e0 <SCSI_SenseCode>
      return -1;
 8014a76:	f04f 33ff 	mov.w	r3, #4294967295
 8014a7a:	e06f      	b.n	8014b5c <SCSI_Read12+0x170>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	3302      	adds	r3, #2
 8014a80:	781b      	ldrb	r3, [r3, #0]
 8014a82:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	3303      	adds	r3, #3
 8014a88:	781b      	ldrb	r3, [r3, #0]
 8014a8a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014a8c:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	3304      	adds	r3, #4
 8014a92:	781b      	ldrb	r3, [r3, #0]
 8014a94:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014a96:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014a98:	687a      	ldr	r2, [r7, #4]
 8014a9a:	3205      	adds	r2, #5
 8014a9c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8014a9e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014aa0:	6979      	ldr	r1, [r7, #20]
 8014aa2:	f248 036c 	movw	r3, #32876	; 0x806c
 8014aa6:	440b      	add	r3, r1
 8014aa8:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	3306      	adds	r3, #6
 8014aae:	781b      	ldrb	r3, [r3, #0]
 8014ab0:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	3307      	adds	r3, #7
 8014ab6:	781b      	ldrb	r3, [r3, #0]
 8014ab8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014aba:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	3308      	adds	r3, #8
 8014ac0:	781b      	ldrb	r3, [r3, #0]
 8014ac2:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8014ac4:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8014ac6:	687a      	ldr	r2, [r7, #4]
 8014ac8:	3209      	adds	r2, #9
 8014aca:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8014acc:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014ace:	6979      	ldr	r1, [r7, #20]
 8014ad0:	f248 0370 	movw	r3, #32880	; 0x8070
 8014ad4:	440b      	add	r3, r1
 8014ad6:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014ad8:	697a      	ldr	r2, [r7, #20]
 8014ada:	f248 036c 	movw	r3, #32876	; 0x806c
 8014ade:	4413      	add	r3, r2
 8014ae0:	6818      	ldr	r0, [r3, #0]
 8014ae2:	697a      	ldr	r2, [r7, #20]
 8014ae4:	f248 0370 	movw	r3, #32880	; 0x8070
 8014ae8:	4413      	add	r3, r2
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	7af9      	ldrb	r1, [r7, #11]
 8014aee:	4602      	mov	r2, r0
 8014af0:	68f8      	ldr	r0, [r7, #12]
 8014af2:	f000 fa2f 	bl	8014f54 <SCSI_CheckAddressRange>
 8014af6:	4603      	mov	r3, r0
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	da02      	bge.n	8014b02 <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014afc:	f04f 33ff 	mov.w	r3, #4294967295
 8014b00:	e02c      	b.n	8014b5c <SCSI_Read12+0x170>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8014b02:	697a      	ldr	r2, [r7, #20]
 8014b04:	f248 0318 	movw	r3, #32792	; 0x8018
 8014b08:	4413      	add	r3, r2
 8014b0a:	681a      	ldr	r2, [r3, #0]
 8014b0c:	6979      	ldr	r1, [r7, #20]
 8014b0e:	f248 0370 	movw	r3, #32880	; 0x8070
 8014b12:	440b      	add	r3, r1
 8014b14:	6819      	ldr	r1, [r3, #0]
 8014b16:	6978      	ldr	r0, [r7, #20]
 8014b18:	f248 0364 	movw	r3, #32868	; 0x8064
 8014b1c:	4403      	add	r3, r0
 8014b1e:	881b      	ldrh	r3, [r3, #0]
 8014b20:	fb03 f301 	mul.w	r3, r3, r1
 8014b24:	429a      	cmp	r2, r3
 8014b26:	d00c      	beq.n	8014b42 <SCSI_Read12+0x156>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014b28:	697a      	ldr	r2, [r7, #20]
 8014b2a:	f248 031d 	movw	r3, #32797	; 0x801d
 8014b2e:	4413      	add	r3, r2
 8014b30:	7819      	ldrb	r1, [r3, #0]
 8014b32:	2320      	movs	r3, #32
 8014b34:	2205      	movs	r2, #5
 8014b36:	68f8      	ldr	r0, [r7, #12]
 8014b38:	f7ff fdd2 	bl	80146e0 <SCSI_SenseCode>
      return -1;
 8014b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8014b40:	e00c      	b.n	8014b5c <SCSI_Read12+0x170>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8014b42:	697b      	ldr	r3, [r7, #20]
 8014b44:	2202      	movs	r2, #2
 8014b46:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8014b48:	697b      	ldr	r3, [r7, #20]
 8014b4a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8014b4e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8014b50:	7afb      	ldrb	r3, [r7, #11]
 8014b52:	4619      	mov	r1, r3
 8014b54:	68f8      	ldr	r0, [r7, #12]
 8014b56:	f000 fa21 	bl	8014f9c <SCSI_ProcessRead>
 8014b5a:	4603      	mov	r3, r0
}
 8014b5c:	4618      	mov	r0, r3
 8014b5e:	3718      	adds	r7, #24
 8014b60:	46bd      	mov	sp, r7
 8014b62:	bd80      	pop	{r7, pc}

08014b64 <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014b64:	b580      	push	{r7, lr}
 8014b66:	b086      	sub	sp, #24
 8014b68:	af00      	add	r7, sp, #0
 8014b6a:	60f8      	str	r0, [r7, #12]
 8014b6c:	460b      	mov	r3, r1
 8014b6e:	607a      	str	r2, [r7, #4]
 8014b70:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014b78:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014b7a:	697b      	ldr	r3, [r7, #20]
 8014b7c:	7a1b      	ldrb	r3, [r3, #8]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	f040 80be 	bne.w	8014d00 <SCSI_Write10+0x19c>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8014b84:	697a      	ldr	r2, [r7, #20]
 8014b86:	f248 0318 	movw	r3, #32792	; 0x8018
 8014b8a:	4413      	add	r3, r2
 8014b8c:	681b      	ldr	r3, [r3, #0]
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d10c      	bne.n	8014bac <SCSI_Write10+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014b92:	697a      	ldr	r2, [r7, #20]
 8014b94:	f248 031d 	movw	r3, #32797	; 0x801d
 8014b98:	4413      	add	r3, r2
 8014b9a:	7819      	ldrb	r1, [r3, #0]
 8014b9c:	2320      	movs	r3, #32
 8014b9e:	2205      	movs	r2, #5
 8014ba0:	68f8      	ldr	r0, [r7, #12]
 8014ba2:	f7ff fd9d 	bl	80146e0 <SCSI_SenseCode>
      return -1;
 8014ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8014baa:	e0af      	b.n	8014d0c <SCSI_Write10+0x1a8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8014bac:	697a      	ldr	r2, [r7, #20]
 8014bae:	f248 031c 	movw	r3, #32796	; 0x801c
 8014bb2:	4413      	add	r3, r2
 8014bb4:	781b      	ldrb	r3, [r3, #0]
 8014bb6:	b25b      	sxtb	r3, r3
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	da0c      	bge.n	8014bd6 <SCSI_Write10+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014bbc:	697a      	ldr	r2, [r7, #20]
 8014bbe:	f248 031d 	movw	r3, #32797	; 0x801d
 8014bc2:	4413      	add	r3, r2
 8014bc4:	7819      	ldrb	r1, [r3, #0]
 8014bc6:	2320      	movs	r3, #32
 8014bc8:	2205      	movs	r2, #5
 8014bca:	68f8      	ldr	r0, [r7, #12]
 8014bcc:	f7ff fd88 	bl	80146e0 <SCSI_SenseCode>
      return -1;
 8014bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8014bd4:	e09a      	b.n	8014d0c <SCSI_Write10+0x1a8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014bdc:	689b      	ldr	r3, [r3, #8]
 8014bde:	7afa      	ldrb	r2, [r7, #11]
 8014be0:	4610      	mov	r0, r2
 8014be2:	4798      	blx	r3
 8014be4:	4603      	mov	r3, r0
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d008      	beq.n	8014bfc <SCSI_Write10+0x98>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014bea:	7af9      	ldrb	r1, [r7, #11]
 8014bec:	233a      	movs	r3, #58	; 0x3a
 8014bee:	2202      	movs	r2, #2
 8014bf0:	68f8      	ldr	r0, [r7, #12]
 8014bf2:	f7ff fd75 	bl	80146e0 <SCSI_SenseCode>
      return -1;
 8014bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8014bfa:	e087      	b.n	8014d0c <SCSI_Write10+0x1a8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014c02:	68db      	ldr	r3, [r3, #12]
 8014c04:	7afa      	ldrb	r2, [r7, #11]
 8014c06:	4610      	mov	r0, r2
 8014c08:	4798      	blx	r3
 8014c0a:	4603      	mov	r3, r0
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d008      	beq.n	8014c22 <SCSI_Write10+0xbe>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8014c10:	7af9      	ldrb	r1, [r7, #11]
 8014c12:	2327      	movs	r3, #39	; 0x27
 8014c14:	2202      	movs	r2, #2
 8014c16:	68f8      	ldr	r0, [r7, #12]
 8014c18:	f7ff fd62 	bl	80146e0 <SCSI_SenseCode>
      return -1;
 8014c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8014c20:	e074      	b.n	8014d0c <SCSI_Write10+0x1a8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	3302      	adds	r3, #2
 8014c26:	781b      	ldrb	r3, [r3, #0]
 8014c28:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	3303      	adds	r3, #3
 8014c2e:	781b      	ldrb	r3, [r3, #0]
 8014c30:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014c32:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	3304      	adds	r3, #4
 8014c38:	781b      	ldrb	r3, [r3, #0]
 8014c3a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014c3c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014c3e:	687a      	ldr	r2, [r7, #4]
 8014c40:	3205      	adds	r2, #5
 8014c42:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8014c44:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014c46:	6979      	ldr	r1, [r7, #20]
 8014c48:	f248 036c 	movw	r3, #32876	; 0x806c
 8014c4c:	440b      	add	r3, r1
 8014c4e:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	3307      	adds	r3, #7
 8014c54:	781b      	ldrb	r3, [r3, #0]
 8014c56:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8014c58:	687a      	ldr	r2, [r7, #4]
 8014c5a:	3208      	adds	r2, #8
 8014c5c:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8014c5e:	431a      	orrs	r2, r3
 8014c60:	6979      	ldr	r1, [r7, #20]
 8014c62:	f248 0370 	movw	r3, #32880	; 0x8070
 8014c66:	440b      	add	r3, r1
 8014c68:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014c6a:	697a      	ldr	r2, [r7, #20]
 8014c6c:	f248 036c 	movw	r3, #32876	; 0x806c
 8014c70:	4413      	add	r3, r2
 8014c72:	6818      	ldr	r0, [r3, #0]
 8014c74:	697a      	ldr	r2, [r7, #20]
 8014c76:	f248 0370 	movw	r3, #32880	; 0x8070
 8014c7a:	4413      	add	r3, r2
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	7af9      	ldrb	r1, [r7, #11]
 8014c80:	4602      	mov	r2, r0
 8014c82:	68f8      	ldr	r0, [r7, #12]
 8014c84:	f000 f966 	bl	8014f54 <SCSI_CheckAddressRange>
 8014c88:	4603      	mov	r3, r0
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	da02      	bge.n	8014c94 <SCSI_Write10+0x130>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8014c92:	e03b      	b.n	8014d0c <SCSI_Write10+0x1a8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8014c94:	697a      	ldr	r2, [r7, #20]
 8014c96:	f248 0370 	movw	r3, #32880	; 0x8070
 8014c9a:	4413      	add	r3, r2
 8014c9c:	681a      	ldr	r2, [r3, #0]
 8014c9e:	6979      	ldr	r1, [r7, #20]
 8014ca0:	f248 0364 	movw	r3, #32868	; 0x8064
 8014ca4:	440b      	add	r3, r1
 8014ca6:	881b      	ldrh	r3, [r3, #0]
 8014ca8:	fb03 f302 	mul.w	r3, r3, r2
 8014cac:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8014cae:	697a      	ldr	r2, [r7, #20]
 8014cb0:	f248 0318 	movw	r3, #32792	; 0x8018
 8014cb4:	4413      	add	r3, r2
 8014cb6:	681b      	ldr	r3, [r3, #0]
 8014cb8:	693a      	ldr	r2, [r7, #16]
 8014cba:	429a      	cmp	r2, r3
 8014cbc:	d00c      	beq.n	8014cd8 <SCSI_Write10+0x174>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014cbe:	697a      	ldr	r2, [r7, #20]
 8014cc0:	f248 031d 	movw	r3, #32797	; 0x801d
 8014cc4:	4413      	add	r3, r2
 8014cc6:	7819      	ldrb	r1, [r3, #0]
 8014cc8:	2320      	movs	r3, #32
 8014cca:	2205      	movs	r2, #5
 8014ccc:	68f8      	ldr	r0, [r7, #12]
 8014cce:	f7ff fd07 	bl	80146e0 <SCSI_SenseCode>
      return -1;
 8014cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8014cd6:	e019      	b.n	8014d0c <SCSI_Write10+0x1a8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8014cd8:	693b      	ldr	r3, [r7, #16]
 8014cda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014cde:	bf28      	it	cs
 8014ce0:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8014ce4:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8014ce6:	697b      	ldr	r3, [r7, #20]
 8014ce8:	2201      	movs	r2, #1
 8014cea:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8014cec:	697b      	ldr	r3, [r7, #20]
 8014cee:	f103 0210 	add.w	r2, r3, #16
 8014cf2:	693b      	ldr	r3, [r7, #16]
 8014cf4:	2101      	movs	r1, #1
 8014cf6:	68f8      	ldr	r0, [r7, #12]
 8014cf8:	f004 fb19 	bl	801932e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8014cfc:	2300      	movs	r3, #0
 8014cfe:	e005      	b.n	8014d0c <SCSI_Write10+0x1a8>
    return SCSI_ProcessWrite(pdev, lun);
 8014d00:	7afb      	ldrb	r3, [r7, #11]
 8014d02:	4619      	mov	r1, r3
 8014d04:	68f8      	ldr	r0, [r7, #12]
 8014d06:	f000 f9d7 	bl	80150b8 <SCSI_ProcessWrite>
 8014d0a:	4603      	mov	r3, r0
}
 8014d0c:	4618      	mov	r0, r3
 8014d0e:	3718      	adds	r7, #24
 8014d10:	46bd      	mov	sp, r7
 8014d12:	bd80      	pop	{r7, pc}

08014d14 <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014d14:	b580      	push	{r7, lr}
 8014d16:	b086      	sub	sp, #24
 8014d18:	af00      	add	r7, sp, #0
 8014d1a:	60f8      	str	r0, [r7, #12]
 8014d1c:	460b      	mov	r3, r1
 8014d1e:	607a      	str	r2, [r7, #4]
 8014d20:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014d28:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014d2a:	697b      	ldr	r3, [r7, #20]
 8014d2c:	7a1b      	ldrb	r3, [r3, #8]
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	f040 80ce 	bne.w	8014ed0 <SCSI_Write12+0x1bc>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8014d34:	697a      	ldr	r2, [r7, #20]
 8014d36:	f248 0318 	movw	r3, #32792	; 0x8018
 8014d3a:	4413      	add	r3, r2
 8014d3c:	681b      	ldr	r3, [r3, #0]
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d10c      	bne.n	8014d5c <SCSI_Write12+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014d42:	697a      	ldr	r2, [r7, #20]
 8014d44:	f248 031d 	movw	r3, #32797	; 0x801d
 8014d48:	4413      	add	r3, r2
 8014d4a:	7819      	ldrb	r1, [r3, #0]
 8014d4c:	2320      	movs	r3, #32
 8014d4e:	2205      	movs	r2, #5
 8014d50:	68f8      	ldr	r0, [r7, #12]
 8014d52:	f7ff fcc5 	bl	80146e0 <SCSI_SenseCode>
      return -1;
 8014d56:	f04f 33ff 	mov.w	r3, #4294967295
 8014d5a:	e0bf      	b.n	8014edc <SCSI_Write12+0x1c8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8014d5c:	697a      	ldr	r2, [r7, #20]
 8014d5e:	f248 031c 	movw	r3, #32796	; 0x801c
 8014d62:	4413      	add	r3, r2
 8014d64:	781b      	ldrb	r3, [r3, #0]
 8014d66:	b25b      	sxtb	r3, r3
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	da0c      	bge.n	8014d86 <SCSI_Write12+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014d6c:	697a      	ldr	r2, [r7, #20]
 8014d6e:	f248 031d 	movw	r3, #32797	; 0x801d
 8014d72:	4413      	add	r3, r2
 8014d74:	7819      	ldrb	r1, [r3, #0]
 8014d76:	2320      	movs	r3, #32
 8014d78:	2205      	movs	r2, #5
 8014d7a:	68f8      	ldr	r0, [r7, #12]
 8014d7c:	f7ff fcb0 	bl	80146e0 <SCSI_SenseCode>
      return -1;
 8014d80:	f04f 33ff 	mov.w	r3, #4294967295
 8014d84:	e0aa      	b.n	8014edc <SCSI_Write12+0x1c8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014d8c:	689b      	ldr	r3, [r3, #8]
 8014d8e:	7afa      	ldrb	r2, [r7, #11]
 8014d90:	4610      	mov	r0, r2
 8014d92:	4798      	blx	r3
 8014d94:	4603      	mov	r3, r0
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d00b      	beq.n	8014db2 <SCSI_Write12+0x9e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014d9a:	7af9      	ldrb	r1, [r7, #11]
 8014d9c:	233a      	movs	r3, #58	; 0x3a
 8014d9e:	2202      	movs	r2, #2
 8014da0:	68f8      	ldr	r0, [r7, #12]
 8014da2:	f7ff fc9d 	bl	80146e0 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8014da6:	697b      	ldr	r3, [r7, #20]
 8014da8:	2205      	movs	r2, #5
 8014daa:	721a      	strb	r2, [r3, #8]
      return -1;
 8014dac:	f04f 33ff 	mov.w	r3, #4294967295
 8014db0:	e094      	b.n	8014edc <SCSI_Write12+0x1c8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014db8:	68db      	ldr	r3, [r3, #12]
 8014dba:	7afa      	ldrb	r2, [r7, #11]
 8014dbc:	4610      	mov	r0, r2
 8014dbe:	4798      	blx	r3
 8014dc0:	4603      	mov	r3, r0
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d00b      	beq.n	8014dde <SCSI_Write12+0xca>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8014dc6:	7af9      	ldrb	r1, [r7, #11]
 8014dc8:	2327      	movs	r3, #39	; 0x27
 8014dca:	2202      	movs	r2, #2
 8014dcc:	68f8      	ldr	r0, [r7, #12]
 8014dce:	f7ff fc87 	bl	80146e0 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8014dd2:	697b      	ldr	r3, [r7, #20]
 8014dd4:	2205      	movs	r2, #5
 8014dd6:	721a      	strb	r2, [r3, #8]
      return -1;
 8014dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8014ddc:	e07e      	b.n	8014edc <SCSI_Write12+0x1c8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	3302      	adds	r3, #2
 8014de2:	781b      	ldrb	r3, [r3, #0]
 8014de4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	3303      	adds	r3, #3
 8014dea:	781b      	ldrb	r3, [r3, #0]
 8014dec:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014dee:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	3304      	adds	r3, #4
 8014df4:	781b      	ldrb	r3, [r3, #0]
 8014df6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014df8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014dfa:	687a      	ldr	r2, [r7, #4]
 8014dfc:	3205      	adds	r2, #5
 8014dfe:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8014e00:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014e02:	6979      	ldr	r1, [r7, #20]
 8014e04:	f248 036c 	movw	r3, #32876	; 0x806c
 8014e08:	440b      	add	r3, r1
 8014e0a:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	3306      	adds	r3, #6
 8014e10:	781b      	ldrb	r3, [r3, #0]
 8014e12:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	3307      	adds	r3, #7
 8014e18:	781b      	ldrb	r3, [r3, #0]
 8014e1a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014e1c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	3308      	adds	r3, #8
 8014e22:	781b      	ldrb	r3, [r3, #0]
 8014e24:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8014e26:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8014e28:	687a      	ldr	r2, [r7, #4]
 8014e2a:	3209      	adds	r2, #9
 8014e2c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8014e2e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014e30:	6979      	ldr	r1, [r7, #20]
 8014e32:	f248 0370 	movw	r3, #32880	; 0x8070
 8014e36:	440b      	add	r3, r1
 8014e38:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014e3a:	697a      	ldr	r2, [r7, #20]
 8014e3c:	f248 036c 	movw	r3, #32876	; 0x806c
 8014e40:	4413      	add	r3, r2
 8014e42:	6818      	ldr	r0, [r3, #0]
 8014e44:	697a      	ldr	r2, [r7, #20]
 8014e46:	f248 0370 	movw	r3, #32880	; 0x8070
 8014e4a:	4413      	add	r3, r2
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	7af9      	ldrb	r1, [r7, #11]
 8014e50:	4602      	mov	r2, r0
 8014e52:	68f8      	ldr	r0, [r7, #12]
 8014e54:	f000 f87e 	bl	8014f54 <SCSI_CheckAddressRange>
 8014e58:	4603      	mov	r3, r0
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	da02      	bge.n	8014e64 <SCSI_Write12+0x150>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8014e62:	e03b      	b.n	8014edc <SCSI_Write12+0x1c8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8014e64:	697a      	ldr	r2, [r7, #20]
 8014e66:	f248 0370 	movw	r3, #32880	; 0x8070
 8014e6a:	4413      	add	r3, r2
 8014e6c:	681a      	ldr	r2, [r3, #0]
 8014e6e:	6979      	ldr	r1, [r7, #20]
 8014e70:	f248 0364 	movw	r3, #32868	; 0x8064
 8014e74:	440b      	add	r3, r1
 8014e76:	881b      	ldrh	r3, [r3, #0]
 8014e78:	fb03 f302 	mul.w	r3, r3, r2
 8014e7c:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8014e7e:	697a      	ldr	r2, [r7, #20]
 8014e80:	f248 0318 	movw	r3, #32792	; 0x8018
 8014e84:	4413      	add	r3, r2
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	693a      	ldr	r2, [r7, #16]
 8014e8a:	429a      	cmp	r2, r3
 8014e8c:	d00c      	beq.n	8014ea8 <SCSI_Write12+0x194>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014e8e:	697a      	ldr	r2, [r7, #20]
 8014e90:	f248 031d 	movw	r3, #32797	; 0x801d
 8014e94:	4413      	add	r3, r2
 8014e96:	7819      	ldrb	r1, [r3, #0]
 8014e98:	2320      	movs	r3, #32
 8014e9a:	2205      	movs	r2, #5
 8014e9c:	68f8      	ldr	r0, [r7, #12]
 8014e9e:	f7ff fc1f 	bl	80146e0 <SCSI_SenseCode>
      return -1;
 8014ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8014ea6:	e019      	b.n	8014edc <SCSI_Write12+0x1c8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8014ea8:	693b      	ldr	r3, [r7, #16]
 8014eaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014eae:	bf28      	it	cs
 8014eb0:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8014eb4:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8014eb6:	697b      	ldr	r3, [r7, #20]
 8014eb8:	2201      	movs	r2, #1
 8014eba:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8014ebc:	697b      	ldr	r3, [r7, #20]
 8014ebe:	f103 0210 	add.w	r2, r3, #16
 8014ec2:	693b      	ldr	r3, [r7, #16]
 8014ec4:	2101      	movs	r1, #1
 8014ec6:	68f8      	ldr	r0, [r7, #12]
 8014ec8:	f004 fa31 	bl	801932e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8014ecc:	2300      	movs	r3, #0
 8014ece:	e005      	b.n	8014edc <SCSI_Write12+0x1c8>
    return SCSI_ProcessWrite(pdev, lun);
 8014ed0:	7afb      	ldrb	r3, [r7, #11]
 8014ed2:	4619      	mov	r1, r3
 8014ed4:	68f8      	ldr	r0, [r7, #12]
 8014ed6:	f000 f8ef 	bl	80150b8 <SCSI_ProcessWrite>
 8014eda:	4603      	mov	r3, r0
}
 8014edc:	4618      	mov	r0, r3
 8014ede:	3718      	adds	r7, #24
 8014ee0:	46bd      	mov	sp, r7
 8014ee2:	bd80      	pop	{r7, pc}

08014ee4 <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014ee4:	b580      	push	{r7, lr}
 8014ee6:	b086      	sub	sp, #24
 8014ee8:	af00      	add	r7, sp, #0
 8014eea:	60f8      	str	r0, [r7, #12]
 8014eec:	460b      	mov	r3, r1
 8014eee:	607a      	str	r2, [r7, #4]
 8014ef0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014ef8:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	3301      	adds	r3, #1
 8014efe:	781b      	ldrb	r3, [r3, #0]
 8014f00:	f003 0302 	and.w	r3, r3, #2
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d008      	beq.n	8014f1a <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8014f08:	7af9      	ldrb	r1, [r7, #11]
 8014f0a:	2324      	movs	r3, #36	; 0x24
 8014f0c:	2205      	movs	r2, #5
 8014f0e:	68f8      	ldr	r0, [r7, #12]
 8014f10:	f7ff fbe6 	bl	80146e0 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8014f14:	f04f 33ff 	mov.w	r3, #4294967295
 8014f18:	e018      	b.n	8014f4c <SCSI_Verify10+0x68>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8014f1a:	697a      	ldr	r2, [r7, #20]
 8014f1c:	f248 036c 	movw	r3, #32876	; 0x806c
 8014f20:	4413      	add	r3, r2
 8014f22:	6818      	ldr	r0, [r3, #0]
 8014f24:	697a      	ldr	r2, [r7, #20]
 8014f26:	f248 0370 	movw	r3, #32880	; 0x8070
 8014f2a:	4413      	add	r3, r2
 8014f2c:	681b      	ldr	r3, [r3, #0]
 8014f2e:	7af9      	ldrb	r1, [r7, #11]
 8014f30:	4602      	mov	r2, r0
 8014f32:	68f8      	ldr	r0, [r7, #12]
 8014f34:	f000 f80e 	bl	8014f54 <SCSI_CheckAddressRange>
 8014f38:	4603      	mov	r3, r0
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	da02      	bge.n	8014f44 <SCSI_Verify10+0x60>
  {
    return -1; /* error */
 8014f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8014f42:	e003      	b.n	8014f4c <SCSI_Verify10+0x68>
  }

  hmsc->bot_data_length = 0U;
 8014f44:	697b      	ldr	r3, [r7, #20]
 8014f46:	2200      	movs	r2, #0
 8014f48:	60da      	str	r2, [r3, #12]

  return 0;
 8014f4a:	2300      	movs	r3, #0
}
 8014f4c:	4618      	mov	r0, r3
 8014f4e:	3718      	adds	r7, #24
 8014f50:	46bd      	mov	sp, r7
 8014f52:	bd80      	pop	{r7, pc}

08014f54 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8014f54:	b580      	push	{r7, lr}
 8014f56:	b086      	sub	sp, #24
 8014f58:	af00      	add	r7, sp, #0
 8014f5a:	60f8      	str	r0, [r7, #12]
 8014f5c:	607a      	str	r2, [r7, #4]
 8014f5e:	603b      	str	r3, [r7, #0]
 8014f60:	460b      	mov	r3, r1
 8014f62:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014f6a:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8014f6c:	687a      	ldr	r2, [r7, #4]
 8014f6e:	683b      	ldr	r3, [r7, #0]
 8014f70:	441a      	add	r2, r3
 8014f72:	6979      	ldr	r1, [r7, #20]
 8014f74:	f248 0368 	movw	r3, #32872	; 0x8068
 8014f78:	440b      	add	r3, r1
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	429a      	cmp	r2, r3
 8014f7e:	d908      	bls.n	8014f92 <SCSI_CheckAddressRange+0x3e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8014f80:	7af9      	ldrb	r1, [r7, #11]
 8014f82:	2321      	movs	r3, #33	; 0x21
 8014f84:	2205      	movs	r2, #5
 8014f86:	68f8      	ldr	r0, [r7, #12]
 8014f88:	f7ff fbaa 	bl	80146e0 <SCSI_SenseCode>
    return -1;
 8014f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8014f90:	e000      	b.n	8014f94 <SCSI_CheckAddressRange+0x40>
  }

  return 0;
 8014f92:	2300      	movs	r3, #0
}
 8014f94:	4618      	mov	r0, r3
 8014f96:	3718      	adds	r7, #24
 8014f98:	46bd      	mov	sp, r7
 8014f9a:	bd80      	pop	{r7, pc}

08014f9c <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8014f9c:	b5b0      	push	{r4, r5, r7, lr}
 8014f9e:	b084      	sub	sp, #16
 8014fa0:	af00      	add	r7, sp, #0
 8014fa2:	6078      	str	r0, [r7, #4]
 8014fa4:	460b      	mov	r3, r1
 8014fa6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014fae:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8014fb0:	68fa      	ldr	r2, [r7, #12]
 8014fb2:	f248 0370 	movw	r3, #32880	; 0x8070
 8014fb6:	4413      	add	r3, r2
 8014fb8:	681a      	ldr	r2, [r3, #0]
 8014fba:	68f9      	ldr	r1, [r7, #12]
 8014fbc:	f248 0364 	movw	r3, #32868	; 0x8064
 8014fc0:	440b      	add	r3, r1
 8014fc2:	881b      	ldrh	r3, [r3, #0]
 8014fc4:	fb03 f302 	mul.w	r3, r3, r2
 8014fc8:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8014fca:	68bb      	ldr	r3, [r7, #8]
 8014fcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014fd0:	bf28      	it	cs
 8014fd2:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8014fd6:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014fde:	691c      	ldr	r4, [r3, #16]
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	f103 0110 	add.w	r1, r3, #16
 8014fe6:	68fa      	ldr	r2, [r7, #12]
 8014fe8:	f248 036c 	movw	r3, #32876	; 0x806c
 8014fec:	4413      	add	r3, r2
 8014fee:	681d      	ldr	r5, [r3, #0]
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8014ff0:	68fa      	ldr	r2, [r7, #12]
 8014ff2:	f248 0364 	movw	r3, #32868	; 0x8064
 8014ff6:	4413      	add	r3, r2
 8014ff8:	881b      	ldrh	r3, [r3, #0]
 8014ffa:	461a      	mov	r2, r3
 8014ffc:	68bb      	ldr	r3, [r7, #8]
 8014ffe:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8015002:	b29b      	uxth	r3, r3
 8015004:	78f8      	ldrb	r0, [r7, #3]
 8015006:	462a      	mov	r2, r5
 8015008:	47a0      	blx	r4
 801500a:	4603      	mov	r3, r0
 801500c:	2b00      	cmp	r3, #0
 801500e:	da08      	bge.n	8015022 <SCSI_ProcessRead+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8015010:	78f9      	ldrb	r1, [r7, #3]
 8015012:	2311      	movs	r3, #17
 8015014:	2204      	movs	r2, #4
 8015016:	6878      	ldr	r0, [r7, #4]
 8015018:	f7ff fb62 	bl	80146e0 <SCSI_SenseCode>
    return -1;
 801501c:	f04f 33ff 	mov.w	r3, #4294967295
 8015020:	e046      	b.n	80150b0 <SCSI_ProcessRead+0x114>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	f103 0210 	add.w	r2, r3, #16
 8015028:	68bb      	ldr	r3, [r7, #8]
 801502a:	2181      	movs	r1, #129	; 0x81
 801502c:	6878      	ldr	r0, [r7, #4]
 801502e:	f004 f95d 	bl	80192ec <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8015032:	68fa      	ldr	r2, [r7, #12]
 8015034:	f248 036c 	movw	r3, #32876	; 0x806c
 8015038:	4413      	add	r3, r2
 801503a:	681a      	ldr	r2, [r3, #0]
 801503c:	68f9      	ldr	r1, [r7, #12]
 801503e:	f248 0364 	movw	r3, #32868	; 0x8064
 8015042:	440b      	add	r3, r1
 8015044:	881b      	ldrh	r3, [r3, #0]
 8015046:	4619      	mov	r1, r3
 8015048:	68bb      	ldr	r3, [r7, #8]
 801504a:	fbb3 f3f1 	udiv	r3, r3, r1
 801504e:	441a      	add	r2, r3
 8015050:	68f9      	ldr	r1, [r7, #12]
 8015052:	f248 036c 	movw	r3, #32876	; 0x806c
 8015056:	440b      	add	r3, r1
 8015058:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801505a:	68fa      	ldr	r2, [r7, #12]
 801505c:	f248 0370 	movw	r3, #32880	; 0x8070
 8015060:	4413      	add	r3, r2
 8015062:	681a      	ldr	r2, [r3, #0]
 8015064:	68f9      	ldr	r1, [r7, #12]
 8015066:	f248 0364 	movw	r3, #32868	; 0x8064
 801506a:	440b      	add	r3, r1
 801506c:	881b      	ldrh	r3, [r3, #0]
 801506e:	4619      	mov	r1, r3
 8015070:	68bb      	ldr	r3, [r7, #8]
 8015072:	fbb3 f3f1 	udiv	r3, r3, r1
 8015076:	1ad2      	subs	r2, r2, r3
 8015078:	68f9      	ldr	r1, [r7, #12]
 801507a:	f248 0370 	movw	r3, #32880	; 0x8070
 801507e:	440b      	add	r3, r1
 8015080:	601a      	str	r2, [r3, #0]

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8015082:	68fa      	ldr	r2, [r7, #12]
 8015084:	f248 0338 	movw	r3, #32824	; 0x8038
 8015088:	4413      	add	r3, r2
 801508a:	681a      	ldr	r2, [r3, #0]
 801508c:	68bb      	ldr	r3, [r7, #8]
 801508e:	1ad2      	subs	r2, r2, r3
 8015090:	68f9      	ldr	r1, [r7, #12]
 8015092:	f248 0338 	movw	r3, #32824	; 0x8038
 8015096:	440b      	add	r3, r1
 8015098:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 801509a:	68fa      	ldr	r2, [r7, #12]
 801509c:	f248 0370 	movw	r3, #32880	; 0x8070
 80150a0:	4413      	add	r3, r2
 80150a2:	681b      	ldr	r3, [r3, #0]
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d102      	bne.n	80150ae <SCSI_ProcessRead+0x112>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	2203      	movs	r2, #3
 80150ac:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 80150ae:	2300      	movs	r3, #0
}
 80150b0:	4618      	mov	r0, r3
 80150b2:	3710      	adds	r7, #16
 80150b4:	46bd      	mov	sp, r7
 80150b6:	bdb0      	pop	{r4, r5, r7, pc}

080150b8 <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80150b8:	b5b0      	push	{r4, r5, r7, lr}
 80150ba:	b084      	sub	sp, #16
 80150bc:	af00      	add	r7, sp, #0
 80150be:	6078      	str	r0, [r7, #4]
 80150c0:	460b      	mov	r3, r1
 80150c2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80150ca:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80150cc:	68fa      	ldr	r2, [r7, #12]
 80150ce:	f248 0370 	movw	r3, #32880	; 0x8070
 80150d2:	4413      	add	r3, r2
 80150d4:	681a      	ldr	r2, [r3, #0]
 80150d6:	68f9      	ldr	r1, [r7, #12]
 80150d8:	f248 0364 	movw	r3, #32868	; 0x8064
 80150dc:	440b      	add	r3, r1
 80150de:	881b      	ldrh	r3, [r3, #0]
 80150e0:	fb03 f302 	mul.w	r3, r3, r2
 80150e4:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 80150e6:	68bb      	ldr	r3, [r7, #8]
 80150e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80150ec:	bf28      	it	cs
 80150ee:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80150f2:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80150fa:	695c      	ldr	r4, [r3, #20]
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	f103 0110 	add.w	r1, r3, #16
 8015102:	68fa      	ldr	r2, [r7, #12]
 8015104:	f248 036c 	movw	r3, #32876	; 0x806c
 8015108:	4413      	add	r3, r2
 801510a:	681d      	ldr	r5, [r3, #0]
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 801510c:	68fa      	ldr	r2, [r7, #12]
 801510e:	f248 0364 	movw	r3, #32868	; 0x8064
 8015112:	4413      	add	r3, r2
 8015114:	881b      	ldrh	r3, [r3, #0]
 8015116:	461a      	mov	r2, r3
 8015118:	68bb      	ldr	r3, [r7, #8]
 801511a:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 801511e:	b29b      	uxth	r3, r3
 8015120:	78f8      	ldrb	r0, [r7, #3]
 8015122:	462a      	mov	r2, r5
 8015124:	47a0      	blx	r4
 8015126:	4603      	mov	r3, r0
 8015128:	2b00      	cmp	r3, #0
 801512a:	da08      	bge.n	801513e <SCSI_ProcessWrite+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 801512c:	78f9      	ldrb	r1, [r7, #3]
 801512e:	2303      	movs	r3, #3
 8015130:	2204      	movs	r2, #4
 8015132:	6878      	ldr	r0, [r7, #4]
 8015134:	f7ff fad4 	bl	80146e0 <SCSI_SenseCode>
    return -1;
 8015138:	f04f 33ff 	mov.w	r3, #4294967295
 801513c:	e05a      	b.n	80151f4 <SCSI_ProcessWrite+0x13c>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801513e:	68fa      	ldr	r2, [r7, #12]
 8015140:	f248 036c 	movw	r3, #32876	; 0x806c
 8015144:	4413      	add	r3, r2
 8015146:	681a      	ldr	r2, [r3, #0]
 8015148:	68f9      	ldr	r1, [r7, #12]
 801514a:	f248 0364 	movw	r3, #32868	; 0x8064
 801514e:	440b      	add	r3, r1
 8015150:	881b      	ldrh	r3, [r3, #0]
 8015152:	4619      	mov	r1, r3
 8015154:	68bb      	ldr	r3, [r7, #8]
 8015156:	fbb3 f3f1 	udiv	r3, r3, r1
 801515a:	441a      	add	r2, r3
 801515c:	68f9      	ldr	r1, [r7, #12]
 801515e:	f248 036c 	movw	r3, #32876	; 0x806c
 8015162:	440b      	add	r3, r1
 8015164:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8015166:	68fa      	ldr	r2, [r7, #12]
 8015168:	f248 0370 	movw	r3, #32880	; 0x8070
 801516c:	4413      	add	r3, r2
 801516e:	681a      	ldr	r2, [r3, #0]
 8015170:	68f9      	ldr	r1, [r7, #12]
 8015172:	f248 0364 	movw	r3, #32868	; 0x8064
 8015176:	440b      	add	r3, r1
 8015178:	881b      	ldrh	r3, [r3, #0]
 801517a:	4619      	mov	r1, r3
 801517c:	68bb      	ldr	r3, [r7, #8]
 801517e:	fbb3 f3f1 	udiv	r3, r3, r1
 8015182:	1ad2      	subs	r2, r2, r3
 8015184:	68f9      	ldr	r1, [r7, #12]
 8015186:	f248 0370 	movw	r3, #32880	; 0x8070
 801518a:	440b      	add	r3, r1
 801518c:	601a      	str	r2, [r3, #0]

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 801518e:	68fa      	ldr	r2, [r7, #12]
 8015190:	f248 0338 	movw	r3, #32824	; 0x8038
 8015194:	4413      	add	r3, r2
 8015196:	681a      	ldr	r2, [r3, #0]
 8015198:	68bb      	ldr	r3, [r7, #8]
 801519a:	1ad2      	subs	r2, r2, r3
 801519c:	68f9      	ldr	r1, [r7, #12]
 801519e:	f248 0338 	movw	r3, #32824	; 0x8038
 80151a2:	440b      	add	r3, r1
 80151a4:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 80151a6:	68fa      	ldr	r2, [r7, #12]
 80151a8:	f248 0370 	movw	r3, #32880	; 0x8070
 80151ac:	4413      	add	r3, r2
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d104      	bne.n	80151be <SCSI_ProcessWrite+0x106>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80151b4:	2100      	movs	r1, #0
 80151b6:	6878      	ldr	r0, [r7, #4]
 80151b8:	f7fe fde2 	bl	8013d80 <MSC_BOT_SendCSW>
 80151bc:	e019      	b.n	80151f2 <SCSI_ProcessWrite+0x13a>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 80151be:	68fa      	ldr	r2, [r7, #12]
 80151c0:	f248 0370 	movw	r3, #32880	; 0x8070
 80151c4:	4413      	add	r3, r2
 80151c6:	681a      	ldr	r2, [r3, #0]
 80151c8:	68f9      	ldr	r1, [r7, #12]
 80151ca:	f248 0364 	movw	r3, #32868	; 0x8064
 80151ce:	440b      	add	r3, r1
 80151d0:	881b      	ldrh	r3, [r3, #0]
 80151d2:	fb03 f302 	mul.w	r3, r3, r2
 80151d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80151da:	bf28      	it	cs
 80151dc:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80151e0:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80151e2:	68fb      	ldr	r3, [r7, #12]
 80151e4:	f103 0210 	add.w	r2, r3, #16
 80151e8:	68bb      	ldr	r3, [r7, #8]
 80151ea:	2101      	movs	r1, #1
 80151ec:	6878      	ldr	r0, [r7, #4]
 80151ee:	f004 f89e 	bl	801932e <USBD_LL_PrepareReceive>
  }

  return 0;
 80151f2:	2300      	movs	r3, #0
}
 80151f4:	4618      	mov	r0, r3
 80151f6:	3710      	adds	r7, #16
 80151f8:	46bd      	mov	sp, r7
 80151fa:	bdb0      	pop	{r4, r5, r7, pc}

080151fc <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80151fc:	b480      	push	{r7}
 80151fe:	b087      	sub	sp, #28
 8015200:	af00      	add	r7, sp, #0
 8015202:	60f8      	str	r0, [r7, #12]
 8015204:	60b9      	str	r1, [r7, #8]
 8015206:	4613      	mov	r3, r2
 8015208:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 801520a:	88fb      	ldrh	r3, [r7, #6]
 801520c:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 801520e:	8afa      	ldrh	r2, [r7, #22]
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8015214:	e00b      	b.n	801522e <SCSI_UpdateBotData+0x32>
  {
    len--;
 8015216:	8afb      	ldrh	r3, [r7, #22]
 8015218:	3b01      	subs	r3, #1
 801521a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 801521c:	8afb      	ldrh	r3, [r7, #22]
 801521e:	68ba      	ldr	r2, [r7, #8]
 8015220:	441a      	add	r2, r3
 8015222:	8afb      	ldrh	r3, [r7, #22]
 8015224:	7811      	ldrb	r1, [r2, #0]
 8015226:	68fa      	ldr	r2, [r7, #12]
 8015228:	4413      	add	r3, r2
 801522a:	460a      	mov	r2, r1
 801522c:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 801522e:	8afb      	ldrh	r3, [r7, #22]
 8015230:	2b00      	cmp	r3, #0
 8015232:	d1f0      	bne.n	8015216 <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 8015234:	2300      	movs	r3, #0
}
 8015236:	4618      	mov	r0, r3
 8015238:	371c      	adds	r7, #28
 801523a:	46bd      	mov	sp, r7
 801523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015240:	4770      	bx	lr

08015242 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8015242:	b580      	push	{r7, lr}
 8015244:	b086      	sub	sp, #24
 8015246:	af00      	add	r7, sp, #0
 8015248:	60f8      	str	r0, [r7, #12]
 801524a:	60b9      	str	r1, [r7, #8]
 801524c:	4613      	mov	r3, r2
 801524e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	2b00      	cmp	r3, #0
 8015254:	d101      	bne.n	801525a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8015256:	2303      	movs	r3, #3
 8015258:	e025      	b.n	80152a6 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 801525a:	68fb      	ldr	r3, [r7, #12]
 801525c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015260:	2b00      	cmp	r3, #0
 8015262:	d003      	beq.n	801526c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8015264:	68fb      	ldr	r3, [r7, #12]
 8015266:	2200      	movs	r2, #0
 8015268:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8015272:	2b00      	cmp	r3, #0
 8015274:	d003      	beq.n	801527e <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	2200      	movs	r2, #0
 801527a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801527e:	68bb      	ldr	r3, [r7, #8]
 8015280:	2b00      	cmp	r3, #0
 8015282:	d003      	beq.n	801528c <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8015284:	68fb      	ldr	r3, [r7, #12]
 8015286:	68ba      	ldr	r2, [r7, #8]
 8015288:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801528c:	68fb      	ldr	r3, [r7, #12]
 801528e:	2201      	movs	r2, #1
 8015290:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	79fa      	ldrb	r2, [r7, #7]
 8015298:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801529a:	68f8      	ldr	r0, [r7, #12]
 801529c:	f003 fece 	bl	801903c <USBD_LL_Init>
 80152a0:	4603      	mov	r3, r0
 80152a2:	75fb      	strb	r3, [r7, #23]

  return ret;
 80152a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80152a6:	4618      	mov	r0, r3
 80152a8:	3718      	adds	r7, #24
 80152aa:	46bd      	mov	sp, r7
 80152ac:	bd80      	pop	{r7, pc}

080152ae <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80152ae:	b580      	push	{r7, lr}
 80152b0:	b084      	sub	sp, #16
 80152b2:	af00      	add	r7, sp, #0
 80152b4:	6078      	str	r0, [r7, #4]
 80152b6:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80152b8:	2300      	movs	r3, #0
 80152ba:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80152bc:	683b      	ldr	r3, [r7, #0]
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d101      	bne.n	80152c6 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80152c2:	2303      	movs	r3, #3
 80152c4:	e010      	b.n	80152e8 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	683a      	ldr	r2, [r7, #0]
 80152ca:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80152d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80152d6:	f107 020e 	add.w	r2, r7, #14
 80152da:	4610      	mov	r0, r2
 80152dc:	4798      	blx	r3
 80152de:	4602      	mov	r2, r0
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80152e6:	2300      	movs	r3, #0
}
 80152e8:	4618      	mov	r0, r3
 80152ea:	3710      	adds	r7, #16
 80152ec:	46bd      	mov	sp, r7
 80152ee:	bd80      	pop	{r7, pc}

080152f0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80152f0:	b580      	push	{r7, lr}
 80152f2:	b082      	sub	sp, #8
 80152f4:	af00      	add	r7, sp, #0
 80152f6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80152f8:	6878      	ldr	r0, [r7, #4]
 80152fa:	f003 feef 	bl	80190dc <USBD_LL_Start>
 80152fe:	4603      	mov	r3, r0
}
 8015300:	4618      	mov	r0, r3
 8015302:	3708      	adds	r7, #8
 8015304:	46bd      	mov	sp, r7
 8015306:	bd80      	pop	{r7, pc}

08015308 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8015308:	b480      	push	{r7}
 801530a:	b083      	sub	sp, #12
 801530c:	af00      	add	r7, sp, #0
 801530e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015310:	2300      	movs	r3, #0
}
 8015312:	4618      	mov	r0, r3
 8015314:	370c      	adds	r7, #12
 8015316:	46bd      	mov	sp, r7
 8015318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801531c:	4770      	bx	lr

0801531e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801531e:	b580      	push	{r7, lr}
 8015320:	b084      	sub	sp, #16
 8015322:	af00      	add	r7, sp, #0
 8015324:	6078      	str	r0, [r7, #4]
 8015326:	460b      	mov	r3, r1
 8015328:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801532a:	2303      	movs	r3, #3
 801532c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015334:	2b00      	cmp	r3, #0
 8015336:	d009      	beq.n	801534c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	78fa      	ldrb	r2, [r7, #3]
 8015342:	4611      	mov	r1, r2
 8015344:	6878      	ldr	r0, [r7, #4]
 8015346:	4798      	blx	r3
 8015348:	4603      	mov	r3, r0
 801534a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801534c:	7bfb      	ldrb	r3, [r7, #15]
}
 801534e:	4618      	mov	r0, r3
 8015350:	3710      	adds	r7, #16
 8015352:	46bd      	mov	sp, r7
 8015354:	bd80      	pop	{r7, pc}

08015356 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015356:	b580      	push	{r7, lr}
 8015358:	b082      	sub	sp, #8
 801535a:	af00      	add	r7, sp, #0
 801535c:	6078      	str	r0, [r7, #4]
 801535e:	460b      	mov	r3, r1
 8015360:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015368:	2b00      	cmp	r3, #0
 801536a:	d007      	beq.n	801537c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015372:	685b      	ldr	r3, [r3, #4]
 8015374:	78fa      	ldrb	r2, [r7, #3]
 8015376:	4611      	mov	r1, r2
 8015378:	6878      	ldr	r0, [r7, #4]
 801537a:	4798      	blx	r3
  }

  return USBD_OK;
 801537c:	2300      	movs	r3, #0
}
 801537e:	4618      	mov	r0, r3
 8015380:	3708      	adds	r7, #8
 8015382:	46bd      	mov	sp, r7
 8015384:	bd80      	pop	{r7, pc}

08015386 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015386:	b580      	push	{r7, lr}
 8015388:	b084      	sub	sp, #16
 801538a:	af00      	add	r7, sp, #0
 801538c:	6078      	str	r0, [r7, #4]
 801538e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015396:	6839      	ldr	r1, [r7, #0]
 8015398:	4618      	mov	r0, r3
 801539a:	f000 ff2b 	bl	80161f4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	2201      	movs	r2, #1
 80153a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80153ac:	461a      	mov	r2, r3
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80153ba:	f003 031f 	and.w	r3, r3, #31
 80153be:	2b01      	cmp	r3, #1
 80153c0:	d00e      	beq.n	80153e0 <USBD_LL_SetupStage+0x5a>
 80153c2:	2b01      	cmp	r3, #1
 80153c4:	d302      	bcc.n	80153cc <USBD_LL_SetupStage+0x46>
 80153c6:	2b02      	cmp	r3, #2
 80153c8:	d014      	beq.n	80153f4 <USBD_LL_SetupStage+0x6e>
 80153ca:	e01d      	b.n	8015408 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80153d2:	4619      	mov	r1, r3
 80153d4:	6878      	ldr	r0, [r7, #4]
 80153d6:	f000 fa17 	bl	8015808 <USBD_StdDevReq>
 80153da:	4603      	mov	r3, r0
 80153dc:	73fb      	strb	r3, [r7, #15]
      break;
 80153de:	e020      	b.n	8015422 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80153e6:	4619      	mov	r1, r3
 80153e8:	6878      	ldr	r0, [r7, #4]
 80153ea:	f000 fa7b 	bl	80158e4 <USBD_StdItfReq>
 80153ee:	4603      	mov	r3, r0
 80153f0:	73fb      	strb	r3, [r7, #15]
      break;
 80153f2:	e016      	b.n	8015422 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80153fa:	4619      	mov	r1, r3
 80153fc:	6878      	ldr	r0, [r7, #4]
 80153fe:	f000 fab7 	bl	8015970 <USBD_StdEPReq>
 8015402:	4603      	mov	r3, r0
 8015404:	73fb      	strb	r3, [r7, #15]
      break;
 8015406:	e00c      	b.n	8015422 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801540e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015412:	b2db      	uxtb	r3, r3
 8015414:	4619      	mov	r1, r3
 8015416:	6878      	ldr	r0, [r7, #4]
 8015418:	f003 fedf 	bl	80191da <USBD_LL_StallEP>
 801541c:	4603      	mov	r3, r0
 801541e:	73fb      	strb	r3, [r7, #15]
      break;
 8015420:	bf00      	nop
  }

  return ret;
 8015422:	7bfb      	ldrb	r3, [r7, #15]
}
 8015424:	4618      	mov	r0, r3
 8015426:	3710      	adds	r7, #16
 8015428:	46bd      	mov	sp, r7
 801542a:	bd80      	pop	{r7, pc}

0801542c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801542c:	b580      	push	{r7, lr}
 801542e:	b086      	sub	sp, #24
 8015430:	af00      	add	r7, sp, #0
 8015432:	60f8      	str	r0, [r7, #12]
 8015434:	460b      	mov	r3, r1
 8015436:	607a      	str	r2, [r7, #4]
 8015438:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801543a:	7afb      	ldrb	r3, [r7, #11]
 801543c:	2b00      	cmp	r3, #0
 801543e:	d137      	bne.n	80154b0 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015446:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801544e:	2b03      	cmp	r3, #3
 8015450:	d14a      	bne.n	80154e8 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8015452:	693b      	ldr	r3, [r7, #16]
 8015454:	689a      	ldr	r2, [r3, #8]
 8015456:	693b      	ldr	r3, [r7, #16]
 8015458:	68db      	ldr	r3, [r3, #12]
 801545a:	429a      	cmp	r2, r3
 801545c:	d913      	bls.n	8015486 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801545e:	693b      	ldr	r3, [r7, #16]
 8015460:	689a      	ldr	r2, [r3, #8]
 8015462:	693b      	ldr	r3, [r7, #16]
 8015464:	68db      	ldr	r3, [r3, #12]
 8015466:	1ad2      	subs	r2, r2, r3
 8015468:	693b      	ldr	r3, [r7, #16]
 801546a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801546c:	693b      	ldr	r3, [r7, #16]
 801546e:	68da      	ldr	r2, [r3, #12]
 8015470:	693b      	ldr	r3, [r7, #16]
 8015472:	689b      	ldr	r3, [r3, #8]
 8015474:	4293      	cmp	r3, r2
 8015476:	bf28      	it	cs
 8015478:	4613      	movcs	r3, r2
 801547a:	461a      	mov	r2, r3
 801547c:	6879      	ldr	r1, [r7, #4]
 801547e:	68f8      	ldr	r0, [r7, #12]
 8015480:	f000 ff8f 	bl	80163a2 <USBD_CtlContinueRx>
 8015484:	e030      	b.n	80154e8 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801548c:	691b      	ldr	r3, [r3, #16]
 801548e:	2b00      	cmp	r3, #0
 8015490:	d00a      	beq.n	80154a8 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015492:	68fb      	ldr	r3, [r7, #12]
 8015494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8015498:	2b03      	cmp	r3, #3
 801549a:	d105      	bne.n	80154a8 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154a2:	691b      	ldr	r3, [r3, #16]
 80154a4:	68f8      	ldr	r0, [r7, #12]
 80154a6:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80154a8:	68f8      	ldr	r0, [r7, #12]
 80154aa:	f000 ff8b 	bl	80163c4 <USBD_CtlSendStatus>
 80154ae:	e01b      	b.n	80154e8 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80154b0:	68fb      	ldr	r3, [r7, #12]
 80154b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154b6:	699b      	ldr	r3, [r3, #24]
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d013      	beq.n	80154e4 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80154bc:	68fb      	ldr	r3, [r7, #12]
 80154be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80154c2:	2b03      	cmp	r3, #3
 80154c4:	d10e      	bne.n	80154e4 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80154c6:	68fb      	ldr	r3, [r7, #12]
 80154c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154cc:	699b      	ldr	r3, [r3, #24]
 80154ce:	7afa      	ldrb	r2, [r7, #11]
 80154d0:	4611      	mov	r1, r2
 80154d2:	68f8      	ldr	r0, [r7, #12]
 80154d4:	4798      	blx	r3
 80154d6:	4603      	mov	r3, r0
 80154d8:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80154da:	7dfb      	ldrb	r3, [r7, #23]
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d003      	beq.n	80154e8 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80154e0:	7dfb      	ldrb	r3, [r7, #23]
 80154e2:	e002      	b.n	80154ea <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80154e4:	2303      	movs	r3, #3
 80154e6:	e000      	b.n	80154ea <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80154e8:	2300      	movs	r3, #0
}
 80154ea:	4618      	mov	r0, r3
 80154ec:	3718      	adds	r7, #24
 80154ee:	46bd      	mov	sp, r7
 80154f0:	bd80      	pop	{r7, pc}

080154f2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80154f2:	b580      	push	{r7, lr}
 80154f4:	b086      	sub	sp, #24
 80154f6:	af00      	add	r7, sp, #0
 80154f8:	60f8      	str	r0, [r7, #12]
 80154fa:	460b      	mov	r3, r1
 80154fc:	607a      	str	r2, [r7, #4]
 80154fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8015500:	7afb      	ldrb	r3, [r7, #11]
 8015502:	2b00      	cmp	r3, #0
 8015504:	d16a      	bne.n	80155dc <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	3314      	adds	r3, #20
 801550a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015512:	2b02      	cmp	r3, #2
 8015514:	d155      	bne.n	80155c2 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8015516:	693b      	ldr	r3, [r7, #16]
 8015518:	689a      	ldr	r2, [r3, #8]
 801551a:	693b      	ldr	r3, [r7, #16]
 801551c:	68db      	ldr	r3, [r3, #12]
 801551e:	429a      	cmp	r2, r3
 8015520:	d914      	bls.n	801554c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015522:	693b      	ldr	r3, [r7, #16]
 8015524:	689a      	ldr	r2, [r3, #8]
 8015526:	693b      	ldr	r3, [r7, #16]
 8015528:	68db      	ldr	r3, [r3, #12]
 801552a:	1ad2      	subs	r2, r2, r3
 801552c:	693b      	ldr	r3, [r7, #16]
 801552e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015530:	693b      	ldr	r3, [r7, #16]
 8015532:	689b      	ldr	r3, [r3, #8]
 8015534:	461a      	mov	r2, r3
 8015536:	6879      	ldr	r1, [r7, #4]
 8015538:	68f8      	ldr	r0, [r7, #12]
 801553a:	f000 ff21 	bl	8016380 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801553e:	2300      	movs	r3, #0
 8015540:	2200      	movs	r2, #0
 8015542:	2100      	movs	r1, #0
 8015544:	68f8      	ldr	r0, [r7, #12]
 8015546:	f003 fef2 	bl	801932e <USBD_LL_PrepareReceive>
 801554a:	e03a      	b.n	80155c2 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801554c:	693b      	ldr	r3, [r7, #16]
 801554e:	68da      	ldr	r2, [r3, #12]
 8015550:	693b      	ldr	r3, [r7, #16]
 8015552:	689b      	ldr	r3, [r3, #8]
 8015554:	429a      	cmp	r2, r3
 8015556:	d11c      	bne.n	8015592 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8015558:	693b      	ldr	r3, [r7, #16]
 801555a:	685a      	ldr	r2, [r3, #4]
 801555c:	693b      	ldr	r3, [r7, #16]
 801555e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015560:	429a      	cmp	r2, r3
 8015562:	d316      	bcc.n	8015592 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015564:	693b      	ldr	r3, [r7, #16]
 8015566:	685a      	ldr	r2, [r3, #4]
 8015568:	68fb      	ldr	r3, [r7, #12]
 801556a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801556e:	429a      	cmp	r2, r3
 8015570:	d20f      	bcs.n	8015592 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015572:	2200      	movs	r2, #0
 8015574:	2100      	movs	r1, #0
 8015576:	68f8      	ldr	r0, [r7, #12]
 8015578:	f000 ff02 	bl	8016380 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	2200      	movs	r2, #0
 8015580:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015584:	2300      	movs	r3, #0
 8015586:	2200      	movs	r2, #0
 8015588:	2100      	movs	r1, #0
 801558a:	68f8      	ldr	r0, [r7, #12]
 801558c:	f003 fecf 	bl	801932e <USBD_LL_PrepareReceive>
 8015590:	e017      	b.n	80155c2 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015598:	68db      	ldr	r3, [r3, #12]
 801559a:	2b00      	cmp	r3, #0
 801559c:	d00a      	beq.n	80155b4 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801559e:	68fb      	ldr	r3, [r7, #12]
 80155a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80155a4:	2b03      	cmp	r3, #3
 80155a6:	d105      	bne.n	80155b4 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155ae:	68db      	ldr	r3, [r3, #12]
 80155b0:	68f8      	ldr	r0, [r7, #12]
 80155b2:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80155b4:	2180      	movs	r1, #128	; 0x80
 80155b6:	68f8      	ldr	r0, [r7, #12]
 80155b8:	f003 fe0f 	bl	80191da <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80155bc:	68f8      	ldr	r0, [r7, #12]
 80155be:	f000 ff14 	bl	80163ea <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80155c2:	68fb      	ldr	r3, [r7, #12]
 80155c4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80155c8:	2b01      	cmp	r3, #1
 80155ca:	d123      	bne.n	8015614 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80155cc:	68f8      	ldr	r0, [r7, #12]
 80155ce:	f7ff fe9b 	bl	8015308 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	2200      	movs	r2, #0
 80155d6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80155da:	e01b      	b.n	8015614 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155e2:	695b      	ldr	r3, [r3, #20]
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d013      	beq.n	8015610 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80155e8:	68fb      	ldr	r3, [r7, #12]
 80155ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80155ee:	2b03      	cmp	r3, #3
 80155f0:	d10e      	bne.n	8015610 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155f8:	695b      	ldr	r3, [r3, #20]
 80155fa:	7afa      	ldrb	r2, [r7, #11]
 80155fc:	4611      	mov	r1, r2
 80155fe:	68f8      	ldr	r0, [r7, #12]
 8015600:	4798      	blx	r3
 8015602:	4603      	mov	r3, r0
 8015604:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8015606:	7dfb      	ldrb	r3, [r7, #23]
 8015608:	2b00      	cmp	r3, #0
 801560a:	d003      	beq.n	8015614 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 801560c:	7dfb      	ldrb	r3, [r7, #23]
 801560e:	e002      	b.n	8015616 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8015610:	2303      	movs	r3, #3
 8015612:	e000      	b.n	8015616 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8015614:	2300      	movs	r3, #0
}
 8015616:	4618      	mov	r0, r3
 8015618:	3718      	adds	r7, #24
 801561a:	46bd      	mov	sp, r7
 801561c:	bd80      	pop	{r7, pc}

0801561e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801561e:	b580      	push	{r7, lr}
 8015620:	b082      	sub	sp, #8
 8015622:	af00      	add	r7, sp, #0
 8015624:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	2201      	movs	r2, #1
 801562a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	2200      	movs	r2, #0
 8015632:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	2200      	movs	r2, #0
 801563a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	2200      	movs	r2, #0
 8015640:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801564a:	2b00      	cmp	r3, #0
 801564c:	d009      	beq.n	8015662 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015654:	685b      	ldr	r3, [r3, #4]
 8015656:	687a      	ldr	r2, [r7, #4]
 8015658:	6852      	ldr	r2, [r2, #4]
 801565a:	b2d2      	uxtb	r2, r2
 801565c:	4611      	mov	r1, r2
 801565e:	6878      	ldr	r0, [r7, #4]
 8015660:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015662:	2340      	movs	r3, #64	; 0x40
 8015664:	2200      	movs	r2, #0
 8015666:	2100      	movs	r1, #0
 8015668:	6878      	ldr	r0, [r7, #4]
 801566a:	f003 fd52 	bl	8019112 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	2201      	movs	r2, #1
 8015672:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	2240      	movs	r2, #64	; 0x40
 801567a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801567e:	2340      	movs	r3, #64	; 0x40
 8015680:	2200      	movs	r2, #0
 8015682:	2180      	movs	r1, #128	; 0x80
 8015684:	6878      	ldr	r0, [r7, #4]
 8015686:	f003 fd44 	bl	8019112 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	2201      	movs	r2, #1
 801568e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	2240      	movs	r2, #64	; 0x40
 8015694:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8015696:	2300      	movs	r3, #0
}
 8015698:	4618      	mov	r0, r3
 801569a:	3708      	adds	r7, #8
 801569c:	46bd      	mov	sp, r7
 801569e:	bd80      	pop	{r7, pc}

080156a0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80156a0:	b480      	push	{r7}
 80156a2:	b083      	sub	sp, #12
 80156a4:	af00      	add	r7, sp, #0
 80156a6:	6078      	str	r0, [r7, #4]
 80156a8:	460b      	mov	r3, r1
 80156aa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	78fa      	ldrb	r2, [r7, #3]
 80156b0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80156b2:	2300      	movs	r3, #0
}
 80156b4:	4618      	mov	r0, r3
 80156b6:	370c      	adds	r7, #12
 80156b8:	46bd      	mov	sp, r7
 80156ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156be:	4770      	bx	lr

080156c0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80156c0:	b480      	push	{r7}
 80156c2:	b083      	sub	sp, #12
 80156c4:	af00      	add	r7, sp, #0
 80156c6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	2204      	movs	r2, #4
 80156d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80156dc:	2300      	movs	r3, #0
}
 80156de:	4618      	mov	r0, r3
 80156e0:	370c      	adds	r7, #12
 80156e2:	46bd      	mov	sp, r7
 80156e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156e8:	4770      	bx	lr

080156ea <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80156ea:	b480      	push	{r7}
 80156ec:	b083      	sub	sp, #12
 80156ee:	af00      	add	r7, sp, #0
 80156f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80156f8:	2b04      	cmp	r3, #4
 80156fa:	d105      	bne.n	8015708 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8015708:	2300      	movs	r3, #0
}
 801570a:	4618      	mov	r0, r3
 801570c:	370c      	adds	r7, #12
 801570e:	46bd      	mov	sp, r7
 8015710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015714:	4770      	bx	lr

08015716 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015716:	b580      	push	{r7, lr}
 8015718:	b082      	sub	sp, #8
 801571a:	af00      	add	r7, sp, #0
 801571c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015724:	2b03      	cmp	r3, #3
 8015726:	d10b      	bne.n	8015740 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801572e:	69db      	ldr	r3, [r3, #28]
 8015730:	2b00      	cmp	r3, #0
 8015732:	d005      	beq.n	8015740 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801573a:	69db      	ldr	r3, [r3, #28]
 801573c:	6878      	ldr	r0, [r7, #4]
 801573e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015740:	2300      	movs	r3, #0
}
 8015742:	4618      	mov	r0, r3
 8015744:	3708      	adds	r7, #8
 8015746:	46bd      	mov	sp, r7
 8015748:	bd80      	pop	{r7, pc}

0801574a <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801574a:	b480      	push	{r7}
 801574c:	b083      	sub	sp, #12
 801574e:	af00      	add	r7, sp, #0
 8015750:	6078      	str	r0, [r7, #4]
 8015752:	460b      	mov	r3, r1
 8015754:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8015756:	2300      	movs	r3, #0
}
 8015758:	4618      	mov	r0, r3
 801575a:	370c      	adds	r7, #12
 801575c:	46bd      	mov	sp, r7
 801575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015762:	4770      	bx	lr

08015764 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015764:	b480      	push	{r7}
 8015766:	b083      	sub	sp, #12
 8015768:	af00      	add	r7, sp, #0
 801576a:	6078      	str	r0, [r7, #4]
 801576c:	460b      	mov	r3, r1
 801576e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8015770:	2300      	movs	r3, #0
}
 8015772:	4618      	mov	r0, r3
 8015774:	370c      	adds	r7, #12
 8015776:	46bd      	mov	sp, r7
 8015778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801577c:	4770      	bx	lr

0801577e <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801577e:	b480      	push	{r7}
 8015780:	b083      	sub	sp, #12
 8015782:	af00      	add	r7, sp, #0
 8015784:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015786:	2300      	movs	r3, #0
}
 8015788:	4618      	mov	r0, r3
 801578a:	370c      	adds	r7, #12
 801578c:	46bd      	mov	sp, r7
 801578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015792:	4770      	bx	lr

08015794 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8015794:	b580      	push	{r7, lr}
 8015796:	b082      	sub	sp, #8
 8015798:	af00      	add	r7, sp, #0
 801579a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	2201      	movs	r2, #1
 80157a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d009      	beq.n	80157c2 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80157b4:	685b      	ldr	r3, [r3, #4]
 80157b6:	687a      	ldr	r2, [r7, #4]
 80157b8:	6852      	ldr	r2, [r2, #4]
 80157ba:	b2d2      	uxtb	r2, r2
 80157bc:	4611      	mov	r1, r2
 80157be:	6878      	ldr	r0, [r7, #4]
 80157c0:	4798      	blx	r3
  }

  return USBD_OK;
 80157c2:	2300      	movs	r3, #0
}
 80157c4:	4618      	mov	r0, r3
 80157c6:	3708      	adds	r7, #8
 80157c8:	46bd      	mov	sp, r7
 80157ca:	bd80      	pop	{r7, pc}

080157cc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80157cc:	b480      	push	{r7}
 80157ce:	b087      	sub	sp, #28
 80157d0:	af00      	add	r7, sp, #0
 80157d2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80157d8:	697b      	ldr	r3, [r7, #20]
 80157da:	781b      	ldrb	r3, [r3, #0]
 80157dc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80157de:	697b      	ldr	r3, [r7, #20]
 80157e0:	3301      	adds	r3, #1
 80157e2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80157e4:	697b      	ldr	r3, [r7, #20]
 80157e6:	781b      	ldrb	r3, [r3, #0]
 80157e8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80157ea:	8a3b      	ldrh	r3, [r7, #16]
 80157ec:	021b      	lsls	r3, r3, #8
 80157ee:	b21a      	sxth	r2, r3
 80157f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80157f4:	4313      	orrs	r3, r2
 80157f6:	b21b      	sxth	r3, r3
 80157f8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80157fa:	89fb      	ldrh	r3, [r7, #14]
}
 80157fc:	4618      	mov	r0, r3
 80157fe:	371c      	adds	r7, #28
 8015800:	46bd      	mov	sp, r7
 8015802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015806:	4770      	bx	lr

08015808 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015808:	b580      	push	{r7, lr}
 801580a:	b084      	sub	sp, #16
 801580c:	af00      	add	r7, sp, #0
 801580e:	6078      	str	r0, [r7, #4]
 8015810:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015812:	2300      	movs	r3, #0
 8015814:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015816:	683b      	ldr	r3, [r7, #0]
 8015818:	781b      	ldrb	r3, [r3, #0]
 801581a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801581e:	2b20      	cmp	r3, #32
 8015820:	d004      	beq.n	801582c <USBD_StdDevReq+0x24>
 8015822:	2b40      	cmp	r3, #64	; 0x40
 8015824:	d002      	beq.n	801582c <USBD_StdDevReq+0x24>
 8015826:	2b00      	cmp	r3, #0
 8015828:	d00a      	beq.n	8015840 <USBD_StdDevReq+0x38>
 801582a:	e050      	b.n	80158ce <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015832:	689b      	ldr	r3, [r3, #8]
 8015834:	6839      	ldr	r1, [r7, #0]
 8015836:	6878      	ldr	r0, [r7, #4]
 8015838:	4798      	blx	r3
 801583a:	4603      	mov	r3, r0
 801583c:	73fb      	strb	r3, [r7, #15]
    break;
 801583e:	e04b      	b.n	80158d8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8015840:	683b      	ldr	r3, [r7, #0]
 8015842:	785b      	ldrb	r3, [r3, #1]
 8015844:	2b09      	cmp	r3, #9
 8015846:	d83c      	bhi.n	80158c2 <USBD_StdDevReq+0xba>
 8015848:	a201      	add	r2, pc, #4	; (adr r2, 8015850 <USBD_StdDevReq+0x48>)
 801584a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801584e:	bf00      	nop
 8015850:	080158a5 	.word	0x080158a5
 8015854:	080158b9 	.word	0x080158b9
 8015858:	080158c3 	.word	0x080158c3
 801585c:	080158af 	.word	0x080158af
 8015860:	080158c3 	.word	0x080158c3
 8015864:	08015883 	.word	0x08015883
 8015868:	08015879 	.word	0x08015879
 801586c:	080158c3 	.word	0x080158c3
 8015870:	0801589b 	.word	0x0801589b
 8015874:	0801588d 	.word	0x0801588d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8015878:	6839      	ldr	r1, [r7, #0]
 801587a:	6878      	ldr	r0, [r7, #4]
 801587c:	f000 f9ce 	bl	8015c1c <USBD_GetDescriptor>
      break;
 8015880:	e024      	b.n	80158cc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8015882:	6839      	ldr	r1, [r7, #0]
 8015884:	6878      	ldr	r0, [r7, #4]
 8015886:	f000 fb33 	bl	8015ef0 <USBD_SetAddress>
      break;
 801588a:	e01f      	b.n	80158cc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 801588c:	6839      	ldr	r1, [r7, #0]
 801588e:	6878      	ldr	r0, [r7, #4]
 8015890:	f000 fb70 	bl	8015f74 <USBD_SetConfig>
 8015894:	4603      	mov	r3, r0
 8015896:	73fb      	strb	r3, [r7, #15]
      break;
 8015898:	e018      	b.n	80158cc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 801589a:	6839      	ldr	r1, [r7, #0]
 801589c:	6878      	ldr	r0, [r7, #4]
 801589e:	f000 fc0d 	bl	80160bc <USBD_GetConfig>
      break;
 80158a2:	e013      	b.n	80158cc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80158a4:	6839      	ldr	r1, [r7, #0]
 80158a6:	6878      	ldr	r0, [r7, #4]
 80158a8:	f000 fc3c 	bl	8016124 <USBD_GetStatus>
      break;
 80158ac:	e00e      	b.n	80158cc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80158ae:	6839      	ldr	r1, [r7, #0]
 80158b0:	6878      	ldr	r0, [r7, #4]
 80158b2:	f000 fc6a 	bl	801618a <USBD_SetFeature>
      break;
 80158b6:	e009      	b.n	80158cc <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80158b8:	6839      	ldr	r1, [r7, #0]
 80158ba:	6878      	ldr	r0, [r7, #4]
 80158bc:	f000 fc79 	bl	80161b2 <USBD_ClrFeature>
      break;
 80158c0:	e004      	b.n	80158cc <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80158c2:	6839      	ldr	r1, [r7, #0]
 80158c4:	6878      	ldr	r0, [r7, #4]
 80158c6:	f000 fccf 	bl	8016268 <USBD_CtlError>
      break;
 80158ca:	bf00      	nop
    }
    break;
 80158cc:	e004      	b.n	80158d8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80158ce:	6839      	ldr	r1, [r7, #0]
 80158d0:	6878      	ldr	r0, [r7, #4]
 80158d2:	f000 fcc9 	bl	8016268 <USBD_CtlError>
    break;
 80158d6:	bf00      	nop
  }

  return ret;
 80158d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80158da:	4618      	mov	r0, r3
 80158dc:	3710      	adds	r7, #16
 80158de:	46bd      	mov	sp, r7
 80158e0:	bd80      	pop	{r7, pc}
 80158e2:	bf00      	nop

080158e4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80158e4:	b580      	push	{r7, lr}
 80158e6:	b084      	sub	sp, #16
 80158e8:	af00      	add	r7, sp, #0
 80158ea:	6078      	str	r0, [r7, #4]
 80158ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80158ee:	2300      	movs	r3, #0
 80158f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80158f2:	683b      	ldr	r3, [r7, #0]
 80158f4:	781b      	ldrb	r3, [r3, #0]
 80158f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80158fa:	2b20      	cmp	r3, #32
 80158fc:	d003      	beq.n	8015906 <USBD_StdItfReq+0x22>
 80158fe:	2b40      	cmp	r3, #64	; 0x40
 8015900:	d001      	beq.n	8015906 <USBD_StdItfReq+0x22>
 8015902:	2b00      	cmp	r3, #0
 8015904:	d12a      	bne.n	801595c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801590c:	3b01      	subs	r3, #1
 801590e:	2b02      	cmp	r3, #2
 8015910:	d81d      	bhi.n	801594e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015912:	683b      	ldr	r3, [r7, #0]
 8015914:	889b      	ldrh	r3, [r3, #4]
 8015916:	b2db      	uxtb	r3, r3
 8015918:	2b01      	cmp	r3, #1
 801591a:	d813      	bhi.n	8015944 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015922:	689b      	ldr	r3, [r3, #8]
 8015924:	6839      	ldr	r1, [r7, #0]
 8015926:	6878      	ldr	r0, [r7, #4]
 8015928:	4798      	blx	r3
 801592a:	4603      	mov	r3, r0
 801592c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 801592e:	683b      	ldr	r3, [r7, #0]
 8015930:	88db      	ldrh	r3, [r3, #6]
 8015932:	2b00      	cmp	r3, #0
 8015934:	d110      	bne.n	8015958 <USBD_StdItfReq+0x74>
 8015936:	7bfb      	ldrb	r3, [r7, #15]
 8015938:	2b00      	cmp	r3, #0
 801593a:	d10d      	bne.n	8015958 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 801593c:	6878      	ldr	r0, [r7, #4]
 801593e:	f000 fd41 	bl	80163c4 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8015942:	e009      	b.n	8015958 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8015944:	6839      	ldr	r1, [r7, #0]
 8015946:	6878      	ldr	r0, [r7, #4]
 8015948:	f000 fc8e 	bl	8016268 <USBD_CtlError>
      break;
 801594c:	e004      	b.n	8015958 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 801594e:	6839      	ldr	r1, [r7, #0]
 8015950:	6878      	ldr	r0, [r7, #4]
 8015952:	f000 fc89 	bl	8016268 <USBD_CtlError>
      break;
 8015956:	e000      	b.n	801595a <USBD_StdItfReq+0x76>
      break;
 8015958:	bf00      	nop
    }
    break;
 801595a:	e004      	b.n	8015966 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 801595c:	6839      	ldr	r1, [r7, #0]
 801595e:	6878      	ldr	r0, [r7, #4]
 8015960:	f000 fc82 	bl	8016268 <USBD_CtlError>
    break;
 8015964:	bf00      	nop
  }

  return ret;
 8015966:	7bfb      	ldrb	r3, [r7, #15]
}
 8015968:	4618      	mov	r0, r3
 801596a:	3710      	adds	r7, #16
 801596c:	46bd      	mov	sp, r7
 801596e:	bd80      	pop	{r7, pc}

08015970 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015970:	b580      	push	{r7, lr}
 8015972:	b084      	sub	sp, #16
 8015974:	af00      	add	r7, sp, #0
 8015976:	6078      	str	r0, [r7, #4]
 8015978:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801597a:	2300      	movs	r3, #0
 801597c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801597e:	683b      	ldr	r3, [r7, #0]
 8015980:	889b      	ldrh	r3, [r3, #4]
 8015982:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015984:	683b      	ldr	r3, [r7, #0]
 8015986:	781b      	ldrb	r3, [r3, #0]
 8015988:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801598c:	2b20      	cmp	r3, #32
 801598e:	d004      	beq.n	801599a <USBD_StdEPReq+0x2a>
 8015990:	2b40      	cmp	r3, #64	; 0x40
 8015992:	d002      	beq.n	801599a <USBD_StdEPReq+0x2a>
 8015994:	2b00      	cmp	r3, #0
 8015996:	d00a      	beq.n	80159ae <USBD_StdEPReq+0x3e>
 8015998:	e135      	b.n	8015c06 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80159a0:	689b      	ldr	r3, [r3, #8]
 80159a2:	6839      	ldr	r1, [r7, #0]
 80159a4:	6878      	ldr	r0, [r7, #4]
 80159a6:	4798      	blx	r3
 80159a8:	4603      	mov	r3, r0
 80159aa:	73fb      	strb	r3, [r7, #15]
    break;
 80159ac:	e130      	b.n	8015c10 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80159ae:	683b      	ldr	r3, [r7, #0]
 80159b0:	785b      	ldrb	r3, [r3, #1]
 80159b2:	2b01      	cmp	r3, #1
 80159b4:	d03e      	beq.n	8015a34 <USBD_StdEPReq+0xc4>
 80159b6:	2b03      	cmp	r3, #3
 80159b8:	d002      	beq.n	80159c0 <USBD_StdEPReq+0x50>
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d077      	beq.n	8015aae <USBD_StdEPReq+0x13e>
 80159be:	e11c      	b.n	8015bfa <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80159c6:	2b02      	cmp	r3, #2
 80159c8:	d002      	beq.n	80159d0 <USBD_StdEPReq+0x60>
 80159ca:	2b03      	cmp	r3, #3
 80159cc:	d015      	beq.n	80159fa <USBD_StdEPReq+0x8a>
 80159ce:	e02b      	b.n	8015a28 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80159d0:	7bbb      	ldrb	r3, [r7, #14]
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d00c      	beq.n	80159f0 <USBD_StdEPReq+0x80>
 80159d6:	7bbb      	ldrb	r3, [r7, #14]
 80159d8:	2b80      	cmp	r3, #128	; 0x80
 80159da:	d009      	beq.n	80159f0 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80159dc:	7bbb      	ldrb	r3, [r7, #14]
 80159de:	4619      	mov	r1, r3
 80159e0:	6878      	ldr	r0, [r7, #4]
 80159e2:	f003 fbfa 	bl	80191da <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80159e6:	2180      	movs	r1, #128	; 0x80
 80159e8:	6878      	ldr	r0, [r7, #4]
 80159ea:	f003 fbf6 	bl	80191da <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80159ee:	e020      	b.n	8015a32 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80159f0:	6839      	ldr	r1, [r7, #0]
 80159f2:	6878      	ldr	r0, [r7, #4]
 80159f4:	f000 fc38 	bl	8016268 <USBD_CtlError>
        break;
 80159f8:	e01b      	b.n	8015a32 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80159fa:	683b      	ldr	r3, [r7, #0]
 80159fc:	885b      	ldrh	r3, [r3, #2]
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d10e      	bne.n	8015a20 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015a02:	7bbb      	ldrb	r3, [r7, #14]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d00b      	beq.n	8015a20 <USBD_StdEPReq+0xb0>
 8015a08:	7bbb      	ldrb	r3, [r7, #14]
 8015a0a:	2b80      	cmp	r3, #128	; 0x80
 8015a0c:	d008      	beq.n	8015a20 <USBD_StdEPReq+0xb0>
 8015a0e:	683b      	ldr	r3, [r7, #0]
 8015a10:	88db      	ldrh	r3, [r3, #6]
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d104      	bne.n	8015a20 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8015a16:	7bbb      	ldrb	r3, [r7, #14]
 8015a18:	4619      	mov	r1, r3
 8015a1a:	6878      	ldr	r0, [r7, #4]
 8015a1c:	f003 fbdd 	bl	80191da <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8015a20:	6878      	ldr	r0, [r7, #4]
 8015a22:	f000 fccf 	bl	80163c4 <USBD_CtlSendStatus>

        break;
 8015a26:	e004      	b.n	8015a32 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8015a28:	6839      	ldr	r1, [r7, #0]
 8015a2a:	6878      	ldr	r0, [r7, #4]
 8015a2c:	f000 fc1c 	bl	8016268 <USBD_CtlError>
        break;
 8015a30:	bf00      	nop
      }
      break;
 8015a32:	e0e7      	b.n	8015c04 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a3a:	2b02      	cmp	r3, #2
 8015a3c:	d002      	beq.n	8015a44 <USBD_StdEPReq+0xd4>
 8015a3e:	2b03      	cmp	r3, #3
 8015a40:	d015      	beq.n	8015a6e <USBD_StdEPReq+0xfe>
 8015a42:	e02d      	b.n	8015aa0 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015a44:	7bbb      	ldrb	r3, [r7, #14]
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d00c      	beq.n	8015a64 <USBD_StdEPReq+0xf4>
 8015a4a:	7bbb      	ldrb	r3, [r7, #14]
 8015a4c:	2b80      	cmp	r3, #128	; 0x80
 8015a4e:	d009      	beq.n	8015a64 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8015a50:	7bbb      	ldrb	r3, [r7, #14]
 8015a52:	4619      	mov	r1, r3
 8015a54:	6878      	ldr	r0, [r7, #4]
 8015a56:	f003 fbc0 	bl	80191da <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015a5a:	2180      	movs	r1, #128	; 0x80
 8015a5c:	6878      	ldr	r0, [r7, #4]
 8015a5e:	f003 fbbc 	bl	80191da <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8015a62:	e023      	b.n	8015aac <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8015a64:	6839      	ldr	r1, [r7, #0]
 8015a66:	6878      	ldr	r0, [r7, #4]
 8015a68:	f000 fbfe 	bl	8016268 <USBD_CtlError>
        break;
 8015a6c:	e01e      	b.n	8015aac <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8015a6e:	683b      	ldr	r3, [r7, #0]
 8015a70:	885b      	ldrh	r3, [r3, #2]
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d119      	bne.n	8015aaa <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8015a76:	7bbb      	ldrb	r3, [r7, #14]
 8015a78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d004      	beq.n	8015a8a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015a80:	7bbb      	ldrb	r3, [r7, #14]
 8015a82:	4619      	mov	r1, r3
 8015a84:	6878      	ldr	r0, [r7, #4]
 8015a86:	f003 fbc7 	bl	8019218 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8015a8a:	6878      	ldr	r0, [r7, #4]
 8015a8c:	f000 fc9a 	bl	80163c4 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a96:	689b      	ldr	r3, [r3, #8]
 8015a98:	6839      	ldr	r1, [r7, #0]
 8015a9a:	6878      	ldr	r0, [r7, #4]
 8015a9c:	4798      	blx	r3
        }
        break;
 8015a9e:	e004      	b.n	8015aaa <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8015aa0:	6839      	ldr	r1, [r7, #0]
 8015aa2:	6878      	ldr	r0, [r7, #4]
 8015aa4:	f000 fbe0 	bl	8016268 <USBD_CtlError>
        break;
 8015aa8:	e000      	b.n	8015aac <USBD_StdEPReq+0x13c>
        break;
 8015aaa:	bf00      	nop
      }
      break;
 8015aac:	e0aa      	b.n	8015c04 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ab4:	2b02      	cmp	r3, #2
 8015ab6:	d002      	beq.n	8015abe <USBD_StdEPReq+0x14e>
 8015ab8:	2b03      	cmp	r3, #3
 8015aba:	d032      	beq.n	8015b22 <USBD_StdEPReq+0x1b2>
 8015abc:	e097      	b.n	8015bee <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015abe:	7bbb      	ldrb	r3, [r7, #14]
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d007      	beq.n	8015ad4 <USBD_StdEPReq+0x164>
 8015ac4:	7bbb      	ldrb	r3, [r7, #14]
 8015ac6:	2b80      	cmp	r3, #128	; 0x80
 8015ac8:	d004      	beq.n	8015ad4 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8015aca:	6839      	ldr	r1, [r7, #0]
 8015acc:	6878      	ldr	r0, [r7, #4]
 8015ace:	f000 fbcb 	bl	8016268 <USBD_CtlError>
          break;
 8015ad2:	e091      	b.n	8015bf8 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015ad4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	da0b      	bge.n	8015af4 <USBD_StdEPReq+0x184>
 8015adc:	7bbb      	ldrb	r3, [r7, #14]
 8015ade:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015ae2:	4613      	mov	r3, r2
 8015ae4:	009b      	lsls	r3, r3, #2
 8015ae6:	4413      	add	r3, r2
 8015ae8:	009b      	lsls	r3, r3, #2
 8015aea:	3310      	adds	r3, #16
 8015aec:	687a      	ldr	r2, [r7, #4]
 8015aee:	4413      	add	r3, r2
 8015af0:	3304      	adds	r3, #4
 8015af2:	e00b      	b.n	8015b0c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8015af4:	7bbb      	ldrb	r3, [r7, #14]
 8015af6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015afa:	4613      	mov	r3, r2
 8015afc:	009b      	lsls	r3, r3, #2
 8015afe:	4413      	add	r3, r2
 8015b00:	009b      	lsls	r3, r3, #2
 8015b02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015b06:	687a      	ldr	r2, [r7, #4]
 8015b08:	4413      	add	r3, r2
 8015b0a:	3304      	adds	r3, #4
 8015b0c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8015b0e:	68bb      	ldr	r3, [r7, #8]
 8015b10:	2200      	movs	r2, #0
 8015b12:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015b14:	68bb      	ldr	r3, [r7, #8]
 8015b16:	2202      	movs	r2, #2
 8015b18:	4619      	mov	r1, r3
 8015b1a:	6878      	ldr	r0, [r7, #4]
 8015b1c:	f000 fc15 	bl	801634a <USBD_CtlSendData>
        break;
 8015b20:	e06a      	b.n	8015bf8 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8015b22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	da11      	bge.n	8015b4e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015b2a:	7bbb      	ldrb	r3, [r7, #14]
 8015b2c:	f003 020f 	and.w	r2, r3, #15
 8015b30:	6879      	ldr	r1, [r7, #4]
 8015b32:	4613      	mov	r3, r2
 8015b34:	009b      	lsls	r3, r3, #2
 8015b36:	4413      	add	r3, r2
 8015b38:	009b      	lsls	r3, r3, #2
 8015b3a:	440b      	add	r3, r1
 8015b3c:	3324      	adds	r3, #36	; 0x24
 8015b3e:	881b      	ldrh	r3, [r3, #0]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d117      	bne.n	8015b74 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8015b44:	6839      	ldr	r1, [r7, #0]
 8015b46:	6878      	ldr	r0, [r7, #4]
 8015b48:	f000 fb8e 	bl	8016268 <USBD_CtlError>
            break;
 8015b4c:	e054      	b.n	8015bf8 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015b4e:	7bbb      	ldrb	r3, [r7, #14]
 8015b50:	f003 020f 	and.w	r2, r3, #15
 8015b54:	6879      	ldr	r1, [r7, #4]
 8015b56:	4613      	mov	r3, r2
 8015b58:	009b      	lsls	r3, r3, #2
 8015b5a:	4413      	add	r3, r2
 8015b5c:	009b      	lsls	r3, r3, #2
 8015b5e:	440b      	add	r3, r1
 8015b60:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015b64:	881b      	ldrh	r3, [r3, #0]
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d104      	bne.n	8015b74 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8015b6a:	6839      	ldr	r1, [r7, #0]
 8015b6c:	6878      	ldr	r0, [r7, #4]
 8015b6e:	f000 fb7b 	bl	8016268 <USBD_CtlError>
            break;
 8015b72:	e041      	b.n	8015bf8 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015b74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	da0b      	bge.n	8015b94 <USBD_StdEPReq+0x224>
 8015b7c:	7bbb      	ldrb	r3, [r7, #14]
 8015b7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015b82:	4613      	mov	r3, r2
 8015b84:	009b      	lsls	r3, r3, #2
 8015b86:	4413      	add	r3, r2
 8015b88:	009b      	lsls	r3, r3, #2
 8015b8a:	3310      	adds	r3, #16
 8015b8c:	687a      	ldr	r2, [r7, #4]
 8015b8e:	4413      	add	r3, r2
 8015b90:	3304      	adds	r3, #4
 8015b92:	e00b      	b.n	8015bac <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8015b94:	7bbb      	ldrb	r3, [r7, #14]
 8015b96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015b9a:	4613      	mov	r3, r2
 8015b9c:	009b      	lsls	r3, r3, #2
 8015b9e:	4413      	add	r3, r2
 8015ba0:	009b      	lsls	r3, r3, #2
 8015ba2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015ba6:	687a      	ldr	r2, [r7, #4]
 8015ba8:	4413      	add	r3, r2
 8015baa:	3304      	adds	r3, #4
 8015bac:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015bae:	7bbb      	ldrb	r3, [r7, #14]
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d002      	beq.n	8015bba <USBD_StdEPReq+0x24a>
 8015bb4:	7bbb      	ldrb	r3, [r7, #14]
 8015bb6:	2b80      	cmp	r3, #128	; 0x80
 8015bb8:	d103      	bne.n	8015bc2 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8015bba:	68bb      	ldr	r3, [r7, #8]
 8015bbc:	2200      	movs	r2, #0
 8015bbe:	601a      	str	r2, [r3, #0]
 8015bc0:	e00e      	b.n	8015be0 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015bc2:	7bbb      	ldrb	r3, [r7, #14]
 8015bc4:	4619      	mov	r1, r3
 8015bc6:	6878      	ldr	r0, [r7, #4]
 8015bc8:	f003 fb45 	bl	8019256 <USBD_LL_IsStallEP>
 8015bcc:	4603      	mov	r3, r0
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d003      	beq.n	8015bda <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8015bd2:	68bb      	ldr	r3, [r7, #8]
 8015bd4:	2201      	movs	r2, #1
 8015bd6:	601a      	str	r2, [r3, #0]
 8015bd8:	e002      	b.n	8015be0 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8015bda:	68bb      	ldr	r3, [r7, #8]
 8015bdc:	2200      	movs	r2, #0
 8015bde:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015be0:	68bb      	ldr	r3, [r7, #8]
 8015be2:	2202      	movs	r2, #2
 8015be4:	4619      	mov	r1, r3
 8015be6:	6878      	ldr	r0, [r7, #4]
 8015be8:	f000 fbaf 	bl	801634a <USBD_CtlSendData>
          break;
 8015bec:	e004      	b.n	8015bf8 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8015bee:	6839      	ldr	r1, [r7, #0]
 8015bf0:	6878      	ldr	r0, [r7, #4]
 8015bf2:	f000 fb39 	bl	8016268 <USBD_CtlError>
        break;
 8015bf6:	bf00      	nop
      }
      break;
 8015bf8:	e004      	b.n	8015c04 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8015bfa:	6839      	ldr	r1, [r7, #0]
 8015bfc:	6878      	ldr	r0, [r7, #4]
 8015bfe:	f000 fb33 	bl	8016268 <USBD_CtlError>
      break;
 8015c02:	bf00      	nop
    }
    break;
 8015c04:	e004      	b.n	8015c10 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8015c06:	6839      	ldr	r1, [r7, #0]
 8015c08:	6878      	ldr	r0, [r7, #4]
 8015c0a:	f000 fb2d 	bl	8016268 <USBD_CtlError>
    break;
 8015c0e:	bf00      	nop
  }

  return ret;
 8015c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c12:	4618      	mov	r0, r3
 8015c14:	3710      	adds	r7, #16
 8015c16:	46bd      	mov	sp, r7
 8015c18:	bd80      	pop	{r7, pc}
	...

08015c1c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015c1c:	b580      	push	{r7, lr}
 8015c1e:	b084      	sub	sp, #16
 8015c20:	af00      	add	r7, sp, #0
 8015c22:	6078      	str	r0, [r7, #4]
 8015c24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015c26:	2300      	movs	r3, #0
 8015c28:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015c2a:	2300      	movs	r3, #0
 8015c2c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015c2e:	2300      	movs	r3, #0
 8015c30:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015c32:	683b      	ldr	r3, [r7, #0]
 8015c34:	885b      	ldrh	r3, [r3, #2]
 8015c36:	0a1b      	lsrs	r3, r3, #8
 8015c38:	b29b      	uxth	r3, r3
 8015c3a:	3b01      	subs	r3, #1
 8015c3c:	2b06      	cmp	r3, #6
 8015c3e:	f200 8128 	bhi.w	8015e92 <USBD_GetDescriptor+0x276>
 8015c42:	a201      	add	r2, pc, #4	; (adr r2, 8015c48 <USBD_GetDescriptor+0x2c>)
 8015c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c48:	08015c65 	.word	0x08015c65
 8015c4c:	08015c7d 	.word	0x08015c7d
 8015c50:	08015cbd 	.word	0x08015cbd
 8015c54:	08015e93 	.word	0x08015e93
 8015c58:	08015e93 	.word	0x08015e93
 8015c5c:	08015e33 	.word	0x08015e33
 8015c60:	08015e5f 	.word	0x08015e5f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c6a:	681b      	ldr	r3, [r3, #0]
 8015c6c:	687a      	ldr	r2, [r7, #4]
 8015c6e:	7c12      	ldrb	r2, [r2, #16]
 8015c70:	f107 0108 	add.w	r1, r7, #8
 8015c74:	4610      	mov	r0, r2
 8015c76:	4798      	blx	r3
 8015c78:	60f8      	str	r0, [r7, #12]
    break;
 8015c7a:	e112      	b.n	8015ea2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	7c1b      	ldrb	r3, [r3, #16]
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d10d      	bne.n	8015ca0 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c8c:	f107 0208 	add.w	r2, r7, #8
 8015c90:	4610      	mov	r0, r2
 8015c92:	4798      	blx	r3
 8015c94:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	3301      	adds	r3, #1
 8015c9a:	2202      	movs	r2, #2
 8015c9c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8015c9e:	e100      	b.n	8015ea2 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ca8:	f107 0208 	add.w	r2, r7, #8
 8015cac:	4610      	mov	r0, r2
 8015cae:	4798      	blx	r3
 8015cb0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	3301      	adds	r3, #1
 8015cb6:	2202      	movs	r2, #2
 8015cb8:	701a      	strb	r2, [r3, #0]
    break;
 8015cba:	e0f2      	b.n	8015ea2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8015cbc:	683b      	ldr	r3, [r7, #0]
 8015cbe:	885b      	ldrh	r3, [r3, #2]
 8015cc0:	b2db      	uxtb	r3, r3
 8015cc2:	2b05      	cmp	r3, #5
 8015cc4:	f200 80ac 	bhi.w	8015e20 <USBD_GetDescriptor+0x204>
 8015cc8:	a201      	add	r2, pc, #4	; (adr r2, 8015cd0 <USBD_GetDescriptor+0xb4>)
 8015cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015cce:	bf00      	nop
 8015cd0:	08015ce9 	.word	0x08015ce9
 8015cd4:	08015d1d 	.word	0x08015d1d
 8015cd8:	08015d51 	.word	0x08015d51
 8015cdc:	08015d85 	.word	0x08015d85
 8015ce0:	08015db9 	.word	0x08015db9
 8015ce4:	08015ded 	.word	0x08015ded
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015cee:	685b      	ldr	r3, [r3, #4]
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d00b      	beq.n	8015d0c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015cfa:	685b      	ldr	r3, [r3, #4]
 8015cfc:	687a      	ldr	r2, [r7, #4]
 8015cfe:	7c12      	ldrb	r2, [r2, #16]
 8015d00:	f107 0108 	add.w	r1, r7, #8
 8015d04:	4610      	mov	r0, r2
 8015d06:	4798      	blx	r3
 8015d08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015d0a:	e091      	b.n	8015e30 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015d0c:	6839      	ldr	r1, [r7, #0]
 8015d0e:	6878      	ldr	r0, [r7, #4]
 8015d10:	f000 faaa 	bl	8016268 <USBD_CtlError>
        err++;
 8015d14:	7afb      	ldrb	r3, [r7, #11]
 8015d16:	3301      	adds	r3, #1
 8015d18:	72fb      	strb	r3, [r7, #11]
      break;
 8015d1a:	e089      	b.n	8015e30 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d22:	689b      	ldr	r3, [r3, #8]
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d00b      	beq.n	8015d40 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d2e:	689b      	ldr	r3, [r3, #8]
 8015d30:	687a      	ldr	r2, [r7, #4]
 8015d32:	7c12      	ldrb	r2, [r2, #16]
 8015d34:	f107 0108 	add.w	r1, r7, #8
 8015d38:	4610      	mov	r0, r2
 8015d3a:	4798      	blx	r3
 8015d3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015d3e:	e077      	b.n	8015e30 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015d40:	6839      	ldr	r1, [r7, #0]
 8015d42:	6878      	ldr	r0, [r7, #4]
 8015d44:	f000 fa90 	bl	8016268 <USBD_CtlError>
        err++;
 8015d48:	7afb      	ldrb	r3, [r7, #11]
 8015d4a:	3301      	adds	r3, #1
 8015d4c:	72fb      	strb	r3, [r7, #11]
      break;
 8015d4e:	e06f      	b.n	8015e30 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d56:	68db      	ldr	r3, [r3, #12]
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d00b      	beq.n	8015d74 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d62:	68db      	ldr	r3, [r3, #12]
 8015d64:	687a      	ldr	r2, [r7, #4]
 8015d66:	7c12      	ldrb	r2, [r2, #16]
 8015d68:	f107 0108 	add.w	r1, r7, #8
 8015d6c:	4610      	mov	r0, r2
 8015d6e:	4798      	blx	r3
 8015d70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015d72:	e05d      	b.n	8015e30 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015d74:	6839      	ldr	r1, [r7, #0]
 8015d76:	6878      	ldr	r0, [r7, #4]
 8015d78:	f000 fa76 	bl	8016268 <USBD_CtlError>
        err++;
 8015d7c:	7afb      	ldrb	r3, [r7, #11]
 8015d7e:	3301      	adds	r3, #1
 8015d80:	72fb      	strb	r3, [r7, #11]
      break;
 8015d82:	e055      	b.n	8015e30 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d8a:	691b      	ldr	r3, [r3, #16]
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d00b      	beq.n	8015da8 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d96:	691b      	ldr	r3, [r3, #16]
 8015d98:	687a      	ldr	r2, [r7, #4]
 8015d9a:	7c12      	ldrb	r2, [r2, #16]
 8015d9c:	f107 0108 	add.w	r1, r7, #8
 8015da0:	4610      	mov	r0, r2
 8015da2:	4798      	blx	r3
 8015da4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015da6:	e043      	b.n	8015e30 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015da8:	6839      	ldr	r1, [r7, #0]
 8015daa:	6878      	ldr	r0, [r7, #4]
 8015dac:	f000 fa5c 	bl	8016268 <USBD_CtlError>
        err++;
 8015db0:	7afb      	ldrb	r3, [r7, #11]
 8015db2:	3301      	adds	r3, #1
 8015db4:	72fb      	strb	r3, [r7, #11]
      break;
 8015db6:	e03b      	b.n	8015e30 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015dbe:	695b      	ldr	r3, [r3, #20]
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d00b      	beq.n	8015ddc <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015dca:	695b      	ldr	r3, [r3, #20]
 8015dcc:	687a      	ldr	r2, [r7, #4]
 8015dce:	7c12      	ldrb	r2, [r2, #16]
 8015dd0:	f107 0108 	add.w	r1, r7, #8
 8015dd4:	4610      	mov	r0, r2
 8015dd6:	4798      	blx	r3
 8015dd8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015dda:	e029      	b.n	8015e30 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015ddc:	6839      	ldr	r1, [r7, #0]
 8015dde:	6878      	ldr	r0, [r7, #4]
 8015de0:	f000 fa42 	bl	8016268 <USBD_CtlError>
        err++;
 8015de4:	7afb      	ldrb	r3, [r7, #11]
 8015de6:	3301      	adds	r3, #1
 8015de8:	72fb      	strb	r3, [r7, #11]
      break;
 8015dea:	e021      	b.n	8015e30 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015df2:	699b      	ldr	r3, [r3, #24]
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d00b      	beq.n	8015e10 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015dfe:	699b      	ldr	r3, [r3, #24]
 8015e00:	687a      	ldr	r2, [r7, #4]
 8015e02:	7c12      	ldrb	r2, [r2, #16]
 8015e04:	f107 0108 	add.w	r1, r7, #8
 8015e08:	4610      	mov	r0, r2
 8015e0a:	4798      	blx	r3
 8015e0c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015e0e:	e00f      	b.n	8015e30 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015e10:	6839      	ldr	r1, [r7, #0]
 8015e12:	6878      	ldr	r0, [r7, #4]
 8015e14:	f000 fa28 	bl	8016268 <USBD_CtlError>
        err++;
 8015e18:	7afb      	ldrb	r3, [r7, #11]
 8015e1a:	3301      	adds	r3, #1
 8015e1c:	72fb      	strb	r3, [r7, #11]
      break;
 8015e1e:	e007      	b.n	8015e30 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8015e20:	6839      	ldr	r1, [r7, #0]
 8015e22:	6878      	ldr	r0, [r7, #4]
 8015e24:	f000 fa20 	bl	8016268 <USBD_CtlError>
      err++;
 8015e28:	7afb      	ldrb	r3, [r7, #11]
 8015e2a:	3301      	adds	r3, #1
 8015e2c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8015e2e:	bf00      	nop
    }
    break;
 8015e30:	e037      	b.n	8015ea2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	7c1b      	ldrb	r3, [r3, #16]
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d109      	bne.n	8015e4e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015e42:	f107 0208 	add.w	r2, r7, #8
 8015e46:	4610      	mov	r0, r2
 8015e48:	4798      	blx	r3
 8015e4a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8015e4c:	e029      	b.n	8015ea2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8015e4e:	6839      	ldr	r1, [r7, #0]
 8015e50:	6878      	ldr	r0, [r7, #4]
 8015e52:	f000 fa09 	bl	8016268 <USBD_CtlError>
      err++;
 8015e56:	7afb      	ldrb	r3, [r7, #11]
 8015e58:	3301      	adds	r3, #1
 8015e5a:	72fb      	strb	r3, [r7, #11]
    break;
 8015e5c:	e021      	b.n	8015ea2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	7c1b      	ldrb	r3, [r3, #16]
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d10d      	bne.n	8015e82 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e6e:	f107 0208 	add.w	r2, r7, #8
 8015e72:	4610      	mov	r0, r2
 8015e74:	4798      	blx	r3
 8015e76:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	3301      	adds	r3, #1
 8015e7c:	2207      	movs	r2, #7
 8015e7e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8015e80:	e00f      	b.n	8015ea2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8015e82:	6839      	ldr	r1, [r7, #0]
 8015e84:	6878      	ldr	r0, [r7, #4]
 8015e86:	f000 f9ef 	bl	8016268 <USBD_CtlError>
      err++;
 8015e8a:	7afb      	ldrb	r3, [r7, #11]
 8015e8c:	3301      	adds	r3, #1
 8015e8e:	72fb      	strb	r3, [r7, #11]
    break;
 8015e90:	e007      	b.n	8015ea2 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8015e92:	6839      	ldr	r1, [r7, #0]
 8015e94:	6878      	ldr	r0, [r7, #4]
 8015e96:	f000 f9e7 	bl	8016268 <USBD_CtlError>
    err++;
 8015e9a:	7afb      	ldrb	r3, [r7, #11]
 8015e9c:	3301      	adds	r3, #1
 8015e9e:	72fb      	strb	r3, [r7, #11]
    break;
 8015ea0:	bf00      	nop
  }

  if (err != 0U)
 8015ea2:	7afb      	ldrb	r3, [r7, #11]
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d11e      	bne.n	8015ee6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8015ea8:	683b      	ldr	r3, [r7, #0]
 8015eaa:	88db      	ldrh	r3, [r3, #6]
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d016      	beq.n	8015ede <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8015eb0:	893b      	ldrh	r3, [r7, #8]
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d00e      	beq.n	8015ed4 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8015eb6:	683b      	ldr	r3, [r7, #0]
 8015eb8:	88da      	ldrh	r2, [r3, #6]
 8015eba:	893b      	ldrh	r3, [r7, #8]
 8015ebc:	4293      	cmp	r3, r2
 8015ebe:	bf28      	it	cs
 8015ec0:	4613      	movcs	r3, r2
 8015ec2:	b29b      	uxth	r3, r3
 8015ec4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8015ec6:	893b      	ldrh	r3, [r7, #8]
 8015ec8:	461a      	mov	r2, r3
 8015eca:	68f9      	ldr	r1, [r7, #12]
 8015ecc:	6878      	ldr	r0, [r7, #4]
 8015ece:	f000 fa3c 	bl	801634a <USBD_CtlSendData>
 8015ed2:	e009      	b.n	8015ee8 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8015ed4:	6839      	ldr	r1, [r7, #0]
 8015ed6:	6878      	ldr	r0, [r7, #4]
 8015ed8:	f000 f9c6 	bl	8016268 <USBD_CtlError>
 8015edc:	e004      	b.n	8015ee8 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8015ede:	6878      	ldr	r0, [r7, #4]
 8015ee0:	f000 fa70 	bl	80163c4 <USBD_CtlSendStatus>
 8015ee4:	e000      	b.n	8015ee8 <USBD_GetDescriptor+0x2cc>
    return;
 8015ee6:	bf00      	nop
    }
  }
}
 8015ee8:	3710      	adds	r7, #16
 8015eea:	46bd      	mov	sp, r7
 8015eec:	bd80      	pop	{r7, pc}
 8015eee:	bf00      	nop

08015ef0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015ef0:	b580      	push	{r7, lr}
 8015ef2:	b084      	sub	sp, #16
 8015ef4:	af00      	add	r7, sp, #0
 8015ef6:	6078      	str	r0, [r7, #4]
 8015ef8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015efa:	683b      	ldr	r3, [r7, #0]
 8015efc:	889b      	ldrh	r3, [r3, #4]
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d130      	bne.n	8015f64 <USBD_SetAddress+0x74>
 8015f02:	683b      	ldr	r3, [r7, #0]
 8015f04:	88db      	ldrh	r3, [r3, #6]
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d12c      	bne.n	8015f64 <USBD_SetAddress+0x74>
 8015f0a:	683b      	ldr	r3, [r7, #0]
 8015f0c:	885b      	ldrh	r3, [r3, #2]
 8015f0e:	2b7f      	cmp	r3, #127	; 0x7f
 8015f10:	d828      	bhi.n	8015f64 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015f12:	683b      	ldr	r3, [r7, #0]
 8015f14:	885b      	ldrh	r3, [r3, #2]
 8015f16:	b2db      	uxtb	r3, r3
 8015f18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015f1c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015f24:	2b03      	cmp	r3, #3
 8015f26:	d104      	bne.n	8015f32 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8015f28:	6839      	ldr	r1, [r7, #0]
 8015f2a:	6878      	ldr	r0, [r7, #4]
 8015f2c:	f000 f99c 	bl	8016268 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f30:	e01c      	b.n	8015f6c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	7bfa      	ldrb	r2, [r7, #15]
 8015f36:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015f3a:	7bfb      	ldrb	r3, [r7, #15]
 8015f3c:	4619      	mov	r1, r3
 8015f3e:	6878      	ldr	r0, [r7, #4]
 8015f40:	f003 f9b5 	bl	80192ae <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015f44:	6878      	ldr	r0, [r7, #4]
 8015f46:	f000 fa3d 	bl	80163c4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015f4a:	7bfb      	ldrb	r3, [r7, #15]
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	d004      	beq.n	8015f5a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	2202      	movs	r2, #2
 8015f54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f58:	e008      	b.n	8015f6c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	2201      	movs	r2, #1
 8015f5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f62:	e003      	b.n	8015f6c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015f64:	6839      	ldr	r1, [r7, #0]
 8015f66:	6878      	ldr	r0, [r7, #4]
 8015f68:	f000 f97e 	bl	8016268 <USBD_CtlError>
  }
}
 8015f6c:	bf00      	nop
 8015f6e:	3710      	adds	r7, #16
 8015f70:	46bd      	mov	sp, r7
 8015f72:	bd80      	pop	{r7, pc}

08015f74 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f74:	b580      	push	{r7, lr}
 8015f76:	b084      	sub	sp, #16
 8015f78:	af00      	add	r7, sp, #0
 8015f7a:	6078      	str	r0, [r7, #4]
 8015f7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015f7e:	2300      	movs	r3, #0
 8015f80:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015f82:	683b      	ldr	r3, [r7, #0]
 8015f84:	885b      	ldrh	r3, [r3, #2]
 8015f86:	b2da      	uxtb	r2, r3
 8015f88:	4b4b      	ldr	r3, [pc, #300]	; (80160b8 <USBD_SetConfig+0x144>)
 8015f8a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015f8c:	4b4a      	ldr	r3, [pc, #296]	; (80160b8 <USBD_SetConfig+0x144>)
 8015f8e:	781b      	ldrb	r3, [r3, #0]
 8015f90:	2b01      	cmp	r3, #1
 8015f92:	d905      	bls.n	8015fa0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015f94:	6839      	ldr	r1, [r7, #0]
 8015f96:	6878      	ldr	r0, [r7, #4]
 8015f98:	f000 f966 	bl	8016268 <USBD_CtlError>
    return USBD_FAIL;
 8015f9c:	2303      	movs	r3, #3
 8015f9e:	e087      	b.n	80160b0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015fa6:	2b02      	cmp	r3, #2
 8015fa8:	d002      	beq.n	8015fb0 <USBD_SetConfig+0x3c>
 8015faa:	2b03      	cmp	r3, #3
 8015fac:	d025      	beq.n	8015ffa <USBD_SetConfig+0x86>
 8015fae:	e071      	b.n	8016094 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8015fb0:	4b41      	ldr	r3, [pc, #260]	; (80160b8 <USBD_SetConfig+0x144>)
 8015fb2:	781b      	ldrb	r3, [r3, #0]
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d01c      	beq.n	8015ff2 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8015fb8:	4b3f      	ldr	r3, [pc, #252]	; (80160b8 <USBD_SetConfig+0x144>)
 8015fba:	781b      	ldrb	r3, [r3, #0]
 8015fbc:	461a      	mov	r2, r3
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8015fc2:	4b3d      	ldr	r3, [pc, #244]	; (80160b8 <USBD_SetConfig+0x144>)
 8015fc4:	781b      	ldrb	r3, [r3, #0]
 8015fc6:	4619      	mov	r1, r3
 8015fc8:	6878      	ldr	r0, [r7, #4]
 8015fca:	f7ff f9a8 	bl	801531e <USBD_SetClassConfig>
 8015fce:	4603      	mov	r3, r0
 8015fd0:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8015fd2:	7bfb      	ldrb	r3, [r7, #15]
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d004      	beq.n	8015fe2 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8015fd8:	6839      	ldr	r1, [r7, #0]
 8015fda:	6878      	ldr	r0, [r7, #4]
 8015fdc:	f000 f944 	bl	8016268 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8015fe0:	e065      	b.n	80160ae <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8015fe2:	6878      	ldr	r0, [r7, #4]
 8015fe4:	f000 f9ee 	bl	80163c4 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	2203      	movs	r2, #3
 8015fec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8015ff0:	e05d      	b.n	80160ae <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8015ff2:	6878      	ldr	r0, [r7, #4]
 8015ff4:	f000 f9e6 	bl	80163c4 <USBD_CtlSendStatus>
    break;
 8015ff8:	e059      	b.n	80160ae <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8015ffa:	4b2f      	ldr	r3, [pc, #188]	; (80160b8 <USBD_SetConfig+0x144>)
 8015ffc:	781b      	ldrb	r3, [r3, #0]
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d112      	bne.n	8016028 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	2202      	movs	r2, #2
 8016006:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 801600a:	4b2b      	ldr	r3, [pc, #172]	; (80160b8 <USBD_SetConfig+0x144>)
 801600c:	781b      	ldrb	r3, [r3, #0]
 801600e:	461a      	mov	r2, r3
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016014:	4b28      	ldr	r3, [pc, #160]	; (80160b8 <USBD_SetConfig+0x144>)
 8016016:	781b      	ldrb	r3, [r3, #0]
 8016018:	4619      	mov	r1, r3
 801601a:	6878      	ldr	r0, [r7, #4]
 801601c:	f7ff f99b 	bl	8015356 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8016020:	6878      	ldr	r0, [r7, #4]
 8016022:	f000 f9cf 	bl	80163c4 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8016026:	e042      	b.n	80160ae <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8016028:	4b23      	ldr	r3, [pc, #140]	; (80160b8 <USBD_SetConfig+0x144>)
 801602a:	781b      	ldrb	r3, [r3, #0]
 801602c:	461a      	mov	r2, r3
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	685b      	ldr	r3, [r3, #4]
 8016032:	429a      	cmp	r2, r3
 8016034:	d02a      	beq.n	801608c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	685b      	ldr	r3, [r3, #4]
 801603a:	b2db      	uxtb	r3, r3
 801603c:	4619      	mov	r1, r3
 801603e:	6878      	ldr	r0, [r7, #4]
 8016040:	f7ff f989 	bl	8015356 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8016044:	4b1c      	ldr	r3, [pc, #112]	; (80160b8 <USBD_SetConfig+0x144>)
 8016046:	781b      	ldrb	r3, [r3, #0]
 8016048:	461a      	mov	r2, r3
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 801604e:	4b1a      	ldr	r3, [pc, #104]	; (80160b8 <USBD_SetConfig+0x144>)
 8016050:	781b      	ldrb	r3, [r3, #0]
 8016052:	4619      	mov	r1, r3
 8016054:	6878      	ldr	r0, [r7, #4]
 8016056:	f7ff f962 	bl	801531e <USBD_SetClassConfig>
 801605a:	4603      	mov	r3, r0
 801605c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 801605e:	7bfb      	ldrb	r3, [r7, #15]
 8016060:	2b00      	cmp	r3, #0
 8016062:	d00f      	beq.n	8016084 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8016064:	6839      	ldr	r1, [r7, #0]
 8016066:	6878      	ldr	r0, [r7, #4]
 8016068:	f000 f8fe 	bl	8016268 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	685b      	ldr	r3, [r3, #4]
 8016070:	b2db      	uxtb	r3, r3
 8016072:	4619      	mov	r1, r3
 8016074:	6878      	ldr	r0, [r7, #4]
 8016076:	f7ff f96e 	bl	8015356 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	2202      	movs	r2, #2
 801607e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8016082:	e014      	b.n	80160ae <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8016084:	6878      	ldr	r0, [r7, #4]
 8016086:	f000 f99d 	bl	80163c4 <USBD_CtlSendStatus>
    break;
 801608a:	e010      	b.n	80160ae <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 801608c:	6878      	ldr	r0, [r7, #4]
 801608e:	f000 f999 	bl	80163c4 <USBD_CtlSendStatus>
    break;
 8016092:	e00c      	b.n	80160ae <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8016094:	6839      	ldr	r1, [r7, #0]
 8016096:	6878      	ldr	r0, [r7, #4]
 8016098:	f000 f8e6 	bl	8016268 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 801609c:	4b06      	ldr	r3, [pc, #24]	; (80160b8 <USBD_SetConfig+0x144>)
 801609e:	781b      	ldrb	r3, [r3, #0]
 80160a0:	4619      	mov	r1, r3
 80160a2:	6878      	ldr	r0, [r7, #4]
 80160a4:	f7ff f957 	bl	8015356 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80160a8:	2303      	movs	r3, #3
 80160aa:	73fb      	strb	r3, [r7, #15]
    break;
 80160ac:	bf00      	nop
  }

  return ret;
 80160ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80160b0:	4618      	mov	r0, r3
 80160b2:	3710      	adds	r7, #16
 80160b4:	46bd      	mov	sp, r7
 80160b6:	bd80      	pop	{r7, pc}
 80160b8:	24000b58 	.word	0x24000b58

080160bc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80160bc:	b580      	push	{r7, lr}
 80160be:	b082      	sub	sp, #8
 80160c0:	af00      	add	r7, sp, #0
 80160c2:	6078      	str	r0, [r7, #4]
 80160c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80160c6:	683b      	ldr	r3, [r7, #0]
 80160c8:	88db      	ldrh	r3, [r3, #6]
 80160ca:	2b01      	cmp	r3, #1
 80160cc:	d004      	beq.n	80160d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80160ce:	6839      	ldr	r1, [r7, #0]
 80160d0:	6878      	ldr	r0, [r7, #4]
 80160d2:	f000 f8c9 	bl	8016268 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80160d6:	e021      	b.n	801611c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80160de:	2b01      	cmp	r3, #1
 80160e0:	db17      	blt.n	8016112 <USBD_GetConfig+0x56>
 80160e2:	2b02      	cmp	r3, #2
 80160e4:	dd02      	ble.n	80160ec <USBD_GetConfig+0x30>
 80160e6:	2b03      	cmp	r3, #3
 80160e8:	d00b      	beq.n	8016102 <USBD_GetConfig+0x46>
 80160ea:	e012      	b.n	8016112 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	2200      	movs	r2, #0
 80160f0:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	3308      	adds	r3, #8
 80160f6:	2201      	movs	r2, #1
 80160f8:	4619      	mov	r1, r3
 80160fa:	6878      	ldr	r0, [r7, #4]
 80160fc:	f000 f925 	bl	801634a <USBD_CtlSendData>
      break;
 8016100:	e00c      	b.n	801611c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	3304      	adds	r3, #4
 8016106:	2201      	movs	r2, #1
 8016108:	4619      	mov	r1, r3
 801610a:	6878      	ldr	r0, [r7, #4]
 801610c:	f000 f91d 	bl	801634a <USBD_CtlSendData>
      break;
 8016110:	e004      	b.n	801611c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8016112:	6839      	ldr	r1, [r7, #0]
 8016114:	6878      	ldr	r0, [r7, #4]
 8016116:	f000 f8a7 	bl	8016268 <USBD_CtlError>
      break;
 801611a:	bf00      	nop
}
 801611c:	bf00      	nop
 801611e:	3708      	adds	r7, #8
 8016120:	46bd      	mov	sp, r7
 8016122:	bd80      	pop	{r7, pc}

08016124 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016124:	b580      	push	{r7, lr}
 8016126:	b082      	sub	sp, #8
 8016128:	af00      	add	r7, sp, #0
 801612a:	6078      	str	r0, [r7, #4]
 801612c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016134:	3b01      	subs	r3, #1
 8016136:	2b02      	cmp	r3, #2
 8016138:	d81e      	bhi.n	8016178 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 801613a:	683b      	ldr	r3, [r7, #0]
 801613c:	88db      	ldrh	r3, [r3, #6]
 801613e:	2b02      	cmp	r3, #2
 8016140:	d004      	beq.n	801614c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8016142:	6839      	ldr	r1, [r7, #0]
 8016144:	6878      	ldr	r0, [r7, #4]
 8016146:	f000 f88f 	bl	8016268 <USBD_CtlError>
      break;
 801614a:	e01a      	b.n	8016182 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	2201      	movs	r2, #1
 8016150:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8016158:	2b00      	cmp	r3, #0
 801615a:	d005      	beq.n	8016168 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	68db      	ldr	r3, [r3, #12]
 8016160:	f043 0202 	orr.w	r2, r3, #2
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	330c      	adds	r3, #12
 801616c:	2202      	movs	r2, #2
 801616e:	4619      	mov	r1, r3
 8016170:	6878      	ldr	r0, [r7, #4]
 8016172:	f000 f8ea 	bl	801634a <USBD_CtlSendData>
    break;
 8016176:	e004      	b.n	8016182 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8016178:	6839      	ldr	r1, [r7, #0]
 801617a:	6878      	ldr	r0, [r7, #4]
 801617c:	f000 f874 	bl	8016268 <USBD_CtlError>
    break;
 8016180:	bf00      	nop
  }
}
 8016182:	bf00      	nop
 8016184:	3708      	adds	r7, #8
 8016186:	46bd      	mov	sp, r7
 8016188:	bd80      	pop	{r7, pc}

0801618a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801618a:	b580      	push	{r7, lr}
 801618c:	b082      	sub	sp, #8
 801618e:	af00      	add	r7, sp, #0
 8016190:	6078      	str	r0, [r7, #4]
 8016192:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016194:	683b      	ldr	r3, [r7, #0]
 8016196:	885b      	ldrh	r3, [r3, #2]
 8016198:	2b01      	cmp	r3, #1
 801619a:	d106      	bne.n	80161aa <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	2201      	movs	r2, #1
 80161a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80161a4:	6878      	ldr	r0, [r7, #4]
 80161a6:	f000 f90d 	bl	80163c4 <USBD_CtlSendStatus>
  }
}
 80161aa:	bf00      	nop
 80161ac:	3708      	adds	r7, #8
 80161ae:	46bd      	mov	sp, r7
 80161b0:	bd80      	pop	{r7, pc}

080161b2 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80161b2:	b580      	push	{r7, lr}
 80161b4:	b082      	sub	sp, #8
 80161b6:	af00      	add	r7, sp, #0
 80161b8:	6078      	str	r0, [r7, #4]
 80161ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80161c2:	3b01      	subs	r3, #1
 80161c4:	2b02      	cmp	r3, #2
 80161c6:	d80b      	bhi.n	80161e0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80161c8:	683b      	ldr	r3, [r7, #0]
 80161ca:	885b      	ldrh	r3, [r3, #2]
 80161cc:	2b01      	cmp	r3, #1
 80161ce:	d10c      	bne.n	80161ea <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	2200      	movs	r2, #0
 80161d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80161d8:	6878      	ldr	r0, [r7, #4]
 80161da:	f000 f8f3 	bl	80163c4 <USBD_CtlSendStatus>
      }
      break;
 80161de:	e004      	b.n	80161ea <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80161e0:	6839      	ldr	r1, [r7, #0]
 80161e2:	6878      	ldr	r0, [r7, #4]
 80161e4:	f000 f840 	bl	8016268 <USBD_CtlError>
      break;
 80161e8:	e000      	b.n	80161ec <USBD_ClrFeature+0x3a>
      break;
 80161ea:	bf00      	nop
  }
}
 80161ec:	bf00      	nop
 80161ee:	3708      	adds	r7, #8
 80161f0:	46bd      	mov	sp, r7
 80161f2:	bd80      	pop	{r7, pc}

080161f4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80161f4:	b580      	push	{r7, lr}
 80161f6:	b084      	sub	sp, #16
 80161f8:	af00      	add	r7, sp, #0
 80161fa:	6078      	str	r0, [r7, #4]
 80161fc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80161fe:	683b      	ldr	r3, [r7, #0]
 8016200:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016202:	68fb      	ldr	r3, [r7, #12]
 8016204:	781a      	ldrb	r2, [r3, #0]
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801620a:	68fb      	ldr	r3, [r7, #12]
 801620c:	3301      	adds	r3, #1
 801620e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	781a      	ldrb	r2, [r3, #0]
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8016218:	68fb      	ldr	r3, [r7, #12]
 801621a:	3301      	adds	r3, #1
 801621c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801621e:	68f8      	ldr	r0, [r7, #12]
 8016220:	f7ff fad4 	bl	80157cc <SWAPBYTE>
 8016224:	4603      	mov	r3, r0
 8016226:	461a      	mov	r2, r3
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	3301      	adds	r3, #1
 8016230:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016232:	68fb      	ldr	r3, [r7, #12]
 8016234:	3301      	adds	r3, #1
 8016236:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8016238:	68f8      	ldr	r0, [r7, #12]
 801623a:	f7ff fac7 	bl	80157cc <SWAPBYTE>
 801623e:	4603      	mov	r3, r0
 8016240:	461a      	mov	r2, r3
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	3301      	adds	r3, #1
 801624a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	3301      	adds	r3, #1
 8016250:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016252:	68f8      	ldr	r0, [r7, #12]
 8016254:	f7ff faba 	bl	80157cc <SWAPBYTE>
 8016258:	4603      	mov	r3, r0
 801625a:	461a      	mov	r2, r3
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	80da      	strh	r2, [r3, #6]
}
 8016260:	bf00      	nop
 8016262:	3710      	adds	r7, #16
 8016264:	46bd      	mov	sp, r7
 8016266:	bd80      	pop	{r7, pc}

08016268 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016268:	b580      	push	{r7, lr}
 801626a:	b082      	sub	sp, #8
 801626c:	af00      	add	r7, sp, #0
 801626e:	6078      	str	r0, [r7, #4]
 8016270:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016272:	2180      	movs	r1, #128	; 0x80
 8016274:	6878      	ldr	r0, [r7, #4]
 8016276:	f002 ffb0 	bl	80191da <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801627a:	2100      	movs	r1, #0
 801627c:	6878      	ldr	r0, [r7, #4]
 801627e:	f002 ffac 	bl	80191da <USBD_LL_StallEP>
}
 8016282:	bf00      	nop
 8016284:	3708      	adds	r7, #8
 8016286:	46bd      	mov	sp, r7
 8016288:	bd80      	pop	{r7, pc}

0801628a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801628a:	b580      	push	{r7, lr}
 801628c:	b086      	sub	sp, #24
 801628e:	af00      	add	r7, sp, #0
 8016290:	60f8      	str	r0, [r7, #12]
 8016292:	60b9      	str	r1, [r7, #8]
 8016294:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016296:	2300      	movs	r3, #0
 8016298:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801629a:	68fb      	ldr	r3, [r7, #12]
 801629c:	2b00      	cmp	r3, #0
 801629e:	d036      	beq.n	801630e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80162a4:	6938      	ldr	r0, [r7, #16]
 80162a6:	f000 f836 	bl	8016316 <USBD_GetLen>
 80162aa:	4603      	mov	r3, r0
 80162ac:	3301      	adds	r3, #1
 80162ae:	b29b      	uxth	r3, r3
 80162b0:	005b      	lsls	r3, r3, #1
 80162b2:	b29a      	uxth	r2, r3
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80162b8:	7dfb      	ldrb	r3, [r7, #23]
 80162ba:	68ba      	ldr	r2, [r7, #8]
 80162bc:	4413      	add	r3, r2
 80162be:	687a      	ldr	r2, [r7, #4]
 80162c0:	7812      	ldrb	r2, [r2, #0]
 80162c2:	701a      	strb	r2, [r3, #0]
  idx++;
 80162c4:	7dfb      	ldrb	r3, [r7, #23]
 80162c6:	3301      	adds	r3, #1
 80162c8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80162ca:	7dfb      	ldrb	r3, [r7, #23]
 80162cc:	68ba      	ldr	r2, [r7, #8]
 80162ce:	4413      	add	r3, r2
 80162d0:	2203      	movs	r2, #3
 80162d2:	701a      	strb	r2, [r3, #0]
  idx++;
 80162d4:	7dfb      	ldrb	r3, [r7, #23]
 80162d6:	3301      	adds	r3, #1
 80162d8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80162da:	e013      	b.n	8016304 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80162dc:	7dfb      	ldrb	r3, [r7, #23]
 80162de:	68ba      	ldr	r2, [r7, #8]
 80162e0:	4413      	add	r3, r2
 80162e2:	693a      	ldr	r2, [r7, #16]
 80162e4:	7812      	ldrb	r2, [r2, #0]
 80162e6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80162e8:	693b      	ldr	r3, [r7, #16]
 80162ea:	3301      	adds	r3, #1
 80162ec:	613b      	str	r3, [r7, #16]
    idx++;
 80162ee:	7dfb      	ldrb	r3, [r7, #23]
 80162f0:	3301      	adds	r3, #1
 80162f2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80162f4:	7dfb      	ldrb	r3, [r7, #23]
 80162f6:	68ba      	ldr	r2, [r7, #8]
 80162f8:	4413      	add	r3, r2
 80162fa:	2200      	movs	r2, #0
 80162fc:	701a      	strb	r2, [r3, #0]
    idx++;
 80162fe:	7dfb      	ldrb	r3, [r7, #23]
 8016300:	3301      	adds	r3, #1
 8016302:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016304:	693b      	ldr	r3, [r7, #16]
 8016306:	781b      	ldrb	r3, [r3, #0]
 8016308:	2b00      	cmp	r3, #0
 801630a:	d1e7      	bne.n	80162dc <USBD_GetString+0x52>
 801630c:	e000      	b.n	8016310 <USBD_GetString+0x86>
    return;
 801630e:	bf00      	nop
  }
}
 8016310:	3718      	adds	r7, #24
 8016312:	46bd      	mov	sp, r7
 8016314:	bd80      	pop	{r7, pc}

08016316 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016316:	b480      	push	{r7}
 8016318:	b085      	sub	sp, #20
 801631a:	af00      	add	r7, sp, #0
 801631c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801631e:	2300      	movs	r3, #0
 8016320:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016326:	e005      	b.n	8016334 <USBD_GetLen+0x1e>
  {
    len++;
 8016328:	7bfb      	ldrb	r3, [r7, #15]
 801632a:	3301      	adds	r3, #1
 801632c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801632e:	68bb      	ldr	r3, [r7, #8]
 8016330:	3301      	adds	r3, #1
 8016332:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016334:	68bb      	ldr	r3, [r7, #8]
 8016336:	781b      	ldrb	r3, [r3, #0]
 8016338:	2b00      	cmp	r3, #0
 801633a:	d1f5      	bne.n	8016328 <USBD_GetLen+0x12>
  }

  return len;
 801633c:	7bfb      	ldrb	r3, [r7, #15]
}
 801633e:	4618      	mov	r0, r3
 8016340:	3714      	adds	r7, #20
 8016342:	46bd      	mov	sp, r7
 8016344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016348:	4770      	bx	lr

0801634a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801634a:	b580      	push	{r7, lr}
 801634c:	b084      	sub	sp, #16
 801634e:	af00      	add	r7, sp, #0
 8016350:	60f8      	str	r0, [r7, #12]
 8016352:	60b9      	str	r1, [r7, #8]
 8016354:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016356:	68fb      	ldr	r3, [r7, #12]
 8016358:	2202      	movs	r2, #2
 801635a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801635e:	68fb      	ldr	r3, [r7, #12]
 8016360:	687a      	ldr	r2, [r7, #4]
 8016362:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8016364:	68fb      	ldr	r3, [r7, #12]
 8016366:	687a      	ldr	r2, [r7, #4]
 8016368:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	68ba      	ldr	r2, [r7, #8]
 801636e:	2100      	movs	r1, #0
 8016370:	68f8      	ldr	r0, [r7, #12]
 8016372:	f002 ffbb 	bl	80192ec <USBD_LL_Transmit>

  return USBD_OK;
 8016376:	2300      	movs	r3, #0
}
 8016378:	4618      	mov	r0, r3
 801637a:	3710      	adds	r7, #16
 801637c:	46bd      	mov	sp, r7
 801637e:	bd80      	pop	{r7, pc}

08016380 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8016380:	b580      	push	{r7, lr}
 8016382:	b084      	sub	sp, #16
 8016384:	af00      	add	r7, sp, #0
 8016386:	60f8      	str	r0, [r7, #12]
 8016388:	60b9      	str	r1, [r7, #8]
 801638a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	68ba      	ldr	r2, [r7, #8]
 8016390:	2100      	movs	r1, #0
 8016392:	68f8      	ldr	r0, [r7, #12]
 8016394:	f002 ffaa 	bl	80192ec <USBD_LL_Transmit>

  return USBD_OK;
 8016398:	2300      	movs	r3, #0
}
 801639a:	4618      	mov	r0, r3
 801639c:	3710      	adds	r7, #16
 801639e:	46bd      	mov	sp, r7
 80163a0:	bd80      	pop	{r7, pc}

080163a2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80163a2:	b580      	push	{r7, lr}
 80163a4:	b084      	sub	sp, #16
 80163a6:	af00      	add	r7, sp, #0
 80163a8:	60f8      	str	r0, [r7, #12]
 80163aa:	60b9      	str	r1, [r7, #8]
 80163ac:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	68ba      	ldr	r2, [r7, #8]
 80163b2:	2100      	movs	r1, #0
 80163b4:	68f8      	ldr	r0, [r7, #12]
 80163b6:	f002 ffba 	bl	801932e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80163ba:	2300      	movs	r3, #0
}
 80163bc:	4618      	mov	r0, r3
 80163be:	3710      	adds	r7, #16
 80163c0:	46bd      	mov	sp, r7
 80163c2:	bd80      	pop	{r7, pc}

080163c4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80163c4:	b580      	push	{r7, lr}
 80163c6:	b082      	sub	sp, #8
 80163c8:	af00      	add	r7, sp, #0
 80163ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	2204      	movs	r2, #4
 80163d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80163d4:	2300      	movs	r3, #0
 80163d6:	2200      	movs	r2, #0
 80163d8:	2100      	movs	r1, #0
 80163da:	6878      	ldr	r0, [r7, #4]
 80163dc:	f002 ff86 	bl	80192ec <USBD_LL_Transmit>

  return USBD_OK;
 80163e0:	2300      	movs	r3, #0
}
 80163e2:	4618      	mov	r0, r3
 80163e4:	3708      	adds	r7, #8
 80163e6:	46bd      	mov	sp, r7
 80163e8:	bd80      	pop	{r7, pc}

080163ea <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80163ea:	b580      	push	{r7, lr}
 80163ec:	b082      	sub	sp, #8
 80163ee:	af00      	add	r7, sp, #0
 80163f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	2205      	movs	r2, #5
 80163f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80163fa:	2300      	movs	r3, #0
 80163fc:	2200      	movs	r2, #0
 80163fe:	2100      	movs	r1, #0
 8016400:	6878      	ldr	r0, [r7, #4]
 8016402:	f002 ff94 	bl	801932e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016406:	2300      	movs	r3, #0
}
 8016408:	4618      	mov	r0, r3
 801640a:	3708      	adds	r7, #8
 801640c:	46bd      	mov	sp, r7
 801640e:	bd80      	pop	{r7, pc}

08016410 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8016410:	b580      	push	{r7, lr}
 8016412:	b084      	sub	sp, #16
 8016414:	af00      	add	r7, sp, #0
 8016416:	4603      	mov	r3, r0
 8016418:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801641a:	79fb      	ldrb	r3, [r7, #7]
 801641c:	4a08      	ldr	r2, [pc, #32]	; (8016440 <disk_status+0x30>)
 801641e:	009b      	lsls	r3, r3, #2
 8016420:	4413      	add	r3, r2
 8016422:	685b      	ldr	r3, [r3, #4]
 8016424:	685b      	ldr	r3, [r3, #4]
 8016426:	79fa      	ldrb	r2, [r7, #7]
 8016428:	4905      	ldr	r1, [pc, #20]	; (8016440 <disk_status+0x30>)
 801642a:	440a      	add	r2, r1
 801642c:	7a12      	ldrb	r2, [r2, #8]
 801642e:	4610      	mov	r0, r2
 8016430:	4798      	blx	r3
 8016432:	4603      	mov	r3, r0
 8016434:	73fb      	strb	r3, [r7, #15]
  return stat;
 8016436:	7bfb      	ldrb	r3, [r7, #15]
}
 8016438:	4618      	mov	r0, r3
 801643a:	3710      	adds	r7, #16
 801643c:	46bd      	mov	sp, r7
 801643e:	bd80      	pop	{r7, pc}
 8016440:	24000b84 	.word	0x24000b84

08016444 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8016444:	b580      	push	{r7, lr}
 8016446:	b084      	sub	sp, #16
 8016448:	af00      	add	r7, sp, #0
 801644a:	4603      	mov	r3, r0
 801644c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801644e:	2300      	movs	r3, #0
 8016450:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8016452:	79fb      	ldrb	r3, [r7, #7]
 8016454:	4a0d      	ldr	r2, [pc, #52]	; (801648c <disk_initialize+0x48>)
 8016456:	5cd3      	ldrb	r3, [r2, r3]
 8016458:	2b00      	cmp	r3, #0
 801645a:	d111      	bne.n	8016480 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 801645c:	79fb      	ldrb	r3, [r7, #7]
 801645e:	4a0b      	ldr	r2, [pc, #44]	; (801648c <disk_initialize+0x48>)
 8016460:	2101      	movs	r1, #1
 8016462:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8016464:	79fb      	ldrb	r3, [r7, #7]
 8016466:	4a09      	ldr	r2, [pc, #36]	; (801648c <disk_initialize+0x48>)
 8016468:	009b      	lsls	r3, r3, #2
 801646a:	4413      	add	r3, r2
 801646c:	685b      	ldr	r3, [r3, #4]
 801646e:	681b      	ldr	r3, [r3, #0]
 8016470:	79fa      	ldrb	r2, [r7, #7]
 8016472:	4906      	ldr	r1, [pc, #24]	; (801648c <disk_initialize+0x48>)
 8016474:	440a      	add	r2, r1
 8016476:	7a12      	ldrb	r2, [r2, #8]
 8016478:	4610      	mov	r0, r2
 801647a:	4798      	blx	r3
 801647c:	4603      	mov	r3, r0
 801647e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8016480:	7bfb      	ldrb	r3, [r7, #15]
}
 8016482:	4618      	mov	r0, r3
 8016484:	3710      	adds	r7, #16
 8016486:	46bd      	mov	sp, r7
 8016488:	bd80      	pop	{r7, pc}
 801648a:	bf00      	nop
 801648c:	24000b84 	.word	0x24000b84

08016490 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8016490:	b590      	push	{r4, r7, lr}
 8016492:	b087      	sub	sp, #28
 8016494:	af00      	add	r7, sp, #0
 8016496:	60b9      	str	r1, [r7, #8]
 8016498:	607a      	str	r2, [r7, #4]
 801649a:	603b      	str	r3, [r7, #0]
 801649c:	4603      	mov	r3, r0
 801649e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80164a0:	7bfb      	ldrb	r3, [r7, #15]
 80164a2:	4a0a      	ldr	r2, [pc, #40]	; (80164cc <disk_read+0x3c>)
 80164a4:	009b      	lsls	r3, r3, #2
 80164a6:	4413      	add	r3, r2
 80164a8:	685b      	ldr	r3, [r3, #4]
 80164aa:	689c      	ldr	r4, [r3, #8]
 80164ac:	7bfb      	ldrb	r3, [r7, #15]
 80164ae:	4a07      	ldr	r2, [pc, #28]	; (80164cc <disk_read+0x3c>)
 80164b0:	4413      	add	r3, r2
 80164b2:	7a18      	ldrb	r0, [r3, #8]
 80164b4:	683b      	ldr	r3, [r7, #0]
 80164b6:	687a      	ldr	r2, [r7, #4]
 80164b8:	68b9      	ldr	r1, [r7, #8]
 80164ba:	47a0      	blx	r4
 80164bc:	4603      	mov	r3, r0
 80164be:	75fb      	strb	r3, [r7, #23]
  return res;
 80164c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80164c2:	4618      	mov	r0, r3
 80164c4:	371c      	adds	r7, #28
 80164c6:	46bd      	mov	sp, r7
 80164c8:	bd90      	pop	{r4, r7, pc}
 80164ca:	bf00      	nop
 80164cc:	24000b84 	.word	0x24000b84

080164d0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80164d0:	b590      	push	{r4, r7, lr}
 80164d2:	b087      	sub	sp, #28
 80164d4:	af00      	add	r7, sp, #0
 80164d6:	60b9      	str	r1, [r7, #8]
 80164d8:	607a      	str	r2, [r7, #4]
 80164da:	603b      	str	r3, [r7, #0]
 80164dc:	4603      	mov	r3, r0
 80164de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80164e0:	7bfb      	ldrb	r3, [r7, #15]
 80164e2:	4a0a      	ldr	r2, [pc, #40]	; (801650c <disk_write+0x3c>)
 80164e4:	009b      	lsls	r3, r3, #2
 80164e6:	4413      	add	r3, r2
 80164e8:	685b      	ldr	r3, [r3, #4]
 80164ea:	68dc      	ldr	r4, [r3, #12]
 80164ec:	7bfb      	ldrb	r3, [r7, #15]
 80164ee:	4a07      	ldr	r2, [pc, #28]	; (801650c <disk_write+0x3c>)
 80164f0:	4413      	add	r3, r2
 80164f2:	7a18      	ldrb	r0, [r3, #8]
 80164f4:	683b      	ldr	r3, [r7, #0]
 80164f6:	687a      	ldr	r2, [r7, #4]
 80164f8:	68b9      	ldr	r1, [r7, #8]
 80164fa:	47a0      	blx	r4
 80164fc:	4603      	mov	r3, r0
 80164fe:	75fb      	strb	r3, [r7, #23]
  return res;
 8016500:	7dfb      	ldrb	r3, [r7, #23]
}
 8016502:	4618      	mov	r0, r3
 8016504:	371c      	adds	r7, #28
 8016506:	46bd      	mov	sp, r7
 8016508:	bd90      	pop	{r4, r7, pc}
 801650a:	bf00      	nop
 801650c:	24000b84 	.word	0x24000b84

08016510 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8016510:	b580      	push	{r7, lr}
 8016512:	b084      	sub	sp, #16
 8016514:	af00      	add	r7, sp, #0
 8016516:	4603      	mov	r3, r0
 8016518:	603a      	str	r2, [r7, #0]
 801651a:	71fb      	strb	r3, [r7, #7]
 801651c:	460b      	mov	r3, r1
 801651e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8016520:	79fb      	ldrb	r3, [r7, #7]
 8016522:	4a09      	ldr	r2, [pc, #36]	; (8016548 <disk_ioctl+0x38>)
 8016524:	009b      	lsls	r3, r3, #2
 8016526:	4413      	add	r3, r2
 8016528:	685b      	ldr	r3, [r3, #4]
 801652a:	691b      	ldr	r3, [r3, #16]
 801652c:	79fa      	ldrb	r2, [r7, #7]
 801652e:	4906      	ldr	r1, [pc, #24]	; (8016548 <disk_ioctl+0x38>)
 8016530:	440a      	add	r2, r1
 8016532:	7a10      	ldrb	r0, [r2, #8]
 8016534:	79b9      	ldrb	r1, [r7, #6]
 8016536:	683a      	ldr	r2, [r7, #0]
 8016538:	4798      	blx	r3
 801653a:	4603      	mov	r3, r0
 801653c:	73fb      	strb	r3, [r7, #15]
  return res;
 801653e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016540:	4618      	mov	r0, r3
 8016542:	3710      	adds	r7, #16
 8016544:	46bd      	mov	sp, r7
 8016546:	bd80      	pop	{r7, pc}
 8016548:	24000b84 	.word	0x24000b84

0801654c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801654c:	b480      	push	{r7}
 801654e:	b085      	sub	sp, #20
 8016550:	af00      	add	r7, sp, #0
 8016552:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	3301      	adds	r3, #1
 8016558:	781b      	ldrb	r3, [r3, #0]
 801655a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801655c:	89fb      	ldrh	r3, [r7, #14]
 801655e:	021b      	lsls	r3, r3, #8
 8016560:	b21a      	sxth	r2, r3
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	781b      	ldrb	r3, [r3, #0]
 8016566:	b21b      	sxth	r3, r3
 8016568:	4313      	orrs	r3, r2
 801656a:	b21b      	sxth	r3, r3
 801656c:	81fb      	strh	r3, [r7, #14]
	return rv;
 801656e:	89fb      	ldrh	r3, [r7, #14]
}
 8016570:	4618      	mov	r0, r3
 8016572:	3714      	adds	r7, #20
 8016574:	46bd      	mov	sp, r7
 8016576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801657a:	4770      	bx	lr

0801657c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801657c:	b480      	push	{r7}
 801657e:	b085      	sub	sp, #20
 8016580:	af00      	add	r7, sp, #0
 8016582:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	3303      	adds	r3, #3
 8016588:	781b      	ldrb	r3, [r3, #0]
 801658a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801658c:	68fb      	ldr	r3, [r7, #12]
 801658e:	021b      	lsls	r3, r3, #8
 8016590:	687a      	ldr	r2, [r7, #4]
 8016592:	3202      	adds	r2, #2
 8016594:	7812      	ldrb	r2, [r2, #0]
 8016596:	4313      	orrs	r3, r2
 8016598:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801659a:	68fb      	ldr	r3, [r7, #12]
 801659c:	021b      	lsls	r3, r3, #8
 801659e:	687a      	ldr	r2, [r7, #4]
 80165a0:	3201      	adds	r2, #1
 80165a2:	7812      	ldrb	r2, [r2, #0]
 80165a4:	4313      	orrs	r3, r2
 80165a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80165a8:	68fb      	ldr	r3, [r7, #12]
 80165aa:	021b      	lsls	r3, r3, #8
 80165ac:	687a      	ldr	r2, [r7, #4]
 80165ae:	7812      	ldrb	r2, [r2, #0]
 80165b0:	4313      	orrs	r3, r2
 80165b2:	60fb      	str	r3, [r7, #12]
	return rv;
 80165b4:	68fb      	ldr	r3, [r7, #12]
}
 80165b6:	4618      	mov	r0, r3
 80165b8:	3714      	adds	r7, #20
 80165ba:	46bd      	mov	sp, r7
 80165bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165c0:	4770      	bx	lr

080165c2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80165c2:	b480      	push	{r7}
 80165c4:	b083      	sub	sp, #12
 80165c6:	af00      	add	r7, sp, #0
 80165c8:	6078      	str	r0, [r7, #4]
 80165ca:	460b      	mov	r3, r1
 80165cc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	1c5a      	adds	r2, r3, #1
 80165d2:	607a      	str	r2, [r7, #4]
 80165d4:	887a      	ldrh	r2, [r7, #2]
 80165d6:	b2d2      	uxtb	r2, r2
 80165d8:	701a      	strb	r2, [r3, #0]
 80165da:	887b      	ldrh	r3, [r7, #2]
 80165dc:	0a1b      	lsrs	r3, r3, #8
 80165de:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	1c5a      	adds	r2, r3, #1
 80165e4:	607a      	str	r2, [r7, #4]
 80165e6:	887a      	ldrh	r2, [r7, #2]
 80165e8:	b2d2      	uxtb	r2, r2
 80165ea:	701a      	strb	r2, [r3, #0]
}
 80165ec:	bf00      	nop
 80165ee:	370c      	adds	r7, #12
 80165f0:	46bd      	mov	sp, r7
 80165f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165f6:	4770      	bx	lr

080165f8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80165f8:	b480      	push	{r7}
 80165fa:	b083      	sub	sp, #12
 80165fc:	af00      	add	r7, sp, #0
 80165fe:	6078      	str	r0, [r7, #4]
 8016600:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	1c5a      	adds	r2, r3, #1
 8016606:	607a      	str	r2, [r7, #4]
 8016608:	683a      	ldr	r2, [r7, #0]
 801660a:	b2d2      	uxtb	r2, r2
 801660c:	701a      	strb	r2, [r3, #0]
 801660e:	683b      	ldr	r3, [r7, #0]
 8016610:	0a1b      	lsrs	r3, r3, #8
 8016612:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016614:	687b      	ldr	r3, [r7, #4]
 8016616:	1c5a      	adds	r2, r3, #1
 8016618:	607a      	str	r2, [r7, #4]
 801661a:	683a      	ldr	r2, [r7, #0]
 801661c:	b2d2      	uxtb	r2, r2
 801661e:	701a      	strb	r2, [r3, #0]
 8016620:	683b      	ldr	r3, [r7, #0]
 8016622:	0a1b      	lsrs	r3, r3, #8
 8016624:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	1c5a      	adds	r2, r3, #1
 801662a:	607a      	str	r2, [r7, #4]
 801662c:	683a      	ldr	r2, [r7, #0]
 801662e:	b2d2      	uxtb	r2, r2
 8016630:	701a      	strb	r2, [r3, #0]
 8016632:	683b      	ldr	r3, [r7, #0]
 8016634:	0a1b      	lsrs	r3, r3, #8
 8016636:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	1c5a      	adds	r2, r3, #1
 801663c:	607a      	str	r2, [r7, #4]
 801663e:	683a      	ldr	r2, [r7, #0]
 8016640:	b2d2      	uxtb	r2, r2
 8016642:	701a      	strb	r2, [r3, #0]
}
 8016644:	bf00      	nop
 8016646:	370c      	adds	r7, #12
 8016648:	46bd      	mov	sp, r7
 801664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801664e:	4770      	bx	lr

08016650 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8016650:	b480      	push	{r7}
 8016652:	b087      	sub	sp, #28
 8016654:	af00      	add	r7, sp, #0
 8016656:	60f8      	str	r0, [r7, #12]
 8016658:	60b9      	str	r1, [r7, #8]
 801665a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801665c:	68fb      	ldr	r3, [r7, #12]
 801665e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8016660:	68bb      	ldr	r3, [r7, #8]
 8016662:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	2b00      	cmp	r3, #0
 8016668:	d00d      	beq.n	8016686 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801666a:	693a      	ldr	r2, [r7, #16]
 801666c:	1c53      	adds	r3, r2, #1
 801666e:	613b      	str	r3, [r7, #16]
 8016670:	697b      	ldr	r3, [r7, #20]
 8016672:	1c59      	adds	r1, r3, #1
 8016674:	6179      	str	r1, [r7, #20]
 8016676:	7812      	ldrb	r2, [r2, #0]
 8016678:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	3b01      	subs	r3, #1
 801667e:	607b      	str	r3, [r7, #4]
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	2b00      	cmp	r3, #0
 8016684:	d1f1      	bne.n	801666a <mem_cpy+0x1a>
	}
}
 8016686:	bf00      	nop
 8016688:	371c      	adds	r7, #28
 801668a:	46bd      	mov	sp, r7
 801668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016690:	4770      	bx	lr

08016692 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8016692:	b480      	push	{r7}
 8016694:	b087      	sub	sp, #28
 8016696:	af00      	add	r7, sp, #0
 8016698:	60f8      	str	r0, [r7, #12]
 801669a:	60b9      	str	r1, [r7, #8]
 801669c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801669e:	68fb      	ldr	r3, [r7, #12]
 80166a0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80166a2:	697b      	ldr	r3, [r7, #20]
 80166a4:	1c5a      	adds	r2, r3, #1
 80166a6:	617a      	str	r2, [r7, #20]
 80166a8:	68ba      	ldr	r2, [r7, #8]
 80166aa:	b2d2      	uxtb	r2, r2
 80166ac:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	3b01      	subs	r3, #1
 80166b2:	607b      	str	r3, [r7, #4]
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d1f3      	bne.n	80166a2 <mem_set+0x10>
}
 80166ba:	bf00      	nop
 80166bc:	371c      	adds	r7, #28
 80166be:	46bd      	mov	sp, r7
 80166c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166c4:	4770      	bx	lr

080166c6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80166c6:	b480      	push	{r7}
 80166c8:	b089      	sub	sp, #36	; 0x24
 80166ca:	af00      	add	r7, sp, #0
 80166cc:	60f8      	str	r0, [r7, #12]
 80166ce:	60b9      	str	r1, [r7, #8]
 80166d0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80166d2:	68fb      	ldr	r3, [r7, #12]
 80166d4:	61fb      	str	r3, [r7, #28]
 80166d6:	68bb      	ldr	r3, [r7, #8]
 80166d8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80166da:	2300      	movs	r3, #0
 80166dc:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80166de:	69fb      	ldr	r3, [r7, #28]
 80166e0:	1c5a      	adds	r2, r3, #1
 80166e2:	61fa      	str	r2, [r7, #28]
 80166e4:	781b      	ldrb	r3, [r3, #0]
 80166e6:	4619      	mov	r1, r3
 80166e8:	69bb      	ldr	r3, [r7, #24]
 80166ea:	1c5a      	adds	r2, r3, #1
 80166ec:	61ba      	str	r2, [r7, #24]
 80166ee:	781b      	ldrb	r3, [r3, #0]
 80166f0:	1acb      	subs	r3, r1, r3
 80166f2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	3b01      	subs	r3, #1
 80166f8:	607b      	str	r3, [r7, #4]
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d002      	beq.n	8016706 <mem_cmp+0x40>
 8016700:	697b      	ldr	r3, [r7, #20]
 8016702:	2b00      	cmp	r3, #0
 8016704:	d0eb      	beq.n	80166de <mem_cmp+0x18>

	return r;
 8016706:	697b      	ldr	r3, [r7, #20]
}
 8016708:	4618      	mov	r0, r3
 801670a:	3724      	adds	r7, #36	; 0x24
 801670c:	46bd      	mov	sp, r7
 801670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016712:	4770      	bx	lr

08016714 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8016714:	b480      	push	{r7}
 8016716:	b083      	sub	sp, #12
 8016718:	af00      	add	r7, sp, #0
 801671a:	6078      	str	r0, [r7, #4]
 801671c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801671e:	e002      	b.n	8016726 <chk_chr+0x12>
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	3301      	adds	r3, #1
 8016724:	607b      	str	r3, [r7, #4]
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	781b      	ldrb	r3, [r3, #0]
 801672a:	2b00      	cmp	r3, #0
 801672c:	d005      	beq.n	801673a <chk_chr+0x26>
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	781b      	ldrb	r3, [r3, #0]
 8016732:	461a      	mov	r2, r3
 8016734:	683b      	ldr	r3, [r7, #0]
 8016736:	4293      	cmp	r3, r2
 8016738:	d1f2      	bne.n	8016720 <chk_chr+0xc>
	return *str;
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	781b      	ldrb	r3, [r3, #0]
}
 801673e:	4618      	mov	r0, r3
 8016740:	370c      	adds	r7, #12
 8016742:	46bd      	mov	sp, r7
 8016744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016748:	4770      	bx	lr
	...

0801674c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801674c:	b480      	push	{r7}
 801674e:	b085      	sub	sp, #20
 8016750:	af00      	add	r7, sp, #0
 8016752:	6078      	str	r0, [r7, #4]
 8016754:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016756:	2300      	movs	r3, #0
 8016758:	60bb      	str	r3, [r7, #8]
 801675a:	68bb      	ldr	r3, [r7, #8]
 801675c:	60fb      	str	r3, [r7, #12]
 801675e:	e029      	b.n	80167b4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8016760:	4a27      	ldr	r2, [pc, #156]	; (8016800 <chk_lock+0xb4>)
 8016762:	68fb      	ldr	r3, [r7, #12]
 8016764:	011b      	lsls	r3, r3, #4
 8016766:	4413      	add	r3, r2
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	2b00      	cmp	r3, #0
 801676c:	d01d      	beq.n	80167aa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801676e:	4a24      	ldr	r2, [pc, #144]	; (8016800 <chk_lock+0xb4>)
 8016770:	68fb      	ldr	r3, [r7, #12]
 8016772:	011b      	lsls	r3, r3, #4
 8016774:	4413      	add	r3, r2
 8016776:	681a      	ldr	r2, [r3, #0]
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	681b      	ldr	r3, [r3, #0]
 801677c:	429a      	cmp	r2, r3
 801677e:	d116      	bne.n	80167ae <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8016780:	4a1f      	ldr	r2, [pc, #124]	; (8016800 <chk_lock+0xb4>)
 8016782:	68fb      	ldr	r3, [r7, #12]
 8016784:	011b      	lsls	r3, r3, #4
 8016786:	4413      	add	r3, r2
 8016788:	3304      	adds	r3, #4
 801678a:	681a      	ldr	r2, [r3, #0]
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016790:	429a      	cmp	r2, r3
 8016792:	d10c      	bne.n	80167ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8016794:	4a1a      	ldr	r2, [pc, #104]	; (8016800 <chk_lock+0xb4>)
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	011b      	lsls	r3, r3, #4
 801679a:	4413      	add	r3, r2
 801679c:	3308      	adds	r3, #8
 801679e:	681a      	ldr	r2, [r3, #0]
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80167a4:	429a      	cmp	r2, r3
 80167a6:	d102      	bne.n	80167ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80167a8:	e007      	b.n	80167ba <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80167aa:	2301      	movs	r3, #1
 80167ac:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	3301      	adds	r3, #1
 80167b2:	60fb      	str	r3, [r7, #12]
 80167b4:	68fb      	ldr	r3, [r7, #12]
 80167b6:	2b01      	cmp	r3, #1
 80167b8:	d9d2      	bls.n	8016760 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	2b02      	cmp	r3, #2
 80167be:	d109      	bne.n	80167d4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80167c0:	68bb      	ldr	r3, [r7, #8]
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d102      	bne.n	80167cc <chk_lock+0x80>
 80167c6:	683b      	ldr	r3, [r7, #0]
 80167c8:	2b02      	cmp	r3, #2
 80167ca:	d101      	bne.n	80167d0 <chk_lock+0x84>
 80167cc:	2300      	movs	r3, #0
 80167ce:	e010      	b.n	80167f2 <chk_lock+0xa6>
 80167d0:	2312      	movs	r3, #18
 80167d2:	e00e      	b.n	80167f2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80167d4:	683b      	ldr	r3, [r7, #0]
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d108      	bne.n	80167ec <chk_lock+0xa0>
 80167da:	4a09      	ldr	r2, [pc, #36]	; (8016800 <chk_lock+0xb4>)
 80167dc:	68fb      	ldr	r3, [r7, #12]
 80167de:	011b      	lsls	r3, r3, #4
 80167e0:	4413      	add	r3, r2
 80167e2:	330c      	adds	r3, #12
 80167e4:	881b      	ldrh	r3, [r3, #0]
 80167e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80167ea:	d101      	bne.n	80167f0 <chk_lock+0xa4>
 80167ec:	2310      	movs	r3, #16
 80167ee:	e000      	b.n	80167f2 <chk_lock+0xa6>
 80167f0:	2300      	movs	r3, #0
}
 80167f2:	4618      	mov	r0, r3
 80167f4:	3714      	adds	r7, #20
 80167f6:	46bd      	mov	sp, r7
 80167f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167fc:	4770      	bx	lr
 80167fe:	bf00      	nop
 8016800:	24000b64 	.word	0x24000b64

08016804 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8016804:	b480      	push	{r7}
 8016806:	b083      	sub	sp, #12
 8016808:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801680a:	2300      	movs	r3, #0
 801680c:	607b      	str	r3, [r7, #4]
 801680e:	e002      	b.n	8016816 <enq_lock+0x12>
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	3301      	adds	r3, #1
 8016814:	607b      	str	r3, [r7, #4]
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	2b01      	cmp	r3, #1
 801681a:	d806      	bhi.n	801682a <enq_lock+0x26>
 801681c:	4a09      	ldr	r2, [pc, #36]	; (8016844 <enq_lock+0x40>)
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	011b      	lsls	r3, r3, #4
 8016822:	4413      	add	r3, r2
 8016824:	681b      	ldr	r3, [r3, #0]
 8016826:	2b00      	cmp	r3, #0
 8016828:	d1f2      	bne.n	8016810 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	2b02      	cmp	r3, #2
 801682e:	bf14      	ite	ne
 8016830:	2301      	movne	r3, #1
 8016832:	2300      	moveq	r3, #0
 8016834:	b2db      	uxtb	r3, r3
}
 8016836:	4618      	mov	r0, r3
 8016838:	370c      	adds	r7, #12
 801683a:	46bd      	mov	sp, r7
 801683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016840:	4770      	bx	lr
 8016842:	bf00      	nop
 8016844:	24000b64 	.word	0x24000b64

08016848 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8016848:	b480      	push	{r7}
 801684a:	b085      	sub	sp, #20
 801684c:	af00      	add	r7, sp, #0
 801684e:	6078      	str	r0, [r7, #4]
 8016850:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8016852:	2300      	movs	r3, #0
 8016854:	60fb      	str	r3, [r7, #12]
 8016856:	e01f      	b.n	8016898 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8016858:	4a41      	ldr	r2, [pc, #260]	; (8016960 <inc_lock+0x118>)
 801685a:	68fb      	ldr	r3, [r7, #12]
 801685c:	011b      	lsls	r3, r3, #4
 801685e:	4413      	add	r3, r2
 8016860:	681a      	ldr	r2, [r3, #0]
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	681b      	ldr	r3, [r3, #0]
 8016866:	429a      	cmp	r2, r3
 8016868:	d113      	bne.n	8016892 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801686a:	4a3d      	ldr	r2, [pc, #244]	; (8016960 <inc_lock+0x118>)
 801686c:	68fb      	ldr	r3, [r7, #12]
 801686e:	011b      	lsls	r3, r3, #4
 8016870:	4413      	add	r3, r2
 8016872:	3304      	adds	r3, #4
 8016874:	681a      	ldr	r2, [r3, #0]
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801687a:	429a      	cmp	r2, r3
 801687c:	d109      	bne.n	8016892 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801687e:	4a38      	ldr	r2, [pc, #224]	; (8016960 <inc_lock+0x118>)
 8016880:	68fb      	ldr	r3, [r7, #12]
 8016882:	011b      	lsls	r3, r3, #4
 8016884:	4413      	add	r3, r2
 8016886:	3308      	adds	r3, #8
 8016888:	681a      	ldr	r2, [r3, #0]
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801688e:	429a      	cmp	r2, r3
 8016890:	d006      	beq.n	80168a0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8016892:	68fb      	ldr	r3, [r7, #12]
 8016894:	3301      	adds	r3, #1
 8016896:	60fb      	str	r3, [r7, #12]
 8016898:	68fb      	ldr	r3, [r7, #12]
 801689a:	2b01      	cmp	r3, #1
 801689c:	d9dc      	bls.n	8016858 <inc_lock+0x10>
 801689e:	e000      	b.n	80168a2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80168a0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80168a2:	68fb      	ldr	r3, [r7, #12]
 80168a4:	2b02      	cmp	r3, #2
 80168a6:	d132      	bne.n	801690e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80168a8:	2300      	movs	r3, #0
 80168aa:	60fb      	str	r3, [r7, #12]
 80168ac:	e002      	b.n	80168b4 <inc_lock+0x6c>
 80168ae:	68fb      	ldr	r3, [r7, #12]
 80168b0:	3301      	adds	r3, #1
 80168b2:	60fb      	str	r3, [r7, #12]
 80168b4:	68fb      	ldr	r3, [r7, #12]
 80168b6:	2b01      	cmp	r3, #1
 80168b8:	d806      	bhi.n	80168c8 <inc_lock+0x80>
 80168ba:	4a29      	ldr	r2, [pc, #164]	; (8016960 <inc_lock+0x118>)
 80168bc:	68fb      	ldr	r3, [r7, #12]
 80168be:	011b      	lsls	r3, r3, #4
 80168c0:	4413      	add	r3, r2
 80168c2:	681b      	ldr	r3, [r3, #0]
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d1f2      	bne.n	80168ae <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80168c8:	68fb      	ldr	r3, [r7, #12]
 80168ca:	2b02      	cmp	r3, #2
 80168cc:	d101      	bne.n	80168d2 <inc_lock+0x8a>
 80168ce:	2300      	movs	r3, #0
 80168d0:	e040      	b.n	8016954 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	681a      	ldr	r2, [r3, #0]
 80168d6:	4922      	ldr	r1, [pc, #136]	; (8016960 <inc_lock+0x118>)
 80168d8:	68fb      	ldr	r3, [r7, #12]
 80168da:	011b      	lsls	r3, r3, #4
 80168dc:	440b      	add	r3, r1
 80168de:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	689a      	ldr	r2, [r3, #8]
 80168e4:	491e      	ldr	r1, [pc, #120]	; (8016960 <inc_lock+0x118>)
 80168e6:	68fb      	ldr	r3, [r7, #12]
 80168e8:	011b      	lsls	r3, r3, #4
 80168ea:	440b      	add	r3, r1
 80168ec:	3304      	adds	r3, #4
 80168ee:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	695a      	ldr	r2, [r3, #20]
 80168f4:	491a      	ldr	r1, [pc, #104]	; (8016960 <inc_lock+0x118>)
 80168f6:	68fb      	ldr	r3, [r7, #12]
 80168f8:	011b      	lsls	r3, r3, #4
 80168fa:	440b      	add	r3, r1
 80168fc:	3308      	adds	r3, #8
 80168fe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8016900:	4a17      	ldr	r2, [pc, #92]	; (8016960 <inc_lock+0x118>)
 8016902:	68fb      	ldr	r3, [r7, #12]
 8016904:	011b      	lsls	r3, r3, #4
 8016906:	4413      	add	r3, r2
 8016908:	330c      	adds	r3, #12
 801690a:	2200      	movs	r2, #0
 801690c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801690e:	683b      	ldr	r3, [r7, #0]
 8016910:	2b00      	cmp	r3, #0
 8016912:	d009      	beq.n	8016928 <inc_lock+0xe0>
 8016914:	4a12      	ldr	r2, [pc, #72]	; (8016960 <inc_lock+0x118>)
 8016916:	68fb      	ldr	r3, [r7, #12]
 8016918:	011b      	lsls	r3, r3, #4
 801691a:	4413      	add	r3, r2
 801691c:	330c      	adds	r3, #12
 801691e:	881b      	ldrh	r3, [r3, #0]
 8016920:	2b00      	cmp	r3, #0
 8016922:	d001      	beq.n	8016928 <inc_lock+0xe0>
 8016924:	2300      	movs	r3, #0
 8016926:	e015      	b.n	8016954 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8016928:	683b      	ldr	r3, [r7, #0]
 801692a:	2b00      	cmp	r3, #0
 801692c:	d108      	bne.n	8016940 <inc_lock+0xf8>
 801692e:	4a0c      	ldr	r2, [pc, #48]	; (8016960 <inc_lock+0x118>)
 8016930:	68fb      	ldr	r3, [r7, #12]
 8016932:	011b      	lsls	r3, r3, #4
 8016934:	4413      	add	r3, r2
 8016936:	330c      	adds	r3, #12
 8016938:	881b      	ldrh	r3, [r3, #0]
 801693a:	3301      	adds	r3, #1
 801693c:	b29a      	uxth	r2, r3
 801693e:	e001      	b.n	8016944 <inc_lock+0xfc>
 8016940:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016944:	4906      	ldr	r1, [pc, #24]	; (8016960 <inc_lock+0x118>)
 8016946:	68fb      	ldr	r3, [r7, #12]
 8016948:	011b      	lsls	r3, r3, #4
 801694a:	440b      	add	r3, r1
 801694c:	330c      	adds	r3, #12
 801694e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8016950:	68fb      	ldr	r3, [r7, #12]
 8016952:	3301      	adds	r3, #1
}
 8016954:	4618      	mov	r0, r3
 8016956:	3714      	adds	r7, #20
 8016958:	46bd      	mov	sp, r7
 801695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801695e:	4770      	bx	lr
 8016960:	24000b64 	.word	0x24000b64

08016964 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8016964:	b480      	push	{r7}
 8016966:	b085      	sub	sp, #20
 8016968:	af00      	add	r7, sp, #0
 801696a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	3b01      	subs	r3, #1
 8016970:	607b      	str	r3, [r7, #4]
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	2b01      	cmp	r3, #1
 8016976:	d825      	bhi.n	80169c4 <dec_lock+0x60>
		n = Files[i].ctr;
 8016978:	4a17      	ldr	r2, [pc, #92]	; (80169d8 <dec_lock+0x74>)
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	011b      	lsls	r3, r3, #4
 801697e:	4413      	add	r3, r2
 8016980:	330c      	adds	r3, #12
 8016982:	881b      	ldrh	r3, [r3, #0]
 8016984:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8016986:	89fb      	ldrh	r3, [r7, #14]
 8016988:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801698c:	d101      	bne.n	8016992 <dec_lock+0x2e>
 801698e:	2300      	movs	r3, #0
 8016990:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8016992:	89fb      	ldrh	r3, [r7, #14]
 8016994:	2b00      	cmp	r3, #0
 8016996:	d002      	beq.n	801699e <dec_lock+0x3a>
 8016998:	89fb      	ldrh	r3, [r7, #14]
 801699a:	3b01      	subs	r3, #1
 801699c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801699e:	4a0e      	ldr	r2, [pc, #56]	; (80169d8 <dec_lock+0x74>)
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	011b      	lsls	r3, r3, #4
 80169a4:	4413      	add	r3, r2
 80169a6:	330c      	adds	r3, #12
 80169a8:	89fa      	ldrh	r2, [r7, #14]
 80169aa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80169ac:	89fb      	ldrh	r3, [r7, #14]
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	d105      	bne.n	80169be <dec_lock+0x5a>
 80169b2:	4a09      	ldr	r2, [pc, #36]	; (80169d8 <dec_lock+0x74>)
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	011b      	lsls	r3, r3, #4
 80169b8:	4413      	add	r3, r2
 80169ba:	2200      	movs	r2, #0
 80169bc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80169be:	2300      	movs	r3, #0
 80169c0:	737b      	strb	r3, [r7, #13]
 80169c2:	e001      	b.n	80169c8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80169c4:	2302      	movs	r3, #2
 80169c6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80169c8:	7b7b      	ldrb	r3, [r7, #13]
}
 80169ca:	4618      	mov	r0, r3
 80169cc:	3714      	adds	r7, #20
 80169ce:	46bd      	mov	sp, r7
 80169d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169d4:	4770      	bx	lr
 80169d6:	bf00      	nop
 80169d8:	24000b64 	.word	0x24000b64

080169dc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80169dc:	b480      	push	{r7}
 80169de:	b085      	sub	sp, #20
 80169e0:	af00      	add	r7, sp, #0
 80169e2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80169e4:	2300      	movs	r3, #0
 80169e6:	60fb      	str	r3, [r7, #12]
 80169e8:	e010      	b.n	8016a0c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80169ea:	4a0d      	ldr	r2, [pc, #52]	; (8016a20 <clear_lock+0x44>)
 80169ec:	68fb      	ldr	r3, [r7, #12]
 80169ee:	011b      	lsls	r3, r3, #4
 80169f0:	4413      	add	r3, r2
 80169f2:	681b      	ldr	r3, [r3, #0]
 80169f4:	687a      	ldr	r2, [r7, #4]
 80169f6:	429a      	cmp	r2, r3
 80169f8:	d105      	bne.n	8016a06 <clear_lock+0x2a>
 80169fa:	4a09      	ldr	r2, [pc, #36]	; (8016a20 <clear_lock+0x44>)
 80169fc:	68fb      	ldr	r3, [r7, #12]
 80169fe:	011b      	lsls	r3, r3, #4
 8016a00:	4413      	add	r3, r2
 8016a02:	2200      	movs	r2, #0
 8016a04:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8016a06:	68fb      	ldr	r3, [r7, #12]
 8016a08:	3301      	adds	r3, #1
 8016a0a:	60fb      	str	r3, [r7, #12]
 8016a0c:	68fb      	ldr	r3, [r7, #12]
 8016a0e:	2b01      	cmp	r3, #1
 8016a10:	d9eb      	bls.n	80169ea <clear_lock+0xe>
	}
}
 8016a12:	bf00      	nop
 8016a14:	3714      	adds	r7, #20
 8016a16:	46bd      	mov	sp, r7
 8016a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a1c:	4770      	bx	lr
 8016a1e:	bf00      	nop
 8016a20:	24000b64 	.word	0x24000b64

08016a24 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8016a24:	b580      	push	{r7, lr}
 8016a26:	b086      	sub	sp, #24
 8016a28:	af00      	add	r7, sp, #0
 8016a2a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8016a2c:	2300      	movs	r3, #0
 8016a2e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	78db      	ldrb	r3, [r3, #3]
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d034      	beq.n	8016aa2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a3c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	7858      	ldrb	r0, [r3, #1]
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016a48:	2301      	movs	r3, #1
 8016a4a:	697a      	ldr	r2, [r7, #20]
 8016a4c:	f7ff fd40 	bl	80164d0 <disk_write>
 8016a50:	4603      	mov	r3, r0
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d002      	beq.n	8016a5c <sync_window+0x38>
			res = FR_DISK_ERR;
 8016a56:	2301      	movs	r3, #1
 8016a58:	73fb      	strb	r3, [r7, #15]
 8016a5a:	e022      	b.n	8016aa2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	2200      	movs	r2, #0
 8016a60:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	6a1b      	ldr	r3, [r3, #32]
 8016a66:	697a      	ldr	r2, [r7, #20]
 8016a68:	1ad2      	subs	r2, r2, r3
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	699b      	ldr	r3, [r3, #24]
 8016a6e:	429a      	cmp	r2, r3
 8016a70:	d217      	bcs.n	8016aa2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	789b      	ldrb	r3, [r3, #2]
 8016a76:	613b      	str	r3, [r7, #16]
 8016a78:	e010      	b.n	8016a9c <sync_window+0x78>
					wsect += fs->fsize;
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	699b      	ldr	r3, [r3, #24]
 8016a7e:	697a      	ldr	r2, [r7, #20]
 8016a80:	4413      	add	r3, r2
 8016a82:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	7858      	ldrb	r0, [r3, #1]
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016a8e:	2301      	movs	r3, #1
 8016a90:	697a      	ldr	r2, [r7, #20]
 8016a92:	f7ff fd1d 	bl	80164d0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016a96:	693b      	ldr	r3, [r7, #16]
 8016a98:	3b01      	subs	r3, #1
 8016a9a:	613b      	str	r3, [r7, #16]
 8016a9c:	693b      	ldr	r3, [r7, #16]
 8016a9e:	2b01      	cmp	r3, #1
 8016aa0:	d8eb      	bhi.n	8016a7a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8016aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8016aa4:	4618      	mov	r0, r3
 8016aa6:	3718      	adds	r7, #24
 8016aa8:	46bd      	mov	sp, r7
 8016aaa:	bd80      	pop	{r7, pc}

08016aac <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8016aac:	b580      	push	{r7, lr}
 8016aae:	b084      	sub	sp, #16
 8016ab0:	af00      	add	r7, sp, #0
 8016ab2:	6078      	str	r0, [r7, #4]
 8016ab4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8016ab6:	2300      	movs	r3, #0
 8016ab8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016abe:	683a      	ldr	r2, [r7, #0]
 8016ac0:	429a      	cmp	r2, r3
 8016ac2:	d01b      	beq.n	8016afc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8016ac4:	6878      	ldr	r0, [r7, #4]
 8016ac6:	f7ff ffad 	bl	8016a24 <sync_window>
 8016aca:	4603      	mov	r3, r0
 8016acc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8016ace:	7bfb      	ldrb	r3, [r7, #15]
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	d113      	bne.n	8016afc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	7858      	ldrb	r0, [r3, #1]
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016ade:	2301      	movs	r3, #1
 8016ae0:	683a      	ldr	r2, [r7, #0]
 8016ae2:	f7ff fcd5 	bl	8016490 <disk_read>
 8016ae6:	4603      	mov	r3, r0
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	d004      	beq.n	8016af6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8016aec:	f04f 33ff 	mov.w	r3, #4294967295
 8016af0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8016af2:	2301      	movs	r3, #1
 8016af4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	683a      	ldr	r2, [r7, #0]
 8016afa:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8016afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8016afe:	4618      	mov	r0, r3
 8016b00:	3710      	adds	r7, #16
 8016b02:	46bd      	mov	sp, r7
 8016b04:	bd80      	pop	{r7, pc}
	...

08016b08 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8016b08:	b580      	push	{r7, lr}
 8016b0a:	b084      	sub	sp, #16
 8016b0c:	af00      	add	r7, sp, #0
 8016b0e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8016b10:	6878      	ldr	r0, [r7, #4]
 8016b12:	f7ff ff87 	bl	8016a24 <sync_window>
 8016b16:	4603      	mov	r3, r0
 8016b18:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8016b1a:	7bfb      	ldrb	r3, [r7, #15]
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d158      	bne.n	8016bd2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	781b      	ldrb	r3, [r3, #0]
 8016b24:	2b03      	cmp	r3, #3
 8016b26:	d148      	bne.n	8016bba <sync_fs+0xb2>
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	791b      	ldrb	r3, [r3, #4]
 8016b2c:	2b01      	cmp	r3, #1
 8016b2e:	d144      	bne.n	8016bba <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	3330      	adds	r3, #48	; 0x30
 8016b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016b38:	2100      	movs	r1, #0
 8016b3a:	4618      	mov	r0, r3
 8016b3c:	f7ff fda9 	bl	8016692 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	3330      	adds	r3, #48	; 0x30
 8016b44:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016b48:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8016b4c:	4618      	mov	r0, r3
 8016b4e:	f7ff fd38 	bl	80165c2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	3330      	adds	r3, #48	; 0x30
 8016b56:	4921      	ldr	r1, [pc, #132]	; (8016bdc <sync_fs+0xd4>)
 8016b58:	4618      	mov	r0, r3
 8016b5a:	f7ff fd4d 	bl	80165f8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	3330      	adds	r3, #48	; 0x30
 8016b62:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8016b66:	491e      	ldr	r1, [pc, #120]	; (8016be0 <sync_fs+0xd8>)
 8016b68:	4618      	mov	r0, r3
 8016b6a:	f7ff fd45 	bl	80165f8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	3330      	adds	r3, #48	; 0x30
 8016b72:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	691b      	ldr	r3, [r3, #16]
 8016b7a:	4619      	mov	r1, r3
 8016b7c:	4610      	mov	r0, r2
 8016b7e:	f7ff fd3b 	bl	80165f8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	3330      	adds	r3, #48	; 0x30
 8016b86:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	68db      	ldr	r3, [r3, #12]
 8016b8e:	4619      	mov	r1, r3
 8016b90:	4610      	mov	r0, r2
 8016b92:	f7ff fd31 	bl	80165f8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	69db      	ldr	r3, [r3, #28]
 8016b9a:	1c5a      	adds	r2, r3, #1
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	7858      	ldrb	r0, [r3, #1]
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016bae:	2301      	movs	r3, #1
 8016bb0:	f7ff fc8e 	bl	80164d0 <disk_write>
			fs->fsi_flag = 0;
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	2200      	movs	r2, #0
 8016bb8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	785b      	ldrb	r3, [r3, #1]
 8016bbe:	2200      	movs	r2, #0
 8016bc0:	2100      	movs	r1, #0
 8016bc2:	4618      	mov	r0, r3
 8016bc4:	f7ff fca4 	bl	8016510 <disk_ioctl>
 8016bc8:	4603      	mov	r3, r0
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	d001      	beq.n	8016bd2 <sync_fs+0xca>
 8016bce:	2301      	movs	r3, #1
 8016bd0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8016bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8016bd4:	4618      	mov	r0, r3
 8016bd6:	3710      	adds	r7, #16
 8016bd8:	46bd      	mov	sp, r7
 8016bda:	bd80      	pop	{r7, pc}
 8016bdc:	41615252 	.word	0x41615252
 8016be0:	61417272 	.word	0x61417272

08016be4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8016be4:	b480      	push	{r7}
 8016be6:	b083      	sub	sp, #12
 8016be8:	af00      	add	r7, sp, #0
 8016bea:	6078      	str	r0, [r7, #4]
 8016bec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8016bee:	683b      	ldr	r3, [r7, #0]
 8016bf0:	3b02      	subs	r3, #2
 8016bf2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	695b      	ldr	r3, [r3, #20]
 8016bf8:	3b02      	subs	r3, #2
 8016bfa:	683a      	ldr	r2, [r7, #0]
 8016bfc:	429a      	cmp	r2, r3
 8016bfe:	d301      	bcc.n	8016c04 <clust2sect+0x20>
 8016c00:	2300      	movs	r3, #0
 8016c02:	e008      	b.n	8016c16 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	895b      	ldrh	r3, [r3, #10]
 8016c08:	461a      	mov	r2, r3
 8016c0a:	683b      	ldr	r3, [r7, #0]
 8016c0c:	fb03 f202 	mul.w	r2, r3, r2
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016c14:	4413      	add	r3, r2
}
 8016c16:	4618      	mov	r0, r3
 8016c18:	370c      	adds	r7, #12
 8016c1a:	46bd      	mov	sp, r7
 8016c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c20:	4770      	bx	lr

08016c22 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8016c22:	b580      	push	{r7, lr}
 8016c24:	b086      	sub	sp, #24
 8016c26:	af00      	add	r7, sp, #0
 8016c28:	6078      	str	r0, [r7, #4]
 8016c2a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	681b      	ldr	r3, [r3, #0]
 8016c30:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8016c32:	683b      	ldr	r3, [r7, #0]
 8016c34:	2b01      	cmp	r3, #1
 8016c36:	d904      	bls.n	8016c42 <get_fat+0x20>
 8016c38:	693b      	ldr	r3, [r7, #16]
 8016c3a:	695b      	ldr	r3, [r3, #20]
 8016c3c:	683a      	ldr	r2, [r7, #0]
 8016c3e:	429a      	cmp	r2, r3
 8016c40:	d302      	bcc.n	8016c48 <get_fat+0x26>
		val = 1;	/* Internal error */
 8016c42:	2301      	movs	r3, #1
 8016c44:	617b      	str	r3, [r7, #20]
 8016c46:	e08c      	b.n	8016d62 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8016c48:	f04f 33ff 	mov.w	r3, #4294967295
 8016c4c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8016c4e:	693b      	ldr	r3, [r7, #16]
 8016c50:	781b      	ldrb	r3, [r3, #0]
 8016c52:	2b02      	cmp	r3, #2
 8016c54:	d045      	beq.n	8016ce2 <get_fat+0xc0>
 8016c56:	2b03      	cmp	r3, #3
 8016c58:	d05d      	beq.n	8016d16 <get_fat+0xf4>
 8016c5a:	2b01      	cmp	r3, #1
 8016c5c:	d177      	bne.n	8016d4e <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8016c5e:	683b      	ldr	r3, [r7, #0]
 8016c60:	60fb      	str	r3, [r7, #12]
 8016c62:	68fb      	ldr	r3, [r7, #12]
 8016c64:	085b      	lsrs	r3, r3, #1
 8016c66:	68fa      	ldr	r2, [r7, #12]
 8016c68:	4413      	add	r3, r2
 8016c6a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016c6c:	693b      	ldr	r3, [r7, #16]
 8016c6e:	6a1a      	ldr	r2, [r3, #32]
 8016c70:	68fb      	ldr	r3, [r7, #12]
 8016c72:	0a5b      	lsrs	r3, r3, #9
 8016c74:	4413      	add	r3, r2
 8016c76:	4619      	mov	r1, r3
 8016c78:	6938      	ldr	r0, [r7, #16]
 8016c7a:	f7ff ff17 	bl	8016aac <move_window>
 8016c7e:	4603      	mov	r3, r0
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d167      	bne.n	8016d54 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8016c84:	68fb      	ldr	r3, [r7, #12]
 8016c86:	1c5a      	adds	r2, r3, #1
 8016c88:	60fa      	str	r2, [r7, #12]
 8016c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016c8e:	693a      	ldr	r2, [r7, #16]
 8016c90:	4413      	add	r3, r2
 8016c92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016c96:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016c98:	693b      	ldr	r3, [r7, #16]
 8016c9a:	6a1a      	ldr	r2, [r3, #32]
 8016c9c:	68fb      	ldr	r3, [r7, #12]
 8016c9e:	0a5b      	lsrs	r3, r3, #9
 8016ca0:	4413      	add	r3, r2
 8016ca2:	4619      	mov	r1, r3
 8016ca4:	6938      	ldr	r0, [r7, #16]
 8016ca6:	f7ff ff01 	bl	8016aac <move_window>
 8016caa:	4603      	mov	r3, r0
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d153      	bne.n	8016d58 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8016cb0:	68fb      	ldr	r3, [r7, #12]
 8016cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016cb6:	693a      	ldr	r2, [r7, #16]
 8016cb8:	4413      	add	r3, r2
 8016cba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016cbe:	021b      	lsls	r3, r3, #8
 8016cc0:	461a      	mov	r2, r3
 8016cc2:	68bb      	ldr	r3, [r7, #8]
 8016cc4:	4313      	orrs	r3, r2
 8016cc6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8016cc8:	683b      	ldr	r3, [r7, #0]
 8016cca:	f003 0301 	and.w	r3, r3, #1
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d002      	beq.n	8016cd8 <get_fat+0xb6>
 8016cd2:	68bb      	ldr	r3, [r7, #8]
 8016cd4:	091b      	lsrs	r3, r3, #4
 8016cd6:	e002      	b.n	8016cde <get_fat+0xbc>
 8016cd8:	68bb      	ldr	r3, [r7, #8]
 8016cda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016cde:	617b      	str	r3, [r7, #20]
			break;
 8016ce0:	e03f      	b.n	8016d62 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8016ce2:	693b      	ldr	r3, [r7, #16]
 8016ce4:	6a1a      	ldr	r2, [r3, #32]
 8016ce6:	683b      	ldr	r3, [r7, #0]
 8016ce8:	0a1b      	lsrs	r3, r3, #8
 8016cea:	4413      	add	r3, r2
 8016cec:	4619      	mov	r1, r3
 8016cee:	6938      	ldr	r0, [r7, #16]
 8016cf0:	f7ff fedc 	bl	8016aac <move_window>
 8016cf4:	4603      	mov	r3, r0
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d130      	bne.n	8016d5c <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8016cfa:	693b      	ldr	r3, [r7, #16]
 8016cfc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016d00:	683b      	ldr	r3, [r7, #0]
 8016d02:	005b      	lsls	r3, r3, #1
 8016d04:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8016d08:	4413      	add	r3, r2
 8016d0a:	4618      	mov	r0, r3
 8016d0c:	f7ff fc1e 	bl	801654c <ld_word>
 8016d10:	4603      	mov	r3, r0
 8016d12:	617b      	str	r3, [r7, #20]
			break;
 8016d14:	e025      	b.n	8016d62 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8016d16:	693b      	ldr	r3, [r7, #16]
 8016d18:	6a1a      	ldr	r2, [r3, #32]
 8016d1a:	683b      	ldr	r3, [r7, #0]
 8016d1c:	09db      	lsrs	r3, r3, #7
 8016d1e:	4413      	add	r3, r2
 8016d20:	4619      	mov	r1, r3
 8016d22:	6938      	ldr	r0, [r7, #16]
 8016d24:	f7ff fec2 	bl	8016aac <move_window>
 8016d28:	4603      	mov	r3, r0
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d118      	bne.n	8016d60 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8016d2e:	693b      	ldr	r3, [r7, #16]
 8016d30:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016d34:	683b      	ldr	r3, [r7, #0]
 8016d36:	009b      	lsls	r3, r3, #2
 8016d38:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8016d3c:	4413      	add	r3, r2
 8016d3e:	4618      	mov	r0, r3
 8016d40:	f7ff fc1c 	bl	801657c <ld_dword>
 8016d44:	4603      	mov	r3, r0
 8016d46:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8016d4a:	617b      	str	r3, [r7, #20]
			break;
 8016d4c:	e009      	b.n	8016d62 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8016d4e:	2301      	movs	r3, #1
 8016d50:	617b      	str	r3, [r7, #20]
 8016d52:	e006      	b.n	8016d62 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016d54:	bf00      	nop
 8016d56:	e004      	b.n	8016d62 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016d58:	bf00      	nop
 8016d5a:	e002      	b.n	8016d62 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8016d5c:	bf00      	nop
 8016d5e:	e000      	b.n	8016d62 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8016d60:	bf00      	nop
		}
	}

	return val;
 8016d62:	697b      	ldr	r3, [r7, #20]
}
 8016d64:	4618      	mov	r0, r3
 8016d66:	3718      	adds	r7, #24
 8016d68:	46bd      	mov	sp, r7
 8016d6a:	bd80      	pop	{r7, pc}

08016d6c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8016d6c:	b590      	push	{r4, r7, lr}
 8016d6e:	b089      	sub	sp, #36	; 0x24
 8016d70:	af00      	add	r7, sp, #0
 8016d72:	60f8      	str	r0, [r7, #12]
 8016d74:	60b9      	str	r1, [r7, #8]
 8016d76:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8016d78:	2302      	movs	r3, #2
 8016d7a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8016d7c:	68bb      	ldr	r3, [r7, #8]
 8016d7e:	2b01      	cmp	r3, #1
 8016d80:	f240 80d6 	bls.w	8016f30 <put_fat+0x1c4>
 8016d84:	68fb      	ldr	r3, [r7, #12]
 8016d86:	695b      	ldr	r3, [r3, #20]
 8016d88:	68ba      	ldr	r2, [r7, #8]
 8016d8a:	429a      	cmp	r2, r3
 8016d8c:	f080 80d0 	bcs.w	8016f30 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8016d90:	68fb      	ldr	r3, [r7, #12]
 8016d92:	781b      	ldrb	r3, [r3, #0]
 8016d94:	2b02      	cmp	r3, #2
 8016d96:	d073      	beq.n	8016e80 <put_fat+0x114>
 8016d98:	2b03      	cmp	r3, #3
 8016d9a:	f000 8091 	beq.w	8016ec0 <put_fat+0x154>
 8016d9e:	2b01      	cmp	r3, #1
 8016da0:	f040 80c6 	bne.w	8016f30 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8016da4:	68bb      	ldr	r3, [r7, #8]
 8016da6:	61bb      	str	r3, [r7, #24]
 8016da8:	69bb      	ldr	r3, [r7, #24]
 8016daa:	085b      	lsrs	r3, r3, #1
 8016dac:	69ba      	ldr	r2, [r7, #24]
 8016dae:	4413      	add	r3, r2
 8016db0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8016db2:	68fb      	ldr	r3, [r7, #12]
 8016db4:	6a1a      	ldr	r2, [r3, #32]
 8016db6:	69bb      	ldr	r3, [r7, #24]
 8016db8:	0a5b      	lsrs	r3, r3, #9
 8016dba:	4413      	add	r3, r2
 8016dbc:	4619      	mov	r1, r3
 8016dbe:	68f8      	ldr	r0, [r7, #12]
 8016dc0:	f7ff fe74 	bl	8016aac <move_window>
 8016dc4:	4603      	mov	r3, r0
 8016dc6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016dc8:	7ffb      	ldrb	r3, [r7, #31]
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	f040 80a9 	bne.w	8016f22 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8016dd0:	68fb      	ldr	r3, [r7, #12]
 8016dd2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016dd6:	69bb      	ldr	r3, [r7, #24]
 8016dd8:	1c59      	adds	r1, r3, #1
 8016dda:	61b9      	str	r1, [r7, #24]
 8016ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016de0:	4413      	add	r3, r2
 8016de2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8016de4:	68bb      	ldr	r3, [r7, #8]
 8016de6:	f003 0301 	and.w	r3, r3, #1
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	d00d      	beq.n	8016e0a <put_fat+0x9e>
 8016dee:	697b      	ldr	r3, [r7, #20]
 8016df0:	781b      	ldrb	r3, [r3, #0]
 8016df2:	b25b      	sxtb	r3, r3
 8016df4:	f003 030f 	and.w	r3, r3, #15
 8016df8:	b25a      	sxtb	r2, r3
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	b2db      	uxtb	r3, r3
 8016dfe:	011b      	lsls	r3, r3, #4
 8016e00:	b25b      	sxtb	r3, r3
 8016e02:	4313      	orrs	r3, r2
 8016e04:	b25b      	sxtb	r3, r3
 8016e06:	b2db      	uxtb	r3, r3
 8016e08:	e001      	b.n	8016e0e <put_fat+0xa2>
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	b2db      	uxtb	r3, r3
 8016e0e:	697a      	ldr	r2, [r7, #20]
 8016e10:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8016e12:	68fb      	ldr	r3, [r7, #12]
 8016e14:	2201      	movs	r2, #1
 8016e16:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8016e18:	68fb      	ldr	r3, [r7, #12]
 8016e1a:	6a1a      	ldr	r2, [r3, #32]
 8016e1c:	69bb      	ldr	r3, [r7, #24]
 8016e1e:	0a5b      	lsrs	r3, r3, #9
 8016e20:	4413      	add	r3, r2
 8016e22:	4619      	mov	r1, r3
 8016e24:	68f8      	ldr	r0, [r7, #12]
 8016e26:	f7ff fe41 	bl	8016aac <move_window>
 8016e2a:	4603      	mov	r3, r0
 8016e2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016e2e:	7ffb      	ldrb	r3, [r7, #31]
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d178      	bne.n	8016f26 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8016e34:	68fb      	ldr	r3, [r7, #12]
 8016e36:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016e3a:	69bb      	ldr	r3, [r7, #24]
 8016e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016e40:	4413      	add	r3, r2
 8016e42:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8016e44:	68bb      	ldr	r3, [r7, #8]
 8016e46:	f003 0301 	and.w	r3, r3, #1
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	d003      	beq.n	8016e56 <put_fat+0xea>
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	091b      	lsrs	r3, r3, #4
 8016e52:	b2db      	uxtb	r3, r3
 8016e54:	e00e      	b.n	8016e74 <put_fat+0x108>
 8016e56:	697b      	ldr	r3, [r7, #20]
 8016e58:	781b      	ldrb	r3, [r3, #0]
 8016e5a:	b25b      	sxtb	r3, r3
 8016e5c:	f023 030f 	bic.w	r3, r3, #15
 8016e60:	b25a      	sxtb	r2, r3
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	0a1b      	lsrs	r3, r3, #8
 8016e66:	b25b      	sxtb	r3, r3
 8016e68:	f003 030f 	and.w	r3, r3, #15
 8016e6c:	b25b      	sxtb	r3, r3
 8016e6e:	4313      	orrs	r3, r2
 8016e70:	b25b      	sxtb	r3, r3
 8016e72:	b2db      	uxtb	r3, r3
 8016e74:	697a      	ldr	r2, [r7, #20]
 8016e76:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8016e78:	68fb      	ldr	r3, [r7, #12]
 8016e7a:	2201      	movs	r2, #1
 8016e7c:	70da      	strb	r2, [r3, #3]
			break;
 8016e7e:	e057      	b.n	8016f30 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8016e80:	68fb      	ldr	r3, [r7, #12]
 8016e82:	6a1a      	ldr	r2, [r3, #32]
 8016e84:	68bb      	ldr	r3, [r7, #8]
 8016e86:	0a1b      	lsrs	r3, r3, #8
 8016e88:	4413      	add	r3, r2
 8016e8a:	4619      	mov	r1, r3
 8016e8c:	68f8      	ldr	r0, [r7, #12]
 8016e8e:	f7ff fe0d 	bl	8016aac <move_window>
 8016e92:	4603      	mov	r3, r0
 8016e94:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016e96:	7ffb      	ldrb	r3, [r7, #31]
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	d146      	bne.n	8016f2a <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8016e9c:	68fb      	ldr	r3, [r7, #12]
 8016e9e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016ea2:	68bb      	ldr	r3, [r7, #8]
 8016ea4:	005b      	lsls	r3, r3, #1
 8016ea6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8016eaa:	4413      	add	r3, r2
 8016eac:	687a      	ldr	r2, [r7, #4]
 8016eae:	b292      	uxth	r2, r2
 8016eb0:	4611      	mov	r1, r2
 8016eb2:	4618      	mov	r0, r3
 8016eb4:	f7ff fb85 	bl	80165c2 <st_word>
			fs->wflag = 1;
 8016eb8:	68fb      	ldr	r3, [r7, #12]
 8016eba:	2201      	movs	r2, #1
 8016ebc:	70da      	strb	r2, [r3, #3]
			break;
 8016ebe:	e037      	b.n	8016f30 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8016ec0:	68fb      	ldr	r3, [r7, #12]
 8016ec2:	6a1a      	ldr	r2, [r3, #32]
 8016ec4:	68bb      	ldr	r3, [r7, #8]
 8016ec6:	09db      	lsrs	r3, r3, #7
 8016ec8:	4413      	add	r3, r2
 8016eca:	4619      	mov	r1, r3
 8016ecc:	68f8      	ldr	r0, [r7, #12]
 8016ece:	f7ff fded 	bl	8016aac <move_window>
 8016ed2:	4603      	mov	r3, r0
 8016ed4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016ed6:	7ffb      	ldrb	r3, [r7, #31]
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d128      	bne.n	8016f2e <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8016ee2:	68fb      	ldr	r3, [r7, #12]
 8016ee4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016ee8:	68bb      	ldr	r3, [r7, #8]
 8016eea:	009b      	lsls	r3, r3, #2
 8016eec:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8016ef0:	4413      	add	r3, r2
 8016ef2:	4618      	mov	r0, r3
 8016ef4:	f7ff fb42 	bl	801657c <ld_dword>
 8016ef8:	4603      	mov	r3, r0
 8016efa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8016efe:	4323      	orrs	r3, r4
 8016f00:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8016f02:	68fb      	ldr	r3, [r7, #12]
 8016f04:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016f08:	68bb      	ldr	r3, [r7, #8]
 8016f0a:	009b      	lsls	r3, r3, #2
 8016f0c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8016f10:	4413      	add	r3, r2
 8016f12:	6879      	ldr	r1, [r7, #4]
 8016f14:	4618      	mov	r0, r3
 8016f16:	f7ff fb6f 	bl	80165f8 <st_dword>
			fs->wflag = 1;
 8016f1a:	68fb      	ldr	r3, [r7, #12]
 8016f1c:	2201      	movs	r2, #1
 8016f1e:	70da      	strb	r2, [r3, #3]
			break;
 8016f20:	e006      	b.n	8016f30 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8016f22:	bf00      	nop
 8016f24:	e004      	b.n	8016f30 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8016f26:	bf00      	nop
 8016f28:	e002      	b.n	8016f30 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8016f2a:	bf00      	nop
 8016f2c:	e000      	b.n	8016f30 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8016f2e:	bf00      	nop
		}
	}
	return res;
 8016f30:	7ffb      	ldrb	r3, [r7, #31]
}
 8016f32:	4618      	mov	r0, r3
 8016f34:	3724      	adds	r7, #36	; 0x24
 8016f36:	46bd      	mov	sp, r7
 8016f38:	bd90      	pop	{r4, r7, pc}

08016f3a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8016f3a:	b580      	push	{r7, lr}
 8016f3c:	b088      	sub	sp, #32
 8016f3e:	af00      	add	r7, sp, #0
 8016f40:	60f8      	str	r0, [r7, #12]
 8016f42:	60b9      	str	r1, [r7, #8]
 8016f44:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8016f46:	2300      	movs	r3, #0
 8016f48:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8016f4a:	68fb      	ldr	r3, [r7, #12]
 8016f4c:	681b      	ldr	r3, [r3, #0]
 8016f4e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8016f50:	68bb      	ldr	r3, [r7, #8]
 8016f52:	2b01      	cmp	r3, #1
 8016f54:	d904      	bls.n	8016f60 <remove_chain+0x26>
 8016f56:	69bb      	ldr	r3, [r7, #24]
 8016f58:	695b      	ldr	r3, [r3, #20]
 8016f5a:	68ba      	ldr	r2, [r7, #8]
 8016f5c:	429a      	cmp	r2, r3
 8016f5e:	d301      	bcc.n	8016f64 <remove_chain+0x2a>
 8016f60:	2302      	movs	r3, #2
 8016f62:	e04b      	b.n	8016ffc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d00c      	beq.n	8016f84 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8016f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8016f6e:	6879      	ldr	r1, [r7, #4]
 8016f70:	69b8      	ldr	r0, [r7, #24]
 8016f72:	f7ff fefb 	bl	8016d6c <put_fat>
 8016f76:	4603      	mov	r3, r0
 8016f78:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8016f7a:	7ffb      	ldrb	r3, [r7, #31]
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	d001      	beq.n	8016f84 <remove_chain+0x4a>
 8016f80:	7ffb      	ldrb	r3, [r7, #31]
 8016f82:	e03b      	b.n	8016ffc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8016f84:	68b9      	ldr	r1, [r7, #8]
 8016f86:	68f8      	ldr	r0, [r7, #12]
 8016f88:	f7ff fe4b 	bl	8016c22 <get_fat>
 8016f8c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8016f8e:	697b      	ldr	r3, [r7, #20]
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d031      	beq.n	8016ff8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8016f94:	697b      	ldr	r3, [r7, #20]
 8016f96:	2b01      	cmp	r3, #1
 8016f98:	d101      	bne.n	8016f9e <remove_chain+0x64>
 8016f9a:	2302      	movs	r3, #2
 8016f9c:	e02e      	b.n	8016ffc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8016f9e:	697b      	ldr	r3, [r7, #20]
 8016fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016fa4:	d101      	bne.n	8016faa <remove_chain+0x70>
 8016fa6:	2301      	movs	r3, #1
 8016fa8:	e028      	b.n	8016ffc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8016faa:	2200      	movs	r2, #0
 8016fac:	68b9      	ldr	r1, [r7, #8]
 8016fae:	69b8      	ldr	r0, [r7, #24]
 8016fb0:	f7ff fedc 	bl	8016d6c <put_fat>
 8016fb4:	4603      	mov	r3, r0
 8016fb6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8016fb8:	7ffb      	ldrb	r3, [r7, #31]
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d001      	beq.n	8016fc2 <remove_chain+0x88>
 8016fbe:	7ffb      	ldrb	r3, [r7, #31]
 8016fc0:	e01c      	b.n	8016ffc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8016fc2:	69bb      	ldr	r3, [r7, #24]
 8016fc4:	691a      	ldr	r2, [r3, #16]
 8016fc6:	69bb      	ldr	r3, [r7, #24]
 8016fc8:	695b      	ldr	r3, [r3, #20]
 8016fca:	3b02      	subs	r3, #2
 8016fcc:	429a      	cmp	r2, r3
 8016fce:	d20b      	bcs.n	8016fe8 <remove_chain+0xae>
			fs->free_clst++;
 8016fd0:	69bb      	ldr	r3, [r7, #24]
 8016fd2:	691b      	ldr	r3, [r3, #16]
 8016fd4:	1c5a      	adds	r2, r3, #1
 8016fd6:	69bb      	ldr	r3, [r7, #24]
 8016fd8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8016fda:	69bb      	ldr	r3, [r7, #24]
 8016fdc:	791b      	ldrb	r3, [r3, #4]
 8016fde:	f043 0301 	orr.w	r3, r3, #1
 8016fe2:	b2da      	uxtb	r2, r3
 8016fe4:	69bb      	ldr	r3, [r7, #24]
 8016fe6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8016fe8:	697b      	ldr	r3, [r7, #20]
 8016fea:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8016fec:	69bb      	ldr	r3, [r7, #24]
 8016fee:	695b      	ldr	r3, [r3, #20]
 8016ff0:	68ba      	ldr	r2, [r7, #8]
 8016ff2:	429a      	cmp	r2, r3
 8016ff4:	d3c6      	bcc.n	8016f84 <remove_chain+0x4a>
 8016ff6:	e000      	b.n	8016ffa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8016ff8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8016ffa:	2300      	movs	r3, #0
}
 8016ffc:	4618      	mov	r0, r3
 8016ffe:	3720      	adds	r7, #32
 8017000:	46bd      	mov	sp, r7
 8017002:	bd80      	pop	{r7, pc}

08017004 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8017004:	b580      	push	{r7, lr}
 8017006:	b088      	sub	sp, #32
 8017008:	af00      	add	r7, sp, #0
 801700a:	6078      	str	r0, [r7, #4]
 801700c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801700e:	687b      	ldr	r3, [r7, #4]
 8017010:	681b      	ldr	r3, [r3, #0]
 8017012:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8017014:	683b      	ldr	r3, [r7, #0]
 8017016:	2b00      	cmp	r3, #0
 8017018:	d10d      	bne.n	8017036 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801701a:	693b      	ldr	r3, [r7, #16]
 801701c:	68db      	ldr	r3, [r3, #12]
 801701e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8017020:	69bb      	ldr	r3, [r7, #24]
 8017022:	2b00      	cmp	r3, #0
 8017024:	d004      	beq.n	8017030 <create_chain+0x2c>
 8017026:	693b      	ldr	r3, [r7, #16]
 8017028:	695b      	ldr	r3, [r3, #20]
 801702a:	69ba      	ldr	r2, [r7, #24]
 801702c:	429a      	cmp	r2, r3
 801702e:	d31b      	bcc.n	8017068 <create_chain+0x64>
 8017030:	2301      	movs	r3, #1
 8017032:	61bb      	str	r3, [r7, #24]
 8017034:	e018      	b.n	8017068 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8017036:	6839      	ldr	r1, [r7, #0]
 8017038:	6878      	ldr	r0, [r7, #4]
 801703a:	f7ff fdf2 	bl	8016c22 <get_fat>
 801703e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8017040:	68fb      	ldr	r3, [r7, #12]
 8017042:	2b01      	cmp	r3, #1
 8017044:	d801      	bhi.n	801704a <create_chain+0x46>
 8017046:	2301      	movs	r3, #1
 8017048:	e070      	b.n	801712c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801704a:	68fb      	ldr	r3, [r7, #12]
 801704c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017050:	d101      	bne.n	8017056 <create_chain+0x52>
 8017052:	68fb      	ldr	r3, [r7, #12]
 8017054:	e06a      	b.n	801712c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8017056:	693b      	ldr	r3, [r7, #16]
 8017058:	695b      	ldr	r3, [r3, #20]
 801705a:	68fa      	ldr	r2, [r7, #12]
 801705c:	429a      	cmp	r2, r3
 801705e:	d201      	bcs.n	8017064 <create_chain+0x60>
 8017060:	68fb      	ldr	r3, [r7, #12]
 8017062:	e063      	b.n	801712c <create_chain+0x128>
		scl = clst;
 8017064:	683b      	ldr	r3, [r7, #0]
 8017066:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8017068:	69bb      	ldr	r3, [r7, #24]
 801706a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801706c:	69fb      	ldr	r3, [r7, #28]
 801706e:	3301      	adds	r3, #1
 8017070:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8017072:	693b      	ldr	r3, [r7, #16]
 8017074:	695b      	ldr	r3, [r3, #20]
 8017076:	69fa      	ldr	r2, [r7, #28]
 8017078:	429a      	cmp	r2, r3
 801707a:	d307      	bcc.n	801708c <create_chain+0x88>
				ncl = 2;
 801707c:	2302      	movs	r3, #2
 801707e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8017080:	69fa      	ldr	r2, [r7, #28]
 8017082:	69bb      	ldr	r3, [r7, #24]
 8017084:	429a      	cmp	r2, r3
 8017086:	d901      	bls.n	801708c <create_chain+0x88>
 8017088:	2300      	movs	r3, #0
 801708a:	e04f      	b.n	801712c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801708c:	69f9      	ldr	r1, [r7, #28]
 801708e:	6878      	ldr	r0, [r7, #4]
 8017090:	f7ff fdc7 	bl	8016c22 <get_fat>
 8017094:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8017096:	68fb      	ldr	r3, [r7, #12]
 8017098:	2b00      	cmp	r3, #0
 801709a:	d00e      	beq.n	80170ba <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801709c:	68fb      	ldr	r3, [r7, #12]
 801709e:	2b01      	cmp	r3, #1
 80170a0:	d003      	beq.n	80170aa <create_chain+0xa6>
 80170a2:	68fb      	ldr	r3, [r7, #12]
 80170a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80170a8:	d101      	bne.n	80170ae <create_chain+0xaa>
 80170aa:	68fb      	ldr	r3, [r7, #12]
 80170ac:	e03e      	b.n	801712c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80170ae:	69fa      	ldr	r2, [r7, #28]
 80170b0:	69bb      	ldr	r3, [r7, #24]
 80170b2:	429a      	cmp	r2, r3
 80170b4:	d1da      	bne.n	801706c <create_chain+0x68>
 80170b6:	2300      	movs	r3, #0
 80170b8:	e038      	b.n	801712c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80170ba:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80170bc:	f04f 32ff 	mov.w	r2, #4294967295
 80170c0:	69f9      	ldr	r1, [r7, #28]
 80170c2:	6938      	ldr	r0, [r7, #16]
 80170c4:	f7ff fe52 	bl	8016d6c <put_fat>
 80170c8:	4603      	mov	r3, r0
 80170ca:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80170cc:	7dfb      	ldrb	r3, [r7, #23]
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	d109      	bne.n	80170e6 <create_chain+0xe2>
 80170d2:	683b      	ldr	r3, [r7, #0]
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	d006      	beq.n	80170e6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80170d8:	69fa      	ldr	r2, [r7, #28]
 80170da:	6839      	ldr	r1, [r7, #0]
 80170dc:	6938      	ldr	r0, [r7, #16]
 80170de:	f7ff fe45 	bl	8016d6c <put_fat>
 80170e2:	4603      	mov	r3, r0
 80170e4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80170e6:	7dfb      	ldrb	r3, [r7, #23]
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	d116      	bne.n	801711a <create_chain+0x116>
		fs->last_clst = ncl;
 80170ec:	693b      	ldr	r3, [r7, #16]
 80170ee:	69fa      	ldr	r2, [r7, #28]
 80170f0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80170f2:	693b      	ldr	r3, [r7, #16]
 80170f4:	691a      	ldr	r2, [r3, #16]
 80170f6:	693b      	ldr	r3, [r7, #16]
 80170f8:	695b      	ldr	r3, [r3, #20]
 80170fa:	3b02      	subs	r3, #2
 80170fc:	429a      	cmp	r2, r3
 80170fe:	d804      	bhi.n	801710a <create_chain+0x106>
 8017100:	693b      	ldr	r3, [r7, #16]
 8017102:	691b      	ldr	r3, [r3, #16]
 8017104:	1e5a      	subs	r2, r3, #1
 8017106:	693b      	ldr	r3, [r7, #16]
 8017108:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 801710a:	693b      	ldr	r3, [r7, #16]
 801710c:	791b      	ldrb	r3, [r3, #4]
 801710e:	f043 0301 	orr.w	r3, r3, #1
 8017112:	b2da      	uxtb	r2, r3
 8017114:	693b      	ldr	r3, [r7, #16]
 8017116:	711a      	strb	r2, [r3, #4]
 8017118:	e007      	b.n	801712a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801711a:	7dfb      	ldrb	r3, [r7, #23]
 801711c:	2b01      	cmp	r3, #1
 801711e:	d102      	bne.n	8017126 <create_chain+0x122>
 8017120:	f04f 33ff 	mov.w	r3, #4294967295
 8017124:	e000      	b.n	8017128 <create_chain+0x124>
 8017126:	2301      	movs	r3, #1
 8017128:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801712a:	69fb      	ldr	r3, [r7, #28]
}
 801712c:	4618      	mov	r0, r3
 801712e:	3720      	adds	r7, #32
 8017130:	46bd      	mov	sp, r7
 8017132:	bd80      	pop	{r7, pc}

08017134 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8017134:	b480      	push	{r7}
 8017136:	b087      	sub	sp, #28
 8017138:	af00      	add	r7, sp, #0
 801713a:	6078      	str	r0, [r7, #4]
 801713c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	681b      	ldr	r3, [r3, #0]
 8017142:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017148:	3304      	adds	r3, #4
 801714a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801714c:	683b      	ldr	r3, [r7, #0]
 801714e:	0a5b      	lsrs	r3, r3, #9
 8017150:	68fa      	ldr	r2, [r7, #12]
 8017152:	8952      	ldrh	r2, [r2, #10]
 8017154:	fbb3 f3f2 	udiv	r3, r3, r2
 8017158:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801715a:	693b      	ldr	r3, [r7, #16]
 801715c:	1d1a      	adds	r2, r3, #4
 801715e:	613a      	str	r2, [r7, #16]
 8017160:	681b      	ldr	r3, [r3, #0]
 8017162:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8017164:	68bb      	ldr	r3, [r7, #8]
 8017166:	2b00      	cmp	r3, #0
 8017168:	d101      	bne.n	801716e <clmt_clust+0x3a>
 801716a:	2300      	movs	r3, #0
 801716c:	e010      	b.n	8017190 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801716e:	697a      	ldr	r2, [r7, #20]
 8017170:	68bb      	ldr	r3, [r7, #8]
 8017172:	429a      	cmp	r2, r3
 8017174:	d307      	bcc.n	8017186 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8017176:	697a      	ldr	r2, [r7, #20]
 8017178:	68bb      	ldr	r3, [r7, #8]
 801717a:	1ad3      	subs	r3, r2, r3
 801717c:	617b      	str	r3, [r7, #20]
 801717e:	693b      	ldr	r3, [r7, #16]
 8017180:	3304      	adds	r3, #4
 8017182:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8017184:	e7e9      	b.n	801715a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8017186:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8017188:	693b      	ldr	r3, [r7, #16]
 801718a:	681a      	ldr	r2, [r3, #0]
 801718c:	697b      	ldr	r3, [r7, #20]
 801718e:	4413      	add	r3, r2
}
 8017190:	4618      	mov	r0, r3
 8017192:	371c      	adds	r7, #28
 8017194:	46bd      	mov	sp, r7
 8017196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801719a:	4770      	bx	lr

0801719c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801719c:	b580      	push	{r7, lr}
 801719e:	b086      	sub	sp, #24
 80171a0:	af00      	add	r7, sp, #0
 80171a2:	6078      	str	r0, [r7, #4]
 80171a4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80171ac:	683b      	ldr	r3, [r7, #0]
 80171ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80171b2:	d204      	bcs.n	80171be <dir_sdi+0x22>
 80171b4:	683b      	ldr	r3, [r7, #0]
 80171b6:	f003 031f 	and.w	r3, r3, #31
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	d001      	beq.n	80171c2 <dir_sdi+0x26>
		return FR_INT_ERR;
 80171be:	2302      	movs	r3, #2
 80171c0:	e063      	b.n	801728a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	683a      	ldr	r2, [r7, #0]
 80171c6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	689b      	ldr	r3, [r3, #8]
 80171cc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80171ce:	697b      	ldr	r3, [r7, #20]
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	d106      	bne.n	80171e2 <dir_sdi+0x46>
 80171d4:	693b      	ldr	r3, [r7, #16]
 80171d6:	781b      	ldrb	r3, [r3, #0]
 80171d8:	2b02      	cmp	r3, #2
 80171da:	d902      	bls.n	80171e2 <dir_sdi+0x46>
		clst = fs->dirbase;
 80171dc:	693b      	ldr	r3, [r7, #16]
 80171de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80171e0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80171e2:	697b      	ldr	r3, [r7, #20]
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	d10c      	bne.n	8017202 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80171e8:	683b      	ldr	r3, [r7, #0]
 80171ea:	095b      	lsrs	r3, r3, #5
 80171ec:	693a      	ldr	r2, [r7, #16]
 80171ee:	8912      	ldrh	r2, [r2, #8]
 80171f0:	4293      	cmp	r3, r2
 80171f2:	d301      	bcc.n	80171f8 <dir_sdi+0x5c>
 80171f4:	2302      	movs	r3, #2
 80171f6:	e048      	b.n	801728a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80171f8:	693b      	ldr	r3, [r7, #16]
 80171fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	61da      	str	r2, [r3, #28]
 8017200:	e029      	b.n	8017256 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8017202:	693b      	ldr	r3, [r7, #16]
 8017204:	895b      	ldrh	r3, [r3, #10]
 8017206:	025b      	lsls	r3, r3, #9
 8017208:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801720a:	e019      	b.n	8017240 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	6979      	ldr	r1, [r7, #20]
 8017210:	4618      	mov	r0, r3
 8017212:	f7ff fd06 	bl	8016c22 <get_fat>
 8017216:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017218:	697b      	ldr	r3, [r7, #20]
 801721a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801721e:	d101      	bne.n	8017224 <dir_sdi+0x88>
 8017220:	2301      	movs	r3, #1
 8017222:	e032      	b.n	801728a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8017224:	697b      	ldr	r3, [r7, #20]
 8017226:	2b01      	cmp	r3, #1
 8017228:	d904      	bls.n	8017234 <dir_sdi+0x98>
 801722a:	693b      	ldr	r3, [r7, #16]
 801722c:	695b      	ldr	r3, [r3, #20]
 801722e:	697a      	ldr	r2, [r7, #20]
 8017230:	429a      	cmp	r2, r3
 8017232:	d301      	bcc.n	8017238 <dir_sdi+0x9c>
 8017234:	2302      	movs	r3, #2
 8017236:	e028      	b.n	801728a <dir_sdi+0xee>
			ofs -= csz;
 8017238:	683a      	ldr	r2, [r7, #0]
 801723a:	68fb      	ldr	r3, [r7, #12]
 801723c:	1ad3      	subs	r3, r2, r3
 801723e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8017240:	683a      	ldr	r2, [r7, #0]
 8017242:	68fb      	ldr	r3, [r7, #12]
 8017244:	429a      	cmp	r2, r3
 8017246:	d2e1      	bcs.n	801720c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8017248:	6979      	ldr	r1, [r7, #20]
 801724a:	6938      	ldr	r0, [r7, #16]
 801724c:	f7ff fcca 	bl	8016be4 <clust2sect>
 8017250:	4602      	mov	r2, r0
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	697a      	ldr	r2, [r7, #20]
 801725a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	69db      	ldr	r3, [r3, #28]
 8017260:	2b00      	cmp	r3, #0
 8017262:	d101      	bne.n	8017268 <dir_sdi+0xcc>
 8017264:	2302      	movs	r3, #2
 8017266:	e010      	b.n	801728a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	69da      	ldr	r2, [r3, #28]
 801726c:	683b      	ldr	r3, [r7, #0]
 801726e:	0a5b      	lsrs	r3, r3, #9
 8017270:	441a      	add	r2, r3
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8017276:	693b      	ldr	r3, [r7, #16]
 8017278:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801727c:	683b      	ldr	r3, [r7, #0]
 801727e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017282:	441a      	add	r2, r3
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8017288:	2300      	movs	r3, #0
}
 801728a:	4618      	mov	r0, r3
 801728c:	3718      	adds	r7, #24
 801728e:	46bd      	mov	sp, r7
 8017290:	bd80      	pop	{r7, pc}

08017292 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8017292:	b580      	push	{r7, lr}
 8017294:	b086      	sub	sp, #24
 8017296:	af00      	add	r7, sp, #0
 8017298:	6078      	str	r0, [r7, #4]
 801729a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	681b      	ldr	r3, [r3, #0]
 80172a0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	695b      	ldr	r3, [r3, #20]
 80172a6:	3320      	adds	r3, #32
 80172a8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	69db      	ldr	r3, [r3, #28]
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	d003      	beq.n	80172ba <dir_next+0x28>
 80172b2:	68bb      	ldr	r3, [r7, #8]
 80172b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80172b8:	d301      	bcc.n	80172be <dir_next+0x2c>
 80172ba:	2304      	movs	r3, #4
 80172bc:	e0aa      	b.n	8017414 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80172be:	68bb      	ldr	r3, [r7, #8]
 80172c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80172c4:	2b00      	cmp	r3, #0
 80172c6:	f040 8098 	bne.w	80173fa <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	69db      	ldr	r3, [r3, #28]
 80172ce:	1c5a      	adds	r2, r3, #1
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	699b      	ldr	r3, [r3, #24]
 80172d8:	2b00      	cmp	r3, #0
 80172da:	d10b      	bne.n	80172f4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80172dc:	68bb      	ldr	r3, [r7, #8]
 80172de:	095b      	lsrs	r3, r3, #5
 80172e0:	68fa      	ldr	r2, [r7, #12]
 80172e2:	8912      	ldrh	r2, [r2, #8]
 80172e4:	4293      	cmp	r3, r2
 80172e6:	f0c0 8088 	bcc.w	80173fa <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	2200      	movs	r2, #0
 80172ee:	61da      	str	r2, [r3, #28]
 80172f0:	2304      	movs	r3, #4
 80172f2:	e08f      	b.n	8017414 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80172f4:	68bb      	ldr	r3, [r7, #8]
 80172f6:	0a5b      	lsrs	r3, r3, #9
 80172f8:	68fa      	ldr	r2, [r7, #12]
 80172fa:	8952      	ldrh	r2, [r2, #10]
 80172fc:	3a01      	subs	r2, #1
 80172fe:	4013      	ands	r3, r2
 8017300:	2b00      	cmp	r3, #0
 8017302:	d17a      	bne.n	80173fa <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8017304:	687a      	ldr	r2, [r7, #4]
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	699b      	ldr	r3, [r3, #24]
 801730a:	4619      	mov	r1, r3
 801730c:	4610      	mov	r0, r2
 801730e:	f7ff fc88 	bl	8016c22 <get_fat>
 8017312:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8017314:	697b      	ldr	r3, [r7, #20]
 8017316:	2b01      	cmp	r3, #1
 8017318:	d801      	bhi.n	801731e <dir_next+0x8c>
 801731a:	2302      	movs	r3, #2
 801731c:	e07a      	b.n	8017414 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801731e:	697b      	ldr	r3, [r7, #20]
 8017320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017324:	d101      	bne.n	801732a <dir_next+0x98>
 8017326:	2301      	movs	r3, #1
 8017328:	e074      	b.n	8017414 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801732a:	68fb      	ldr	r3, [r7, #12]
 801732c:	695b      	ldr	r3, [r3, #20]
 801732e:	697a      	ldr	r2, [r7, #20]
 8017330:	429a      	cmp	r2, r3
 8017332:	d358      	bcc.n	80173e6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8017334:	683b      	ldr	r3, [r7, #0]
 8017336:	2b00      	cmp	r3, #0
 8017338:	d104      	bne.n	8017344 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	2200      	movs	r2, #0
 801733e:	61da      	str	r2, [r3, #28]
 8017340:	2304      	movs	r3, #4
 8017342:	e067      	b.n	8017414 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8017344:	687a      	ldr	r2, [r7, #4]
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	699b      	ldr	r3, [r3, #24]
 801734a:	4619      	mov	r1, r3
 801734c:	4610      	mov	r0, r2
 801734e:	f7ff fe59 	bl	8017004 <create_chain>
 8017352:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8017354:	697b      	ldr	r3, [r7, #20]
 8017356:	2b00      	cmp	r3, #0
 8017358:	d101      	bne.n	801735e <dir_next+0xcc>
 801735a:	2307      	movs	r3, #7
 801735c:	e05a      	b.n	8017414 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801735e:	697b      	ldr	r3, [r7, #20]
 8017360:	2b01      	cmp	r3, #1
 8017362:	d101      	bne.n	8017368 <dir_next+0xd6>
 8017364:	2302      	movs	r3, #2
 8017366:	e055      	b.n	8017414 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017368:	697b      	ldr	r3, [r7, #20]
 801736a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801736e:	d101      	bne.n	8017374 <dir_next+0xe2>
 8017370:	2301      	movs	r3, #1
 8017372:	e04f      	b.n	8017414 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8017374:	68f8      	ldr	r0, [r7, #12]
 8017376:	f7ff fb55 	bl	8016a24 <sync_window>
 801737a:	4603      	mov	r3, r0
 801737c:	2b00      	cmp	r3, #0
 801737e:	d001      	beq.n	8017384 <dir_next+0xf2>
 8017380:	2301      	movs	r3, #1
 8017382:	e047      	b.n	8017414 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8017384:	68fb      	ldr	r3, [r7, #12]
 8017386:	3330      	adds	r3, #48	; 0x30
 8017388:	f44f 7200 	mov.w	r2, #512	; 0x200
 801738c:	2100      	movs	r1, #0
 801738e:	4618      	mov	r0, r3
 8017390:	f7ff f97f 	bl	8016692 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8017394:	2300      	movs	r3, #0
 8017396:	613b      	str	r3, [r7, #16]
 8017398:	6979      	ldr	r1, [r7, #20]
 801739a:	68f8      	ldr	r0, [r7, #12]
 801739c:	f7ff fc22 	bl	8016be4 <clust2sect>
 80173a0:	4602      	mov	r2, r0
 80173a2:	68fb      	ldr	r3, [r7, #12]
 80173a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80173a6:	e012      	b.n	80173ce <dir_next+0x13c>
						fs->wflag = 1;
 80173a8:	68fb      	ldr	r3, [r7, #12]
 80173aa:	2201      	movs	r2, #1
 80173ac:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80173ae:	68f8      	ldr	r0, [r7, #12]
 80173b0:	f7ff fb38 	bl	8016a24 <sync_window>
 80173b4:	4603      	mov	r3, r0
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d001      	beq.n	80173be <dir_next+0x12c>
 80173ba:	2301      	movs	r3, #1
 80173bc:	e02a      	b.n	8017414 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80173be:	693b      	ldr	r3, [r7, #16]
 80173c0:	3301      	adds	r3, #1
 80173c2:	613b      	str	r3, [r7, #16]
 80173c4:	68fb      	ldr	r3, [r7, #12]
 80173c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80173c8:	1c5a      	adds	r2, r3, #1
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80173ce:	68fb      	ldr	r3, [r7, #12]
 80173d0:	895b      	ldrh	r3, [r3, #10]
 80173d2:	461a      	mov	r2, r3
 80173d4:	693b      	ldr	r3, [r7, #16]
 80173d6:	4293      	cmp	r3, r2
 80173d8:	d3e6      	bcc.n	80173a8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80173da:	68fb      	ldr	r3, [r7, #12]
 80173dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80173de:	693b      	ldr	r3, [r7, #16]
 80173e0:	1ad2      	subs	r2, r2, r3
 80173e2:	68fb      	ldr	r3, [r7, #12]
 80173e4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	697a      	ldr	r2, [r7, #20]
 80173ea:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80173ec:	6979      	ldr	r1, [r7, #20]
 80173ee:	68f8      	ldr	r0, [r7, #12]
 80173f0:	f7ff fbf8 	bl	8016be4 <clust2sect>
 80173f4:	4602      	mov	r2, r0
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	68ba      	ldr	r2, [r7, #8]
 80173fe:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8017400:	68fb      	ldr	r3, [r7, #12]
 8017402:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017406:	68bb      	ldr	r3, [r7, #8]
 8017408:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801740c:	441a      	add	r2, r3
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8017412:	2300      	movs	r3, #0
}
 8017414:	4618      	mov	r0, r3
 8017416:	3718      	adds	r7, #24
 8017418:	46bd      	mov	sp, r7
 801741a:	bd80      	pop	{r7, pc}

0801741c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801741c:	b580      	push	{r7, lr}
 801741e:	b086      	sub	sp, #24
 8017420:	af00      	add	r7, sp, #0
 8017422:	6078      	str	r0, [r7, #4]
 8017424:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	681b      	ldr	r3, [r3, #0]
 801742a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801742c:	2100      	movs	r1, #0
 801742e:	6878      	ldr	r0, [r7, #4]
 8017430:	f7ff feb4 	bl	801719c <dir_sdi>
 8017434:	4603      	mov	r3, r0
 8017436:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8017438:	7dfb      	ldrb	r3, [r7, #23]
 801743a:	2b00      	cmp	r3, #0
 801743c:	d12b      	bne.n	8017496 <dir_alloc+0x7a>
		n = 0;
 801743e:	2300      	movs	r3, #0
 8017440:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	69db      	ldr	r3, [r3, #28]
 8017446:	4619      	mov	r1, r3
 8017448:	68f8      	ldr	r0, [r7, #12]
 801744a:	f7ff fb2f 	bl	8016aac <move_window>
 801744e:	4603      	mov	r3, r0
 8017450:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8017452:	7dfb      	ldrb	r3, [r7, #23]
 8017454:	2b00      	cmp	r3, #0
 8017456:	d11d      	bne.n	8017494 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	6a1b      	ldr	r3, [r3, #32]
 801745c:	781b      	ldrb	r3, [r3, #0]
 801745e:	2be5      	cmp	r3, #229	; 0xe5
 8017460:	d004      	beq.n	801746c <dir_alloc+0x50>
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	6a1b      	ldr	r3, [r3, #32]
 8017466:	781b      	ldrb	r3, [r3, #0]
 8017468:	2b00      	cmp	r3, #0
 801746a:	d107      	bne.n	801747c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801746c:	693b      	ldr	r3, [r7, #16]
 801746e:	3301      	adds	r3, #1
 8017470:	613b      	str	r3, [r7, #16]
 8017472:	693a      	ldr	r2, [r7, #16]
 8017474:	683b      	ldr	r3, [r7, #0]
 8017476:	429a      	cmp	r2, r3
 8017478:	d102      	bne.n	8017480 <dir_alloc+0x64>
 801747a:	e00c      	b.n	8017496 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801747c:	2300      	movs	r3, #0
 801747e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8017480:	2101      	movs	r1, #1
 8017482:	6878      	ldr	r0, [r7, #4]
 8017484:	f7ff ff05 	bl	8017292 <dir_next>
 8017488:	4603      	mov	r3, r0
 801748a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801748c:	7dfb      	ldrb	r3, [r7, #23]
 801748e:	2b00      	cmp	r3, #0
 8017490:	d0d7      	beq.n	8017442 <dir_alloc+0x26>
 8017492:	e000      	b.n	8017496 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8017494:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8017496:	7dfb      	ldrb	r3, [r7, #23]
 8017498:	2b04      	cmp	r3, #4
 801749a:	d101      	bne.n	80174a0 <dir_alloc+0x84>
 801749c:	2307      	movs	r3, #7
 801749e:	75fb      	strb	r3, [r7, #23]
	return res;
 80174a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80174a2:	4618      	mov	r0, r3
 80174a4:	3718      	adds	r7, #24
 80174a6:	46bd      	mov	sp, r7
 80174a8:	bd80      	pop	{r7, pc}

080174aa <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80174aa:	b580      	push	{r7, lr}
 80174ac:	b084      	sub	sp, #16
 80174ae:	af00      	add	r7, sp, #0
 80174b0:	6078      	str	r0, [r7, #4]
 80174b2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80174b4:	683b      	ldr	r3, [r7, #0]
 80174b6:	331a      	adds	r3, #26
 80174b8:	4618      	mov	r0, r3
 80174ba:	f7ff f847 	bl	801654c <ld_word>
 80174be:	4603      	mov	r3, r0
 80174c0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	781b      	ldrb	r3, [r3, #0]
 80174c6:	2b03      	cmp	r3, #3
 80174c8:	d109      	bne.n	80174de <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80174ca:	683b      	ldr	r3, [r7, #0]
 80174cc:	3314      	adds	r3, #20
 80174ce:	4618      	mov	r0, r3
 80174d0:	f7ff f83c 	bl	801654c <ld_word>
 80174d4:	4603      	mov	r3, r0
 80174d6:	041b      	lsls	r3, r3, #16
 80174d8:	68fa      	ldr	r2, [r7, #12]
 80174da:	4313      	orrs	r3, r2
 80174dc:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80174de:	68fb      	ldr	r3, [r7, #12]
}
 80174e0:	4618      	mov	r0, r3
 80174e2:	3710      	adds	r7, #16
 80174e4:	46bd      	mov	sp, r7
 80174e6:	bd80      	pop	{r7, pc}

080174e8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80174e8:	b580      	push	{r7, lr}
 80174ea:	b084      	sub	sp, #16
 80174ec:	af00      	add	r7, sp, #0
 80174ee:	60f8      	str	r0, [r7, #12]
 80174f0:	60b9      	str	r1, [r7, #8]
 80174f2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80174f4:	68bb      	ldr	r3, [r7, #8]
 80174f6:	331a      	adds	r3, #26
 80174f8:	687a      	ldr	r2, [r7, #4]
 80174fa:	b292      	uxth	r2, r2
 80174fc:	4611      	mov	r1, r2
 80174fe:	4618      	mov	r0, r3
 8017500:	f7ff f85f 	bl	80165c2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8017504:	68fb      	ldr	r3, [r7, #12]
 8017506:	781b      	ldrb	r3, [r3, #0]
 8017508:	2b03      	cmp	r3, #3
 801750a:	d109      	bne.n	8017520 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801750c:	68bb      	ldr	r3, [r7, #8]
 801750e:	f103 0214 	add.w	r2, r3, #20
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	0c1b      	lsrs	r3, r3, #16
 8017516:	b29b      	uxth	r3, r3
 8017518:	4619      	mov	r1, r3
 801751a:	4610      	mov	r0, r2
 801751c:	f7ff f851 	bl	80165c2 <st_word>
	}
}
 8017520:	bf00      	nop
 8017522:	3710      	adds	r7, #16
 8017524:	46bd      	mov	sp, r7
 8017526:	bd80      	pop	{r7, pc}

08017528 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8017528:	b580      	push	{r7, lr}
 801752a:	b086      	sub	sp, #24
 801752c:	af00      	add	r7, sp, #0
 801752e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	681b      	ldr	r3, [r3, #0]
 8017534:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8017536:	2100      	movs	r1, #0
 8017538:	6878      	ldr	r0, [r7, #4]
 801753a:	f7ff fe2f 	bl	801719c <dir_sdi>
 801753e:	4603      	mov	r3, r0
 8017540:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8017542:	7dfb      	ldrb	r3, [r7, #23]
 8017544:	2b00      	cmp	r3, #0
 8017546:	d001      	beq.n	801754c <dir_find+0x24>
 8017548:	7dfb      	ldrb	r3, [r7, #23]
 801754a:	e03e      	b.n	80175ca <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	69db      	ldr	r3, [r3, #28]
 8017550:	4619      	mov	r1, r3
 8017552:	6938      	ldr	r0, [r7, #16]
 8017554:	f7ff faaa 	bl	8016aac <move_window>
 8017558:	4603      	mov	r3, r0
 801755a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801755c:	7dfb      	ldrb	r3, [r7, #23]
 801755e:	2b00      	cmp	r3, #0
 8017560:	d12f      	bne.n	80175c2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	6a1b      	ldr	r3, [r3, #32]
 8017566:	781b      	ldrb	r3, [r3, #0]
 8017568:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801756a:	7bfb      	ldrb	r3, [r7, #15]
 801756c:	2b00      	cmp	r3, #0
 801756e:	d102      	bne.n	8017576 <dir_find+0x4e>
 8017570:	2304      	movs	r3, #4
 8017572:	75fb      	strb	r3, [r7, #23]
 8017574:	e028      	b.n	80175c8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	6a1b      	ldr	r3, [r3, #32]
 801757a:	330b      	adds	r3, #11
 801757c:	781b      	ldrb	r3, [r3, #0]
 801757e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017582:	b2da      	uxtb	r2, r3
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	6a1b      	ldr	r3, [r3, #32]
 801758c:	330b      	adds	r3, #11
 801758e:	781b      	ldrb	r3, [r3, #0]
 8017590:	f003 0308 	and.w	r3, r3, #8
 8017594:	2b00      	cmp	r3, #0
 8017596:	d10a      	bne.n	80175ae <dir_find+0x86>
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	6a18      	ldr	r0, [r3, #32]
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	3324      	adds	r3, #36	; 0x24
 80175a0:	220b      	movs	r2, #11
 80175a2:	4619      	mov	r1, r3
 80175a4:	f7ff f88f 	bl	80166c6 <mem_cmp>
 80175a8:	4603      	mov	r3, r0
 80175aa:	2b00      	cmp	r3, #0
 80175ac:	d00b      	beq.n	80175c6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80175ae:	2100      	movs	r1, #0
 80175b0:	6878      	ldr	r0, [r7, #4]
 80175b2:	f7ff fe6e 	bl	8017292 <dir_next>
 80175b6:	4603      	mov	r3, r0
 80175b8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80175ba:	7dfb      	ldrb	r3, [r7, #23]
 80175bc:	2b00      	cmp	r3, #0
 80175be:	d0c5      	beq.n	801754c <dir_find+0x24>
 80175c0:	e002      	b.n	80175c8 <dir_find+0xa0>
		if (res != FR_OK) break;
 80175c2:	bf00      	nop
 80175c4:	e000      	b.n	80175c8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80175c6:	bf00      	nop

	return res;
 80175c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80175ca:	4618      	mov	r0, r3
 80175cc:	3718      	adds	r7, #24
 80175ce:	46bd      	mov	sp, r7
 80175d0:	bd80      	pop	{r7, pc}

080175d2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80175d2:	b580      	push	{r7, lr}
 80175d4:	b084      	sub	sp, #16
 80175d6:	af00      	add	r7, sp, #0
 80175d8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	681b      	ldr	r3, [r3, #0]
 80175de:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80175e0:	2101      	movs	r1, #1
 80175e2:	6878      	ldr	r0, [r7, #4]
 80175e4:	f7ff ff1a 	bl	801741c <dir_alloc>
 80175e8:	4603      	mov	r3, r0
 80175ea:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80175ec:	7bfb      	ldrb	r3, [r7, #15]
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d11c      	bne.n	801762c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	69db      	ldr	r3, [r3, #28]
 80175f6:	4619      	mov	r1, r3
 80175f8:	68b8      	ldr	r0, [r7, #8]
 80175fa:	f7ff fa57 	bl	8016aac <move_window>
 80175fe:	4603      	mov	r3, r0
 8017600:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8017602:	7bfb      	ldrb	r3, [r7, #15]
 8017604:	2b00      	cmp	r3, #0
 8017606:	d111      	bne.n	801762c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	6a1b      	ldr	r3, [r3, #32]
 801760c:	2220      	movs	r2, #32
 801760e:	2100      	movs	r1, #0
 8017610:	4618      	mov	r0, r3
 8017612:	f7ff f83e 	bl	8016692 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	6a18      	ldr	r0, [r3, #32]
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	3324      	adds	r3, #36	; 0x24
 801761e:	220b      	movs	r2, #11
 8017620:	4619      	mov	r1, r3
 8017622:	f7ff f815 	bl	8016650 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8017626:	68bb      	ldr	r3, [r7, #8]
 8017628:	2201      	movs	r2, #1
 801762a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801762c:	7bfb      	ldrb	r3, [r7, #15]
}
 801762e:	4618      	mov	r0, r3
 8017630:	3710      	adds	r7, #16
 8017632:	46bd      	mov	sp, r7
 8017634:	bd80      	pop	{r7, pc}
	...

08017638 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8017638:	b580      	push	{r7, lr}
 801763a:	b088      	sub	sp, #32
 801763c:	af00      	add	r7, sp, #0
 801763e:	6078      	str	r0, [r7, #4]
 8017640:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8017642:	683b      	ldr	r3, [r7, #0]
 8017644:	681b      	ldr	r3, [r3, #0]
 8017646:	60fb      	str	r3, [r7, #12]
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	3324      	adds	r3, #36	; 0x24
 801764c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801764e:	220b      	movs	r2, #11
 8017650:	2120      	movs	r1, #32
 8017652:	68b8      	ldr	r0, [r7, #8]
 8017654:	f7ff f81d 	bl	8016692 <mem_set>
	si = i = 0; ni = 8;
 8017658:	2300      	movs	r3, #0
 801765a:	613b      	str	r3, [r7, #16]
 801765c:	693b      	ldr	r3, [r7, #16]
 801765e:	617b      	str	r3, [r7, #20]
 8017660:	2308      	movs	r3, #8
 8017662:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8017664:	697b      	ldr	r3, [r7, #20]
 8017666:	1c5a      	adds	r2, r3, #1
 8017668:	617a      	str	r2, [r7, #20]
 801766a:	68fa      	ldr	r2, [r7, #12]
 801766c:	4413      	add	r3, r2
 801766e:	781b      	ldrb	r3, [r3, #0]
 8017670:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8017672:	7ffb      	ldrb	r3, [r7, #31]
 8017674:	2b20      	cmp	r3, #32
 8017676:	d94e      	bls.n	8017716 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8017678:	7ffb      	ldrb	r3, [r7, #31]
 801767a:	2b2f      	cmp	r3, #47	; 0x2f
 801767c:	d006      	beq.n	801768c <create_name+0x54>
 801767e:	7ffb      	ldrb	r3, [r7, #31]
 8017680:	2b5c      	cmp	r3, #92	; 0x5c
 8017682:	d110      	bne.n	80176a6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8017684:	e002      	b.n	801768c <create_name+0x54>
 8017686:	697b      	ldr	r3, [r7, #20]
 8017688:	3301      	adds	r3, #1
 801768a:	617b      	str	r3, [r7, #20]
 801768c:	68fa      	ldr	r2, [r7, #12]
 801768e:	697b      	ldr	r3, [r7, #20]
 8017690:	4413      	add	r3, r2
 8017692:	781b      	ldrb	r3, [r3, #0]
 8017694:	2b2f      	cmp	r3, #47	; 0x2f
 8017696:	d0f6      	beq.n	8017686 <create_name+0x4e>
 8017698:	68fa      	ldr	r2, [r7, #12]
 801769a:	697b      	ldr	r3, [r7, #20]
 801769c:	4413      	add	r3, r2
 801769e:	781b      	ldrb	r3, [r3, #0]
 80176a0:	2b5c      	cmp	r3, #92	; 0x5c
 80176a2:	d0f0      	beq.n	8017686 <create_name+0x4e>
			break;
 80176a4:	e038      	b.n	8017718 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80176a6:	7ffb      	ldrb	r3, [r7, #31]
 80176a8:	2b2e      	cmp	r3, #46	; 0x2e
 80176aa:	d003      	beq.n	80176b4 <create_name+0x7c>
 80176ac:	693a      	ldr	r2, [r7, #16]
 80176ae:	69bb      	ldr	r3, [r7, #24]
 80176b0:	429a      	cmp	r2, r3
 80176b2:	d30c      	bcc.n	80176ce <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80176b4:	69bb      	ldr	r3, [r7, #24]
 80176b6:	2b0b      	cmp	r3, #11
 80176b8:	d002      	beq.n	80176c0 <create_name+0x88>
 80176ba:	7ffb      	ldrb	r3, [r7, #31]
 80176bc:	2b2e      	cmp	r3, #46	; 0x2e
 80176be:	d001      	beq.n	80176c4 <create_name+0x8c>
 80176c0:	2306      	movs	r3, #6
 80176c2:	e044      	b.n	801774e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80176c4:	2308      	movs	r3, #8
 80176c6:	613b      	str	r3, [r7, #16]
 80176c8:	230b      	movs	r3, #11
 80176ca:	61bb      	str	r3, [r7, #24]
			continue;
 80176cc:	e022      	b.n	8017714 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80176ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	da04      	bge.n	80176e0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80176d6:	7ffb      	ldrb	r3, [r7, #31]
 80176d8:	3b80      	subs	r3, #128	; 0x80
 80176da:	4a1f      	ldr	r2, [pc, #124]	; (8017758 <create_name+0x120>)
 80176dc:	5cd3      	ldrb	r3, [r2, r3]
 80176de:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80176e0:	7ffb      	ldrb	r3, [r7, #31]
 80176e2:	4619      	mov	r1, r3
 80176e4:	481d      	ldr	r0, [pc, #116]	; (801775c <create_name+0x124>)
 80176e6:	f7ff f815 	bl	8016714 <chk_chr>
 80176ea:	4603      	mov	r3, r0
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d001      	beq.n	80176f4 <create_name+0xbc>
 80176f0:	2306      	movs	r3, #6
 80176f2:	e02c      	b.n	801774e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80176f4:	7ffb      	ldrb	r3, [r7, #31]
 80176f6:	2b60      	cmp	r3, #96	; 0x60
 80176f8:	d905      	bls.n	8017706 <create_name+0xce>
 80176fa:	7ffb      	ldrb	r3, [r7, #31]
 80176fc:	2b7a      	cmp	r3, #122	; 0x7a
 80176fe:	d802      	bhi.n	8017706 <create_name+0xce>
 8017700:	7ffb      	ldrb	r3, [r7, #31]
 8017702:	3b20      	subs	r3, #32
 8017704:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8017706:	693b      	ldr	r3, [r7, #16]
 8017708:	1c5a      	adds	r2, r3, #1
 801770a:	613a      	str	r2, [r7, #16]
 801770c:	68ba      	ldr	r2, [r7, #8]
 801770e:	4413      	add	r3, r2
 8017710:	7ffa      	ldrb	r2, [r7, #31]
 8017712:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8017714:	e7a6      	b.n	8017664 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8017716:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8017718:	68fa      	ldr	r2, [r7, #12]
 801771a:	697b      	ldr	r3, [r7, #20]
 801771c:	441a      	add	r2, r3
 801771e:	683b      	ldr	r3, [r7, #0]
 8017720:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8017722:	693b      	ldr	r3, [r7, #16]
 8017724:	2b00      	cmp	r3, #0
 8017726:	d101      	bne.n	801772c <create_name+0xf4>
 8017728:	2306      	movs	r3, #6
 801772a:	e010      	b.n	801774e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801772c:	68bb      	ldr	r3, [r7, #8]
 801772e:	781b      	ldrb	r3, [r3, #0]
 8017730:	2be5      	cmp	r3, #229	; 0xe5
 8017732:	d102      	bne.n	801773a <create_name+0x102>
 8017734:	68bb      	ldr	r3, [r7, #8]
 8017736:	2205      	movs	r2, #5
 8017738:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801773a:	7ffb      	ldrb	r3, [r7, #31]
 801773c:	2b20      	cmp	r3, #32
 801773e:	d801      	bhi.n	8017744 <create_name+0x10c>
 8017740:	2204      	movs	r2, #4
 8017742:	e000      	b.n	8017746 <create_name+0x10e>
 8017744:	2200      	movs	r2, #0
 8017746:	68bb      	ldr	r3, [r7, #8]
 8017748:	330b      	adds	r3, #11
 801774a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801774c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801774e:	4618      	mov	r0, r3
 8017750:	3720      	adds	r7, #32
 8017752:	46bd      	mov	sp, r7
 8017754:	bd80      	pop	{r7, pc}
 8017756:	bf00      	nop
 8017758:	0801af78 	.word	0x0801af78
 801775c:	0801ae9c 	.word	0x0801ae9c

08017760 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8017760:	b580      	push	{r7, lr}
 8017762:	b086      	sub	sp, #24
 8017764:	af00      	add	r7, sp, #0
 8017766:	6078      	str	r0, [r7, #4]
 8017768:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801776e:	693b      	ldr	r3, [r7, #16]
 8017770:	681b      	ldr	r3, [r3, #0]
 8017772:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8017774:	e002      	b.n	801777c <follow_path+0x1c>
 8017776:	683b      	ldr	r3, [r7, #0]
 8017778:	3301      	adds	r3, #1
 801777a:	603b      	str	r3, [r7, #0]
 801777c:	683b      	ldr	r3, [r7, #0]
 801777e:	781b      	ldrb	r3, [r3, #0]
 8017780:	2b2f      	cmp	r3, #47	; 0x2f
 8017782:	d0f8      	beq.n	8017776 <follow_path+0x16>
 8017784:	683b      	ldr	r3, [r7, #0]
 8017786:	781b      	ldrb	r3, [r3, #0]
 8017788:	2b5c      	cmp	r3, #92	; 0x5c
 801778a:	d0f4      	beq.n	8017776 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801778c:	693b      	ldr	r3, [r7, #16]
 801778e:	2200      	movs	r2, #0
 8017790:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8017792:	683b      	ldr	r3, [r7, #0]
 8017794:	781b      	ldrb	r3, [r3, #0]
 8017796:	2b1f      	cmp	r3, #31
 8017798:	d80a      	bhi.n	80177b0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	2280      	movs	r2, #128	; 0x80
 801779e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80177a2:	2100      	movs	r1, #0
 80177a4:	6878      	ldr	r0, [r7, #4]
 80177a6:	f7ff fcf9 	bl	801719c <dir_sdi>
 80177aa:	4603      	mov	r3, r0
 80177ac:	75fb      	strb	r3, [r7, #23]
 80177ae:	e043      	b.n	8017838 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80177b0:	463b      	mov	r3, r7
 80177b2:	4619      	mov	r1, r3
 80177b4:	6878      	ldr	r0, [r7, #4]
 80177b6:	f7ff ff3f 	bl	8017638 <create_name>
 80177ba:	4603      	mov	r3, r0
 80177bc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80177be:	7dfb      	ldrb	r3, [r7, #23]
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d134      	bne.n	801782e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80177c4:	6878      	ldr	r0, [r7, #4]
 80177c6:	f7ff feaf 	bl	8017528 <dir_find>
 80177ca:	4603      	mov	r3, r0
 80177cc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80177d4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80177d6:	7dfb      	ldrb	r3, [r7, #23]
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d00a      	beq.n	80177f2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80177dc:	7dfb      	ldrb	r3, [r7, #23]
 80177de:	2b04      	cmp	r3, #4
 80177e0:	d127      	bne.n	8017832 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80177e2:	7afb      	ldrb	r3, [r7, #11]
 80177e4:	f003 0304 	and.w	r3, r3, #4
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d122      	bne.n	8017832 <follow_path+0xd2>
 80177ec:	2305      	movs	r3, #5
 80177ee:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80177f0:	e01f      	b.n	8017832 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80177f2:	7afb      	ldrb	r3, [r7, #11]
 80177f4:	f003 0304 	and.w	r3, r3, #4
 80177f8:	2b00      	cmp	r3, #0
 80177fa:	d11c      	bne.n	8017836 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80177fc:	693b      	ldr	r3, [r7, #16]
 80177fe:	799b      	ldrb	r3, [r3, #6]
 8017800:	f003 0310 	and.w	r3, r3, #16
 8017804:	2b00      	cmp	r3, #0
 8017806:	d102      	bne.n	801780e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8017808:	2305      	movs	r3, #5
 801780a:	75fb      	strb	r3, [r7, #23]
 801780c:	e014      	b.n	8017838 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801780e:	68fb      	ldr	r3, [r7, #12]
 8017810:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	695b      	ldr	r3, [r3, #20]
 8017818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801781c:	4413      	add	r3, r2
 801781e:	4619      	mov	r1, r3
 8017820:	68f8      	ldr	r0, [r7, #12]
 8017822:	f7ff fe42 	bl	80174aa <ld_clust>
 8017826:	4602      	mov	r2, r0
 8017828:	693b      	ldr	r3, [r7, #16]
 801782a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801782c:	e7c0      	b.n	80177b0 <follow_path+0x50>
			if (res != FR_OK) break;
 801782e:	bf00      	nop
 8017830:	e002      	b.n	8017838 <follow_path+0xd8>
				break;
 8017832:	bf00      	nop
 8017834:	e000      	b.n	8017838 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8017836:	bf00      	nop
			}
		}
	}

	return res;
 8017838:	7dfb      	ldrb	r3, [r7, #23]
}
 801783a:	4618      	mov	r0, r3
 801783c:	3718      	adds	r7, #24
 801783e:	46bd      	mov	sp, r7
 8017840:	bd80      	pop	{r7, pc}

08017842 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8017842:	b480      	push	{r7}
 8017844:	b087      	sub	sp, #28
 8017846:	af00      	add	r7, sp, #0
 8017848:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801784a:	f04f 33ff 	mov.w	r3, #4294967295
 801784e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	681b      	ldr	r3, [r3, #0]
 8017854:	2b00      	cmp	r3, #0
 8017856:	d031      	beq.n	80178bc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	681b      	ldr	r3, [r3, #0]
 801785c:	617b      	str	r3, [r7, #20]
 801785e:	e002      	b.n	8017866 <get_ldnumber+0x24>
 8017860:	697b      	ldr	r3, [r7, #20]
 8017862:	3301      	adds	r3, #1
 8017864:	617b      	str	r3, [r7, #20]
 8017866:	697b      	ldr	r3, [r7, #20]
 8017868:	781b      	ldrb	r3, [r3, #0]
 801786a:	2b20      	cmp	r3, #32
 801786c:	d903      	bls.n	8017876 <get_ldnumber+0x34>
 801786e:	697b      	ldr	r3, [r7, #20]
 8017870:	781b      	ldrb	r3, [r3, #0]
 8017872:	2b3a      	cmp	r3, #58	; 0x3a
 8017874:	d1f4      	bne.n	8017860 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8017876:	697b      	ldr	r3, [r7, #20]
 8017878:	781b      	ldrb	r3, [r3, #0]
 801787a:	2b3a      	cmp	r3, #58	; 0x3a
 801787c:	d11c      	bne.n	80178b8 <get_ldnumber+0x76>
			tp = *path;
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	681b      	ldr	r3, [r3, #0]
 8017882:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8017884:	68fb      	ldr	r3, [r7, #12]
 8017886:	1c5a      	adds	r2, r3, #1
 8017888:	60fa      	str	r2, [r7, #12]
 801788a:	781b      	ldrb	r3, [r3, #0]
 801788c:	3b30      	subs	r3, #48	; 0x30
 801788e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8017890:	68bb      	ldr	r3, [r7, #8]
 8017892:	2b09      	cmp	r3, #9
 8017894:	d80e      	bhi.n	80178b4 <get_ldnumber+0x72>
 8017896:	68fa      	ldr	r2, [r7, #12]
 8017898:	697b      	ldr	r3, [r7, #20]
 801789a:	429a      	cmp	r2, r3
 801789c:	d10a      	bne.n	80178b4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801789e:	68bb      	ldr	r3, [r7, #8]
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	d107      	bne.n	80178b4 <get_ldnumber+0x72>
					vol = (int)i;
 80178a4:	68bb      	ldr	r3, [r7, #8]
 80178a6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80178a8:	697b      	ldr	r3, [r7, #20]
 80178aa:	3301      	adds	r3, #1
 80178ac:	617b      	str	r3, [r7, #20]
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	697a      	ldr	r2, [r7, #20]
 80178b2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80178b4:	693b      	ldr	r3, [r7, #16]
 80178b6:	e002      	b.n	80178be <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80178b8:	2300      	movs	r3, #0
 80178ba:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80178bc:	693b      	ldr	r3, [r7, #16]
}
 80178be:	4618      	mov	r0, r3
 80178c0:	371c      	adds	r7, #28
 80178c2:	46bd      	mov	sp, r7
 80178c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178c8:	4770      	bx	lr
	...

080178cc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80178cc:	b580      	push	{r7, lr}
 80178ce:	b082      	sub	sp, #8
 80178d0:	af00      	add	r7, sp, #0
 80178d2:	6078      	str	r0, [r7, #4]
 80178d4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	2200      	movs	r2, #0
 80178da:	70da      	strb	r2, [r3, #3]
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	f04f 32ff 	mov.w	r2, #4294967295
 80178e2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80178e4:	6839      	ldr	r1, [r7, #0]
 80178e6:	6878      	ldr	r0, [r7, #4]
 80178e8:	f7ff f8e0 	bl	8016aac <move_window>
 80178ec:	4603      	mov	r3, r0
 80178ee:	2b00      	cmp	r3, #0
 80178f0:	d001      	beq.n	80178f6 <check_fs+0x2a>
 80178f2:	2304      	movs	r3, #4
 80178f4:	e038      	b.n	8017968 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	3330      	adds	r3, #48	; 0x30
 80178fa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80178fe:	4618      	mov	r0, r3
 8017900:	f7fe fe24 	bl	801654c <ld_word>
 8017904:	4603      	mov	r3, r0
 8017906:	461a      	mov	r2, r3
 8017908:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801790c:	429a      	cmp	r2, r3
 801790e:	d001      	beq.n	8017914 <check_fs+0x48>
 8017910:	2303      	movs	r3, #3
 8017912:	e029      	b.n	8017968 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801791a:	2be9      	cmp	r3, #233	; 0xe9
 801791c:	d009      	beq.n	8017932 <check_fs+0x66>
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017924:	2beb      	cmp	r3, #235	; 0xeb
 8017926:	d11e      	bne.n	8017966 <check_fs+0x9a>
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801792e:	2b90      	cmp	r3, #144	; 0x90
 8017930:	d119      	bne.n	8017966 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	3330      	adds	r3, #48	; 0x30
 8017936:	3336      	adds	r3, #54	; 0x36
 8017938:	4618      	mov	r0, r3
 801793a:	f7fe fe1f 	bl	801657c <ld_dword>
 801793e:	4603      	mov	r3, r0
 8017940:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8017944:	4a0a      	ldr	r2, [pc, #40]	; (8017970 <check_fs+0xa4>)
 8017946:	4293      	cmp	r3, r2
 8017948:	d101      	bne.n	801794e <check_fs+0x82>
 801794a:	2300      	movs	r3, #0
 801794c:	e00c      	b.n	8017968 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	3330      	adds	r3, #48	; 0x30
 8017952:	3352      	adds	r3, #82	; 0x52
 8017954:	4618      	mov	r0, r3
 8017956:	f7fe fe11 	bl	801657c <ld_dword>
 801795a:	4602      	mov	r2, r0
 801795c:	4b05      	ldr	r3, [pc, #20]	; (8017974 <check_fs+0xa8>)
 801795e:	429a      	cmp	r2, r3
 8017960:	d101      	bne.n	8017966 <check_fs+0x9a>
 8017962:	2300      	movs	r3, #0
 8017964:	e000      	b.n	8017968 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8017966:	2302      	movs	r3, #2
}
 8017968:	4618      	mov	r0, r3
 801796a:	3708      	adds	r7, #8
 801796c:	46bd      	mov	sp, r7
 801796e:	bd80      	pop	{r7, pc}
 8017970:	00544146 	.word	0x00544146
 8017974:	33544146 	.word	0x33544146

08017978 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8017978:	b580      	push	{r7, lr}
 801797a:	b096      	sub	sp, #88	; 0x58
 801797c:	af00      	add	r7, sp, #0
 801797e:	60f8      	str	r0, [r7, #12]
 8017980:	60b9      	str	r1, [r7, #8]
 8017982:	4613      	mov	r3, r2
 8017984:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8017986:	68bb      	ldr	r3, [r7, #8]
 8017988:	2200      	movs	r2, #0
 801798a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801798c:	68f8      	ldr	r0, [r7, #12]
 801798e:	f7ff ff58 	bl	8017842 <get_ldnumber>
 8017992:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8017994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017996:	2b00      	cmp	r3, #0
 8017998:	da01      	bge.n	801799e <find_volume+0x26>
 801799a:	230b      	movs	r3, #11
 801799c:	e22e      	b.n	8017dfc <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801799e:	4aa8      	ldr	r2, [pc, #672]	; (8017c40 <find_volume+0x2c8>)
 80179a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80179a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80179a6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80179a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	d101      	bne.n	80179b2 <find_volume+0x3a>
 80179ae:	230c      	movs	r3, #12
 80179b0:	e224      	b.n	8017dfc <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80179b2:	68bb      	ldr	r3, [r7, #8]
 80179b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80179b6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80179b8:	79fb      	ldrb	r3, [r7, #7]
 80179ba:	f023 0301 	bic.w	r3, r3, #1
 80179be:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80179c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179c2:	781b      	ldrb	r3, [r3, #0]
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	d01a      	beq.n	80179fe <find_volume+0x86>
		stat = disk_status(fs->drv);
 80179c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179ca:	785b      	ldrb	r3, [r3, #1]
 80179cc:	4618      	mov	r0, r3
 80179ce:	f7fe fd1f 	bl	8016410 <disk_status>
 80179d2:	4603      	mov	r3, r0
 80179d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80179d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80179dc:	f003 0301 	and.w	r3, r3, #1
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	d10c      	bne.n	80179fe <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80179e4:	79fb      	ldrb	r3, [r7, #7]
 80179e6:	2b00      	cmp	r3, #0
 80179e8:	d007      	beq.n	80179fa <find_volume+0x82>
 80179ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80179ee:	f003 0304 	and.w	r3, r3, #4
 80179f2:	2b00      	cmp	r3, #0
 80179f4:	d001      	beq.n	80179fa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80179f6:	230a      	movs	r3, #10
 80179f8:	e200      	b.n	8017dfc <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80179fa:	2300      	movs	r3, #0
 80179fc:	e1fe      	b.n	8017dfc <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80179fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a00:	2200      	movs	r2, #0
 8017a02:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8017a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017a06:	b2da      	uxtb	r2, r3
 8017a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a0a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8017a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a0e:	785b      	ldrb	r3, [r3, #1]
 8017a10:	4618      	mov	r0, r3
 8017a12:	f7fe fd17 	bl	8016444 <disk_initialize>
 8017a16:	4603      	mov	r3, r0
 8017a18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8017a1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017a20:	f003 0301 	and.w	r3, r3, #1
 8017a24:	2b00      	cmp	r3, #0
 8017a26:	d001      	beq.n	8017a2c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8017a28:	2303      	movs	r3, #3
 8017a2a:	e1e7      	b.n	8017dfc <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8017a2c:	79fb      	ldrb	r3, [r7, #7]
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	d007      	beq.n	8017a42 <find_volume+0xca>
 8017a32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017a36:	f003 0304 	and.w	r3, r3, #4
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	d001      	beq.n	8017a42 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8017a3e:	230a      	movs	r3, #10
 8017a40:	e1dc      	b.n	8017dfc <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8017a42:	2300      	movs	r3, #0
 8017a44:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8017a46:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017a48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017a4a:	f7ff ff3f 	bl	80178cc <check_fs>
 8017a4e:	4603      	mov	r3, r0
 8017a50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8017a54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017a58:	2b02      	cmp	r3, #2
 8017a5a:	d14b      	bne.n	8017af4 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8017a5c:	2300      	movs	r3, #0
 8017a5e:	643b      	str	r3, [r7, #64]	; 0x40
 8017a60:	e01f      	b.n	8017aa2 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8017a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a64:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017a68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a6a:	011b      	lsls	r3, r3, #4
 8017a6c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8017a70:	4413      	add	r3, r2
 8017a72:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8017a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a76:	3304      	adds	r3, #4
 8017a78:	781b      	ldrb	r3, [r3, #0]
 8017a7a:	2b00      	cmp	r3, #0
 8017a7c:	d006      	beq.n	8017a8c <find_volume+0x114>
 8017a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a80:	3308      	adds	r3, #8
 8017a82:	4618      	mov	r0, r3
 8017a84:	f7fe fd7a 	bl	801657c <ld_dword>
 8017a88:	4602      	mov	r2, r0
 8017a8a:	e000      	b.n	8017a8e <find_volume+0x116>
 8017a8c:	2200      	movs	r2, #0
 8017a8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a90:	009b      	lsls	r3, r3, #2
 8017a92:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8017a96:	440b      	add	r3, r1
 8017a98:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8017a9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a9e:	3301      	adds	r3, #1
 8017aa0:	643b      	str	r3, [r7, #64]	; 0x40
 8017aa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017aa4:	2b03      	cmp	r3, #3
 8017aa6:	d9dc      	bls.n	8017a62 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8017aa8:	2300      	movs	r3, #0
 8017aaa:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8017aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d002      	beq.n	8017ab8 <find_volume+0x140>
 8017ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ab4:	3b01      	subs	r3, #1
 8017ab6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8017ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017aba:	009b      	lsls	r3, r3, #2
 8017abc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8017ac0:	4413      	add	r3, r2
 8017ac2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8017ac6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8017ac8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	d005      	beq.n	8017ada <find_volume+0x162>
 8017ace:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017ad0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017ad2:	f7ff fefb 	bl	80178cc <check_fs>
 8017ad6:	4603      	mov	r3, r0
 8017ad8:	e000      	b.n	8017adc <find_volume+0x164>
 8017ada:	2303      	movs	r3, #3
 8017adc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8017ae0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017ae4:	2b01      	cmp	r3, #1
 8017ae6:	d905      	bls.n	8017af4 <find_volume+0x17c>
 8017ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017aea:	3301      	adds	r3, #1
 8017aec:	643b      	str	r3, [r7, #64]	; 0x40
 8017aee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017af0:	2b03      	cmp	r3, #3
 8017af2:	d9e1      	bls.n	8017ab8 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8017af4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017af8:	2b04      	cmp	r3, #4
 8017afa:	d101      	bne.n	8017b00 <find_volume+0x188>
 8017afc:	2301      	movs	r3, #1
 8017afe:	e17d      	b.n	8017dfc <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8017b00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017b04:	2b01      	cmp	r3, #1
 8017b06:	d901      	bls.n	8017b0c <find_volume+0x194>
 8017b08:	230d      	movs	r3, #13
 8017b0a:	e177      	b.n	8017dfc <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8017b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b0e:	3330      	adds	r3, #48	; 0x30
 8017b10:	330b      	adds	r3, #11
 8017b12:	4618      	mov	r0, r3
 8017b14:	f7fe fd1a 	bl	801654c <ld_word>
 8017b18:	4603      	mov	r3, r0
 8017b1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017b1e:	d001      	beq.n	8017b24 <find_volume+0x1ac>
 8017b20:	230d      	movs	r3, #13
 8017b22:	e16b      	b.n	8017dfc <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8017b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b26:	3330      	adds	r3, #48	; 0x30
 8017b28:	3316      	adds	r3, #22
 8017b2a:	4618      	mov	r0, r3
 8017b2c:	f7fe fd0e 	bl	801654c <ld_word>
 8017b30:	4603      	mov	r3, r0
 8017b32:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8017b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	d106      	bne.n	8017b48 <find_volume+0x1d0>
 8017b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b3c:	3330      	adds	r3, #48	; 0x30
 8017b3e:	3324      	adds	r3, #36	; 0x24
 8017b40:	4618      	mov	r0, r3
 8017b42:	f7fe fd1b 	bl	801657c <ld_dword>
 8017b46:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8017b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017b4c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8017b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b50:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8017b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b56:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8017b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b5a:	789b      	ldrb	r3, [r3, #2]
 8017b5c:	2b01      	cmp	r3, #1
 8017b5e:	d005      	beq.n	8017b6c <find_volume+0x1f4>
 8017b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b62:	789b      	ldrb	r3, [r3, #2]
 8017b64:	2b02      	cmp	r3, #2
 8017b66:	d001      	beq.n	8017b6c <find_volume+0x1f4>
 8017b68:	230d      	movs	r3, #13
 8017b6a:	e147      	b.n	8017dfc <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8017b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b6e:	789b      	ldrb	r3, [r3, #2]
 8017b70:	461a      	mov	r2, r3
 8017b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017b74:	fb02 f303 	mul.w	r3, r2, r3
 8017b78:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8017b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017b80:	b29a      	uxth	r2, r3
 8017b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b84:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8017b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b88:	895b      	ldrh	r3, [r3, #10]
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d008      	beq.n	8017ba0 <find_volume+0x228>
 8017b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b90:	895b      	ldrh	r3, [r3, #10]
 8017b92:	461a      	mov	r2, r3
 8017b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b96:	895b      	ldrh	r3, [r3, #10]
 8017b98:	3b01      	subs	r3, #1
 8017b9a:	4013      	ands	r3, r2
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	d001      	beq.n	8017ba4 <find_volume+0x22c>
 8017ba0:	230d      	movs	r3, #13
 8017ba2:	e12b      	b.n	8017dfc <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8017ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ba6:	3330      	adds	r3, #48	; 0x30
 8017ba8:	3311      	adds	r3, #17
 8017baa:	4618      	mov	r0, r3
 8017bac:	f7fe fcce 	bl	801654c <ld_word>
 8017bb0:	4603      	mov	r3, r0
 8017bb2:	461a      	mov	r2, r3
 8017bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bb6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8017bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bba:	891b      	ldrh	r3, [r3, #8]
 8017bbc:	f003 030f 	and.w	r3, r3, #15
 8017bc0:	b29b      	uxth	r3, r3
 8017bc2:	2b00      	cmp	r3, #0
 8017bc4:	d001      	beq.n	8017bca <find_volume+0x252>
 8017bc6:	230d      	movs	r3, #13
 8017bc8:	e118      	b.n	8017dfc <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8017bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bcc:	3330      	adds	r3, #48	; 0x30
 8017bce:	3313      	adds	r3, #19
 8017bd0:	4618      	mov	r0, r3
 8017bd2:	f7fe fcbb 	bl	801654c <ld_word>
 8017bd6:	4603      	mov	r3, r0
 8017bd8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8017bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017bdc:	2b00      	cmp	r3, #0
 8017bde:	d106      	bne.n	8017bee <find_volume+0x276>
 8017be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017be2:	3330      	adds	r3, #48	; 0x30
 8017be4:	3320      	adds	r3, #32
 8017be6:	4618      	mov	r0, r3
 8017be8:	f7fe fcc8 	bl	801657c <ld_dword>
 8017bec:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8017bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bf0:	3330      	adds	r3, #48	; 0x30
 8017bf2:	330e      	adds	r3, #14
 8017bf4:	4618      	mov	r0, r3
 8017bf6:	f7fe fca9 	bl	801654c <ld_word>
 8017bfa:	4603      	mov	r3, r0
 8017bfc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8017bfe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017c00:	2b00      	cmp	r3, #0
 8017c02:	d101      	bne.n	8017c08 <find_volume+0x290>
 8017c04:	230d      	movs	r3, #13
 8017c06:	e0f9      	b.n	8017dfc <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8017c08:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017c0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017c0c:	4413      	add	r3, r2
 8017c0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017c10:	8912      	ldrh	r2, [r2, #8]
 8017c12:	0912      	lsrs	r2, r2, #4
 8017c14:	b292      	uxth	r2, r2
 8017c16:	4413      	add	r3, r2
 8017c18:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8017c1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c1e:	429a      	cmp	r2, r3
 8017c20:	d201      	bcs.n	8017c26 <find_volume+0x2ae>
 8017c22:	230d      	movs	r3, #13
 8017c24:	e0ea      	b.n	8017dfc <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8017c26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c2a:	1ad3      	subs	r3, r2, r3
 8017c2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017c2e:	8952      	ldrh	r2, [r2, #10]
 8017c30:	fbb3 f3f2 	udiv	r3, r3, r2
 8017c34:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8017c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d103      	bne.n	8017c44 <find_volume+0x2cc>
 8017c3c:	230d      	movs	r3, #13
 8017c3e:	e0dd      	b.n	8017dfc <find_volume+0x484>
 8017c40:	24000b5c 	.word	0x24000b5c
		fmt = FS_FAT32;
 8017c44:	2303      	movs	r3, #3
 8017c46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8017c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c4c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8017c50:	4293      	cmp	r3, r2
 8017c52:	d802      	bhi.n	8017c5a <find_volume+0x2e2>
 8017c54:	2302      	movs	r3, #2
 8017c56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8017c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c5c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8017c60:	4293      	cmp	r3, r2
 8017c62:	d802      	bhi.n	8017c6a <find_volume+0x2f2>
 8017c64:	2301      	movs	r3, #1
 8017c66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8017c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c6c:	1c9a      	adds	r2, r3, #2
 8017c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c70:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8017c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017c76:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8017c78:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017c7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017c7c:	441a      	add	r2, r3
 8017c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c80:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8017c82:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c86:	441a      	add	r2, r3
 8017c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c8a:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8017c8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017c90:	2b03      	cmp	r3, #3
 8017c92:	d11e      	bne.n	8017cd2 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8017c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c96:	3330      	adds	r3, #48	; 0x30
 8017c98:	332a      	adds	r3, #42	; 0x2a
 8017c9a:	4618      	mov	r0, r3
 8017c9c:	f7fe fc56 	bl	801654c <ld_word>
 8017ca0:	4603      	mov	r3, r0
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d001      	beq.n	8017caa <find_volume+0x332>
 8017ca6:	230d      	movs	r3, #13
 8017ca8:	e0a8      	b.n	8017dfc <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8017caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cac:	891b      	ldrh	r3, [r3, #8]
 8017cae:	2b00      	cmp	r3, #0
 8017cb0:	d001      	beq.n	8017cb6 <find_volume+0x33e>
 8017cb2:	230d      	movs	r3, #13
 8017cb4:	e0a2      	b.n	8017dfc <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8017cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cb8:	3330      	adds	r3, #48	; 0x30
 8017cba:	332c      	adds	r3, #44	; 0x2c
 8017cbc:	4618      	mov	r0, r3
 8017cbe:	f7fe fc5d 	bl	801657c <ld_dword>
 8017cc2:	4602      	mov	r2, r0
 8017cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cc6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8017cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cca:	695b      	ldr	r3, [r3, #20]
 8017ccc:	009b      	lsls	r3, r3, #2
 8017cce:	647b      	str	r3, [r7, #68]	; 0x44
 8017cd0:	e01f      	b.n	8017d12 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8017cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cd4:	891b      	ldrh	r3, [r3, #8]
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	d101      	bne.n	8017cde <find_volume+0x366>
 8017cda:	230d      	movs	r3, #13
 8017cdc:	e08e      	b.n	8017dfc <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8017cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ce0:	6a1a      	ldr	r2, [r3, #32]
 8017ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017ce4:	441a      	add	r2, r3
 8017ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ce8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8017cea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017cee:	2b02      	cmp	r3, #2
 8017cf0:	d103      	bne.n	8017cfa <find_volume+0x382>
 8017cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cf4:	695b      	ldr	r3, [r3, #20]
 8017cf6:	005b      	lsls	r3, r3, #1
 8017cf8:	e00a      	b.n	8017d10 <find_volume+0x398>
 8017cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cfc:	695a      	ldr	r2, [r3, #20]
 8017cfe:	4613      	mov	r3, r2
 8017d00:	005b      	lsls	r3, r3, #1
 8017d02:	4413      	add	r3, r2
 8017d04:	085a      	lsrs	r2, r3, #1
 8017d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d08:	695b      	ldr	r3, [r3, #20]
 8017d0a:	f003 0301 	and.w	r3, r3, #1
 8017d0e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8017d10:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8017d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d14:	699a      	ldr	r2, [r3, #24]
 8017d16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017d18:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8017d1c:	0a5b      	lsrs	r3, r3, #9
 8017d1e:	429a      	cmp	r2, r3
 8017d20:	d201      	bcs.n	8017d26 <find_volume+0x3ae>
 8017d22:	230d      	movs	r3, #13
 8017d24:	e06a      	b.n	8017dfc <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8017d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d28:	f04f 32ff 	mov.w	r2, #4294967295
 8017d2c:	611a      	str	r2, [r3, #16]
 8017d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d30:	691a      	ldr	r2, [r3, #16]
 8017d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d34:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8017d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d38:	2280      	movs	r2, #128	; 0x80
 8017d3a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8017d3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017d40:	2b03      	cmp	r3, #3
 8017d42:	d149      	bne.n	8017dd8 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8017d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d46:	3330      	adds	r3, #48	; 0x30
 8017d48:	3330      	adds	r3, #48	; 0x30
 8017d4a:	4618      	mov	r0, r3
 8017d4c:	f7fe fbfe 	bl	801654c <ld_word>
 8017d50:	4603      	mov	r3, r0
 8017d52:	2b01      	cmp	r3, #1
 8017d54:	d140      	bne.n	8017dd8 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8017d56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d58:	3301      	adds	r3, #1
 8017d5a:	4619      	mov	r1, r3
 8017d5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017d5e:	f7fe fea5 	bl	8016aac <move_window>
 8017d62:	4603      	mov	r3, r0
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	d137      	bne.n	8017dd8 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8017d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d6a:	2200      	movs	r2, #0
 8017d6c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8017d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d70:	3330      	adds	r3, #48	; 0x30
 8017d72:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017d76:	4618      	mov	r0, r3
 8017d78:	f7fe fbe8 	bl	801654c <ld_word>
 8017d7c:	4603      	mov	r3, r0
 8017d7e:	461a      	mov	r2, r3
 8017d80:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8017d84:	429a      	cmp	r2, r3
 8017d86:	d127      	bne.n	8017dd8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8017d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d8a:	3330      	adds	r3, #48	; 0x30
 8017d8c:	4618      	mov	r0, r3
 8017d8e:	f7fe fbf5 	bl	801657c <ld_dword>
 8017d92:	4602      	mov	r2, r0
 8017d94:	4b1b      	ldr	r3, [pc, #108]	; (8017e04 <find_volume+0x48c>)
 8017d96:	429a      	cmp	r2, r3
 8017d98:	d11e      	bne.n	8017dd8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8017d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d9c:	3330      	adds	r3, #48	; 0x30
 8017d9e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8017da2:	4618      	mov	r0, r3
 8017da4:	f7fe fbea 	bl	801657c <ld_dword>
 8017da8:	4602      	mov	r2, r0
 8017daa:	4b17      	ldr	r3, [pc, #92]	; (8017e08 <find_volume+0x490>)
 8017dac:	429a      	cmp	r2, r3
 8017dae:	d113      	bne.n	8017dd8 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8017db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017db2:	3330      	adds	r3, #48	; 0x30
 8017db4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8017db8:	4618      	mov	r0, r3
 8017dba:	f7fe fbdf 	bl	801657c <ld_dword>
 8017dbe:	4602      	mov	r2, r0
 8017dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017dc2:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8017dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017dc6:	3330      	adds	r3, #48	; 0x30
 8017dc8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8017dcc:	4618      	mov	r0, r3
 8017dce:	f7fe fbd5 	bl	801657c <ld_dword>
 8017dd2:	4602      	mov	r2, r0
 8017dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017dd6:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8017dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017dda:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8017dde:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8017de0:	4b0a      	ldr	r3, [pc, #40]	; (8017e0c <find_volume+0x494>)
 8017de2:	881b      	ldrh	r3, [r3, #0]
 8017de4:	3301      	adds	r3, #1
 8017de6:	b29a      	uxth	r2, r3
 8017de8:	4b08      	ldr	r3, [pc, #32]	; (8017e0c <find_volume+0x494>)
 8017dea:	801a      	strh	r2, [r3, #0]
 8017dec:	4b07      	ldr	r3, [pc, #28]	; (8017e0c <find_volume+0x494>)
 8017dee:	881a      	ldrh	r2, [r3, #0]
 8017df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017df2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8017df4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017df6:	f7fe fdf1 	bl	80169dc <clear_lock>
#endif
	return FR_OK;
 8017dfa:	2300      	movs	r3, #0
}
 8017dfc:	4618      	mov	r0, r3
 8017dfe:	3758      	adds	r7, #88	; 0x58
 8017e00:	46bd      	mov	sp, r7
 8017e02:	bd80      	pop	{r7, pc}
 8017e04:	41615252 	.word	0x41615252
 8017e08:	61417272 	.word	0x61417272
 8017e0c:	24000b60 	.word	0x24000b60

08017e10 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8017e10:	b580      	push	{r7, lr}
 8017e12:	b084      	sub	sp, #16
 8017e14:	af00      	add	r7, sp, #0
 8017e16:	6078      	str	r0, [r7, #4]
 8017e18:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8017e1a:	2309      	movs	r3, #9
 8017e1c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	2b00      	cmp	r3, #0
 8017e22:	d01c      	beq.n	8017e5e <validate+0x4e>
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	681b      	ldr	r3, [r3, #0]
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d018      	beq.n	8017e5e <validate+0x4e>
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	681b      	ldr	r3, [r3, #0]
 8017e30:	781b      	ldrb	r3, [r3, #0]
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	d013      	beq.n	8017e5e <validate+0x4e>
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	889a      	ldrh	r2, [r3, #4]
 8017e3a:	687b      	ldr	r3, [r7, #4]
 8017e3c:	681b      	ldr	r3, [r3, #0]
 8017e3e:	88db      	ldrh	r3, [r3, #6]
 8017e40:	429a      	cmp	r2, r3
 8017e42:	d10c      	bne.n	8017e5e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	681b      	ldr	r3, [r3, #0]
 8017e48:	785b      	ldrb	r3, [r3, #1]
 8017e4a:	4618      	mov	r0, r3
 8017e4c:	f7fe fae0 	bl	8016410 <disk_status>
 8017e50:	4603      	mov	r3, r0
 8017e52:	f003 0301 	and.w	r3, r3, #1
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	d101      	bne.n	8017e5e <validate+0x4e>
			res = FR_OK;
 8017e5a:	2300      	movs	r3, #0
 8017e5c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8017e5e:	7bfb      	ldrb	r3, [r7, #15]
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	d102      	bne.n	8017e6a <validate+0x5a>
 8017e64:	687b      	ldr	r3, [r7, #4]
 8017e66:	681b      	ldr	r3, [r3, #0]
 8017e68:	e000      	b.n	8017e6c <validate+0x5c>
 8017e6a:	2300      	movs	r3, #0
 8017e6c:	683a      	ldr	r2, [r7, #0]
 8017e6e:	6013      	str	r3, [r2, #0]
	return res;
 8017e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8017e72:	4618      	mov	r0, r3
 8017e74:	3710      	adds	r7, #16
 8017e76:	46bd      	mov	sp, r7
 8017e78:	bd80      	pop	{r7, pc}
	...

08017e7c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8017e7c:	b580      	push	{r7, lr}
 8017e7e:	b088      	sub	sp, #32
 8017e80:	af00      	add	r7, sp, #0
 8017e82:	60f8      	str	r0, [r7, #12]
 8017e84:	60b9      	str	r1, [r7, #8]
 8017e86:	4613      	mov	r3, r2
 8017e88:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8017e8a:	68bb      	ldr	r3, [r7, #8]
 8017e8c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8017e8e:	f107 0310 	add.w	r3, r7, #16
 8017e92:	4618      	mov	r0, r3
 8017e94:	f7ff fcd5 	bl	8017842 <get_ldnumber>
 8017e98:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8017e9a:	69fb      	ldr	r3, [r7, #28]
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	da01      	bge.n	8017ea4 <f_mount+0x28>
 8017ea0:	230b      	movs	r3, #11
 8017ea2:	e02b      	b.n	8017efc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8017ea4:	4a17      	ldr	r2, [pc, #92]	; (8017f04 <f_mount+0x88>)
 8017ea6:	69fb      	ldr	r3, [r7, #28]
 8017ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017eac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8017eae:	69bb      	ldr	r3, [r7, #24]
 8017eb0:	2b00      	cmp	r3, #0
 8017eb2:	d005      	beq.n	8017ec0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8017eb4:	69b8      	ldr	r0, [r7, #24]
 8017eb6:	f7fe fd91 	bl	80169dc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8017eba:	69bb      	ldr	r3, [r7, #24]
 8017ebc:	2200      	movs	r2, #0
 8017ebe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8017ec0:	68fb      	ldr	r3, [r7, #12]
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	d002      	beq.n	8017ecc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8017ec6:	68fb      	ldr	r3, [r7, #12]
 8017ec8:	2200      	movs	r2, #0
 8017eca:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8017ecc:	68fa      	ldr	r2, [r7, #12]
 8017ece:	490d      	ldr	r1, [pc, #52]	; (8017f04 <f_mount+0x88>)
 8017ed0:	69fb      	ldr	r3, [r7, #28]
 8017ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8017ed6:	68fb      	ldr	r3, [r7, #12]
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	d002      	beq.n	8017ee2 <f_mount+0x66>
 8017edc:	79fb      	ldrb	r3, [r7, #7]
 8017ede:	2b01      	cmp	r3, #1
 8017ee0:	d001      	beq.n	8017ee6 <f_mount+0x6a>
 8017ee2:	2300      	movs	r3, #0
 8017ee4:	e00a      	b.n	8017efc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8017ee6:	f107 010c 	add.w	r1, r7, #12
 8017eea:	f107 0308 	add.w	r3, r7, #8
 8017eee:	2200      	movs	r2, #0
 8017ef0:	4618      	mov	r0, r3
 8017ef2:	f7ff fd41 	bl	8017978 <find_volume>
 8017ef6:	4603      	mov	r3, r0
 8017ef8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8017efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8017efc:	4618      	mov	r0, r3
 8017efe:	3720      	adds	r7, #32
 8017f00:	46bd      	mov	sp, r7
 8017f02:	bd80      	pop	{r7, pc}
 8017f04:	24000b5c 	.word	0x24000b5c

08017f08 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8017f08:	b580      	push	{r7, lr}
 8017f0a:	b098      	sub	sp, #96	; 0x60
 8017f0c:	af00      	add	r7, sp, #0
 8017f0e:	60f8      	str	r0, [r7, #12]
 8017f10:	60b9      	str	r1, [r7, #8]
 8017f12:	4613      	mov	r3, r2
 8017f14:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8017f16:	68fb      	ldr	r3, [r7, #12]
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d101      	bne.n	8017f20 <f_open+0x18>
 8017f1c:	2309      	movs	r3, #9
 8017f1e:	e1ad      	b.n	801827c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8017f20:	79fb      	ldrb	r3, [r7, #7]
 8017f22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017f26:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8017f28:	79fa      	ldrb	r2, [r7, #7]
 8017f2a:	f107 0110 	add.w	r1, r7, #16
 8017f2e:	f107 0308 	add.w	r3, r7, #8
 8017f32:	4618      	mov	r0, r3
 8017f34:	f7ff fd20 	bl	8017978 <find_volume>
 8017f38:	4603      	mov	r3, r0
 8017f3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8017f3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017f42:	2b00      	cmp	r3, #0
 8017f44:	f040 8191 	bne.w	801826a <f_open+0x362>
		dj.obj.fs = fs;
 8017f48:	693b      	ldr	r3, [r7, #16]
 8017f4a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8017f4c:	68ba      	ldr	r2, [r7, #8]
 8017f4e:	f107 0314 	add.w	r3, r7, #20
 8017f52:	4611      	mov	r1, r2
 8017f54:	4618      	mov	r0, r3
 8017f56:	f7ff fc03 	bl	8017760 <follow_path>
 8017f5a:	4603      	mov	r3, r0
 8017f5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8017f60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d11a      	bne.n	8017f9e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8017f68:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017f6c:	b25b      	sxtb	r3, r3
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	da03      	bge.n	8017f7a <f_open+0x72>
				res = FR_INVALID_NAME;
 8017f72:	2306      	movs	r3, #6
 8017f74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8017f78:	e011      	b.n	8017f9e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8017f7a:	79fb      	ldrb	r3, [r7, #7]
 8017f7c:	f023 0301 	bic.w	r3, r3, #1
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	bf14      	ite	ne
 8017f84:	2301      	movne	r3, #1
 8017f86:	2300      	moveq	r3, #0
 8017f88:	b2db      	uxtb	r3, r3
 8017f8a:	461a      	mov	r2, r3
 8017f8c:	f107 0314 	add.w	r3, r7, #20
 8017f90:	4611      	mov	r1, r2
 8017f92:	4618      	mov	r0, r3
 8017f94:	f7fe fbda 	bl	801674c <chk_lock>
 8017f98:	4603      	mov	r3, r0
 8017f9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8017f9e:	79fb      	ldrb	r3, [r7, #7]
 8017fa0:	f003 031c 	and.w	r3, r3, #28
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	d07f      	beq.n	80180a8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8017fa8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017fac:	2b00      	cmp	r3, #0
 8017fae:	d017      	beq.n	8017fe0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8017fb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017fb4:	2b04      	cmp	r3, #4
 8017fb6:	d10e      	bne.n	8017fd6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8017fb8:	f7fe fc24 	bl	8016804 <enq_lock>
 8017fbc:	4603      	mov	r3, r0
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	d006      	beq.n	8017fd0 <f_open+0xc8>
 8017fc2:	f107 0314 	add.w	r3, r7, #20
 8017fc6:	4618      	mov	r0, r3
 8017fc8:	f7ff fb03 	bl	80175d2 <dir_register>
 8017fcc:	4603      	mov	r3, r0
 8017fce:	e000      	b.n	8017fd2 <f_open+0xca>
 8017fd0:	2312      	movs	r3, #18
 8017fd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8017fd6:	79fb      	ldrb	r3, [r7, #7]
 8017fd8:	f043 0308 	orr.w	r3, r3, #8
 8017fdc:	71fb      	strb	r3, [r7, #7]
 8017fde:	e010      	b.n	8018002 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8017fe0:	7ebb      	ldrb	r3, [r7, #26]
 8017fe2:	f003 0311 	and.w	r3, r3, #17
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	d003      	beq.n	8017ff2 <f_open+0xea>
					res = FR_DENIED;
 8017fea:	2307      	movs	r3, #7
 8017fec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8017ff0:	e007      	b.n	8018002 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8017ff2:	79fb      	ldrb	r3, [r7, #7]
 8017ff4:	f003 0304 	and.w	r3, r3, #4
 8017ff8:	2b00      	cmp	r3, #0
 8017ffa:	d002      	beq.n	8018002 <f_open+0xfa>
 8017ffc:	2308      	movs	r3, #8
 8017ffe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8018002:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018006:	2b00      	cmp	r3, #0
 8018008:	d168      	bne.n	80180dc <f_open+0x1d4>
 801800a:	79fb      	ldrb	r3, [r7, #7]
 801800c:	f003 0308 	and.w	r3, r3, #8
 8018010:	2b00      	cmp	r3, #0
 8018012:	d063      	beq.n	80180dc <f_open+0x1d4>
				dw = GET_FATTIME();
 8018014:	f7fb f8fe 	bl	8013214 <get_fattime>
 8018018:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801801a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801801c:	330e      	adds	r3, #14
 801801e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018020:	4618      	mov	r0, r3
 8018022:	f7fe fae9 	bl	80165f8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8018026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018028:	3316      	adds	r3, #22
 801802a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801802c:	4618      	mov	r0, r3
 801802e:	f7fe fae3 	bl	80165f8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8018032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018034:	330b      	adds	r3, #11
 8018036:	2220      	movs	r2, #32
 8018038:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801803a:	693b      	ldr	r3, [r7, #16]
 801803c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801803e:	4611      	mov	r1, r2
 8018040:	4618      	mov	r0, r3
 8018042:	f7ff fa32 	bl	80174aa <ld_clust>
 8018046:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8018048:	693b      	ldr	r3, [r7, #16]
 801804a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801804c:	2200      	movs	r2, #0
 801804e:	4618      	mov	r0, r3
 8018050:	f7ff fa4a 	bl	80174e8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8018054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018056:	331c      	adds	r3, #28
 8018058:	2100      	movs	r1, #0
 801805a:	4618      	mov	r0, r3
 801805c:	f7fe facc 	bl	80165f8 <st_dword>
					fs->wflag = 1;
 8018060:	693b      	ldr	r3, [r7, #16]
 8018062:	2201      	movs	r2, #1
 8018064:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8018066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018068:	2b00      	cmp	r3, #0
 801806a:	d037      	beq.n	80180dc <f_open+0x1d4>
						dw = fs->winsect;
 801806c:	693b      	ldr	r3, [r7, #16]
 801806e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018070:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8018072:	f107 0314 	add.w	r3, r7, #20
 8018076:	2200      	movs	r2, #0
 8018078:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801807a:	4618      	mov	r0, r3
 801807c:	f7fe ff5d 	bl	8016f3a <remove_chain>
 8018080:	4603      	mov	r3, r0
 8018082:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8018086:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801808a:	2b00      	cmp	r3, #0
 801808c:	d126      	bne.n	80180dc <f_open+0x1d4>
							res = move_window(fs, dw);
 801808e:	693b      	ldr	r3, [r7, #16]
 8018090:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018092:	4618      	mov	r0, r3
 8018094:	f7fe fd0a 	bl	8016aac <move_window>
 8018098:	4603      	mov	r3, r0
 801809a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801809e:	693b      	ldr	r3, [r7, #16]
 80180a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80180a2:	3a01      	subs	r2, #1
 80180a4:	60da      	str	r2, [r3, #12]
 80180a6:	e019      	b.n	80180dc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80180a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	d115      	bne.n	80180dc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80180b0:	7ebb      	ldrb	r3, [r7, #26]
 80180b2:	f003 0310 	and.w	r3, r3, #16
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	d003      	beq.n	80180c2 <f_open+0x1ba>
					res = FR_NO_FILE;
 80180ba:	2304      	movs	r3, #4
 80180bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80180c0:	e00c      	b.n	80180dc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80180c2:	79fb      	ldrb	r3, [r7, #7]
 80180c4:	f003 0302 	and.w	r3, r3, #2
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	d007      	beq.n	80180dc <f_open+0x1d4>
 80180cc:	7ebb      	ldrb	r3, [r7, #26]
 80180ce:	f003 0301 	and.w	r3, r3, #1
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	d002      	beq.n	80180dc <f_open+0x1d4>
						res = FR_DENIED;
 80180d6:	2307      	movs	r3, #7
 80180d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80180dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	d128      	bne.n	8018136 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80180e4:	79fb      	ldrb	r3, [r7, #7]
 80180e6:	f003 0308 	and.w	r3, r3, #8
 80180ea:	2b00      	cmp	r3, #0
 80180ec:	d003      	beq.n	80180f6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80180ee:	79fb      	ldrb	r3, [r7, #7]
 80180f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80180f4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80180f6:	693b      	ldr	r3, [r7, #16]
 80180f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80180fa:	68fb      	ldr	r3, [r7, #12]
 80180fc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80180fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018100:	68fb      	ldr	r3, [r7, #12]
 8018102:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8018104:	79fb      	ldrb	r3, [r7, #7]
 8018106:	f023 0301 	bic.w	r3, r3, #1
 801810a:	2b00      	cmp	r3, #0
 801810c:	bf14      	ite	ne
 801810e:	2301      	movne	r3, #1
 8018110:	2300      	moveq	r3, #0
 8018112:	b2db      	uxtb	r3, r3
 8018114:	461a      	mov	r2, r3
 8018116:	f107 0314 	add.w	r3, r7, #20
 801811a:	4611      	mov	r1, r2
 801811c:	4618      	mov	r0, r3
 801811e:	f7fe fb93 	bl	8016848 <inc_lock>
 8018122:	4602      	mov	r2, r0
 8018124:	68fb      	ldr	r3, [r7, #12]
 8018126:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8018128:	68fb      	ldr	r3, [r7, #12]
 801812a:	691b      	ldr	r3, [r3, #16]
 801812c:	2b00      	cmp	r3, #0
 801812e:	d102      	bne.n	8018136 <f_open+0x22e>
 8018130:	2302      	movs	r3, #2
 8018132:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8018136:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801813a:	2b00      	cmp	r3, #0
 801813c:	f040 8095 	bne.w	801826a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8018140:	693b      	ldr	r3, [r7, #16]
 8018142:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018144:	4611      	mov	r1, r2
 8018146:	4618      	mov	r0, r3
 8018148:	f7ff f9af 	bl	80174aa <ld_clust>
 801814c:	4602      	mov	r2, r0
 801814e:	68fb      	ldr	r3, [r7, #12]
 8018150:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8018152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018154:	331c      	adds	r3, #28
 8018156:	4618      	mov	r0, r3
 8018158:	f7fe fa10 	bl	801657c <ld_dword>
 801815c:	4602      	mov	r2, r0
 801815e:	68fb      	ldr	r3, [r7, #12]
 8018160:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8018162:	68fb      	ldr	r3, [r7, #12]
 8018164:	2200      	movs	r2, #0
 8018166:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8018168:	693a      	ldr	r2, [r7, #16]
 801816a:	68fb      	ldr	r3, [r7, #12]
 801816c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801816e:	693b      	ldr	r3, [r7, #16]
 8018170:	88da      	ldrh	r2, [r3, #6]
 8018172:	68fb      	ldr	r3, [r7, #12]
 8018174:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8018176:	68fb      	ldr	r3, [r7, #12]
 8018178:	79fa      	ldrb	r2, [r7, #7]
 801817a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801817c:	68fb      	ldr	r3, [r7, #12]
 801817e:	2200      	movs	r2, #0
 8018180:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8018182:	68fb      	ldr	r3, [r7, #12]
 8018184:	2200      	movs	r2, #0
 8018186:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8018188:	68fb      	ldr	r3, [r7, #12]
 801818a:	2200      	movs	r2, #0
 801818c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801818e:	68fb      	ldr	r3, [r7, #12]
 8018190:	3330      	adds	r3, #48	; 0x30
 8018192:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018196:	2100      	movs	r1, #0
 8018198:	4618      	mov	r0, r3
 801819a:	f7fe fa7a 	bl	8016692 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801819e:	79fb      	ldrb	r3, [r7, #7]
 80181a0:	f003 0320 	and.w	r3, r3, #32
 80181a4:	2b00      	cmp	r3, #0
 80181a6:	d060      	beq.n	801826a <f_open+0x362>
 80181a8:	68fb      	ldr	r3, [r7, #12]
 80181aa:	68db      	ldr	r3, [r3, #12]
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d05c      	beq.n	801826a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80181b0:	68fb      	ldr	r3, [r7, #12]
 80181b2:	68da      	ldr	r2, [r3, #12]
 80181b4:	68fb      	ldr	r3, [r7, #12]
 80181b6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80181b8:	693b      	ldr	r3, [r7, #16]
 80181ba:	895b      	ldrh	r3, [r3, #10]
 80181bc:	025b      	lsls	r3, r3, #9
 80181be:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80181c0:	68fb      	ldr	r3, [r7, #12]
 80181c2:	689b      	ldr	r3, [r3, #8]
 80181c4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80181c6:	68fb      	ldr	r3, [r7, #12]
 80181c8:	68db      	ldr	r3, [r3, #12]
 80181ca:	657b      	str	r3, [r7, #84]	; 0x54
 80181cc:	e016      	b.n	80181fc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80181ce:	68fb      	ldr	r3, [r7, #12]
 80181d0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80181d2:	4618      	mov	r0, r3
 80181d4:	f7fe fd25 	bl	8016c22 <get_fat>
 80181d8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80181da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80181dc:	2b01      	cmp	r3, #1
 80181de:	d802      	bhi.n	80181e6 <f_open+0x2de>
 80181e0:	2302      	movs	r3, #2
 80181e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80181e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80181e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80181ec:	d102      	bne.n	80181f4 <f_open+0x2ec>
 80181ee:	2301      	movs	r3, #1
 80181f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80181f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80181f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80181f8:	1ad3      	subs	r3, r2, r3
 80181fa:	657b      	str	r3, [r7, #84]	; 0x54
 80181fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018200:	2b00      	cmp	r3, #0
 8018202:	d103      	bne.n	801820c <f_open+0x304>
 8018204:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018208:	429a      	cmp	r2, r3
 801820a:	d8e0      	bhi.n	80181ce <f_open+0x2c6>
				}
				fp->clust = clst;
 801820c:	68fb      	ldr	r3, [r7, #12]
 801820e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8018210:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8018212:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018216:	2b00      	cmp	r3, #0
 8018218:	d127      	bne.n	801826a <f_open+0x362>
 801821a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801821c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018220:	2b00      	cmp	r3, #0
 8018222:	d022      	beq.n	801826a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8018224:	693b      	ldr	r3, [r7, #16]
 8018226:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8018228:	4618      	mov	r0, r3
 801822a:	f7fe fcdb 	bl	8016be4 <clust2sect>
 801822e:	6478      	str	r0, [r7, #68]	; 0x44
 8018230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018232:	2b00      	cmp	r3, #0
 8018234:	d103      	bne.n	801823e <f_open+0x336>
						res = FR_INT_ERR;
 8018236:	2302      	movs	r3, #2
 8018238:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801823c:	e015      	b.n	801826a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801823e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018240:	0a5a      	lsrs	r2, r3, #9
 8018242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018244:	441a      	add	r2, r3
 8018246:	68fb      	ldr	r3, [r7, #12]
 8018248:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801824a:	693b      	ldr	r3, [r7, #16]
 801824c:	7858      	ldrb	r0, [r3, #1]
 801824e:	68fb      	ldr	r3, [r7, #12]
 8018250:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018254:	68fb      	ldr	r3, [r7, #12]
 8018256:	6a1a      	ldr	r2, [r3, #32]
 8018258:	2301      	movs	r3, #1
 801825a:	f7fe f919 	bl	8016490 <disk_read>
 801825e:	4603      	mov	r3, r0
 8018260:	2b00      	cmp	r3, #0
 8018262:	d002      	beq.n	801826a <f_open+0x362>
 8018264:	2301      	movs	r3, #1
 8018266:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801826a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801826e:	2b00      	cmp	r3, #0
 8018270:	d002      	beq.n	8018278 <f_open+0x370>
 8018272:	68fb      	ldr	r3, [r7, #12]
 8018274:	2200      	movs	r2, #0
 8018276:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8018278:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 801827c:	4618      	mov	r0, r3
 801827e:	3760      	adds	r7, #96	; 0x60
 8018280:	46bd      	mov	sp, r7
 8018282:	bd80      	pop	{r7, pc}

08018284 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8018284:	b580      	push	{r7, lr}
 8018286:	b08e      	sub	sp, #56	; 0x38
 8018288:	af00      	add	r7, sp, #0
 801828a:	60f8      	str	r0, [r7, #12]
 801828c:	60b9      	str	r1, [r7, #8]
 801828e:	607a      	str	r2, [r7, #4]
 8018290:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8018292:	68bb      	ldr	r3, [r7, #8]
 8018294:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8018296:	683b      	ldr	r3, [r7, #0]
 8018298:	2200      	movs	r2, #0
 801829a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801829c:	68fb      	ldr	r3, [r7, #12]
 801829e:	f107 0214 	add.w	r2, r7, #20
 80182a2:	4611      	mov	r1, r2
 80182a4:	4618      	mov	r0, r3
 80182a6:	f7ff fdb3 	bl	8017e10 <validate>
 80182aa:	4603      	mov	r3, r0
 80182ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80182b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80182b4:	2b00      	cmp	r3, #0
 80182b6:	d107      	bne.n	80182c8 <f_read+0x44>
 80182b8:	68fb      	ldr	r3, [r7, #12]
 80182ba:	7d5b      	ldrb	r3, [r3, #21]
 80182bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80182c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	d002      	beq.n	80182ce <f_read+0x4a>
 80182c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80182cc:	e115      	b.n	80184fa <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80182ce:	68fb      	ldr	r3, [r7, #12]
 80182d0:	7d1b      	ldrb	r3, [r3, #20]
 80182d2:	f003 0301 	and.w	r3, r3, #1
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	d101      	bne.n	80182de <f_read+0x5a>
 80182da:	2307      	movs	r3, #7
 80182dc:	e10d      	b.n	80184fa <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80182de:	68fb      	ldr	r3, [r7, #12]
 80182e0:	68da      	ldr	r2, [r3, #12]
 80182e2:	68fb      	ldr	r3, [r7, #12]
 80182e4:	699b      	ldr	r3, [r3, #24]
 80182e6:	1ad3      	subs	r3, r2, r3
 80182e8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80182ea:	687a      	ldr	r2, [r7, #4]
 80182ec:	6a3b      	ldr	r3, [r7, #32]
 80182ee:	429a      	cmp	r2, r3
 80182f0:	f240 80fe 	bls.w	80184f0 <f_read+0x26c>
 80182f4:	6a3b      	ldr	r3, [r7, #32]
 80182f6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80182f8:	e0fa      	b.n	80184f0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80182fa:	68fb      	ldr	r3, [r7, #12]
 80182fc:	699b      	ldr	r3, [r3, #24]
 80182fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018302:	2b00      	cmp	r3, #0
 8018304:	f040 80c6 	bne.w	8018494 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8018308:	68fb      	ldr	r3, [r7, #12]
 801830a:	699b      	ldr	r3, [r3, #24]
 801830c:	0a5b      	lsrs	r3, r3, #9
 801830e:	697a      	ldr	r2, [r7, #20]
 8018310:	8952      	ldrh	r2, [r2, #10]
 8018312:	3a01      	subs	r2, #1
 8018314:	4013      	ands	r3, r2
 8018316:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8018318:	69fb      	ldr	r3, [r7, #28]
 801831a:	2b00      	cmp	r3, #0
 801831c:	d12f      	bne.n	801837e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801831e:	68fb      	ldr	r3, [r7, #12]
 8018320:	699b      	ldr	r3, [r3, #24]
 8018322:	2b00      	cmp	r3, #0
 8018324:	d103      	bne.n	801832e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8018326:	68fb      	ldr	r3, [r7, #12]
 8018328:	689b      	ldr	r3, [r3, #8]
 801832a:	633b      	str	r3, [r7, #48]	; 0x30
 801832c:	e013      	b.n	8018356 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801832e:	68fb      	ldr	r3, [r7, #12]
 8018330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018332:	2b00      	cmp	r3, #0
 8018334:	d007      	beq.n	8018346 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8018336:	68fb      	ldr	r3, [r7, #12]
 8018338:	699b      	ldr	r3, [r3, #24]
 801833a:	4619      	mov	r1, r3
 801833c:	68f8      	ldr	r0, [r7, #12]
 801833e:	f7fe fef9 	bl	8017134 <clmt_clust>
 8018342:	6338      	str	r0, [r7, #48]	; 0x30
 8018344:	e007      	b.n	8018356 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8018346:	68fa      	ldr	r2, [r7, #12]
 8018348:	68fb      	ldr	r3, [r7, #12]
 801834a:	69db      	ldr	r3, [r3, #28]
 801834c:	4619      	mov	r1, r3
 801834e:	4610      	mov	r0, r2
 8018350:	f7fe fc67 	bl	8016c22 <get_fat>
 8018354:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8018356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018358:	2b01      	cmp	r3, #1
 801835a:	d804      	bhi.n	8018366 <f_read+0xe2>
 801835c:	68fb      	ldr	r3, [r7, #12]
 801835e:	2202      	movs	r2, #2
 8018360:	755a      	strb	r2, [r3, #21]
 8018362:	2302      	movs	r3, #2
 8018364:	e0c9      	b.n	80184fa <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8018366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018368:	f1b3 3fff 	cmp.w	r3, #4294967295
 801836c:	d104      	bne.n	8018378 <f_read+0xf4>
 801836e:	68fb      	ldr	r3, [r7, #12]
 8018370:	2201      	movs	r2, #1
 8018372:	755a      	strb	r2, [r3, #21]
 8018374:	2301      	movs	r3, #1
 8018376:	e0c0      	b.n	80184fa <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8018378:	68fb      	ldr	r3, [r7, #12]
 801837a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801837c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801837e:	697a      	ldr	r2, [r7, #20]
 8018380:	68fb      	ldr	r3, [r7, #12]
 8018382:	69db      	ldr	r3, [r3, #28]
 8018384:	4619      	mov	r1, r3
 8018386:	4610      	mov	r0, r2
 8018388:	f7fe fc2c 	bl	8016be4 <clust2sect>
 801838c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801838e:	69bb      	ldr	r3, [r7, #24]
 8018390:	2b00      	cmp	r3, #0
 8018392:	d104      	bne.n	801839e <f_read+0x11a>
 8018394:	68fb      	ldr	r3, [r7, #12]
 8018396:	2202      	movs	r2, #2
 8018398:	755a      	strb	r2, [r3, #21]
 801839a:	2302      	movs	r3, #2
 801839c:	e0ad      	b.n	80184fa <f_read+0x276>
			sect += csect;
 801839e:	69ba      	ldr	r2, [r7, #24]
 80183a0:	69fb      	ldr	r3, [r7, #28]
 80183a2:	4413      	add	r3, r2
 80183a4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	0a5b      	lsrs	r3, r3, #9
 80183aa:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80183ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	d039      	beq.n	8018426 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80183b2:	69fa      	ldr	r2, [r7, #28]
 80183b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183b6:	4413      	add	r3, r2
 80183b8:	697a      	ldr	r2, [r7, #20]
 80183ba:	8952      	ldrh	r2, [r2, #10]
 80183bc:	4293      	cmp	r3, r2
 80183be:	d905      	bls.n	80183cc <f_read+0x148>
					cc = fs->csize - csect;
 80183c0:	697b      	ldr	r3, [r7, #20]
 80183c2:	895b      	ldrh	r3, [r3, #10]
 80183c4:	461a      	mov	r2, r3
 80183c6:	69fb      	ldr	r3, [r7, #28]
 80183c8:	1ad3      	subs	r3, r2, r3
 80183ca:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80183cc:	697b      	ldr	r3, [r7, #20]
 80183ce:	7858      	ldrb	r0, [r3, #1]
 80183d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183d2:	69ba      	ldr	r2, [r7, #24]
 80183d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80183d6:	f7fe f85b 	bl	8016490 <disk_read>
 80183da:	4603      	mov	r3, r0
 80183dc:	2b00      	cmp	r3, #0
 80183de:	d004      	beq.n	80183ea <f_read+0x166>
 80183e0:	68fb      	ldr	r3, [r7, #12]
 80183e2:	2201      	movs	r2, #1
 80183e4:	755a      	strb	r2, [r3, #21]
 80183e6:	2301      	movs	r3, #1
 80183e8:	e087      	b.n	80184fa <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80183ea:	68fb      	ldr	r3, [r7, #12]
 80183ec:	7d1b      	ldrb	r3, [r3, #20]
 80183ee:	b25b      	sxtb	r3, r3
 80183f0:	2b00      	cmp	r3, #0
 80183f2:	da14      	bge.n	801841e <f_read+0x19a>
 80183f4:	68fb      	ldr	r3, [r7, #12]
 80183f6:	6a1a      	ldr	r2, [r3, #32]
 80183f8:	69bb      	ldr	r3, [r7, #24]
 80183fa:	1ad3      	subs	r3, r2, r3
 80183fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80183fe:	429a      	cmp	r2, r3
 8018400:	d90d      	bls.n	801841e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8018402:	68fb      	ldr	r3, [r7, #12]
 8018404:	6a1a      	ldr	r2, [r3, #32]
 8018406:	69bb      	ldr	r3, [r7, #24]
 8018408:	1ad3      	subs	r3, r2, r3
 801840a:	025b      	lsls	r3, r3, #9
 801840c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801840e:	18d0      	adds	r0, r2, r3
 8018410:	68fb      	ldr	r3, [r7, #12]
 8018412:	3330      	adds	r3, #48	; 0x30
 8018414:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018418:	4619      	mov	r1, r3
 801841a:	f7fe f919 	bl	8016650 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801841e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018420:	025b      	lsls	r3, r3, #9
 8018422:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8018424:	e050      	b.n	80184c8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8018426:	68fb      	ldr	r3, [r7, #12]
 8018428:	6a1b      	ldr	r3, [r3, #32]
 801842a:	69ba      	ldr	r2, [r7, #24]
 801842c:	429a      	cmp	r2, r3
 801842e:	d02e      	beq.n	801848e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8018430:	68fb      	ldr	r3, [r7, #12]
 8018432:	7d1b      	ldrb	r3, [r3, #20]
 8018434:	b25b      	sxtb	r3, r3
 8018436:	2b00      	cmp	r3, #0
 8018438:	da18      	bge.n	801846c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801843a:	697b      	ldr	r3, [r7, #20]
 801843c:	7858      	ldrb	r0, [r3, #1]
 801843e:	68fb      	ldr	r3, [r7, #12]
 8018440:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018444:	68fb      	ldr	r3, [r7, #12]
 8018446:	6a1a      	ldr	r2, [r3, #32]
 8018448:	2301      	movs	r3, #1
 801844a:	f7fe f841 	bl	80164d0 <disk_write>
 801844e:	4603      	mov	r3, r0
 8018450:	2b00      	cmp	r3, #0
 8018452:	d004      	beq.n	801845e <f_read+0x1da>
 8018454:	68fb      	ldr	r3, [r7, #12]
 8018456:	2201      	movs	r2, #1
 8018458:	755a      	strb	r2, [r3, #21]
 801845a:	2301      	movs	r3, #1
 801845c:	e04d      	b.n	80184fa <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 801845e:	68fb      	ldr	r3, [r7, #12]
 8018460:	7d1b      	ldrb	r3, [r3, #20]
 8018462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018466:	b2da      	uxtb	r2, r3
 8018468:	68fb      	ldr	r3, [r7, #12]
 801846a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801846c:	697b      	ldr	r3, [r7, #20]
 801846e:	7858      	ldrb	r0, [r3, #1]
 8018470:	68fb      	ldr	r3, [r7, #12]
 8018472:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018476:	2301      	movs	r3, #1
 8018478:	69ba      	ldr	r2, [r7, #24]
 801847a:	f7fe f809 	bl	8016490 <disk_read>
 801847e:	4603      	mov	r3, r0
 8018480:	2b00      	cmp	r3, #0
 8018482:	d004      	beq.n	801848e <f_read+0x20a>
 8018484:	68fb      	ldr	r3, [r7, #12]
 8018486:	2201      	movs	r2, #1
 8018488:	755a      	strb	r2, [r3, #21]
 801848a:	2301      	movs	r3, #1
 801848c:	e035      	b.n	80184fa <f_read+0x276>
			}
#endif
			fp->sect = sect;
 801848e:	68fb      	ldr	r3, [r7, #12]
 8018490:	69ba      	ldr	r2, [r7, #24]
 8018492:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8018494:	68fb      	ldr	r3, [r7, #12]
 8018496:	699b      	ldr	r3, [r3, #24]
 8018498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801849c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80184a0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80184a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	429a      	cmp	r2, r3
 80184a8:	d901      	bls.n	80184ae <f_read+0x22a>
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80184ae:	68fb      	ldr	r3, [r7, #12]
 80184b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80184b4:	68fb      	ldr	r3, [r7, #12]
 80184b6:	699b      	ldr	r3, [r3, #24]
 80184b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80184bc:	4413      	add	r3, r2
 80184be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80184c0:	4619      	mov	r1, r3
 80184c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80184c4:	f7fe f8c4 	bl	8016650 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80184c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80184ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184cc:	4413      	add	r3, r2
 80184ce:	627b      	str	r3, [r7, #36]	; 0x24
 80184d0:	68fb      	ldr	r3, [r7, #12]
 80184d2:	699a      	ldr	r2, [r3, #24]
 80184d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184d6:	441a      	add	r2, r3
 80184d8:	68fb      	ldr	r3, [r7, #12]
 80184da:	619a      	str	r2, [r3, #24]
 80184dc:	683b      	ldr	r3, [r7, #0]
 80184de:	681a      	ldr	r2, [r3, #0]
 80184e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184e2:	441a      	add	r2, r3
 80184e4:	683b      	ldr	r3, [r7, #0]
 80184e6:	601a      	str	r2, [r3, #0]
 80184e8:	687a      	ldr	r2, [r7, #4]
 80184ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184ec:	1ad3      	subs	r3, r2, r3
 80184ee:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	f47f af01 	bne.w	80182fa <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80184f8:	2300      	movs	r3, #0
}
 80184fa:	4618      	mov	r0, r3
 80184fc:	3738      	adds	r7, #56	; 0x38
 80184fe:	46bd      	mov	sp, r7
 8018500:	bd80      	pop	{r7, pc}

08018502 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8018502:	b580      	push	{r7, lr}
 8018504:	b08c      	sub	sp, #48	; 0x30
 8018506:	af00      	add	r7, sp, #0
 8018508:	60f8      	str	r0, [r7, #12]
 801850a:	60b9      	str	r1, [r7, #8]
 801850c:	607a      	str	r2, [r7, #4]
 801850e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8018510:	68bb      	ldr	r3, [r7, #8]
 8018512:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8018514:	683b      	ldr	r3, [r7, #0]
 8018516:	2200      	movs	r2, #0
 8018518:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801851a:	68fb      	ldr	r3, [r7, #12]
 801851c:	f107 0210 	add.w	r2, r7, #16
 8018520:	4611      	mov	r1, r2
 8018522:	4618      	mov	r0, r3
 8018524:	f7ff fc74 	bl	8017e10 <validate>
 8018528:	4603      	mov	r3, r0
 801852a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801852e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018532:	2b00      	cmp	r3, #0
 8018534:	d107      	bne.n	8018546 <f_write+0x44>
 8018536:	68fb      	ldr	r3, [r7, #12]
 8018538:	7d5b      	ldrb	r3, [r3, #21]
 801853a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801853e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018542:	2b00      	cmp	r3, #0
 8018544:	d002      	beq.n	801854c <f_write+0x4a>
 8018546:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801854a:	e14b      	b.n	80187e4 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801854c:	68fb      	ldr	r3, [r7, #12]
 801854e:	7d1b      	ldrb	r3, [r3, #20]
 8018550:	f003 0302 	and.w	r3, r3, #2
 8018554:	2b00      	cmp	r3, #0
 8018556:	d101      	bne.n	801855c <f_write+0x5a>
 8018558:	2307      	movs	r3, #7
 801855a:	e143      	b.n	80187e4 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801855c:	68fb      	ldr	r3, [r7, #12]
 801855e:	699a      	ldr	r2, [r3, #24]
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	441a      	add	r2, r3
 8018564:	68fb      	ldr	r3, [r7, #12]
 8018566:	699b      	ldr	r3, [r3, #24]
 8018568:	429a      	cmp	r2, r3
 801856a:	f080 812d 	bcs.w	80187c8 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801856e:	68fb      	ldr	r3, [r7, #12]
 8018570:	699b      	ldr	r3, [r3, #24]
 8018572:	43db      	mvns	r3, r3
 8018574:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8018576:	e127      	b.n	80187c8 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8018578:	68fb      	ldr	r3, [r7, #12]
 801857a:	699b      	ldr	r3, [r3, #24]
 801857c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018580:	2b00      	cmp	r3, #0
 8018582:	f040 80e3 	bne.w	801874c <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8018586:	68fb      	ldr	r3, [r7, #12]
 8018588:	699b      	ldr	r3, [r3, #24]
 801858a:	0a5b      	lsrs	r3, r3, #9
 801858c:	693a      	ldr	r2, [r7, #16]
 801858e:	8952      	ldrh	r2, [r2, #10]
 8018590:	3a01      	subs	r2, #1
 8018592:	4013      	ands	r3, r2
 8018594:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8018596:	69bb      	ldr	r3, [r7, #24]
 8018598:	2b00      	cmp	r3, #0
 801859a:	d143      	bne.n	8018624 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801859c:	68fb      	ldr	r3, [r7, #12]
 801859e:	699b      	ldr	r3, [r3, #24]
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	d10c      	bne.n	80185be <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80185a4:	68fb      	ldr	r3, [r7, #12]
 80185a6:	689b      	ldr	r3, [r3, #8]
 80185a8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80185aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185ac:	2b00      	cmp	r3, #0
 80185ae:	d11a      	bne.n	80185e6 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80185b0:	68fb      	ldr	r3, [r7, #12]
 80185b2:	2100      	movs	r1, #0
 80185b4:	4618      	mov	r0, r3
 80185b6:	f7fe fd25 	bl	8017004 <create_chain>
 80185ba:	62b8      	str	r0, [r7, #40]	; 0x28
 80185bc:	e013      	b.n	80185e6 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80185be:	68fb      	ldr	r3, [r7, #12]
 80185c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	d007      	beq.n	80185d6 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80185c6:	68fb      	ldr	r3, [r7, #12]
 80185c8:	699b      	ldr	r3, [r3, #24]
 80185ca:	4619      	mov	r1, r3
 80185cc:	68f8      	ldr	r0, [r7, #12]
 80185ce:	f7fe fdb1 	bl	8017134 <clmt_clust>
 80185d2:	62b8      	str	r0, [r7, #40]	; 0x28
 80185d4:	e007      	b.n	80185e6 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80185d6:	68fa      	ldr	r2, [r7, #12]
 80185d8:	68fb      	ldr	r3, [r7, #12]
 80185da:	69db      	ldr	r3, [r3, #28]
 80185dc:	4619      	mov	r1, r3
 80185de:	4610      	mov	r0, r2
 80185e0:	f7fe fd10 	bl	8017004 <create_chain>
 80185e4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80185e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	f000 80f2 	beq.w	80187d2 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80185ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185f0:	2b01      	cmp	r3, #1
 80185f2:	d104      	bne.n	80185fe <f_write+0xfc>
 80185f4:	68fb      	ldr	r3, [r7, #12]
 80185f6:	2202      	movs	r2, #2
 80185f8:	755a      	strb	r2, [r3, #21]
 80185fa:	2302      	movs	r3, #2
 80185fc:	e0f2      	b.n	80187e4 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80185fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018604:	d104      	bne.n	8018610 <f_write+0x10e>
 8018606:	68fb      	ldr	r3, [r7, #12]
 8018608:	2201      	movs	r2, #1
 801860a:	755a      	strb	r2, [r3, #21]
 801860c:	2301      	movs	r3, #1
 801860e:	e0e9      	b.n	80187e4 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8018610:	68fb      	ldr	r3, [r7, #12]
 8018612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018614:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8018616:	68fb      	ldr	r3, [r7, #12]
 8018618:	689b      	ldr	r3, [r3, #8]
 801861a:	2b00      	cmp	r3, #0
 801861c:	d102      	bne.n	8018624 <f_write+0x122>
 801861e:	68fb      	ldr	r3, [r7, #12]
 8018620:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018622:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8018624:	68fb      	ldr	r3, [r7, #12]
 8018626:	7d1b      	ldrb	r3, [r3, #20]
 8018628:	b25b      	sxtb	r3, r3
 801862a:	2b00      	cmp	r3, #0
 801862c:	da18      	bge.n	8018660 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801862e:	693b      	ldr	r3, [r7, #16]
 8018630:	7858      	ldrb	r0, [r3, #1]
 8018632:	68fb      	ldr	r3, [r7, #12]
 8018634:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018638:	68fb      	ldr	r3, [r7, #12]
 801863a:	6a1a      	ldr	r2, [r3, #32]
 801863c:	2301      	movs	r3, #1
 801863e:	f7fd ff47 	bl	80164d0 <disk_write>
 8018642:	4603      	mov	r3, r0
 8018644:	2b00      	cmp	r3, #0
 8018646:	d004      	beq.n	8018652 <f_write+0x150>
 8018648:	68fb      	ldr	r3, [r7, #12]
 801864a:	2201      	movs	r2, #1
 801864c:	755a      	strb	r2, [r3, #21]
 801864e:	2301      	movs	r3, #1
 8018650:	e0c8      	b.n	80187e4 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8018652:	68fb      	ldr	r3, [r7, #12]
 8018654:	7d1b      	ldrb	r3, [r3, #20]
 8018656:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801865a:	b2da      	uxtb	r2, r3
 801865c:	68fb      	ldr	r3, [r7, #12]
 801865e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8018660:	693a      	ldr	r2, [r7, #16]
 8018662:	68fb      	ldr	r3, [r7, #12]
 8018664:	69db      	ldr	r3, [r3, #28]
 8018666:	4619      	mov	r1, r3
 8018668:	4610      	mov	r0, r2
 801866a:	f7fe fabb 	bl	8016be4 <clust2sect>
 801866e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8018670:	697b      	ldr	r3, [r7, #20]
 8018672:	2b00      	cmp	r3, #0
 8018674:	d104      	bne.n	8018680 <f_write+0x17e>
 8018676:	68fb      	ldr	r3, [r7, #12]
 8018678:	2202      	movs	r2, #2
 801867a:	755a      	strb	r2, [r3, #21]
 801867c:	2302      	movs	r3, #2
 801867e:	e0b1      	b.n	80187e4 <f_write+0x2e2>
			sect += csect;
 8018680:	697a      	ldr	r2, [r7, #20]
 8018682:	69bb      	ldr	r3, [r7, #24]
 8018684:	4413      	add	r3, r2
 8018686:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	0a5b      	lsrs	r3, r3, #9
 801868c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801868e:	6a3b      	ldr	r3, [r7, #32]
 8018690:	2b00      	cmp	r3, #0
 8018692:	d03c      	beq.n	801870e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8018694:	69ba      	ldr	r2, [r7, #24]
 8018696:	6a3b      	ldr	r3, [r7, #32]
 8018698:	4413      	add	r3, r2
 801869a:	693a      	ldr	r2, [r7, #16]
 801869c:	8952      	ldrh	r2, [r2, #10]
 801869e:	4293      	cmp	r3, r2
 80186a0:	d905      	bls.n	80186ae <f_write+0x1ac>
					cc = fs->csize - csect;
 80186a2:	693b      	ldr	r3, [r7, #16]
 80186a4:	895b      	ldrh	r3, [r3, #10]
 80186a6:	461a      	mov	r2, r3
 80186a8:	69bb      	ldr	r3, [r7, #24]
 80186aa:	1ad3      	subs	r3, r2, r3
 80186ac:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80186ae:	693b      	ldr	r3, [r7, #16]
 80186b0:	7858      	ldrb	r0, [r3, #1]
 80186b2:	6a3b      	ldr	r3, [r7, #32]
 80186b4:	697a      	ldr	r2, [r7, #20]
 80186b6:	69f9      	ldr	r1, [r7, #28]
 80186b8:	f7fd ff0a 	bl	80164d0 <disk_write>
 80186bc:	4603      	mov	r3, r0
 80186be:	2b00      	cmp	r3, #0
 80186c0:	d004      	beq.n	80186cc <f_write+0x1ca>
 80186c2:	68fb      	ldr	r3, [r7, #12]
 80186c4:	2201      	movs	r2, #1
 80186c6:	755a      	strb	r2, [r3, #21]
 80186c8:	2301      	movs	r3, #1
 80186ca:	e08b      	b.n	80187e4 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80186cc:	68fb      	ldr	r3, [r7, #12]
 80186ce:	6a1a      	ldr	r2, [r3, #32]
 80186d0:	697b      	ldr	r3, [r7, #20]
 80186d2:	1ad3      	subs	r3, r2, r3
 80186d4:	6a3a      	ldr	r2, [r7, #32]
 80186d6:	429a      	cmp	r2, r3
 80186d8:	d915      	bls.n	8018706 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80186da:	68fb      	ldr	r3, [r7, #12]
 80186dc:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80186e0:	68fb      	ldr	r3, [r7, #12]
 80186e2:	6a1a      	ldr	r2, [r3, #32]
 80186e4:	697b      	ldr	r3, [r7, #20]
 80186e6:	1ad3      	subs	r3, r2, r3
 80186e8:	025b      	lsls	r3, r3, #9
 80186ea:	69fa      	ldr	r2, [r7, #28]
 80186ec:	4413      	add	r3, r2
 80186ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80186f2:	4619      	mov	r1, r3
 80186f4:	f7fd ffac 	bl	8016650 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80186f8:	68fb      	ldr	r3, [r7, #12]
 80186fa:	7d1b      	ldrb	r3, [r3, #20]
 80186fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018700:	b2da      	uxtb	r2, r3
 8018702:	68fb      	ldr	r3, [r7, #12]
 8018704:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8018706:	6a3b      	ldr	r3, [r7, #32]
 8018708:	025b      	lsls	r3, r3, #9
 801870a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801870c:	e03f      	b.n	801878e <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801870e:	68fb      	ldr	r3, [r7, #12]
 8018710:	6a1b      	ldr	r3, [r3, #32]
 8018712:	697a      	ldr	r2, [r7, #20]
 8018714:	429a      	cmp	r2, r3
 8018716:	d016      	beq.n	8018746 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8018718:	68fb      	ldr	r3, [r7, #12]
 801871a:	699a      	ldr	r2, [r3, #24]
 801871c:	68fb      	ldr	r3, [r7, #12]
 801871e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8018720:	429a      	cmp	r2, r3
 8018722:	d210      	bcs.n	8018746 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8018724:	693b      	ldr	r3, [r7, #16]
 8018726:	7858      	ldrb	r0, [r3, #1]
 8018728:	68fb      	ldr	r3, [r7, #12]
 801872a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801872e:	2301      	movs	r3, #1
 8018730:	697a      	ldr	r2, [r7, #20]
 8018732:	f7fd fead 	bl	8016490 <disk_read>
 8018736:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8018738:	2b00      	cmp	r3, #0
 801873a:	d004      	beq.n	8018746 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 801873c:	68fb      	ldr	r3, [r7, #12]
 801873e:	2201      	movs	r2, #1
 8018740:	755a      	strb	r2, [r3, #21]
 8018742:	2301      	movs	r3, #1
 8018744:	e04e      	b.n	80187e4 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8018746:	68fb      	ldr	r3, [r7, #12]
 8018748:	697a      	ldr	r2, [r7, #20]
 801874a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801874c:	68fb      	ldr	r3, [r7, #12]
 801874e:	699b      	ldr	r3, [r3, #24]
 8018750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018754:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8018758:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801875a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	429a      	cmp	r2, r3
 8018760:	d901      	bls.n	8018766 <f_write+0x264>
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8018766:	68fb      	ldr	r3, [r7, #12]
 8018768:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801876c:	68fb      	ldr	r3, [r7, #12]
 801876e:	699b      	ldr	r3, [r3, #24]
 8018770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018774:	4413      	add	r3, r2
 8018776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018778:	69f9      	ldr	r1, [r7, #28]
 801877a:	4618      	mov	r0, r3
 801877c:	f7fd ff68 	bl	8016650 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8018780:	68fb      	ldr	r3, [r7, #12]
 8018782:	7d1b      	ldrb	r3, [r3, #20]
 8018784:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8018788:	b2da      	uxtb	r2, r3
 801878a:	68fb      	ldr	r3, [r7, #12]
 801878c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801878e:	69fa      	ldr	r2, [r7, #28]
 8018790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018792:	4413      	add	r3, r2
 8018794:	61fb      	str	r3, [r7, #28]
 8018796:	68fb      	ldr	r3, [r7, #12]
 8018798:	699a      	ldr	r2, [r3, #24]
 801879a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801879c:	441a      	add	r2, r3
 801879e:	68fb      	ldr	r3, [r7, #12]
 80187a0:	619a      	str	r2, [r3, #24]
 80187a2:	68fb      	ldr	r3, [r7, #12]
 80187a4:	68da      	ldr	r2, [r3, #12]
 80187a6:	68fb      	ldr	r3, [r7, #12]
 80187a8:	699b      	ldr	r3, [r3, #24]
 80187aa:	429a      	cmp	r2, r3
 80187ac:	bf38      	it	cc
 80187ae:	461a      	movcc	r2, r3
 80187b0:	68fb      	ldr	r3, [r7, #12]
 80187b2:	60da      	str	r2, [r3, #12]
 80187b4:	683b      	ldr	r3, [r7, #0]
 80187b6:	681a      	ldr	r2, [r3, #0]
 80187b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187ba:	441a      	add	r2, r3
 80187bc:	683b      	ldr	r3, [r7, #0]
 80187be:	601a      	str	r2, [r3, #0]
 80187c0:	687a      	ldr	r2, [r7, #4]
 80187c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187c4:	1ad3      	subs	r3, r2, r3
 80187c6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	f47f aed4 	bne.w	8018578 <f_write+0x76>
 80187d0:	e000      	b.n	80187d4 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80187d2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80187d4:	68fb      	ldr	r3, [r7, #12]
 80187d6:	7d1b      	ldrb	r3, [r3, #20]
 80187d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80187dc:	b2da      	uxtb	r2, r3
 80187de:	68fb      	ldr	r3, [r7, #12]
 80187e0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80187e2:	2300      	movs	r3, #0
}
 80187e4:	4618      	mov	r0, r3
 80187e6:	3730      	adds	r7, #48	; 0x30
 80187e8:	46bd      	mov	sp, r7
 80187ea:	bd80      	pop	{r7, pc}

080187ec <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80187ec:	b580      	push	{r7, lr}
 80187ee:	b086      	sub	sp, #24
 80187f0:	af00      	add	r7, sp, #0
 80187f2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	f107 0208 	add.w	r2, r7, #8
 80187fa:	4611      	mov	r1, r2
 80187fc:	4618      	mov	r0, r3
 80187fe:	f7ff fb07 	bl	8017e10 <validate>
 8018802:	4603      	mov	r3, r0
 8018804:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8018806:	7dfb      	ldrb	r3, [r7, #23]
 8018808:	2b00      	cmp	r3, #0
 801880a:	d168      	bne.n	80188de <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	7d1b      	ldrb	r3, [r3, #20]
 8018810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018814:	2b00      	cmp	r3, #0
 8018816:	d062      	beq.n	80188de <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	7d1b      	ldrb	r3, [r3, #20]
 801881c:	b25b      	sxtb	r3, r3
 801881e:	2b00      	cmp	r3, #0
 8018820:	da15      	bge.n	801884e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8018822:	68bb      	ldr	r3, [r7, #8]
 8018824:	7858      	ldrb	r0, [r3, #1]
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	6a1a      	ldr	r2, [r3, #32]
 8018830:	2301      	movs	r3, #1
 8018832:	f7fd fe4d 	bl	80164d0 <disk_write>
 8018836:	4603      	mov	r3, r0
 8018838:	2b00      	cmp	r3, #0
 801883a:	d001      	beq.n	8018840 <f_sync+0x54>
 801883c:	2301      	movs	r3, #1
 801883e:	e04f      	b.n	80188e0 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	7d1b      	ldrb	r3, [r3, #20]
 8018844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018848:	b2da      	uxtb	r2, r3
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801884e:	f7fa fce1 	bl	8013214 <get_fattime>
 8018852:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8018854:	68ba      	ldr	r2, [r7, #8]
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801885a:	4619      	mov	r1, r3
 801885c:	4610      	mov	r0, r2
 801885e:	f7fe f925 	bl	8016aac <move_window>
 8018862:	4603      	mov	r3, r0
 8018864:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8018866:	7dfb      	ldrb	r3, [r7, #23]
 8018868:	2b00      	cmp	r3, #0
 801886a:	d138      	bne.n	80188de <f_sync+0xf2>
					dir = fp->dir_ptr;
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018870:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8018872:	68fb      	ldr	r3, [r7, #12]
 8018874:	330b      	adds	r3, #11
 8018876:	781a      	ldrb	r2, [r3, #0]
 8018878:	68fb      	ldr	r3, [r7, #12]
 801887a:	330b      	adds	r3, #11
 801887c:	f042 0220 	orr.w	r2, r2, #32
 8018880:	b2d2      	uxtb	r2, r2
 8018882:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	6818      	ldr	r0, [r3, #0]
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	689b      	ldr	r3, [r3, #8]
 801888c:	461a      	mov	r2, r3
 801888e:	68f9      	ldr	r1, [r7, #12]
 8018890:	f7fe fe2a 	bl	80174e8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8018894:	68fb      	ldr	r3, [r7, #12]
 8018896:	f103 021c 	add.w	r2, r3, #28
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	68db      	ldr	r3, [r3, #12]
 801889e:	4619      	mov	r1, r3
 80188a0:	4610      	mov	r0, r2
 80188a2:	f7fd fea9 	bl	80165f8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80188a6:	68fb      	ldr	r3, [r7, #12]
 80188a8:	3316      	adds	r3, #22
 80188aa:	6939      	ldr	r1, [r7, #16]
 80188ac:	4618      	mov	r0, r3
 80188ae:	f7fd fea3 	bl	80165f8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80188b2:	68fb      	ldr	r3, [r7, #12]
 80188b4:	3312      	adds	r3, #18
 80188b6:	2100      	movs	r1, #0
 80188b8:	4618      	mov	r0, r3
 80188ba:	f7fd fe82 	bl	80165c2 <st_word>
					fs->wflag = 1;
 80188be:	68bb      	ldr	r3, [r7, #8]
 80188c0:	2201      	movs	r2, #1
 80188c2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80188c4:	68bb      	ldr	r3, [r7, #8]
 80188c6:	4618      	mov	r0, r3
 80188c8:	f7fe f91e 	bl	8016b08 <sync_fs>
 80188cc:	4603      	mov	r3, r0
 80188ce:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	7d1b      	ldrb	r3, [r3, #20]
 80188d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80188d8:	b2da      	uxtb	r2, r3
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80188de:	7dfb      	ldrb	r3, [r7, #23]
}
 80188e0:	4618      	mov	r0, r3
 80188e2:	3718      	adds	r7, #24
 80188e4:	46bd      	mov	sp, r7
 80188e6:	bd80      	pop	{r7, pc}

080188e8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80188e8:	b580      	push	{r7, lr}
 80188ea:	b084      	sub	sp, #16
 80188ec:	af00      	add	r7, sp, #0
 80188ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80188f0:	6878      	ldr	r0, [r7, #4]
 80188f2:	f7ff ff7b 	bl	80187ec <f_sync>
 80188f6:	4603      	mov	r3, r0
 80188f8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80188fa:	7bfb      	ldrb	r3, [r7, #15]
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	d118      	bne.n	8018932 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	f107 0208 	add.w	r2, r7, #8
 8018906:	4611      	mov	r1, r2
 8018908:	4618      	mov	r0, r3
 801890a:	f7ff fa81 	bl	8017e10 <validate>
 801890e:	4603      	mov	r3, r0
 8018910:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8018912:	7bfb      	ldrb	r3, [r7, #15]
 8018914:	2b00      	cmp	r3, #0
 8018916:	d10c      	bne.n	8018932 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	691b      	ldr	r3, [r3, #16]
 801891c:	4618      	mov	r0, r3
 801891e:	f7fe f821 	bl	8016964 <dec_lock>
 8018922:	4603      	mov	r3, r0
 8018924:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8018926:	7bfb      	ldrb	r3, [r7, #15]
 8018928:	2b00      	cmp	r3, #0
 801892a:	d102      	bne.n	8018932 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	2200      	movs	r2, #0
 8018930:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8018932:	7bfb      	ldrb	r3, [r7, #15]
}
 8018934:	4618      	mov	r0, r3
 8018936:	3710      	adds	r7, #16
 8018938:	46bd      	mov	sp, r7
 801893a:	bd80      	pop	{r7, pc}

0801893c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801893c:	b480      	push	{r7}
 801893e:	b087      	sub	sp, #28
 8018940:	af00      	add	r7, sp, #0
 8018942:	60f8      	str	r0, [r7, #12]
 8018944:	60b9      	str	r1, [r7, #8]
 8018946:	4613      	mov	r3, r2
 8018948:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801894a:	2301      	movs	r3, #1
 801894c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801894e:	2300      	movs	r3, #0
 8018950:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8018952:	4b1f      	ldr	r3, [pc, #124]	; (80189d0 <FATFS_LinkDriverEx+0x94>)
 8018954:	7a5b      	ldrb	r3, [r3, #9]
 8018956:	b2db      	uxtb	r3, r3
 8018958:	2b00      	cmp	r3, #0
 801895a:	d131      	bne.n	80189c0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801895c:	4b1c      	ldr	r3, [pc, #112]	; (80189d0 <FATFS_LinkDriverEx+0x94>)
 801895e:	7a5b      	ldrb	r3, [r3, #9]
 8018960:	b2db      	uxtb	r3, r3
 8018962:	461a      	mov	r2, r3
 8018964:	4b1a      	ldr	r3, [pc, #104]	; (80189d0 <FATFS_LinkDriverEx+0x94>)
 8018966:	2100      	movs	r1, #0
 8018968:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801896a:	4b19      	ldr	r3, [pc, #100]	; (80189d0 <FATFS_LinkDriverEx+0x94>)
 801896c:	7a5b      	ldrb	r3, [r3, #9]
 801896e:	b2db      	uxtb	r3, r3
 8018970:	4a17      	ldr	r2, [pc, #92]	; (80189d0 <FATFS_LinkDriverEx+0x94>)
 8018972:	009b      	lsls	r3, r3, #2
 8018974:	4413      	add	r3, r2
 8018976:	68fa      	ldr	r2, [r7, #12]
 8018978:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801897a:	4b15      	ldr	r3, [pc, #84]	; (80189d0 <FATFS_LinkDriverEx+0x94>)
 801897c:	7a5b      	ldrb	r3, [r3, #9]
 801897e:	b2db      	uxtb	r3, r3
 8018980:	461a      	mov	r2, r3
 8018982:	4b13      	ldr	r3, [pc, #76]	; (80189d0 <FATFS_LinkDriverEx+0x94>)
 8018984:	4413      	add	r3, r2
 8018986:	79fa      	ldrb	r2, [r7, #7]
 8018988:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801898a:	4b11      	ldr	r3, [pc, #68]	; (80189d0 <FATFS_LinkDriverEx+0x94>)
 801898c:	7a5b      	ldrb	r3, [r3, #9]
 801898e:	b2db      	uxtb	r3, r3
 8018990:	1c5a      	adds	r2, r3, #1
 8018992:	b2d1      	uxtb	r1, r2
 8018994:	4a0e      	ldr	r2, [pc, #56]	; (80189d0 <FATFS_LinkDriverEx+0x94>)
 8018996:	7251      	strb	r1, [r2, #9]
 8018998:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801899a:	7dbb      	ldrb	r3, [r7, #22]
 801899c:	3330      	adds	r3, #48	; 0x30
 801899e:	b2da      	uxtb	r2, r3
 80189a0:	68bb      	ldr	r3, [r7, #8]
 80189a2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80189a4:	68bb      	ldr	r3, [r7, #8]
 80189a6:	3301      	adds	r3, #1
 80189a8:	223a      	movs	r2, #58	; 0x3a
 80189aa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80189ac:	68bb      	ldr	r3, [r7, #8]
 80189ae:	3302      	adds	r3, #2
 80189b0:	222f      	movs	r2, #47	; 0x2f
 80189b2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80189b4:	68bb      	ldr	r3, [r7, #8]
 80189b6:	3303      	adds	r3, #3
 80189b8:	2200      	movs	r2, #0
 80189ba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80189bc:	2300      	movs	r3, #0
 80189be:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80189c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80189c2:	4618      	mov	r0, r3
 80189c4:	371c      	adds	r7, #28
 80189c6:	46bd      	mov	sp, r7
 80189c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189cc:	4770      	bx	lr
 80189ce:	bf00      	nop
 80189d0:	24000b84 	.word	0x24000b84

080189d4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80189d4:	b580      	push	{r7, lr}
 80189d6:	b082      	sub	sp, #8
 80189d8:	af00      	add	r7, sp, #0
 80189da:	6078      	str	r0, [r7, #4]
 80189dc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80189de:	2200      	movs	r2, #0
 80189e0:	6839      	ldr	r1, [r7, #0]
 80189e2:	6878      	ldr	r0, [r7, #4]
 80189e4:	f7ff ffaa 	bl	801893c <FATFS_LinkDriverEx>
 80189e8:	4603      	mov	r3, r0
}
 80189ea:	4618      	mov	r0, r3
 80189ec:	3708      	adds	r7, #8
 80189ee:	46bd      	mov	sp, r7
 80189f0:	bd80      	pop	{r7, pc}
	...

080189f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80189f4:	b580      	push	{r7, lr}
 80189f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80189f8:	2200      	movs	r2, #0
 80189fa:	4913      	ldr	r1, [pc, #76]	; (8018a48 <MX_USB_DEVICE_Init+0x54>)
 80189fc:	4813      	ldr	r0, [pc, #76]	; (8018a4c <MX_USB_DEVICE_Init+0x58>)
 80189fe:	f7fc fc20 	bl	8015242 <USBD_Init>
 8018a02:	4603      	mov	r3, r0
 8018a04:	2b00      	cmp	r3, #0
 8018a06:	d001      	beq.n	8018a0c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8018a08:	f7eb f8ee 	bl	8003be8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8018a0c:	4910      	ldr	r1, [pc, #64]	; (8018a50 <MX_USB_DEVICE_Init+0x5c>)
 8018a0e:	480f      	ldr	r0, [pc, #60]	; (8018a4c <MX_USB_DEVICE_Init+0x58>)
 8018a10:	f7fc fc4d 	bl	80152ae <USBD_RegisterClass>
 8018a14:	4603      	mov	r3, r0
 8018a16:	2b00      	cmp	r3, #0
 8018a18:	d001      	beq.n	8018a1e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8018a1a:	f7eb f8e5 	bl	8003be8 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8018a1e:	490d      	ldr	r1, [pc, #52]	; (8018a54 <MX_USB_DEVICE_Init+0x60>)
 8018a20:	480a      	ldr	r0, [pc, #40]	; (8018a4c <MX_USB_DEVICE_Init+0x58>)
 8018a22:	f7fa fff7 	bl	8013a14 <USBD_MSC_RegisterStorage>
 8018a26:	4603      	mov	r3, r0
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	d001      	beq.n	8018a30 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8018a2c:	f7eb f8dc 	bl	8003be8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8018a30:	4806      	ldr	r0, [pc, #24]	; (8018a4c <MX_USB_DEVICE_Init+0x58>)
 8018a32:	f7fc fc5d 	bl	80152f0 <USBD_Start>
 8018a36:	4603      	mov	r3, r0
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	d001      	beq.n	8018a40 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8018a3c:	f7eb f8d4 	bl	8003be8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8018a40:	f7f0 fe2e 	bl	80096a0 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8018a44:	bf00      	nop
 8018a46:	bd80      	pop	{r7, pc}
 8018a48:	24000108 	.word	0x24000108
 8018a4c:	24001bb4 	.word	0x24001bb4
 8018a50:	24000020 	.word	0x24000020
 8018a54:	24000158 	.word	0x24000158

08018a58 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018a58:	b480      	push	{r7}
 8018a5a:	b083      	sub	sp, #12
 8018a5c:	af00      	add	r7, sp, #0
 8018a5e:	4603      	mov	r3, r0
 8018a60:	6039      	str	r1, [r7, #0]
 8018a62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8018a64:	683b      	ldr	r3, [r7, #0]
 8018a66:	2212      	movs	r2, #18
 8018a68:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8018a6a:	4b03      	ldr	r3, [pc, #12]	; (8018a78 <USBD_FS_DeviceDescriptor+0x20>)
}
 8018a6c:	4618      	mov	r0, r3
 8018a6e:	370c      	adds	r7, #12
 8018a70:	46bd      	mov	sp, r7
 8018a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a76:	4770      	bx	lr
 8018a78:	24000124 	.word	0x24000124

08018a7c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018a7c:	b480      	push	{r7}
 8018a7e:	b083      	sub	sp, #12
 8018a80:	af00      	add	r7, sp, #0
 8018a82:	4603      	mov	r3, r0
 8018a84:	6039      	str	r1, [r7, #0]
 8018a86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018a88:	683b      	ldr	r3, [r7, #0]
 8018a8a:	2204      	movs	r2, #4
 8018a8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018a8e:	4b03      	ldr	r3, [pc, #12]	; (8018a9c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8018a90:	4618      	mov	r0, r3
 8018a92:	370c      	adds	r7, #12
 8018a94:	46bd      	mov	sp, r7
 8018a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a9a:	4770      	bx	lr
 8018a9c:	24000138 	.word	0x24000138

08018aa0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018aa0:	b580      	push	{r7, lr}
 8018aa2:	b082      	sub	sp, #8
 8018aa4:	af00      	add	r7, sp, #0
 8018aa6:	4603      	mov	r3, r0
 8018aa8:	6039      	str	r1, [r7, #0]
 8018aaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018aac:	79fb      	ldrb	r3, [r7, #7]
 8018aae:	2b00      	cmp	r3, #0
 8018ab0:	d105      	bne.n	8018abe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018ab2:	683a      	ldr	r2, [r7, #0]
 8018ab4:	4907      	ldr	r1, [pc, #28]	; (8018ad4 <USBD_FS_ProductStrDescriptor+0x34>)
 8018ab6:	4808      	ldr	r0, [pc, #32]	; (8018ad8 <USBD_FS_ProductStrDescriptor+0x38>)
 8018ab8:	f7fd fbe7 	bl	801628a <USBD_GetString>
 8018abc:	e004      	b.n	8018ac8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018abe:	683a      	ldr	r2, [r7, #0]
 8018ac0:	4904      	ldr	r1, [pc, #16]	; (8018ad4 <USBD_FS_ProductStrDescriptor+0x34>)
 8018ac2:	4805      	ldr	r0, [pc, #20]	; (8018ad8 <USBD_FS_ProductStrDescriptor+0x38>)
 8018ac4:	f7fd fbe1 	bl	801628a <USBD_GetString>
  }
  return USBD_StrDesc;
 8018ac8:	4b02      	ldr	r3, [pc, #8]	; (8018ad4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8018aca:	4618      	mov	r0, r3
 8018acc:	3708      	adds	r7, #8
 8018ace:	46bd      	mov	sp, r7
 8018ad0:	bd80      	pop	{r7, pc}
 8018ad2:	bf00      	nop
 8018ad4:	24001e84 	.word	0x24001e84
 8018ad8:	0801aee0 	.word	0x0801aee0

08018adc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018adc:	b580      	push	{r7, lr}
 8018ade:	b082      	sub	sp, #8
 8018ae0:	af00      	add	r7, sp, #0
 8018ae2:	4603      	mov	r3, r0
 8018ae4:	6039      	str	r1, [r7, #0]
 8018ae6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8018ae8:	683a      	ldr	r2, [r7, #0]
 8018aea:	4904      	ldr	r1, [pc, #16]	; (8018afc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8018aec:	4804      	ldr	r0, [pc, #16]	; (8018b00 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8018aee:	f7fd fbcc 	bl	801628a <USBD_GetString>
  return USBD_StrDesc;
 8018af2:	4b02      	ldr	r3, [pc, #8]	; (8018afc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8018af4:	4618      	mov	r0, r3
 8018af6:	3708      	adds	r7, #8
 8018af8:	46bd      	mov	sp, r7
 8018afa:	bd80      	pop	{r7, pc}
 8018afc:	24001e84 	.word	0x24001e84
 8018b00:	0801aef4 	.word	0x0801aef4

08018b04 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018b04:	b580      	push	{r7, lr}
 8018b06:	b082      	sub	sp, #8
 8018b08:	af00      	add	r7, sp, #0
 8018b0a:	4603      	mov	r3, r0
 8018b0c:	6039      	str	r1, [r7, #0]
 8018b0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018b10:	683b      	ldr	r3, [r7, #0]
 8018b12:	221a      	movs	r2, #26
 8018b14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8018b16:	f000 f843 	bl	8018ba0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8018b1a:	4b02      	ldr	r3, [pc, #8]	; (8018b24 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8018b1c:	4618      	mov	r0, r3
 8018b1e:	3708      	adds	r7, #8
 8018b20:	46bd      	mov	sp, r7
 8018b22:	bd80      	pop	{r7, pc}
 8018b24:	2400013c 	.word	0x2400013c

08018b28 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018b28:	b580      	push	{r7, lr}
 8018b2a:	b082      	sub	sp, #8
 8018b2c:	af00      	add	r7, sp, #0
 8018b2e:	4603      	mov	r3, r0
 8018b30:	6039      	str	r1, [r7, #0]
 8018b32:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018b34:	79fb      	ldrb	r3, [r7, #7]
 8018b36:	2b00      	cmp	r3, #0
 8018b38:	d105      	bne.n	8018b46 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018b3a:	683a      	ldr	r2, [r7, #0]
 8018b3c:	4907      	ldr	r1, [pc, #28]	; (8018b5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8018b3e:	4808      	ldr	r0, [pc, #32]	; (8018b60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018b40:	f7fd fba3 	bl	801628a <USBD_GetString>
 8018b44:	e004      	b.n	8018b50 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018b46:	683a      	ldr	r2, [r7, #0]
 8018b48:	4904      	ldr	r1, [pc, #16]	; (8018b5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8018b4a:	4805      	ldr	r0, [pc, #20]	; (8018b60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018b4c:	f7fd fb9d 	bl	801628a <USBD_GetString>
  }
  return USBD_StrDesc;
 8018b50:	4b02      	ldr	r3, [pc, #8]	; (8018b5c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8018b52:	4618      	mov	r0, r3
 8018b54:	3708      	adds	r7, #8
 8018b56:	46bd      	mov	sp, r7
 8018b58:	bd80      	pop	{r7, pc}
 8018b5a:	bf00      	nop
 8018b5c:	24001e84 	.word	0x24001e84
 8018b60:	0801af08 	.word	0x0801af08

08018b64 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018b64:	b580      	push	{r7, lr}
 8018b66:	b082      	sub	sp, #8
 8018b68:	af00      	add	r7, sp, #0
 8018b6a:	4603      	mov	r3, r0
 8018b6c:	6039      	str	r1, [r7, #0]
 8018b6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018b70:	79fb      	ldrb	r3, [r7, #7]
 8018b72:	2b00      	cmp	r3, #0
 8018b74:	d105      	bne.n	8018b82 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018b76:	683a      	ldr	r2, [r7, #0]
 8018b78:	4907      	ldr	r1, [pc, #28]	; (8018b98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018b7a:	4808      	ldr	r0, [pc, #32]	; (8018b9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018b7c:	f7fd fb85 	bl	801628a <USBD_GetString>
 8018b80:	e004      	b.n	8018b8c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018b82:	683a      	ldr	r2, [r7, #0]
 8018b84:	4904      	ldr	r1, [pc, #16]	; (8018b98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018b86:	4805      	ldr	r0, [pc, #20]	; (8018b9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018b88:	f7fd fb7f 	bl	801628a <USBD_GetString>
  }
  return USBD_StrDesc;
 8018b8c:	4b02      	ldr	r3, [pc, #8]	; (8018b98 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8018b8e:	4618      	mov	r0, r3
 8018b90:	3708      	adds	r7, #8
 8018b92:	46bd      	mov	sp, r7
 8018b94:	bd80      	pop	{r7, pc}
 8018b96:	bf00      	nop
 8018b98:	24001e84 	.word	0x24001e84
 8018b9c:	0801af14 	.word	0x0801af14

08018ba0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018ba0:	b580      	push	{r7, lr}
 8018ba2:	b084      	sub	sp, #16
 8018ba4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018ba6:	4b0f      	ldr	r3, [pc, #60]	; (8018be4 <Get_SerialNum+0x44>)
 8018ba8:	681b      	ldr	r3, [r3, #0]
 8018baa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018bac:	4b0e      	ldr	r3, [pc, #56]	; (8018be8 <Get_SerialNum+0x48>)
 8018bae:	681b      	ldr	r3, [r3, #0]
 8018bb0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018bb2:	4b0e      	ldr	r3, [pc, #56]	; (8018bec <Get_SerialNum+0x4c>)
 8018bb4:	681b      	ldr	r3, [r3, #0]
 8018bb6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018bb8:	68fa      	ldr	r2, [r7, #12]
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	4413      	add	r3, r2
 8018bbe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018bc0:	68fb      	ldr	r3, [r7, #12]
 8018bc2:	2b00      	cmp	r3, #0
 8018bc4:	d009      	beq.n	8018bda <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018bc6:	2208      	movs	r2, #8
 8018bc8:	4909      	ldr	r1, [pc, #36]	; (8018bf0 <Get_SerialNum+0x50>)
 8018bca:	68f8      	ldr	r0, [r7, #12]
 8018bcc:	f000 f814 	bl	8018bf8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018bd0:	2204      	movs	r2, #4
 8018bd2:	4908      	ldr	r1, [pc, #32]	; (8018bf4 <Get_SerialNum+0x54>)
 8018bd4:	68b8      	ldr	r0, [r7, #8]
 8018bd6:	f000 f80f 	bl	8018bf8 <IntToUnicode>
  }
}
 8018bda:	bf00      	nop
 8018bdc:	3710      	adds	r7, #16
 8018bde:	46bd      	mov	sp, r7
 8018be0:	bd80      	pop	{r7, pc}
 8018be2:	bf00      	nop
 8018be4:	1ff1e800 	.word	0x1ff1e800
 8018be8:	1ff1e804 	.word	0x1ff1e804
 8018bec:	1ff1e808 	.word	0x1ff1e808
 8018bf0:	2400013e 	.word	0x2400013e
 8018bf4:	2400014e 	.word	0x2400014e

08018bf8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018bf8:	b480      	push	{r7}
 8018bfa:	b087      	sub	sp, #28
 8018bfc:	af00      	add	r7, sp, #0
 8018bfe:	60f8      	str	r0, [r7, #12]
 8018c00:	60b9      	str	r1, [r7, #8]
 8018c02:	4613      	mov	r3, r2
 8018c04:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8018c06:	2300      	movs	r3, #0
 8018c08:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8018c0a:	2300      	movs	r3, #0
 8018c0c:	75fb      	strb	r3, [r7, #23]
 8018c0e:	e027      	b.n	8018c60 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018c10:	68fb      	ldr	r3, [r7, #12]
 8018c12:	0f1b      	lsrs	r3, r3, #28
 8018c14:	2b09      	cmp	r3, #9
 8018c16:	d80b      	bhi.n	8018c30 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018c18:	68fb      	ldr	r3, [r7, #12]
 8018c1a:	0f1b      	lsrs	r3, r3, #28
 8018c1c:	b2da      	uxtb	r2, r3
 8018c1e:	7dfb      	ldrb	r3, [r7, #23]
 8018c20:	005b      	lsls	r3, r3, #1
 8018c22:	4619      	mov	r1, r3
 8018c24:	68bb      	ldr	r3, [r7, #8]
 8018c26:	440b      	add	r3, r1
 8018c28:	3230      	adds	r2, #48	; 0x30
 8018c2a:	b2d2      	uxtb	r2, r2
 8018c2c:	701a      	strb	r2, [r3, #0]
 8018c2e:	e00a      	b.n	8018c46 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018c30:	68fb      	ldr	r3, [r7, #12]
 8018c32:	0f1b      	lsrs	r3, r3, #28
 8018c34:	b2da      	uxtb	r2, r3
 8018c36:	7dfb      	ldrb	r3, [r7, #23]
 8018c38:	005b      	lsls	r3, r3, #1
 8018c3a:	4619      	mov	r1, r3
 8018c3c:	68bb      	ldr	r3, [r7, #8]
 8018c3e:	440b      	add	r3, r1
 8018c40:	3237      	adds	r2, #55	; 0x37
 8018c42:	b2d2      	uxtb	r2, r2
 8018c44:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018c46:	68fb      	ldr	r3, [r7, #12]
 8018c48:	011b      	lsls	r3, r3, #4
 8018c4a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018c4c:	7dfb      	ldrb	r3, [r7, #23]
 8018c4e:	005b      	lsls	r3, r3, #1
 8018c50:	3301      	adds	r3, #1
 8018c52:	68ba      	ldr	r2, [r7, #8]
 8018c54:	4413      	add	r3, r2
 8018c56:	2200      	movs	r2, #0
 8018c58:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018c5a:	7dfb      	ldrb	r3, [r7, #23]
 8018c5c:	3301      	adds	r3, #1
 8018c5e:	75fb      	strb	r3, [r7, #23]
 8018c60:	7dfa      	ldrb	r2, [r7, #23]
 8018c62:	79fb      	ldrb	r3, [r7, #7]
 8018c64:	429a      	cmp	r2, r3
 8018c66:	d3d3      	bcc.n	8018c10 <IntToUnicode+0x18>
  }
}
 8018c68:	bf00      	nop
 8018c6a:	371c      	adds	r7, #28
 8018c6c:	46bd      	mov	sp, r7
 8018c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c72:	4770      	bx	lr

08018c74 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8018c74:	b480      	push	{r7}
 8018c76:	b083      	sub	sp, #12
 8018c78:	af00      	add	r7, sp, #0
 8018c7a:	4603      	mov	r3, r0
 8018c7c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8018c7e:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8018c80:	4618      	mov	r0, r3
 8018c82:	370c      	adds	r7, #12
 8018c84:	46bd      	mov	sp, r7
 8018c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c8a:	4770      	bx	lr

08018c8c <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8018c8c:	b580      	push	{r7, lr}
 8018c8e:	b08e      	sub	sp, #56	; 0x38
 8018c90:	af00      	add	r7, sp, #0
 8018c92:	4603      	mov	r3, r0
 8018c94:	60b9      	str	r1, [r7, #8]
 8018c96:	607a      	str	r2, [r7, #4]
 8018c98:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 8018c9a:	23ff      	movs	r3, #255	; 0xff
 8018c9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd1, &info);
 8018ca0:	f107 0310 	add.w	r3, r7, #16
 8018ca4:	4619      	mov	r1, r3
 8018ca6:	480a      	ldr	r0, [pc, #40]	; (8018cd0 <STORAGE_GetCapacity_FS+0x44>)
 8018ca8:	f7f5 f89a 	bl	800dde0 <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 8018cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018cae:	1e5a      	subs	r2, r3, #1
 8018cb0:	68bb      	ldr	r3, [r7, #8]
 8018cb2:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 8018cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cb6:	b29a      	uxth	r2, r3
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 8018cbc:	2300      	movs	r3, #0
 8018cbe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 8018cc2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 8018cc6:	4618      	mov	r0, r3
 8018cc8:	3738      	adds	r7, #56	; 0x38
 8018cca:	46bd      	mov	sp, r7
 8018ccc:	bd80      	pop	{r7, pc}
 8018cce:	bf00      	nop
 8018cd0:	24001450 	.word	0x24001450

08018cd4 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8018cd4:	b480      	push	{r7}
 8018cd6:	b083      	sub	sp, #12
 8018cd8:	af00      	add	r7, sp, #0
 8018cda:	4603      	mov	r3, r0
 8018cdc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8018cde:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8018ce0:	4618      	mov	r0, r3
 8018ce2:	370c      	adds	r7, #12
 8018ce4:	46bd      	mov	sp, r7
 8018ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cea:	4770      	bx	lr

08018cec <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8018cec:	b480      	push	{r7}
 8018cee:	b083      	sub	sp, #12
 8018cf0:	af00      	add	r7, sp, #0
 8018cf2:	4603      	mov	r3, r0
 8018cf4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8018cf6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018cf8:	4618      	mov	r0, r3
 8018cfa:	370c      	adds	r7, #12
 8018cfc:	46bd      	mov	sp, r7
 8018cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d02:	4770      	bx	lr

08018d04 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8018d04:	b580      	push	{r7, lr}
 8018d06:	b088      	sub	sp, #32
 8018d08:	af02      	add	r7, sp, #8
 8018d0a:	60b9      	str	r1, [r7, #8]
 8018d0c:	607a      	str	r2, [r7, #4]
 8018d0e:	461a      	mov	r2, r3
 8018d10:	4603      	mov	r3, r0
 8018d12:	73fb      	strb	r3, [r7, #15]
 8018d14:	4613      	mov	r3, r2
 8018d16:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	int8_t ret = -1;
 8018d18:	23ff      	movs	r3, #255	; 0xff
 8018d1a:	75fb      	strb	r3, [r7, #23]

	HAL_SD_ReadBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8018d1c:	89ba      	ldrh	r2, [r7, #12]
 8018d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8018d22:	9300      	str	r3, [sp, #0]
 8018d24:	4613      	mov	r3, r2
 8018d26:	687a      	ldr	r2, [r7, #4]
 8018d28:	68b9      	ldr	r1, [r7, #8]
 8018d2a:	4809      	ldr	r0, [pc, #36]	; (8018d50 <STORAGE_Read_FS+0x4c>)
 8018d2c:	f7f3 ffca 	bl	800ccc4 <HAL_SD_ReadBlocks>

	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8018d30:	bf00      	nop
 8018d32:	4807      	ldr	r0, [pc, #28]	; (8018d50 <STORAGE_Read_FS+0x4c>)
 8018d34:	f7f5 f92a 	bl	800df8c <HAL_SD_GetCardState>
 8018d38:	4603      	mov	r3, r0
 8018d3a:	2b04      	cmp	r3, #4
 8018d3c:	d1f9      	bne.n	8018d32 <STORAGE_Read_FS+0x2e>
	ret = 0;
 8018d3e:	2300      	movs	r3, #0
 8018d40:	75fb      	strb	r3, [r7, #23]
	return ret;
 8018d42:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 8018d46:	4618      	mov	r0, r3
 8018d48:	3718      	adds	r7, #24
 8018d4a:	46bd      	mov	sp, r7
 8018d4c:	bd80      	pop	{r7, pc}
 8018d4e:	bf00      	nop
 8018d50:	24001450 	.word	0x24001450

08018d54 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8018d54:	b580      	push	{r7, lr}
 8018d56:	b088      	sub	sp, #32
 8018d58:	af02      	add	r7, sp, #8
 8018d5a:	60b9      	str	r1, [r7, #8]
 8018d5c:	607a      	str	r2, [r7, #4]
 8018d5e:	461a      	mov	r2, r3
 8018d60:	4603      	mov	r3, r0
 8018d62:	73fb      	strb	r3, [r7, #15]
 8018d64:	4613      	mov	r3, r2
 8018d66:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	int8_t ret = -1;
 8018d68:	23ff      	movs	r3, #255	; 0xff
 8018d6a:	75fb      	strb	r3, [r7, #23]

	HAL_SD_WriteBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8018d6c:	89ba      	ldrh	r2, [r7, #12]
 8018d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8018d72:	9300      	str	r3, [sp, #0]
 8018d74:	4613      	mov	r3, r2
 8018d76:	687a      	ldr	r2, [r7, #4]
 8018d78:	68b9      	ldr	r1, [r7, #8]
 8018d7a:	4809      	ldr	r0, [pc, #36]	; (8018da0 <STORAGE_Write_FS+0x4c>)
 8018d7c:	f7f4 f92c 	bl	800cfd8 <HAL_SD_WriteBlocks>


	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8018d80:	bf00      	nop
 8018d82:	4807      	ldr	r0, [pc, #28]	; (8018da0 <STORAGE_Write_FS+0x4c>)
 8018d84:	f7f5 f902 	bl	800df8c <HAL_SD_GetCardState>
 8018d88:	4603      	mov	r3, r0
 8018d8a:	2b04      	cmp	r3, #4
 8018d8c:	d1f9      	bne.n	8018d82 <STORAGE_Write_FS+0x2e>
	ret = 0;
 8018d8e:	2300      	movs	r3, #0
 8018d90:	75fb      	strb	r3, [r7, #23]
	return ret;
 8018d92:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 8018d96:	4618      	mov	r0, r3
 8018d98:	3718      	adds	r7, #24
 8018d9a:	46bd      	mov	sp, r7
 8018d9c:	bd80      	pop	{r7, pc}
 8018d9e:	bf00      	nop
 8018da0:	24001450 	.word	0x24001450

08018da4 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8018da4:	b480      	push	{r7}
 8018da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8018da8:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8018daa:	4618      	mov	r0, r3
 8018dac:	46bd      	mov	sp, r7
 8018dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018db2:	4770      	bx	lr

08018db4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018db4:	b580      	push	{r7, lr}
 8018db6:	b08a      	sub	sp, #40	; 0x28
 8018db8:	af00      	add	r7, sp, #0
 8018dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018dbc:	f107 0314 	add.w	r3, r7, #20
 8018dc0:	2200      	movs	r2, #0
 8018dc2:	601a      	str	r2, [r3, #0]
 8018dc4:	605a      	str	r2, [r3, #4]
 8018dc6:	609a      	str	r2, [r3, #8]
 8018dc8:	60da      	str	r2, [r3, #12]
 8018dca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	681b      	ldr	r3, [r3, #0]
 8018dd0:	4a1e      	ldr	r2, [pc, #120]	; (8018e4c <HAL_PCD_MspInit+0x98>)
 8018dd2:	4293      	cmp	r3, r2
 8018dd4:	d136      	bne.n	8018e44 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018dd6:	4b1e      	ldr	r3, [pc, #120]	; (8018e50 <HAL_PCD_MspInit+0x9c>)
 8018dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8018ddc:	4a1c      	ldr	r2, [pc, #112]	; (8018e50 <HAL_PCD_MspInit+0x9c>)
 8018dde:	f043 0301 	orr.w	r3, r3, #1
 8018de2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8018de6:	4b1a      	ldr	r3, [pc, #104]	; (8018e50 <HAL_PCD_MspInit+0x9c>)
 8018de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8018dec:	f003 0301 	and.w	r3, r3, #1
 8018df0:	613b      	str	r3, [r7, #16]
 8018df2:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8018df4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8018df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018dfa:	2302      	movs	r3, #2
 8018dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018dfe:	2300      	movs	r3, #0
 8018e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018e02:	2300      	movs	r3, #0
 8018e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8018e06:	230a      	movs	r3, #10
 8018e08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018e0a:	f107 0314 	add.w	r3, r7, #20
 8018e0e:	4619      	mov	r1, r3
 8018e10:	4810      	ldr	r0, [pc, #64]	; (8018e54 <HAL_PCD_MspInit+0xa0>)
 8018e12:	f7ee ff2f 	bl	8007c74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8018e16:	4b0e      	ldr	r3, [pc, #56]	; (8018e50 <HAL_PCD_MspInit+0x9c>)
 8018e18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8018e1c:	4a0c      	ldr	r2, [pc, #48]	; (8018e50 <HAL_PCD_MspInit+0x9c>)
 8018e1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8018e22:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8018e26:	4b0a      	ldr	r3, [pc, #40]	; (8018e50 <HAL_PCD_MspInit+0x9c>)
 8018e28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8018e2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8018e30:	60fb      	str	r3, [r7, #12]
 8018e32:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8018e34:	2200      	movs	r2, #0
 8018e36:	2100      	movs	r1, #0
 8018e38:	2065      	movs	r0, #101	; 0x65
 8018e3a:	f7eb fcd2 	bl	80047e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018e3e:	2065      	movs	r0, #101	; 0x65
 8018e40:	f7eb fce9 	bl	8004816 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8018e44:	bf00      	nop
 8018e46:	3728      	adds	r7, #40	; 0x28
 8018e48:	46bd      	mov	sp, r7
 8018e4a:	bd80      	pop	{r7, pc}
 8018e4c:	40080000 	.word	0x40080000
 8018e50:	58024400 	.word	0x58024400
 8018e54:	58020000 	.word	0x58020000

08018e58 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018e58:	b580      	push	{r7, lr}
 8018e5a:	b082      	sub	sp, #8
 8018e5c:	af00      	add	r7, sp, #0
 8018e5e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018e60:	687b      	ldr	r3, [r7, #4]
 8018e62:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8018e66:	687b      	ldr	r3, [r7, #4]
 8018e68:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8018e6c:	4619      	mov	r1, r3
 8018e6e:	4610      	mov	r0, r2
 8018e70:	f7fc fa89 	bl	8015386 <USBD_LL_SetupStage>
}
 8018e74:	bf00      	nop
 8018e76:	3708      	adds	r7, #8
 8018e78:	46bd      	mov	sp, r7
 8018e7a:	bd80      	pop	{r7, pc}

08018e7c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018e7c:	b580      	push	{r7, lr}
 8018e7e:	b082      	sub	sp, #8
 8018e80:	af00      	add	r7, sp, #0
 8018e82:	6078      	str	r0, [r7, #4]
 8018e84:	460b      	mov	r3, r1
 8018e86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8018e8e:	78fa      	ldrb	r2, [r7, #3]
 8018e90:	6879      	ldr	r1, [r7, #4]
 8018e92:	4613      	mov	r3, r2
 8018e94:	00db      	lsls	r3, r3, #3
 8018e96:	1a9b      	subs	r3, r3, r2
 8018e98:	009b      	lsls	r3, r3, #2
 8018e9a:	440b      	add	r3, r1
 8018e9c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8018ea0:	681a      	ldr	r2, [r3, #0]
 8018ea2:	78fb      	ldrb	r3, [r7, #3]
 8018ea4:	4619      	mov	r1, r3
 8018ea6:	f7fc fac1 	bl	801542c <USBD_LL_DataOutStage>
}
 8018eaa:	bf00      	nop
 8018eac:	3708      	adds	r7, #8
 8018eae:	46bd      	mov	sp, r7
 8018eb0:	bd80      	pop	{r7, pc}

08018eb2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018eb2:	b580      	push	{r7, lr}
 8018eb4:	b082      	sub	sp, #8
 8018eb6:	af00      	add	r7, sp, #0
 8018eb8:	6078      	str	r0, [r7, #4]
 8018eba:	460b      	mov	r3, r1
 8018ebc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8018ec4:	78fa      	ldrb	r2, [r7, #3]
 8018ec6:	6879      	ldr	r1, [r7, #4]
 8018ec8:	4613      	mov	r3, r2
 8018eca:	00db      	lsls	r3, r3, #3
 8018ecc:	1a9b      	subs	r3, r3, r2
 8018ece:	009b      	lsls	r3, r3, #2
 8018ed0:	440b      	add	r3, r1
 8018ed2:	3348      	adds	r3, #72	; 0x48
 8018ed4:	681a      	ldr	r2, [r3, #0]
 8018ed6:	78fb      	ldrb	r3, [r7, #3]
 8018ed8:	4619      	mov	r1, r3
 8018eda:	f7fc fb0a 	bl	80154f2 <USBD_LL_DataInStage>
}
 8018ede:	bf00      	nop
 8018ee0:	3708      	adds	r7, #8
 8018ee2:	46bd      	mov	sp, r7
 8018ee4:	bd80      	pop	{r7, pc}

08018ee6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018ee6:	b580      	push	{r7, lr}
 8018ee8:	b082      	sub	sp, #8
 8018eea:	af00      	add	r7, sp, #0
 8018eec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018eee:	687b      	ldr	r3, [r7, #4]
 8018ef0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018ef4:	4618      	mov	r0, r3
 8018ef6:	f7fc fc0e 	bl	8015716 <USBD_LL_SOF>
}
 8018efa:	bf00      	nop
 8018efc:	3708      	adds	r7, #8
 8018efe:	46bd      	mov	sp, r7
 8018f00:	bd80      	pop	{r7, pc}

08018f02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f02:	b580      	push	{r7, lr}
 8018f04:	b084      	sub	sp, #16
 8018f06:	af00      	add	r7, sp, #0
 8018f08:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018f0a:	2301      	movs	r3, #1
 8018f0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	68db      	ldr	r3, [r3, #12]
 8018f12:	2b00      	cmp	r3, #0
 8018f14:	d102      	bne.n	8018f1c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8018f16:	2300      	movs	r3, #0
 8018f18:	73fb      	strb	r3, [r7, #15]
 8018f1a:	e008      	b.n	8018f2e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	68db      	ldr	r3, [r3, #12]
 8018f20:	2b02      	cmp	r3, #2
 8018f22:	d102      	bne.n	8018f2a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8018f24:	2301      	movs	r3, #1
 8018f26:	73fb      	strb	r3, [r7, #15]
 8018f28:	e001      	b.n	8018f2e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8018f2a:	f7ea fe5d 	bl	8003be8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018f34:	7bfa      	ldrb	r2, [r7, #15]
 8018f36:	4611      	mov	r1, r2
 8018f38:	4618      	mov	r0, r3
 8018f3a:	f7fc fbb1 	bl	80156a0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018f3e:	687b      	ldr	r3, [r7, #4]
 8018f40:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018f44:	4618      	mov	r0, r3
 8018f46:	f7fc fb6a 	bl	801561e <USBD_LL_Reset>
}
 8018f4a:	bf00      	nop
 8018f4c:	3710      	adds	r7, #16
 8018f4e:	46bd      	mov	sp, r7
 8018f50:	bd80      	pop	{r7, pc}
	...

08018f54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f54:	b580      	push	{r7, lr}
 8018f56:	b082      	sub	sp, #8
 8018f58:	af00      	add	r7, sp, #0
 8018f5a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018f62:	4618      	mov	r0, r3
 8018f64:	f7fc fbac 	bl	80156c0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	681b      	ldr	r3, [r3, #0]
 8018f6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018f70:	681b      	ldr	r3, [r3, #0]
 8018f72:	687a      	ldr	r2, [r7, #4]
 8018f74:	6812      	ldr	r2, [r2, #0]
 8018f76:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8018f7a:	f043 0301 	orr.w	r3, r3, #1
 8018f7e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	6a1b      	ldr	r3, [r3, #32]
 8018f84:	2b00      	cmp	r3, #0
 8018f86:	d005      	beq.n	8018f94 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018f88:	4b04      	ldr	r3, [pc, #16]	; (8018f9c <HAL_PCD_SuspendCallback+0x48>)
 8018f8a:	691b      	ldr	r3, [r3, #16]
 8018f8c:	4a03      	ldr	r2, [pc, #12]	; (8018f9c <HAL_PCD_SuspendCallback+0x48>)
 8018f8e:	f043 0306 	orr.w	r3, r3, #6
 8018f92:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018f94:	bf00      	nop
 8018f96:	3708      	adds	r7, #8
 8018f98:	46bd      	mov	sp, r7
 8018f9a:	bd80      	pop	{r7, pc}
 8018f9c:	e000ed00 	.word	0xe000ed00

08018fa0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018fa0:	b580      	push	{r7, lr}
 8018fa2:	b082      	sub	sp, #8
 8018fa4:	af00      	add	r7, sp, #0
 8018fa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018fae:	4618      	mov	r0, r3
 8018fb0:	f7fc fb9b 	bl	80156ea <USBD_LL_Resume>
}
 8018fb4:	bf00      	nop
 8018fb6:	3708      	adds	r7, #8
 8018fb8:	46bd      	mov	sp, r7
 8018fba:	bd80      	pop	{r7, pc}

08018fbc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018fbc:	b580      	push	{r7, lr}
 8018fbe:	b082      	sub	sp, #8
 8018fc0:	af00      	add	r7, sp, #0
 8018fc2:	6078      	str	r0, [r7, #4]
 8018fc4:	460b      	mov	r3, r1
 8018fc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018fc8:	687b      	ldr	r3, [r7, #4]
 8018fca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018fce:	78fa      	ldrb	r2, [r7, #3]
 8018fd0:	4611      	mov	r1, r2
 8018fd2:	4618      	mov	r0, r3
 8018fd4:	f7fc fbc6 	bl	8015764 <USBD_LL_IsoOUTIncomplete>
}
 8018fd8:	bf00      	nop
 8018fda:	3708      	adds	r7, #8
 8018fdc:	46bd      	mov	sp, r7
 8018fde:	bd80      	pop	{r7, pc}

08018fe0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018fe0:	b580      	push	{r7, lr}
 8018fe2:	b082      	sub	sp, #8
 8018fe4:	af00      	add	r7, sp, #0
 8018fe6:	6078      	str	r0, [r7, #4]
 8018fe8:	460b      	mov	r3, r1
 8018fea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018ff2:	78fa      	ldrb	r2, [r7, #3]
 8018ff4:	4611      	mov	r1, r2
 8018ff6:	4618      	mov	r0, r3
 8018ff8:	f7fc fba7 	bl	801574a <USBD_LL_IsoINIncomplete>
}
 8018ffc:	bf00      	nop
 8018ffe:	3708      	adds	r7, #8
 8019000:	46bd      	mov	sp, r7
 8019002:	bd80      	pop	{r7, pc}

08019004 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019004:	b580      	push	{r7, lr}
 8019006:	b082      	sub	sp, #8
 8019008:	af00      	add	r7, sp, #0
 801900a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019012:	4618      	mov	r0, r3
 8019014:	f7fc fbb3 	bl	801577e <USBD_LL_DevConnected>
}
 8019018:	bf00      	nop
 801901a:	3708      	adds	r7, #8
 801901c:	46bd      	mov	sp, r7
 801901e:	bd80      	pop	{r7, pc}

08019020 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019020:	b580      	push	{r7, lr}
 8019022:	b082      	sub	sp, #8
 8019024:	af00      	add	r7, sp, #0
 8019026:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801902e:	4618      	mov	r0, r3
 8019030:	f7fc fbb0 	bl	8015794 <USBD_LL_DevDisconnected>
}
 8019034:	bf00      	nop
 8019036:	3708      	adds	r7, #8
 8019038:	46bd      	mov	sp, r7
 801903a:	bd80      	pop	{r7, pc}

0801903c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801903c:	b580      	push	{r7, lr}
 801903e:	b082      	sub	sp, #8
 8019040:	af00      	add	r7, sp, #0
 8019042:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	781b      	ldrb	r3, [r3, #0]
 8019048:	2b00      	cmp	r3, #0
 801904a:	d13e      	bne.n	80190ca <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801904c:	4a21      	ldr	r2, [pc, #132]	; (80190d4 <USBD_LL_Init+0x98>)
 801904e:	687b      	ldr	r3, [r7, #4]
 8019050:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	4a1f      	ldr	r2, [pc, #124]	; (80190d4 <USBD_LL_Init+0x98>)
 8019058:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801905c:	4b1d      	ldr	r3, [pc, #116]	; (80190d4 <USBD_LL_Init+0x98>)
 801905e:	4a1e      	ldr	r2, [pc, #120]	; (80190d8 <USBD_LL_Init+0x9c>)
 8019060:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8019062:	4b1c      	ldr	r3, [pc, #112]	; (80190d4 <USBD_LL_Init+0x98>)
 8019064:	2209      	movs	r2, #9
 8019066:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8019068:	4b1a      	ldr	r3, [pc, #104]	; (80190d4 <USBD_LL_Init+0x98>)
 801906a:	2202      	movs	r2, #2
 801906c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801906e:	4b19      	ldr	r3, [pc, #100]	; (80190d4 <USBD_LL_Init+0x98>)
 8019070:	2200      	movs	r2, #0
 8019072:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8019074:	4b17      	ldr	r3, [pc, #92]	; (80190d4 <USBD_LL_Init+0x98>)
 8019076:	2202      	movs	r2, #2
 8019078:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801907a:	4b16      	ldr	r3, [pc, #88]	; (80190d4 <USBD_LL_Init+0x98>)
 801907c:	2200      	movs	r2, #0
 801907e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8019080:	4b14      	ldr	r3, [pc, #80]	; (80190d4 <USBD_LL_Init+0x98>)
 8019082:	2200      	movs	r2, #0
 8019084:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8019086:	4b13      	ldr	r3, [pc, #76]	; (80190d4 <USBD_LL_Init+0x98>)
 8019088:	2200      	movs	r2, #0
 801908a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801908c:	4b11      	ldr	r3, [pc, #68]	; (80190d4 <USBD_LL_Init+0x98>)
 801908e:	2200      	movs	r2, #0
 8019090:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8019092:	4b10      	ldr	r3, [pc, #64]	; (80190d4 <USBD_LL_Init+0x98>)
 8019094:	2200      	movs	r2, #0
 8019096:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8019098:	4b0e      	ldr	r3, [pc, #56]	; (80190d4 <USBD_LL_Init+0x98>)
 801909a:	2200      	movs	r2, #0
 801909c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801909e:	480d      	ldr	r0, [pc, #52]	; (80190d4 <USBD_LL_Init+0x98>)
 80190a0:	f7ef f822 	bl	80080e8 <HAL_PCD_Init>
 80190a4:	4603      	mov	r3, r0
 80190a6:	2b00      	cmp	r3, #0
 80190a8:	d001      	beq.n	80190ae <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80190aa:	f7ea fd9d 	bl	8003be8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80190ae:	2180      	movs	r1, #128	; 0x80
 80190b0:	4808      	ldr	r0, [pc, #32]	; (80190d4 <USBD_LL_Init+0x98>)
 80190b2:	f7f0 f9e0 	bl	8009476 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80190b6:	2240      	movs	r2, #64	; 0x40
 80190b8:	2100      	movs	r1, #0
 80190ba:	4806      	ldr	r0, [pc, #24]	; (80190d4 <USBD_LL_Init+0x98>)
 80190bc:	f7f0 f994 	bl	80093e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80190c0:	2280      	movs	r2, #128	; 0x80
 80190c2:	2101      	movs	r1, #1
 80190c4:	4803      	ldr	r0, [pc, #12]	; (80190d4 <USBD_LL_Init+0x98>)
 80190c6:	f7f0 f98f 	bl	80093e8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80190ca:	2300      	movs	r3, #0
}
 80190cc:	4618      	mov	r0, r3
 80190ce:	3708      	adds	r7, #8
 80190d0:	46bd      	mov	sp, r7
 80190d2:	bd80      	pop	{r7, pc}
 80190d4:	24002084 	.word	0x24002084
 80190d8:	40080000 	.word	0x40080000

080190dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80190dc:	b580      	push	{r7, lr}
 80190de:	b084      	sub	sp, #16
 80190e0:	af00      	add	r7, sp, #0
 80190e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80190e4:	2300      	movs	r3, #0
 80190e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80190e8:	2300      	movs	r3, #0
 80190ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80190ec:	687b      	ldr	r3, [r7, #4]
 80190ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80190f2:	4618      	mov	r0, r3
 80190f4:	f7ef f91c 	bl	8008330 <HAL_PCD_Start>
 80190f8:	4603      	mov	r3, r0
 80190fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80190fc:	7bfb      	ldrb	r3, [r7, #15]
 80190fe:	4618      	mov	r0, r3
 8019100:	f000 f94a 	bl	8019398 <USBD_Get_USB_Status>
 8019104:	4603      	mov	r3, r0
 8019106:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019108:	7bbb      	ldrb	r3, [r7, #14]
}
 801910a:	4618      	mov	r0, r3
 801910c:	3710      	adds	r7, #16
 801910e:	46bd      	mov	sp, r7
 8019110:	bd80      	pop	{r7, pc}

08019112 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019112:	b580      	push	{r7, lr}
 8019114:	b084      	sub	sp, #16
 8019116:	af00      	add	r7, sp, #0
 8019118:	6078      	str	r0, [r7, #4]
 801911a:	4608      	mov	r0, r1
 801911c:	4611      	mov	r1, r2
 801911e:	461a      	mov	r2, r3
 8019120:	4603      	mov	r3, r0
 8019122:	70fb      	strb	r3, [r7, #3]
 8019124:	460b      	mov	r3, r1
 8019126:	70bb      	strb	r3, [r7, #2]
 8019128:	4613      	mov	r3, r2
 801912a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801912c:	2300      	movs	r3, #0
 801912e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019130:	2300      	movs	r3, #0
 8019132:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801913a:	78bb      	ldrb	r3, [r7, #2]
 801913c:	883a      	ldrh	r2, [r7, #0]
 801913e:	78f9      	ldrb	r1, [r7, #3]
 8019140:	f7ef fd2d 	bl	8008b9e <HAL_PCD_EP_Open>
 8019144:	4603      	mov	r3, r0
 8019146:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019148:	7bfb      	ldrb	r3, [r7, #15]
 801914a:	4618      	mov	r0, r3
 801914c:	f000 f924 	bl	8019398 <USBD_Get_USB_Status>
 8019150:	4603      	mov	r3, r0
 8019152:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019154:	7bbb      	ldrb	r3, [r7, #14]
}
 8019156:	4618      	mov	r0, r3
 8019158:	3710      	adds	r7, #16
 801915a:	46bd      	mov	sp, r7
 801915c:	bd80      	pop	{r7, pc}

0801915e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801915e:	b580      	push	{r7, lr}
 8019160:	b084      	sub	sp, #16
 8019162:	af00      	add	r7, sp, #0
 8019164:	6078      	str	r0, [r7, #4]
 8019166:	460b      	mov	r3, r1
 8019168:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801916a:	2300      	movs	r3, #0
 801916c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801916e:	2300      	movs	r3, #0
 8019170:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8019172:	687b      	ldr	r3, [r7, #4]
 8019174:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019178:	78fa      	ldrb	r2, [r7, #3]
 801917a:	4611      	mov	r1, r2
 801917c:	4618      	mov	r0, r3
 801917e:	f7ef fd76 	bl	8008c6e <HAL_PCD_EP_Close>
 8019182:	4603      	mov	r3, r0
 8019184:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019186:	7bfb      	ldrb	r3, [r7, #15]
 8019188:	4618      	mov	r0, r3
 801918a:	f000 f905 	bl	8019398 <USBD_Get_USB_Status>
 801918e:	4603      	mov	r3, r0
 8019190:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019192:	7bbb      	ldrb	r3, [r7, #14]
}
 8019194:	4618      	mov	r0, r3
 8019196:	3710      	adds	r7, #16
 8019198:	46bd      	mov	sp, r7
 801919a:	bd80      	pop	{r7, pc}

0801919c <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801919c:	b580      	push	{r7, lr}
 801919e:	b084      	sub	sp, #16
 80191a0:	af00      	add	r7, sp, #0
 80191a2:	6078      	str	r0, [r7, #4]
 80191a4:	460b      	mov	r3, r1
 80191a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80191a8:	2300      	movs	r3, #0
 80191aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80191ac:	2300      	movs	r3, #0
 80191ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80191b0:	687b      	ldr	r3, [r7, #4]
 80191b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80191b6:	78fa      	ldrb	r2, [r7, #3]
 80191b8:	4611      	mov	r1, r2
 80191ba:	4618      	mov	r0, r3
 80191bc:	f7ef ff08 	bl	8008fd0 <HAL_PCD_EP_Flush>
 80191c0:	4603      	mov	r3, r0
 80191c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80191c4:	7bfb      	ldrb	r3, [r7, #15]
 80191c6:	4618      	mov	r0, r3
 80191c8:	f000 f8e6 	bl	8019398 <USBD_Get_USB_Status>
 80191cc:	4603      	mov	r3, r0
 80191ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80191d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80191d2:	4618      	mov	r0, r3
 80191d4:	3710      	adds	r7, #16
 80191d6:	46bd      	mov	sp, r7
 80191d8:	bd80      	pop	{r7, pc}

080191da <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80191da:	b580      	push	{r7, lr}
 80191dc:	b084      	sub	sp, #16
 80191de:	af00      	add	r7, sp, #0
 80191e0:	6078      	str	r0, [r7, #4]
 80191e2:	460b      	mov	r3, r1
 80191e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80191e6:	2300      	movs	r3, #0
 80191e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80191ea:	2300      	movs	r3, #0
 80191ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80191f4:	78fa      	ldrb	r2, [r7, #3]
 80191f6:	4611      	mov	r1, r2
 80191f8:	4618      	mov	r0, r3
 80191fa:	f7ef fe2f 	bl	8008e5c <HAL_PCD_EP_SetStall>
 80191fe:	4603      	mov	r3, r0
 8019200:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019202:	7bfb      	ldrb	r3, [r7, #15]
 8019204:	4618      	mov	r0, r3
 8019206:	f000 f8c7 	bl	8019398 <USBD_Get_USB_Status>
 801920a:	4603      	mov	r3, r0
 801920c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801920e:	7bbb      	ldrb	r3, [r7, #14]
}
 8019210:	4618      	mov	r0, r3
 8019212:	3710      	adds	r7, #16
 8019214:	46bd      	mov	sp, r7
 8019216:	bd80      	pop	{r7, pc}

08019218 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019218:	b580      	push	{r7, lr}
 801921a:	b084      	sub	sp, #16
 801921c:	af00      	add	r7, sp, #0
 801921e:	6078      	str	r0, [r7, #4]
 8019220:	460b      	mov	r3, r1
 8019222:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019224:	2300      	movs	r3, #0
 8019226:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019228:	2300      	movs	r3, #0
 801922a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019232:	78fa      	ldrb	r2, [r7, #3]
 8019234:	4611      	mov	r1, r2
 8019236:	4618      	mov	r0, r3
 8019238:	f7ef fe74 	bl	8008f24 <HAL_PCD_EP_ClrStall>
 801923c:	4603      	mov	r3, r0
 801923e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019240:	7bfb      	ldrb	r3, [r7, #15]
 8019242:	4618      	mov	r0, r3
 8019244:	f000 f8a8 	bl	8019398 <USBD_Get_USB_Status>
 8019248:	4603      	mov	r3, r0
 801924a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801924c:	7bbb      	ldrb	r3, [r7, #14]
}
 801924e:	4618      	mov	r0, r3
 8019250:	3710      	adds	r7, #16
 8019252:	46bd      	mov	sp, r7
 8019254:	bd80      	pop	{r7, pc}

08019256 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019256:	b480      	push	{r7}
 8019258:	b085      	sub	sp, #20
 801925a:	af00      	add	r7, sp, #0
 801925c:	6078      	str	r0, [r7, #4]
 801925e:	460b      	mov	r3, r1
 8019260:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019262:	687b      	ldr	r3, [r7, #4]
 8019264:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019268:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801926a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801926e:	2b00      	cmp	r3, #0
 8019270:	da0b      	bge.n	801928a <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019272:	78fb      	ldrb	r3, [r7, #3]
 8019274:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019278:	68f9      	ldr	r1, [r7, #12]
 801927a:	4613      	mov	r3, r2
 801927c:	00db      	lsls	r3, r3, #3
 801927e:	1a9b      	subs	r3, r3, r2
 8019280:	009b      	lsls	r3, r3, #2
 8019282:	440b      	add	r3, r1
 8019284:	333e      	adds	r3, #62	; 0x3e
 8019286:	781b      	ldrb	r3, [r3, #0]
 8019288:	e00b      	b.n	80192a2 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801928a:	78fb      	ldrb	r3, [r7, #3]
 801928c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019290:	68f9      	ldr	r1, [r7, #12]
 8019292:	4613      	mov	r3, r2
 8019294:	00db      	lsls	r3, r3, #3
 8019296:	1a9b      	subs	r3, r3, r2
 8019298:	009b      	lsls	r3, r3, #2
 801929a:	440b      	add	r3, r1
 801929c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80192a0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80192a2:	4618      	mov	r0, r3
 80192a4:	3714      	adds	r7, #20
 80192a6:	46bd      	mov	sp, r7
 80192a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192ac:	4770      	bx	lr

080192ae <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80192ae:	b580      	push	{r7, lr}
 80192b0:	b084      	sub	sp, #16
 80192b2:	af00      	add	r7, sp, #0
 80192b4:	6078      	str	r0, [r7, #4]
 80192b6:	460b      	mov	r3, r1
 80192b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80192ba:	2300      	movs	r3, #0
 80192bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80192be:	2300      	movs	r3, #0
 80192c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80192c2:	687b      	ldr	r3, [r7, #4]
 80192c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80192c8:	78fa      	ldrb	r2, [r7, #3]
 80192ca:	4611      	mov	r1, r2
 80192cc:	4618      	mov	r0, r3
 80192ce:	f7ef fc41 	bl	8008b54 <HAL_PCD_SetAddress>
 80192d2:	4603      	mov	r3, r0
 80192d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80192d6:	7bfb      	ldrb	r3, [r7, #15]
 80192d8:	4618      	mov	r0, r3
 80192da:	f000 f85d 	bl	8019398 <USBD_Get_USB_Status>
 80192de:	4603      	mov	r3, r0
 80192e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80192e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80192e4:	4618      	mov	r0, r3
 80192e6:	3710      	adds	r7, #16
 80192e8:	46bd      	mov	sp, r7
 80192ea:	bd80      	pop	{r7, pc}

080192ec <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80192ec:	b580      	push	{r7, lr}
 80192ee:	b086      	sub	sp, #24
 80192f0:	af00      	add	r7, sp, #0
 80192f2:	60f8      	str	r0, [r7, #12]
 80192f4:	607a      	str	r2, [r7, #4]
 80192f6:	603b      	str	r3, [r7, #0]
 80192f8:	460b      	mov	r3, r1
 80192fa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80192fc:	2300      	movs	r3, #0
 80192fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019300:	2300      	movs	r3, #0
 8019302:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8019304:	68fb      	ldr	r3, [r7, #12]
 8019306:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801930a:	7af9      	ldrb	r1, [r7, #11]
 801930c:	683b      	ldr	r3, [r7, #0]
 801930e:	687a      	ldr	r2, [r7, #4]
 8019310:	f7ef fd5a 	bl	8008dc8 <HAL_PCD_EP_Transmit>
 8019314:	4603      	mov	r3, r0
 8019316:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019318:	7dfb      	ldrb	r3, [r7, #23]
 801931a:	4618      	mov	r0, r3
 801931c:	f000 f83c 	bl	8019398 <USBD_Get_USB_Status>
 8019320:	4603      	mov	r3, r0
 8019322:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019324:	7dbb      	ldrb	r3, [r7, #22]
}
 8019326:	4618      	mov	r0, r3
 8019328:	3718      	adds	r7, #24
 801932a:	46bd      	mov	sp, r7
 801932c:	bd80      	pop	{r7, pc}

0801932e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801932e:	b580      	push	{r7, lr}
 8019330:	b086      	sub	sp, #24
 8019332:	af00      	add	r7, sp, #0
 8019334:	60f8      	str	r0, [r7, #12]
 8019336:	607a      	str	r2, [r7, #4]
 8019338:	603b      	str	r3, [r7, #0]
 801933a:	460b      	mov	r3, r1
 801933c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801933e:	2300      	movs	r3, #0
 8019340:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019342:	2300      	movs	r3, #0
 8019344:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019346:	68fb      	ldr	r3, [r7, #12]
 8019348:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801934c:	7af9      	ldrb	r1, [r7, #11]
 801934e:	683b      	ldr	r3, [r7, #0]
 8019350:	687a      	ldr	r2, [r7, #4]
 8019352:	f7ef fcd6 	bl	8008d02 <HAL_PCD_EP_Receive>
 8019356:	4603      	mov	r3, r0
 8019358:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801935a:	7dfb      	ldrb	r3, [r7, #23]
 801935c:	4618      	mov	r0, r3
 801935e:	f000 f81b 	bl	8019398 <USBD_Get_USB_Status>
 8019362:	4603      	mov	r3, r0
 8019364:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019366:	7dbb      	ldrb	r3, [r7, #22]
}
 8019368:	4618      	mov	r0, r3
 801936a:	3718      	adds	r7, #24
 801936c:	46bd      	mov	sp, r7
 801936e:	bd80      	pop	{r7, pc}

08019370 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019370:	b580      	push	{r7, lr}
 8019372:	b082      	sub	sp, #8
 8019374:	af00      	add	r7, sp, #0
 8019376:	6078      	str	r0, [r7, #4]
 8019378:	460b      	mov	r3, r1
 801937a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019382:	78fa      	ldrb	r2, [r7, #3]
 8019384:	4611      	mov	r1, r2
 8019386:	4618      	mov	r0, r3
 8019388:	f7ef fd06 	bl	8008d98 <HAL_PCD_EP_GetRxCount>
 801938c:	4603      	mov	r3, r0
}
 801938e:	4618      	mov	r0, r3
 8019390:	3708      	adds	r7, #8
 8019392:	46bd      	mov	sp, r7
 8019394:	bd80      	pop	{r7, pc}
	...

08019398 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019398:	b480      	push	{r7}
 801939a:	b085      	sub	sp, #20
 801939c:	af00      	add	r7, sp, #0
 801939e:	4603      	mov	r3, r0
 80193a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80193a2:	2300      	movs	r3, #0
 80193a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80193a6:	79fb      	ldrb	r3, [r7, #7]
 80193a8:	2b03      	cmp	r3, #3
 80193aa:	d817      	bhi.n	80193dc <USBD_Get_USB_Status+0x44>
 80193ac:	a201      	add	r2, pc, #4	; (adr r2, 80193b4 <USBD_Get_USB_Status+0x1c>)
 80193ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80193b2:	bf00      	nop
 80193b4:	080193c5 	.word	0x080193c5
 80193b8:	080193cb 	.word	0x080193cb
 80193bc:	080193d1 	.word	0x080193d1
 80193c0:	080193d7 	.word	0x080193d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80193c4:	2300      	movs	r3, #0
 80193c6:	73fb      	strb	r3, [r7, #15]
    break;
 80193c8:	e00b      	b.n	80193e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80193ca:	2303      	movs	r3, #3
 80193cc:	73fb      	strb	r3, [r7, #15]
    break;
 80193ce:	e008      	b.n	80193e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80193d0:	2301      	movs	r3, #1
 80193d2:	73fb      	strb	r3, [r7, #15]
    break;
 80193d4:	e005      	b.n	80193e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80193d6:	2303      	movs	r3, #3
 80193d8:	73fb      	strb	r3, [r7, #15]
    break;
 80193da:	e002      	b.n	80193e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80193dc:	2303      	movs	r3, #3
 80193de:	73fb      	strb	r3, [r7, #15]
    break;
 80193e0:	bf00      	nop
  }
  return usb_status;
 80193e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80193e4:	4618      	mov	r0, r3
 80193e6:	3714      	adds	r7, #20
 80193e8:	46bd      	mov	sp, r7
 80193ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193ee:	4770      	bx	lr

080193f0 <__errno>:
 80193f0:	4b01      	ldr	r3, [pc, #4]	; (80193f8 <__errno+0x8>)
 80193f2:	6818      	ldr	r0, [r3, #0]
 80193f4:	4770      	bx	lr
 80193f6:	bf00      	nop
 80193f8:	24000178 	.word	0x24000178

080193fc <__libc_init_array>:
 80193fc:	b570      	push	{r4, r5, r6, lr}
 80193fe:	4e0d      	ldr	r6, [pc, #52]	; (8019434 <__libc_init_array+0x38>)
 8019400:	4c0d      	ldr	r4, [pc, #52]	; (8019438 <__libc_init_array+0x3c>)
 8019402:	1ba4      	subs	r4, r4, r6
 8019404:	10a4      	asrs	r4, r4, #2
 8019406:	2500      	movs	r5, #0
 8019408:	42a5      	cmp	r5, r4
 801940a:	d109      	bne.n	8019420 <__libc_init_array+0x24>
 801940c:	4e0b      	ldr	r6, [pc, #44]	; (801943c <__libc_init_array+0x40>)
 801940e:	4c0c      	ldr	r4, [pc, #48]	; (8019440 <__libc_init_array+0x44>)
 8019410:	f001 f97a 	bl	801a708 <_init>
 8019414:	1ba4      	subs	r4, r4, r6
 8019416:	10a4      	asrs	r4, r4, #2
 8019418:	2500      	movs	r5, #0
 801941a:	42a5      	cmp	r5, r4
 801941c:	d105      	bne.n	801942a <__libc_init_array+0x2e>
 801941e:	bd70      	pop	{r4, r5, r6, pc}
 8019420:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8019424:	4798      	blx	r3
 8019426:	3501      	adds	r5, #1
 8019428:	e7ee      	b.n	8019408 <__libc_init_array+0xc>
 801942a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801942e:	4798      	blx	r3
 8019430:	3501      	adds	r5, #1
 8019432:	e7f2      	b.n	801941a <__libc_init_array+0x1e>
 8019434:	0801b0bc 	.word	0x0801b0bc
 8019438:	0801b0bc 	.word	0x0801b0bc
 801943c:	0801b0bc 	.word	0x0801b0bc
 8019440:	0801b0c0 	.word	0x0801b0c0

08019444 <malloc>:
 8019444:	4b02      	ldr	r3, [pc, #8]	; (8019450 <malloc+0xc>)
 8019446:	4601      	mov	r1, r0
 8019448:	6818      	ldr	r0, [r3, #0]
 801944a:	f000 b86d 	b.w	8019528 <_malloc_r>
 801944e:	bf00      	nop
 8019450:	24000178 	.word	0x24000178

08019454 <free>:
 8019454:	4b02      	ldr	r3, [pc, #8]	; (8019460 <free+0xc>)
 8019456:	4601      	mov	r1, r0
 8019458:	6818      	ldr	r0, [r3, #0]
 801945a:	f000 b817 	b.w	801948c <_free_r>
 801945e:	bf00      	nop
 8019460:	24000178 	.word	0x24000178

08019464 <memcpy>:
 8019464:	b510      	push	{r4, lr}
 8019466:	1e43      	subs	r3, r0, #1
 8019468:	440a      	add	r2, r1
 801946a:	4291      	cmp	r1, r2
 801946c:	d100      	bne.n	8019470 <memcpy+0xc>
 801946e:	bd10      	pop	{r4, pc}
 8019470:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019474:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019478:	e7f7      	b.n	801946a <memcpy+0x6>

0801947a <memset>:
 801947a:	4402      	add	r2, r0
 801947c:	4603      	mov	r3, r0
 801947e:	4293      	cmp	r3, r2
 8019480:	d100      	bne.n	8019484 <memset+0xa>
 8019482:	4770      	bx	lr
 8019484:	f803 1b01 	strb.w	r1, [r3], #1
 8019488:	e7f9      	b.n	801947e <memset+0x4>
	...

0801948c <_free_r>:
 801948c:	b538      	push	{r3, r4, r5, lr}
 801948e:	4605      	mov	r5, r0
 8019490:	2900      	cmp	r1, #0
 8019492:	d045      	beq.n	8019520 <_free_r+0x94>
 8019494:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019498:	1f0c      	subs	r4, r1, #4
 801949a:	2b00      	cmp	r3, #0
 801949c:	bfb8      	it	lt
 801949e:	18e4      	addlt	r4, r4, r3
 80194a0:	f000 fc22 	bl	8019ce8 <__malloc_lock>
 80194a4:	4a1f      	ldr	r2, [pc, #124]	; (8019524 <_free_r+0x98>)
 80194a6:	6813      	ldr	r3, [r2, #0]
 80194a8:	4610      	mov	r0, r2
 80194aa:	b933      	cbnz	r3, 80194ba <_free_r+0x2e>
 80194ac:	6063      	str	r3, [r4, #4]
 80194ae:	6014      	str	r4, [r2, #0]
 80194b0:	4628      	mov	r0, r5
 80194b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80194b6:	f000 bc18 	b.w	8019cea <__malloc_unlock>
 80194ba:	42a3      	cmp	r3, r4
 80194bc:	d90c      	bls.n	80194d8 <_free_r+0x4c>
 80194be:	6821      	ldr	r1, [r4, #0]
 80194c0:	1862      	adds	r2, r4, r1
 80194c2:	4293      	cmp	r3, r2
 80194c4:	bf04      	itt	eq
 80194c6:	681a      	ldreq	r2, [r3, #0]
 80194c8:	685b      	ldreq	r3, [r3, #4]
 80194ca:	6063      	str	r3, [r4, #4]
 80194cc:	bf04      	itt	eq
 80194ce:	1852      	addeq	r2, r2, r1
 80194d0:	6022      	streq	r2, [r4, #0]
 80194d2:	6004      	str	r4, [r0, #0]
 80194d4:	e7ec      	b.n	80194b0 <_free_r+0x24>
 80194d6:	4613      	mov	r3, r2
 80194d8:	685a      	ldr	r2, [r3, #4]
 80194da:	b10a      	cbz	r2, 80194e0 <_free_r+0x54>
 80194dc:	42a2      	cmp	r2, r4
 80194de:	d9fa      	bls.n	80194d6 <_free_r+0x4a>
 80194e0:	6819      	ldr	r1, [r3, #0]
 80194e2:	1858      	adds	r0, r3, r1
 80194e4:	42a0      	cmp	r0, r4
 80194e6:	d10b      	bne.n	8019500 <_free_r+0x74>
 80194e8:	6820      	ldr	r0, [r4, #0]
 80194ea:	4401      	add	r1, r0
 80194ec:	1858      	adds	r0, r3, r1
 80194ee:	4282      	cmp	r2, r0
 80194f0:	6019      	str	r1, [r3, #0]
 80194f2:	d1dd      	bne.n	80194b0 <_free_r+0x24>
 80194f4:	6810      	ldr	r0, [r2, #0]
 80194f6:	6852      	ldr	r2, [r2, #4]
 80194f8:	605a      	str	r2, [r3, #4]
 80194fa:	4401      	add	r1, r0
 80194fc:	6019      	str	r1, [r3, #0]
 80194fe:	e7d7      	b.n	80194b0 <_free_r+0x24>
 8019500:	d902      	bls.n	8019508 <_free_r+0x7c>
 8019502:	230c      	movs	r3, #12
 8019504:	602b      	str	r3, [r5, #0]
 8019506:	e7d3      	b.n	80194b0 <_free_r+0x24>
 8019508:	6820      	ldr	r0, [r4, #0]
 801950a:	1821      	adds	r1, r4, r0
 801950c:	428a      	cmp	r2, r1
 801950e:	bf04      	itt	eq
 8019510:	6811      	ldreq	r1, [r2, #0]
 8019512:	6852      	ldreq	r2, [r2, #4]
 8019514:	6062      	str	r2, [r4, #4]
 8019516:	bf04      	itt	eq
 8019518:	1809      	addeq	r1, r1, r0
 801951a:	6021      	streq	r1, [r4, #0]
 801951c:	605c      	str	r4, [r3, #4]
 801951e:	e7c7      	b.n	80194b0 <_free_r+0x24>
 8019520:	bd38      	pop	{r3, r4, r5, pc}
 8019522:	bf00      	nop
 8019524:	24000b90 	.word	0x24000b90

08019528 <_malloc_r>:
 8019528:	b570      	push	{r4, r5, r6, lr}
 801952a:	1ccd      	adds	r5, r1, #3
 801952c:	f025 0503 	bic.w	r5, r5, #3
 8019530:	3508      	adds	r5, #8
 8019532:	2d0c      	cmp	r5, #12
 8019534:	bf38      	it	cc
 8019536:	250c      	movcc	r5, #12
 8019538:	2d00      	cmp	r5, #0
 801953a:	4606      	mov	r6, r0
 801953c:	db01      	blt.n	8019542 <_malloc_r+0x1a>
 801953e:	42a9      	cmp	r1, r5
 8019540:	d903      	bls.n	801954a <_malloc_r+0x22>
 8019542:	230c      	movs	r3, #12
 8019544:	6033      	str	r3, [r6, #0]
 8019546:	2000      	movs	r0, #0
 8019548:	bd70      	pop	{r4, r5, r6, pc}
 801954a:	f000 fbcd 	bl	8019ce8 <__malloc_lock>
 801954e:	4a21      	ldr	r2, [pc, #132]	; (80195d4 <_malloc_r+0xac>)
 8019550:	6814      	ldr	r4, [r2, #0]
 8019552:	4621      	mov	r1, r4
 8019554:	b991      	cbnz	r1, 801957c <_malloc_r+0x54>
 8019556:	4c20      	ldr	r4, [pc, #128]	; (80195d8 <_malloc_r+0xb0>)
 8019558:	6823      	ldr	r3, [r4, #0]
 801955a:	b91b      	cbnz	r3, 8019564 <_malloc_r+0x3c>
 801955c:	4630      	mov	r0, r6
 801955e:	f000 f8b9 	bl	80196d4 <_sbrk_r>
 8019562:	6020      	str	r0, [r4, #0]
 8019564:	4629      	mov	r1, r5
 8019566:	4630      	mov	r0, r6
 8019568:	f000 f8b4 	bl	80196d4 <_sbrk_r>
 801956c:	1c43      	adds	r3, r0, #1
 801956e:	d124      	bne.n	80195ba <_malloc_r+0x92>
 8019570:	230c      	movs	r3, #12
 8019572:	6033      	str	r3, [r6, #0]
 8019574:	4630      	mov	r0, r6
 8019576:	f000 fbb8 	bl	8019cea <__malloc_unlock>
 801957a:	e7e4      	b.n	8019546 <_malloc_r+0x1e>
 801957c:	680b      	ldr	r3, [r1, #0]
 801957e:	1b5b      	subs	r3, r3, r5
 8019580:	d418      	bmi.n	80195b4 <_malloc_r+0x8c>
 8019582:	2b0b      	cmp	r3, #11
 8019584:	d90f      	bls.n	80195a6 <_malloc_r+0x7e>
 8019586:	600b      	str	r3, [r1, #0]
 8019588:	50cd      	str	r5, [r1, r3]
 801958a:	18cc      	adds	r4, r1, r3
 801958c:	4630      	mov	r0, r6
 801958e:	f000 fbac 	bl	8019cea <__malloc_unlock>
 8019592:	f104 000b 	add.w	r0, r4, #11
 8019596:	1d23      	adds	r3, r4, #4
 8019598:	f020 0007 	bic.w	r0, r0, #7
 801959c:	1ac3      	subs	r3, r0, r3
 801959e:	d0d3      	beq.n	8019548 <_malloc_r+0x20>
 80195a0:	425a      	negs	r2, r3
 80195a2:	50e2      	str	r2, [r4, r3]
 80195a4:	e7d0      	b.n	8019548 <_malloc_r+0x20>
 80195a6:	428c      	cmp	r4, r1
 80195a8:	684b      	ldr	r3, [r1, #4]
 80195aa:	bf16      	itet	ne
 80195ac:	6063      	strne	r3, [r4, #4]
 80195ae:	6013      	streq	r3, [r2, #0]
 80195b0:	460c      	movne	r4, r1
 80195b2:	e7eb      	b.n	801958c <_malloc_r+0x64>
 80195b4:	460c      	mov	r4, r1
 80195b6:	6849      	ldr	r1, [r1, #4]
 80195b8:	e7cc      	b.n	8019554 <_malloc_r+0x2c>
 80195ba:	1cc4      	adds	r4, r0, #3
 80195bc:	f024 0403 	bic.w	r4, r4, #3
 80195c0:	42a0      	cmp	r0, r4
 80195c2:	d005      	beq.n	80195d0 <_malloc_r+0xa8>
 80195c4:	1a21      	subs	r1, r4, r0
 80195c6:	4630      	mov	r0, r6
 80195c8:	f000 f884 	bl	80196d4 <_sbrk_r>
 80195cc:	3001      	adds	r0, #1
 80195ce:	d0cf      	beq.n	8019570 <_malloc_r+0x48>
 80195d0:	6025      	str	r5, [r4, #0]
 80195d2:	e7db      	b.n	801958c <_malloc_r+0x64>
 80195d4:	24000b90 	.word	0x24000b90
 80195d8:	24000b94 	.word	0x24000b94

080195dc <iprintf>:
 80195dc:	b40f      	push	{r0, r1, r2, r3}
 80195de:	4b0a      	ldr	r3, [pc, #40]	; (8019608 <iprintf+0x2c>)
 80195e0:	b513      	push	{r0, r1, r4, lr}
 80195e2:	681c      	ldr	r4, [r3, #0]
 80195e4:	b124      	cbz	r4, 80195f0 <iprintf+0x14>
 80195e6:	69a3      	ldr	r3, [r4, #24]
 80195e8:	b913      	cbnz	r3, 80195f0 <iprintf+0x14>
 80195ea:	4620      	mov	r0, r4
 80195ec:	f000 fa8e 	bl	8019b0c <__sinit>
 80195f0:	ab05      	add	r3, sp, #20
 80195f2:	9a04      	ldr	r2, [sp, #16]
 80195f4:	68a1      	ldr	r1, [r4, #8]
 80195f6:	9301      	str	r3, [sp, #4]
 80195f8:	4620      	mov	r0, r4
 80195fa:	f000 fcf3 	bl	8019fe4 <_vfiprintf_r>
 80195fe:	b002      	add	sp, #8
 8019600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019604:	b004      	add	sp, #16
 8019606:	4770      	bx	lr
 8019608:	24000178 	.word	0x24000178

0801960c <_puts_r>:
 801960c:	b570      	push	{r4, r5, r6, lr}
 801960e:	460e      	mov	r6, r1
 8019610:	4605      	mov	r5, r0
 8019612:	b118      	cbz	r0, 801961c <_puts_r+0x10>
 8019614:	6983      	ldr	r3, [r0, #24]
 8019616:	b90b      	cbnz	r3, 801961c <_puts_r+0x10>
 8019618:	f000 fa78 	bl	8019b0c <__sinit>
 801961c:	69ab      	ldr	r3, [r5, #24]
 801961e:	68ac      	ldr	r4, [r5, #8]
 8019620:	b913      	cbnz	r3, 8019628 <_puts_r+0x1c>
 8019622:	4628      	mov	r0, r5
 8019624:	f000 fa72 	bl	8019b0c <__sinit>
 8019628:	4b23      	ldr	r3, [pc, #140]	; (80196b8 <_puts_r+0xac>)
 801962a:	429c      	cmp	r4, r3
 801962c:	d117      	bne.n	801965e <_puts_r+0x52>
 801962e:	686c      	ldr	r4, [r5, #4]
 8019630:	89a3      	ldrh	r3, [r4, #12]
 8019632:	071b      	lsls	r3, r3, #28
 8019634:	d51d      	bpl.n	8019672 <_puts_r+0x66>
 8019636:	6923      	ldr	r3, [r4, #16]
 8019638:	b1db      	cbz	r3, 8019672 <_puts_r+0x66>
 801963a:	3e01      	subs	r6, #1
 801963c:	68a3      	ldr	r3, [r4, #8]
 801963e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019642:	3b01      	subs	r3, #1
 8019644:	60a3      	str	r3, [r4, #8]
 8019646:	b9e9      	cbnz	r1, 8019684 <_puts_r+0x78>
 8019648:	2b00      	cmp	r3, #0
 801964a:	da2e      	bge.n	80196aa <_puts_r+0x9e>
 801964c:	4622      	mov	r2, r4
 801964e:	210a      	movs	r1, #10
 8019650:	4628      	mov	r0, r5
 8019652:	f000 f8ab 	bl	80197ac <__swbuf_r>
 8019656:	3001      	adds	r0, #1
 8019658:	d011      	beq.n	801967e <_puts_r+0x72>
 801965a:	200a      	movs	r0, #10
 801965c:	e011      	b.n	8019682 <_puts_r+0x76>
 801965e:	4b17      	ldr	r3, [pc, #92]	; (80196bc <_puts_r+0xb0>)
 8019660:	429c      	cmp	r4, r3
 8019662:	d101      	bne.n	8019668 <_puts_r+0x5c>
 8019664:	68ac      	ldr	r4, [r5, #8]
 8019666:	e7e3      	b.n	8019630 <_puts_r+0x24>
 8019668:	4b15      	ldr	r3, [pc, #84]	; (80196c0 <_puts_r+0xb4>)
 801966a:	429c      	cmp	r4, r3
 801966c:	bf08      	it	eq
 801966e:	68ec      	ldreq	r4, [r5, #12]
 8019670:	e7de      	b.n	8019630 <_puts_r+0x24>
 8019672:	4621      	mov	r1, r4
 8019674:	4628      	mov	r0, r5
 8019676:	f000 f8eb 	bl	8019850 <__swsetup_r>
 801967a:	2800      	cmp	r0, #0
 801967c:	d0dd      	beq.n	801963a <_puts_r+0x2e>
 801967e:	f04f 30ff 	mov.w	r0, #4294967295
 8019682:	bd70      	pop	{r4, r5, r6, pc}
 8019684:	2b00      	cmp	r3, #0
 8019686:	da04      	bge.n	8019692 <_puts_r+0x86>
 8019688:	69a2      	ldr	r2, [r4, #24]
 801968a:	429a      	cmp	r2, r3
 801968c:	dc06      	bgt.n	801969c <_puts_r+0x90>
 801968e:	290a      	cmp	r1, #10
 8019690:	d004      	beq.n	801969c <_puts_r+0x90>
 8019692:	6823      	ldr	r3, [r4, #0]
 8019694:	1c5a      	adds	r2, r3, #1
 8019696:	6022      	str	r2, [r4, #0]
 8019698:	7019      	strb	r1, [r3, #0]
 801969a:	e7cf      	b.n	801963c <_puts_r+0x30>
 801969c:	4622      	mov	r2, r4
 801969e:	4628      	mov	r0, r5
 80196a0:	f000 f884 	bl	80197ac <__swbuf_r>
 80196a4:	3001      	adds	r0, #1
 80196a6:	d1c9      	bne.n	801963c <_puts_r+0x30>
 80196a8:	e7e9      	b.n	801967e <_puts_r+0x72>
 80196aa:	6823      	ldr	r3, [r4, #0]
 80196ac:	200a      	movs	r0, #10
 80196ae:	1c5a      	adds	r2, r3, #1
 80196b0:	6022      	str	r2, [r4, #0]
 80196b2:	7018      	strb	r0, [r3, #0]
 80196b4:	e7e5      	b.n	8019682 <_puts_r+0x76>
 80196b6:	bf00      	nop
 80196b8:	0801b040 	.word	0x0801b040
 80196bc:	0801b060 	.word	0x0801b060
 80196c0:	0801b020 	.word	0x0801b020

080196c4 <puts>:
 80196c4:	4b02      	ldr	r3, [pc, #8]	; (80196d0 <puts+0xc>)
 80196c6:	4601      	mov	r1, r0
 80196c8:	6818      	ldr	r0, [r3, #0]
 80196ca:	f7ff bf9f 	b.w	801960c <_puts_r>
 80196ce:	bf00      	nop
 80196d0:	24000178 	.word	0x24000178

080196d4 <_sbrk_r>:
 80196d4:	b538      	push	{r3, r4, r5, lr}
 80196d6:	4c06      	ldr	r4, [pc, #24]	; (80196f0 <_sbrk_r+0x1c>)
 80196d8:	2300      	movs	r3, #0
 80196da:	4605      	mov	r5, r0
 80196dc:	4608      	mov	r0, r1
 80196de:	6023      	str	r3, [r4, #0]
 80196e0:	f7ea fdf8 	bl	80042d4 <_sbrk>
 80196e4:	1c43      	adds	r3, r0, #1
 80196e6:	d102      	bne.n	80196ee <_sbrk_r+0x1a>
 80196e8:	6823      	ldr	r3, [r4, #0]
 80196ea:	b103      	cbz	r3, 80196ee <_sbrk_r+0x1a>
 80196ec:	602b      	str	r3, [r5, #0]
 80196ee:	bd38      	pop	{r3, r4, r5, pc}
 80196f0:	2400248c 	.word	0x2400248c

080196f4 <sniprintf>:
 80196f4:	b40c      	push	{r2, r3}
 80196f6:	b530      	push	{r4, r5, lr}
 80196f8:	4b17      	ldr	r3, [pc, #92]	; (8019758 <sniprintf+0x64>)
 80196fa:	1e0c      	subs	r4, r1, #0
 80196fc:	b09d      	sub	sp, #116	; 0x74
 80196fe:	681d      	ldr	r5, [r3, #0]
 8019700:	da08      	bge.n	8019714 <sniprintf+0x20>
 8019702:	238b      	movs	r3, #139	; 0x8b
 8019704:	602b      	str	r3, [r5, #0]
 8019706:	f04f 30ff 	mov.w	r0, #4294967295
 801970a:	b01d      	add	sp, #116	; 0x74
 801970c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019710:	b002      	add	sp, #8
 8019712:	4770      	bx	lr
 8019714:	f44f 7302 	mov.w	r3, #520	; 0x208
 8019718:	f8ad 3014 	strh.w	r3, [sp, #20]
 801971c:	bf14      	ite	ne
 801971e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8019722:	4623      	moveq	r3, r4
 8019724:	9304      	str	r3, [sp, #16]
 8019726:	9307      	str	r3, [sp, #28]
 8019728:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801972c:	9002      	str	r0, [sp, #8]
 801972e:	9006      	str	r0, [sp, #24]
 8019730:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019734:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019736:	ab21      	add	r3, sp, #132	; 0x84
 8019738:	a902      	add	r1, sp, #8
 801973a:	4628      	mov	r0, r5
 801973c:	9301      	str	r3, [sp, #4]
 801973e:	f000 fb2f 	bl	8019da0 <_svfiprintf_r>
 8019742:	1c43      	adds	r3, r0, #1
 8019744:	bfbc      	itt	lt
 8019746:	238b      	movlt	r3, #139	; 0x8b
 8019748:	602b      	strlt	r3, [r5, #0]
 801974a:	2c00      	cmp	r4, #0
 801974c:	d0dd      	beq.n	801970a <sniprintf+0x16>
 801974e:	9b02      	ldr	r3, [sp, #8]
 8019750:	2200      	movs	r2, #0
 8019752:	701a      	strb	r2, [r3, #0]
 8019754:	e7d9      	b.n	801970a <sniprintf+0x16>
 8019756:	bf00      	nop
 8019758:	24000178 	.word	0x24000178

0801975c <siprintf>:
 801975c:	b40e      	push	{r1, r2, r3}
 801975e:	b500      	push	{lr}
 8019760:	b09c      	sub	sp, #112	; 0x70
 8019762:	ab1d      	add	r3, sp, #116	; 0x74
 8019764:	9002      	str	r0, [sp, #8]
 8019766:	9006      	str	r0, [sp, #24]
 8019768:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801976c:	4809      	ldr	r0, [pc, #36]	; (8019794 <siprintf+0x38>)
 801976e:	9107      	str	r1, [sp, #28]
 8019770:	9104      	str	r1, [sp, #16]
 8019772:	4909      	ldr	r1, [pc, #36]	; (8019798 <siprintf+0x3c>)
 8019774:	f853 2b04 	ldr.w	r2, [r3], #4
 8019778:	9105      	str	r1, [sp, #20]
 801977a:	6800      	ldr	r0, [r0, #0]
 801977c:	9301      	str	r3, [sp, #4]
 801977e:	a902      	add	r1, sp, #8
 8019780:	f000 fb0e 	bl	8019da0 <_svfiprintf_r>
 8019784:	9b02      	ldr	r3, [sp, #8]
 8019786:	2200      	movs	r2, #0
 8019788:	701a      	strb	r2, [r3, #0]
 801978a:	b01c      	add	sp, #112	; 0x70
 801978c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019790:	b003      	add	sp, #12
 8019792:	4770      	bx	lr
 8019794:	24000178 	.word	0x24000178
 8019798:	ffff0208 	.word	0xffff0208

0801979c <strcpy>:
 801979c:	4603      	mov	r3, r0
 801979e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80197a2:	f803 2b01 	strb.w	r2, [r3], #1
 80197a6:	2a00      	cmp	r2, #0
 80197a8:	d1f9      	bne.n	801979e <strcpy+0x2>
 80197aa:	4770      	bx	lr

080197ac <__swbuf_r>:
 80197ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197ae:	460e      	mov	r6, r1
 80197b0:	4614      	mov	r4, r2
 80197b2:	4605      	mov	r5, r0
 80197b4:	b118      	cbz	r0, 80197be <__swbuf_r+0x12>
 80197b6:	6983      	ldr	r3, [r0, #24]
 80197b8:	b90b      	cbnz	r3, 80197be <__swbuf_r+0x12>
 80197ba:	f000 f9a7 	bl	8019b0c <__sinit>
 80197be:	4b21      	ldr	r3, [pc, #132]	; (8019844 <__swbuf_r+0x98>)
 80197c0:	429c      	cmp	r4, r3
 80197c2:	d12a      	bne.n	801981a <__swbuf_r+0x6e>
 80197c4:	686c      	ldr	r4, [r5, #4]
 80197c6:	69a3      	ldr	r3, [r4, #24]
 80197c8:	60a3      	str	r3, [r4, #8]
 80197ca:	89a3      	ldrh	r3, [r4, #12]
 80197cc:	071a      	lsls	r2, r3, #28
 80197ce:	d52e      	bpl.n	801982e <__swbuf_r+0x82>
 80197d0:	6923      	ldr	r3, [r4, #16]
 80197d2:	b363      	cbz	r3, 801982e <__swbuf_r+0x82>
 80197d4:	6923      	ldr	r3, [r4, #16]
 80197d6:	6820      	ldr	r0, [r4, #0]
 80197d8:	1ac0      	subs	r0, r0, r3
 80197da:	6963      	ldr	r3, [r4, #20]
 80197dc:	b2f6      	uxtb	r6, r6
 80197de:	4283      	cmp	r3, r0
 80197e0:	4637      	mov	r7, r6
 80197e2:	dc04      	bgt.n	80197ee <__swbuf_r+0x42>
 80197e4:	4621      	mov	r1, r4
 80197e6:	4628      	mov	r0, r5
 80197e8:	f000 f926 	bl	8019a38 <_fflush_r>
 80197ec:	bb28      	cbnz	r0, 801983a <__swbuf_r+0x8e>
 80197ee:	68a3      	ldr	r3, [r4, #8]
 80197f0:	3b01      	subs	r3, #1
 80197f2:	60a3      	str	r3, [r4, #8]
 80197f4:	6823      	ldr	r3, [r4, #0]
 80197f6:	1c5a      	adds	r2, r3, #1
 80197f8:	6022      	str	r2, [r4, #0]
 80197fa:	701e      	strb	r6, [r3, #0]
 80197fc:	6963      	ldr	r3, [r4, #20]
 80197fe:	3001      	adds	r0, #1
 8019800:	4283      	cmp	r3, r0
 8019802:	d004      	beq.n	801980e <__swbuf_r+0x62>
 8019804:	89a3      	ldrh	r3, [r4, #12]
 8019806:	07db      	lsls	r3, r3, #31
 8019808:	d519      	bpl.n	801983e <__swbuf_r+0x92>
 801980a:	2e0a      	cmp	r6, #10
 801980c:	d117      	bne.n	801983e <__swbuf_r+0x92>
 801980e:	4621      	mov	r1, r4
 8019810:	4628      	mov	r0, r5
 8019812:	f000 f911 	bl	8019a38 <_fflush_r>
 8019816:	b190      	cbz	r0, 801983e <__swbuf_r+0x92>
 8019818:	e00f      	b.n	801983a <__swbuf_r+0x8e>
 801981a:	4b0b      	ldr	r3, [pc, #44]	; (8019848 <__swbuf_r+0x9c>)
 801981c:	429c      	cmp	r4, r3
 801981e:	d101      	bne.n	8019824 <__swbuf_r+0x78>
 8019820:	68ac      	ldr	r4, [r5, #8]
 8019822:	e7d0      	b.n	80197c6 <__swbuf_r+0x1a>
 8019824:	4b09      	ldr	r3, [pc, #36]	; (801984c <__swbuf_r+0xa0>)
 8019826:	429c      	cmp	r4, r3
 8019828:	bf08      	it	eq
 801982a:	68ec      	ldreq	r4, [r5, #12]
 801982c:	e7cb      	b.n	80197c6 <__swbuf_r+0x1a>
 801982e:	4621      	mov	r1, r4
 8019830:	4628      	mov	r0, r5
 8019832:	f000 f80d 	bl	8019850 <__swsetup_r>
 8019836:	2800      	cmp	r0, #0
 8019838:	d0cc      	beq.n	80197d4 <__swbuf_r+0x28>
 801983a:	f04f 37ff 	mov.w	r7, #4294967295
 801983e:	4638      	mov	r0, r7
 8019840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019842:	bf00      	nop
 8019844:	0801b040 	.word	0x0801b040
 8019848:	0801b060 	.word	0x0801b060
 801984c:	0801b020 	.word	0x0801b020

08019850 <__swsetup_r>:
 8019850:	4b32      	ldr	r3, [pc, #200]	; (801991c <__swsetup_r+0xcc>)
 8019852:	b570      	push	{r4, r5, r6, lr}
 8019854:	681d      	ldr	r5, [r3, #0]
 8019856:	4606      	mov	r6, r0
 8019858:	460c      	mov	r4, r1
 801985a:	b125      	cbz	r5, 8019866 <__swsetup_r+0x16>
 801985c:	69ab      	ldr	r3, [r5, #24]
 801985e:	b913      	cbnz	r3, 8019866 <__swsetup_r+0x16>
 8019860:	4628      	mov	r0, r5
 8019862:	f000 f953 	bl	8019b0c <__sinit>
 8019866:	4b2e      	ldr	r3, [pc, #184]	; (8019920 <__swsetup_r+0xd0>)
 8019868:	429c      	cmp	r4, r3
 801986a:	d10f      	bne.n	801988c <__swsetup_r+0x3c>
 801986c:	686c      	ldr	r4, [r5, #4]
 801986e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019872:	b29a      	uxth	r2, r3
 8019874:	0715      	lsls	r5, r2, #28
 8019876:	d42c      	bmi.n	80198d2 <__swsetup_r+0x82>
 8019878:	06d0      	lsls	r0, r2, #27
 801987a:	d411      	bmi.n	80198a0 <__swsetup_r+0x50>
 801987c:	2209      	movs	r2, #9
 801987e:	6032      	str	r2, [r6, #0]
 8019880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019884:	81a3      	strh	r3, [r4, #12]
 8019886:	f04f 30ff 	mov.w	r0, #4294967295
 801988a:	e03e      	b.n	801990a <__swsetup_r+0xba>
 801988c:	4b25      	ldr	r3, [pc, #148]	; (8019924 <__swsetup_r+0xd4>)
 801988e:	429c      	cmp	r4, r3
 8019890:	d101      	bne.n	8019896 <__swsetup_r+0x46>
 8019892:	68ac      	ldr	r4, [r5, #8]
 8019894:	e7eb      	b.n	801986e <__swsetup_r+0x1e>
 8019896:	4b24      	ldr	r3, [pc, #144]	; (8019928 <__swsetup_r+0xd8>)
 8019898:	429c      	cmp	r4, r3
 801989a:	bf08      	it	eq
 801989c:	68ec      	ldreq	r4, [r5, #12]
 801989e:	e7e6      	b.n	801986e <__swsetup_r+0x1e>
 80198a0:	0751      	lsls	r1, r2, #29
 80198a2:	d512      	bpl.n	80198ca <__swsetup_r+0x7a>
 80198a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80198a6:	b141      	cbz	r1, 80198ba <__swsetup_r+0x6a>
 80198a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80198ac:	4299      	cmp	r1, r3
 80198ae:	d002      	beq.n	80198b6 <__swsetup_r+0x66>
 80198b0:	4630      	mov	r0, r6
 80198b2:	f7ff fdeb 	bl	801948c <_free_r>
 80198b6:	2300      	movs	r3, #0
 80198b8:	6363      	str	r3, [r4, #52]	; 0x34
 80198ba:	89a3      	ldrh	r3, [r4, #12]
 80198bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80198c0:	81a3      	strh	r3, [r4, #12]
 80198c2:	2300      	movs	r3, #0
 80198c4:	6063      	str	r3, [r4, #4]
 80198c6:	6923      	ldr	r3, [r4, #16]
 80198c8:	6023      	str	r3, [r4, #0]
 80198ca:	89a3      	ldrh	r3, [r4, #12]
 80198cc:	f043 0308 	orr.w	r3, r3, #8
 80198d0:	81a3      	strh	r3, [r4, #12]
 80198d2:	6923      	ldr	r3, [r4, #16]
 80198d4:	b94b      	cbnz	r3, 80198ea <__swsetup_r+0x9a>
 80198d6:	89a3      	ldrh	r3, [r4, #12]
 80198d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80198dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80198e0:	d003      	beq.n	80198ea <__swsetup_r+0x9a>
 80198e2:	4621      	mov	r1, r4
 80198e4:	4630      	mov	r0, r6
 80198e6:	f000 f9bf 	bl	8019c68 <__smakebuf_r>
 80198ea:	89a2      	ldrh	r2, [r4, #12]
 80198ec:	f012 0301 	ands.w	r3, r2, #1
 80198f0:	d00c      	beq.n	801990c <__swsetup_r+0xbc>
 80198f2:	2300      	movs	r3, #0
 80198f4:	60a3      	str	r3, [r4, #8]
 80198f6:	6963      	ldr	r3, [r4, #20]
 80198f8:	425b      	negs	r3, r3
 80198fa:	61a3      	str	r3, [r4, #24]
 80198fc:	6923      	ldr	r3, [r4, #16]
 80198fe:	b953      	cbnz	r3, 8019916 <__swsetup_r+0xc6>
 8019900:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019904:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8019908:	d1ba      	bne.n	8019880 <__swsetup_r+0x30>
 801990a:	bd70      	pop	{r4, r5, r6, pc}
 801990c:	0792      	lsls	r2, r2, #30
 801990e:	bf58      	it	pl
 8019910:	6963      	ldrpl	r3, [r4, #20]
 8019912:	60a3      	str	r3, [r4, #8]
 8019914:	e7f2      	b.n	80198fc <__swsetup_r+0xac>
 8019916:	2000      	movs	r0, #0
 8019918:	e7f7      	b.n	801990a <__swsetup_r+0xba>
 801991a:	bf00      	nop
 801991c:	24000178 	.word	0x24000178
 8019920:	0801b040 	.word	0x0801b040
 8019924:	0801b060 	.word	0x0801b060
 8019928:	0801b020 	.word	0x0801b020

0801992c <__sflush_r>:
 801992c:	898a      	ldrh	r2, [r1, #12]
 801992e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019932:	4605      	mov	r5, r0
 8019934:	0710      	lsls	r0, r2, #28
 8019936:	460c      	mov	r4, r1
 8019938:	d458      	bmi.n	80199ec <__sflush_r+0xc0>
 801993a:	684b      	ldr	r3, [r1, #4]
 801993c:	2b00      	cmp	r3, #0
 801993e:	dc05      	bgt.n	801994c <__sflush_r+0x20>
 8019940:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019942:	2b00      	cmp	r3, #0
 8019944:	dc02      	bgt.n	801994c <__sflush_r+0x20>
 8019946:	2000      	movs	r0, #0
 8019948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801994c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801994e:	2e00      	cmp	r6, #0
 8019950:	d0f9      	beq.n	8019946 <__sflush_r+0x1a>
 8019952:	2300      	movs	r3, #0
 8019954:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019958:	682f      	ldr	r7, [r5, #0]
 801995a:	6a21      	ldr	r1, [r4, #32]
 801995c:	602b      	str	r3, [r5, #0]
 801995e:	d032      	beq.n	80199c6 <__sflush_r+0x9a>
 8019960:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019962:	89a3      	ldrh	r3, [r4, #12]
 8019964:	075a      	lsls	r2, r3, #29
 8019966:	d505      	bpl.n	8019974 <__sflush_r+0x48>
 8019968:	6863      	ldr	r3, [r4, #4]
 801996a:	1ac0      	subs	r0, r0, r3
 801996c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801996e:	b10b      	cbz	r3, 8019974 <__sflush_r+0x48>
 8019970:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019972:	1ac0      	subs	r0, r0, r3
 8019974:	2300      	movs	r3, #0
 8019976:	4602      	mov	r2, r0
 8019978:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801997a:	6a21      	ldr	r1, [r4, #32]
 801997c:	4628      	mov	r0, r5
 801997e:	47b0      	blx	r6
 8019980:	1c43      	adds	r3, r0, #1
 8019982:	89a3      	ldrh	r3, [r4, #12]
 8019984:	d106      	bne.n	8019994 <__sflush_r+0x68>
 8019986:	6829      	ldr	r1, [r5, #0]
 8019988:	291d      	cmp	r1, #29
 801998a:	d848      	bhi.n	8019a1e <__sflush_r+0xf2>
 801998c:	4a29      	ldr	r2, [pc, #164]	; (8019a34 <__sflush_r+0x108>)
 801998e:	40ca      	lsrs	r2, r1
 8019990:	07d6      	lsls	r6, r2, #31
 8019992:	d544      	bpl.n	8019a1e <__sflush_r+0xf2>
 8019994:	2200      	movs	r2, #0
 8019996:	6062      	str	r2, [r4, #4]
 8019998:	04d9      	lsls	r1, r3, #19
 801999a:	6922      	ldr	r2, [r4, #16]
 801999c:	6022      	str	r2, [r4, #0]
 801999e:	d504      	bpl.n	80199aa <__sflush_r+0x7e>
 80199a0:	1c42      	adds	r2, r0, #1
 80199a2:	d101      	bne.n	80199a8 <__sflush_r+0x7c>
 80199a4:	682b      	ldr	r3, [r5, #0]
 80199a6:	b903      	cbnz	r3, 80199aa <__sflush_r+0x7e>
 80199a8:	6560      	str	r0, [r4, #84]	; 0x54
 80199aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80199ac:	602f      	str	r7, [r5, #0]
 80199ae:	2900      	cmp	r1, #0
 80199b0:	d0c9      	beq.n	8019946 <__sflush_r+0x1a>
 80199b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80199b6:	4299      	cmp	r1, r3
 80199b8:	d002      	beq.n	80199c0 <__sflush_r+0x94>
 80199ba:	4628      	mov	r0, r5
 80199bc:	f7ff fd66 	bl	801948c <_free_r>
 80199c0:	2000      	movs	r0, #0
 80199c2:	6360      	str	r0, [r4, #52]	; 0x34
 80199c4:	e7c0      	b.n	8019948 <__sflush_r+0x1c>
 80199c6:	2301      	movs	r3, #1
 80199c8:	4628      	mov	r0, r5
 80199ca:	47b0      	blx	r6
 80199cc:	1c41      	adds	r1, r0, #1
 80199ce:	d1c8      	bne.n	8019962 <__sflush_r+0x36>
 80199d0:	682b      	ldr	r3, [r5, #0]
 80199d2:	2b00      	cmp	r3, #0
 80199d4:	d0c5      	beq.n	8019962 <__sflush_r+0x36>
 80199d6:	2b1d      	cmp	r3, #29
 80199d8:	d001      	beq.n	80199de <__sflush_r+0xb2>
 80199da:	2b16      	cmp	r3, #22
 80199dc:	d101      	bne.n	80199e2 <__sflush_r+0xb6>
 80199de:	602f      	str	r7, [r5, #0]
 80199e0:	e7b1      	b.n	8019946 <__sflush_r+0x1a>
 80199e2:	89a3      	ldrh	r3, [r4, #12]
 80199e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80199e8:	81a3      	strh	r3, [r4, #12]
 80199ea:	e7ad      	b.n	8019948 <__sflush_r+0x1c>
 80199ec:	690f      	ldr	r7, [r1, #16]
 80199ee:	2f00      	cmp	r7, #0
 80199f0:	d0a9      	beq.n	8019946 <__sflush_r+0x1a>
 80199f2:	0793      	lsls	r3, r2, #30
 80199f4:	680e      	ldr	r6, [r1, #0]
 80199f6:	bf08      	it	eq
 80199f8:	694b      	ldreq	r3, [r1, #20]
 80199fa:	600f      	str	r7, [r1, #0]
 80199fc:	bf18      	it	ne
 80199fe:	2300      	movne	r3, #0
 8019a00:	eba6 0807 	sub.w	r8, r6, r7
 8019a04:	608b      	str	r3, [r1, #8]
 8019a06:	f1b8 0f00 	cmp.w	r8, #0
 8019a0a:	dd9c      	ble.n	8019946 <__sflush_r+0x1a>
 8019a0c:	4643      	mov	r3, r8
 8019a0e:	463a      	mov	r2, r7
 8019a10:	6a21      	ldr	r1, [r4, #32]
 8019a12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019a14:	4628      	mov	r0, r5
 8019a16:	47b0      	blx	r6
 8019a18:	2800      	cmp	r0, #0
 8019a1a:	dc06      	bgt.n	8019a2a <__sflush_r+0xfe>
 8019a1c:	89a3      	ldrh	r3, [r4, #12]
 8019a1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019a22:	81a3      	strh	r3, [r4, #12]
 8019a24:	f04f 30ff 	mov.w	r0, #4294967295
 8019a28:	e78e      	b.n	8019948 <__sflush_r+0x1c>
 8019a2a:	4407      	add	r7, r0
 8019a2c:	eba8 0800 	sub.w	r8, r8, r0
 8019a30:	e7e9      	b.n	8019a06 <__sflush_r+0xda>
 8019a32:	bf00      	nop
 8019a34:	20400001 	.word	0x20400001

08019a38 <_fflush_r>:
 8019a38:	b538      	push	{r3, r4, r5, lr}
 8019a3a:	690b      	ldr	r3, [r1, #16]
 8019a3c:	4605      	mov	r5, r0
 8019a3e:	460c      	mov	r4, r1
 8019a40:	b1db      	cbz	r3, 8019a7a <_fflush_r+0x42>
 8019a42:	b118      	cbz	r0, 8019a4c <_fflush_r+0x14>
 8019a44:	6983      	ldr	r3, [r0, #24]
 8019a46:	b90b      	cbnz	r3, 8019a4c <_fflush_r+0x14>
 8019a48:	f000 f860 	bl	8019b0c <__sinit>
 8019a4c:	4b0c      	ldr	r3, [pc, #48]	; (8019a80 <_fflush_r+0x48>)
 8019a4e:	429c      	cmp	r4, r3
 8019a50:	d109      	bne.n	8019a66 <_fflush_r+0x2e>
 8019a52:	686c      	ldr	r4, [r5, #4]
 8019a54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019a58:	b17b      	cbz	r3, 8019a7a <_fflush_r+0x42>
 8019a5a:	4621      	mov	r1, r4
 8019a5c:	4628      	mov	r0, r5
 8019a5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019a62:	f7ff bf63 	b.w	801992c <__sflush_r>
 8019a66:	4b07      	ldr	r3, [pc, #28]	; (8019a84 <_fflush_r+0x4c>)
 8019a68:	429c      	cmp	r4, r3
 8019a6a:	d101      	bne.n	8019a70 <_fflush_r+0x38>
 8019a6c:	68ac      	ldr	r4, [r5, #8]
 8019a6e:	e7f1      	b.n	8019a54 <_fflush_r+0x1c>
 8019a70:	4b05      	ldr	r3, [pc, #20]	; (8019a88 <_fflush_r+0x50>)
 8019a72:	429c      	cmp	r4, r3
 8019a74:	bf08      	it	eq
 8019a76:	68ec      	ldreq	r4, [r5, #12]
 8019a78:	e7ec      	b.n	8019a54 <_fflush_r+0x1c>
 8019a7a:	2000      	movs	r0, #0
 8019a7c:	bd38      	pop	{r3, r4, r5, pc}
 8019a7e:	bf00      	nop
 8019a80:	0801b040 	.word	0x0801b040
 8019a84:	0801b060 	.word	0x0801b060
 8019a88:	0801b020 	.word	0x0801b020

08019a8c <std>:
 8019a8c:	2300      	movs	r3, #0
 8019a8e:	b510      	push	{r4, lr}
 8019a90:	4604      	mov	r4, r0
 8019a92:	e9c0 3300 	strd	r3, r3, [r0]
 8019a96:	6083      	str	r3, [r0, #8]
 8019a98:	8181      	strh	r1, [r0, #12]
 8019a9a:	6643      	str	r3, [r0, #100]	; 0x64
 8019a9c:	81c2      	strh	r2, [r0, #14]
 8019a9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019aa2:	6183      	str	r3, [r0, #24]
 8019aa4:	4619      	mov	r1, r3
 8019aa6:	2208      	movs	r2, #8
 8019aa8:	305c      	adds	r0, #92	; 0x5c
 8019aaa:	f7ff fce6 	bl	801947a <memset>
 8019aae:	4b05      	ldr	r3, [pc, #20]	; (8019ac4 <std+0x38>)
 8019ab0:	6263      	str	r3, [r4, #36]	; 0x24
 8019ab2:	4b05      	ldr	r3, [pc, #20]	; (8019ac8 <std+0x3c>)
 8019ab4:	62a3      	str	r3, [r4, #40]	; 0x28
 8019ab6:	4b05      	ldr	r3, [pc, #20]	; (8019acc <std+0x40>)
 8019ab8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019aba:	4b05      	ldr	r3, [pc, #20]	; (8019ad0 <std+0x44>)
 8019abc:	6224      	str	r4, [r4, #32]
 8019abe:	6323      	str	r3, [r4, #48]	; 0x30
 8019ac0:	bd10      	pop	{r4, pc}
 8019ac2:	bf00      	nop
 8019ac4:	0801a521 	.word	0x0801a521
 8019ac8:	0801a543 	.word	0x0801a543
 8019acc:	0801a57b 	.word	0x0801a57b
 8019ad0:	0801a59f 	.word	0x0801a59f

08019ad4 <_cleanup_r>:
 8019ad4:	4901      	ldr	r1, [pc, #4]	; (8019adc <_cleanup_r+0x8>)
 8019ad6:	f000 b885 	b.w	8019be4 <_fwalk_reent>
 8019ada:	bf00      	nop
 8019adc:	08019a39 	.word	0x08019a39

08019ae0 <__sfmoreglue>:
 8019ae0:	b570      	push	{r4, r5, r6, lr}
 8019ae2:	1e4a      	subs	r2, r1, #1
 8019ae4:	2568      	movs	r5, #104	; 0x68
 8019ae6:	4355      	muls	r5, r2
 8019ae8:	460e      	mov	r6, r1
 8019aea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019aee:	f7ff fd1b 	bl	8019528 <_malloc_r>
 8019af2:	4604      	mov	r4, r0
 8019af4:	b140      	cbz	r0, 8019b08 <__sfmoreglue+0x28>
 8019af6:	2100      	movs	r1, #0
 8019af8:	e9c0 1600 	strd	r1, r6, [r0]
 8019afc:	300c      	adds	r0, #12
 8019afe:	60a0      	str	r0, [r4, #8]
 8019b00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019b04:	f7ff fcb9 	bl	801947a <memset>
 8019b08:	4620      	mov	r0, r4
 8019b0a:	bd70      	pop	{r4, r5, r6, pc}

08019b0c <__sinit>:
 8019b0c:	6983      	ldr	r3, [r0, #24]
 8019b0e:	b510      	push	{r4, lr}
 8019b10:	4604      	mov	r4, r0
 8019b12:	bb33      	cbnz	r3, 8019b62 <__sinit+0x56>
 8019b14:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8019b18:	6503      	str	r3, [r0, #80]	; 0x50
 8019b1a:	4b12      	ldr	r3, [pc, #72]	; (8019b64 <__sinit+0x58>)
 8019b1c:	4a12      	ldr	r2, [pc, #72]	; (8019b68 <__sinit+0x5c>)
 8019b1e:	681b      	ldr	r3, [r3, #0]
 8019b20:	6282      	str	r2, [r0, #40]	; 0x28
 8019b22:	4298      	cmp	r0, r3
 8019b24:	bf04      	itt	eq
 8019b26:	2301      	moveq	r3, #1
 8019b28:	6183      	streq	r3, [r0, #24]
 8019b2a:	f000 f81f 	bl	8019b6c <__sfp>
 8019b2e:	6060      	str	r0, [r4, #4]
 8019b30:	4620      	mov	r0, r4
 8019b32:	f000 f81b 	bl	8019b6c <__sfp>
 8019b36:	60a0      	str	r0, [r4, #8]
 8019b38:	4620      	mov	r0, r4
 8019b3a:	f000 f817 	bl	8019b6c <__sfp>
 8019b3e:	2200      	movs	r2, #0
 8019b40:	60e0      	str	r0, [r4, #12]
 8019b42:	2104      	movs	r1, #4
 8019b44:	6860      	ldr	r0, [r4, #4]
 8019b46:	f7ff ffa1 	bl	8019a8c <std>
 8019b4a:	2201      	movs	r2, #1
 8019b4c:	2109      	movs	r1, #9
 8019b4e:	68a0      	ldr	r0, [r4, #8]
 8019b50:	f7ff ff9c 	bl	8019a8c <std>
 8019b54:	2202      	movs	r2, #2
 8019b56:	2112      	movs	r1, #18
 8019b58:	68e0      	ldr	r0, [r4, #12]
 8019b5a:	f7ff ff97 	bl	8019a8c <std>
 8019b5e:	2301      	movs	r3, #1
 8019b60:	61a3      	str	r3, [r4, #24]
 8019b62:	bd10      	pop	{r4, pc}
 8019b64:	0801b01c 	.word	0x0801b01c
 8019b68:	08019ad5 	.word	0x08019ad5

08019b6c <__sfp>:
 8019b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b6e:	4b1b      	ldr	r3, [pc, #108]	; (8019bdc <__sfp+0x70>)
 8019b70:	681e      	ldr	r6, [r3, #0]
 8019b72:	69b3      	ldr	r3, [r6, #24]
 8019b74:	4607      	mov	r7, r0
 8019b76:	b913      	cbnz	r3, 8019b7e <__sfp+0x12>
 8019b78:	4630      	mov	r0, r6
 8019b7a:	f7ff ffc7 	bl	8019b0c <__sinit>
 8019b7e:	3648      	adds	r6, #72	; 0x48
 8019b80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019b84:	3b01      	subs	r3, #1
 8019b86:	d503      	bpl.n	8019b90 <__sfp+0x24>
 8019b88:	6833      	ldr	r3, [r6, #0]
 8019b8a:	b133      	cbz	r3, 8019b9a <__sfp+0x2e>
 8019b8c:	6836      	ldr	r6, [r6, #0]
 8019b8e:	e7f7      	b.n	8019b80 <__sfp+0x14>
 8019b90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019b94:	b16d      	cbz	r5, 8019bb2 <__sfp+0x46>
 8019b96:	3468      	adds	r4, #104	; 0x68
 8019b98:	e7f4      	b.n	8019b84 <__sfp+0x18>
 8019b9a:	2104      	movs	r1, #4
 8019b9c:	4638      	mov	r0, r7
 8019b9e:	f7ff ff9f 	bl	8019ae0 <__sfmoreglue>
 8019ba2:	6030      	str	r0, [r6, #0]
 8019ba4:	2800      	cmp	r0, #0
 8019ba6:	d1f1      	bne.n	8019b8c <__sfp+0x20>
 8019ba8:	230c      	movs	r3, #12
 8019baa:	603b      	str	r3, [r7, #0]
 8019bac:	4604      	mov	r4, r0
 8019bae:	4620      	mov	r0, r4
 8019bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019bb2:	4b0b      	ldr	r3, [pc, #44]	; (8019be0 <__sfp+0x74>)
 8019bb4:	6665      	str	r5, [r4, #100]	; 0x64
 8019bb6:	e9c4 5500 	strd	r5, r5, [r4]
 8019bba:	60a5      	str	r5, [r4, #8]
 8019bbc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8019bc0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8019bc4:	2208      	movs	r2, #8
 8019bc6:	4629      	mov	r1, r5
 8019bc8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019bcc:	f7ff fc55 	bl	801947a <memset>
 8019bd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019bd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019bd8:	e7e9      	b.n	8019bae <__sfp+0x42>
 8019bda:	bf00      	nop
 8019bdc:	0801b01c 	.word	0x0801b01c
 8019be0:	ffff0001 	.word	0xffff0001

08019be4 <_fwalk_reent>:
 8019be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019be8:	4680      	mov	r8, r0
 8019bea:	4689      	mov	r9, r1
 8019bec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019bf0:	2600      	movs	r6, #0
 8019bf2:	b914      	cbnz	r4, 8019bfa <_fwalk_reent+0x16>
 8019bf4:	4630      	mov	r0, r6
 8019bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019bfa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8019bfe:	3f01      	subs	r7, #1
 8019c00:	d501      	bpl.n	8019c06 <_fwalk_reent+0x22>
 8019c02:	6824      	ldr	r4, [r4, #0]
 8019c04:	e7f5      	b.n	8019bf2 <_fwalk_reent+0xe>
 8019c06:	89ab      	ldrh	r3, [r5, #12]
 8019c08:	2b01      	cmp	r3, #1
 8019c0a:	d907      	bls.n	8019c1c <_fwalk_reent+0x38>
 8019c0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019c10:	3301      	adds	r3, #1
 8019c12:	d003      	beq.n	8019c1c <_fwalk_reent+0x38>
 8019c14:	4629      	mov	r1, r5
 8019c16:	4640      	mov	r0, r8
 8019c18:	47c8      	blx	r9
 8019c1a:	4306      	orrs	r6, r0
 8019c1c:	3568      	adds	r5, #104	; 0x68
 8019c1e:	e7ee      	b.n	8019bfe <_fwalk_reent+0x1a>

08019c20 <__swhatbuf_r>:
 8019c20:	b570      	push	{r4, r5, r6, lr}
 8019c22:	460e      	mov	r6, r1
 8019c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c28:	2900      	cmp	r1, #0
 8019c2a:	b096      	sub	sp, #88	; 0x58
 8019c2c:	4614      	mov	r4, r2
 8019c2e:	461d      	mov	r5, r3
 8019c30:	da07      	bge.n	8019c42 <__swhatbuf_r+0x22>
 8019c32:	2300      	movs	r3, #0
 8019c34:	602b      	str	r3, [r5, #0]
 8019c36:	89b3      	ldrh	r3, [r6, #12]
 8019c38:	061a      	lsls	r2, r3, #24
 8019c3a:	d410      	bmi.n	8019c5e <__swhatbuf_r+0x3e>
 8019c3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019c40:	e00e      	b.n	8019c60 <__swhatbuf_r+0x40>
 8019c42:	466a      	mov	r2, sp
 8019c44:	f000 fcd2 	bl	801a5ec <_fstat_r>
 8019c48:	2800      	cmp	r0, #0
 8019c4a:	dbf2      	blt.n	8019c32 <__swhatbuf_r+0x12>
 8019c4c:	9a01      	ldr	r2, [sp, #4]
 8019c4e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019c52:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019c56:	425a      	negs	r2, r3
 8019c58:	415a      	adcs	r2, r3
 8019c5a:	602a      	str	r2, [r5, #0]
 8019c5c:	e7ee      	b.n	8019c3c <__swhatbuf_r+0x1c>
 8019c5e:	2340      	movs	r3, #64	; 0x40
 8019c60:	2000      	movs	r0, #0
 8019c62:	6023      	str	r3, [r4, #0]
 8019c64:	b016      	add	sp, #88	; 0x58
 8019c66:	bd70      	pop	{r4, r5, r6, pc}

08019c68 <__smakebuf_r>:
 8019c68:	898b      	ldrh	r3, [r1, #12]
 8019c6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019c6c:	079d      	lsls	r5, r3, #30
 8019c6e:	4606      	mov	r6, r0
 8019c70:	460c      	mov	r4, r1
 8019c72:	d507      	bpl.n	8019c84 <__smakebuf_r+0x1c>
 8019c74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019c78:	6023      	str	r3, [r4, #0]
 8019c7a:	6123      	str	r3, [r4, #16]
 8019c7c:	2301      	movs	r3, #1
 8019c7e:	6163      	str	r3, [r4, #20]
 8019c80:	b002      	add	sp, #8
 8019c82:	bd70      	pop	{r4, r5, r6, pc}
 8019c84:	ab01      	add	r3, sp, #4
 8019c86:	466a      	mov	r2, sp
 8019c88:	f7ff ffca 	bl	8019c20 <__swhatbuf_r>
 8019c8c:	9900      	ldr	r1, [sp, #0]
 8019c8e:	4605      	mov	r5, r0
 8019c90:	4630      	mov	r0, r6
 8019c92:	f7ff fc49 	bl	8019528 <_malloc_r>
 8019c96:	b948      	cbnz	r0, 8019cac <__smakebuf_r+0x44>
 8019c98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019c9c:	059a      	lsls	r2, r3, #22
 8019c9e:	d4ef      	bmi.n	8019c80 <__smakebuf_r+0x18>
 8019ca0:	f023 0303 	bic.w	r3, r3, #3
 8019ca4:	f043 0302 	orr.w	r3, r3, #2
 8019ca8:	81a3      	strh	r3, [r4, #12]
 8019caa:	e7e3      	b.n	8019c74 <__smakebuf_r+0xc>
 8019cac:	4b0d      	ldr	r3, [pc, #52]	; (8019ce4 <__smakebuf_r+0x7c>)
 8019cae:	62b3      	str	r3, [r6, #40]	; 0x28
 8019cb0:	89a3      	ldrh	r3, [r4, #12]
 8019cb2:	6020      	str	r0, [r4, #0]
 8019cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019cb8:	81a3      	strh	r3, [r4, #12]
 8019cba:	9b00      	ldr	r3, [sp, #0]
 8019cbc:	6163      	str	r3, [r4, #20]
 8019cbe:	9b01      	ldr	r3, [sp, #4]
 8019cc0:	6120      	str	r0, [r4, #16]
 8019cc2:	b15b      	cbz	r3, 8019cdc <__smakebuf_r+0x74>
 8019cc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019cc8:	4630      	mov	r0, r6
 8019cca:	f000 fca1 	bl	801a610 <_isatty_r>
 8019cce:	b128      	cbz	r0, 8019cdc <__smakebuf_r+0x74>
 8019cd0:	89a3      	ldrh	r3, [r4, #12]
 8019cd2:	f023 0303 	bic.w	r3, r3, #3
 8019cd6:	f043 0301 	orr.w	r3, r3, #1
 8019cda:	81a3      	strh	r3, [r4, #12]
 8019cdc:	89a3      	ldrh	r3, [r4, #12]
 8019cde:	431d      	orrs	r5, r3
 8019ce0:	81a5      	strh	r5, [r4, #12]
 8019ce2:	e7cd      	b.n	8019c80 <__smakebuf_r+0x18>
 8019ce4:	08019ad5 	.word	0x08019ad5

08019ce8 <__malloc_lock>:
 8019ce8:	4770      	bx	lr

08019cea <__malloc_unlock>:
 8019cea:	4770      	bx	lr

08019cec <__ssputs_r>:
 8019cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019cf0:	688e      	ldr	r6, [r1, #8]
 8019cf2:	429e      	cmp	r6, r3
 8019cf4:	4682      	mov	sl, r0
 8019cf6:	460c      	mov	r4, r1
 8019cf8:	4690      	mov	r8, r2
 8019cfa:	4699      	mov	r9, r3
 8019cfc:	d837      	bhi.n	8019d6e <__ssputs_r+0x82>
 8019cfe:	898a      	ldrh	r2, [r1, #12]
 8019d00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019d04:	d031      	beq.n	8019d6a <__ssputs_r+0x7e>
 8019d06:	6825      	ldr	r5, [r4, #0]
 8019d08:	6909      	ldr	r1, [r1, #16]
 8019d0a:	1a6f      	subs	r7, r5, r1
 8019d0c:	6965      	ldr	r5, [r4, #20]
 8019d0e:	2302      	movs	r3, #2
 8019d10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019d14:	fb95 f5f3 	sdiv	r5, r5, r3
 8019d18:	f109 0301 	add.w	r3, r9, #1
 8019d1c:	443b      	add	r3, r7
 8019d1e:	429d      	cmp	r5, r3
 8019d20:	bf38      	it	cc
 8019d22:	461d      	movcc	r5, r3
 8019d24:	0553      	lsls	r3, r2, #21
 8019d26:	d530      	bpl.n	8019d8a <__ssputs_r+0x9e>
 8019d28:	4629      	mov	r1, r5
 8019d2a:	f7ff fbfd 	bl	8019528 <_malloc_r>
 8019d2e:	4606      	mov	r6, r0
 8019d30:	b950      	cbnz	r0, 8019d48 <__ssputs_r+0x5c>
 8019d32:	230c      	movs	r3, #12
 8019d34:	f8ca 3000 	str.w	r3, [sl]
 8019d38:	89a3      	ldrh	r3, [r4, #12]
 8019d3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019d3e:	81a3      	strh	r3, [r4, #12]
 8019d40:	f04f 30ff 	mov.w	r0, #4294967295
 8019d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d48:	463a      	mov	r2, r7
 8019d4a:	6921      	ldr	r1, [r4, #16]
 8019d4c:	f7ff fb8a 	bl	8019464 <memcpy>
 8019d50:	89a3      	ldrh	r3, [r4, #12]
 8019d52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019d5a:	81a3      	strh	r3, [r4, #12]
 8019d5c:	6126      	str	r6, [r4, #16]
 8019d5e:	6165      	str	r5, [r4, #20]
 8019d60:	443e      	add	r6, r7
 8019d62:	1bed      	subs	r5, r5, r7
 8019d64:	6026      	str	r6, [r4, #0]
 8019d66:	60a5      	str	r5, [r4, #8]
 8019d68:	464e      	mov	r6, r9
 8019d6a:	454e      	cmp	r6, r9
 8019d6c:	d900      	bls.n	8019d70 <__ssputs_r+0x84>
 8019d6e:	464e      	mov	r6, r9
 8019d70:	4632      	mov	r2, r6
 8019d72:	4641      	mov	r1, r8
 8019d74:	6820      	ldr	r0, [r4, #0]
 8019d76:	f000 fc6d 	bl	801a654 <memmove>
 8019d7a:	68a3      	ldr	r3, [r4, #8]
 8019d7c:	1b9b      	subs	r3, r3, r6
 8019d7e:	60a3      	str	r3, [r4, #8]
 8019d80:	6823      	ldr	r3, [r4, #0]
 8019d82:	441e      	add	r6, r3
 8019d84:	6026      	str	r6, [r4, #0]
 8019d86:	2000      	movs	r0, #0
 8019d88:	e7dc      	b.n	8019d44 <__ssputs_r+0x58>
 8019d8a:	462a      	mov	r2, r5
 8019d8c:	f000 fc7b 	bl	801a686 <_realloc_r>
 8019d90:	4606      	mov	r6, r0
 8019d92:	2800      	cmp	r0, #0
 8019d94:	d1e2      	bne.n	8019d5c <__ssputs_r+0x70>
 8019d96:	6921      	ldr	r1, [r4, #16]
 8019d98:	4650      	mov	r0, sl
 8019d9a:	f7ff fb77 	bl	801948c <_free_r>
 8019d9e:	e7c8      	b.n	8019d32 <__ssputs_r+0x46>

08019da0 <_svfiprintf_r>:
 8019da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019da4:	461d      	mov	r5, r3
 8019da6:	898b      	ldrh	r3, [r1, #12]
 8019da8:	061f      	lsls	r7, r3, #24
 8019daa:	b09d      	sub	sp, #116	; 0x74
 8019dac:	4680      	mov	r8, r0
 8019dae:	460c      	mov	r4, r1
 8019db0:	4616      	mov	r6, r2
 8019db2:	d50f      	bpl.n	8019dd4 <_svfiprintf_r+0x34>
 8019db4:	690b      	ldr	r3, [r1, #16]
 8019db6:	b96b      	cbnz	r3, 8019dd4 <_svfiprintf_r+0x34>
 8019db8:	2140      	movs	r1, #64	; 0x40
 8019dba:	f7ff fbb5 	bl	8019528 <_malloc_r>
 8019dbe:	6020      	str	r0, [r4, #0]
 8019dc0:	6120      	str	r0, [r4, #16]
 8019dc2:	b928      	cbnz	r0, 8019dd0 <_svfiprintf_r+0x30>
 8019dc4:	230c      	movs	r3, #12
 8019dc6:	f8c8 3000 	str.w	r3, [r8]
 8019dca:	f04f 30ff 	mov.w	r0, #4294967295
 8019dce:	e0c8      	b.n	8019f62 <_svfiprintf_r+0x1c2>
 8019dd0:	2340      	movs	r3, #64	; 0x40
 8019dd2:	6163      	str	r3, [r4, #20]
 8019dd4:	2300      	movs	r3, #0
 8019dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8019dd8:	2320      	movs	r3, #32
 8019dda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019dde:	2330      	movs	r3, #48	; 0x30
 8019de0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019de4:	9503      	str	r5, [sp, #12]
 8019de6:	f04f 0b01 	mov.w	fp, #1
 8019dea:	4637      	mov	r7, r6
 8019dec:	463d      	mov	r5, r7
 8019dee:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019df2:	b10b      	cbz	r3, 8019df8 <_svfiprintf_r+0x58>
 8019df4:	2b25      	cmp	r3, #37	; 0x25
 8019df6:	d13e      	bne.n	8019e76 <_svfiprintf_r+0xd6>
 8019df8:	ebb7 0a06 	subs.w	sl, r7, r6
 8019dfc:	d00b      	beq.n	8019e16 <_svfiprintf_r+0x76>
 8019dfe:	4653      	mov	r3, sl
 8019e00:	4632      	mov	r2, r6
 8019e02:	4621      	mov	r1, r4
 8019e04:	4640      	mov	r0, r8
 8019e06:	f7ff ff71 	bl	8019cec <__ssputs_r>
 8019e0a:	3001      	adds	r0, #1
 8019e0c:	f000 80a4 	beq.w	8019f58 <_svfiprintf_r+0x1b8>
 8019e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e12:	4453      	add	r3, sl
 8019e14:	9309      	str	r3, [sp, #36]	; 0x24
 8019e16:	783b      	ldrb	r3, [r7, #0]
 8019e18:	2b00      	cmp	r3, #0
 8019e1a:	f000 809d 	beq.w	8019f58 <_svfiprintf_r+0x1b8>
 8019e1e:	2300      	movs	r3, #0
 8019e20:	f04f 32ff 	mov.w	r2, #4294967295
 8019e24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019e28:	9304      	str	r3, [sp, #16]
 8019e2a:	9307      	str	r3, [sp, #28]
 8019e2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019e30:	931a      	str	r3, [sp, #104]	; 0x68
 8019e32:	462f      	mov	r7, r5
 8019e34:	2205      	movs	r2, #5
 8019e36:	f817 1b01 	ldrb.w	r1, [r7], #1
 8019e3a:	4850      	ldr	r0, [pc, #320]	; (8019f7c <_svfiprintf_r+0x1dc>)
 8019e3c:	f7e6 fa58 	bl	80002f0 <memchr>
 8019e40:	9b04      	ldr	r3, [sp, #16]
 8019e42:	b9d0      	cbnz	r0, 8019e7a <_svfiprintf_r+0xda>
 8019e44:	06d9      	lsls	r1, r3, #27
 8019e46:	bf44      	itt	mi
 8019e48:	2220      	movmi	r2, #32
 8019e4a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019e4e:	071a      	lsls	r2, r3, #28
 8019e50:	bf44      	itt	mi
 8019e52:	222b      	movmi	r2, #43	; 0x2b
 8019e54:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019e58:	782a      	ldrb	r2, [r5, #0]
 8019e5a:	2a2a      	cmp	r2, #42	; 0x2a
 8019e5c:	d015      	beq.n	8019e8a <_svfiprintf_r+0xea>
 8019e5e:	9a07      	ldr	r2, [sp, #28]
 8019e60:	462f      	mov	r7, r5
 8019e62:	2000      	movs	r0, #0
 8019e64:	250a      	movs	r5, #10
 8019e66:	4639      	mov	r1, r7
 8019e68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019e6c:	3b30      	subs	r3, #48	; 0x30
 8019e6e:	2b09      	cmp	r3, #9
 8019e70:	d94d      	bls.n	8019f0e <_svfiprintf_r+0x16e>
 8019e72:	b1b8      	cbz	r0, 8019ea4 <_svfiprintf_r+0x104>
 8019e74:	e00f      	b.n	8019e96 <_svfiprintf_r+0xf6>
 8019e76:	462f      	mov	r7, r5
 8019e78:	e7b8      	b.n	8019dec <_svfiprintf_r+0x4c>
 8019e7a:	4a40      	ldr	r2, [pc, #256]	; (8019f7c <_svfiprintf_r+0x1dc>)
 8019e7c:	1a80      	subs	r0, r0, r2
 8019e7e:	fa0b f000 	lsl.w	r0, fp, r0
 8019e82:	4318      	orrs	r0, r3
 8019e84:	9004      	str	r0, [sp, #16]
 8019e86:	463d      	mov	r5, r7
 8019e88:	e7d3      	b.n	8019e32 <_svfiprintf_r+0x92>
 8019e8a:	9a03      	ldr	r2, [sp, #12]
 8019e8c:	1d11      	adds	r1, r2, #4
 8019e8e:	6812      	ldr	r2, [r2, #0]
 8019e90:	9103      	str	r1, [sp, #12]
 8019e92:	2a00      	cmp	r2, #0
 8019e94:	db01      	blt.n	8019e9a <_svfiprintf_r+0xfa>
 8019e96:	9207      	str	r2, [sp, #28]
 8019e98:	e004      	b.n	8019ea4 <_svfiprintf_r+0x104>
 8019e9a:	4252      	negs	r2, r2
 8019e9c:	f043 0302 	orr.w	r3, r3, #2
 8019ea0:	9207      	str	r2, [sp, #28]
 8019ea2:	9304      	str	r3, [sp, #16]
 8019ea4:	783b      	ldrb	r3, [r7, #0]
 8019ea6:	2b2e      	cmp	r3, #46	; 0x2e
 8019ea8:	d10c      	bne.n	8019ec4 <_svfiprintf_r+0x124>
 8019eaa:	787b      	ldrb	r3, [r7, #1]
 8019eac:	2b2a      	cmp	r3, #42	; 0x2a
 8019eae:	d133      	bne.n	8019f18 <_svfiprintf_r+0x178>
 8019eb0:	9b03      	ldr	r3, [sp, #12]
 8019eb2:	1d1a      	adds	r2, r3, #4
 8019eb4:	681b      	ldr	r3, [r3, #0]
 8019eb6:	9203      	str	r2, [sp, #12]
 8019eb8:	2b00      	cmp	r3, #0
 8019eba:	bfb8      	it	lt
 8019ebc:	f04f 33ff 	movlt.w	r3, #4294967295
 8019ec0:	3702      	adds	r7, #2
 8019ec2:	9305      	str	r3, [sp, #20]
 8019ec4:	4d2e      	ldr	r5, [pc, #184]	; (8019f80 <_svfiprintf_r+0x1e0>)
 8019ec6:	7839      	ldrb	r1, [r7, #0]
 8019ec8:	2203      	movs	r2, #3
 8019eca:	4628      	mov	r0, r5
 8019ecc:	f7e6 fa10 	bl	80002f0 <memchr>
 8019ed0:	b138      	cbz	r0, 8019ee2 <_svfiprintf_r+0x142>
 8019ed2:	2340      	movs	r3, #64	; 0x40
 8019ed4:	1b40      	subs	r0, r0, r5
 8019ed6:	fa03 f000 	lsl.w	r0, r3, r0
 8019eda:	9b04      	ldr	r3, [sp, #16]
 8019edc:	4303      	orrs	r3, r0
 8019ede:	3701      	adds	r7, #1
 8019ee0:	9304      	str	r3, [sp, #16]
 8019ee2:	7839      	ldrb	r1, [r7, #0]
 8019ee4:	4827      	ldr	r0, [pc, #156]	; (8019f84 <_svfiprintf_r+0x1e4>)
 8019ee6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019eea:	2206      	movs	r2, #6
 8019eec:	1c7e      	adds	r6, r7, #1
 8019eee:	f7e6 f9ff 	bl	80002f0 <memchr>
 8019ef2:	2800      	cmp	r0, #0
 8019ef4:	d038      	beq.n	8019f68 <_svfiprintf_r+0x1c8>
 8019ef6:	4b24      	ldr	r3, [pc, #144]	; (8019f88 <_svfiprintf_r+0x1e8>)
 8019ef8:	bb13      	cbnz	r3, 8019f40 <_svfiprintf_r+0x1a0>
 8019efa:	9b03      	ldr	r3, [sp, #12]
 8019efc:	3307      	adds	r3, #7
 8019efe:	f023 0307 	bic.w	r3, r3, #7
 8019f02:	3308      	adds	r3, #8
 8019f04:	9303      	str	r3, [sp, #12]
 8019f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f08:	444b      	add	r3, r9
 8019f0a:	9309      	str	r3, [sp, #36]	; 0x24
 8019f0c:	e76d      	b.n	8019dea <_svfiprintf_r+0x4a>
 8019f0e:	fb05 3202 	mla	r2, r5, r2, r3
 8019f12:	2001      	movs	r0, #1
 8019f14:	460f      	mov	r7, r1
 8019f16:	e7a6      	b.n	8019e66 <_svfiprintf_r+0xc6>
 8019f18:	2300      	movs	r3, #0
 8019f1a:	3701      	adds	r7, #1
 8019f1c:	9305      	str	r3, [sp, #20]
 8019f1e:	4619      	mov	r1, r3
 8019f20:	250a      	movs	r5, #10
 8019f22:	4638      	mov	r0, r7
 8019f24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019f28:	3a30      	subs	r2, #48	; 0x30
 8019f2a:	2a09      	cmp	r2, #9
 8019f2c:	d903      	bls.n	8019f36 <_svfiprintf_r+0x196>
 8019f2e:	2b00      	cmp	r3, #0
 8019f30:	d0c8      	beq.n	8019ec4 <_svfiprintf_r+0x124>
 8019f32:	9105      	str	r1, [sp, #20]
 8019f34:	e7c6      	b.n	8019ec4 <_svfiprintf_r+0x124>
 8019f36:	fb05 2101 	mla	r1, r5, r1, r2
 8019f3a:	2301      	movs	r3, #1
 8019f3c:	4607      	mov	r7, r0
 8019f3e:	e7f0      	b.n	8019f22 <_svfiprintf_r+0x182>
 8019f40:	ab03      	add	r3, sp, #12
 8019f42:	9300      	str	r3, [sp, #0]
 8019f44:	4622      	mov	r2, r4
 8019f46:	4b11      	ldr	r3, [pc, #68]	; (8019f8c <_svfiprintf_r+0x1ec>)
 8019f48:	a904      	add	r1, sp, #16
 8019f4a:	4640      	mov	r0, r8
 8019f4c:	f3af 8000 	nop.w
 8019f50:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019f54:	4681      	mov	r9, r0
 8019f56:	d1d6      	bne.n	8019f06 <_svfiprintf_r+0x166>
 8019f58:	89a3      	ldrh	r3, [r4, #12]
 8019f5a:	065b      	lsls	r3, r3, #25
 8019f5c:	f53f af35 	bmi.w	8019dca <_svfiprintf_r+0x2a>
 8019f60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019f62:	b01d      	add	sp, #116	; 0x74
 8019f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f68:	ab03      	add	r3, sp, #12
 8019f6a:	9300      	str	r3, [sp, #0]
 8019f6c:	4622      	mov	r2, r4
 8019f6e:	4b07      	ldr	r3, [pc, #28]	; (8019f8c <_svfiprintf_r+0x1ec>)
 8019f70:	a904      	add	r1, sp, #16
 8019f72:	4640      	mov	r0, r8
 8019f74:	f000 f9c2 	bl	801a2fc <_printf_i>
 8019f78:	e7ea      	b.n	8019f50 <_svfiprintf_r+0x1b0>
 8019f7a:	bf00      	nop
 8019f7c:	0801b080 	.word	0x0801b080
 8019f80:	0801b086 	.word	0x0801b086
 8019f84:	0801b08a 	.word	0x0801b08a
 8019f88:	00000000 	.word	0x00000000
 8019f8c:	08019ced 	.word	0x08019ced

08019f90 <__sfputc_r>:
 8019f90:	6893      	ldr	r3, [r2, #8]
 8019f92:	3b01      	subs	r3, #1
 8019f94:	2b00      	cmp	r3, #0
 8019f96:	b410      	push	{r4}
 8019f98:	6093      	str	r3, [r2, #8]
 8019f9a:	da08      	bge.n	8019fae <__sfputc_r+0x1e>
 8019f9c:	6994      	ldr	r4, [r2, #24]
 8019f9e:	42a3      	cmp	r3, r4
 8019fa0:	db01      	blt.n	8019fa6 <__sfputc_r+0x16>
 8019fa2:	290a      	cmp	r1, #10
 8019fa4:	d103      	bne.n	8019fae <__sfputc_r+0x1e>
 8019fa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019faa:	f7ff bbff 	b.w	80197ac <__swbuf_r>
 8019fae:	6813      	ldr	r3, [r2, #0]
 8019fb0:	1c58      	adds	r0, r3, #1
 8019fb2:	6010      	str	r0, [r2, #0]
 8019fb4:	7019      	strb	r1, [r3, #0]
 8019fb6:	4608      	mov	r0, r1
 8019fb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019fbc:	4770      	bx	lr

08019fbe <__sfputs_r>:
 8019fbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019fc0:	4606      	mov	r6, r0
 8019fc2:	460f      	mov	r7, r1
 8019fc4:	4614      	mov	r4, r2
 8019fc6:	18d5      	adds	r5, r2, r3
 8019fc8:	42ac      	cmp	r4, r5
 8019fca:	d101      	bne.n	8019fd0 <__sfputs_r+0x12>
 8019fcc:	2000      	movs	r0, #0
 8019fce:	e007      	b.n	8019fe0 <__sfputs_r+0x22>
 8019fd0:	463a      	mov	r2, r7
 8019fd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019fd6:	4630      	mov	r0, r6
 8019fd8:	f7ff ffda 	bl	8019f90 <__sfputc_r>
 8019fdc:	1c43      	adds	r3, r0, #1
 8019fde:	d1f3      	bne.n	8019fc8 <__sfputs_r+0xa>
 8019fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019fe4 <_vfiprintf_r>:
 8019fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fe8:	460c      	mov	r4, r1
 8019fea:	b09d      	sub	sp, #116	; 0x74
 8019fec:	4617      	mov	r7, r2
 8019fee:	461d      	mov	r5, r3
 8019ff0:	4606      	mov	r6, r0
 8019ff2:	b118      	cbz	r0, 8019ffc <_vfiprintf_r+0x18>
 8019ff4:	6983      	ldr	r3, [r0, #24]
 8019ff6:	b90b      	cbnz	r3, 8019ffc <_vfiprintf_r+0x18>
 8019ff8:	f7ff fd88 	bl	8019b0c <__sinit>
 8019ffc:	4b7c      	ldr	r3, [pc, #496]	; (801a1f0 <_vfiprintf_r+0x20c>)
 8019ffe:	429c      	cmp	r4, r3
 801a000:	d158      	bne.n	801a0b4 <_vfiprintf_r+0xd0>
 801a002:	6874      	ldr	r4, [r6, #4]
 801a004:	89a3      	ldrh	r3, [r4, #12]
 801a006:	0718      	lsls	r0, r3, #28
 801a008:	d55e      	bpl.n	801a0c8 <_vfiprintf_r+0xe4>
 801a00a:	6923      	ldr	r3, [r4, #16]
 801a00c:	2b00      	cmp	r3, #0
 801a00e:	d05b      	beq.n	801a0c8 <_vfiprintf_r+0xe4>
 801a010:	2300      	movs	r3, #0
 801a012:	9309      	str	r3, [sp, #36]	; 0x24
 801a014:	2320      	movs	r3, #32
 801a016:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a01a:	2330      	movs	r3, #48	; 0x30
 801a01c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a020:	9503      	str	r5, [sp, #12]
 801a022:	f04f 0b01 	mov.w	fp, #1
 801a026:	46b8      	mov	r8, r7
 801a028:	4645      	mov	r5, r8
 801a02a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801a02e:	b10b      	cbz	r3, 801a034 <_vfiprintf_r+0x50>
 801a030:	2b25      	cmp	r3, #37	; 0x25
 801a032:	d154      	bne.n	801a0de <_vfiprintf_r+0xfa>
 801a034:	ebb8 0a07 	subs.w	sl, r8, r7
 801a038:	d00b      	beq.n	801a052 <_vfiprintf_r+0x6e>
 801a03a:	4653      	mov	r3, sl
 801a03c:	463a      	mov	r2, r7
 801a03e:	4621      	mov	r1, r4
 801a040:	4630      	mov	r0, r6
 801a042:	f7ff ffbc 	bl	8019fbe <__sfputs_r>
 801a046:	3001      	adds	r0, #1
 801a048:	f000 80c2 	beq.w	801a1d0 <_vfiprintf_r+0x1ec>
 801a04c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a04e:	4453      	add	r3, sl
 801a050:	9309      	str	r3, [sp, #36]	; 0x24
 801a052:	f898 3000 	ldrb.w	r3, [r8]
 801a056:	2b00      	cmp	r3, #0
 801a058:	f000 80ba 	beq.w	801a1d0 <_vfiprintf_r+0x1ec>
 801a05c:	2300      	movs	r3, #0
 801a05e:	f04f 32ff 	mov.w	r2, #4294967295
 801a062:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a066:	9304      	str	r3, [sp, #16]
 801a068:	9307      	str	r3, [sp, #28]
 801a06a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a06e:	931a      	str	r3, [sp, #104]	; 0x68
 801a070:	46a8      	mov	r8, r5
 801a072:	2205      	movs	r2, #5
 801a074:	f818 1b01 	ldrb.w	r1, [r8], #1
 801a078:	485e      	ldr	r0, [pc, #376]	; (801a1f4 <_vfiprintf_r+0x210>)
 801a07a:	f7e6 f939 	bl	80002f0 <memchr>
 801a07e:	9b04      	ldr	r3, [sp, #16]
 801a080:	bb78      	cbnz	r0, 801a0e2 <_vfiprintf_r+0xfe>
 801a082:	06d9      	lsls	r1, r3, #27
 801a084:	bf44      	itt	mi
 801a086:	2220      	movmi	r2, #32
 801a088:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a08c:	071a      	lsls	r2, r3, #28
 801a08e:	bf44      	itt	mi
 801a090:	222b      	movmi	r2, #43	; 0x2b
 801a092:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a096:	782a      	ldrb	r2, [r5, #0]
 801a098:	2a2a      	cmp	r2, #42	; 0x2a
 801a09a:	d02a      	beq.n	801a0f2 <_vfiprintf_r+0x10e>
 801a09c:	9a07      	ldr	r2, [sp, #28]
 801a09e:	46a8      	mov	r8, r5
 801a0a0:	2000      	movs	r0, #0
 801a0a2:	250a      	movs	r5, #10
 801a0a4:	4641      	mov	r1, r8
 801a0a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a0aa:	3b30      	subs	r3, #48	; 0x30
 801a0ac:	2b09      	cmp	r3, #9
 801a0ae:	d969      	bls.n	801a184 <_vfiprintf_r+0x1a0>
 801a0b0:	b360      	cbz	r0, 801a10c <_vfiprintf_r+0x128>
 801a0b2:	e024      	b.n	801a0fe <_vfiprintf_r+0x11a>
 801a0b4:	4b50      	ldr	r3, [pc, #320]	; (801a1f8 <_vfiprintf_r+0x214>)
 801a0b6:	429c      	cmp	r4, r3
 801a0b8:	d101      	bne.n	801a0be <_vfiprintf_r+0xda>
 801a0ba:	68b4      	ldr	r4, [r6, #8]
 801a0bc:	e7a2      	b.n	801a004 <_vfiprintf_r+0x20>
 801a0be:	4b4f      	ldr	r3, [pc, #316]	; (801a1fc <_vfiprintf_r+0x218>)
 801a0c0:	429c      	cmp	r4, r3
 801a0c2:	bf08      	it	eq
 801a0c4:	68f4      	ldreq	r4, [r6, #12]
 801a0c6:	e79d      	b.n	801a004 <_vfiprintf_r+0x20>
 801a0c8:	4621      	mov	r1, r4
 801a0ca:	4630      	mov	r0, r6
 801a0cc:	f7ff fbc0 	bl	8019850 <__swsetup_r>
 801a0d0:	2800      	cmp	r0, #0
 801a0d2:	d09d      	beq.n	801a010 <_vfiprintf_r+0x2c>
 801a0d4:	f04f 30ff 	mov.w	r0, #4294967295
 801a0d8:	b01d      	add	sp, #116	; 0x74
 801a0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0de:	46a8      	mov	r8, r5
 801a0e0:	e7a2      	b.n	801a028 <_vfiprintf_r+0x44>
 801a0e2:	4a44      	ldr	r2, [pc, #272]	; (801a1f4 <_vfiprintf_r+0x210>)
 801a0e4:	1a80      	subs	r0, r0, r2
 801a0e6:	fa0b f000 	lsl.w	r0, fp, r0
 801a0ea:	4318      	orrs	r0, r3
 801a0ec:	9004      	str	r0, [sp, #16]
 801a0ee:	4645      	mov	r5, r8
 801a0f0:	e7be      	b.n	801a070 <_vfiprintf_r+0x8c>
 801a0f2:	9a03      	ldr	r2, [sp, #12]
 801a0f4:	1d11      	adds	r1, r2, #4
 801a0f6:	6812      	ldr	r2, [r2, #0]
 801a0f8:	9103      	str	r1, [sp, #12]
 801a0fa:	2a00      	cmp	r2, #0
 801a0fc:	db01      	blt.n	801a102 <_vfiprintf_r+0x11e>
 801a0fe:	9207      	str	r2, [sp, #28]
 801a100:	e004      	b.n	801a10c <_vfiprintf_r+0x128>
 801a102:	4252      	negs	r2, r2
 801a104:	f043 0302 	orr.w	r3, r3, #2
 801a108:	9207      	str	r2, [sp, #28]
 801a10a:	9304      	str	r3, [sp, #16]
 801a10c:	f898 3000 	ldrb.w	r3, [r8]
 801a110:	2b2e      	cmp	r3, #46	; 0x2e
 801a112:	d10e      	bne.n	801a132 <_vfiprintf_r+0x14e>
 801a114:	f898 3001 	ldrb.w	r3, [r8, #1]
 801a118:	2b2a      	cmp	r3, #42	; 0x2a
 801a11a:	d138      	bne.n	801a18e <_vfiprintf_r+0x1aa>
 801a11c:	9b03      	ldr	r3, [sp, #12]
 801a11e:	1d1a      	adds	r2, r3, #4
 801a120:	681b      	ldr	r3, [r3, #0]
 801a122:	9203      	str	r2, [sp, #12]
 801a124:	2b00      	cmp	r3, #0
 801a126:	bfb8      	it	lt
 801a128:	f04f 33ff 	movlt.w	r3, #4294967295
 801a12c:	f108 0802 	add.w	r8, r8, #2
 801a130:	9305      	str	r3, [sp, #20]
 801a132:	4d33      	ldr	r5, [pc, #204]	; (801a200 <_vfiprintf_r+0x21c>)
 801a134:	f898 1000 	ldrb.w	r1, [r8]
 801a138:	2203      	movs	r2, #3
 801a13a:	4628      	mov	r0, r5
 801a13c:	f7e6 f8d8 	bl	80002f0 <memchr>
 801a140:	b140      	cbz	r0, 801a154 <_vfiprintf_r+0x170>
 801a142:	2340      	movs	r3, #64	; 0x40
 801a144:	1b40      	subs	r0, r0, r5
 801a146:	fa03 f000 	lsl.w	r0, r3, r0
 801a14a:	9b04      	ldr	r3, [sp, #16]
 801a14c:	4303      	orrs	r3, r0
 801a14e:	f108 0801 	add.w	r8, r8, #1
 801a152:	9304      	str	r3, [sp, #16]
 801a154:	f898 1000 	ldrb.w	r1, [r8]
 801a158:	482a      	ldr	r0, [pc, #168]	; (801a204 <_vfiprintf_r+0x220>)
 801a15a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a15e:	2206      	movs	r2, #6
 801a160:	f108 0701 	add.w	r7, r8, #1
 801a164:	f7e6 f8c4 	bl	80002f0 <memchr>
 801a168:	2800      	cmp	r0, #0
 801a16a:	d037      	beq.n	801a1dc <_vfiprintf_r+0x1f8>
 801a16c:	4b26      	ldr	r3, [pc, #152]	; (801a208 <_vfiprintf_r+0x224>)
 801a16e:	bb1b      	cbnz	r3, 801a1b8 <_vfiprintf_r+0x1d4>
 801a170:	9b03      	ldr	r3, [sp, #12]
 801a172:	3307      	adds	r3, #7
 801a174:	f023 0307 	bic.w	r3, r3, #7
 801a178:	3308      	adds	r3, #8
 801a17a:	9303      	str	r3, [sp, #12]
 801a17c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a17e:	444b      	add	r3, r9
 801a180:	9309      	str	r3, [sp, #36]	; 0x24
 801a182:	e750      	b.n	801a026 <_vfiprintf_r+0x42>
 801a184:	fb05 3202 	mla	r2, r5, r2, r3
 801a188:	2001      	movs	r0, #1
 801a18a:	4688      	mov	r8, r1
 801a18c:	e78a      	b.n	801a0a4 <_vfiprintf_r+0xc0>
 801a18e:	2300      	movs	r3, #0
 801a190:	f108 0801 	add.w	r8, r8, #1
 801a194:	9305      	str	r3, [sp, #20]
 801a196:	4619      	mov	r1, r3
 801a198:	250a      	movs	r5, #10
 801a19a:	4640      	mov	r0, r8
 801a19c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a1a0:	3a30      	subs	r2, #48	; 0x30
 801a1a2:	2a09      	cmp	r2, #9
 801a1a4:	d903      	bls.n	801a1ae <_vfiprintf_r+0x1ca>
 801a1a6:	2b00      	cmp	r3, #0
 801a1a8:	d0c3      	beq.n	801a132 <_vfiprintf_r+0x14e>
 801a1aa:	9105      	str	r1, [sp, #20]
 801a1ac:	e7c1      	b.n	801a132 <_vfiprintf_r+0x14e>
 801a1ae:	fb05 2101 	mla	r1, r5, r1, r2
 801a1b2:	2301      	movs	r3, #1
 801a1b4:	4680      	mov	r8, r0
 801a1b6:	e7f0      	b.n	801a19a <_vfiprintf_r+0x1b6>
 801a1b8:	ab03      	add	r3, sp, #12
 801a1ba:	9300      	str	r3, [sp, #0]
 801a1bc:	4622      	mov	r2, r4
 801a1be:	4b13      	ldr	r3, [pc, #76]	; (801a20c <_vfiprintf_r+0x228>)
 801a1c0:	a904      	add	r1, sp, #16
 801a1c2:	4630      	mov	r0, r6
 801a1c4:	f3af 8000 	nop.w
 801a1c8:	f1b0 3fff 	cmp.w	r0, #4294967295
 801a1cc:	4681      	mov	r9, r0
 801a1ce:	d1d5      	bne.n	801a17c <_vfiprintf_r+0x198>
 801a1d0:	89a3      	ldrh	r3, [r4, #12]
 801a1d2:	065b      	lsls	r3, r3, #25
 801a1d4:	f53f af7e 	bmi.w	801a0d4 <_vfiprintf_r+0xf0>
 801a1d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a1da:	e77d      	b.n	801a0d8 <_vfiprintf_r+0xf4>
 801a1dc:	ab03      	add	r3, sp, #12
 801a1de:	9300      	str	r3, [sp, #0]
 801a1e0:	4622      	mov	r2, r4
 801a1e2:	4b0a      	ldr	r3, [pc, #40]	; (801a20c <_vfiprintf_r+0x228>)
 801a1e4:	a904      	add	r1, sp, #16
 801a1e6:	4630      	mov	r0, r6
 801a1e8:	f000 f888 	bl	801a2fc <_printf_i>
 801a1ec:	e7ec      	b.n	801a1c8 <_vfiprintf_r+0x1e4>
 801a1ee:	bf00      	nop
 801a1f0:	0801b040 	.word	0x0801b040
 801a1f4:	0801b080 	.word	0x0801b080
 801a1f8:	0801b060 	.word	0x0801b060
 801a1fc:	0801b020 	.word	0x0801b020
 801a200:	0801b086 	.word	0x0801b086
 801a204:	0801b08a 	.word	0x0801b08a
 801a208:	00000000 	.word	0x00000000
 801a20c:	08019fbf 	.word	0x08019fbf

0801a210 <_printf_common>:
 801a210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a214:	4691      	mov	r9, r2
 801a216:	461f      	mov	r7, r3
 801a218:	688a      	ldr	r2, [r1, #8]
 801a21a:	690b      	ldr	r3, [r1, #16]
 801a21c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a220:	4293      	cmp	r3, r2
 801a222:	bfb8      	it	lt
 801a224:	4613      	movlt	r3, r2
 801a226:	f8c9 3000 	str.w	r3, [r9]
 801a22a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a22e:	4606      	mov	r6, r0
 801a230:	460c      	mov	r4, r1
 801a232:	b112      	cbz	r2, 801a23a <_printf_common+0x2a>
 801a234:	3301      	adds	r3, #1
 801a236:	f8c9 3000 	str.w	r3, [r9]
 801a23a:	6823      	ldr	r3, [r4, #0]
 801a23c:	0699      	lsls	r1, r3, #26
 801a23e:	bf42      	ittt	mi
 801a240:	f8d9 3000 	ldrmi.w	r3, [r9]
 801a244:	3302      	addmi	r3, #2
 801a246:	f8c9 3000 	strmi.w	r3, [r9]
 801a24a:	6825      	ldr	r5, [r4, #0]
 801a24c:	f015 0506 	ands.w	r5, r5, #6
 801a250:	d107      	bne.n	801a262 <_printf_common+0x52>
 801a252:	f104 0a19 	add.w	sl, r4, #25
 801a256:	68e3      	ldr	r3, [r4, #12]
 801a258:	f8d9 2000 	ldr.w	r2, [r9]
 801a25c:	1a9b      	subs	r3, r3, r2
 801a25e:	42ab      	cmp	r3, r5
 801a260:	dc28      	bgt.n	801a2b4 <_printf_common+0xa4>
 801a262:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801a266:	6822      	ldr	r2, [r4, #0]
 801a268:	3300      	adds	r3, #0
 801a26a:	bf18      	it	ne
 801a26c:	2301      	movne	r3, #1
 801a26e:	0692      	lsls	r2, r2, #26
 801a270:	d42d      	bmi.n	801a2ce <_printf_common+0xbe>
 801a272:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a276:	4639      	mov	r1, r7
 801a278:	4630      	mov	r0, r6
 801a27a:	47c0      	blx	r8
 801a27c:	3001      	adds	r0, #1
 801a27e:	d020      	beq.n	801a2c2 <_printf_common+0xb2>
 801a280:	6823      	ldr	r3, [r4, #0]
 801a282:	68e5      	ldr	r5, [r4, #12]
 801a284:	f8d9 2000 	ldr.w	r2, [r9]
 801a288:	f003 0306 	and.w	r3, r3, #6
 801a28c:	2b04      	cmp	r3, #4
 801a28e:	bf08      	it	eq
 801a290:	1aad      	subeq	r5, r5, r2
 801a292:	68a3      	ldr	r3, [r4, #8]
 801a294:	6922      	ldr	r2, [r4, #16]
 801a296:	bf0c      	ite	eq
 801a298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a29c:	2500      	movne	r5, #0
 801a29e:	4293      	cmp	r3, r2
 801a2a0:	bfc4      	itt	gt
 801a2a2:	1a9b      	subgt	r3, r3, r2
 801a2a4:	18ed      	addgt	r5, r5, r3
 801a2a6:	f04f 0900 	mov.w	r9, #0
 801a2aa:	341a      	adds	r4, #26
 801a2ac:	454d      	cmp	r5, r9
 801a2ae:	d11a      	bne.n	801a2e6 <_printf_common+0xd6>
 801a2b0:	2000      	movs	r0, #0
 801a2b2:	e008      	b.n	801a2c6 <_printf_common+0xb6>
 801a2b4:	2301      	movs	r3, #1
 801a2b6:	4652      	mov	r2, sl
 801a2b8:	4639      	mov	r1, r7
 801a2ba:	4630      	mov	r0, r6
 801a2bc:	47c0      	blx	r8
 801a2be:	3001      	adds	r0, #1
 801a2c0:	d103      	bne.n	801a2ca <_printf_common+0xba>
 801a2c2:	f04f 30ff 	mov.w	r0, #4294967295
 801a2c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a2ca:	3501      	adds	r5, #1
 801a2cc:	e7c3      	b.n	801a256 <_printf_common+0x46>
 801a2ce:	18e1      	adds	r1, r4, r3
 801a2d0:	1c5a      	adds	r2, r3, #1
 801a2d2:	2030      	movs	r0, #48	; 0x30
 801a2d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a2d8:	4422      	add	r2, r4
 801a2da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a2de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a2e2:	3302      	adds	r3, #2
 801a2e4:	e7c5      	b.n	801a272 <_printf_common+0x62>
 801a2e6:	2301      	movs	r3, #1
 801a2e8:	4622      	mov	r2, r4
 801a2ea:	4639      	mov	r1, r7
 801a2ec:	4630      	mov	r0, r6
 801a2ee:	47c0      	blx	r8
 801a2f0:	3001      	adds	r0, #1
 801a2f2:	d0e6      	beq.n	801a2c2 <_printf_common+0xb2>
 801a2f4:	f109 0901 	add.w	r9, r9, #1
 801a2f8:	e7d8      	b.n	801a2ac <_printf_common+0x9c>
	...

0801a2fc <_printf_i>:
 801a2fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a300:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801a304:	460c      	mov	r4, r1
 801a306:	7e09      	ldrb	r1, [r1, #24]
 801a308:	b085      	sub	sp, #20
 801a30a:	296e      	cmp	r1, #110	; 0x6e
 801a30c:	4617      	mov	r7, r2
 801a30e:	4606      	mov	r6, r0
 801a310:	4698      	mov	r8, r3
 801a312:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a314:	f000 80b3 	beq.w	801a47e <_printf_i+0x182>
 801a318:	d822      	bhi.n	801a360 <_printf_i+0x64>
 801a31a:	2963      	cmp	r1, #99	; 0x63
 801a31c:	d036      	beq.n	801a38c <_printf_i+0x90>
 801a31e:	d80a      	bhi.n	801a336 <_printf_i+0x3a>
 801a320:	2900      	cmp	r1, #0
 801a322:	f000 80b9 	beq.w	801a498 <_printf_i+0x19c>
 801a326:	2958      	cmp	r1, #88	; 0x58
 801a328:	f000 8083 	beq.w	801a432 <_printf_i+0x136>
 801a32c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a330:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801a334:	e032      	b.n	801a39c <_printf_i+0xa0>
 801a336:	2964      	cmp	r1, #100	; 0x64
 801a338:	d001      	beq.n	801a33e <_printf_i+0x42>
 801a33a:	2969      	cmp	r1, #105	; 0x69
 801a33c:	d1f6      	bne.n	801a32c <_printf_i+0x30>
 801a33e:	6820      	ldr	r0, [r4, #0]
 801a340:	6813      	ldr	r3, [r2, #0]
 801a342:	0605      	lsls	r5, r0, #24
 801a344:	f103 0104 	add.w	r1, r3, #4
 801a348:	d52a      	bpl.n	801a3a0 <_printf_i+0xa4>
 801a34a:	681b      	ldr	r3, [r3, #0]
 801a34c:	6011      	str	r1, [r2, #0]
 801a34e:	2b00      	cmp	r3, #0
 801a350:	da03      	bge.n	801a35a <_printf_i+0x5e>
 801a352:	222d      	movs	r2, #45	; 0x2d
 801a354:	425b      	negs	r3, r3
 801a356:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801a35a:	486f      	ldr	r0, [pc, #444]	; (801a518 <_printf_i+0x21c>)
 801a35c:	220a      	movs	r2, #10
 801a35e:	e039      	b.n	801a3d4 <_printf_i+0xd8>
 801a360:	2973      	cmp	r1, #115	; 0x73
 801a362:	f000 809d 	beq.w	801a4a0 <_printf_i+0x1a4>
 801a366:	d808      	bhi.n	801a37a <_printf_i+0x7e>
 801a368:	296f      	cmp	r1, #111	; 0x6f
 801a36a:	d020      	beq.n	801a3ae <_printf_i+0xb2>
 801a36c:	2970      	cmp	r1, #112	; 0x70
 801a36e:	d1dd      	bne.n	801a32c <_printf_i+0x30>
 801a370:	6823      	ldr	r3, [r4, #0]
 801a372:	f043 0320 	orr.w	r3, r3, #32
 801a376:	6023      	str	r3, [r4, #0]
 801a378:	e003      	b.n	801a382 <_printf_i+0x86>
 801a37a:	2975      	cmp	r1, #117	; 0x75
 801a37c:	d017      	beq.n	801a3ae <_printf_i+0xb2>
 801a37e:	2978      	cmp	r1, #120	; 0x78
 801a380:	d1d4      	bne.n	801a32c <_printf_i+0x30>
 801a382:	2378      	movs	r3, #120	; 0x78
 801a384:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a388:	4864      	ldr	r0, [pc, #400]	; (801a51c <_printf_i+0x220>)
 801a38a:	e055      	b.n	801a438 <_printf_i+0x13c>
 801a38c:	6813      	ldr	r3, [r2, #0]
 801a38e:	1d19      	adds	r1, r3, #4
 801a390:	681b      	ldr	r3, [r3, #0]
 801a392:	6011      	str	r1, [r2, #0]
 801a394:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a398:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a39c:	2301      	movs	r3, #1
 801a39e:	e08c      	b.n	801a4ba <_printf_i+0x1be>
 801a3a0:	681b      	ldr	r3, [r3, #0]
 801a3a2:	6011      	str	r1, [r2, #0]
 801a3a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a3a8:	bf18      	it	ne
 801a3aa:	b21b      	sxthne	r3, r3
 801a3ac:	e7cf      	b.n	801a34e <_printf_i+0x52>
 801a3ae:	6813      	ldr	r3, [r2, #0]
 801a3b0:	6825      	ldr	r5, [r4, #0]
 801a3b2:	1d18      	adds	r0, r3, #4
 801a3b4:	6010      	str	r0, [r2, #0]
 801a3b6:	0628      	lsls	r0, r5, #24
 801a3b8:	d501      	bpl.n	801a3be <_printf_i+0xc2>
 801a3ba:	681b      	ldr	r3, [r3, #0]
 801a3bc:	e002      	b.n	801a3c4 <_printf_i+0xc8>
 801a3be:	0668      	lsls	r0, r5, #25
 801a3c0:	d5fb      	bpl.n	801a3ba <_printf_i+0xbe>
 801a3c2:	881b      	ldrh	r3, [r3, #0]
 801a3c4:	4854      	ldr	r0, [pc, #336]	; (801a518 <_printf_i+0x21c>)
 801a3c6:	296f      	cmp	r1, #111	; 0x6f
 801a3c8:	bf14      	ite	ne
 801a3ca:	220a      	movne	r2, #10
 801a3cc:	2208      	moveq	r2, #8
 801a3ce:	2100      	movs	r1, #0
 801a3d0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a3d4:	6865      	ldr	r5, [r4, #4]
 801a3d6:	60a5      	str	r5, [r4, #8]
 801a3d8:	2d00      	cmp	r5, #0
 801a3da:	f2c0 8095 	blt.w	801a508 <_printf_i+0x20c>
 801a3de:	6821      	ldr	r1, [r4, #0]
 801a3e0:	f021 0104 	bic.w	r1, r1, #4
 801a3e4:	6021      	str	r1, [r4, #0]
 801a3e6:	2b00      	cmp	r3, #0
 801a3e8:	d13d      	bne.n	801a466 <_printf_i+0x16a>
 801a3ea:	2d00      	cmp	r5, #0
 801a3ec:	f040 808e 	bne.w	801a50c <_printf_i+0x210>
 801a3f0:	4665      	mov	r5, ip
 801a3f2:	2a08      	cmp	r2, #8
 801a3f4:	d10b      	bne.n	801a40e <_printf_i+0x112>
 801a3f6:	6823      	ldr	r3, [r4, #0]
 801a3f8:	07db      	lsls	r3, r3, #31
 801a3fa:	d508      	bpl.n	801a40e <_printf_i+0x112>
 801a3fc:	6923      	ldr	r3, [r4, #16]
 801a3fe:	6862      	ldr	r2, [r4, #4]
 801a400:	429a      	cmp	r2, r3
 801a402:	bfde      	ittt	le
 801a404:	2330      	movle	r3, #48	; 0x30
 801a406:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a40a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a40e:	ebac 0305 	sub.w	r3, ip, r5
 801a412:	6123      	str	r3, [r4, #16]
 801a414:	f8cd 8000 	str.w	r8, [sp]
 801a418:	463b      	mov	r3, r7
 801a41a:	aa03      	add	r2, sp, #12
 801a41c:	4621      	mov	r1, r4
 801a41e:	4630      	mov	r0, r6
 801a420:	f7ff fef6 	bl	801a210 <_printf_common>
 801a424:	3001      	adds	r0, #1
 801a426:	d14d      	bne.n	801a4c4 <_printf_i+0x1c8>
 801a428:	f04f 30ff 	mov.w	r0, #4294967295
 801a42c:	b005      	add	sp, #20
 801a42e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a432:	4839      	ldr	r0, [pc, #228]	; (801a518 <_printf_i+0x21c>)
 801a434:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801a438:	6813      	ldr	r3, [r2, #0]
 801a43a:	6821      	ldr	r1, [r4, #0]
 801a43c:	1d1d      	adds	r5, r3, #4
 801a43e:	681b      	ldr	r3, [r3, #0]
 801a440:	6015      	str	r5, [r2, #0]
 801a442:	060a      	lsls	r2, r1, #24
 801a444:	d50b      	bpl.n	801a45e <_printf_i+0x162>
 801a446:	07ca      	lsls	r2, r1, #31
 801a448:	bf44      	itt	mi
 801a44a:	f041 0120 	orrmi.w	r1, r1, #32
 801a44e:	6021      	strmi	r1, [r4, #0]
 801a450:	b91b      	cbnz	r3, 801a45a <_printf_i+0x15e>
 801a452:	6822      	ldr	r2, [r4, #0]
 801a454:	f022 0220 	bic.w	r2, r2, #32
 801a458:	6022      	str	r2, [r4, #0]
 801a45a:	2210      	movs	r2, #16
 801a45c:	e7b7      	b.n	801a3ce <_printf_i+0xd2>
 801a45e:	064d      	lsls	r5, r1, #25
 801a460:	bf48      	it	mi
 801a462:	b29b      	uxthmi	r3, r3
 801a464:	e7ef      	b.n	801a446 <_printf_i+0x14a>
 801a466:	4665      	mov	r5, ip
 801a468:	fbb3 f1f2 	udiv	r1, r3, r2
 801a46c:	fb02 3311 	mls	r3, r2, r1, r3
 801a470:	5cc3      	ldrb	r3, [r0, r3]
 801a472:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801a476:	460b      	mov	r3, r1
 801a478:	2900      	cmp	r1, #0
 801a47a:	d1f5      	bne.n	801a468 <_printf_i+0x16c>
 801a47c:	e7b9      	b.n	801a3f2 <_printf_i+0xf6>
 801a47e:	6813      	ldr	r3, [r2, #0]
 801a480:	6825      	ldr	r5, [r4, #0]
 801a482:	6961      	ldr	r1, [r4, #20]
 801a484:	1d18      	adds	r0, r3, #4
 801a486:	6010      	str	r0, [r2, #0]
 801a488:	0628      	lsls	r0, r5, #24
 801a48a:	681b      	ldr	r3, [r3, #0]
 801a48c:	d501      	bpl.n	801a492 <_printf_i+0x196>
 801a48e:	6019      	str	r1, [r3, #0]
 801a490:	e002      	b.n	801a498 <_printf_i+0x19c>
 801a492:	066a      	lsls	r2, r5, #25
 801a494:	d5fb      	bpl.n	801a48e <_printf_i+0x192>
 801a496:	8019      	strh	r1, [r3, #0]
 801a498:	2300      	movs	r3, #0
 801a49a:	6123      	str	r3, [r4, #16]
 801a49c:	4665      	mov	r5, ip
 801a49e:	e7b9      	b.n	801a414 <_printf_i+0x118>
 801a4a0:	6813      	ldr	r3, [r2, #0]
 801a4a2:	1d19      	adds	r1, r3, #4
 801a4a4:	6011      	str	r1, [r2, #0]
 801a4a6:	681d      	ldr	r5, [r3, #0]
 801a4a8:	6862      	ldr	r2, [r4, #4]
 801a4aa:	2100      	movs	r1, #0
 801a4ac:	4628      	mov	r0, r5
 801a4ae:	f7e5 ff1f 	bl	80002f0 <memchr>
 801a4b2:	b108      	cbz	r0, 801a4b8 <_printf_i+0x1bc>
 801a4b4:	1b40      	subs	r0, r0, r5
 801a4b6:	6060      	str	r0, [r4, #4]
 801a4b8:	6863      	ldr	r3, [r4, #4]
 801a4ba:	6123      	str	r3, [r4, #16]
 801a4bc:	2300      	movs	r3, #0
 801a4be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a4c2:	e7a7      	b.n	801a414 <_printf_i+0x118>
 801a4c4:	6923      	ldr	r3, [r4, #16]
 801a4c6:	462a      	mov	r2, r5
 801a4c8:	4639      	mov	r1, r7
 801a4ca:	4630      	mov	r0, r6
 801a4cc:	47c0      	blx	r8
 801a4ce:	3001      	adds	r0, #1
 801a4d0:	d0aa      	beq.n	801a428 <_printf_i+0x12c>
 801a4d2:	6823      	ldr	r3, [r4, #0]
 801a4d4:	079b      	lsls	r3, r3, #30
 801a4d6:	d413      	bmi.n	801a500 <_printf_i+0x204>
 801a4d8:	68e0      	ldr	r0, [r4, #12]
 801a4da:	9b03      	ldr	r3, [sp, #12]
 801a4dc:	4298      	cmp	r0, r3
 801a4de:	bfb8      	it	lt
 801a4e0:	4618      	movlt	r0, r3
 801a4e2:	e7a3      	b.n	801a42c <_printf_i+0x130>
 801a4e4:	2301      	movs	r3, #1
 801a4e6:	464a      	mov	r2, r9
 801a4e8:	4639      	mov	r1, r7
 801a4ea:	4630      	mov	r0, r6
 801a4ec:	47c0      	blx	r8
 801a4ee:	3001      	adds	r0, #1
 801a4f0:	d09a      	beq.n	801a428 <_printf_i+0x12c>
 801a4f2:	3501      	adds	r5, #1
 801a4f4:	68e3      	ldr	r3, [r4, #12]
 801a4f6:	9a03      	ldr	r2, [sp, #12]
 801a4f8:	1a9b      	subs	r3, r3, r2
 801a4fa:	42ab      	cmp	r3, r5
 801a4fc:	dcf2      	bgt.n	801a4e4 <_printf_i+0x1e8>
 801a4fe:	e7eb      	b.n	801a4d8 <_printf_i+0x1dc>
 801a500:	2500      	movs	r5, #0
 801a502:	f104 0919 	add.w	r9, r4, #25
 801a506:	e7f5      	b.n	801a4f4 <_printf_i+0x1f8>
 801a508:	2b00      	cmp	r3, #0
 801a50a:	d1ac      	bne.n	801a466 <_printf_i+0x16a>
 801a50c:	7803      	ldrb	r3, [r0, #0]
 801a50e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a512:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a516:	e76c      	b.n	801a3f2 <_printf_i+0xf6>
 801a518:	0801b091 	.word	0x0801b091
 801a51c:	0801b0a2 	.word	0x0801b0a2

0801a520 <__sread>:
 801a520:	b510      	push	{r4, lr}
 801a522:	460c      	mov	r4, r1
 801a524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a528:	f000 f8d4 	bl	801a6d4 <_read_r>
 801a52c:	2800      	cmp	r0, #0
 801a52e:	bfab      	itete	ge
 801a530:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a532:	89a3      	ldrhlt	r3, [r4, #12]
 801a534:	181b      	addge	r3, r3, r0
 801a536:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a53a:	bfac      	ite	ge
 801a53c:	6563      	strge	r3, [r4, #84]	; 0x54
 801a53e:	81a3      	strhlt	r3, [r4, #12]
 801a540:	bd10      	pop	{r4, pc}

0801a542 <__swrite>:
 801a542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a546:	461f      	mov	r7, r3
 801a548:	898b      	ldrh	r3, [r1, #12]
 801a54a:	05db      	lsls	r3, r3, #23
 801a54c:	4605      	mov	r5, r0
 801a54e:	460c      	mov	r4, r1
 801a550:	4616      	mov	r6, r2
 801a552:	d505      	bpl.n	801a560 <__swrite+0x1e>
 801a554:	2302      	movs	r3, #2
 801a556:	2200      	movs	r2, #0
 801a558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a55c:	f000 f868 	bl	801a630 <_lseek_r>
 801a560:	89a3      	ldrh	r3, [r4, #12]
 801a562:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a566:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a56a:	81a3      	strh	r3, [r4, #12]
 801a56c:	4632      	mov	r2, r6
 801a56e:	463b      	mov	r3, r7
 801a570:	4628      	mov	r0, r5
 801a572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a576:	f000 b817 	b.w	801a5a8 <_write_r>

0801a57a <__sseek>:
 801a57a:	b510      	push	{r4, lr}
 801a57c:	460c      	mov	r4, r1
 801a57e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a582:	f000 f855 	bl	801a630 <_lseek_r>
 801a586:	1c43      	adds	r3, r0, #1
 801a588:	89a3      	ldrh	r3, [r4, #12]
 801a58a:	bf15      	itete	ne
 801a58c:	6560      	strne	r0, [r4, #84]	; 0x54
 801a58e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a592:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a596:	81a3      	strheq	r3, [r4, #12]
 801a598:	bf18      	it	ne
 801a59a:	81a3      	strhne	r3, [r4, #12]
 801a59c:	bd10      	pop	{r4, pc}

0801a59e <__sclose>:
 801a59e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a5a2:	f000 b813 	b.w	801a5cc <_close_r>
	...

0801a5a8 <_write_r>:
 801a5a8:	b538      	push	{r3, r4, r5, lr}
 801a5aa:	4c07      	ldr	r4, [pc, #28]	; (801a5c8 <_write_r+0x20>)
 801a5ac:	4605      	mov	r5, r0
 801a5ae:	4608      	mov	r0, r1
 801a5b0:	4611      	mov	r1, r2
 801a5b2:	2200      	movs	r2, #0
 801a5b4:	6022      	str	r2, [r4, #0]
 801a5b6:	461a      	mov	r2, r3
 801a5b8:	f7e9 fb47 	bl	8003c4a <_write>
 801a5bc:	1c43      	adds	r3, r0, #1
 801a5be:	d102      	bne.n	801a5c6 <_write_r+0x1e>
 801a5c0:	6823      	ldr	r3, [r4, #0]
 801a5c2:	b103      	cbz	r3, 801a5c6 <_write_r+0x1e>
 801a5c4:	602b      	str	r3, [r5, #0]
 801a5c6:	bd38      	pop	{r3, r4, r5, pc}
 801a5c8:	2400248c 	.word	0x2400248c

0801a5cc <_close_r>:
 801a5cc:	b538      	push	{r3, r4, r5, lr}
 801a5ce:	4c06      	ldr	r4, [pc, #24]	; (801a5e8 <_close_r+0x1c>)
 801a5d0:	2300      	movs	r3, #0
 801a5d2:	4605      	mov	r5, r0
 801a5d4:	4608      	mov	r0, r1
 801a5d6:	6023      	str	r3, [r4, #0]
 801a5d8:	f7e9 fe47 	bl	800426a <_close>
 801a5dc:	1c43      	adds	r3, r0, #1
 801a5de:	d102      	bne.n	801a5e6 <_close_r+0x1a>
 801a5e0:	6823      	ldr	r3, [r4, #0]
 801a5e2:	b103      	cbz	r3, 801a5e6 <_close_r+0x1a>
 801a5e4:	602b      	str	r3, [r5, #0]
 801a5e6:	bd38      	pop	{r3, r4, r5, pc}
 801a5e8:	2400248c 	.word	0x2400248c

0801a5ec <_fstat_r>:
 801a5ec:	b538      	push	{r3, r4, r5, lr}
 801a5ee:	4c07      	ldr	r4, [pc, #28]	; (801a60c <_fstat_r+0x20>)
 801a5f0:	2300      	movs	r3, #0
 801a5f2:	4605      	mov	r5, r0
 801a5f4:	4608      	mov	r0, r1
 801a5f6:	4611      	mov	r1, r2
 801a5f8:	6023      	str	r3, [r4, #0]
 801a5fa:	f7e9 fe42 	bl	8004282 <_fstat>
 801a5fe:	1c43      	adds	r3, r0, #1
 801a600:	d102      	bne.n	801a608 <_fstat_r+0x1c>
 801a602:	6823      	ldr	r3, [r4, #0]
 801a604:	b103      	cbz	r3, 801a608 <_fstat_r+0x1c>
 801a606:	602b      	str	r3, [r5, #0]
 801a608:	bd38      	pop	{r3, r4, r5, pc}
 801a60a:	bf00      	nop
 801a60c:	2400248c 	.word	0x2400248c

0801a610 <_isatty_r>:
 801a610:	b538      	push	{r3, r4, r5, lr}
 801a612:	4c06      	ldr	r4, [pc, #24]	; (801a62c <_isatty_r+0x1c>)
 801a614:	2300      	movs	r3, #0
 801a616:	4605      	mov	r5, r0
 801a618:	4608      	mov	r0, r1
 801a61a:	6023      	str	r3, [r4, #0]
 801a61c:	f7e9 fe41 	bl	80042a2 <_isatty>
 801a620:	1c43      	adds	r3, r0, #1
 801a622:	d102      	bne.n	801a62a <_isatty_r+0x1a>
 801a624:	6823      	ldr	r3, [r4, #0]
 801a626:	b103      	cbz	r3, 801a62a <_isatty_r+0x1a>
 801a628:	602b      	str	r3, [r5, #0]
 801a62a:	bd38      	pop	{r3, r4, r5, pc}
 801a62c:	2400248c 	.word	0x2400248c

0801a630 <_lseek_r>:
 801a630:	b538      	push	{r3, r4, r5, lr}
 801a632:	4c07      	ldr	r4, [pc, #28]	; (801a650 <_lseek_r+0x20>)
 801a634:	4605      	mov	r5, r0
 801a636:	4608      	mov	r0, r1
 801a638:	4611      	mov	r1, r2
 801a63a:	2200      	movs	r2, #0
 801a63c:	6022      	str	r2, [r4, #0]
 801a63e:	461a      	mov	r2, r3
 801a640:	f7e9 fe3a 	bl	80042b8 <_lseek>
 801a644:	1c43      	adds	r3, r0, #1
 801a646:	d102      	bne.n	801a64e <_lseek_r+0x1e>
 801a648:	6823      	ldr	r3, [r4, #0]
 801a64a:	b103      	cbz	r3, 801a64e <_lseek_r+0x1e>
 801a64c:	602b      	str	r3, [r5, #0]
 801a64e:	bd38      	pop	{r3, r4, r5, pc}
 801a650:	2400248c 	.word	0x2400248c

0801a654 <memmove>:
 801a654:	4288      	cmp	r0, r1
 801a656:	b510      	push	{r4, lr}
 801a658:	eb01 0302 	add.w	r3, r1, r2
 801a65c:	d807      	bhi.n	801a66e <memmove+0x1a>
 801a65e:	1e42      	subs	r2, r0, #1
 801a660:	4299      	cmp	r1, r3
 801a662:	d00a      	beq.n	801a67a <memmove+0x26>
 801a664:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a668:	f802 4f01 	strb.w	r4, [r2, #1]!
 801a66c:	e7f8      	b.n	801a660 <memmove+0xc>
 801a66e:	4283      	cmp	r3, r0
 801a670:	d9f5      	bls.n	801a65e <memmove+0xa>
 801a672:	1881      	adds	r1, r0, r2
 801a674:	1ad2      	subs	r2, r2, r3
 801a676:	42d3      	cmn	r3, r2
 801a678:	d100      	bne.n	801a67c <memmove+0x28>
 801a67a:	bd10      	pop	{r4, pc}
 801a67c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a680:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801a684:	e7f7      	b.n	801a676 <memmove+0x22>

0801a686 <_realloc_r>:
 801a686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a688:	4607      	mov	r7, r0
 801a68a:	4614      	mov	r4, r2
 801a68c:	460e      	mov	r6, r1
 801a68e:	b921      	cbnz	r1, 801a69a <_realloc_r+0x14>
 801a690:	4611      	mov	r1, r2
 801a692:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a696:	f7fe bf47 	b.w	8019528 <_malloc_r>
 801a69a:	b922      	cbnz	r2, 801a6a6 <_realloc_r+0x20>
 801a69c:	f7fe fef6 	bl	801948c <_free_r>
 801a6a0:	4625      	mov	r5, r4
 801a6a2:	4628      	mov	r0, r5
 801a6a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a6a6:	f000 f827 	bl	801a6f8 <_malloc_usable_size_r>
 801a6aa:	42a0      	cmp	r0, r4
 801a6ac:	d20f      	bcs.n	801a6ce <_realloc_r+0x48>
 801a6ae:	4621      	mov	r1, r4
 801a6b0:	4638      	mov	r0, r7
 801a6b2:	f7fe ff39 	bl	8019528 <_malloc_r>
 801a6b6:	4605      	mov	r5, r0
 801a6b8:	2800      	cmp	r0, #0
 801a6ba:	d0f2      	beq.n	801a6a2 <_realloc_r+0x1c>
 801a6bc:	4631      	mov	r1, r6
 801a6be:	4622      	mov	r2, r4
 801a6c0:	f7fe fed0 	bl	8019464 <memcpy>
 801a6c4:	4631      	mov	r1, r6
 801a6c6:	4638      	mov	r0, r7
 801a6c8:	f7fe fee0 	bl	801948c <_free_r>
 801a6cc:	e7e9      	b.n	801a6a2 <_realloc_r+0x1c>
 801a6ce:	4635      	mov	r5, r6
 801a6d0:	e7e7      	b.n	801a6a2 <_realloc_r+0x1c>
	...

0801a6d4 <_read_r>:
 801a6d4:	b538      	push	{r3, r4, r5, lr}
 801a6d6:	4c07      	ldr	r4, [pc, #28]	; (801a6f4 <_read_r+0x20>)
 801a6d8:	4605      	mov	r5, r0
 801a6da:	4608      	mov	r0, r1
 801a6dc:	4611      	mov	r1, r2
 801a6de:	2200      	movs	r2, #0
 801a6e0:	6022      	str	r2, [r4, #0]
 801a6e2:	461a      	mov	r2, r3
 801a6e4:	f7e9 fda4 	bl	8004230 <_read>
 801a6e8:	1c43      	adds	r3, r0, #1
 801a6ea:	d102      	bne.n	801a6f2 <_read_r+0x1e>
 801a6ec:	6823      	ldr	r3, [r4, #0]
 801a6ee:	b103      	cbz	r3, 801a6f2 <_read_r+0x1e>
 801a6f0:	602b      	str	r3, [r5, #0]
 801a6f2:	bd38      	pop	{r3, r4, r5, pc}
 801a6f4:	2400248c 	.word	0x2400248c

0801a6f8 <_malloc_usable_size_r>:
 801a6f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a6fc:	1f18      	subs	r0, r3, #4
 801a6fe:	2b00      	cmp	r3, #0
 801a700:	bfbc      	itt	lt
 801a702:	580b      	ldrlt	r3, [r1, r0]
 801a704:	18c0      	addlt	r0, r0, r3
 801a706:	4770      	bx	lr

0801a708 <_init>:
 801a708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a70a:	bf00      	nop
 801a70c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a70e:	bc08      	pop	{r3}
 801a710:	469e      	mov	lr, r3
 801a712:	4770      	bx	lr

0801a714 <_fini>:
 801a714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a716:	bf00      	nop
 801a718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a71a:	bc08      	pop	{r3}
 801a71c:	469e      	mov	lr, r3
 801a71e:	4770      	bx	lr


Data-Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001252c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  080127c4  080127c4  000227c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012a28  08012a28  000301cc  2**0
                  CONTENTS
  4 .ARM          00000008  08012a28  08012a28  00022a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012a30  08012a30  000301cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012a30  08012a30  00022a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012a34  08012a34  00022a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  24000000  08012a38  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015e8  240001cc  08012c04  000301cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240017b4  08012c04  000317b4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b9a0  00000000  00000000  000301fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000063d6  00000000  00000000  0006bb9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ef0  00000000  00000000  00071f70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c70  00000000  00000000  00073e60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000a583  00000000  00000000  00075ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00021091  00000000  00000000  00080053  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0016f50b  00000000  00000000  000a10e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002105ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008484  00000000  00000000  0021066c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240001cc 	.word	0x240001cc
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080127ac 	.word	0x080127ac

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240001d0 	.word	0x240001d0
 80002d4:	080127ac 	.word	0x080127ac

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b5b0      	push	{r4, r5, r7, lr}
 80005da:	b090      	sub	sp, #64	; 0x40
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f000 ff53 	bl	8001488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f85d 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 fb1f 	bl	8000c28 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ea:	f000 fafd 	bl	8000be8 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 80005ee:	f000 f9eb 	bl	80009c8 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80005f2:	f00c fa49 	bl	800ca88 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80005f6:	f011 fb0f 	bl	8011c18 <MX_USB_DEVICE_Init>
  MX_FDCAN1_Init();
 80005fa:	f000 f91d 	bl	8000838 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80005fe:	f000 f97f 	bl	8000900 <MX_FDCAN2_Init>
  MX_UART8_Init();
 8000602:	f000 fa59 	bl	8000ab8 <MX_UART8_Init>
  MX_USART3_UART_Init();
 8000606:	f000 faa3 	bl	8000b50 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 800060a:	f000 f9ff 	bl	8000a0c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  if(f_mount(&myFATAFS, SDPath, 1) == FR_OK){
 800060e:	2201      	movs	r2, #1
 8000610:	491c      	ldr	r1, [pc, #112]	; (8000684 <main+0xac>)
 8000612:	481d      	ldr	r0, [pc, #116]	; (8000688 <main+0xb0>)
 8000614:	f010 fe82 	bl	801131c <f_mount>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d131      	bne.n	8000682 <main+0xaa>
  	  char myPath[] = "Data.csv\0";
 800061e:	4a1b      	ldr	r2, [pc, #108]	; (800068c <main+0xb4>)
 8000620:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000624:	ca07      	ldmia	r2, {r0, r1, r2}
 8000626:	c303      	stmia	r3!, {r0, r1}
 8000628:	801a      	strh	r2, [r3, #0]
  	  f_open(&myFILE, myPath, FA_WRITE | FA_CREATE_ALWAYS);
 800062a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800062e:	220a      	movs	r2, #10
 8000630:	4619      	mov	r1, r3
 8000632:	4817      	ldr	r0, [pc, #92]	; (8000690 <main+0xb8>)
 8000634:	f010 feb8 	bl	80113a8 <f_open>
  	  char myData[] = "This is some data. This is some more data";
 8000638:	4b16      	ldr	r3, [pc, #88]	; (8000694 <main+0xbc>)
 800063a:	1d3c      	adds	r4, r7, #4
 800063c:	461d      	mov	r5, r3
 800063e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000642:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000644:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000646:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800064a:	c403      	stmia	r4!, {r0, r1}
 800064c:	8022      	strh	r2, [r4, #0]
  	  f_write(&myFILE, myData, sizeof(myData), &testByte);
 800064e:	1d39      	adds	r1, r7, #4
 8000650:	4b11      	ldr	r3, [pc, #68]	; (8000698 <main+0xc0>)
 8000652:	222a      	movs	r2, #42	; 0x2a
 8000654:	480e      	ldr	r0, [pc, #56]	; (8000690 <main+0xb8>)
 8000656:	f011 f865 	bl	8011724 <f_write>
  	  f_close(&myFILE);
 800065a:	480d      	ldr	r0, [pc, #52]	; (8000690 <main+0xb8>)
 800065c:	f011 fa55 	bl	8011b0a <f_close>
  	  for(int i=0; i<3; i++){
 8000660:	2300      	movs	r3, #0
 8000662:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000664:	e00a      	b.n	800067c <main+0xa4>
  		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000666:	2101      	movs	r1, #1
 8000668:	480c      	ldr	r0, [pc, #48]	; (800069c <main+0xc4>)
 800066a:	f003 fae8 	bl	8003c3e <HAL_GPIO_TogglePin>
  		HAL_Delay(1000);
 800066e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000672:	f000 ff9b 	bl	80015ac <HAL_Delay>
  	  for(int i=0; i<3; i++){
 8000676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000678:	3301      	adds	r3, #1
 800067a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800067c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800067e:	2b02      	cmp	r3, #2
 8000680:	ddf1      	ble.n	8000666 <main+0x8e>
    }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000682:	e7fe      	b.n	8000682 <main+0xaa>
 8000684:	24000a74 	.word	0x24000a74
 8000688:	24000798 	.word	0x24000798
 800068c:	080127c4 	.word	0x080127c4
 8000690:	24000334 	.word	0x24000334
 8000694:	080127d0 	.word	0x080127d0
 8000698:	24000a68 	.word	0x24000a68
 800069c:	58020400 	.word	0x58020400

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b0cc      	sub	sp, #304	; 0x130
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80006aa:	224c      	movs	r2, #76	; 0x4c
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f011 ffb9 	bl	8012626 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80006b8:	2220      	movs	r2, #32
 80006ba:	2100      	movs	r1, #0
 80006bc:	4618      	mov	r0, r3
 80006be:	f011 ffb2 	bl	8012626 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006c2:	f107 0308 	add.w	r3, r7, #8
 80006c6:	4618      	mov	r0, r3
 80006c8:	23bc      	movs	r3, #188	; 0xbc
 80006ca:	461a      	mov	r2, r3
 80006cc:	2100      	movs	r1, #0
 80006ce:	f011 ffaa 	bl	8012626 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006d2:	2002      	movs	r0, #2
 80006d4:	f004 fcd6 	bl	8005084 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	4b53      	ldr	r3, [pc, #332]	; (800082c <SystemClock_Config+0x18c>)
 80006e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006e2:	4a52      	ldr	r2, [pc, #328]	; (800082c <SystemClock_Config+0x18c>)
 80006e4:	f023 0301 	bic.w	r3, r3, #1
 80006e8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006ea:	4b50      	ldr	r3, [pc, #320]	; (800082c <SystemClock_Config+0x18c>)
 80006ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ee:	f003 0201 	and.w	r2, r3, #1
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	4b4e      	ldr	r3, [pc, #312]	; (8000830 <SystemClock_Config+0x190>)
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006fe:	4a4c      	ldr	r2, [pc, #304]	; (8000830 <SystemClock_Config+0x190>)
 8000700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000704:	6193      	str	r3, [r2, #24]
 8000706:	4b4a      	ldr	r3, [pc, #296]	; (8000830 <SystemClock_Config+0x190>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000716:	bf00      	nop
 8000718:	4b45      	ldr	r3, [pc, #276]	; (8000830 <SystemClock_Config+0x190>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000724:	d1f8      	bne.n	8000718 <SystemClock_Config+0x78>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000726:	2303      	movs	r3, #3
 8000728:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800072c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000730:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000734:	2301      	movs	r3, #1
 8000736:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800073a:	2340      	movs	r3, #64	; 0x40
 800073c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000740:	2302      	movs	r3, #2
 8000742:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000746:	2302      	movs	r3, #2
 8000748:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800074c:	2305      	movs	r3, #5
 800074e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 48;
 8000752:	2330      	movs	r3, #48	; 0x30
 8000754:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000758:	2302      	movs	r3, #2
 800075a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800075e:	2305      	movs	r3, #5
 8000760:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000764:	2302      	movs	r3, #2
 8000766:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800076a:	2308      	movs	r3, #8
 800076c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000770:	2300      	movs	r3, #0
 8000772:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000780:	4618      	mov	r0, r3
 8000782:	f004 fcc9 	bl	8005118 <HAL_RCC_OscConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 800078c:	f000 fb36 	bl	8000dfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000790:	233f      	movs	r3, #63	; 0x3f
 8000792:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000796:	2300      	movs	r3, #0
 8000798:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007ba:	2300      	movs	r3, #0
 80007bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007c0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f005 f8b6 	bl	8005938 <HAL_RCC_ClockConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0x136>
  {
    Error_Handler();
 80007d2:	f000 fb13 	bl	8000dfc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_FDCAN
 80007d6:	f107 0308 	add.w	r3, r7, #8
 80007da:	4a16      	ldr	r2, [pc, #88]	; (8000834 <SystemClock_Config+0x194>)
 80007dc:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_SPI1
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80007de:	f107 0308 	add.w	r3, r7, #8
 80007e2:	2200      	movs	r2, #0
 80007e4:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80007e6:	f107 0308 	add.w	r3, r7, #8
 80007ea:	2200      	movs	r2, #0
 80007ec:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	2200      	movs	r2, #0
 80007f4:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80007f6:	f107 0308 	add.w	r3, r7, #8
 80007fa:	2200      	movs	r2, #0
 80007fc:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80007fe:	f107 0308 	add.w	r3, r7, #8
 8000802:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000806:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800080a:	f107 0308 	add.w	r3, r7, #8
 800080e:	4618      	mov	r0, r3
 8000810:	f005 fc16 	bl	8006040 <HAL_RCCEx_PeriphCLKConfig>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0x17e>
  {
    Error_Handler();
 800081a:	f000 faef 	bl	8000dfc <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 800081e:	f004 fc6b 	bl	80050f8 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000822:	bf00      	nop
 8000824:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	58000400 	.word	0x58000400
 8000830:	58024800 	.word	0x58024800
 8000834:	00059002 	.word	0x00059002

08000838 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800083c:	4b2e      	ldr	r3, [pc, #184]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 800083e:	4a2f      	ldr	r2, [pc, #188]	; (80008fc <MX_FDCAN1_Init+0xc4>)
 8000840:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000842:	4b2d      	ldr	r3, [pc, #180]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000848:	4b2b      	ldr	r3, [pc, #172]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800084e:	4b2a      	ldr	r3, [pc, #168]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 8000850:	2200      	movs	r2, #0
 8000852:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000854:	4b28      	ldr	r3, [pc, #160]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 8000856:	2200      	movs	r2, #0
 8000858:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800085a:	4b27      	ldr	r3, [pc, #156]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 800085c:	2200      	movs	r2, #0
 800085e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000860:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 8000862:	2201      	movs	r2, #1
 8000864:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000866:	4b24      	ldr	r3, [pc, #144]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 8000868:	2201      	movs	r2, #1
 800086a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800086c:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 800086e:	2202      	movs	r2, #2
 8000870:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000872:	4b21      	ldr	r3, [pc, #132]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 8000874:	2202      	movs	r2, #2
 8000876:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000878:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 800087a:	2201      	movs	r2, #1
 800087c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800087e:	4b1e      	ldr	r3, [pc, #120]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 8000880:	2201      	movs	r2, #1
 8000882:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000884:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 8000886:	2201      	movs	r2, #1
 8000888:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800088a:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 800088c:	2201      	movs	r2, #1
 800088e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000890:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 8000892:	2200      	movs	r2, #0
 8000894:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000896:	4b18      	ldr	r3, [pc, #96]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 8000898:	2200      	movs	r2, #0
 800089a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800089c:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 800089e:	2200      	movs	r2, #0
 80008a0:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80008a8:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 80008aa:	2204      	movs	r2, #4
 80008ac:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80008ae:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80008b4:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 80008b6:	2204      	movs	r2, #4
 80008b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 80008bc:	2200      	movs	r2, #0
 80008be:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80008c0:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 80008c2:	2204      	movs	r2, #4
 80008c4:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 80008da:	2200      	movs	r2, #0
 80008dc:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 80008e0:	2204      	movs	r2, #4
 80008e2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80008e4:	4804      	ldr	r0, [pc, #16]	; (80008f8 <MX_FDCAN1_Init+0xc0>)
 80008e6:	f002 fc61 	bl	80031ac <HAL_FDCAN_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80008f0:	f000 fa84 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	240005e4 	.word	0x240005e4
 80008fc:	4000a000 	.word	0x4000a000

08000900 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000904:	4b2e      	ldr	r3, [pc, #184]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 8000906:	4a2f      	ldr	r2, [pc, #188]	; (80009c4 <MX_FDCAN2_Init+0xc4>)
 8000908:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800090a:	4b2d      	ldr	r3, [pc, #180]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000910:	4b2b      	ldr	r3, [pc, #172]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000916:	4b2a      	ldr	r3, [pc, #168]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 8000918:	2200      	movs	r2, #0
 800091a:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800091c:	4b28      	ldr	r3, [pc, #160]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 800091e:	2200      	movs	r2, #0
 8000920:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000922:	4b27      	ldr	r3, [pc, #156]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 8000924:	2200      	movs	r2, #0
 8000926:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000928:	4b25      	ldr	r3, [pc, #148]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 800092a:	2201      	movs	r2, #1
 800092c:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 800092e:	4b24      	ldr	r3, [pc, #144]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 8000930:	2201      	movs	r2, #1
 8000932:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000934:	4b22      	ldr	r3, [pc, #136]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 8000936:	2202      	movs	r2, #2
 8000938:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 800093a:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 800093c:	2202      	movs	r2, #2
 800093e:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000940:	4b1f      	ldr	r3, [pc, #124]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 8000942:	2201      	movs	r2, #1
 8000944:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000946:	4b1e      	ldr	r3, [pc, #120]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 8000948:	2201      	movs	r2, #1
 800094a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 800094c:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 800094e:	2201      	movs	r2, #1
 8000950:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000952:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 8000954:	2201      	movs	r2, #1
 8000956:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000958:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 800095a:	2200      	movs	r2, #0
 800095c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 800095e:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 8000960:	2200      	movs	r2, #0
 8000962:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000964:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 8000966:	2200      	movs	r2, #0
 8000968:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 800096a:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 800096c:	2200      	movs	r2, #0
 800096e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000970:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 8000972:	2204      	movs	r2, #4
 8000974:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000976:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 8000978:	2200      	movs	r2, #0
 800097a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800097c:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 800097e:	2204      	movs	r2, #4
 8000980:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000982:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 8000984:	2200      	movs	r2, #0
 8000986:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000988:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 800098a:	2204      	movs	r2, #4
 800098c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 800098e:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 8000990:	2200      	movs	r2, #0
 8000992:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000994:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 8000996:	2200      	movs	r2, #0
 8000998:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 800099c:	2200      	movs	r2, #0
 800099e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80009a0:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 80009a8:	2204      	movs	r2, #4
 80009aa:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80009ac:	4804      	ldr	r0, [pc, #16]	; (80009c0 <MX_FDCAN2_Init+0xc0>)
 80009ae:	f002 fbfd 	bl	80031ac <HAL_FDCAN_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 80009b8:	f000 fa20 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	240009c8 	.word	0x240009c8
 80009c4:	4000a400 	.word	0x4000a400

080009c8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80009cc:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <MX_SDMMC1_SD_Init+0x3c>)
 80009ce:	4a0e      	ldr	r2, [pc, #56]	; (8000a08 <MX_SDMMC1_SD_Init+0x40>)
 80009d0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <MX_SDMMC1_SD_Init+0x3c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80009d8:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <MX_SDMMC1_SD_Init+0x3c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <MX_SDMMC1_SD_Init+0x3c>)
 80009e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009e4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80009e6:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <MX_SDMMC1_SD_Init+0x3c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <MX_SDMMC1_SD_Init+0x3c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 80009f2:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <MX_SDMMC1_SD_Init+0x3c>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	24000564 	.word	0x24000564
 8000a08:	52007000 	.word	0x52007000

08000a0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a10:	4b27      	ldr	r3, [pc, #156]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a12:	4a28      	ldr	r2, [pc, #160]	; (8000ab4 <MX_SPI1_Init+0xa8>)
 8000a14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a16:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a18:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000a1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a1e:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a24:	4b22      	ldr	r3, [pc, #136]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a26:	2207      	movs	r2, #7
 8000a28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a2a:	4b21      	ldr	r3, [pc, #132]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a30:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a36:	4b1e      	ldr	r3, [pc, #120]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a38:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000a3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a44:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a4a:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a50:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000a56:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a62:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_SPI1_Init+0xa4>)
 8000a9c:	f008 fd50 	bl	8009540 <HAL_SPI_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000aa6:	f000 f9a9 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	24000710 	.word	0x24000710
 8000ab4:	40013000 	.word	0x40013000

08000ab8 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000abc:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <MX_UART8_Init+0x90>)
 8000abe:	4a23      	ldr	r2, [pc, #140]	; (8000b4c <MX_UART8_Init+0x94>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000ac2:	4b21      	ldr	r3, [pc, #132]	; (8000b48 <MX_UART8_Init+0x90>)
 8000ac4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac8:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <MX_UART8_Init+0x90>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <MX_UART8_Init+0x90>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <MX_UART8_Init+0x90>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <MX_UART8_Init+0x90>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <MX_UART8_Init+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <MX_UART8_Init+0x90>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aee:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <MX_UART8_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000af4:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <MX_UART8_Init+0x90>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000afa:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <MX_UART8_Init+0x90>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000b00:	4811      	ldr	r0, [pc, #68]	; (8000b48 <MX_UART8_Init+0x90>)
 8000b02:	f008 fe30 	bl	8009766 <HAL_UART_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000b0c:	f000 f976 	bl	8000dfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b10:	2100      	movs	r1, #0
 8000b12:	480d      	ldr	r0, [pc, #52]	; (8000b48 <MX_UART8_Init+0x90>)
 8000b14:	f009 fdcb 	bl	800a6ae <HAL_UARTEx_SetTxFifoThreshold>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000b1e:	f000 f96d 	bl	8000dfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b22:	2100      	movs	r1, #0
 8000b24:	4808      	ldr	r0, [pc, #32]	; (8000b48 <MX_UART8_Init+0x90>)
 8000b26:	f009 fe00 	bl	800a72a <HAL_UARTEx_SetRxFifoThreshold>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000b30:	f000 f964 	bl	8000dfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000b34:	4804      	ldr	r0, [pc, #16]	; (8000b48 <MX_UART8_Init+0x90>)
 8000b36:	f009 fd81 	bl	800a63c <HAL_UARTEx_DisableFifoMode>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000b40:	f000 f95c 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	24000684 	.word	0x24000684
 8000b4c:	40007c00 	.word	0x40007c00

08000b50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b54:	4b22      	ldr	r3, [pc, #136]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000b56:	4a23      	ldr	r2, [pc, #140]	; (8000be4 <MX_USART3_UART_Init+0x94>)
 8000b58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000b5a:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000b5c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000b60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b62:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b68:	4b1d      	ldr	r3, [pc, #116]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b6e:	4b1c      	ldr	r3, [pc, #112]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b74:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000b76:	220c      	movs	r2, #12
 8000b78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7a:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b80:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b86:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b8c:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b92:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b98:	4811      	ldr	r0, [pc, #68]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000b9a:	f008 fde4 	bl	8009766 <HAL_UART_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ba4:	f000 f92a 	bl	8000dfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ba8:	2100      	movs	r1, #0
 8000baa:	480d      	ldr	r0, [pc, #52]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000bac:	f009 fd7f 	bl	800a6ae <HAL_UARTEx_SetTxFifoThreshold>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000bb6:	f000 f921 	bl	8000dfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4808      	ldr	r0, [pc, #32]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000bbe:	f009 fdb4 	bl	800a72a <HAL_UARTEx_SetRxFifoThreshold>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000bc8:	f000 f918 	bl	8000dfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bcc:	4804      	ldr	r0, [pc, #16]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000bce:	f009 fd35 	bl	800a63c <HAL_UARTEx_DisableFifoMode>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000bd8:	f000 f910 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	240002a8 	.word	0x240002a8
 8000be4:	40004800 	.word	0x40004800

08000be8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bee:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <MX_DMA_Init+0x3c>)
 8000bf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bf4:	4a0b      	ldr	r2, [pc, #44]	; (8000c24 <MX_DMA_Init+0x3c>)
 8000bf6:	f043 0301 	orr.w	r3, r3, #1
 8000bfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_DMA_Init+0x3c>)
 8000c00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c04:	f003 0301 	and.w	r3, r3, #1
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2100      	movs	r1, #0
 8000c10:	200b      	movs	r0, #11
 8000c12:	f000 fdd4 	bl	80017be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c16:	200b      	movs	r0, #11
 8000c18:	f000 fdeb 	bl	80017f2 <HAL_NVIC_EnableIRQ>

}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	58024400 	.word	0x58024400

08000c28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08c      	sub	sp, #48	; 0x30
 8000c2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
 8000c3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c3e:	4b69      	ldr	r3, [pc, #420]	; (8000de4 <MX_GPIO_Init+0x1bc>)
 8000c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c44:	4a67      	ldr	r2, [pc, #412]	; (8000de4 <MX_GPIO_Init+0x1bc>)
 8000c46:	f043 0310 	orr.w	r3, r3, #16
 8000c4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c4e:	4b65      	ldr	r3, [pc, #404]	; (8000de4 <MX_GPIO_Init+0x1bc>)
 8000c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c54:	f003 0310 	and.w	r3, r3, #16
 8000c58:	61bb      	str	r3, [r7, #24]
 8000c5a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5c:	4b61      	ldr	r3, [pc, #388]	; (8000de4 <MX_GPIO_Init+0x1bc>)
 8000c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c62:	4a60      	ldr	r2, [pc, #384]	; (8000de4 <MX_GPIO_Init+0x1bc>)
 8000c64:	f043 0304 	orr.w	r3, r3, #4
 8000c68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c6c:	4b5d      	ldr	r3, [pc, #372]	; (8000de4 <MX_GPIO_Init+0x1bc>)
 8000c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c72:	f003 0304 	and.w	r3, r3, #4
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c7a:	4b5a      	ldr	r3, [pc, #360]	; (8000de4 <MX_GPIO_Init+0x1bc>)
 8000c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c80:	4a58      	ldr	r2, [pc, #352]	; (8000de4 <MX_GPIO_Init+0x1bc>)
 8000c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c8a:	4b56      	ldr	r3, [pc, #344]	; (8000de4 <MX_GPIO_Init+0x1bc>)
 8000c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c98:	4b52      	ldr	r3, [pc, #328]	; (8000de4 <MX_GPIO_Init+0x1bc>)
 8000c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9e:	4a51      	ldr	r2, [pc, #324]	; (8000de4 <MX_GPIO_Init+0x1bc>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca8:	4b4e      	ldr	r3, [pc, #312]	; (8000de4 <MX_GPIO_Init+0x1bc>)
 8000caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb6:	4b4b      	ldr	r3, [pc, #300]	; (8000de4 <MX_GPIO_Init+0x1bc>)
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbc:	4a49      	ldr	r2, [pc, #292]	; (8000de4 <MX_GPIO_Init+0x1bc>)
 8000cbe:	f043 0302 	orr.w	r3, r3, #2
 8000cc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc6:	4b47      	ldr	r3, [pc, #284]	; (8000de4 <MX_GPIO_Init+0x1bc>)
 8000cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ccc:	f003 0302 	and.w	r3, r3, #2
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd4:	4b43      	ldr	r3, [pc, #268]	; (8000de4 <MX_GPIO_Init+0x1bc>)
 8000cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cda:	4a42      	ldr	r2, [pc, #264]	; (8000de4 <MX_GPIO_Init+0x1bc>)
 8000cdc:	f043 0308 	orr.w	r3, r3, #8
 8000ce0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce4:	4b3f      	ldr	r3, [pc, #252]	; (8000de4 <MX_GPIO_Init+0x1bc>)
 8000ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cea:	f003 0308 	and.w	r3, r3, #8
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_485_TX_EN_Pin|RS_485_RX_EN_Pin, GPIO_PIN_RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	210c      	movs	r1, #12
 8000cf6:	483c      	ldr	r0, [pc, #240]	; (8000de8 <MX_GPIO_Init+0x1c0>)
 8000cf8:	f002 ff88 	bl	8003c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TELE_CE_Pin|TELE_CS_Pin, GPIO_PIN_RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2103      	movs	r1, #3
 8000d00:	483a      	ldr	r0, [pc, #232]	; (8000dec <MX_GPIO_Init+0x1c4>)
 8000d02:	f002 ff83 	bl	8003c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2101      	movs	r1, #1
 8000d0a:	4839      	ldr	r0, [pc, #228]	; (8000df0 <MX_GPIO_Init+0x1c8>)
 8000d0c:	f002 ff7e 	bl	8003c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d16:	4837      	ldr	r0, [pc, #220]	; (8000df4 <MX_GPIO_Init+0x1cc>)
 8000d18:	f002 ff78 	bl	8003c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_485_TX_EN_Pin RS_485_RX_EN_Pin */
  GPIO_InitStruct.Pin = RS_485_TX_EN_Pin|RS_485_RX_EN_Pin;
 8000d1c:	230c      	movs	r3, #12
 8000d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d20:	2301      	movs	r3, #1
 8000d22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d2c:	f107 031c 	add.w	r3, r7, #28
 8000d30:	4619      	mov	r1, r3
 8000d32:	482d      	ldr	r0, [pc, #180]	; (8000de8 <MX_GPIO_Init+0x1c0>)
 8000d34:	f002 fda2 	bl	800387c <HAL_GPIO_Init>

  /*Configure GPIO pins : TELE_CE_Pin TELE_CS_Pin */
  GPIO_InitStruct.Pin = TELE_CE_Pin|TELE_CS_Pin;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4827      	ldr	r0, [pc, #156]	; (8000dec <MX_GPIO_Init+0x1c4>)
 8000d50:	f002 fd94 	bl	800387c <HAL_GPIO_Init>

  /*Configure GPIO pin : TELE_IRQ_Pin */
  GPIO_InitStruct.Pin = TELE_IRQ_Pin;
 8000d54:	2304      	movs	r3, #4
 8000d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d58:	4b27      	ldr	r3, [pc, #156]	; (8000df8 <MX_GPIO_Init+0x1d0>)
 8000d5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TELE_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000d60:	f107 031c 	add.w	r3, r7, #28
 8000d64:	4619      	mov	r1, r3
 8000d66:	4821      	ldr	r0, [pc, #132]	; (8000dec <MX_GPIO_Init+0x1c4>)
 8000d68:	f002 fd88 	bl	800387c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d70:	2301      	movs	r3, #1
 8000d72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d7c:	f107 031c 	add.w	r3, r7, #28
 8000d80:	4619      	mov	r1, r3
 8000d82:	481b      	ldr	r0, [pc, #108]	; (8000df0 <MX_GPIO_Init+0x1c8>)
 8000d84:	f002 fd7a 	bl	800387c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 8000d88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d8e:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <MX_GPIO_Init+0x1d0>)
 8000d90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 031c 	add.w	r3, r7, #28
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4812      	ldr	r0, [pc, #72]	; (8000de8 <MX_GPIO_Init+0x1c0>)
 8000d9e:	f002 fd6d 	bl	800387c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 8000da2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da8:	2301      	movs	r3, #1
 8000daa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 8000db4:	f107 031c 	add.w	r3, r7, #28
 8000db8:	4619      	mov	r1, r3
 8000dba:	480e      	ldr	r0, [pc, #56]	; (8000df4 <MX_GPIO_Init+0x1cc>)
 8000dbc:	f002 fd5e 	bl	800387c <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DET_Pin */
  GPIO_InitStruct.Pin = CARD_DET_Pin;
 8000dc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DET_GPIO_Port, &GPIO_InitStruct);
 8000dce:	f107 031c 	add.w	r3, r7, #28
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4805      	ldr	r0, [pc, #20]	; (8000dec <MX_GPIO_Init+0x1c4>)
 8000dd6:	f002 fd51 	bl	800387c <HAL_GPIO_Init>

}
 8000dda:	bf00      	nop
 8000ddc:	3730      	adds	r7, #48	; 0x30
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	58024400 	.word	0x58024400
 8000de8:	58021000 	.word	0x58021000
 8000dec:	58020000 	.word	0x58020000
 8000df0:	58020400 	.word	0x58020400
 8000df4:	58020c00 	.word	0x58020c00
 8000df8:	11110000 	.word	0x11110000

08000dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e00:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <Error_Handler+0x6>

08000e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <HAL_MspInit+0x30>)
 8000e0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e10:	4a08      	ldr	r2, [pc, #32]	; (8000e34 <HAL_MspInit+0x30>)
 8000e12:	f043 0302 	orr.w	r3, r3, #2
 8000e16:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_MspInit+0x30>)
 8000e1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e20:	f003 0302 	and.w	r3, r3, #2
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	58024400 	.word	0x58024400

08000e38 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08c      	sub	sp, #48	; 0x30
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 031c 	add.w	r3, r7, #28
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a3d      	ldr	r2, [pc, #244]	; (8000f4c <HAL_FDCAN_MspInit+0x114>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d138      	bne.n	8000ecc <HAL_FDCAN_MspInit+0x94>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000e5a:	4b3d      	ldr	r3, [pc, #244]	; (8000f50 <HAL_FDCAN_MspInit+0x118>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	4a3b      	ldr	r2, [pc, #236]	; (8000f50 <HAL_FDCAN_MspInit+0x118>)
 8000e62:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000e64:	4b3a      	ldr	r3, [pc, #232]	; (8000f50 <HAL_FDCAN_MspInit+0x118>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d10e      	bne.n	8000e8a <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000e6c:	4b39      	ldr	r3, [pc, #228]	; (8000f54 <HAL_FDCAN_MspInit+0x11c>)
 8000e6e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000e72:	4a38      	ldr	r2, [pc, #224]	; (8000f54 <HAL_FDCAN_MspInit+0x11c>)
 8000e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e78:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000e7c:	4b35      	ldr	r3, [pc, #212]	; (8000f54 <HAL_FDCAN_MspInit+0x11c>)
 8000e7e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e86:	61bb      	str	r3, [r7, #24]
 8000e88:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8a:	4b32      	ldr	r3, [pc, #200]	; (8000f54 <HAL_FDCAN_MspInit+0x11c>)
 8000e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e90:	4a30      	ldr	r2, [pc, #192]	; (8000f54 <HAL_FDCAN_MspInit+0x11c>)
 8000e92:	f043 0302 	orr.w	r3, r3, #2
 8000e96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e9a:	4b2e      	ldr	r3, [pc, #184]	; (8000f54 <HAL_FDCAN_MspInit+0x11c>)
 8000e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea0:	f003 0302 	and.w	r3, r3, #2
 8000ea4:	617b      	str	r3, [r7, #20]
 8000ea6:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ea8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000eba:	2309      	movs	r3, #9
 8000ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4824      	ldr	r0, [pc, #144]	; (8000f58 <HAL_FDCAN_MspInit+0x120>)
 8000ec6:	f002 fcd9 	bl	800387c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8000eca:	e03b      	b.n	8000f44 <HAL_FDCAN_MspInit+0x10c>
  else if(hfdcan->Instance==FDCAN2)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a22      	ldr	r2, [pc, #136]	; (8000f5c <HAL_FDCAN_MspInit+0x124>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d136      	bne.n	8000f44 <HAL_FDCAN_MspInit+0x10c>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000ed6:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <HAL_FDCAN_MspInit+0x118>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	3301      	adds	r3, #1
 8000edc:	4a1c      	ldr	r2, [pc, #112]	; (8000f50 <HAL_FDCAN_MspInit+0x118>)
 8000ede:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <HAL_FDCAN_MspInit+0x118>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d10e      	bne.n	8000f06 <HAL_FDCAN_MspInit+0xce>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000ee8:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <HAL_FDCAN_MspInit+0x11c>)
 8000eea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000eee:	4a19      	ldr	r2, [pc, #100]	; (8000f54 <HAL_FDCAN_MspInit+0x11c>)
 8000ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000ef8:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <HAL_FDCAN_MspInit+0x11c>)
 8000efa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f06:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <HAL_FDCAN_MspInit+0x11c>)
 8000f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0c:	4a11      	ldr	r2, [pc, #68]	; (8000f54 <HAL_FDCAN_MspInit+0x11c>)
 8000f0e:	f043 0302 	orr.w	r3, r3, #2
 8000f12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <HAL_FDCAN_MspInit+0x11c>)
 8000f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1c:	f003 0302 	and.w	r3, r3, #2
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000f24:	2360      	movs	r3, #96	; 0x60
 8000f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2300      	movs	r3, #0
 8000f32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000f34:	2309      	movs	r3, #9
 8000f36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f38:	f107 031c 	add.w	r3, r7, #28
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4806      	ldr	r0, [pc, #24]	; (8000f58 <HAL_FDCAN_MspInit+0x120>)
 8000f40:	f002 fc9c 	bl	800387c <HAL_GPIO_Init>
}
 8000f44:	bf00      	nop
 8000f46:	3730      	adds	r7, #48	; 0x30
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	4000a000 	.word	0x4000a000
 8000f50:	240001e8 	.word	0x240001e8
 8000f54:	58024400 	.word	0x58024400
 8000f58:	58020400 	.word	0x58020400
 8000f5c:	4000a400 	.word	0x4000a400

08000f60 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08a      	sub	sp, #40	; 0x28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a2a      	ldr	r2, [pc, #168]	; (8001028 <HAL_SD_MspInit+0xc8>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d14d      	bne.n	800101e <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000f82:	4b2a      	ldr	r3, [pc, #168]	; (800102c <HAL_SD_MspInit+0xcc>)
 8000f84:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f88:	4a28      	ldr	r2, [pc, #160]	; (800102c <HAL_SD_MspInit+0xcc>)
 8000f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f8e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000f92:	4b26      	ldr	r3, [pc, #152]	; (800102c <HAL_SD_MspInit+0xcc>)
 8000f94:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa0:	4b22      	ldr	r3, [pc, #136]	; (800102c <HAL_SD_MspInit+0xcc>)
 8000fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa6:	4a21      	ldr	r2, [pc, #132]	; (800102c <HAL_SD_MspInit+0xcc>)
 8000fa8:	f043 0304 	orr.w	r3, r3, #4
 8000fac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fb0:	4b1e      	ldr	r3, [pc, #120]	; (800102c <HAL_SD_MspInit+0xcc>)
 8000fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb6:	f003 0304 	and.w	r3, r3, #4
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fbe:	4b1b      	ldr	r3, [pc, #108]	; (800102c <HAL_SD_MspInit+0xcc>)
 8000fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc4:	4a19      	ldr	r2, [pc, #100]	; (800102c <HAL_SD_MspInit+0xcc>)
 8000fc6:	f043 0308 	orr.w	r3, r3, #8
 8000fca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fce:	4b17      	ldr	r3, [pc, #92]	; (800102c <HAL_SD_MspInit+0xcc>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd4:	f003 0308 	and.w	r3, r3, #8
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000fdc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000fe0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fea:	2303      	movs	r3, #3
 8000fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000fee:	230c      	movs	r3, #12
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	480d      	ldr	r0, [pc, #52]	; (8001030 <HAL_SD_MspInit+0xd0>)
 8000ffa:	f002 fc3f 	bl	800387c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ffe:	2304      	movs	r3, #4
 8001000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100a:	2303      	movs	r3, #3
 800100c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800100e:	230c      	movs	r3, #12
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	4806      	ldr	r0, [pc, #24]	; (8001034 <HAL_SD_MspInit+0xd4>)
 800101a:	f002 fc2f 	bl	800387c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800101e:	bf00      	nop
 8001020:	3728      	adds	r7, #40	; 0x28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	52007000 	.word	0x52007000
 800102c:	58024400 	.word	0x58024400
 8001030:	58020800 	.word	0x58020800
 8001034:	58020c00 	.word	0x58020c00

08001038 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	; 0x28
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a1a      	ldr	r2, [pc, #104]	; (80010c0 <HAL_SPI_MspInit+0x88>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d12d      	bne.n	80010b6 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800105a:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <HAL_SPI_MspInit+0x8c>)
 800105c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001060:	4a18      	ldr	r2, [pc, #96]	; (80010c4 <HAL_SPI_MspInit+0x8c>)
 8001062:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001066:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800106a:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <HAL_SPI_MspInit+0x8c>)
 800106c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001070:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <HAL_SPI_MspInit+0x8c>)
 800107a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800107e:	4a11      	ldr	r2, [pc, #68]	; (80010c4 <HAL_SPI_MspInit+0x8c>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001088:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <HAL_SPI_MspInit+0x8c>)
 800108a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001096:	23e0      	movs	r3, #224	; 0xe0
 8001098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2300      	movs	r3, #0
 80010a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010a6:	2305      	movs	r3, #5
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	4619      	mov	r1, r3
 80010b0:	4805      	ldr	r0, [pc, #20]	; (80010c8 <HAL_SPI_MspInit+0x90>)
 80010b2:	f002 fbe3 	bl	800387c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010b6:	bf00      	nop
 80010b8:	3728      	adds	r7, #40	; 0x28
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40013000 	.word	0x40013000
 80010c4:	58024400 	.word	0x58024400
 80010c8:	58020000 	.word	0x58020000

080010cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08c      	sub	sp, #48	; 0x30
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 031c 	add.w	r3, r7, #28
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a4b      	ldr	r2, [pc, #300]	; (8001218 <HAL_UART_MspInit+0x14c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d12e      	bne.n	800114c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80010ee:	4b4b      	ldr	r3, [pc, #300]	; (800121c <HAL_UART_MspInit+0x150>)
 80010f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010f4:	4a49      	ldr	r2, [pc, #292]	; (800121c <HAL_UART_MspInit+0x150>)
 80010f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010fe:	4b47      	ldr	r3, [pc, #284]	; (800121c <HAL_UART_MspInit+0x150>)
 8001100:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001104:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001108:	61bb      	str	r3, [r7, #24]
 800110a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800110c:	4b43      	ldr	r3, [pc, #268]	; (800121c <HAL_UART_MspInit+0x150>)
 800110e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001112:	4a42      	ldr	r2, [pc, #264]	; (800121c <HAL_UART_MspInit+0x150>)
 8001114:	f043 0310 	orr.w	r3, r3, #16
 8001118:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800111c:	4b3f      	ldr	r3, [pc, #252]	; (800121c <HAL_UART_MspInit+0x150>)
 800111e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001122:	f003 0310 	and.w	r3, r3, #16
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800112a:	2303      	movs	r3, #3
 800112c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800113a:	2308      	movs	r3, #8
 800113c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800113e:	f107 031c 	add.w	r3, r7, #28
 8001142:	4619      	mov	r1, r3
 8001144:	4836      	ldr	r0, [pc, #216]	; (8001220 <HAL_UART_MspInit+0x154>)
 8001146:	f002 fb99 	bl	800387c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800114a:	e061      	b.n	8001210 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a34      	ldr	r2, [pc, #208]	; (8001224 <HAL_UART_MspInit+0x158>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d15c      	bne.n	8001210 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001156:	4b31      	ldr	r3, [pc, #196]	; (800121c <HAL_UART_MspInit+0x150>)
 8001158:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800115c:	4a2f      	ldr	r2, [pc, #188]	; (800121c <HAL_UART_MspInit+0x150>)
 800115e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001162:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001166:	4b2d      	ldr	r3, [pc, #180]	; (800121c <HAL_UART_MspInit+0x150>)
 8001168:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800116c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001174:	4b29      	ldr	r3, [pc, #164]	; (800121c <HAL_UART_MspInit+0x150>)
 8001176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117a:	4a28      	ldr	r2, [pc, #160]	; (800121c <HAL_UART_MspInit+0x150>)
 800117c:	f043 0308 	orr.w	r3, r3, #8
 8001180:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001184:	4b25      	ldr	r3, [pc, #148]	; (800121c <HAL_UART_MspInit+0x150>)
 8001186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800118a:	f003 0308 	and.w	r3, r3, #8
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001192:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011a4:	2307      	movs	r3, #7
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011a8:	f107 031c 	add.w	r3, r7, #28
 80011ac:	4619      	mov	r1, r3
 80011ae:	481e      	ldr	r0, [pc, #120]	; (8001228 <HAL_UART_MspInit+0x15c>)
 80011b0:	f002 fb64 	bl	800387c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80011b4:	4b1d      	ldr	r3, [pc, #116]	; (800122c <HAL_UART_MspInit+0x160>)
 80011b6:	4a1e      	ldr	r2, [pc, #120]	; (8001230 <HAL_UART_MspInit+0x164>)
 80011b8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80011ba:	4b1c      	ldr	r3, [pc, #112]	; (800122c <HAL_UART_MspInit+0x160>)
 80011bc:	222d      	movs	r2, #45	; 0x2d
 80011be:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011c0:	4b1a      	ldr	r3, [pc, #104]	; (800122c <HAL_UART_MspInit+0x160>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c6:	4b19      	ldr	r3, [pc, #100]	; (800122c <HAL_UART_MspInit+0x160>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011cc:	4b17      	ldr	r3, [pc, #92]	; (800122c <HAL_UART_MspInit+0x160>)
 80011ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011d2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011d4:	4b15      	ldr	r3, [pc, #84]	; (800122c <HAL_UART_MspInit+0x160>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <HAL_UART_MspInit+0x160>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_UART_MspInit+0x160>)
 80011e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011e6:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011e8:	4b10      	ldr	r3, [pc, #64]	; (800122c <HAL_UART_MspInit+0x160>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011ee:	4b0f      	ldr	r3, [pc, #60]	; (800122c <HAL_UART_MspInit+0x160>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80011f4:	480d      	ldr	r0, [pc, #52]	; (800122c <HAL_UART_MspInit+0x160>)
 80011f6:	f000 fb17 	bl	8001828 <HAL_DMA_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <HAL_UART_MspInit+0x138>
      Error_Handler();
 8001200:	f7ff fdfc 	bl	8000dfc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a09      	ldr	r2, [pc, #36]	; (800122c <HAL_UART_MspInit+0x160>)
 8001208:	679a      	str	r2, [r3, #120]	; 0x78
 800120a:	4a08      	ldr	r2, [pc, #32]	; (800122c <HAL_UART_MspInit+0x160>)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001210:	bf00      	nop
 8001212:	3730      	adds	r7, #48	; 0x30
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40007c00 	.word	0x40007c00
 800121c:	58024400 	.word	0x58024400
 8001220:	58021000 	.word	0x58021000
 8001224:	40004800 	.word	0x40004800
 8001228:	58020c00 	.word	0x58020c00
 800122c:	24000230 	.word	0x24000230
 8001230:	40020010 	.word	0x40020010

08001234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <NMI_Handler+0x4>

0800123a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123e:	e7fe      	b.n	800123e <HardFault_Handler+0x4>

08001240 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001244:	e7fe      	b.n	8001244 <MemManage_Handler+0x4>

08001246 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800124a:	e7fe      	b.n	800124a <BusFault_Handler+0x4>

0800124c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <UsageFault_Handler+0x4>

08001252 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001280:	f000 f974 	bl	800156c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}

08001288 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800128c:	4802      	ldr	r0, [pc, #8]	; (8001298 <DMA1_Stream0_IRQHandler+0x10>)
 800128e:	f000 fe27 	bl	8001ee0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	24000230 	.word	0x24000230

0800129c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80012a0:	4802      	ldr	r0, [pc, #8]	; (80012ac <OTG_FS_IRQHandler+0x10>)
 80012a2:	f002 fe3e 	bl	8003f22 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	240013a8 	.word	0x240013a8

080012b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012b8:	4a14      	ldr	r2, [pc, #80]	; (800130c <_sbrk+0x5c>)
 80012ba:	4b15      	ldr	r3, [pc, #84]	; (8001310 <_sbrk+0x60>)
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c4:	4b13      	ldr	r3, [pc, #76]	; (8001314 <_sbrk+0x64>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d102      	bne.n	80012d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012cc:	4b11      	ldr	r3, [pc, #68]	; (8001314 <_sbrk+0x64>)
 80012ce:	4a12      	ldr	r2, [pc, #72]	; (8001318 <_sbrk+0x68>)
 80012d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012d2:	4b10      	ldr	r3, [pc, #64]	; (8001314 <_sbrk+0x64>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d207      	bcs.n	80012f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012e0:	f011 f95c 	bl	801259c <__errno>
 80012e4:	4602      	mov	r2, r0
 80012e6:	230c      	movs	r3, #12
 80012e8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	e009      	b.n	8001304 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012f0:	4b08      	ldr	r3, [pc, #32]	; (8001314 <_sbrk+0x64>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012f6:	4b07      	ldr	r3, [pc, #28]	; (8001314 <_sbrk+0x64>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	4a05      	ldr	r2, [pc, #20]	; (8001314 <_sbrk+0x64>)
 8001300:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001302:	68fb      	ldr	r3, [r7, #12]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	24080000 	.word	0x24080000
 8001310:	00000400 	.word	0x00000400
 8001314:	240001ec 	.word	0x240001ec
 8001318:	240017b8 	.word	0x240017b8

0800131c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001320:	4b39      	ldr	r3, [pc, #228]	; (8001408 <SystemInit+0xec>)
 8001322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001326:	4a38      	ldr	r2, [pc, #224]	; (8001408 <SystemInit+0xec>)
 8001328:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800132c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001330:	4b36      	ldr	r3, [pc, #216]	; (800140c <SystemInit+0xf0>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 030f 	and.w	r3, r3, #15
 8001338:	2b06      	cmp	r3, #6
 800133a:	d807      	bhi.n	800134c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800133c:	4b33      	ldr	r3, [pc, #204]	; (800140c <SystemInit+0xf0>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f023 030f 	bic.w	r3, r3, #15
 8001344:	4a31      	ldr	r2, [pc, #196]	; (800140c <SystemInit+0xf0>)
 8001346:	f043 0307 	orr.w	r3, r3, #7
 800134a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800134c:	4b30      	ldr	r3, [pc, #192]	; (8001410 <SystemInit+0xf4>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a2f      	ldr	r2, [pc, #188]	; (8001410 <SystemInit+0xf4>)
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001358:	4b2d      	ldr	r3, [pc, #180]	; (8001410 <SystemInit+0xf4>)
 800135a:	2200      	movs	r2, #0
 800135c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800135e:	4b2c      	ldr	r3, [pc, #176]	; (8001410 <SystemInit+0xf4>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	492b      	ldr	r1, [pc, #172]	; (8001410 <SystemInit+0xf4>)
 8001364:	4b2b      	ldr	r3, [pc, #172]	; (8001414 <SystemInit+0xf8>)
 8001366:	4013      	ands	r3, r2
 8001368:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800136a:	4b28      	ldr	r3, [pc, #160]	; (800140c <SystemInit+0xf0>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	2b07      	cmp	r3, #7
 8001374:	d907      	bls.n	8001386 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001376:	4b25      	ldr	r3, [pc, #148]	; (800140c <SystemInit+0xf0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f023 030f 	bic.w	r3, r3, #15
 800137e:	4a23      	ldr	r2, [pc, #140]	; (800140c <SystemInit+0xf0>)
 8001380:	f043 0307 	orr.w	r3, r3, #7
 8001384:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001386:	4b22      	ldr	r3, [pc, #136]	; (8001410 <SystemInit+0xf4>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800138c:	4b20      	ldr	r3, [pc, #128]	; (8001410 <SystemInit+0xf4>)
 800138e:	2200      	movs	r2, #0
 8001390:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001392:	4b1f      	ldr	r3, [pc, #124]	; (8001410 <SystemInit+0xf4>)
 8001394:	2200      	movs	r2, #0
 8001396:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001398:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <SystemInit+0xf4>)
 800139a:	4a1f      	ldr	r2, [pc, #124]	; (8001418 <SystemInit+0xfc>)
 800139c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800139e:	4b1c      	ldr	r3, [pc, #112]	; (8001410 <SystemInit+0xf4>)
 80013a0:	4a1e      	ldr	r2, [pc, #120]	; (800141c <SystemInit+0x100>)
 80013a2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80013a4:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <SystemInit+0xf4>)
 80013a6:	4a1e      	ldr	r2, [pc, #120]	; (8001420 <SystemInit+0x104>)
 80013a8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80013aa:	4b19      	ldr	r3, [pc, #100]	; (8001410 <SystemInit+0xf4>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80013b0:	4b17      	ldr	r3, [pc, #92]	; (8001410 <SystemInit+0xf4>)
 80013b2:	4a1b      	ldr	r2, [pc, #108]	; (8001420 <SystemInit+0x104>)
 80013b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80013b6:	4b16      	ldr	r3, [pc, #88]	; (8001410 <SystemInit+0xf4>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80013bc:	4b14      	ldr	r3, [pc, #80]	; (8001410 <SystemInit+0xf4>)
 80013be:	4a18      	ldr	r2, [pc, #96]	; (8001420 <SystemInit+0x104>)
 80013c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80013c2:	4b13      	ldr	r3, [pc, #76]	; (8001410 <SystemInit+0xf4>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <SystemInit+0xf4>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a10      	ldr	r2, [pc, #64]	; (8001410 <SystemInit+0xf4>)
 80013ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013d4:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <SystemInit+0xf4>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80013da:	4b12      	ldr	r3, [pc, #72]	; (8001424 <SystemInit+0x108>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	4b12      	ldr	r3, [pc, #72]	; (8001428 <SystemInit+0x10c>)
 80013e0:	4013      	ands	r3, r2
 80013e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013e6:	d202      	bcs.n	80013ee <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80013e8:	4b10      	ldr	r3, [pc, #64]	; (800142c <SystemInit+0x110>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013ee:	4b10      	ldr	r3, [pc, #64]	; (8001430 <SystemInit+0x114>)
 80013f0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80013f4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013f6:	4b04      	ldr	r3, [pc, #16]	; (8001408 <SystemInit+0xec>)
 80013f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013fc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000ed00 	.word	0xe000ed00
 800140c:	52002000 	.word	0x52002000
 8001410:	58024400 	.word	0x58024400
 8001414:	eaf6ed7f 	.word	0xeaf6ed7f
 8001418:	02020200 	.word	0x02020200
 800141c:	01ff0000 	.word	0x01ff0000
 8001420:	01010280 	.word	0x01010280
 8001424:	5c001000 	.word	0x5c001000
 8001428:	ffff0000 	.word	0xffff0000
 800142c:	51008108 	.word	0x51008108
 8001430:	52004000 	.word	0x52004000

08001434 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001434:	f8df d034 	ldr.w	sp, [pc, #52]	; 800146c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001438:	f7ff ff70 	bl	800131c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800143c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800143e:	e003      	b.n	8001448 <LoopCopyDataInit>

08001440 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001440:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001442:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001444:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001446:	3104      	adds	r1, #4

08001448 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001448:	480a      	ldr	r0, [pc, #40]	; (8001474 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 800144c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800144e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001450:	d3f6      	bcc.n	8001440 <CopyDataInit>
  ldr  r2, =_sbss
 8001452:	4a0a      	ldr	r2, [pc, #40]	; (800147c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001454:	e002      	b.n	800145c <LoopFillZerobss>

08001456 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001456:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001458:	f842 3b04 	str.w	r3, [r2], #4

0800145c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800145c:	4b08      	ldr	r3, [pc, #32]	; (8001480 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800145e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001460:	d3f9      	bcc.n	8001456 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001462:	f011 f8a1 	bl	80125a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001466:	f7ff f8b7 	bl	80005d8 <main>
  bx  lr    
 800146a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800146c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001470:	08012a38 	.word	0x08012a38
  ldr  r0, =_sdata
 8001474:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001478:	240001cc 	.word	0x240001cc
  ldr  r2, =_sbss
 800147c:	240001cc 	.word	0x240001cc
  ldr  r3, = _ebss
 8001480:	240017b4 	.word	0x240017b4

08001484 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001484:	e7fe      	b.n	8001484 <ADC3_IRQHandler>
	...

08001488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148e:	2003      	movs	r0, #3
 8001490:	f000 f98a 	bl	80017a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001494:	f004 fc06 	bl	8005ca4 <HAL_RCC_GetSysClockFreq>
 8001498:	4601      	mov	r1, r0
 800149a:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <HAL_Init+0x68>)
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	0a1b      	lsrs	r3, r3, #8
 80014a0:	f003 030f 	and.w	r3, r3, #15
 80014a4:	4a13      	ldr	r2, [pc, #76]	; (80014f4 <HAL_Init+0x6c>)
 80014a6:	5cd3      	ldrb	r3, [r2, r3]
 80014a8:	f003 031f 	and.w	r3, r3, #31
 80014ac:	fa21 f303 	lsr.w	r3, r1, r3
 80014b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014b2:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <HAL_Init+0x68>)
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	f003 030f 	and.w	r3, r3, #15
 80014ba:	4a0e      	ldr	r2, [pc, #56]	; (80014f4 <HAL_Init+0x6c>)
 80014bc:	5cd3      	ldrb	r3, [r2, r3]
 80014be:	f003 031f 	and.w	r3, r3, #31
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	fa22 f303 	lsr.w	r3, r2, r3
 80014c8:	4a0b      	ldr	r2, [pc, #44]	; (80014f8 <HAL_Init+0x70>)
 80014ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014cc:	4a0b      	ldr	r2, [pc, #44]	; (80014fc <HAL_Init+0x74>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014d2:	2000      	movs	r0, #0
 80014d4:	f000 f814 	bl	8001500 <HAL_InitTick>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e002      	b.n	80014e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014e2:	f7ff fc8f 	bl	8000e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	58024400 	.word	0x58024400
 80014f4:	080128e0 	.word	0x080128e0
 80014f8:	24000004 	.word	0x24000004
 80014fc:	24000000 	.word	0x24000000

08001500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001508:	4b15      	ldr	r3, [pc, #84]	; (8001560 <HAL_InitTick+0x60>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d101      	bne.n	8001514 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e021      	b.n	8001558 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001514:	4b13      	ldr	r3, [pc, #76]	; (8001564 <HAL_InitTick+0x64>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <HAL_InitTick+0x60>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	4619      	mov	r1, r3
 800151e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001522:	fbb3 f3f1 	udiv	r3, r3, r1
 8001526:	fbb2 f3f3 	udiv	r3, r2, r3
 800152a:	4618      	mov	r0, r3
 800152c:	f000 f96f 	bl	800180e <HAL_SYSTICK_Config>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e00e      	b.n	8001558 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b0f      	cmp	r3, #15
 800153e:	d80a      	bhi.n	8001556 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001540:	2200      	movs	r2, #0
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	f04f 30ff 	mov.w	r0, #4294967295
 8001548:	f000 f939 	bl	80017be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800154c:	4a06      	ldr	r2, [pc, #24]	; (8001568 <HAL_InitTick+0x68>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001552:	2300      	movs	r3, #0
 8001554:	e000      	b.n	8001558 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
}
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	2400000c 	.word	0x2400000c
 8001564:	24000000 	.word	0x24000000
 8001568:	24000008 	.word	0x24000008

0800156c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_IncTick+0x20>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	461a      	mov	r2, r3
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_IncTick+0x24>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4413      	add	r3, r2
 800157c:	4a04      	ldr	r2, [pc, #16]	; (8001590 <HAL_IncTick+0x24>)
 800157e:	6013      	str	r3, [r2, #0]
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	2400000c 	.word	0x2400000c
 8001590:	24000a6c 	.word	0x24000a6c

08001594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return uwTick;
 8001598:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <HAL_GetTick+0x14>)
 800159a:	681b      	ldr	r3, [r3, #0]
}
 800159c:	4618      	mov	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	24000a6c 	.word	0x24000a6c

080015ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015b4:	f7ff ffee 	bl	8001594 <HAL_GetTick>
 80015b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c4:	d005      	beq.n	80015d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <HAL_Delay+0x40>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	461a      	mov	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4413      	add	r3, r2
 80015d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015d2:	bf00      	nop
 80015d4:	f7ff ffde 	bl	8001594 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d8f7      	bhi.n	80015d4 <HAL_Delay+0x28>
  {
  }
}
 80015e4:	bf00      	nop
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	2400000c 	.word	0x2400000c

080015f0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80015f4:	4b03      	ldr	r3, [pc, #12]	; (8001604 <HAL_GetREVID+0x14>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	0c1b      	lsrs	r3, r3, #16
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	5c001000 	.word	0x5c001000

08001608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001618:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <__NVIC_SetPriorityGrouping+0x40>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001624:	4013      	ands	r3, r2
 8001626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <__NVIC_SetPriorityGrouping+0x44>)
 8001632:	4313      	orrs	r3, r2
 8001634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001636:	4a04      	ldr	r2, [pc, #16]	; (8001648 <__NVIC_SetPriorityGrouping+0x40>)
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	60d3      	str	r3, [r2, #12]
}
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000ed00 	.word	0xe000ed00
 800164c:	05fa0000 	.word	0x05fa0000

08001650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001654:	4b04      	ldr	r3, [pc, #16]	; (8001668 <__NVIC_GetPriorityGrouping+0x18>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	0a1b      	lsrs	r3, r3, #8
 800165a:	f003 0307 	and.w	r3, r3, #7
}
 800165e:	4618      	mov	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001676:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800167a:	2b00      	cmp	r3, #0
 800167c:	db0b      	blt.n	8001696 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800167e:	88fb      	ldrh	r3, [r7, #6]
 8001680:	f003 021f 	and.w	r2, r3, #31
 8001684:	4907      	ldr	r1, [pc, #28]	; (80016a4 <__NVIC_EnableIRQ+0x38>)
 8001686:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800168a:	095b      	lsrs	r3, r3, #5
 800168c:	2001      	movs	r0, #1
 800168e:	fa00 f202 	lsl.w	r2, r0, r2
 8001692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000e100 	.word	0xe000e100

080016a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	6039      	str	r1, [r7, #0]
 80016b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	db0a      	blt.n	80016d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	490c      	ldr	r1, [pc, #48]	; (80016f4 <__NVIC_SetPriority+0x4c>)
 80016c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016c6:	0112      	lsls	r2, r2, #4
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	440b      	add	r3, r1
 80016cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016d0:	e00a      	b.n	80016e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4908      	ldr	r1, [pc, #32]	; (80016f8 <__NVIC_SetPriority+0x50>)
 80016d8:	88fb      	ldrh	r3, [r7, #6]
 80016da:	f003 030f 	and.w	r3, r3, #15
 80016de:	3b04      	subs	r3, #4
 80016e0:	0112      	lsls	r2, r2, #4
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	440b      	add	r3, r1
 80016e6:	761a      	strb	r2, [r3, #24]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	e000e100 	.word	0xe000e100
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b089      	sub	sp, #36	; 0x24
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f1c3 0307 	rsb	r3, r3, #7
 8001716:	2b04      	cmp	r3, #4
 8001718:	bf28      	it	cs
 800171a:	2304      	movcs	r3, #4
 800171c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3304      	adds	r3, #4
 8001722:	2b06      	cmp	r3, #6
 8001724:	d902      	bls.n	800172c <NVIC_EncodePriority+0x30>
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	3b03      	subs	r3, #3
 800172a:	e000      	b.n	800172e <NVIC_EncodePriority+0x32>
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001730:	f04f 32ff 	mov.w	r2, #4294967295
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43da      	mvns	r2, r3
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	401a      	ands	r2, r3
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001744:	f04f 31ff 	mov.w	r1, #4294967295
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	fa01 f303 	lsl.w	r3, r1, r3
 800174e:	43d9      	mvns	r1, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001754:	4313      	orrs	r3, r2
         );
}
 8001756:	4618      	mov	r0, r3
 8001758:	3724      	adds	r7, #36	; 0x24
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
	...

08001764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3b01      	subs	r3, #1
 8001770:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001774:	d301      	bcc.n	800177a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001776:	2301      	movs	r3, #1
 8001778:	e00f      	b.n	800179a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800177a:	4a0a      	ldr	r2, [pc, #40]	; (80017a4 <SysTick_Config+0x40>)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3b01      	subs	r3, #1
 8001780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001782:	210f      	movs	r1, #15
 8001784:	f04f 30ff 	mov.w	r0, #4294967295
 8001788:	f7ff ff8e 	bl	80016a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <SysTick_Config+0x40>)
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001792:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <SysTick_Config+0x40>)
 8001794:	2207      	movs	r2, #7
 8001796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	e000e010 	.word	0xe000e010

080017a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff ff29 	bl	8001608 <__NVIC_SetPriorityGrouping>
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b086      	sub	sp, #24
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	4603      	mov	r3, r0
 80017c6:	60b9      	str	r1, [r7, #8]
 80017c8:	607a      	str	r2, [r7, #4]
 80017ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017cc:	f7ff ff40 	bl	8001650 <__NVIC_GetPriorityGrouping>
 80017d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	68b9      	ldr	r1, [r7, #8]
 80017d6:	6978      	ldr	r0, [r7, #20]
 80017d8:	f7ff ff90 	bl	80016fc <NVIC_EncodePriority>
 80017dc:	4602      	mov	r2, r0
 80017de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017e2:	4611      	mov	r1, r2
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff5f 	bl	80016a8 <__NVIC_SetPriority>
}
 80017ea:	bf00      	nop
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	4603      	mov	r3, r0
 80017fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ff33 	bl	800166c <__NVIC_EnableIRQ>
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff ffa4 	bl	8001764 <SysTick_Config>
 800181c:	4603      	mov	r3, r0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001830:	f7ff feb0 	bl	8001594 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d101      	bne.n	8001840 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e316      	b.n	8001e6e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a66      	ldr	r2, [pc, #408]	; (80019e0 <HAL_DMA_Init+0x1b8>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d04a      	beq.n	80018e0 <HAL_DMA_Init+0xb8>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a65      	ldr	r2, [pc, #404]	; (80019e4 <HAL_DMA_Init+0x1bc>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d045      	beq.n	80018e0 <HAL_DMA_Init+0xb8>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a63      	ldr	r2, [pc, #396]	; (80019e8 <HAL_DMA_Init+0x1c0>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d040      	beq.n	80018e0 <HAL_DMA_Init+0xb8>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a62      	ldr	r2, [pc, #392]	; (80019ec <HAL_DMA_Init+0x1c4>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d03b      	beq.n	80018e0 <HAL_DMA_Init+0xb8>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a60      	ldr	r2, [pc, #384]	; (80019f0 <HAL_DMA_Init+0x1c8>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d036      	beq.n	80018e0 <HAL_DMA_Init+0xb8>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a5f      	ldr	r2, [pc, #380]	; (80019f4 <HAL_DMA_Init+0x1cc>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d031      	beq.n	80018e0 <HAL_DMA_Init+0xb8>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a5d      	ldr	r2, [pc, #372]	; (80019f8 <HAL_DMA_Init+0x1d0>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d02c      	beq.n	80018e0 <HAL_DMA_Init+0xb8>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a5c      	ldr	r2, [pc, #368]	; (80019fc <HAL_DMA_Init+0x1d4>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d027      	beq.n	80018e0 <HAL_DMA_Init+0xb8>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a5a      	ldr	r2, [pc, #360]	; (8001a00 <HAL_DMA_Init+0x1d8>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d022      	beq.n	80018e0 <HAL_DMA_Init+0xb8>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a59      	ldr	r2, [pc, #356]	; (8001a04 <HAL_DMA_Init+0x1dc>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d01d      	beq.n	80018e0 <HAL_DMA_Init+0xb8>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a57      	ldr	r2, [pc, #348]	; (8001a08 <HAL_DMA_Init+0x1e0>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d018      	beq.n	80018e0 <HAL_DMA_Init+0xb8>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a56      	ldr	r2, [pc, #344]	; (8001a0c <HAL_DMA_Init+0x1e4>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d013      	beq.n	80018e0 <HAL_DMA_Init+0xb8>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a54      	ldr	r2, [pc, #336]	; (8001a10 <HAL_DMA_Init+0x1e8>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d00e      	beq.n	80018e0 <HAL_DMA_Init+0xb8>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a53      	ldr	r2, [pc, #332]	; (8001a14 <HAL_DMA_Init+0x1ec>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d009      	beq.n	80018e0 <HAL_DMA_Init+0xb8>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a51      	ldr	r2, [pc, #324]	; (8001a18 <HAL_DMA_Init+0x1f0>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d004      	beq.n	80018e0 <HAL_DMA_Init+0xb8>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a50      	ldr	r2, [pc, #320]	; (8001a1c <HAL_DMA_Init+0x1f4>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d101      	bne.n	80018e4 <HAL_DMA_Init+0xbc>
 80018e0:	2301      	movs	r3, #1
 80018e2:	e000      	b.n	80018e6 <HAL_DMA_Init+0xbe>
 80018e4:	2300      	movs	r3, #0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f000 813b 	beq.w	8001b62 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2202      	movs	r2, #2
 80018f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a37      	ldr	r2, [pc, #220]	; (80019e0 <HAL_DMA_Init+0x1b8>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d04a      	beq.n	800199c <HAL_DMA_Init+0x174>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a36      	ldr	r2, [pc, #216]	; (80019e4 <HAL_DMA_Init+0x1bc>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d045      	beq.n	800199c <HAL_DMA_Init+0x174>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a34      	ldr	r2, [pc, #208]	; (80019e8 <HAL_DMA_Init+0x1c0>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d040      	beq.n	800199c <HAL_DMA_Init+0x174>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a33      	ldr	r2, [pc, #204]	; (80019ec <HAL_DMA_Init+0x1c4>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d03b      	beq.n	800199c <HAL_DMA_Init+0x174>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a31      	ldr	r2, [pc, #196]	; (80019f0 <HAL_DMA_Init+0x1c8>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d036      	beq.n	800199c <HAL_DMA_Init+0x174>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a30      	ldr	r2, [pc, #192]	; (80019f4 <HAL_DMA_Init+0x1cc>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d031      	beq.n	800199c <HAL_DMA_Init+0x174>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a2e      	ldr	r2, [pc, #184]	; (80019f8 <HAL_DMA_Init+0x1d0>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d02c      	beq.n	800199c <HAL_DMA_Init+0x174>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a2d      	ldr	r2, [pc, #180]	; (80019fc <HAL_DMA_Init+0x1d4>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d027      	beq.n	800199c <HAL_DMA_Init+0x174>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a2b      	ldr	r2, [pc, #172]	; (8001a00 <HAL_DMA_Init+0x1d8>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d022      	beq.n	800199c <HAL_DMA_Init+0x174>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a2a      	ldr	r2, [pc, #168]	; (8001a04 <HAL_DMA_Init+0x1dc>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d01d      	beq.n	800199c <HAL_DMA_Init+0x174>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a28      	ldr	r2, [pc, #160]	; (8001a08 <HAL_DMA_Init+0x1e0>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d018      	beq.n	800199c <HAL_DMA_Init+0x174>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a27      	ldr	r2, [pc, #156]	; (8001a0c <HAL_DMA_Init+0x1e4>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d013      	beq.n	800199c <HAL_DMA_Init+0x174>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a25      	ldr	r2, [pc, #148]	; (8001a10 <HAL_DMA_Init+0x1e8>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d00e      	beq.n	800199c <HAL_DMA_Init+0x174>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a24      	ldr	r2, [pc, #144]	; (8001a14 <HAL_DMA_Init+0x1ec>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d009      	beq.n	800199c <HAL_DMA_Init+0x174>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a22      	ldr	r2, [pc, #136]	; (8001a18 <HAL_DMA_Init+0x1f0>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d004      	beq.n	800199c <HAL_DMA_Init+0x174>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a21      	ldr	r2, [pc, #132]	; (8001a1c <HAL_DMA_Init+0x1f4>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d108      	bne.n	80019ae <HAL_DMA_Init+0x186>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 0201 	bic.w	r2, r2, #1
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	e007      	b.n	80019be <HAL_DMA_Init+0x196>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 0201 	bic.w	r2, r2, #1
 80019bc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80019be:	e02f      	b.n	8001a20 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019c0:	f7ff fde8 	bl	8001594 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b05      	cmp	r3, #5
 80019cc:	d928      	bls.n	8001a20 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2220      	movs	r2, #32
 80019d2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2203      	movs	r2, #3
 80019d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e246      	b.n	8001e6e <HAL_DMA_Init+0x646>
 80019e0:	40020010 	.word	0x40020010
 80019e4:	40020028 	.word	0x40020028
 80019e8:	40020040 	.word	0x40020040
 80019ec:	40020058 	.word	0x40020058
 80019f0:	40020070 	.word	0x40020070
 80019f4:	40020088 	.word	0x40020088
 80019f8:	400200a0 	.word	0x400200a0
 80019fc:	400200b8 	.word	0x400200b8
 8001a00:	40020410 	.word	0x40020410
 8001a04:	40020428 	.word	0x40020428
 8001a08:	40020440 	.word	0x40020440
 8001a0c:	40020458 	.word	0x40020458
 8001a10:	40020470 	.word	0x40020470
 8001a14:	40020488 	.word	0x40020488
 8001a18:	400204a0 	.word	0x400204a0
 8001a1c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1c8      	bne.n	80019c0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	4b83      	ldr	r3, [pc, #524]	; (8001c48 <HAL_DMA_Init+0x420>)
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001a46:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a52:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a5e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a70:	2b04      	cmp	r3, #4
 8001a72:	d107      	bne.n	8001a84 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001a84:	4b71      	ldr	r3, [pc, #452]	; (8001c4c <HAL_DMA_Init+0x424>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b71      	ldr	r3, [pc, #452]	; (8001c50 <HAL_DMA_Init+0x428>)
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a90:	d328      	bcc.n	8001ae4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b28      	cmp	r3, #40	; 0x28
 8001a98:	d903      	bls.n	8001aa2 <HAL_DMA_Init+0x27a>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b2e      	cmp	r3, #46	; 0x2e
 8001aa0:	d917      	bls.n	8001ad2 <HAL_DMA_Init+0x2aa>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b3e      	cmp	r3, #62	; 0x3e
 8001aa8:	d903      	bls.n	8001ab2 <HAL_DMA_Init+0x28a>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b42      	cmp	r3, #66	; 0x42
 8001ab0:	d90f      	bls.n	8001ad2 <HAL_DMA_Init+0x2aa>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b46      	cmp	r3, #70	; 0x46
 8001ab8:	d903      	bls.n	8001ac2 <HAL_DMA_Init+0x29a>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b48      	cmp	r3, #72	; 0x48
 8001ac0:	d907      	bls.n	8001ad2 <HAL_DMA_Init+0x2aa>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b4e      	cmp	r3, #78	; 0x4e
 8001ac8:	d905      	bls.n	8001ad6 <HAL_DMA_Init+0x2ae>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b52      	cmp	r3, #82	; 0x52
 8001ad0:	d801      	bhi.n	8001ad6 <HAL_DMA_Init+0x2ae>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <HAL_DMA_Init+0x2b0>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ae2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	f023 0307 	bic.w	r3, r3, #7
 8001afa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d117      	bne.n	8001b3e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d00e      	beq.n	8001b3e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f001 f9b9 	bl	8002e98 <DMA_CheckFifoParam>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d008      	beq.n	8001b3e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2240      	movs	r2, #64	; 0x40
 8001b30:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e197      	b.n	8001e6e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f001 f8f4 	bl	8002d34 <DMA_CalcBaseAndBitshift>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b54:	f003 031f 	and.w	r3, r3, #31
 8001b58:	223f      	movs	r2, #63	; 0x3f
 8001b5a:	409a      	lsls	r2, r3
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	e0cd      	b.n	8001cfe <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a3b      	ldr	r2, [pc, #236]	; (8001c54 <HAL_DMA_Init+0x42c>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d022      	beq.n	8001bb2 <HAL_DMA_Init+0x38a>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a39      	ldr	r2, [pc, #228]	; (8001c58 <HAL_DMA_Init+0x430>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d01d      	beq.n	8001bb2 <HAL_DMA_Init+0x38a>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a38      	ldr	r2, [pc, #224]	; (8001c5c <HAL_DMA_Init+0x434>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d018      	beq.n	8001bb2 <HAL_DMA_Init+0x38a>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a36      	ldr	r2, [pc, #216]	; (8001c60 <HAL_DMA_Init+0x438>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d013      	beq.n	8001bb2 <HAL_DMA_Init+0x38a>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a35      	ldr	r2, [pc, #212]	; (8001c64 <HAL_DMA_Init+0x43c>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d00e      	beq.n	8001bb2 <HAL_DMA_Init+0x38a>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a33      	ldr	r2, [pc, #204]	; (8001c68 <HAL_DMA_Init+0x440>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d009      	beq.n	8001bb2 <HAL_DMA_Init+0x38a>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a32      	ldr	r2, [pc, #200]	; (8001c6c <HAL_DMA_Init+0x444>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d004      	beq.n	8001bb2 <HAL_DMA_Init+0x38a>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a30      	ldr	r2, [pc, #192]	; (8001c70 <HAL_DMA_Init+0x448>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d101      	bne.n	8001bb6 <HAL_DMA_Init+0x38e>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <HAL_DMA_Init+0x390>
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 8097 	beq.w	8001cec <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a24      	ldr	r2, [pc, #144]	; (8001c54 <HAL_DMA_Init+0x42c>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d021      	beq.n	8001c0c <HAL_DMA_Init+0x3e4>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a22      	ldr	r2, [pc, #136]	; (8001c58 <HAL_DMA_Init+0x430>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d01c      	beq.n	8001c0c <HAL_DMA_Init+0x3e4>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a21      	ldr	r2, [pc, #132]	; (8001c5c <HAL_DMA_Init+0x434>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d017      	beq.n	8001c0c <HAL_DMA_Init+0x3e4>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a1f      	ldr	r2, [pc, #124]	; (8001c60 <HAL_DMA_Init+0x438>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d012      	beq.n	8001c0c <HAL_DMA_Init+0x3e4>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a1e      	ldr	r2, [pc, #120]	; (8001c64 <HAL_DMA_Init+0x43c>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d00d      	beq.n	8001c0c <HAL_DMA_Init+0x3e4>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a1c      	ldr	r2, [pc, #112]	; (8001c68 <HAL_DMA_Init+0x440>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d008      	beq.n	8001c0c <HAL_DMA_Init+0x3e4>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a1b      	ldr	r2, [pc, #108]	; (8001c6c <HAL_DMA_Init+0x444>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d003      	beq.n	8001c0c <HAL_DMA_Init+0x3e4>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a19      	ldr	r2, [pc, #100]	; (8001c70 <HAL_DMA_Init+0x448>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2202      	movs	r2, #2
 8001c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <HAL_DMA_Init+0x44c>)
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	2b40      	cmp	r3, #64	; 0x40
 8001c34:	d020      	beq.n	8001c78 <HAL_DMA_Init+0x450>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	2b80      	cmp	r3, #128	; 0x80
 8001c3c:	d102      	bne.n	8001c44 <HAL_DMA_Init+0x41c>
 8001c3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c42:	e01a      	b.n	8001c7a <HAL_DMA_Init+0x452>
 8001c44:	2300      	movs	r3, #0
 8001c46:	e018      	b.n	8001c7a <HAL_DMA_Init+0x452>
 8001c48:	fe10803f 	.word	0xfe10803f
 8001c4c:	5c001000 	.word	0x5c001000
 8001c50:	ffff0000 	.word	0xffff0000
 8001c54:	58025408 	.word	0x58025408
 8001c58:	5802541c 	.word	0x5802541c
 8001c5c:	58025430 	.word	0x58025430
 8001c60:	58025444 	.word	0x58025444
 8001c64:	58025458 	.word	0x58025458
 8001c68:	5802546c 	.word	0x5802546c
 8001c6c:	58025480 	.word	0x58025480
 8001c70:	58025494 	.word	0x58025494
 8001c74:	fffe000f 	.word	0xfffe000f
 8001c78:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	68d2      	ldr	r2, [r2, #12]
 8001c7e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001c88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001c90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001c98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001ca0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001ca8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4b6e      	ldr	r3, [pc, #440]	; (8001e78 <HAL_DMA_Init+0x650>)
 8001cc0:	4413      	add	r3, r2
 8001cc2:	4a6e      	ldr	r2, [pc, #440]	; (8001e7c <HAL_DMA_Init+0x654>)
 8001cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc8:	091b      	lsrs	r3, r3, #4
 8001cca:	009a      	lsls	r2, r3, #2
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f001 f82f 	bl	8002d34 <DMA_CalcBaseAndBitshift>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cde:	f003 031f 	and.w	r3, r3, #31
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	409a      	lsls	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	e008      	b.n	8001cfe <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2240      	movs	r2, #64	; 0x40
 8001cf0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e0b7      	b.n	8001e6e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a5f      	ldr	r2, [pc, #380]	; (8001e80 <HAL_DMA_Init+0x658>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d072      	beq.n	8001dee <HAL_DMA_Init+0x5c6>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a5d      	ldr	r2, [pc, #372]	; (8001e84 <HAL_DMA_Init+0x65c>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d06d      	beq.n	8001dee <HAL_DMA_Init+0x5c6>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a5c      	ldr	r2, [pc, #368]	; (8001e88 <HAL_DMA_Init+0x660>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d068      	beq.n	8001dee <HAL_DMA_Init+0x5c6>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a5a      	ldr	r2, [pc, #360]	; (8001e8c <HAL_DMA_Init+0x664>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d063      	beq.n	8001dee <HAL_DMA_Init+0x5c6>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a59      	ldr	r2, [pc, #356]	; (8001e90 <HAL_DMA_Init+0x668>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d05e      	beq.n	8001dee <HAL_DMA_Init+0x5c6>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a57      	ldr	r2, [pc, #348]	; (8001e94 <HAL_DMA_Init+0x66c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d059      	beq.n	8001dee <HAL_DMA_Init+0x5c6>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a56      	ldr	r2, [pc, #344]	; (8001e98 <HAL_DMA_Init+0x670>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d054      	beq.n	8001dee <HAL_DMA_Init+0x5c6>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a54      	ldr	r2, [pc, #336]	; (8001e9c <HAL_DMA_Init+0x674>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d04f      	beq.n	8001dee <HAL_DMA_Init+0x5c6>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a53      	ldr	r2, [pc, #332]	; (8001ea0 <HAL_DMA_Init+0x678>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d04a      	beq.n	8001dee <HAL_DMA_Init+0x5c6>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a51      	ldr	r2, [pc, #324]	; (8001ea4 <HAL_DMA_Init+0x67c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d045      	beq.n	8001dee <HAL_DMA_Init+0x5c6>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a50      	ldr	r2, [pc, #320]	; (8001ea8 <HAL_DMA_Init+0x680>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d040      	beq.n	8001dee <HAL_DMA_Init+0x5c6>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a4e      	ldr	r2, [pc, #312]	; (8001eac <HAL_DMA_Init+0x684>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d03b      	beq.n	8001dee <HAL_DMA_Init+0x5c6>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a4d      	ldr	r2, [pc, #308]	; (8001eb0 <HAL_DMA_Init+0x688>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d036      	beq.n	8001dee <HAL_DMA_Init+0x5c6>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a4b      	ldr	r2, [pc, #300]	; (8001eb4 <HAL_DMA_Init+0x68c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d031      	beq.n	8001dee <HAL_DMA_Init+0x5c6>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a4a      	ldr	r2, [pc, #296]	; (8001eb8 <HAL_DMA_Init+0x690>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d02c      	beq.n	8001dee <HAL_DMA_Init+0x5c6>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a48      	ldr	r2, [pc, #288]	; (8001ebc <HAL_DMA_Init+0x694>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d027      	beq.n	8001dee <HAL_DMA_Init+0x5c6>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a47      	ldr	r2, [pc, #284]	; (8001ec0 <HAL_DMA_Init+0x698>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d022      	beq.n	8001dee <HAL_DMA_Init+0x5c6>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a45      	ldr	r2, [pc, #276]	; (8001ec4 <HAL_DMA_Init+0x69c>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d01d      	beq.n	8001dee <HAL_DMA_Init+0x5c6>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a44      	ldr	r2, [pc, #272]	; (8001ec8 <HAL_DMA_Init+0x6a0>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d018      	beq.n	8001dee <HAL_DMA_Init+0x5c6>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a42      	ldr	r2, [pc, #264]	; (8001ecc <HAL_DMA_Init+0x6a4>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d013      	beq.n	8001dee <HAL_DMA_Init+0x5c6>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a41      	ldr	r2, [pc, #260]	; (8001ed0 <HAL_DMA_Init+0x6a8>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d00e      	beq.n	8001dee <HAL_DMA_Init+0x5c6>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a3f      	ldr	r2, [pc, #252]	; (8001ed4 <HAL_DMA_Init+0x6ac>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d009      	beq.n	8001dee <HAL_DMA_Init+0x5c6>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a3e      	ldr	r2, [pc, #248]	; (8001ed8 <HAL_DMA_Init+0x6b0>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d004      	beq.n	8001dee <HAL_DMA_Init+0x5c6>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a3c      	ldr	r2, [pc, #240]	; (8001edc <HAL_DMA_Init+0x6b4>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d101      	bne.n	8001df2 <HAL_DMA_Init+0x5ca>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <HAL_DMA_Init+0x5cc>
 8001df2:	2300      	movs	r3, #0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d032      	beq.n	8001e5e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f001 f8c9 	bl	8002f90 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	2b80      	cmp	r3, #128	; 0x80
 8001e04:	d102      	bne.n	8001e0c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001e20:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d010      	beq.n	8001e4c <HAL_DMA_Init+0x624>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b08      	cmp	r3, #8
 8001e30:	d80c      	bhi.n	8001e4c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f001 f946 	bl	80030c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	e008      	b.n	8001e5e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	a7fdabf8 	.word	0xa7fdabf8
 8001e7c:	cccccccd 	.word	0xcccccccd
 8001e80:	40020010 	.word	0x40020010
 8001e84:	40020028 	.word	0x40020028
 8001e88:	40020040 	.word	0x40020040
 8001e8c:	40020058 	.word	0x40020058
 8001e90:	40020070 	.word	0x40020070
 8001e94:	40020088 	.word	0x40020088
 8001e98:	400200a0 	.word	0x400200a0
 8001e9c:	400200b8 	.word	0x400200b8
 8001ea0:	40020410 	.word	0x40020410
 8001ea4:	40020428 	.word	0x40020428
 8001ea8:	40020440 	.word	0x40020440
 8001eac:	40020458 	.word	0x40020458
 8001eb0:	40020470 	.word	0x40020470
 8001eb4:	40020488 	.word	0x40020488
 8001eb8:	400204a0 	.word	0x400204a0
 8001ebc:	400204b8 	.word	0x400204b8
 8001ec0:	58025408 	.word	0x58025408
 8001ec4:	5802541c 	.word	0x5802541c
 8001ec8:	58025430 	.word	0x58025430
 8001ecc:	58025444 	.word	0x58025444
 8001ed0:	58025458 	.word	0x58025458
 8001ed4:	5802546c 	.word	0x5802546c
 8001ed8:	58025480 	.word	0x58025480
 8001edc:	58025494 	.word	0x58025494

08001ee0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08a      	sub	sp, #40	; 0x28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001eec:	4b67      	ldr	r3, [pc, #412]	; (800208c <HAL_DMA_IRQHandler+0x1ac>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a67      	ldr	r2, [pc, #412]	; (8002090 <HAL_DMA_IRQHandler+0x1b0>)
 8001ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef6:	0a9b      	lsrs	r3, r3, #10
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f04:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001f06:	6a3b      	ldr	r3, [r7, #32]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a5f      	ldr	r2, [pc, #380]	; (8002094 <HAL_DMA_IRQHandler+0x1b4>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d04a      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0xd2>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a5d      	ldr	r2, [pc, #372]	; (8002098 <HAL_DMA_IRQHandler+0x1b8>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d045      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0xd2>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a5c      	ldr	r2, [pc, #368]	; (800209c <HAL_DMA_IRQHandler+0x1bc>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d040      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0xd2>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a5a      	ldr	r2, [pc, #360]	; (80020a0 <HAL_DMA_IRQHandler+0x1c0>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d03b      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0xd2>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a59      	ldr	r2, [pc, #356]	; (80020a4 <HAL_DMA_IRQHandler+0x1c4>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d036      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0xd2>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a57      	ldr	r2, [pc, #348]	; (80020a8 <HAL_DMA_IRQHandler+0x1c8>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d031      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0xd2>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a56      	ldr	r2, [pc, #344]	; (80020ac <HAL_DMA_IRQHandler+0x1cc>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d02c      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0xd2>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a54      	ldr	r2, [pc, #336]	; (80020b0 <HAL_DMA_IRQHandler+0x1d0>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d027      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0xd2>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a53      	ldr	r2, [pc, #332]	; (80020b4 <HAL_DMA_IRQHandler+0x1d4>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d022      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0xd2>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a51      	ldr	r2, [pc, #324]	; (80020b8 <HAL_DMA_IRQHandler+0x1d8>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d01d      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0xd2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a50      	ldr	r2, [pc, #320]	; (80020bc <HAL_DMA_IRQHandler+0x1dc>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d018      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0xd2>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a4e      	ldr	r2, [pc, #312]	; (80020c0 <HAL_DMA_IRQHandler+0x1e0>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d013      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0xd2>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a4d      	ldr	r2, [pc, #308]	; (80020c4 <HAL_DMA_IRQHandler+0x1e4>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d00e      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0xd2>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a4b      	ldr	r2, [pc, #300]	; (80020c8 <HAL_DMA_IRQHandler+0x1e8>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d009      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0xd2>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a4a      	ldr	r2, [pc, #296]	; (80020cc <HAL_DMA_IRQHandler+0x1ec>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d004      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0xd2>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a48      	ldr	r2, [pc, #288]	; (80020d0 <HAL_DMA_IRQHandler+0x1f0>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d101      	bne.n	8001fb6 <HAL_DMA_IRQHandler+0xd6>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e000      	b.n	8001fb8 <HAL_DMA_IRQHandler+0xd8>
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 842b 	beq.w	8002814 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc2:	f003 031f 	and.w	r3, r3, #31
 8001fc6:	2208      	movs	r2, #8
 8001fc8:	409a      	lsls	r2, r3
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 80a2 	beq.w	8002118 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a2e      	ldr	r2, [pc, #184]	; (8002094 <HAL_DMA_IRQHandler+0x1b4>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d04a      	beq.n	8002074 <HAL_DMA_IRQHandler+0x194>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a2d      	ldr	r2, [pc, #180]	; (8002098 <HAL_DMA_IRQHandler+0x1b8>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d045      	beq.n	8002074 <HAL_DMA_IRQHandler+0x194>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a2b      	ldr	r2, [pc, #172]	; (800209c <HAL_DMA_IRQHandler+0x1bc>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d040      	beq.n	8002074 <HAL_DMA_IRQHandler+0x194>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a2a      	ldr	r2, [pc, #168]	; (80020a0 <HAL_DMA_IRQHandler+0x1c0>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d03b      	beq.n	8002074 <HAL_DMA_IRQHandler+0x194>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a28      	ldr	r2, [pc, #160]	; (80020a4 <HAL_DMA_IRQHandler+0x1c4>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d036      	beq.n	8002074 <HAL_DMA_IRQHandler+0x194>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a27      	ldr	r2, [pc, #156]	; (80020a8 <HAL_DMA_IRQHandler+0x1c8>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d031      	beq.n	8002074 <HAL_DMA_IRQHandler+0x194>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a25      	ldr	r2, [pc, #148]	; (80020ac <HAL_DMA_IRQHandler+0x1cc>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d02c      	beq.n	8002074 <HAL_DMA_IRQHandler+0x194>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a24      	ldr	r2, [pc, #144]	; (80020b0 <HAL_DMA_IRQHandler+0x1d0>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d027      	beq.n	8002074 <HAL_DMA_IRQHandler+0x194>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a22      	ldr	r2, [pc, #136]	; (80020b4 <HAL_DMA_IRQHandler+0x1d4>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d022      	beq.n	8002074 <HAL_DMA_IRQHandler+0x194>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a21      	ldr	r2, [pc, #132]	; (80020b8 <HAL_DMA_IRQHandler+0x1d8>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d01d      	beq.n	8002074 <HAL_DMA_IRQHandler+0x194>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a1f      	ldr	r2, [pc, #124]	; (80020bc <HAL_DMA_IRQHandler+0x1dc>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d018      	beq.n	8002074 <HAL_DMA_IRQHandler+0x194>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a1e      	ldr	r2, [pc, #120]	; (80020c0 <HAL_DMA_IRQHandler+0x1e0>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d013      	beq.n	8002074 <HAL_DMA_IRQHandler+0x194>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a1c      	ldr	r2, [pc, #112]	; (80020c4 <HAL_DMA_IRQHandler+0x1e4>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d00e      	beq.n	8002074 <HAL_DMA_IRQHandler+0x194>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a1b      	ldr	r2, [pc, #108]	; (80020c8 <HAL_DMA_IRQHandler+0x1e8>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d009      	beq.n	8002074 <HAL_DMA_IRQHandler+0x194>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a19      	ldr	r2, [pc, #100]	; (80020cc <HAL_DMA_IRQHandler+0x1ec>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d004      	beq.n	8002074 <HAL_DMA_IRQHandler+0x194>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a18      	ldr	r2, [pc, #96]	; (80020d0 <HAL_DMA_IRQHandler+0x1f0>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d12f      	bne.n	80020d4 <HAL_DMA_IRQHandler+0x1f4>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0304 	and.w	r3, r3, #4
 800207e:	2b00      	cmp	r3, #0
 8002080:	bf14      	ite	ne
 8002082:	2301      	movne	r3, #1
 8002084:	2300      	moveq	r3, #0
 8002086:	b2db      	uxtb	r3, r3
 8002088:	e02e      	b.n	80020e8 <HAL_DMA_IRQHandler+0x208>
 800208a:	bf00      	nop
 800208c:	24000000 	.word	0x24000000
 8002090:	1b4e81b5 	.word	0x1b4e81b5
 8002094:	40020010 	.word	0x40020010
 8002098:	40020028 	.word	0x40020028
 800209c:	40020040 	.word	0x40020040
 80020a0:	40020058 	.word	0x40020058
 80020a4:	40020070 	.word	0x40020070
 80020a8:	40020088 	.word	0x40020088
 80020ac:	400200a0 	.word	0x400200a0
 80020b0:	400200b8 	.word	0x400200b8
 80020b4:	40020410 	.word	0x40020410
 80020b8:	40020428 	.word	0x40020428
 80020bc:	40020440 	.word	0x40020440
 80020c0:	40020458 	.word	0x40020458
 80020c4:	40020470 	.word	0x40020470
 80020c8:	40020488 	.word	0x40020488
 80020cc:	400204a0 	.word	0x400204a0
 80020d0:	400204b8 	.word	0x400204b8
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	bf14      	ite	ne
 80020e2:	2301      	movne	r3, #1
 80020e4:	2300      	moveq	r3, #0
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d015      	beq.n	8002118 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0204 	bic.w	r2, r2, #4
 80020fa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002100:	f003 031f 	and.w	r3, r3, #31
 8002104:	2208      	movs	r2, #8
 8002106:	409a      	lsls	r2, r3
 8002108:	6a3b      	ldr	r3, [r7, #32]
 800210a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002110:	f043 0201 	orr.w	r2, r3, #1
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800211c:	f003 031f 	and.w	r3, r3, #31
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	fa22 f303 	lsr.w	r3, r2, r3
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b00      	cmp	r3, #0
 800212c:	d06e      	beq.n	800220c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a69      	ldr	r2, [pc, #420]	; (80022d8 <HAL_DMA_IRQHandler+0x3f8>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d04a      	beq.n	80021ce <HAL_DMA_IRQHandler+0x2ee>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a67      	ldr	r2, [pc, #412]	; (80022dc <HAL_DMA_IRQHandler+0x3fc>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d045      	beq.n	80021ce <HAL_DMA_IRQHandler+0x2ee>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a66      	ldr	r2, [pc, #408]	; (80022e0 <HAL_DMA_IRQHandler+0x400>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d040      	beq.n	80021ce <HAL_DMA_IRQHandler+0x2ee>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a64      	ldr	r2, [pc, #400]	; (80022e4 <HAL_DMA_IRQHandler+0x404>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d03b      	beq.n	80021ce <HAL_DMA_IRQHandler+0x2ee>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a63      	ldr	r2, [pc, #396]	; (80022e8 <HAL_DMA_IRQHandler+0x408>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d036      	beq.n	80021ce <HAL_DMA_IRQHandler+0x2ee>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a61      	ldr	r2, [pc, #388]	; (80022ec <HAL_DMA_IRQHandler+0x40c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d031      	beq.n	80021ce <HAL_DMA_IRQHandler+0x2ee>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a60      	ldr	r2, [pc, #384]	; (80022f0 <HAL_DMA_IRQHandler+0x410>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d02c      	beq.n	80021ce <HAL_DMA_IRQHandler+0x2ee>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a5e      	ldr	r2, [pc, #376]	; (80022f4 <HAL_DMA_IRQHandler+0x414>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d027      	beq.n	80021ce <HAL_DMA_IRQHandler+0x2ee>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a5d      	ldr	r2, [pc, #372]	; (80022f8 <HAL_DMA_IRQHandler+0x418>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d022      	beq.n	80021ce <HAL_DMA_IRQHandler+0x2ee>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a5b      	ldr	r2, [pc, #364]	; (80022fc <HAL_DMA_IRQHandler+0x41c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d01d      	beq.n	80021ce <HAL_DMA_IRQHandler+0x2ee>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a5a      	ldr	r2, [pc, #360]	; (8002300 <HAL_DMA_IRQHandler+0x420>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d018      	beq.n	80021ce <HAL_DMA_IRQHandler+0x2ee>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a58      	ldr	r2, [pc, #352]	; (8002304 <HAL_DMA_IRQHandler+0x424>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d013      	beq.n	80021ce <HAL_DMA_IRQHandler+0x2ee>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a57      	ldr	r2, [pc, #348]	; (8002308 <HAL_DMA_IRQHandler+0x428>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d00e      	beq.n	80021ce <HAL_DMA_IRQHandler+0x2ee>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a55      	ldr	r2, [pc, #340]	; (800230c <HAL_DMA_IRQHandler+0x42c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d009      	beq.n	80021ce <HAL_DMA_IRQHandler+0x2ee>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a54      	ldr	r2, [pc, #336]	; (8002310 <HAL_DMA_IRQHandler+0x430>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d004      	beq.n	80021ce <HAL_DMA_IRQHandler+0x2ee>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a52      	ldr	r2, [pc, #328]	; (8002314 <HAL_DMA_IRQHandler+0x434>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d10a      	bne.n	80021e4 <HAL_DMA_IRQHandler+0x304>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d8:	2b00      	cmp	r3, #0
 80021da:	bf14      	ite	ne
 80021dc:	2301      	movne	r3, #1
 80021de:	2300      	moveq	r3, #0
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	e003      	b.n	80021ec <HAL_DMA_IRQHandler+0x30c>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2300      	movs	r3, #0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00d      	beq.n	800220c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f4:	f003 031f 	and.w	r3, r3, #31
 80021f8:	2201      	movs	r2, #1
 80021fa:	409a      	lsls	r2, r3
 80021fc:	6a3b      	ldr	r3, [r7, #32]
 80021fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002204:	f043 0202 	orr.w	r2, r3, #2
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002210:	f003 031f 	and.w	r3, r3, #31
 8002214:	2204      	movs	r2, #4
 8002216:	409a      	lsls	r2, r3
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	4013      	ands	r3, r2
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 808f 	beq.w	8002340 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a2c      	ldr	r2, [pc, #176]	; (80022d8 <HAL_DMA_IRQHandler+0x3f8>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d04a      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x3e2>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a2a      	ldr	r2, [pc, #168]	; (80022dc <HAL_DMA_IRQHandler+0x3fc>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d045      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x3e2>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a29      	ldr	r2, [pc, #164]	; (80022e0 <HAL_DMA_IRQHandler+0x400>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d040      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x3e2>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a27      	ldr	r2, [pc, #156]	; (80022e4 <HAL_DMA_IRQHandler+0x404>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d03b      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x3e2>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a26      	ldr	r2, [pc, #152]	; (80022e8 <HAL_DMA_IRQHandler+0x408>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d036      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x3e2>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a24      	ldr	r2, [pc, #144]	; (80022ec <HAL_DMA_IRQHandler+0x40c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d031      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x3e2>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a23      	ldr	r2, [pc, #140]	; (80022f0 <HAL_DMA_IRQHandler+0x410>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d02c      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x3e2>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a21      	ldr	r2, [pc, #132]	; (80022f4 <HAL_DMA_IRQHandler+0x414>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d027      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x3e2>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a20      	ldr	r2, [pc, #128]	; (80022f8 <HAL_DMA_IRQHandler+0x418>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d022      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x3e2>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a1e      	ldr	r2, [pc, #120]	; (80022fc <HAL_DMA_IRQHandler+0x41c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d01d      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x3e2>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a1d      	ldr	r2, [pc, #116]	; (8002300 <HAL_DMA_IRQHandler+0x420>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d018      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x3e2>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a1b      	ldr	r2, [pc, #108]	; (8002304 <HAL_DMA_IRQHandler+0x424>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d013      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x3e2>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a1a      	ldr	r2, [pc, #104]	; (8002308 <HAL_DMA_IRQHandler+0x428>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d00e      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x3e2>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a18      	ldr	r2, [pc, #96]	; (800230c <HAL_DMA_IRQHandler+0x42c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d009      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x3e2>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a17      	ldr	r2, [pc, #92]	; (8002310 <HAL_DMA_IRQHandler+0x430>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d004      	beq.n	80022c2 <HAL_DMA_IRQHandler+0x3e2>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a15      	ldr	r2, [pc, #84]	; (8002314 <HAL_DMA_IRQHandler+0x434>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d12a      	bne.n	8002318 <HAL_DMA_IRQHandler+0x438>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	bf14      	ite	ne
 80022d0:	2301      	movne	r3, #1
 80022d2:	2300      	moveq	r3, #0
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	e023      	b.n	8002320 <HAL_DMA_IRQHandler+0x440>
 80022d8:	40020010 	.word	0x40020010
 80022dc:	40020028 	.word	0x40020028
 80022e0:	40020040 	.word	0x40020040
 80022e4:	40020058 	.word	0x40020058
 80022e8:	40020070 	.word	0x40020070
 80022ec:	40020088 	.word	0x40020088
 80022f0:	400200a0 	.word	0x400200a0
 80022f4:	400200b8 	.word	0x400200b8
 80022f8:	40020410 	.word	0x40020410
 80022fc:	40020428 	.word	0x40020428
 8002300:	40020440 	.word	0x40020440
 8002304:	40020458 	.word	0x40020458
 8002308:	40020470 	.word	0x40020470
 800230c:	40020488 	.word	0x40020488
 8002310:	400204a0 	.word	0x400204a0
 8002314:	400204b8 	.word	0x400204b8
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2300      	movs	r3, #0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00d      	beq.n	8002340 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002328:	f003 031f 	and.w	r3, r3, #31
 800232c:	2204      	movs	r2, #4
 800232e:	409a      	lsls	r2, r3
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002338:	f043 0204 	orr.w	r2, r3, #4
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002344:	f003 031f 	and.w	r3, r3, #31
 8002348:	2210      	movs	r2, #16
 800234a:	409a      	lsls	r2, r3
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 80a6 	beq.w	80024a2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a85      	ldr	r2, [pc, #532]	; (8002570 <HAL_DMA_IRQHandler+0x690>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d04a      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x516>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a83      	ldr	r2, [pc, #524]	; (8002574 <HAL_DMA_IRQHandler+0x694>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d045      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x516>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a82      	ldr	r2, [pc, #520]	; (8002578 <HAL_DMA_IRQHandler+0x698>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d040      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x516>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a80      	ldr	r2, [pc, #512]	; (800257c <HAL_DMA_IRQHandler+0x69c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d03b      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x516>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a7f      	ldr	r2, [pc, #508]	; (8002580 <HAL_DMA_IRQHandler+0x6a0>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d036      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x516>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a7d      	ldr	r2, [pc, #500]	; (8002584 <HAL_DMA_IRQHandler+0x6a4>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d031      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x516>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a7c      	ldr	r2, [pc, #496]	; (8002588 <HAL_DMA_IRQHandler+0x6a8>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d02c      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x516>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a7a      	ldr	r2, [pc, #488]	; (800258c <HAL_DMA_IRQHandler+0x6ac>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d027      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x516>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a79      	ldr	r2, [pc, #484]	; (8002590 <HAL_DMA_IRQHandler+0x6b0>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d022      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x516>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a77      	ldr	r2, [pc, #476]	; (8002594 <HAL_DMA_IRQHandler+0x6b4>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d01d      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x516>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a76      	ldr	r2, [pc, #472]	; (8002598 <HAL_DMA_IRQHandler+0x6b8>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d018      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x516>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a74      	ldr	r2, [pc, #464]	; (800259c <HAL_DMA_IRQHandler+0x6bc>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d013      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x516>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a73      	ldr	r2, [pc, #460]	; (80025a0 <HAL_DMA_IRQHandler+0x6c0>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d00e      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x516>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a71      	ldr	r2, [pc, #452]	; (80025a4 <HAL_DMA_IRQHandler+0x6c4>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d009      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x516>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a70      	ldr	r2, [pc, #448]	; (80025a8 <HAL_DMA_IRQHandler+0x6c8>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d004      	beq.n	80023f6 <HAL_DMA_IRQHandler+0x516>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a6e      	ldr	r2, [pc, #440]	; (80025ac <HAL_DMA_IRQHandler+0x6cc>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d10a      	bne.n	800240c <HAL_DMA_IRQHandler+0x52c>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0308 	and.w	r3, r3, #8
 8002400:	2b00      	cmp	r3, #0
 8002402:	bf14      	ite	ne
 8002404:	2301      	movne	r3, #1
 8002406:	2300      	moveq	r3, #0
 8002408:	b2db      	uxtb	r3, r3
 800240a:	e009      	b.n	8002420 <HAL_DMA_IRQHandler+0x540>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	2b00      	cmp	r3, #0
 8002418:	bf14      	ite	ne
 800241a:	2301      	movne	r3, #1
 800241c:	2300      	moveq	r3, #0
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	d03e      	beq.n	80024a2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002428:	f003 031f 	and.w	r3, r3, #31
 800242c:	2210      	movs	r2, #16
 800242e:	409a      	lsls	r2, r3
 8002430:	6a3b      	ldr	r3, [r7, #32]
 8002432:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d018      	beq.n	8002474 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d108      	bne.n	8002462 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002454:	2b00      	cmp	r3, #0
 8002456:	d024      	beq.n	80024a2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	4798      	blx	r3
 8002460:	e01f      	b.n	80024a2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002466:	2b00      	cmp	r3, #0
 8002468:	d01b      	beq.n	80024a2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	4798      	blx	r3
 8002472:	e016      	b.n	80024a2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247e:	2b00      	cmp	r3, #0
 8002480:	d107      	bne.n	8002492 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0208 	bic.w	r2, r2, #8
 8002490:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a6:	f003 031f 	and.w	r3, r3, #31
 80024aa:	2220      	movs	r2, #32
 80024ac:	409a      	lsls	r2, r3
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 8110 	beq.w	80026d8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a2c      	ldr	r2, [pc, #176]	; (8002570 <HAL_DMA_IRQHandler+0x690>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d04a      	beq.n	8002558 <HAL_DMA_IRQHandler+0x678>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a2b      	ldr	r2, [pc, #172]	; (8002574 <HAL_DMA_IRQHandler+0x694>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d045      	beq.n	8002558 <HAL_DMA_IRQHandler+0x678>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a29      	ldr	r2, [pc, #164]	; (8002578 <HAL_DMA_IRQHandler+0x698>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d040      	beq.n	8002558 <HAL_DMA_IRQHandler+0x678>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a28      	ldr	r2, [pc, #160]	; (800257c <HAL_DMA_IRQHandler+0x69c>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d03b      	beq.n	8002558 <HAL_DMA_IRQHandler+0x678>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a26      	ldr	r2, [pc, #152]	; (8002580 <HAL_DMA_IRQHandler+0x6a0>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d036      	beq.n	8002558 <HAL_DMA_IRQHandler+0x678>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a25      	ldr	r2, [pc, #148]	; (8002584 <HAL_DMA_IRQHandler+0x6a4>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d031      	beq.n	8002558 <HAL_DMA_IRQHandler+0x678>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a23      	ldr	r2, [pc, #140]	; (8002588 <HAL_DMA_IRQHandler+0x6a8>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d02c      	beq.n	8002558 <HAL_DMA_IRQHandler+0x678>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a22      	ldr	r2, [pc, #136]	; (800258c <HAL_DMA_IRQHandler+0x6ac>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d027      	beq.n	8002558 <HAL_DMA_IRQHandler+0x678>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a20      	ldr	r2, [pc, #128]	; (8002590 <HAL_DMA_IRQHandler+0x6b0>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d022      	beq.n	8002558 <HAL_DMA_IRQHandler+0x678>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a1f      	ldr	r2, [pc, #124]	; (8002594 <HAL_DMA_IRQHandler+0x6b4>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d01d      	beq.n	8002558 <HAL_DMA_IRQHandler+0x678>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a1d      	ldr	r2, [pc, #116]	; (8002598 <HAL_DMA_IRQHandler+0x6b8>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d018      	beq.n	8002558 <HAL_DMA_IRQHandler+0x678>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a1c      	ldr	r2, [pc, #112]	; (800259c <HAL_DMA_IRQHandler+0x6bc>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d013      	beq.n	8002558 <HAL_DMA_IRQHandler+0x678>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a1a      	ldr	r2, [pc, #104]	; (80025a0 <HAL_DMA_IRQHandler+0x6c0>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d00e      	beq.n	8002558 <HAL_DMA_IRQHandler+0x678>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a19      	ldr	r2, [pc, #100]	; (80025a4 <HAL_DMA_IRQHandler+0x6c4>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d009      	beq.n	8002558 <HAL_DMA_IRQHandler+0x678>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a17      	ldr	r2, [pc, #92]	; (80025a8 <HAL_DMA_IRQHandler+0x6c8>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d004      	beq.n	8002558 <HAL_DMA_IRQHandler+0x678>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a16      	ldr	r2, [pc, #88]	; (80025ac <HAL_DMA_IRQHandler+0x6cc>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d12b      	bne.n	80025b0 <HAL_DMA_IRQHandler+0x6d0>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0310 	and.w	r3, r3, #16
 8002562:	2b00      	cmp	r3, #0
 8002564:	bf14      	ite	ne
 8002566:	2301      	movne	r3, #1
 8002568:	2300      	moveq	r3, #0
 800256a:	b2db      	uxtb	r3, r3
 800256c:	e02a      	b.n	80025c4 <HAL_DMA_IRQHandler+0x6e4>
 800256e:	bf00      	nop
 8002570:	40020010 	.word	0x40020010
 8002574:	40020028 	.word	0x40020028
 8002578:	40020040 	.word	0x40020040
 800257c:	40020058 	.word	0x40020058
 8002580:	40020070 	.word	0x40020070
 8002584:	40020088 	.word	0x40020088
 8002588:	400200a0 	.word	0x400200a0
 800258c:	400200b8 	.word	0x400200b8
 8002590:	40020410 	.word	0x40020410
 8002594:	40020428 	.word	0x40020428
 8002598:	40020440 	.word	0x40020440
 800259c:	40020458 	.word	0x40020458
 80025a0:	40020470 	.word	0x40020470
 80025a4:	40020488 	.word	0x40020488
 80025a8:	400204a0 	.word	0x400204a0
 80025ac:	400204b8 	.word	0x400204b8
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	bf14      	ite	ne
 80025be:	2301      	movne	r3, #1
 80025c0:	2300      	moveq	r3, #0
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 8087 	beq.w	80026d8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ce:	f003 031f 	and.w	r3, r3, #31
 80025d2:	2220      	movs	r2, #32
 80025d4:	409a      	lsls	r2, r3
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	d139      	bne.n	800265a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 0216 	bic.w	r2, r2, #22
 80025f4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	695a      	ldr	r2, [r3, #20]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002604:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	2b00      	cmp	r3, #0
 800260c:	d103      	bne.n	8002616 <HAL_DMA_IRQHandler+0x736>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002612:	2b00      	cmp	r3, #0
 8002614:	d007      	beq.n	8002626 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0208 	bic.w	r2, r2, #8
 8002624:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262a:	f003 031f 	and.w	r3, r3, #31
 800262e:	223f      	movs	r2, #63	; 0x3f
 8002630:	409a      	lsls	r2, r3
 8002632:	6a3b      	ldr	r3, [r7, #32]
 8002634:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800264a:	2b00      	cmp	r3, #0
 800264c:	f000 834a 	beq.w	8002ce4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	4798      	blx	r3
          }
          return;
 8002658:	e344      	b.n	8002ce4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d018      	beq.n	800269a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d108      	bne.n	8002688 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267a:	2b00      	cmp	r3, #0
 800267c:	d02c      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	4798      	blx	r3
 8002686:	e027      	b.n	80026d8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268c:	2b00      	cmp	r3, #0
 800268e:	d023      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	4798      	blx	r3
 8002698:	e01e      	b.n	80026d8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10f      	bne.n	80026c8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0210 	bic.w	r2, r2, #16
 80026b6:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f000 8306 	beq.w	8002cee <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f000 8088 	beq.w	8002800 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2204      	movs	r2, #4
 80026f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a7a      	ldr	r2, [pc, #488]	; (80028e8 <HAL_DMA_IRQHandler+0xa08>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d04a      	beq.n	8002798 <HAL_DMA_IRQHandler+0x8b8>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a79      	ldr	r2, [pc, #484]	; (80028ec <HAL_DMA_IRQHandler+0xa0c>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d045      	beq.n	8002798 <HAL_DMA_IRQHandler+0x8b8>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a77      	ldr	r2, [pc, #476]	; (80028f0 <HAL_DMA_IRQHandler+0xa10>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d040      	beq.n	8002798 <HAL_DMA_IRQHandler+0x8b8>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a76      	ldr	r2, [pc, #472]	; (80028f4 <HAL_DMA_IRQHandler+0xa14>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d03b      	beq.n	8002798 <HAL_DMA_IRQHandler+0x8b8>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a74      	ldr	r2, [pc, #464]	; (80028f8 <HAL_DMA_IRQHandler+0xa18>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d036      	beq.n	8002798 <HAL_DMA_IRQHandler+0x8b8>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a73      	ldr	r2, [pc, #460]	; (80028fc <HAL_DMA_IRQHandler+0xa1c>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d031      	beq.n	8002798 <HAL_DMA_IRQHandler+0x8b8>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a71      	ldr	r2, [pc, #452]	; (8002900 <HAL_DMA_IRQHandler+0xa20>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d02c      	beq.n	8002798 <HAL_DMA_IRQHandler+0x8b8>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a70      	ldr	r2, [pc, #448]	; (8002904 <HAL_DMA_IRQHandler+0xa24>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d027      	beq.n	8002798 <HAL_DMA_IRQHandler+0x8b8>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a6e      	ldr	r2, [pc, #440]	; (8002908 <HAL_DMA_IRQHandler+0xa28>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d022      	beq.n	8002798 <HAL_DMA_IRQHandler+0x8b8>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a6d      	ldr	r2, [pc, #436]	; (800290c <HAL_DMA_IRQHandler+0xa2c>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d01d      	beq.n	8002798 <HAL_DMA_IRQHandler+0x8b8>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a6b      	ldr	r2, [pc, #428]	; (8002910 <HAL_DMA_IRQHandler+0xa30>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d018      	beq.n	8002798 <HAL_DMA_IRQHandler+0x8b8>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a6a      	ldr	r2, [pc, #424]	; (8002914 <HAL_DMA_IRQHandler+0xa34>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d013      	beq.n	8002798 <HAL_DMA_IRQHandler+0x8b8>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a68      	ldr	r2, [pc, #416]	; (8002918 <HAL_DMA_IRQHandler+0xa38>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d00e      	beq.n	8002798 <HAL_DMA_IRQHandler+0x8b8>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a67      	ldr	r2, [pc, #412]	; (800291c <HAL_DMA_IRQHandler+0xa3c>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d009      	beq.n	8002798 <HAL_DMA_IRQHandler+0x8b8>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a65      	ldr	r2, [pc, #404]	; (8002920 <HAL_DMA_IRQHandler+0xa40>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d004      	beq.n	8002798 <HAL_DMA_IRQHandler+0x8b8>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a64      	ldr	r2, [pc, #400]	; (8002924 <HAL_DMA_IRQHandler+0xa44>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d108      	bne.n	80027aa <HAL_DMA_IRQHandler+0x8ca>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0201 	bic.w	r2, r2, #1
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	e007      	b.n	80027ba <HAL_DMA_IRQHandler+0x8da>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 0201 	bic.w	r2, r2, #1
 80027b8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	3301      	adds	r3, #1
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d307      	bcc.n	80027d6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1f2      	bne.n	80027ba <HAL_DMA_IRQHandler+0x8da>
 80027d4:	e000      	b.n	80027d8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80027d6:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d004      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2203      	movs	r2, #3
 80027f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80027f6:	e003      	b.n	8002800 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 8272 	beq.w	8002cee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	4798      	blx	r3
 8002812:	e26c      	b.n	8002cee <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a43      	ldr	r2, [pc, #268]	; (8002928 <HAL_DMA_IRQHandler+0xa48>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d022      	beq.n	8002864 <HAL_DMA_IRQHandler+0x984>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a42      	ldr	r2, [pc, #264]	; (800292c <HAL_DMA_IRQHandler+0xa4c>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d01d      	beq.n	8002864 <HAL_DMA_IRQHandler+0x984>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a40      	ldr	r2, [pc, #256]	; (8002930 <HAL_DMA_IRQHandler+0xa50>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d018      	beq.n	8002864 <HAL_DMA_IRQHandler+0x984>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a3f      	ldr	r2, [pc, #252]	; (8002934 <HAL_DMA_IRQHandler+0xa54>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d013      	beq.n	8002864 <HAL_DMA_IRQHandler+0x984>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a3d      	ldr	r2, [pc, #244]	; (8002938 <HAL_DMA_IRQHandler+0xa58>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d00e      	beq.n	8002864 <HAL_DMA_IRQHandler+0x984>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a3c      	ldr	r2, [pc, #240]	; (800293c <HAL_DMA_IRQHandler+0xa5c>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d009      	beq.n	8002864 <HAL_DMA_IRQHandler+0x984>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a3a      	ldr	r2, [pc, #232]	; (8002940 <HAL_DMA_IRQHandler+0xa60>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d004      	beq.n	8002864 <HAL_DMA_IRQHandler+0x984>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a39      	ldr	r2, [pc, #228]	; (8002944 <HAL_DMA_IRQHandler+0xa64>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d101      	bne.n	8002868 <HAL_DMA_IRQHandler+0x988>
 8002864:	2301      	movs	r3, #1
 8002866:	e000      	b.n	800286a <HAL_DMA_IRQHandler+0x98a>
 8002868:	2300      	movs	r3, #0
 800286a:	2b00      	cmp	r3, #0
 800286c:	f000 823f 	beq.w	8002cee <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287c:	f003 031f 	and.w	r3, r3, #31
 8002880:	2204      	movs	r2, #4
 8002882:	409a      	lsls	r2, r3
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	4013      	ands	r3, r2
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 80cd 	beq.w	8002a28 <HAL_DMA_IRQHandler+0xb48>
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 80c7 	beq.w	8002a28 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289e:	f003 031f 	and.w	r3, r3, #31
 80028a2:	2204      	movs	r2, #4
 80028a4:	409a      	lsls	r2, r3
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d049      	beq.n	8002948 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d109      	bne.n	80028d2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 8210 	beq.w	8002ce8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028d0:	e20a      	b.n	8002ce8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 8206 	beq.w	8002ce8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80028e4:	e200      	b.n	8002ce8 <HAL_DMA_IRQHandler+0xe08>
 80028e6:	bf00      	nop
 80028e8:	40020010 	.word	0x40020010
 80028ec:	40020028 	.word	0x40020028
 80028f0:	40020040 	.word	0x40020040
 80028f4:	40020058 	.word	0x40020058
 80028f8:	40020070 	.word	0x40020070
 80028fc:	40020088 	.word	0x40020088
 8002900:	400200a0 	.word	0x400200a0
 8002904:	400200b8 	.word	0x400200b8
 8002908:	40020410 	.word	0x40020410
 800290c:	40020428 	.word	0x40020428
 8002910:	40020440 	.word	0x40020440
 8002914:	40020458 	.word	0x40020458
 8002918:	40020470 	.word	0x40020470
 800291c:	40020488 	.word	0x40020488
 8002920:	400204a0 	.word	0x400204a0
 8002924:	400204b8 	.word	0x400204b8
 8002928:	58025408 	.word	0x58025408
 800292c:	5802541c 	.word	0x5802541c
 8002930:	58025430 	.word	0x58025430
 8002934:	58025444 	.word	0x58025444
 8002938:	58025458 	.word	0x58025458
 800293c:	5802546c 	.word	0x5802546c
 8002940:	58025480 	.word	0x58025480
 8002944:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	f003 0320 	and.w	r3, r3, #32
 800294e:	2b00      	cmp	r3, #0
 8002950:	d160      	bne.n	8002a14 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a8c      	ldr	r2, [pc, #560]	; (8002b88 <HAL_DMA_IRQHandler+0xca8>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d04a      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xb12>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a8a      	ldr	r2, [pc, #552]	; (8002b8c <HAL_DMA_IRQHandler+0xcac>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d045      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xb12>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a89      	ldr	r2, [pc, #548]	; (8002b90 <HAL_DMA_IRQHandler+0xcb0>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d040      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xb12>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a87      	ldr	r2, [pc, #540]	; (8002b94 <HAL_DMA_IRQHandler+0xcb4>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d03b      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xb12>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a86      	ldr	r2, [pc, #536]	; (8002b98 <HAL_DMA_IRQHandler+0xcb8>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d036      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xb12>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a84      	ldr	r2, [pc, #528]	; (8002b9c <HAL_DMA_IRQHandler+0xcbc>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d031      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xb12>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a83      	ldr	r2, [pc, #524]	; (8002ba0 <HAL_DMA_IRQHandler+0xcc0>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d02c      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xb12>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a81      	ldr	r2, [pc, #516]	; (8002ba4 <HAL_DMA_IRQHandler+0xcc4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d027      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xb12>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a80      	ldr	r2, [pc, #512]	; (8002ba8 <HAL_DMA_IRQHandler+0xcc8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d022      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xb12>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a7e      	ldr	r2, [pc, #504]	; (8002bac <HAL_DMA_IRQHandler+0xccc>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d01d      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xb12>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a7d      	ldr	r2, [pc, #500]	; (8002bb0 <HAL_DMA_IRQHandler+0xcd0>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d018      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xb12>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a7b      	ldr	r2, [pc, #492]	; (8002bb4 <HAL_DMA_IRQHandler+0xcd4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d013      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xb12>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a7a      	ldr	r2, [pc, #488]	; (8002bb8 <HAL_DMA_IRQHandler+0xcd8>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d00e      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xb12>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a78      	ldr	r2, [pc, #480]	; (8002bbc <HAL_DMA_IRQHandler+0xcdc>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d009      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xb12>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a77      	ldr	r2, [pc, #476]	; (8002bc0 <HAL_DMA_IRQHandler+0xce0>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d004      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xb12>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a75      	ldr	r2, [pc, #468]	; (8002bc4 <HAL_DMA_IRQHandler+0xce4>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d108      	bne.n	8002a04 <HAL_DMA_IRQHandler+0xb24>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0208 	bic.w	r2, r2, #8
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	e007      	b.n	8002a14 <HAL_DMA_IRQHandler+0xb34>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0204 	bic.w	r2, r2, #4
 8002a12:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 8165 	beq.w	8002ce8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a26:	e15f      	b.n	8002ce8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2c:	f003 031f 	and.w	r3, r3, #31
 8002a30:	2202      	movs	r2, #2
 8002a32:	409a      	lsls	r2, r3
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	4013      	ands	r3, r2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 80c5 	beq.w	8002bc8 <HAL_DMA_IRQHandler+0xce8>
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 80bf 	beq.w	8002bc8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4e:	f003 031f 	and.w	r3, r3, #31
 8002a52:	2202      	movs	r2, #2
 8002a54:	409a      	lsls	r2, r3
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d018      	beq.n	8002a96 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d109      	bne.n	8002a82 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 813a 	beq.w	8002cec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a80:	e134      	b.n	8002cec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 8130 	beq.w	8002cec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a94:	e12a      	b.n	8002cec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	f003 0320 	and.w	r3, r3, #32
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d168      	bne.n	8002b72 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a38      	ldr	r2, [pc, #224]	; (8002b88 <HAL_DMA_IRQHandler+0xca8>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d04a      	beq.n	8002b40 <HAL_DMA_IRQHandler+0xc60>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a37      	ldr	r2, [pc, #220]	; (8002b8c <HAL_DMA_IRQHandler+0xcac>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d045      	beq.n	8002b40 <HAL_DMA_IRQHandler+0xc60>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a35      	ldr	r2, [pc, #212]	; (8002b90 <HAL_DMA_IRQHandler+0xcb0>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d040      	beq.n	8002b40 <HAL_DMA_IRQHandler+0xc60>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a34      	ldr	r2, [pc, #208]	; (8002b94 <HAL_DMA_IRQHandler+0xcb4>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d03b      	beq.n	8002b40 <HAL_DMA_IRQHandler+0xc60>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a32      	ldr	r2, [pc, #200]	; (8002b98 <HAL_DMA_IRQHandler+0xcb8>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d036      	beq.n	8002b40 <HAL_DMA_IRQHandler+0xc60>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a31      	ldr	r2, [pc, #196]	; (8002b9c <HAL_DMA_IRQHandler+0xcbc>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d031      	beq.n	8002b40 <HAL_DMA_IRQHandler+0xc60>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a2f      	ldr	r2, [pc, #188]	; (8002ba0 <HAL_DMA_IRQHandler+0xcc0>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d02c      	beq.n	8002b40 <HAL_DMA_IRQHandler+0xc60>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a2e      	ldr	r2, [pc, #184]	; (8002ba4 <HAL_DMA_IRQHandler+0xcc4>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d027      	beq.n	8002b40 <HAL_DMA_IRQHandler+0xc60>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a2c      	ldr	r2, [pc, #176]	; (8002ba8 <HAL_DMA_IRQHandler+0xcc8>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d022      	beq.n	8002b40 <HAL_DMA_IRQHandler+0xc60>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a2b      	ldr	r2, [pc, #172]	; (8002bac <HAL_DMA_IRQHandler+0xccc>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d01d      	beq.n	8002b40 <HAL_DMA_IRQHandler+0xc60>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a29      	ldr	r2, [pc, #164]	; (8002bb0 <HAL_DMA_IRQHandler+0xcd0>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d018      	beq.n	8002b40 <HAL_DMA_IRQHandler+0xc60>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a28      	ldr	r2, [pc, #160]	; (8002bb4 <HAL_DMA_IRQHandler+0xcd4>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d013      	beq.n	8002b40 <HAL_DMA_IRQHandler+0xc60>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a26      	ldr	r2, [pc, #152]	; (8002bb8 <HAL_DMA_IRQHandler+0xcd8>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d00e      	beq.n	8002b40 <HAL_DMA_IRQHandler+0xc60>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a25      	ldr	r2, [pc, #148]	; (8002bbc <HAL_DMA_IRQHandler+0xcdc>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d009      	beq.n	8002b40 <HAL_DMA_IRQHandler+0xc60>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a23      	ldr	r2, [pc, #140]	; (8002bc0 <HAL_DMA_IRQHandler+0xce0>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d004      	beq.n	8002b40 <HAL_DMA_IRQHandler+0xc60>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a22      	ldr	r2, [pc, #136]	; (8002bc4 <HAL_DMA_IRQHandler+0xce4>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d108      	bne.n	8002b52 <HAL_DMA_IRQHandler+0xc72>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0214 	bic.w	r2, r2, #20
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	e007      	b.n	8002b62 <HAL_DMA_IRQHandler+0xc82>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 020a 	bic.w	r2, r2, #10
 8002b60:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 80b8 	beq.w	8002cec <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b84:	e0b2      	b.n	8002cec <HAL_DMA_IRQHandler+0xe0c>
 8002b86:	bf00      	nop
 8002b88:	40020010 	.word	0x40020010
 8002b8c:	40020028 	.word	0x40020028
 8002b90:	40020040 	.word	0x40020040
 8002b94:	40020058 	.word	0x40020058
 8002b98:	40020070 	.word	0x40020070
 8002b9c:	40020088 	.word	0x40020088
 8002ba0:	400200a0 	.word	0x400200a0
 8002ba4:	400200b8 	.word	0x400200b8
 8002ba8:	40020410 	.word	0x40020410
 8002bac:	40020428 	.word	0x40020428
 8002bb0:	40020440 	.word	0x40020440
 8002bb4:	40020458 	.word	0x40020458
 8002bb8:	40020470 	.word	0x40020470
 8002bbc:	40020488 	.word	0x40020488
 8002bc0:	400204a0 	.word	0x400204a0
 8002bc4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bcc:	f003 031f 	and.w	r3, r3, #31
 8002bd0:	2208      	movs	r2, #8
 8002bd2:	409a      	lsls	r2, r3
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 8088 	beq.w	8002cee <HAL_DMA_IRQHandler+0xe0e>
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	f003 0308 	and.w	r3, r3, #8
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 8082 	beq.w	8002cee <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a41      	ldr	r2, [pc, #260]	; (8002cf4 <HAL_DMA_IRQHandler+0xe14>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d04a      	beq.n	8002c8a <HAL_DMA_IRQHandler+0xdaa>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a3f      	ldr	r2, [pc, #252]	; (8002cf8 <HAL_DMA_IRQHandler+0xe18>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d045      	beq.n	8002c8a <HAL_DMA_IRQHandler+0xdaa>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a3e      	ldr	r2, [pc, #248]	; (8002cfc <HAL_DMA_IRQHandler+0xe1c>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d040      	beq.n	8002c8a <HAL_DMA_IRQHandler+0xdaa>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a3c      	ldr	r2, [pc, #240]	; (8002d00 <HAL_DMA_IRQHandler+0xe20>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d03b      	beq.n	8002c8a <HAL_DMA_IRQHandler+0xdaa>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a3b      	ldr	r2, [pc, #236]	; (8002d04 <HAL_DMA_IRQHandler+0xe24>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d036      	beq.n	8002c8a <HAL_DMA_IRQHandler+0xdaa>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a39      	ldr	r2, [pc, #228]	; (8002d08 <HAL_DMA_IRQHandler+0xe28>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d031      	beq.n	8002c8a <HAL_DMA_IRQHandler+0xdaa>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a38      	ldr	r2, [pc, #224]	; (8002d0c <HAL_DMA_IRQHandler+0xe2c>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d02c      	beq.n	8002c8a <HAL_DMA_IRQHandler+0xdaa>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a36      	ldr	r2, [pc, #216]	; (8002d10 <HAL_DMA_IRQHandler+0xe30>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d027      	beq.n	8002c8a <HAL_DMA_IRQHandler+0xdaa>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a35      	ldr	r2, [pc, #212]	; (8002d14 <HAL_DMA_IRQHandler+0xe34>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d022      	beq.n	8002c8a <HAL_DMA_IRQHandler+0xdaa>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a33      	ldr	r2, [pc, #204]	; (8002d18 <HAL_DMA_IRQHandler+0xe38>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d01d      	beq.n	8002c8a <HAL_DMA_IRQHandler+0xdaa>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a32      	ldr	r2, [pc, #200]	; (8002d1c <HAL_DMA_IRQHandler+0xe3c>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d018      	beq.n	8002c8a <HAL_DMA_IRQHandler+0xdaa>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a30      	ldr	r2, [pc, #192]	; (8002d20 <HAL_DMA_IRQHandler+0xe40>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d013      	beq.n	8002c8a <HAL_DMA_IRQHandler+0xdaa>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a2f      	ldr	r2, [pc, #188]	; (8002d24 <HAL_DMA_IRQHandler+0xe44>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d00e      	beq.n	8002c8a <HAL_DMA_IRQHandler+0xdaa>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a2d      	ldr	r2, [pc, #180]	; (8002d28 <HAL_DMA_IRQHandler+0xe48>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d009      	beq.n	8002c8a <HAL_DMA_IRQHandler+0xdaa>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a2c      	ldr	r2, [pc, #176]	; (8002d2c <HAL_DMA_IRQHandler+0xe4c>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d004      	beq.n	8002c8a <HAL_DMA_IRQHandler+0xdaa>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a2a      	ldr	r2, [pc, #168]	; (8002d30 <HAL_DMA_IRQHandler+0xe50>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d108      	bne.n	8002c9c <HAL_DMA_IRQHandler+0xdbc>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 021c 	bic.w	r2, r2, #28
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	e007      	b.n	8002cac <HAL_DMA_IRQHandler+0xdcc>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 020e 	bic.w	r2, r2, #14
 8002caa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb0:	f003 031f 	and.w	r3, r3, #31
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	409a      	lsls	r2, r3
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d009      	beq.n	8002cee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	4798      	blx	r3
 8002ce2:	e004      	b.n	8002cee <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002ce4:	bf00      	nop
 8002ce6:	e002      	b.n	8002cee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ce8:	bf00      	nop
 8002cea:	e000      	b.n	8002cee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002cec:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002cee:	3728      	adds	r7, #40	; 0x28
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40020010 	.word	0x40020010
 8002cf8:	40020028 	.word	0x40020028
 8002cfc:	40020040 	.word	0x40020040
 8002d00:	40020058 	.word	0x40020058
 8002d04:	40020070 	.word	0x40020070
 8002d08:	40020088 	.word	0x40020088
 8002d0c:	400200a0 	.word	0x400200a0
 8002d10:	400200b8 	.word	0x400200b8
 8002d14:	40020410 	.word	0x40020410
 8002d18:	40020428 	.word	0x40020428
 8002d1c:	40020440 	.word	0x40020440
 8002d20:	40020458 	.word	0x40020458
 8002d24:	40020470 	.word	0x40020470
 8002d28:	40020488 	.word	0x40020488
 8002d2c:	400204a0 	.word	0x400204a0
 8002d30:	400204b8 	.word	0x400204b8

08002d34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a42      	ldr	r2, [pc, #264]	; (8002e4c <DMA_CalcBaseAndBitshift+0x118>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d04a      	beq.n	8002ddc <DMA_CalcBaseAndBitshift+0xa8>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a41      	ldr	r2, [pc, #260]	; (8002e50 <DMA_CalcBaseAndBitshift+0x11c>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d045      	beq.n	8002ddc <DMA_CalcBaseAndBitshift+0xa8>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a3f      	ldr	r2, [pc, #252]	; (8002e54 <DMA_CalcBaseAndBitshift+0x120>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d040      	beq.n	8002ddc <DMA_CalcBaseAndBitshift+0xa8>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a3e      	ldr	r2, [pc, #248]	; (8002e58 <DMA_CalcBaseAndBitshift+0x124>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d03b      	beq.n	8002ddc <DMA_CalcBaseAndBitshift+0xa8>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a3c      	ldr	r2, [pc, #240]	; (8002e5c <DMA_CalcBaseAndBitshift+0x128>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d036      	beq.n	8002ddc <DMA_CalcBaseAndBitshift+0xa8>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a3b      	ldr	r2, [pc, #236]	; (8002e60 <DMA_CalcBaseAndBitshift+0x12c>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d031      	beq.n	8002ddc <DMA_CalcBaseAndBitshift+0xa8>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a39      	ldr	r2, [pc, #228]	; (8002e64 <DMA_CalcBaseAndBitshift+0x130>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d02c      	beq.n	8002ddc <DMA_CalcBaseAndBitshift+0xa8>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a38      	ldr	r2, [pc, #224]	; (8002e68 <DMA_CalcBaseAndBitshift+0x134>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d027      	beq.n	8002ddc <DMA_CalcBaseAndBitshift+0xa8>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a36      	ldr	r2, [pc, #216]	; (8002e6c <DMA_CalcBaseAndBitshift+0x138>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d022      	beq.n	8002ddc <DMA_CalcBaseAndBitshift+0xa8>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a35      	ldr	r2, [pc, #212]	; (8002e70 <DMA_CalcBaseAndBitshift+0x13c>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d01d      	beq.n	8002ddc <DMA_CalcBaseAndBitshift+0xa8>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a33      	ldr	r2, [pc, #204]	; (8002e74 <DMA_CalcBaseAndBitshift+0x140>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d018      	beq.n	8002ddc <DMA_CalcBaseAndBitshift+0xa8>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a32      	ldr	r2, [pc, #200]	; (8002e78 <DMA_CalcBaseAndBitshift+0x144>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d013      	beq.n	8002ddc <DMA_CalcBaseAndBitshift+0xa8>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a30      	ldr	r2, [pc, #192]	; (8002e7c <DMA_CalcBaseAndBitshift+0x148>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d00e      	beq.n	8002ddc <DMA_CalcBaseAndBitshift+0xa8>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a2f      	ldr	r2, [pc, #188]	; (8002e80 <DMA_CalcBaseAndBitshift+0x14c>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d009      	beq.n	8002ddc <DMA_CalcBaseAndBitshift+0xa8>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a2d      	ldr	r2, [pc, #180]	; (8002e84 <DMA_CalcBaseAndBitshift+0x150>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d004      	beq.n	8002ddc <DMA_CalcBaseAndBitshift+0xa8>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a2c      	ldr	r2, [pc, #176]	; (8002e88 <DMA_CalcBaseAndBitshift+0x154>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d101      	bne.n	8002de0 <DMA_CalcBaseAndBitshift+0xac>
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e000      	b.n	8002de2 <DMA_CalcBaseAndBitshift+0xae>
 8002de0:	2300      	movs	r3, #0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d024      	beq.n	8002e30 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	3b10      	subs	r3, #16
 8002dee:	4a27      	ldr	r2, [pc, #156]	; (8002e8c <DMA_CalcBaseAndBitshift+0x158>)
 8002df0:	fba2 2303 	umull	r2, r3, r2, r3
 8002df4:	091b      	lsrs	r3, r3, #4
 8002df6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	4a24      	ldr	r2, [pc, #144]	; (8002e90 <DMA_CalcBaseAndBitshift+0x15c>)
 8002e00:	5cd3      	ldrb	r3, [r2, r3]
 8002e02:	461a      	mov	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2b03      	cmp	r3, #3
 8002e0c:	d908      	bls.n	8002e20 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	4b1f      	ldr	r3, [pc, #124]	; (8002e94 <DMA_CalcBaseAndBitshift+0x160>)
 8002e16:	4013      	ands	r3, r2
 8002e18:	1d1a      	adds	r2, r3, #4
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	659a      	str	r2, [r3, #88]	; 0x58
 8002e1e:	e00d      	b.n	8002e3c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	461a      	mov	r2, r3
 8002e26:	4b1b      	ldr	r3, [pc, #108]	; (8002e94 <DMA_CalcBaseAndBitshift+0x160>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6593      	str	r3, [r2, #88]	; 0x58
 8002e2e:	e005      	b.n	8002e3c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	40020010 	.word	0x40020010
 8002e50:	40020028 	.word	0x40020028
 8002e54:	40020040 	.word	0x40020040
 8002e58:	40020058 	.word	0x40020058
 8002e5c:	40020070 	.word	0x40020070
 8002e60:	40020088 	.word	0x40020088
 8002e64:	400200a0 	.word	0x400200a0
 8002e68:	400200b8 	.word	0x400200b8
 8002e6c:	40020410 	.word	0x40020410
 8002e70:	40020428 	.word	0x40020428
 8002e74:	40020440 	.word	0x40020440
 8002e78:	40020458 	.word	0x40020458
 8002e7c:	40020470 	.word	0x40020470
 8002e80:	40020488 	.word	0x40020488
 8002e84:	400204a0 	.word	0x400204a0
 8002e88:	400204b8 	.word	0x400204b8
 8002e8c:	aaaaaaab 	.word	0xaaaaaaab
 8002e90:	080128f0 	.word	0x080128f0
 8002e94:	fffffc00 	.word	0xfffffc00

08002e98 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d120      	bne.n	8002eee <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb0:	2b03      	cmp	r3, #3
 8002eb2:	d858      	bhi.n	8002f66 <DMA_CheckFifoParam+0xce>
 8002eb4:	a201      	add	r2, pc, #4	; (adr r2, 8002ebc <DMA_CheckFifoParam+0x24>)
 8002eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eba:	bf00      	nop
 8002ebc:	08002ecd 	.word	0x08002ecd
 8002ec0:	08002edf 	.word	0x08002edf
 8002ec4:	08002ecd 	.word	0x08002ecd
 8002ec8:	08002f67 	.word	0x08002f67
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d048      	beq.n	8002f6a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002edc:	e045      	b.n	8002f6a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ee6:	d142      	bne.n	8002f6e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002eec:	e03f      	b.n	8002f6e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ef6:	d123      	bne.n	8002f40 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efc:	2b03      	cmp	r3, #3
 8002efe:	d838      	bhi.n	8002f72 <DMA_CheckFifoParam+0xda>
 8002f00:	a201      	add	r2, pc, #4	; (adr r2, 8002f08 <DMA_CheckFifoParam+0x70>)
 8002f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f06:	bf00      	nop
 8002f08:	08002f19 	.word	0x08002f19
 8002f0c:	08002f1f 	.word	0x08002f1f
 8002f10:	08002f19 	.word	0x08002f19
 8002f14:	08002f31 	.word	0x08002f31
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	73fb      	strb	r3, [r7, #15]
        break;
 8002f1c:	e030      	b.n	8002f80 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d025      	beq.n	8002f76 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002f2e:	e022      	b.n	8002f76 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f38:	d11f      	bne.n	8002f7a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002f3e:	e01c      	b.n	8002f7a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d902      	bls.n	8002f4e <DMA_CheckFifoParam+0xb6>
 8002f48:	2b03      	cmp	r3, #3
 8002f4a:	d003      	beq.n	8002f54 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002f4c:	e018      	b.n	8002f80 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	73fb      	strb	r3, [r7, #15]
        break;
 8002f52:	e015      	b.n	8002f80 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00e      	beq.n	8002f7e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	73fb      	strb	r3, [r7, #15]
    break;
 8002f64:	e00b      	b.n	8002f7e <DMA_CheckFifoParam+0xe6>
        break;
 8002f66:	bf00      	nop
 8002f68:	e00a      	b.n	8002f80 <DMA_CheckFifoParam+0xe8>
        break;
 8002f6a:	bf00      	nop
 8002f6c:	e008      	b.n	8002f80 <DMA_CheckFifoParam+0xe8>
        break;
 8002f6e:	bf00      	nop
 8002f70:	e006      	b.n	8002f80 <DMA_CheckFifoParam+0xe8>
        break;
 8002f72:	bf00      	nop
 8002f74:	e004      	b.n	8002f80 <DMA_CheckFifoParam+0xe8>
        break;
 8002f76:	bf00      	nop
 8002f78:	e002      	b.n	8002f80 <DMA_CheckFifoParam+0xe8>
        break;
 8002f7a:	bf00      	nop
 8002f7c:	e000      	b.n	8002f80 <DMA_CheckFifoParam+0xe8>
    break;
 8002f7e:	bf00      	nop
    }
  }

  return status;
 8002f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop

08002f90 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a38      	ldr	r2, [pc, #224]	; (8003084 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d022      	beq.n	8002fee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a36      	ldr	r2, [pc, #216]	; (8003088 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d01d      	beq.n	8002fee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a35      	ldr	r2, [pc, #212]	; (800308c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d018      	beq.n	8002fee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a33      	ldr	r2, [pc, #204]	; (8003090 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d013      	beq.n	8002fee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a32      	ldr	r2, [pc, #200]	; (8003094 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d00e      	beq.n	8002fee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a30      	ldr	r2, [pc, #192]	; (8003098 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d009      	beq.n	8002fee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a2f      	ldr	r2, [pc, #188]	; (800309c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d004      	beq.n	8002fee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a2d      	ldr	r2, [pc, #180]	; (80030a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d101      	bne.n	8002ff2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d01a      	beq.n	800302e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	3b08      	subs	r3, #8
 8003000:	4a28      	ldr	r2, [pc, #160]	; (80030a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003002:	fba2 2303 	umull	r2, r3, r2, r3
 8003006:	091b      	lsrs	r3, r3, #4
 8003008:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	4b26      	ldr	r3, [pc, #152]	; (80030a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800300e:	4413      	add	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	461a      	mov	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a24      	ldr	r2, [pc, #144]	; (80030ac <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800301c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f003 031f 	and.w	r3, r3, #31
 8003024:	2201      	movs	r2, #1
 8003026:	409a      	lsls	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800302c:	e024      	b.n	8003078 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	b2db      	uxtb	r3, r3
 8003034:	3b10      	subs	r3, #16
 8003036:	4a1e      	ldr	r2, [pc, #120]	; (80030b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003038:	fba2 2303 	umull	r2, r3, r2, r3
 800303c:	091b      	lsrs	r3, r3, #4
 800303e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	4a1c      	ldr	r2, [pc, #112]	; (80030b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d806      	bhi.n	8003056 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	4a1b      	ldr	r2, [pc, #108]	; (80030b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d902      	bls.n	8003056 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	3308      	adds	r3, #8
 8003054:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	4b18      	ldr	r3, [pc, #96]	; (80030bc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800305a:	4413      	add	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	461a      	mov	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a16      	ldr	r2, [pc, #88]	; (80030c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003068:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f003 031f 	and.w	r3, r3, #31
 8003070:	2201      	movs	r2, #1
 8003072:	409a      	lsls	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003078:	bf00      	nop
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	58025408 	.word	0x58025408
 8003088:	5802541c 	.word	0x5802541c
 800308c:	58025430 	.word	0x58025430
 8003090:	58025444 	.word	0x58025444
 8003094:	58025458 	.word	0x58025458
 8003098:	5802546c 	.word	0x5802546c
 800309c:	58025480 	.word	0x58025480
 80030a0:	58025494 	.word	0x58025494
 80030a4:	cccccccd 	.word	0xcccccccd
 80030a8:	16009600 	.word	0x16009600
 80030ac:	58025880 	.word	0x58025880
 80030b0:	aaaaaaab 	.word	0xaaaaaaab
 80030b4:	400204b8 	.word	0x400204b8
 80030b8:	4002040f 	.word	0x4002040f
 80030bc:	10008200 	.word	0x10008200
 80030c0:	40020880 	.word	0x40020880

080030c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d04a      	beq.n	8003170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d847      	bhi.n	8003170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a25      	ldr	r2, [pc, #148]	; (800317c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d022      	beq.n	8003130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a24      	ldr	r2, [pc, #144]	; (8003180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d01d      	beq.n	8003130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a22      	ldr	r2, [pc, #136]	; (8003184 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d018      	beq.n	8003130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a21      	ldr	r2, [pc, #132]	; (8003188 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d013      	beq.n	8003130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a1f      	ldr	r2, [pc, #124]	; (800318c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d00e      	beq.n	8003130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a1e      	ldr	r2, [pc, #120]	; (8003190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d009      	beq.n	8003130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a1c      	ldr	r2, [pc, #112]	; (8003194 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d004      	beq.n	8003130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a1b      	ldr	r2, [pc, #108]	; (8003198 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d101      	bne.n	8003134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003130:	2301      	movs	r3, #1
 8003132:	e000      	b.n	8003136 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003134:	2300      	movs	r3, #0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	4b17      	ldr	r3, [pc, #92]	; (800319c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800313e:	4413      	add	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	461a      	mov	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a15      	ldr	r2, [pc, #84]	; (80031a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800314c:	671a      	str	r2, [r3, #112]	; 0x70
 800314e:	e009      	b.n	8003164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	4b14      	ldr	r3, [pc, #80]	; (80031a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003154:	4413      	add	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	461a      	mov	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a11      	ldr	r2, [pc, #68]	; (80031a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003162:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	3b01      	subs	r3, #1
 8003168:	2201      	movs	r2, #1
 800316a:	409a      	lsls	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003170:	bf00      	nop
 8003172:	3714      	adds	r7, #20
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	58025408 	.word	0x58025408
 8003180:	5802541c 	.word	0x5802541c
 8003184:	58025430 	.word	0x58025430
 8003188:	58025444 	.word	0x58025444
 800318c:	58025458 	.word	0x58025458
 8003190:	5802546c 	.word	0x5802546c
 8003194:	58025480 	.word	0x58025480
 8003198:	58025494 	.word	0x58025494
 800319c:	1600963f 	.word	0x1600963f
 80031a0:	58025940 	.word	0x58025940
 80031a4:	1000823f 	.word	0x1000823f
 80031a8:	40020940 	.word	0x40020940

080031ac <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b098      	sub	sp, #96	; 0x60
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80031b4:	4a84      	ldr	r2, [pc, #528]	; (80033c8 <HAL_FDCAN_Init+0x21c>)
 80031b6:	f107 030c 	add.w	r3, r7, #12
 80031ba:	4611      	mov	r1, r2
 80031bc:	224c      	movs	r2, #76	; 0x4c
 80031be:	4618      	mov	r0, r3
 80031c0:	f00f fa26 	bl	8012610 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e1ca      	b.n	8003564 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a7e      	ldr	r2, [pc, #504]	; (80033cc <HAL_FDCAN_Init+0x220>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d106      	bne.n	80031e6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80031e0:	461a      	mov	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d106      	bne.n	8003200 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7fd fe1c 	bl	8000e38 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	699a      	ldr	r2, [r3, #24]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0210 	bic.w	r2, r2, #16
 800320e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003210:	f7fe f9c0 	bl	8001594 <HAL_GetTick>
 8003214:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003216:	e014      	b.n	8003242 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003218:	f7fe f9bc 	bl	8001594 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b0a      	cmp	r3, #10
 8003224:	d90d      	bls.n	8003242 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800322c:	f043 0201 	orr.w	r2, r3, #1
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2203      	movs	r2, #3
 800323a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e190      	b.n	8003564 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	f003 0308 	and.w	r3, r3, #8
 800324c:	2b08      	cmp	r3, #8
 800324e:	d0e3      	beq.n	8003218 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	699a      	ldr	r2, [r3, #24]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f042 0201 	orr.w	r2, r2, #1
 800325e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003260:	f7fe f998 	bl	8001594 <HAL_GetTick>
 8003264:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003266:	e014      	b.n	8003292 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003268:	f7fe f994 	bl	8001594 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b0a      	cmp	r3, #10
 8003274:	d90d      	bls.n	8003292 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800327c:	f043 0201 	orr.w	r2, r3, #1
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2203      	movs	r2, #3
 800328a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e168      	b.n	8003564 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0e3      	beq.n	8003268 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	699a      	ldr	r2, [r3, #24]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0202 	orr.w	r2, r2, #2
 80032ae:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	7c1b      	ldrb	r3, [r3, #16]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d108      	bne.n	80032ca <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	699a      	ldr	r2, [r3, #24]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032c6:	619a      	str	r2, [r3, #24]
 80032c8:	e007      	b.n	80032da <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	699a      	ldr	r2, [r3, #24]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032d8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	7c5b      	ldrb	r3, [r3, #17]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d108      	bne.n	80032f4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	699a      	ldr	r2, [r3, #24]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032f0:	619a      	str	r2, [r3, #24]
 80032f2:	e007      	b.n	8003304 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	699a      	ldr	r2, [r3, #24]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003302:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	7c9b      	ldrb	r3, [r3, #18]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d108      	bne.n	800331e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699a      	ldr	r2, [r3, #24]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800331a:	619a      	str	r2, [r3, #24]
 800331c:	e007      	b.n	800332e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	699a      	ldr	r2, [r3, #24]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800332c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	699a      	ldr	r2, [r3, #24]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003352:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	691a      	ldr	r2, [r3, #16]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 0210 	bic.w	r2, r2, #16
 8003362:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d108      	bne.n	800337e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	699a      	ldr	r2, [r3, #24]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0204 	orr.w	r2, r2, #4
 800337a:	619a      	str	r2, [r3, #24]
 800337c:	e030      	b.n	80033e0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d02c      	beq.n	80033e0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	2b02      	cmp	r3, #2
 800338c:	d020      	beq.n	80033d0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	699a      	ldr	r2, [r3, #24]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800339c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	691a      	ldr	r2, [r3, #16]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f042 0210 	orr.w	r2, r2, #16
 80033ac:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	2b03      	cmp	r3, #3
 80033b4:	d114      	bne.n	80033e0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	699a      	ldr	r2, [r3, #24]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f042 0220 	orr.w	r2, r2, #32
 80033c4:	619a      	str	r2, [r3, #24]
 80033c6:	e00b      	b.n	80033e0 <HAL_FDCAN_Init+0x234>
 80033c8:	080127fc 	.word	0x080127fc
 80033cc:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	699a      	ldr	r2, [r3, #24]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0220 	orr.w	r2, r2, #32
 80033de:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	3b01      	subs	r3, #1
 80033e6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	3b01      	subs	r3, #1
 80033ee:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80033f0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80033f8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	3b01      	subs	r3, #1
 8003402:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003408:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800340a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003414:	d115      	bne.n	8003442 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003420:	3b01      	subs	r3, #1
 8003422:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003424:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	3b01      	subs	r3, #1
 800342c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800342e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	3b01      	subs	r3, #1
 8003438:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800343e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003440:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003468:	4413      	add	r3, r2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d012      	beq.n	8003494 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003476:	f023 0107 	bic.w	r1, r3, #7
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003484:	4413      	add	r3, r2
 8003486:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	2b00      	cmp	r3, #0
 800349a:	d012      	beq.n	80034c2 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80034a4:	f023 0107 	bic.w	r1, r3, #7
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80034b2:	4413      	add	r3, r2
 80034b4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d013      	beq.n	80034f2 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80034d2:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80034e0:	4413      	add	r3, r2
 80034e2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80034e6:	011a      	lsls	r2, r3, #4
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d013      	beq.n	8003522 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003502:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003510:	4413      	add	r3, r2
 8003512:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003516:	021a      	lsls	r2, r3, #8
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a11      	ldr	r2, [pc, #68]	; (800356c <HAL_FDCAN_Init+0x3c0>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d107      	bne.n	800353c <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f022 0203 	bic.w	r2, r2, #3
 800353a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f80b 	bl	8003570 <FDCAN_CalcultateRamBlockAddresses>
 800355a:	4603      	mov	r3, r0
 800355c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8003560:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8003564:	4618      	mov	r0, r3
 8003566:	3760      	adds	r7, #96	; 0x60
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	4000a000 	.word	0x4000a000

08003570 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800357c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003586:	4ba7      	ldr	r3, [pc, #668]	; (8003824 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003588:	4013      	ands	r3, r2
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	0091      	lsls	r1, r2, #2
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6812      	ldr	r2, [r2, #0]
 8003592:	430b      	orrs	r3, r1
 8003594:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035a0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a8:	041a      	lsls	r2, r3, #16
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	4413      	add	r3, r2
 80035bc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80035c6:	4b97      	ldr	r3, [pc, #604]	; (8003824 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	0091      	lsls	r1, r2, #2
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6812      	ldr	r2, [r2, #0]
 80035d2:	430b      	orrs	r3, r1
 80035d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e8:	041a      	lsls	r2, r3, #16
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	4413      	add	r3, r2
 80035fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003608:	4b86      	ldr	r3, [pc, #536]	; (8003824 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800360a:	4013      	ands	r3, r2
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	0091      	lsls	r1, r2, #2
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6812      	ldr	r2, [r2, #0]
 8003614:	430b      	orrs	r3, r1
 8003616:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003622:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	041a      	lsls	r2, r3, #16
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800363e:	fb02 f303 	mul.w	r3, r2, r3
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	4413      	add	r3, r2
 8003646:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003650:	4b74      	ldr	r3, [pc, #464]	; (8003824 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003652:	4013      	ands	r3, r2
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	0091      	lsls	r1, r2, #2
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	6812      	ldr	r2, [r2, #0]
 800365c:	430b      	orrs	r3, r1
 800365e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800366a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003672:	041a      	lsls	r2, r3, #16
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003686:	fb02 f303 	mul.w	r3, r2, r3
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	4413      	add	r3, r2
 800368e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003698:	4b62      	ldr	r3, [pc, #392]	; (8003824 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800369a:	4013      	ands	r3, r2
 800369c:	68ba      	ldr	r2, [r7, #8]
 800369e:	0091      	lsls	r1, r2, #2
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6812      	ldr	r2, [r2, #0]
 80036a4:	430b      	orrs	r3, r1
 80036a6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80036b2:	fb02 f303 	mul.w	r3, r2, r3
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	4413      	add	r3, r2
 80036ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80036c4:	4b57      	ldr	r3, [pc, #348]	; (8003824 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80036c6:	4013      	ands	r3, r2
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	0091      	lsls	r1, r2, #2
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	6812      	ldr	r2, [r2, #0]
 80036d0:	430b      	orrs	r3, r1
 80036d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036de:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e6:	041a      	lsls	r2, r3, #16
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	4413      	add	r3, r2
 80036fc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003706:	4b47      	ldr	r3, [pc, #284]	; (8003824 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003708:	4013      	ands	r3, r2
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	0091      	lsls	r1, r2, #2
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	6812      	ldr	r2, [r2, #0]
 8003712:	430b      	orrs	r3, r1
 8003714:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003720:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003728:	041a      	lsls	r2, r3, #16
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800373c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003744:	061a      	lsls	r2, r3, #24
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003754:	4b34      	ldr	r3, [pc, #208]	; (8003828 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003756:	4413      	add	r3, r2
 8003758:	009a      	lsls	r2, r3, #2
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	441a      	add	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	441a      	add	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800378a:	fb01 f303 	mul.w	r3, r1, r3
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	441a      	add	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80037a2:	fb01 f303 	mul.w	r3, r1, r3
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	441a      	add	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80037ba:	fb01 f303 	mul.w	r3, r1, r3
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	441a      	add	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	441a      	add	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80037ea:	fb01 f303 	mul.w	r3, r1, r3
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	441a      	add	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003806:	fb01 f303 	mul.w	r3, r1, r3
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	441a      	add	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381a:	4a04      	ldr	r2, [pc, #16]	; (800382c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d915      	bls.n	800384c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003820:	e006      	b.n	8003830 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003822:	bf00      	nop
 8003824:	ffff0003 	.word	0xffff0003
 8003828:	10002b00 	.word	0x10002b00
 800382c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003836:	f043 0220 	orr.w	r2, r3, #32
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2203      	movs	r2, #3
 8003844:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e010      	b.n	800386e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	e005      	b.n	8003860 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	3304      	adds	r3, #4
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	429a      	cmp	r2, r3
 800386a:	d3f3      	bcc.n	8003854 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop

0800387c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800387c:	b480      	push	{r7}
 800387e:	b089      	sub	sp, #36	; 0x24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003886:	2300      	movs	r3, #0
 8003888:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800388a:	4b89      	ldr	r3, [pc, #548]	; (8003ab0 <HAL_GPIO_Init+0x234>)
 800388c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800388e:	e194      	b.n	8003bba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	2101      	movs	r1, #1
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	fa01 f303 	lsl.w	r3, r1, r3
 800389c:	4013      	ands	r3, r2
 800389e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 8186 	beq.w	8003bb4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d00b      	beq.n	80038c8 <HAL_GPIO_Init+0x4c>
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d007      	beq.n	80038c8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038bc:	2b11      	cmp	r3, #17
 80038be:	d003      	beq.n	80038c8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b12      	cmp	r3, #18
 80038c6:	d130      	bne.n	800392a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	2203      	movs	r2, #3
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	43db      	mvns	r3, r3
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	4013      	ands	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	68da      	ldr	r2, [r3, #12]
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038fe:	2201      	movs	r2, #1
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	fa02 f303 	lsl.w	r3, r2, r3
 8003906:	43db      	mvns	r3, r3
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	4013      	ands	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	091b      	lsrs	r3, r3, #4
 8003914:	f003 0201 	and.w	r2, r3, #1
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	fa02 f303 	lsl.w	r3, r2, r3
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	4313      	orrs	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	2203      	movs	r2, #3
 8003936:	fa02 f303 	lsl.w	r3, r2, r3
 800393a:	43db      	mvns	r3, r3
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	4013      	ands	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	689a      	ldr	r2, [r3, #8]
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	4313      	orrs	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2b02      	cmp	r3, #2
 8003960:	d003      	beq.n	800396a <HAL_GPIO_Init+0xee>
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	2b12      	cmp	r3, #18
 8003968:	d123      	bne.n	80039b2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	08da      	lsrs	r2, r3, #3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	3208      	adds	r2, #8
 8003972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003976:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	220f      	movs	r2, #15
 8003982:	fa02 f303 	lsl.w	r3, r2, r3
 8003986:	43db      	mvns	r3, r3
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	4013      	ands	r3, r2
 800398c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	691a      	ldr	r2, [r3, #16]
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	fa02 f303 	lsl.w	r3, r2, r3
 800399e:	69ba      	ldr	r2, [r7, #24]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	08da      	lsrs	r2, r3, #3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3208      	adds	r2, #8
 80039ac:	69b9      	ldr	r1, [r7, #24]
 80039ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	2203      	movs	r2, #3
 80039be:	fa02 f303 	lsl.w	r3, r2, r3
 80039c2:	43db      	mvns	r3, r3
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	4013      	ands	r3, r2
 80039c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f003 0203 	and.w	r2, r3, #3
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	4313      	orrs	r3, r2
 80039de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 80e0 	beq.w	8003bb4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039f4:	4b2f      	ldr	r3, [pc, #188]	; (8003ab4 <HAL_GPIO_Init+0x238>)
 80039f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80039fa:	4a2e      	ldr	r2, [pc, #184]	; (8003ab4 <HAL_GPIO_Init+0x238>)
 80039fc:	f043 0302 	orr.w	r3, r3, #2
 8003a00:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003a04:	4b2b      	ldr	r3, [pc, #172]	; (8003ab4 <HAL_GPIO_Init+0x238>)
 8003a06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	60fb      	str	r3, [r7, #12]
 8003a10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a12:	4a29      	ldr	r2, [pc, #164]	; (8003ab8 <HAL_GPIO_Init+0x23c>)
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	089b      	lsrs	r3, r3, #2
 8003a18:	3302      	adds	r3, #2
 8003a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	220f      	movs	r2, #15
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	4013      	ands	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a20      	ldr	r2, [pc, #128]	; (8003abc <HAL_GPIO_Init+0x240>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d052      	beq.n	8003ae4 <HAL_GPIO_Init+0x268>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a1f      	ldr	r2, [pc, #124]	; (8003ac0 <HAL_GPIO_Init+0x244>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d031      	beq.n	8003aaa <HAL_GPIO_Init+0x22e>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a1e      	ldr	r2, [pc, #120]	; (8003ac4 <HAL_GPIO_Init+0x248>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d02b      	beq.n	8003aa6 <HAL_GPIO_Init+0x22a>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a1d      	ldr	r2, [pc, #116]	; (8003ac8 <HAL_GPIO_Init+0x24c>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d025      	beq.n	8003aa2 <HAL_GPIO_Init+0x226>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a1c      	ldr	r2, [pc, #112]	; (8003acc <HAL_GPIO_Init+0x250>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d01f      	beq.n	8003a9e <HAL_GPIO_Init+0x222>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a1b      	ldr	r2, [pc, #108]	; (8003ad0 <HAL_GPIO_Init+0x254>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d019      	beq.n	8003a9a <HAL_GPIO_Init+0x21e>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a1a      	ldr	r2, [pc, #104]	; (8003ad4 <HAL_GPIO_Init+0x258>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d013      	beq.n	8003a96 <HAL_GPIO_Init+0x21a>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a19      	ldr	r2, [pc, #100]	; (8003ad8 <HAL_GPIO_Init+0x25c>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00d      	beq.n	8003a92 <HAL_GPIO_Init+0x216>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a18      	ldr	r2, [pc, #96]	; (8003adc <HAL_GPIO_Init+0x260>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d007      	beq.n	8003a8e <HAL_GPIO_Init+0x212>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a17      	ldr	r2, [pc, #92]	; (8003ae0 <HAL_GPIO_Init+0x264>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d101      	bne.n	8003a8a <HAL_GPIO_Init+0x20e>
 8003a86:	2309      	movs	r3, #9
 8003a88:	e02d      	b.n	8003ae6 <HAL_GPIO_Init+0x26a>
 8003a8a:	230a      	movs	r3, #10
 8003a8c:	e02b      	b.n	8003ae6 <HAL_GPIO_Init+0x26a>
 8003a8e:	2308      	movs	r3, #8
 8003a90:	e029      	b.n	8003ae6 <HAL_GPIO_Init+0x26a>
 8003a92:	2307      	movs	r3, #7
 8003a94:	e027      	b.n	8003ae6 <HAL_GPIO_Init+0x26a>
 8003a96:	2306      	movs	r3, #6
 8003a98:	e025      	b.n	8003ae6 <HAL_GPIO_Init+0x26a>
 8003a9a:	2305      	movs	r3, #5
 8003a9c:	e023      	b.n	8003ae6 <HAL_GPIO_Init+0x26a>
 8003a9e:	2304      	movs	r3, #4
 8003aa0:	e021      	b.n	8003ae6 <HAL_GPIO_Init+0x26a>
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e01f      	b.n	8003ae6 <HAL_GPIO_Init+0x26a>
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	e01d      	b.n	8003ae6 <HAL_GPIO_Init+0x26a>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e01b      	b.n	8003ae6 <HAL_GPIO_Init+0x26a>
 8003aae:	bf00      	nop
 8003ab0:	58000080 	.word	0x58000080
 8003ab4:	58024400 	.word	0x58024400
 8003ab8:	58000400 	.word	0x58000400
 8003abc:	58020000 	.word	0x58020000
 8003ac0:	58020400 	.word	0x58020400
 8003ac4:	58020800 	.word	0x58020800
 8003ac8:	58020c00 	.word	0x58020c00
 8003acc:	58021000 	.word	0x58021000
 8003ad0:	58021400 	.word	0x58021400
 8003ad4:	58021800 	.word	0x58021800
 8003ad8:	58021c00 	.word	0x58021c00
 8003adc:	58022000 	.word	0x58022000
 8003ae0:	58022400 	.word	0x58022400
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	69fa      	ldr	r2, [r7, #28]
 8003ae8:	f002 0203 	and.w	r2, r2, #3
 8003aec:	0092      	lsls	r2, r2, #2
 8003aee:	4093      	lsls	r3, r2
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003af6:	4938      	ldr	r1, [pc, #224]	; (8003bd8 <HAL_GPIO_Init+0x35c>)
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	089b      	lsrs	r3, r3, #2
 8003afc:	3302      	adds	r3, #2
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	4013      	ands	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	43db      	mvns	r3, r3
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	43db      	mvns	r3, r3
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	4013      	ands	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003b7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	43db      	mvns	r3, r3
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	4013      	ands	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d003      	beq.n	8003bac <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003bac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f47f ae63 	bne.w	8003890 <HAL_GPIO_Init+0x14>
  }
}
 8003bca:	bf00      	nop
 8003bcc:	3724      	adds	r7, #36	; 0x24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	58000400 	.word	0x58000400

08003bdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	460b      	mov	r3, r1
 8003be6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	887b      	ldrh	r3, [r7, #2]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d002      	beq.n	8003bfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	73fb      	strb	r3, [r7, #15]
 8003bf8:	e001      	b.n	8003bfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3714      	adds	r7, #20
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	460b      	mov	r3, r1
 8003c16:	807b      	strh	r3, [r7, #2]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c1c:	787b      	ldrb	r3, [r7, #1]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c22:	887a      	ldrh	r2, [r7, #2]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003c28:	e003      	b.n	8003c32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003c2a:	887b      	ldrh	r3, [r7, #2]
 8003c2c:	041a      	lsls	r2, r3, #16
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	619a      	str	r2, [r3, #24]
}
 8003c32:	bf00      	nop
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
 8003c46:	460b      	mov	r3, r1
 8003c48:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	695a      	ldr	r2, [r3, #20]
 8003c4e:	887b      	ldrh	r3, [r7, #2]
 8003c50:	401a      	ands	r2, r3
 8003c52:	887b      	ldrh	r3, [r7, #2]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d104      	bne.n	8003c62 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003c58:	887b      	ldrh	r3, [r7, #2]
 8003c5a:	041a      	lsls	r2, r3, #16
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003c60:	e002      	b.n	8003c68 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003c62:	887a      	ldrh	r2, [r7, #2]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	619a      	str	r2, [r3, #24]
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c76:	b08f      	sub	sp, #60	; 0x3c
 8003c78:	af0a      	add	r7, sp, #40	; 0x28
 8003c7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e116      	b.n	8003eb4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d106      	bne.n	8003ca6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f00e f95d 	bl	8011f60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2203      	movs	r2, #3
 8003caa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d102      	bne.n	8003cc0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f007 fcd8 	bl	800b67a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	603b      	str	r3, [r7, #0]
 8003cd0:	687e      	ldr	r6, [r7, #4]
 8003cd2:	466d      	mov	r5, sp
 8003cd4:	f106 0410 	add.w	r4, r6, #16
 8003cd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ce0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ce4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ce8:	1d33      	adds	r3, r6, #4
 8003cea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cec:	6838      	ldr	r0, [r7, #0]
 8003cee:	f007 fbaf 	bl	800b450 <USB_CoreInit>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d005      	beq.n	8003d04 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e0d7      	b.n	8003eb4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2100      	movs	r1, #0
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f007 fcc6 	bl	800b69c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d10:	2300      	movs	r3, #0
 8003d12:	73fb      	strb	r3, [r7, #15]
 8003d14:	e04a      	b.n	8003dac <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d16:	7bfa      	ldrb	r2, [r7, #15]
 8003d18:	6879      	ldr	r1, [r7, #4]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	1a9b      	subs	r3, r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	440b      	add	r3, r1
 8003d24:	333d      	adds	r3, #61	; 0x3d
 8003d26:	2201      	movs	r2, #1
 8003d28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d2a:	7bfa      	ldrb	r2, [r7, #15]
 8003d2c:	6879      	ldr	r1, [r7, #4]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	1a9b      	subs	r3, r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	440b      	add	r3, r1
 8003d38:	333c      	adds	r3, #60	; 0x3c
 8003d3a:	7bfa      	ldrb	r2, [r7, #15]
 8003d3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003d3e:	7bfa      	ldrb	r2, [r7, #15]
 8003d40:	7bfb      	ldrb	r3, [r7, #15]
 8003d42:	b298      	uxth	r0, r3
 8003d44:	6879      	ldr	r1, [r7, #4]
 8003d46:	4613      	mov	r3, r2
 8003d48:	00db      	lsls	r3, r3, #3
 8003d4a:	1a9b      	subs	r3, r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	440b      	add	r3, r1
 8003d50:	3342      	adds	r3, #66	; 0x42
 8003d52:	4602      	mov	r2, r0
 8003d54:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d56:	7bfa      	ldrb	r2, [r7, #15]
 8003d58:	6879      	ldr	r1, [r7, #4]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	1a9b      	subs	r3, r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	440b      	add	r3, r1
 8003d64:	333f      	adds	r3, #63	; 0x3f
 8003d66:	2200      	movs	r2, #0
 8003d68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d6a:	7bfa      	ldrb	r2, [r7, #15]
 8003d6c:	6879      	ldr	r1, [r7, #4]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	1a9b      	subs	r3, r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	440b      	add	r3, r1
 8003d78:	3344      	adds	r3, #68	; 0x44
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d7e:	7bfa      	ldrb	r2, [r7, #15]
 8003d80:	6879      	ldr	r1, [r7, #4]
 8003d82:	4613      	mov	r3, r2
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	1a9b      	subs	r3, r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	440b      	add	r3, r1
 8003d8c:	3348      	adds	r3, #72	; 0x48
 8003d8e:	2200      	movs	r2, #0
 8003d90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d92:	7bfa      	ldrb	r2, [r7, #15]
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	4613      	mov	r3, r2
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	1a9b      	subs	r3, r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	440b      	add	r3, r1
 8003da0:	3350      	adds	r3, #80	; 0x50
 8003da2:	2200      	movs	r2, #0
 8003da4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003da6:	7bfb      	ldrb	r3, [r7, #15]
 8003da8:	3301      	adds	r3, #1
 8003daa:	73fb      	strb	r3, [r7, #15]
 8003dac:	7bfa      	ldrb	r2, [r7, #15]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d3af      	bcc.n	8003d16 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003db6:	2300      	movs	r3, #0
 8003db8:	73fb      	strb	r3, [r7, #15]
 8003dba:	e044      	b.n	8003e46 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003dbc:	7bfa      	ldrb	r2, [r7, #15]
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	1a9b      	subs	r3, r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	440b      	add	r3, r1
 8003dca:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003dce:	2200      	movs	r2, #0
 8003dd0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003dd2:	7bfa      	ldrb	r2, [r7, #15]
 8003dd4:	6879      	ldr	r1, [r7, #4]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	1a9b      	subs	r3, r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	440b      	add	r3, r1
 8003de0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003de4:	7bfa      	ldrb	r2, [r7, #15]
 8003de6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003de8:	7bfa      	ldrb	r2, [r7, #15]
 8003dea:	6879      	ldr	r1, [r7, #4]
 8003dec:	4613      	mov	r3, r2
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	1a9b      	subs	r3, r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	440b      	add	r3, r1
 8003df6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003dfe:	7bfa      	ldrb	r2, [r7, #15]
 8003e00:	6879      	ldr	r1, [r7, #4]
 8003e02:	4613      	mov	r3, r2
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	1a9b      	subs	r3, r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	440b      	add	r3, r1
 8003e0c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e14:	7bfa      	ldrb	r2, [r7, #15]
 8003e16:	6879      	ldr	r1, [r7, #4]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	1a9b      	subs	r3, r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	440b      	add	r3, r1
 8003e22:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003e26:	2200      	movs	r2, #0
 8003e28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e2a:	7bfa      	ldrb	r2, [r7, #15]
 8003e2c:	6879      	ldr	r1, [r7, #4]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	00db      	lsls	r3, r3, #3
 8003e32:	1a9b      	subs	r3, r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	440b      	add	r3, r1
 8003e38:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e40:	7bfb      	ldrb	r3, [r7, #15]
 8003e42:	3301      	adds	r3, #1
 8003e44:	73fb      	strb	r3, [r7, #15]
 8003e46:	7bfa      	ldrb	r2, [r7, #15]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d3b5      	bcc.n	8003dbc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	603b      	str	r3, [r7, #0]
 8003e56:	687e      	ldr	r6, [r7, #4]
 8003e58:	466d      	mov	r5, sp
 8003e5a:	f106 0410 	add.w	r4, r6, #16
 8003e5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e6a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e6e:	1d33      	adds	r3, r6, #4
 8003e70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e72:	6838      	ldr	r0, [r7, #0]
 8003e74:	f007 fc3c 	bl	800b6f0 <USB_DevInit>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d005      	beq.n	8003e8a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2202      	movs	r2, #2
 8003e82:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e014      	b.n	8003eb4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d102      	bne.n	8003ea8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f001 f8be 	bl	8005024 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f008 fc7b 	bl	800c7a8 <USB_DevDisconnect>

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ebc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d101      	bne.n	8003ed8 <HAL_PCD_Start+0x1c>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	e020      	b.n	8003f1a <HAL_PCD_Start+0x5e>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d109      	bne.n	8003efc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d005      	beq.n	8003efc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f008 fc39 	bl	800c778 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f007 fba4 	bl	800b658 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003f22:	b590      	push	{r4, r7, lr}
 8003f24:	b08d      	sub	sp, #52	; 0x34
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f008 fce0 	bl	800c8fe <USB_GetMode>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f040 83ca 	bne.w	80046da <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f008 fc44 	bl	800c7d8 <USB_ReadInterrupts>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 83c0 	beq.w	80046d8 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f008 fc3b 	bl	800c7d8 <USB_ReadInterrupts>
 8003f62:	4603      	mov	r3, r0
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d107      	bne.n	8003f7c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695a      	ldr	r2, [r3, #20]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f002 0202 	and.w	r2, r2, #2
 8003f7a:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f008 fc29 	bl	800c7d8 <USB_ReadInterrupts>
 8003f86:	4603      	mov	r3, r0
 8003f88:	f003 0310 	and.w	r3, r3, #16
 8003f8c:	2b10      	cmp	r3, #16
 8003f8e:	d161      	bne.n	8004054 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699a      	ldr	r2, [r3, #24]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 0210 	bic.w	r2, r2, #16
 8003f9e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	f003 020f 	and.w	r2, r3, #15
 8003fac:	4613      	mov	r3, r2
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	1a9b      	subs	r3, r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	4413      	add	r3, r2
 8003fbc:	3304      	adds	r3, #4
 8003fbe:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	0c5b      	lsrs	r3, r3, #17
 8003fc4:	f003 030f 	and.w	r3, r3, #15
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d124      	bne.n	8004016 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d035      	beq.n	8004044 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	091b      	lsrs	r3, r3, #4
 8003fe0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003fe2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	461a      	mov	r2, r3
 8003fea:	6a38      	ldr	r0, [r7, #32]
 8003fec:	f008 faa1 	bl	800c532 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	68da      	ldr	r2, [r3, #12]
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	091b      	lsrs	r3, r3, #4
 8003ff8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ffc:	441a      	add	r2, r3
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	699a      	ldr	r2, [r3, #24]
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	091b      	lsrs	r3, r3, #4
 800400a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800400e:	441a      	add	r2, r3
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	619a      	str	r2, [r3, #24]
 8004014:	e016      	b.n	8004044 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	0c5b      	lsrs	r3, r3, #17
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	2b06      	cmp	r3, #6
 8004020:	d110      	bne.n	8004044 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004028:	2208      	movs	r2, #8
 800402a:	4619      	mov	r1, r3
 800402c:	6a38      	ldr	r0, [r7, #32]
 800402e:	f008 fa80 	bl	800c532 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	699a      	ldr	r2, [r3, #24]
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	091b      	lsrs	r3, r3, #4
 800403a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800403e:	441a      	add	r2, r3
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	699a      	ldr	r2, [r3, #24]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0210 	orr.w	r2, r2, #16
 8004052:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f008 fbbd 	bl	800c7d8 <USB_ReadInterrupts>
 800405e:	4603      	mov	r3, r0
 8004060:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004064:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004068:	d16e      	bne.n	8004148 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800406a:	2300      	movs	r3, #0
 800406c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f008 fbc3 	bl	800c7fe <USB_ReadDevAllOutEpInterrupt>
 8004078:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800407a:	e062      	b.n	8004142 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800407c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d057      	beq.n	8004136 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800408c:	b2d2      	uxtb	r2, r2
 800408e:	4611      	mov	r1, r2
 8004090:	4618      	mov	r0, r3
 8004092:	f008 fbe8 	bl	800c866 <USB_ReadDevOutEPInterrupt>
 8004096:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00c      	beq.n	80040bc <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	015a      	lsls	r2, r3, #5
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	4413      	add	r3, r2
 80040aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ae:	461a      	mov	r2, r3
 80040b0:	2301      	movs	r3, #1
 80040b2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80040b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 fe0a 	bl	8004cd0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00c      	beq.n	80040e0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c8:	015a      	lsls	r2, r3, #5
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d2:	461a      	mov	r2, r3
 80040d4:	2308      	movs	r3, #8
 80040d6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80040d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 ff04 	bl	8004ee8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	f003 0310 	and.w	r3, r3, #16
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d008      	beq.n	80040fc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80040ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ec:	015a      	lsls	r2, r3, #5
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	4413      	add	r3, r2
 80040f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f6:	461a      	mov	r2, r3
 80040f8:	2310      	movs	r3, #16
 80040fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	f003 0320 	and.w	r3, r3, #32
 8004102:	2b00      	cmp	r3, #0
 8004104:	d008      	beq.n	8004118 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	015a      	lsls	r2, r3, #5
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	4413      	add	r3, r2
 800410e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004112:	461a      	mov	r2, r3
 8004114:	2320      	movs	r3, #32
 8004116:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d009      	beq.n	8004136 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004124:	015a      	lsls	r2, r3, #5
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	4413      	add	r3, r2
 800412a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800412e:	461a      	mov	r2, r3
 8004130:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004134:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	3301      	adds	r3, #1
 800413a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800413c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413e:	085b      	lsrs	r3, r3, #1
 8004140:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004144:	2b00      	cmp	r3, #0
 8004146:	d199      	bne.n	800407c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4618      	mov	r0, r3
 800414e:	f008 fb43 	bl	800c7d8 <USB_ReadInterrupts>
 8004152:	4603      	mov	r3, r0
 8004154:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004158:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800415c:	f040 80c0 	bne.w	80042e0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4618      	mov	r0, r3
 8004166:	f008 fb64 	bl	800c832 <USB_ReadDevAllInEpInterrupt>
 800416a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800416c:	2300      	movs	r3, #0
 800416e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004170:	e0b2      	b.n	80042d8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 80a7 	beq.w	80042cc <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004184:	b2d2      	uxtb	r2, r2
 8004186:	4611      	mov	r1, r2
 8004188:	4618      	mov	r0, r3
 800418a:	f008 fb8a 	bl	800c8a2 <USB_ReadDevInEPInterrupt>
 800418e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b00      	cmp	r3, #0
 8004198:	d057      	beq.n	800424a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	f003 030f 	and.w	r3, r3, #15
 80041a0:	2201      	movs	r2, #1
 80041a2:	fa02 f303 	lsl.w	r3, r2, r3
 80041a6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	43db      	mvns	r3, r3
 80041b4:	69f9      	ldr	r1, [r7, #28]
 80041b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041ba:	4013      	ands	r3, r2
 80041bc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	015a      	lsls	r2, r3, #5
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	4413      	add	r3, r2
 80041c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ca:	461a      	mov	r2, r3
 80041cc:	2301      	movs	r3, #1
 80041ce:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d132      	bne.n	800423e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041dc:	4613      	mov	r3, r2
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	1a9b      	subs	r3, r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	3348      	adds	r3, #72	; 0x48
 80041e8:	6819      	ldr	r1, [r3, #0]
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ee:	4613      	mov	r3, r2
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	1a9b      	subs	r3, r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4403      	add	r3, r0
 80041f8:	3344      	adds	r3, #68	; 0x44
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4419      	add	r1, r3
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004202:	4613      	mov	r3, r2
 8004204:	00db      	lsls	r3, r3, #3
 8004206:	1a9b      	subs	r3, r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	4403      	add	r3, r0
 800420c:	3348      	adds	r3, #72	; 0x48
 800420e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004212:	2b00      	cmp	r3, #0
 8004214:	d113      	bne.n	800423e <HAL_PCD_IRQHandler+0x31c>
 8004216:	6879      	ldr	r1, [r7, #4]
 8004218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800421a:	4613      	mov	r3, r2
 800421c:	00db      	lsls	r3, r3, #3
 800421e:	1a9b      	subs	r3, r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	440b      	add	r3, r1
 8004224:	3350      	adds	r3, #80	; 0x50
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d108      	bne.n	800423e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6818      	ldr	r0, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004236:	461a      	mov	r2, r3
 8004238:	2101      	movs	r1, #1
 800423a:	f008 fb93 	bl	800c964 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004240:	b2db      	uxtb	r3, r3
 8004242:	4619      	mov	r1, r3
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f00d ff0a 	bl	801205e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	f003 0308 	and.w	r3, r3, #8
 8004250:	2b00      	cmp	r3, #0
 8004252:	d008      	beq.n	8004266 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	4413      	add	r3, r2
 800425c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004260:	461a      	mov	r2, r3
 8004262:	2308      	movs	r3, #8
 8004264:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	f003 0310 	and.w	r3, r3, #16
 800426c:	2b00      	cmp	r3, #0
 800426e:	d008      	beq.n	8004282 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004272:	015a      	lsls	r2, r3, #5
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	4413      	add	r3, r2
 8004278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800427c:	461a      	mov	r2, r3
 800427e:	2310      	movs	r3, #16
 8004280:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004288:	2b00      	cmp	r3, #0
 800428a:	d008      	beq.n	800429e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428e:	015a      	lsls	r2, r3, #5
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	4413      	add	r3, r2
 8004294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004298:	461a      	mov	r2, r3
 800429a:	2340      	movs	r3, #64	; 0x40
 800429c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d008      	beq.n	80042ba <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	015a      	lsls	r2, r3, #5
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b4:	461a      	mov	r2, r3
 80042b6:	2302      	movs	r3, #2
 80042b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d003      	beq.n	80042cc <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80042c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 fc75 	bl	8004bb6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80042cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ce:	3301      	adds	r3, #1
 80042d0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80042d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d4:	085b      	lsrs	r3, r3, #1
 80042d6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80042d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f47f af49 	bne.w	8004172 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f008 fa77 	bl	800c7d8 <USB_ReadInterrupts>
 80042ea:	4603      	mov	r3, r0
 80042ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042f4:	d122      	bne.n	800433c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	69fa      	ldr	r2, [r7, #28]
 8004300:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004304:	f023 0301 	bic.w	r3, r3, #1
 8004308:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004310:	2b01      	cmp	r3, #1
 8004312:	d108      	bne.n	8004326 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800431c:	2100      	movs	r1, #0
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 fea4 	bl	800506c <HAL_PCDEx_LPM_Callback>
 8004324:	e002      	b.n	800432c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f00d ff10 	bl	801214c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	695a      	ldr	r2, [r3, #20]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800433a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4618      	mov	r0, r3
 8004342:	f008 fa49 	bl	800c7d8 <USB_ReadInterrupts>
 8004346:	4603      	mov	r3, r0
 8004348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800434c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004350:	d112      	bne.n	8004378 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b01      	cmp	r3, #1
 8004360:	d102      	bne.n	8004368 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f00d fecc 	bl	8012100 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	695a      	ldr	r2, [r3, #20]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004376:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4618      	mov	r0, r3
 800437e:	f008 fa2b 	bl	800c7d8 <USB_ReadInterrupts>
 8004382:	4603      	mov	r3, r0
 8004384:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004388:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800438c:	d121      	bne.n	80043d2 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695a      	ldr	r2, [r3, #20]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800439c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d111      	bne.n	80043cc <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b6:	089b      	lsrs	r3, r3, #2
 80043b8:	f003 020f 	and.w	r2, r3, #15
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80043c2:	2101      	movs	r1, #1
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 fe51 	bl	800506c <HAL_PCDEx_LPM_Callback>
 80043ca:	e002      	b.n	80043d2 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f00d fe97 	bl	8012100 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f008 f9fe 	bl	800c7d8 <USB_ReadInterrupts>
 80043dc:	4603      	mov	r3, r0
 80043de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043e6:	f040 80c7 	bne.w	8004578 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	69fa      	ldr	r2, [r7, #28]
 80043f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043f8:	f023 0301 	bic.w	r3, r3, #1
 80043fc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2110      	movs	r1, #16
 8004404:	4618      	mov	r0, r3
 8004406:	f007 fad1 	bl	800b9ac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800440a:	2300      	movs	r3, #0
 800440c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800440e:	e056      	b.n	80044be <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	4413      	add	r3, r2
 8004418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800441c:	461a      	mov	r2, r3
 800441e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004422:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	4413      	add	r3, r2
 800442c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004434:	0151      	lsls	r1, r2, #5
 8004436:	69fa      	ldr	r2, [r7, #28]
 8004438:	440a      	add	r2, r1
 800443a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800443e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004442:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004446:	015a      	lsls	r2, r3, #5
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	4413      	add	r3, r2
 800444c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004454:	0151      	lsls	r1, r2, #5
 8004456:	69fa      	ldr	r2, [r7, #28]
 8004458:	440a      	add	r2, r1
 800445a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800445e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004462:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004466:	015a      	lsls	r2, r3, #5
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	4413      	add	r3, r2
 800446c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004470:	461a      	mov	r2, r3
 8004472:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004476:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447a:	015a      	lsls	r2, r3, #5
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	4413      	add	r3, r2
 8004480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004488:	0151      	lsls	r1, r2, #5
 800448a:	69fa      	ldr	r2, [r7, #28]
 800448c:	440a      	add	r2, r1
 800448e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004492:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004496:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449a:	015a      	lsls	r2, r3, #5
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	4413      	add	r3, r2
 80044a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044a8:	0151      	lsls	r1, r2, #5
 80044aa:	69fa      	ldr	r2, [r7, #28]
 80044ac:	440a      	add	r2, r1
 80044ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044b6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ba:	3301      	adds	r3, #1
 80044bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d3a3      	bcc.n	8004410 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ce:	69db      	ldr	r3, [r3, #28]
 80044d0:	69fa      	ldr	r2, [r7, #28]
 80044d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044d6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80044da:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d016      	beq.n	8004512 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ee:	69fa      	ldr	r2, [r7, #28]
 80044f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044f4:	f043 030b 	orr.w	r3, r3, #11
 80044f8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004504:	69fa      	ldr	r2, [r7, #28]
 8004506:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800450a:	f043 030b 	orr.w	r3, r3, #11
 800450e:	6453      	str	r3, [r2, #68]	; 0x44
 8004510:	e015      	b.n	800453e <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004518:	695a      	ldr	r2, [r3, #20]
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004520:	4619      	mov	r1, r3
 8004522:	f242 032b 	movw	r3, #8235	; 0x202b
 8004526:	4313      	orrs	r3, r2
 8004528:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	69fa      	ldr	r2, [r7, #28]
 8004534:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004538:	f043 030b 	orr.w	r3, r3, #11
 800453c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	69fa      	ldr	r2, [r7, #28]
 8004548:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800454c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004550:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6818      	ldr	r0, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004562:	461a      	mov	r2, r3
 8004564:	f008 f9fe 	bl	800c964 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695a      	ldr	r2, [r3, #20]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004576:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4618      	mov	r0, r3
 800457e:	f008 f92b 	bl	800c7d8 <USB_ReadInterrupts>
 8004582:	4603      	mov	r3, r0
 8004584:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004588:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800458c:	d124      	bne.n	80045d8 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4618      	mov	r0, r3
 8004594:	f008 f9c2 	bl	800c91c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4618      	mov	r0, r3
 800459e:	f007 fa66 	bl	800ba6e <USB_GetDevSpeed>
 80045a2:	4603      	mov	r3, r0
 80045a4:	461a      	mov	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681c      	ldr	r4, [r3, #0]
 80045ae:	f001 fceb 	bl	8005f88 <HAL_RCC_GetHCLKFreq>
 80045b2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	461a      	mov	r2, r3
 80045bc:	4620      	mov	r0, r4
 80045be:	f006 ffa9 	bl	800b514 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f00d fd73 	bl	80120ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	695a      	ldr	r2, [r3, #20]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80045d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4618      	mov	r0, r3
 80045de:	f008 f8fb 	bl	800c7d8 <USB_ReadInterrupts>
 80045e2:	4603      	mov	r3, r0
 80045e4:	f003 0308 	and.w	r3, r3, #8
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	d10a      	bne.n	8004602 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f00d fd50 	bl	8012092 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	695a      	ldr	r2, [r3, #20]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f002 0208 	and.w	r2, r2, #8
 8004600:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4618      	mov	r0, r3
 8004608:	f008 f8e6 	bl	800c7d8 <USB_ReadInterrupts>
 800460c:	4603      	mov	r3, r0
 800460e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004612:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004616:	d10f      	bne.n	8004638 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461e:	b2db      	uxtb	r3, r3
 8004620:	4619      	mov	r1, r3
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f00d fdb2 	bl	801218c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	695a      	ldr	r2, [r3, #20]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004636:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4618      	mov	r0, r3
 800463e:	f008 f8cb 	bl	800c7d8 <USB_ReadInterrupts>
 8004642:	4603      	mov	r3, r0
 8004644:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004648:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800464c:	d10f      	bne.n	800466e <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800464e:	2300      	movs	r3, #0
 8004650:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	b2db      	uxtb	r3, r3
 8004656:	4619      	mov	r1, r3
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f00d fd85 	bl	8012168 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695a      	ldr	r2, [r3, #20]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800466c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4618      	mov	r0, r3
 8004674:	f008 f8b0 	bl	800c7d8 <USB_ReadInterrupts>
 8004678:	4603      	mov	r3, r0
 800467a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800467e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004682:	d10a      	bne.n	800469a <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f00d fd93 	bl	80121b0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	695a      	ldr	r2, [r3, #20]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004698:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4618      	mov	r0, r3
 80046a0:	f008 f89a 	bl	800c7d8 <USB_ReadInterrupts>
 80046a4:	4603      	mov	r3, r0
 80046a6:	f003 0304 	and.w	r3, r3, #4
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	d115      	bne.n	80046da <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d002      	beq.n	80046c6 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f00d fd83 	bl	80121cc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6859      	ldr	r1, [r3, #4]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	605a      	str	r2, [r3, #4]
 80046d6:	e000      	b.n	80046da <HAL_PCD_IRQHandler+0x7b8>
      return;
 80046d8:	bf00      	nop
    }
  }
}
 80046da:	3734      	adds	r7, #52	; 0x34
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd90      	pop	{r4, r7, pc}

080046e0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	460b      	mov	r3, r1
 80046ea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d101      	bne.n	80046fa <HAL_PCD_SetAddress+0x1a>
 80046f6:	2302      	movs	r3, #2
 80046f8:	e013      	b.n	8004722 <HAL_PCD_SetAddress+0x42>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	78fa      	ldrb	r2, [r7, #3]
 8004706:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	78fa      	ldrb	r2, [r7, #3]
 8004710:	4611      	mov	r1, r2
 8004712:	4618      	mov	r0, r3
 8004714:	f008 f80a 	bl	800c72c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b084      	sub	sp, #16
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
 8004732:	4608      	mov	r0, r1
 8004734:	4611      	mov	r1, r2
 8004736:	461a      	mov	r2, r3
 8004738:	4603      	mov	r3, r0
 800473a:	70fb      	strb	r3, [r7, #3]
 800473c:	460b      	mov	r3, r1
 800473e:	803b      	strh	r3, [r7, #0]
 8004740:	4613      	mov	r3, r2
 8004742:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004744:	2300      	movs	r3, #0
 8004746:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004748:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800474c:	2b00      	cmp	r3, #0
 800474e:	da0f      	bge.n	8004770 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004750:	78fb      	ldrb	r3, [r7, #3]
 8004752:	f003 020f 	and.w	r2, r3, #15
 8004756:	4613      	mov	r3, r2
 8004758:	00db      	lsls	r3, r3, #3
 800475a:	1a9b      	subs	r3, r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	3338      	adds	r3, #56	; 0x38
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	4413      	add	r3, r2
 8004764:	3304      	adds	r3, #4
 8004766:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2201      	movs	r2, #1
 800476c:	705a      	strb	r2, [r3, #1]
 800476e:	e00f      	b.n	8004790 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004770:	78fb      	ldrb	r3, [r7, #3]
 8004772:	f003 020f 	and.w	r2, r3, #15
 8004776:	4613      	mov	r3, r2
 8004778:	00db      	lsls	r3, r3, #3
 800477a:	1a9b      	subs	r3, r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	4413      	add	r3, r2
 8004786:	3304      	adds	r3, #4
 8004788:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004790:	78fb      	ldrb	r3, [r7, #3]
 8004792:	f003 030f 	and.w	r3, r3, #15
 8004796:	b2da      	uxtb	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800479c:	883a      	ldrh	r2, [r7, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	78ba      	ldrb	r2, [r7, #2]
 80047a6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	785b      	ldrb	r3, [r3, #1]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d004      	beq.n	80047ba <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80047ba:	78bb      	ldrb	r3, [r7, #2]
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d102      	bne.n	80047c6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d101      	bne.n	80047d4 <HAL_PCD_EP_Open+0xaa>
 80047d0:	2302      	movs	r3, #2
 80047d2:	e00e      	b.n	80047f2 <HAL_PCD_EP_Open+0xc8>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68f9      	ldr	r1, [r7, #12]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f007 f968 	bl	800bab8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80047f0:	7afb      	ldrb	r3, [r7, #11]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b084      	sub	sp, #16
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
 8004802:	460b      	mov	r3, r1
 8004804:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004806:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800480a:	2b00      	cmp	r3, #0
 800480c:	da0f      	bge.n	800482e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800480e:	78fb      	ldrb	r3, [r7, #3]
 8004810:	f003 020f 	and.w	r2, r3, #15
 8004814:	4613      	mov	r3, r2
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	1a9b      	subs	r3, r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	3338      	adds	r3, #56	; 0x38
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	4413      	add	r3, r2
 8004822:	3304      	adds	r3, #4
 8004824:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2201      	movs	r2, #1
 800482a:	705a      	strb	r2, [r3, #1]
 800482c:	e00f      	b.n	800484e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800482e:	78fb      	ldrb	r3, [r7, #3]
 8004830:	f003 020f 	and.w	r2, r3, #15
 8004834:	4613      	mov	r3, r2
 8004836:	00db      	lsls	r3, r3, #3
 8004838:	1a9b      	subs	r3, r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	4413      	add	r3, r2
 8004844:	3304      	adds	r3, #4
 8004846:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800484e:	78fb      	ldrb	r3, [r7, #3]
 8004850:	f003 030f 	and.w	r3, r3, #15
 8004854:	b2da      	uxtb	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004860:	2b01      	cmp	r3, #1
 8004862:	d101      	bne.n	8004868 <HAL_PCD_EP_Close+0x6e>
 8004864:	2302      	movs	r3, #2
 8004866:	e00e      	b.n	8004886 <HAL_PCD_EP_Close+0x8c>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68f9      	ldr	r1, [r7, #12]
 8004876:	4618      	mov	r0, r3
 8004878:	f007 f9a6 	bl	800bbc8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b086      	sub	sp, #24
 8004892:	af00      	add	r7, sp, #0
 8004894:	60f8      	str	r0, [r7, #12]
 8004896:	607a      	str	r2, [r7, #4]
 8004898:	603b      	str	r3, [r7, #0]
 800489a:	460b      	mov	r3, r1
 800489c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800489e:	7afb      	ldrb	r3, [r7, #11]
 80048a0:	f003 020f 	and.w	r2, r3, #15
 80048a4:	4613      	mov	r3, r2
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	1a9b      	subs	r3, r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	4413      	add	r3, r2
 80048b4:	3304      	adds	r3, #4
 80048b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	2200      	movs	r2, #0
 80048c8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	2200      	movs	r2, #0
 80048ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048d0:	7afb      	ldrb	r3, [r7, #11]
 80048d2:	f003 030f 	and.w	r3, r3, #15
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d102      	bne.n	80048ea <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80048ea:	7afb      	ldrb	r3, [r7, #11]
 80048ec:	f003 030f 	and.w	r3, r3, #15
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d109      	bne.n	8004908 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6818      	ldr	r0, [r3, #0]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	461a      	mov	r2, r3
 8004900:	6979      	ldr	r1, [r7, #20]
 8004902:	f007 fc89 	bl	800c218 <USB_EP0StartXfer>
 8004906:	e008      	b.n	800491a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6818      	ldr	r0, [r3, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	b2db      	uxtb	r3, r3
 8004912:	461a      	mov	r2, r3
 8004914:	6979      	ldr	r1, [r7, #20]
 8004916:	f007 fa33 	bl	800bd80 <USB_EPStartXfer>
  }

  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3718      	adds	r7, #24
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	460b      	mov	r3, r1
 800492e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004930:	78fb      	ldrb	r3, [r7, #3]
 8004932:	f003 020f 	and.w	r2, r3, #15
 8004936:	6879      	ldr	r1, [r7, #4]
 8004938:	4613      	mov	r3, r2
 800493a:	00db      	lsls	r3, r3, #3
 800493c:	1a9b      	subs	r3, r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	440b      	add	r3, r1
 8004942:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004946:	681b      	ldr	r3, [r3, #0]
}
 8004948:	4618      	mov	r0, r3
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	607a      	str	r2, [r7, #4]
 800495e:	603b      	str	r3, [r7, #0]
 8004960:	460b      	mov	r3, r1
 8004962:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004964:	7afb      	ldrb	r3, [r7, #11]
 8004966:	f003 020f 	and.w	r2, r3, #15
 800496a:	4613      	mov	r3, r2
 800496c:	00db      	lsls	r3, r3, #3
 800496e:	1a9b      	subs	r3, r3, r2
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	3338      	adds	r3, #56	; 0x38
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	4413      	add	r3, r2
 8004978:	3304      	adds	r3, #4
 800497a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	683a      	ldr	r2, [r7, #0]
 8004986:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	2200      	movs	r2, #0
 800498c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	2201      	movs	r2, #1
 8004992:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004994:	7afb      	ldrb	r3, [r7, #11]
 8004996:	f003 030f 	and.w	r3, r3, #15
 800499a:	b2da      	uxtb	r2, r3
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d102      	bne.n	80049ae <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80049ae:	7afb      	ldrb	r3, [r7, #11]
 80049b0:	f003 030f 	and.w	r3, r3, #15
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d109      	bne.n	80049cc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6818      	ldr	r0, [r3, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	461a      	mov	r2, r3
 80049c4:	6979      	ldr	r1, [r7, #20]
 80049c6:	f007 fc27 	bl	800c218 <USB_EP0StartXfer>
 80049ca:	e008      	b.n	80049de <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6818      	ldr	r0, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	461a      	mov	r2, r3
 80049d8:	6979      	ldr	r1, [r7, #20]
 80049da:	f007 f9d1 	bl	800bd80 <USB_EPStartXfer>
  }

  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3718      	adds	r7, #24
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	460b      	mov	r3, r1
 80049f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80049f4:	78fb      	ldrb	r3, [r7, #3]
 80049f6:	f003 020f 	and.w	r2, r3, #15
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d901      	bls.n	8004a06 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e050      	b.n	8004aa8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	da0f      	bge.n	8004a2e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a0e:	78fb      	ldrb	r3, [r7, #3]
 8004a10:	f003 020f 	and.w	r2, r3, #15
 8004a14:	4613      	mov	r3, r2
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	1a9b      	subs	r3, r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	3338      	adds	r3, #56	; 0x38
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	4413      	add	r3, r2
 8004a22:	3304      	adds	r3, #4
 8004a24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	705a      	strb	r2, [r3, #1]
 8004a2c:	e00d      	b.n	8004a4a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004a2e:	78fa      	ldrb	r2, [r7, #3]
 8004a30:	4613      	mov	r3, r2
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	1a9b      	subs	r3, r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	4413      	add	r3, r2
 8004a40:	3304      	adds	r3, #4
 8004a42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a50:	78fb      	ldrb	r3, [r7, #3]
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d101      	bne.n	8004a6a <HAL_PCD_EP_SetStall+0x82>
 8004a66:	2302      	movs	r3, #2
 8004a68:	e01e      	b.n	8004aa8 <HAL_PCD_EP_SetStall+0xc0>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68f9      	ldr	r1, [r7, #12]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f007 fd83 	bl	800c584 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a7e:	78fb      	ldrb	r3, [r7, #3]
 8004a80:	f003 030f 	and.w	r3, r3, #15
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10a      	bne.n	8004a9e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6818      	ldr	r0, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	b2d9      	uxtb	r1, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004a98:	461a      	mov	r2, r3
 8004a9a:	f007 ff63 	bl	800c964 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004abc:	78fb      	ldrb	r3, [r7, #3]
 8004abe:	f003 020f 	and.w	r2, r3, #15
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d901      	bls.n	8004ace <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e042      	b.n	8004b54 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ace:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	da0f      	bge.n	8004af6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ad6:	78fb      	ldrb	r3, [r7, #3]
 8004ad8:	f003 020f 	and.w	r2, r3, #15
 8004adc:	4613      	mov	r3, r2
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	1a9b      	subs	r3, r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	3338      	adds	r3, #56	; 0x38
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	4413      	add	r3, r2
 8004aea:	3304      	adds	r3, #4
 8004aec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2201      	movs	r2, #1
 8004af2:	705a      	strb	r2, [r3, #1]
 8004af4:	e00f      	b.n	8004b16 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004af6:	78fb      	ldrb	r3, [r7, #3]
 8004af8:	f003 020f 	and.w	r2, r3, #15
 8004afc:	4613      	mov	r3, r2
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	1a9b      	subs	r3, r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b1c:	78fb      	ldrb	r3, [r7, #3]
 8004b1e:	f003 030f 	and.w	r3, r3, #15
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d101      	bne.n	8004b36 <HAL_PCD_EP_ClrStall+0x86>
 8004b32:	2302      	movs	r3, #2
 8004b34:	e00e      	b.n	8004b54 <HAL_PCD_EP_ClrStall+0xa4>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68f9      	ldr	r1, [r7, #12]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f007 fd8b 	bl	800c660 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3710      	adds	r7, #16
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	460b      	mov	r3, r1
 8004b66:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d101      	bne.n	8004b76 <HAL_PCD_EP_Flush+0x1a>
 8004b72:	2302      	movs	r3, #2
 8004b74:	e01b      	b.n	8004bae <HAL_PCD_EP_Flush+0x52>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8004b7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	da09      	bge.n	8004b9a <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	78fb      	ldrb	r3, [r7, #3]
 8004b8c:	f003 030f 	and.w	r3, r3, #15
 8004b90:	4619      	mov	r1, r3
 8004b92:	4610      	mov	r0, r2
 8004b94:	f006 ff0a 	bl	800b9ac <USB_FlushTxFifo>
 8004b98:	e004      	b.n	8004ba4 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f006 ff2a 	bl	800b9f8 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b08a      	sub	sp, #40	; 0x28
 8004bba:	af02      	add	r7, sp, #8
 8004bbc:	6078      	str	r0, [r7, #4]
 8004bbe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	00db      	lsls	r3, r3, #3
 8004bd0:	1a9b      	subs	r3, r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	3338      	adds	r3, #56	; 0x38
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	4413      	add	r3, r2
 8004bda:	3304      	adds	r3, #4
 8004bdc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	699a      	ldr	r2, [r3, #24]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d901      	bls.n	8004bee <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e06c      	b.n	8004cc8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	695a      	ldr	r2, [r3, #20]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	699b      	ldr	r3, [r3, #24]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	69fa      	ldr	r2, [r7, #28]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d902      	bls.n	8004c0a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	3303      	adds	r3, #3
 8004c0e:	089b      	lsrs	r3, r3, #2
 8004c10:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c12:	e02b      	b.n	8004c6c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	695a      	ldr	r2, [r3, #20]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	69fa      	ldr	r2, [r7, #28]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d902      	bls.n	8004c30 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	3303      	adds	r3, #3
 8004c34:	089b      	lsrs	r3, r3, #2
 8004c36:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	68d9      	ldr	r1, [r3, #12]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	b2da      	uxtb	r2, r3
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	9300      	str	r3, [sp, #0]
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	6978      	ldr	r0, [r7, #20]
 8004c50:	f007 fc3a 	bl	800c4c8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	68da      	ldr	r2, [r3, #12]
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	441a      	add	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	699a      	ldr	r2, [r3, #24]
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	441a      	add	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	015a      	lsls	r2, r3, #5
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	4413      	add	r3, r2
 8004c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	69ba      	ldr	r2, [r7, #24]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d809      	bhi.n	8004c96 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	699a      	ldr	r2, [r3, #24]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d203      	bcs.n	8004c96 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1be      	bne.n	8004c14 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	695a      	ldr	r2, [r3, #20]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d811      	bhi.n	8004cc6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	f003 030f 	and.w	r3, r3, #15
 8004ca8:	2201      	movs	r2, #1
 8004caa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cae:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	43db      	mvns	r3, r3
 8004cbc:	6939      	ldr	r1, [r7, #16]
 8004cbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3720      	adds	r7, #32
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	333c      	adds	r3, #60	; 0x3c
 8004ce8:	3304      	adds	r3, #4
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	015a      	lsls	r2, r3, #5
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	f040 80a0 	bne.w	8004e48 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	f003 0308 	and.w	r3, r3, #8
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d015      	beq.n	8004d3e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	4a72      	ldr	r2, [pc, #456]	; (8004ee0 <PCD_EP_OutXfrComplete_int+0x210>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	f240 80dd 	bls.w	8004ed6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f000 80d7 	beq.w	8004ed6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	015a      	lsls	r2, r3, #5
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	4413      	add	r3, r2
 8004d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d34:	461a      	mov	r2, r3
 8004d36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d3a:	6093      	str	r3, [r2, #8]
 8004d3c:	e0cb      	b.n	8004ed6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	f003 0320 	and.w	r3, r3, #32
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d009      	beq.n	8004d5c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d54:	461a      	mov	r2, r3
 8004d56:	2320      	movs	r3, #32
 8004d58:	6093      	str	r3, [r2, #8]
 8004d5a:	e0bc      	b.n	8004ed6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f040 80b7 	bne.w	8004ed6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4a5d      	ldr	r2, [pc, #372]	; (8004ee0 <PCD_EP_OutXfrComplete_int+0x210>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d90f      	bls.n	8004d90 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	015a      	lsls	r2, r3, #5
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	4413      	add	r3, r2
 8004d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d86:	461a      	mov	r2, r3
 8004d88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d8c:	6093      	str	r3, [r2, #8]
 8004d8e:	e0a2      	b.n	8004ed6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004d90:	6879      	ldr	r1, [r7, #4]
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	4613      	mov	r3, r2
 8004d96:	00db      	lsls	r3, r3, #3
 8004d98:	1a9b      	subs	r3, r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	440b      	add	r3, r1
 8004d9e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004da2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	0159      	lsls	r1, r3, #5
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	440b      	add	r3, r1
 8004dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004db6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	00db      	lsls	r3, r3, #3
 8004dc0:	1a9b      	subs	r3, r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4403      	add	r3, r0
 8004dc6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004dca:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004dcc:	6879      	ldr	r1, [r7, #4]
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	00db      	lsls	r3, r3, #3
 8004dd4:	1a9b      	subs	r3, r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	440b      	add	r3, r1
 8004dda:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004dde:	6819      	ldr	r1, [r3, #0]
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	4613      	mov	r3, r2
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	1a9b      	subs	r3, r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4403      	add	r3, r0
 8004dee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4419      	add	r1, r3
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	00db      	lsls	r3, r3, #3
 8004dfe:	1a9b      	subs	r3, r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	4403      	add	r3, r0
 8004e04:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004e08:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d114      	bne.n	8004e3a <PCD_EP_OutXfrComplete_int+0x16a>
 8004e10:	6879      	ldr	r1, [r7, #4]
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	4613      	mov	r3, r2
 8004e16:	00db      	lsls	r3, r3, #3
 8004e18:	1a9b      	subs	r3, r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	440b      	add	r3, r1
 8004e1e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d108      	bne.n	8004e3a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6818      	ldr	r0, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004e32:	461a      	mov	r2, r3
 8004e34:	2101      	movs	r1, #1
 8004e36:	f007 fd95 	bl	800c964 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	4619      	mov	r1, r3
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f00d f8f1 	bl	8012028 <HAL_PCD_DataOutStageCallback>
 8004e46:	e046      	b.n	8004ed6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	4a26      	ldr	r2, [pc, #152]	; (8004ee4 <PCD_EP_OutXfrComplete_int+0x214>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d124      	bne.n	8004e9a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	015a      	lsls	r2, r3, #5
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	4413      	add	r3, r2
 8004e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e66:	461a      	mov	r2, r3
 8004e68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e6c:	6093      	str	r3, [r2, #8]
 8004e6e:	e032      	b.n	8004ed6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	f003 0320 	and.w	r3, r3, #32
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d008      	beq.n	8004e8c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	015a      	lsls	r2, r3, #5
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	4413      	add	r3, r2
 8004e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e86:	461a      	mov	r2, r3
 8004e88:	2320      	movs	r3, #32
 8004e8a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	4619      	mov	r1, r3
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f00d f8c8 	bl	8012028 <HAL_PCD_DataOutStageCallback>
 8004e98:	e01d      	b.n	8004ed6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d114      	bne.n	8004eca <PCD_EP_OutXfrComplete_int+0x1fa>
 8004ea0:	6879      	ldr	r1, [r7, #4]
 8004ea2:	683a      	ldr	r2, [r7, #0]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	1a9b      	subs	r3, r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	440b      	add	r3, r1
 8004eae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d108      	bne.n	8004eca <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6818      	ldr	r0, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	f007 fd4d 	bl	800c964 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	4619      	mov	r1, r3
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f00d f8a9 	bl	8012028 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3718      	adds	r7, #24
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	4f54300a 	.word	0x4f54300a
 8004ee4:	4f54310a 	.word	0x4f54310a

08004ee8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	333c      	adds	r3, #60	; 0x3c
 8004f00:	3304      	adds	r3, #4
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	4a15      	ldr	r2, [pc, #84]	; (8004f70 <PCD_EP_OutSetupPacket_int+0x88>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d90e      	bls.n	8004f3c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d009      	beq.n	8004f3c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	015a      	lsls	r2, r3, #5
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	4413      	add	r3, r2
 8004f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f34:	461a      	mov	r2, r3
 8004f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f3a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f00d f861 	bl	8012004 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	4a0a      	ldr	r2, [pc, #40]	; (8004f70 <PCD_EP_OutSetupPacket_int+0x88>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d90c      	bls.n	8004f64 <PCD_EP_OutSetupPacket_int+0x7c>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d108      	bne.n	8004f64 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6818      	ldr	r0, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	2101      	movs	r1, #1
 8004f60:	f007 fd00 	bl	800c964 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3718      	adds	r7, #24
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	4f54300a 	.word	0x4f54300a

08004f74 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	70fb      	strb	r3, [r7, #3]
 8004f80:	4613      	mov	r3, r2
 8004f82:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004f8c:	78fb      	ldrb	r3, [r7, #3]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d107      	bne.n	8004fa2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004f92:	883b      	ldrh	r3, [r7, #0]
 8004f94:	0419      	lsls	r1, r3, #16
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	629a      	str	r2, [r3, #40]	; 0x28
 8004fa0:	e028      	b.n	8004ff4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa8:	0c1b      	lsrs	r3, r3, #16
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	4413      	add	r3, r2
 8004fae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	73fb      	strb	r3, [r7, #15]
 8004fb4:	e00d      	b.n	8004fd2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	7bfb      	ldrb	r3, [r7, #15]
 8004fbc:	3340      	adds	r3, #64	; 0x40
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	0c1b      	lsrs	r3, r3, #16
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	4413      	add	r3, r2
 8004fca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004fcc:	7bfb      	ldrb	r3, [r7, #15]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	73fb      	strb	r3, [r7, #15]
 8004fd2:	7bfa      	ldrb	r2, [r7, #15]
 8004fd4:	78fb      	ldrb	r3, [r7, #3]
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d3ec      	bcc.n	8004fb6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004fdc:	883b      	ldrh	r3, [r7, #0]
 8004fde:	0418      	lsls	r0, r3, #16
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6819      	ldr	r1, [r3, #0]
 8004fe4:	78fb      	ldrb	r3, [r7, #3]
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	4302      	orrs	r2, r0
 8004fec:	3340      	adds	r3, #64	; 0x40
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	440b      	add	r3, r1
 8004ff2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
 800500a:	460b      	mov	r3, r1
 800500c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	887a      	ldrh	r2, [r7, #2]
 8005014:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005052:	4b05      	ldr	r3, [pc, #20]	; (8005068 <HAL_PCDEx_ActivateLPM+0x44>)
 8005054:	4313      	orrs	r3, r2
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	10000003 	.word	0x10000003

0800506c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	460b      	mov	r3, r1
 8005076:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800508c:	4b19      	ldr	r3, [pc, #100]	; (80050f4 <HAL_PWREx_ConfigSupply+0x70>)
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	2b04      	cmp	r3, #4
 8005096:	d00a      	beq.n	80050ae <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005098:	4b16      	ldr	r3, [pc, #88]	; (80050f4 <HAL_PWREx_ConfigSupply+0x70>)
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	f003 0307 	and.w	r3, r3, #7
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d001      	beq.n	80050aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e01f      	b.n	80050ea <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80050aa:	2300      	movs	r3, #0
 80050ac:	e01d      	b.n	80050ea <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80050ae:	4b11      	ldr	r3, [pc, #68]	; (80050f4 <HAL_PWREx_ConfigSupply+0x70>)
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	f023 0207 	bic.w	r2, r3, #7
 80050b6:	490f      	ldr	r1, [pc, #60]	; (80050f4 <HAL_PWREx_ConfigSupply+0x70>)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80050be:	f7fc fa69 	bl	8001594 <HAL_GetTick>
 80050c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80050c4:	e009      	b.n	80050da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80050c6:	f7fc fa65 	bl	8001594 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050d4:	d901      	bls.n	80050da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e007      	b.n	80050ea <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80050da:	4b06      	ldr	r3, [pc, #24]	; (80050f4 <HAL_PWREx_ConfigSupply+0x70>)
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050e6:	d1ee      	bne.n	80050c6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	58024800 	.word	0x58024800

080050f8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80050f8:	b480      	push	{r7}
 80050fa:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80050fc:	4b05      	ldr	r3, [pc, #20]	; (8005114 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	4a04      	ldr	r2, [pc, #16]	; (8005114 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005102:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005106:	60d3      	str	r3, [r2, #12]
}
 8005108:	bf00      	nop
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	58024800 	.word	0x58024800

08005118 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b08c      	sub	sp, #48	; 0x30
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e3ff      	b.n	800592a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b00      	cmp	r3, #0
 8005134:	f000 8087 	beq.w	8005246 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005138:	4b99      	ldr	r3, [pc, #612]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005140:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005142:	4b97      	ldr	r3, [pc, #604]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 8005144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005146:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800514a:	2b10      	cmp	r3, #16
 800514c:	d007      	beq.n	800515e <HAL_RCC_OscConfig+0x46>
 800514e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005150:	2b18      	cmp	r3, #24
 8005152:	d110      	bne.n	8005176 <HAL_RCC_OscConfig+0x5e>
 8005154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005156:	f003 0303 	and.w	r3, r3, #3
 800515a:	2b02      	cmp	r3, #2
 800515c:	d10b      	bne.n	8005176 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800515e:	4b90      	ldr	r3, [pc, #576]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d06c      	beq.n	8005244 <HAL_RCC_OscConfig+0x12c>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d168      	bne.n	8005244 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e3d9      	b.n	800592a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800517e:	d106      	bne.n	800518e <HAL_RCC_OscConfig+0x76>
 8005180:	4b87      	ldr	r3, [pc, #540]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a86      	ldr	r2, [pc, #536]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 8005186:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800518a:	6013      	str	r3, [r2, #0]
 800518c:	e02e      	b.n	80051ec <HAL_RCC_OscConfig+0xd4>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10c      	bne.n	80051b0 <HAL_RCC_OscConfig+0x98>
 8005196:	4b82      	ldr	r3, [pc, #520]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a81      	ldr	r2, [pc, #516]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 800519c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051a0:	6013      	str	r3, [r2, #0]
 80051a2:	4b7f      	ldr	r3, [pc, #508]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a7e      	ldr	r2, [pc, #504]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 80051a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051ac:	6013      	str	r3, [r2, #0]
 80051ae:	e01d      	b.n	80051ec <HAL_RCC_OscConfig+0xd4>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051b8:	d10c      	bne.n	80051d4 <HAL_RCC_OscConfig+0xbc>
 80051ba:	4b79      	ldr	r3, [pc, #484]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a78      	ldr	r2, [pc, #480]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 80051c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051c4:	6013      	str	r3, [r2, #0]
 80051c6:	4b76      	ldr	r3, [pc, #472]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a75      	ldr	r2, [pc, #468]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 80051cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051d0:	6013      	str	r3, [r2, #0]
 80051d2:	e00b      	b.n	80051ec <HAL_RCC_OscConfig+0xd4>
 80051d4:	4b72      	ldr	r3, [pc, #456]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a71      	ldr	r2, [pc, #452]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 80051da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051de:	6013      	str	r3, [r2, #0]
 80051e0:	4b6f      	ldr	r3, [pc, #444]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a6e      	ldr	r2, [pc, #440]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 80051e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d013      	beq.n	800521c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f4:	f7fc f9ce 	bl	8001594 <HAL_GetTick>
 80051f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051fc:	f7fc f9ca 	bl	8001594 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b64      	cmp	r3, #100	; 0x64
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e38d      	b.n	800592a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800520e:	4b64      	ldr	r3, [pc, #400]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d0f0      	beq.n	80051fc <HAL_RCC_OscConfig+0xe4>
 800521a:	e014      	b.n	8005246 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800521c:	f7fc f9ba 	bl	8001594 <HAL_GetTick>
 8005220:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005222:	e008      	b.n	8005236 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005224:	f7fc f9b6 	bl	8001594 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b64      	cmp	r3, #100	; 0x64
 8005230:	d901      	bls.n	8005236 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e379      	b.n	800592a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005236:	4b5a      	ldr	r3, [pc, #360]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1f0      	bne.n	8005224 <HAL_RCC_OscConfig+0x10c>
 8005242:	e000      	b.n	8005246 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0302 	and.w	r3, r3, #2
 800524e:	2b00      	cmp	r3, #0
 8005250:	f000 80ae 	beq.w	80053b0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005254:	4b52      	ldr	r3, [pc, #328]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800525c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800525e:	4b50      	ldr	r3, [pc, #320]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 8005260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005262:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005264:	6a3b      	ldr	r3, [r7, #32]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d007      	beq.n	800527a <HAL_RCC_OscConfig+0x162>
 800526a:	6a3b      	ldr	r3, [r7, #32]
 800526c:	2b18      	cmp	r3, #24
 800526e:	d13a      	bne.n	80052e6 <HAL_RCC_OscConfig+0x1ce>
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	f003 0303 	and.w	r3, r3, #3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d135      	bne.n	80052e6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800527a:	4b49      	ldr	r3, [pc, #292]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0304 	and.w	r3, r3, #4
 8005282:	2b00      	cmp	r3, #0
 8005284:	d005      	beq.n	8005292 <HAL_RCC_OscConfig+0x17a>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e34b      	b.n	800592a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005292:	f7fc f9ad 	bl	80015f0 <HAL_GetREVID>
 8005296:	4602      	mov	r2, r0
 8005298:	f241 0303 	movw	r3, #4099	; 0x1003
 800529c:	429a      	cmp	r2, r3
 800529e:	d817      	bhi.n	80052d0 <HAL_RCC_OscConfig+0x1b8>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	2b40      	cmp	r3, #64	; 0x40
 80052a6:	d108      	bne.n	80052ba <HAL_RCC_OscConfig+0x1a2>
 80052a8:	4b3d      	ldr	r3, [pc, #244]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80052b0:	4a3b      	ldr	r2, [pc, #236]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 80052b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052b6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052b8:	e07a      	b.n	80053b0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052ba:	4b39      	ldr	r3, [pc, #228]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	031b      	lsls	r3, r3, #12
 80052c8:	4935      	ldr	r1, [pc, #212]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052ce:	e06f      	b.n	80053b0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052d0:	4b33      	ldr	r3, [pc, #204]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	061b      	lsls	r3, r3, #24
 80052de:	4930      	ldr	r1, [pc, #192]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052e4:	e064      	b.n	80053b0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d045      	beq.n	800537a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80052ee:	4b2c      	ldr	r3, [pc, #176]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f023 0219 	bic.w	r2, r3, #25
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	4929      	ldr	r1, [pc, #164]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005300:	f7fc f948 	bl	8001594 <HAL_GetTick>
 8005304:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005306:	e008      	b.n	800531a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005308:	f7fc f944 	bl	8001594 <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e307      	b.n	800592a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800531a:	4b21      	ldr	r3, [pc, #132]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0304 	and.w	r3, r3, #4
 8005322:	2b00      	cmp	r3, #0
 8005324:	d0f0      	beq.n	8005308 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005326:	f7fc f963 	bl	80015f0 <HAL_GetREVID>
 800532a:	4602      	mov	r2, r0
 800532c:	f241 0303 	movw	r3, #4099	; 0x1003
 8005330:	429a      	cmp	r2, r3
 8005332:	d817      	bhi.n	8005364 <HAL_RCC_OscConfig+0x24c>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	2b40      	cmp	r3, #64	; 0x40
 800533a:	d108      	bne.n	800534e <HAL_RCC_OscConfig+0x236>
 800533c:	4b18      	ldr	r3, [pc, #96]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005344:	4a16      	ldr	r2, [pc, #88]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 8005346:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800534a:	6053      	str	r3, [r2, #4]
 800534c:	e030      	b.n	80053b0 <HAL_RCC_OscConfig+0x298>
 800534e:	4b14      	ldr	r3, [pc, #80]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	031b      	lsls	r3, r3, #12
 800535c:	4910      	ldr	r1, [pc, #64]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 800535e:	4313      	orrs	r3, r2
 8005360:	604b      	str	r3, [r1, #4]
 8005362:	e025      	b.n	80053b0 <HAL_RCC_OscConfig+0x298>
 8005364:	4b0e      	ldr	r3, [pc, #56]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	061b      	lsls	r3, r3, #24
 8005372:	490b      	ldr	r1, [pc, #44]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 8005374:	4313      	orrs	r3, r2
 8005376:	604b      	str	r3, [r1, #4]
 8005378:	e01a      	b.n	80053b0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800537a:	4b09      	ldr	r3, [pc, #36]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a08      	ldr	r2, [pc, #32]	; (80053a0 <HAL_RCC_OscConfig+0x288>)
 8005380:	f023 0301 	bic.w	r3, r3, #1
 8005384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005386:	f7fc f905 	bl	8001594 <HAL_GetTick>
 800538a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800538c:	e00a      	b.n	80053a4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800538e:	f7fc f901 	bl	8001594 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	2b02      	cmp	r3, #2
 800539a:	d903      	bls.n	80053a4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e2c4      	b.n	800592a <HAL_RCC_OscConfig+0x812>
 80053a0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80053a4:	4ba4      	ldr	r3, [pc, #656]	; (8005638 <HAL_RCC_OscConfig+0x520>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0304 	and.w	r3, r3, #4
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1ee      	bne.n	800538e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0310 	and.w	r3, r3, #16
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f000 80a9 	beq.w	8005510 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053be:	4b9e      	ldr	r3, [pc, #632]	; (8005638 <HAL_RCC_OscConfig+0x520>)
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053c6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80053c8:	4b9b      	ldr	r3, [pc, #620]	; (8005638 <HAL_RCC_OscConfig+0x520>)
 80053ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053cc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	2b08      	cmp	r3, #8
 80053d2:	d007      	beq.n	80053e4 <HAL_RCC_OscConfig+0x2cc>
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	2b18      	cmp	r3, #24
 80053d8:	d13a      	bne.n	8005450 <HAL_RCC_OscConfig+0x338>
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f003 0303 	and.w	r3, r3, #3
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d135      	bne.n	8005450 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80053e4:	4b94      	ldr	r3, [pc, #592]	; (8005638 <HAL_RCC_OscConfig+0x520>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d005      	beq.n	80053fc <HAL_RCC_OscConfig+0x2e4>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	69db      	ldr	r3, [r3, #28]
 80053f4:	2b80      	cmp	r3, #128	; 0x80
 80053f6:	d001      	beq.n	80053fc <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e296      	b.n	800592a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80053fc:	f7fc f8f8 	bl	80015f0 <HAL_GetREVID>
 8005400:	4602      	mov	r2, r0
 8005402:	f241 0303 	movw	r3, #4099	; 0x1003
 8005406:	429a      	cmp	r2, r3
 8005408:	d817      	bhi.n	800543a <HAL_RCC_OscConfig+0x322>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	2b20      	cmp	r3, #32
 8005410:	d108      	bne.n	8005424 <HAL_RCC_OscConfig+0x30c>
 8005412:	4b89      	ldr	r3, [pc, #548]	; (8005638 <HAL_RCC_OscConfig+0x520>)
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800541a:	4a87      	ldr	r2, [pc, #540]	; (8005638 <HAL_RCC_OscConfig+0x520>)
 800541c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005420:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005422:	e075      	b.n	8005510 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005424:	4b84      	ldr	r3, [pc, #528]	; (8005638 <HAL_RCC_OscConfig+0x520>)
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	069b      	lsls	r3, r3, #26
 8005432:	4981      	ldr	r1, [pc, #516]	; (8005638 <HAL_RCC_OscConfig+0x520>)
 8005434:	4313      	orrs	r3, r2
 8005436:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005438:	e06a      	b.n	8005510 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800543a:	4b7f      	ldr	r3, [pc, #508]	; (8005638 <HAL_RCC_OscConfig+0x520>)
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	061b      	lsls	r3, r3, #24
 8005448:	497b      	ldr	r1, [pc, #492]	; (8005638 <HAL_RCC_OscConfig+0x520>)
 800544a:	4313      	orrs	r3, r2
 800544c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800544e:	e05f      	b.n	8005510 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	69db      	ldr	r3, [r3, #28]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d042      	beq.n	80054de <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005458:	4b77      	ldr	r3, [pc, #476]	; (8005638 <HAL_RCC_OscConfig+0x520>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a76      	ldr	r2, [pc, #472]	; (8005638 <HAL_RCC_OscConfig+0x520>)
 800545e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005462:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005464:	f7fc f896 	bl	8001594 <HAL_GetTick>
 8005468:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800546a:	e008      	b.n	800547e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800546c:	f7fc f892 	bl	8001594 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b02      	cmp	r3, #2
 8005478:	d901      	bls.n	800547e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e255      	b.n	800592a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800547e:	4b6e      	ldr	r3, [pc, #440]	; (8005638 <HAL_RCC_OscConfig+0x520>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005486:	2b00      	cmp	r3, #0
 8005488:	d0f0      	beq.n	800546c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800548a:	f7fc f8b1 	bl	80015f0 <HAL_GetREVID>
 800548e:	4602      	mov	r2, r0
 8005490:	f241 0303 	movw	r3, #4099	; 0x1003
 8005494:	429a      	cmp	r2, r3
 8005496:	d817      	bhi.n	80054c8 <HAL_RCC_OscConfig+0x3b0>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a1b      	ldr	r3, [r3, #32]
 800549c:	2b20      	cmp	r3, #32
 800549e:	d108      	bne.n	80054b2 <HAL_RCC_OscConfig+0x39a>
 80054a0:	4b65      	ldr	r3, [pc, #404]	; (8005638 <HAL_RCC_OscConfig+0x520>)
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80054a8:	4a63      	ldr	r2, [pc, #396]	; (8005638 <HAL_RCC_OscConfig+0x520>)
 80054aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054ae:	6053      	str	r3, [r2, #4]
 80054b0:	e02e      	b.n	8005510 <HAL_RCC_OscConfig+0x3f8>
 80054b2:	4b61      	ldr	r3, [pc, #388]	; (8005638 <HAL_RCC_OscConfig+0x520>)
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	069b      	lsls	r3, r3, #26
 80054c0:	495d      	ldr	r1, [pc, #372]	; (8005638 <HAL_RCC_OscConfig+0x520>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	604b      	str	r3, [r1, #4]
 80054c6:	e023      	b.n	8005510 <HAL_RCC_OscConfig+0x3f8>
 80054c8:	4b5b      	ldr	r3, [pc, #364]	; (8005638 <HAL_RCC_OscConfig+0x520>)
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a1b      	ldr	r3, [r3, #32]
 80054d4:	061b      	lsls	r3, r3, #24
 80054d6:	4958      	ldr	r1, [pc, #352]	; (8005638 <HAL_RCC_OscConfig+0x520>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	60cb      	str	r3, [r1, #12]
 80054dc:	e018      	b.n	8005510 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80054de:	4b56      	ldr	r3, [pc, #344]	; (8005638 <HAL_RCC_OscConfig+0x520>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a55      	ldr	r2, [pc, #340]	; (8005638 <HAL_RCC_OscConfig+0x520>)
 80054e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ea:	f7fc f853 	bl	8001594 <HAL_GetTick>
 80054ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80054f0:	e008      	b.n	8005504 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80054f2:	f7fc f84f 	bl	8001594 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d901      	bls.n	8005504 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e212      	b.n	800592a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005504:	4b4c      	ldr	r3, [pc, #304]	; (8005638 <HAL_RCC_OscConfig+0x520>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1f0      	bne.n	80054f2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0308 	and.w	r3, r3, #8
 8005518:	2b00      	cmp	r3, #0
 800551a:	d036      	beq.n	800558a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d019      	beq.n	8005558 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005524:	4b44      	ldr	r3, [pc, #272]	; (8005638 <HAL_RCC_OscConfig+0x520>)
 8005526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005528:	4a43      	ldr	r2, [pc, #268]	; (8005638 <HAL_RCC_OscConfig+0x520>)
 800552a:	f043 0301 	orr.w	r3, r3, #1
 800552e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005530:	f7fc f830 	bl	8001594 <HAL_GetTick>
 8005534:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005536:	e008      	b.n	800554a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005538:	f7fc f82c 	bl	8001594 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e1ef      	b.n	800592a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800554a:	4b3b      	ldr	r3, [pc, #236]	; (8005638 <HAL_RCC_OscConfig+0x520>)
 800554c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d0f0      	beq.n	8005538 <HAL_RCC_OscConfig+0x420>
 8005556:	e018      	b.n	800558a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005558:	4b37      	ldr	r3, [pc, #220]	; (8005638 <HAL_RCC_OscConfig+0x520>)
 800555a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800555c:	4a36      	ldr	r2, [pc, #216]	; (8005638 <HAL_RCC_OscConfig+0x520>)
 800555e:	f023 0301 	bic.w	r3, r3, #1
 8005562:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005564:	f7fc f816 	bl	8001594 <HAL_GetTick>
 8005568:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800556a:	e008      	b.n	800557e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800556c:	f7fc f812 	bl	8001594 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	2b02      	cmp	r3, #2
 8005578:	d901      	bls.n	800557e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e1d5      	b.n	800592a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800557e:	4b2e      	ldr	r3, [pc, #184]	; (8005638 <HAL_RCC_OscConfig+0x520>)
 8005580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005582:	f003 0302 	and.w	r3, r3, #2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1f0      	bne.n	800556c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0320 	and.w	r3, r3, #32
 8005592:	2b00      	cmp	r3, #0
 8005594:	d036      	beq.n	8005604 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d019      	beq.n	80055d2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800559e:	4b26      	ldr	r3, [pc, #152]	; (8005638 <HAL_RCC_OscConfig+0x520>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a25      	ldr	r2, [pc, #148]	; (8005638 <HAL_RCC_OscConfig+0x520>)
 80055a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80055a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80055aa:	f7fb fff3 	bl	8001594 <HAL_GetTick>
 80055ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80055b0:	e008      	b.n	80055c4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80055b2:	f7fb ffef 	bl	8001594 <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d901      	bls.n	80055c4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e1b2      	b.n	800592a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80055c4:	4b1c      	ldr	r3, [pc, #112]	; (8005638 <HAL_RCC_OscConfig+0x520>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d0f0      	beq.n	80055b2 <HAL_RCC_OscConfig+0x49a>
 80055d0:	e018      	b.n	8005604 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80055d2:	4b19      	ldr	r3, [pc, #100]	; (8005638 <HAL_RCC_OscConfig+0x520>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a18      	ldr	r2, [pc, #96]	; (8005638 <HAL_RCC_OscConfig+0x520>)
 80055d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055dc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80055de:	f7fb ffd9 	bl	8001594 <HAL_GetTick>
 80055e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80055e4:	e008      	b.n	80055f8 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80055e6:	f7fb ffd5 	bl	8001594 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d901      	bls.n	80055f8 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e198      	b.n	800592a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80055f8:	4b0f      	ldr	r3, [pc, #60]	; (8005638 <HAL_RCC_OscConfig+0x520>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d1f0      	bne.n	80055e6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0304 	and.w	r3, r3, #4
 800560c:	2b00      	cmp	r3, #0
 800560e:	f000 8085 	beq.w	800571c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005612:	4b0a      	ldr	r3, [pc, #40]	; (800563c <HAL_RCC_OscConfig+0x524>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a09      	ldr	r2, [pc, #36]	; (800563c <HAL_RCC_OscConfig+0x524>)
 8005618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800561c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800561e:	f7fb ffb9 	bl	8001594 <HAL_GetTick>
 8005622:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005624:	e00c      	b.n	8005640 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005626:	f7fb ffb5 	bl	8001594 <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	2b64      	cmp	r3, #100	; 0x64
 8005632:	d905      	bls.n	8005640 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e178      	b.n	800592a <HAL_RCC_OscConfig+0x812>
 8005638:	58024400 	.word	0x58024400
 800563c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005640:	4b96      	ldr	r3, [pc, #600]	; (800589c <HAL_RCC_OscConfig+0x784>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005648:	2b00      	cmp	r3, #0
 800564a:	d0ec      	beq.n	8005626 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d106      	bne.n	8005662 <HAL_RCC_OscConfig+0x54a>
 8005654:	4b92      	ldr	r3, [pc, #584]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 8005656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005658:	4a91      	ldr	r2, [pc, #580]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 800565a:	f043 0301 	orr.w	r3, r3, #1
 800565e:	6713      	str	r3, [r2, #112]	; 0x70
 8005660:	e02d      	b.n	80056be <HAL_RCC_OscConfig+0x5a6>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10c      	bne.n	8005684 <HAL_RCC_OscConfig+0x56c>
 800566a:	4b8d      	ldr	r3, [pc, #564]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 800566c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800566e:	4a8c      	ldr	r2, [pc, #560]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 8005670:	f023 0301 	bic.w	r3, r3, #1
 8005674:	6713      	str	r3, [r2, #112]	; 0x70
 8005676:	4b8a      	ldr	r3, [pc, #552]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 8005678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800567a:	4a89      	ldr	r2, [pc, #548]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 800567c:	f023 0304 	bic.w	r3, r3, #4
 8005680:	6713      	str	r3, [r2, #112]	; 0x70
 8005682:	e01c      	b.n	80056be <HAL_RCC_OscConfig+0x5a6>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	2b05      	cmp	r3, #5
 800568a:	d10c      	bne.n	80056a6 <HAL_RCC_OscConfig+0x58e>
 800568c:	4b84      	ldr	r3, [pc, #528]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 800568e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005690:	4a83      	ldr	r2, [pc, #524]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 8005692:	f043 0304 	orr.w	r3, r3, #4
 8005696:	6713      	str	r3, [r2, #112]	; 0x70
 8005698:	4b81      	ldr	r3, [pc, #516]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 800569a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569c:	4a80      	ldr	r2, [pc, #512]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 800569e:	f043 0301 	orr.w	r3, r3, #1
 80056a2:	6713      	str	r3, [r2, #112]	; 0x70
 80056a4:	e00b      	b.n	80056be <HAL_RCC_OscConfig+0x5a6>
 80056a6:	4b7e      	ldr	r3, [pc, #504]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 80056a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056aa:	4a7d      	ldr	r2, [pc, #500]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 80056ac:	f023 0301 	bic.w	r3, r3, #1
 80056b0:	6713      	str	r3, [r2, #112]	; 0x70
 80056b2:	4b7b      	ldr	r3, [pc, #492]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 80056b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b6:	4a7a      	ldr	r2, [pc, #488]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 80056b8:	f023 0304 	bic.w	r3, r3, #4
 80056bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d015      	beq.n	80056f2 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c6:	f7fb ff65 	bl	8001594 <HAL_GetTick>
 80056ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056cc:	e00a      	b.n	80056e4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056ce:	f7fb ff61 	bl	8001594 <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056dc:	4293      	cmp	r3, r2
 80056de:	d901      	bls.n	80056e4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e122      	b.n	800592a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056e4:	4b6e      	ldr	r3, [pc, #440]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 80056e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e8:	f003 0302 	and.w	r3, r3, #2
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d0ee      	beq.n	80056ce <HAL_RCC_OscConfig+0x5b6>
 80056f0:	e014      	b.n	800571c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056f2:	f7fb ff4f 	bl	8001594 <HAL_GetTick>
 80056f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80056f8:	e00a      	b.n	8005710 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056fa:	f7fb ff4b 	bl	8001594 <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	f241 3288 	movw	r2, #5000	; 0x1388
 8005708:	4293      	cmp	r3, r2
 800570a:	d901      	bls.n	8005710 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e10c      	b.n	800592a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005710:	4b63      	ldr	r3, [pc, #396]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 8005712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005714:	f003 0302 	and.w	r3, r3, #2
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1ee      	bne.n	80056fa <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005720:	2b00      	cmp	r3, #0
 8005722:	f000 8101 	beq.w	8005928 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005726:	4b5e      	ldr	r3, [pc, #376]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800572e:	2b18      	cmp	r3, #24
 8005730:	f000 80bc 	beq.w	80058ac <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005738:	2b02      	cmp	r3, #2
 800573a:	f040 8095 	bne.w	8005868 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800573e:	4b58      	ldr	r3, [pc, #352]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a57      	ldr	r2, [pc, #348]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 8005744:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800574a:	f7fb ff23 	bl	8001594 <HAL_GetTick>
 800574e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005750:	e008      	b.n	8005764 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005752:	f7fb ff1f 	bl	8001594 <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	2b02      	cmp	r3, #2
 800575e:	d901      	bls.n	8005764 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e0e2      	b.n	800592a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005764:	4b4e      	ldr	r3, [pc, #312]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1f0      	bne.n	8005752 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005770:	4b4b      	ldr	r3, [pc, #300]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 8005772:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005774:	4b4b      	ldr	r3, [pc, #300]	; (80058a4 <HAL_RCC_OscConfig+0x78c>)
 8005776:	4013      	ands	r3, r2
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005780:	0112      	lsls	r2, r2, #4
 8005782:	430a      	orrs	r2, r1
 8005784:	4946      	ldr	r1, [pc, #280]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 8005786:	4313      	orrs	r3, r2
 8005788:	628b      	str	r3, [r1, #40]	; 0x28
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578e:	3b01      	subs	r3, #1
 8005790:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005798:	3b01      	subs	r3, #1
 800579a:	025b      	lsls	r3, r3, #9
 800579c:	b29b      	uxth	r3, r3
 800579e:	431a      	orrs	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a4:	3b01      	subs	r3, #1
 80057a6:	041b      	lsls	r3, r3, #16
 80057a8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80057ac:	431a      	orrs	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b2:	3b01      	subs	r3, #1
 80057b4:	061b      	lsls	r3, r3, #24
 80057b6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80057ba:	4939      	ldr	r1, [pc, #228]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 80057bc:	4313      	orrs	r3, r2
 80057be:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80057c0:	4b37      	ldr	r3, [pc, #220]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 80057c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c4:	4a36      	ldr	r2, [pc, #216]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 80057c6:	f023 0301 	bic.w	r3, r3, #1
 80057ca:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80057cc:	4b34      	ldr	r3, [pc, #208]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 80057ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057d0:	4b35      	ldr	r3, [pc, #212]	; (80058a8 <HAL_RCC_OscConfig+0x790>)
 80057d2:	4013      	ands	r3, r2
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80057d8:	00d2      	lsls	r2, r2, #3
 80057da:	4931      	ldr	r1, [pc, #196]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80057e0:	4b2f      	ldr	r3, [pc, #188]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 80057e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e4:	f023 020c 	bic.w	r2, r3, #12
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ec:	492c      	ldr	r1, [pc, #176]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80057f2:	4b2b      	ldr	r3, [pc, #172]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 80057f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f6:	f023 0202 	bic.w	r2, r3, #2
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057fe:	4928      	ldr	r1, [pc, #160]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 8005800:	4313      	orrs	r3, r2
 8005802:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005804:	4b26      	ldr	r3, [pc, #152]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 8005806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005808:	4a25      	ldr	r2, [pc, #148]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 800580a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800580e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005810:	4b23      	ldr	r3, [pc, #140]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 8005812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005814:	4a22      	ldr	r2, [pc, #136]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 8005816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800581a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800581c:	4b20      	ldr	r3, [pc, #128]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 800581e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005820:	4a1f      	ldr	r2, [pc, #124]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 8005822:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005826:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005828:	4b1d      	ldr	r3, [pc, #116]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 800582a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582c:	4a1c      	ldr	r2, [pc, #112]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 800582e:	f043 0301 	orr.w	r3, r3, #1
 8005832:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005834:	4b1a      	ldr	r3, [pc, #104]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a19      	ldr	r2, [pc, #100]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 800583a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800583e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005840:	f7fb fea8 	bl	8001594 <HAL_GetTick>
 8005844:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005846:	e008      	b.n	800585a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005848:	f7fb fea4 	bl	8001594 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	2b02      	cmp	r3, #2
 8005854:	d901      	bls.n	800585a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e067      	b.n	800592a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800585a:	4b11      	ldr	r3, [pc, #68]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d0f0      	beq.n	8005848 <HAL_RCC_OscConfig+0x730>
 8005866:	e05f      	b.n	8005928 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005868:	4b0d      	ldr	r3, [pc, #52]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a0c      	ldr	r2, [pc, #48]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 800586e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005872:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005874:	f7fb fe8e 	bl	8001594 <HAL_GetTick>
 8005878:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800587a:	e008      	b.n	800588e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800587c:	f7fb fe8a 	bl	8001594 <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	2b02      	cmp	r3, #2
 8005888:	d901      	bls.n	800588e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e04d      	b.n	800592a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800588e:	4b04      	ldr	r3, [pc, #16]	; (80058a0 <HAL_RCC_OscConfig+0x788>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1f0      	bne.n	800587c <HAL_RCC_OscConfig+0x764>
 800589a:	e045      	b.n	8005928 <HAL_RCC_OscConfig+0x810>
 800589c:	58024800 	.word	0x58024800
 80058a0:	58024400 	.word	0x58024400
 80058a4:	fffffc0c 	.word	0xfffffc0c
 80058a8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80058ac:	4b21      	ldr	r3, [pc, #132]	; (8005934 <HAL_RCC_OscConfig+0x81c>)
 80058ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80058b2:	4b20      	ldr	r3, [pc, #128]	; (8005934 <HAL_RCC_OscConfig+0x81c>)
 80058b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d031      	beq.n	8005924 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	f003 0203 	and.w	r2, r3, #3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d12a      	bne.n	8005924 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	091b      	lsrs	r3, r3, #4
 80058d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058da:	429a      	cmp	r2, r3
 80058dc:	d122      	bne.n	8005924 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d11a      	bne.n	8005924 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	0a5b      	lsrs	r3, r3, #9
 80058f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058fa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d111      	bne.n	8005924 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	0c1b      	lsrs	r3, r3, #16
 8005904:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800590e:	429a      	cmp	r2, r3
 8005910:	d108      	bne.n	8005924 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	0e1b      	lsrs	r3, r3, #24
 8005916:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800591e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005920:	429a      	cmp	r2, r3
 8005922:	d001      	beq.n	8005928 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e000      	b.n	800592a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3730      	adds	r7, #48	; 0x30
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	58024400 	.word	0x58024400

08005938 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d101      	bne.n	800594c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e19c      	b.n	8005c86 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800594c:	4b8a      	ldr	r3, [pc, #552]	; (8005b78 <HAL_RCC_ClockConfig+0x240>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 030f 	and.w	r3, r3, #15
 8005954:	683a      	ldr	r2, [r7, #0]
 8005956:	429a      	cmp	r2, r3
 8005958:	d910      	bls.n	800597c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800595a:	4b87      	ldr	r3, [pc, #540]	; (8005b78 <HAL_RCC_ClockConfig+0x240>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f023 020f 	bic.w	r2, r3, #15
 8005962:	4985      	ldr	r1, [pc, #532]	; (8005b78 <HAL_RCC_ClockConfig+0x240>)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	4313      	orrs	r3, r2
 8005968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800596a:	4b83      	ldr	r3, [pc, #524]	; (8005b78 <HAL_RCC_ClockConfig+0x240>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 030f 	and.w	r3, r3, #15
 8005972:	683a      	ldr	r2, [r7, #0]
 8005974:	429a      	cmp	r2, r3
 8005976:	d001      	beq.n	800597c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e184      	b.n	8005c86 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0304 	and.w	r3, r3, #4
 8005984:	2b00      	cmp	r3, #0
 8005986:	d010      	beq.n	80059aa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	691a      	ldr	r2, [r3, #16]
 800598c:	4b7b      	ldr	r3, [pc, #492]	; (8005b7c <HAL_RCC_ClockConfig+0x244>)
 800598e:	699b      	ldr	r3, [r3, #24]
 8005990:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005994:	429a      	cmp	r2, r3
 8005996:	d908      	bls.n	80059aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005998:	4b78      	ldr	r3, [pc, #480]	; (8005b7c <HAL_RCC_ClockConfig+0x244>)
 800599a:	699b      	ldr	r3, [r3, #24]
 800599c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	4975      	ldr	r1, [pc, #468]	; (8005b7c <HAL_RCC_ClockConfig+0x244>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0308 	and.w	r3, r3, #8
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d010      	beq.n	80059d8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	695a      	ldr	r2, [r3, #20]
 80059ba:	4b70      	ldr	r3, [pc, #448]	; (8005b7c <HAL_RCC_ClockConfig+0x244>)
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d908      	bls.n	80059d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80059c6:	4b6d      	ldr	r3, [pc, #436]	; (8005b7c <HAL_RCC_ClockConfig+0x244>)
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	496a      	ldr	r1, [pc, #424]	; (8005b7c <HAL_RCC_ClockConfig+0x244>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0310 	and.w	r3, r3, #16
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d010      	beq.n	8005a06 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	699a      	ldr	r2, [r3, #24]
 80059e8:	4b64      	ldr	r3, [pc, #400]	; (8005b7c <HAL_RCC_ClockConfig+0x244>)
 80059ea:	69db      	ldr	r3, [r3, #28]
 80059ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d908      	bls.n	8005a06 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80059f4:	4b61      	ldr	r3, [pc, #388]	; (8005b7c <HAL_RCC_ClockConfig+0x244>)
 80059f6:	69db      	ldr	r3, [r3, #28]
 80059f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	495e      	ldr	r1, [pc, #376]	; (8005b7c <HAL_RCC_ClockConfig+0x244>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0320 	and.w	r3, r3, #32
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d010      	beq.n	8005a34 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	69da      	ldr	r2, [r3, #28]
 8005a16:	4b59      	ldr	r3, [pc, #356]	; (8005b7c <HAL_RCC_ClockConfig+0x244>)
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d908      	bls.n	8005a34 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005a22:	4b56      	ldr	r3, [pc, #344]	; (8005b7c <HAL_RCC_ClockConfig+0x244>)
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	69db      	ldr	r3, [r3, #28]
 8005a2e:	4953      	ldr	r1, [pc, #332]	; (8005b7c <HAL_RCC_ClockConfig+0x244>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0302 	and.w	r3, r3, #2
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d010      	beq.n	8005a62 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	68da      	ldr	r2, [r3, #12]
 8005a44:	4b4d      	ldr	r3, [pc, #308]	; (8005b7c <HAL_RCC_ClockConfig+0x244>)
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	f003 030f 	and.w	r3, r3, #15
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d908      	bls.n	8005a62 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a50:	4b4a      	ldr	r3, [pc, #296]	; (8005b7c <HAL_RCC_ClockConfig+0x244>)
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	f023 020f 	bic.w	r2, r3, #15
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	4947      	ldr	r1, [pc, #284]	; (8005b7c <HAL_RCC_ClockConfig+0x244>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d055      	beq.n	8005b1a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005a6e:	4b43      	ldr	r3, [pc, #268]	; (8005b7c <HAL_RCC_ClockConfig+0x244>)
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	4940      	ldr	r1, [pc, #256]	; (8005b7c <HAL_RCC_ClockConfig+0x244>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d107      	bne.n	8005a98 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a88:	4b3c      	ldr	r3, [pc, #240]	; (8005b7c <HAL_RCC_ClockConfig+0x244>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d121      	bne.n	8005ad8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e0f6      	b.n	8005c86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	2b03      	cmp	r3, #3
 8005a9e:	d107      	bne.n	8005ab0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005aa0:	4b36      	ldr	r3, [pc, #216]	; (8005b7c <HAL_RCC_ClockConfig+0x244>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d115      	bne.n	8005ad8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e0ea      	b.n	8005c86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d107      	bne.n	8005ac8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ab8:	4b30      	ldr	r3, [pc, #192]	; (8005b7c <HAL_RCC_ClockConfig+0x244>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d109      	bne.n	8005ad8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e0de      	b.n	8005c86 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ac8:	4b2c      	ldr	r3, [pc, #176]	; (8005b7c <HAL_RCC_ClockConfig+0x244>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0304 	and.w	r3, r3, #4
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d101      	bne.n	8005ad8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e0d6      	b.n	8005c86 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ad8:	4b28      	ldr	r3, [pc, #160]	; (8005b7c <HAL_RCC_ClockConfig+0x244>)
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	f023 0207 	bic.w	r2, r3, #7
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	4925      	ldr	r1, [pc, #148]	; (8005b7c <HAL_RCC_ClockConfig+0x244>)
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aea:	f7fb fd53 	bl	8001594 <HAL_GetTick>
 8005aee:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005af0:	e00a      	b.n	8005b08 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005af2:	f7fb fd4f 	bl	8001594 <HAL_GetTick>
 8005af6:	4602      	mov	r2, r0
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d901      	bls.n	8005b08 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e0be      	b.n	8005c86 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b08:	4b1c      	ldr	r3, [pc, #112]	; (8005b7c <HAL_RCC_ClockConfig+0x244>)
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	00db      	lsls	r3, r3, #3
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d1eb      	bne.n	8005af2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d010      	beq.n	8005b48 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68da      	ldr	r2, [r3, #12]
 8005b2a:	4b14      	ldr	r3, [pc, #80]	; (8005b7c <HAL_RCC_ClockConfig+0x244>)
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	f003 030f 	and.w	r3, r3, #15
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d208      	bcs.n	8005b48 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b36:	4b11      	ldr	r3, [pc, #68]	; (8005b7c <HAL_RCC_ClockConfig+0x244>)
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	f023 020f 	bic.w	r2, r3, #15
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	490e      	ldr	r1, [pc, #56]	; (8005b7c <HAL_RCC_ClockConfig+0x244>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b48:	4b0b      	ldr	r3, [pc, #44]	; (8005b78 <HAL_RCC_ClockConfig+0x240>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 030f 	and.w	r3, r3, #15
 8005b50:	683a      	ldr	r2, [r7, #0]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d214      	bcs.n	8005b80 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b56:	4b08      	ldr	r3, [pc, #32]	; (8005b78 <HAL_RCC_ClockConfig+0x240>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f023 020f 	bic.w	r2, r3, #15
 8005b5e:	4906      	ldr	r1, [pc, #24]	; (8005b78 <HAL_RCC_ClockConfig+0x240>)
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b66:	4b04      	ldr	r3, [pc, #16]	; (8005b78 <HAL_RCC_ClockConfig+0x240>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 030f 	and.w	r3, r3, #15
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d005      	beq.n	8005b80 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e086      	b.n	8005c86 <HAL_RCC_ClockConfig+0x34e>
 8005b78:	52002000 	.word	0x52002000
 8005b7c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0304 	and.w	r3, r3, #4
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d010      	beq.n	8005bae <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	691a      	ldr	r2, [r3, #16]
 8005b90:	4b3f      	ldr	r3, [pc, #252]	; (8005c90 <HAL_RCC_ClockConfig+0x358>)
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d208      	bcs.n	8005bae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b9c:	4b3c      	ldr	r3, [pc, #240]	; (8005c90 <HAL_RCC_ClockConfig+0x358>)
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	4939      	ldr	r1, [pc, #228]	; (8005c90 <HAL_RCC_ClockConfig+0x358>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0308 	and.w	r3, r3, #8
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d010      	beq.n	8005bdc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	695a      	ldr	r2, [r3, #20]
 8005bbe:	4b34      	ldr	r3, [pc, #208]	; (8005c90 <HAL_RCC_ClockConfig+0x358>)
 8005bc0:	69db      	ldr	r3, [r3, #28]
 8005bc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d208      	bcs.n	8005bdc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005bca:	4b31      	ldr	r3, [pc, #196]	; (8005c90 <HAL_RCC_ClockConfig+0x358>)
 8005bcc:	69db      	ldr	r3, [r3, #28]
 8005bce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	695b      	ldr	r3, [r3, #20]
 8005bd6:	492e      	ldr	r1, [pc, #184]	; (8005c90 <HAL_RCC_ClockConfig+0x358>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0310 	and.w	r3, r3, #16
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d010      	beq.n	8005c0a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	699a      	ldr	r2, [r3, #24]
 8005bec:	4b28      	ldr	r3, [pc, #160]	; (8005c90 <HAL_RCC_ClockConfig+0x358>)
 8005bee:	69db      	ldr	r3, [r3, #28]
 8005bf0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d208      	bcs.n	8005c0a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005bf8:	4b25      	ldr	r3, [pc, #148]	; (8005c90 <HAL_RCC_ClockConfig+0x358>)
 8005bfa:	69db      	ldr	r3, [r3, #28]
 8005bfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	4922      	ldr	r1, [pc, #136]	; (8005c90 <HAL_RCC_ClockConfig+0x358>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0320 	and.w	r3, r3, #32
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d010      	beq.n	8005c38 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	69da      	ldr	r2, [r3, #28]
 8005c1a:	4b1d      	ldr	r3, [pc, #116]	; (8005c90 <HAL_RCC_ClockConfig+0x358>)
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d208      	bcs.n	8005c38 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005c26:	4b1a      	ldr	r3, [pc, #104]	; (8005c90 <HAL_RCC_ClockConfig+0x358>)
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	4917      	ldr	r1, [pc, #92]	; (8005c90 <HAL_RCC_ClockConfig+0x358>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005c38:	f000 f834 	bl	8005ca4 <HAL_RCC_GetSysClockFreq>
 8005c3c:	4601      	mov	r1, r0
 8005c3e:	4b14      	ldr	r3, [pc, #80]	; (8005c90 <HAL_RCC_ClockConfig+0x358>)
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	0a1b      	lsrs	r3, r3, #8
 8005c44:	f003 030f 	and.w	r3, r3, #15
 8005c48:	4a12      	ldr	r2, [pc, #72]	; (8005c94 <HAL_RCC_ClockConfig+0x35c>)
 8005c4a:	5cd3      	ldrb	r3, [r2, r3]
 8005c4c:	f003 031f 	and.w	r3, r3, #31
 8005c50:	fa21 f303 	lsr.w	r3, r1, r3
 8005c54:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c56:	4b0e      	ldr	r3, [pc, #56]	; (8005c90 <HAL_RCC_ClockConfig+0x358>)
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	f003 030f 	and.w	r3, r3, #15
 8005c5e:	4a0d      	ldr	r2, [pc, #52]	; (8005c94 <HAL_RCC_ClockConfig+0x35c>)
 8005c60:	5cd3      	ldrb	r3, [r2, r3]
 8005c62:	f003 031f 	and.w	r3, r3, #31
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	fa22 f303 	lsr.w	r3, r2, r3
 8005c6c:	4a0a      	ldr	r2, [pc, #40]	; (8005c98 <HAL_RCC_ClockConfig+0x360>)
 8005c6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005c70:	4a0a      	ldr	r2, [pc, #40]	; (8005c9c <HAL_RCC_ClockConfig+0x364>)
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005c76:	4b0a      	ldr	r3, [pc, #40]	; (8005ca0 <HAL_RCC_ClockConfig+0x368>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7fb fc40 	bl	8001500 <HAL_InitTick>
 8005c80:	4603      	mov	r3, r0
 8005c82:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3718      	adds	r7, #24
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	58024400 	.word	0x58024400
 8005c94:	080128e0 	.word	0x080128e0
 8005c98:	24000004 	.word	0x24000004
 8005c9c:	24000000 	.word	0x24000000
 8005ca0:	24000008 	.word	0x24000008

08005ca4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b089      	sub	sp, #36	; 0x24
 8005ca8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005caa:	4baf      	ldr	r3, [pc, #700]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cb2:	2b18      	cmp	r3, #24
 8005cb4:	f200 814e 	bhi.w	8005f54 <HAL_RCC_GetSysClockFreq+0x2b0>
 8005cb8:	a201      	add	r2, pc, #4	; (adr r2, 8005cc0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cbe:	bf00      	nop
 8005cc0:	08005d25 	.word	0x08005d25
 8005cc4:	08005f55 	.word	0x08005f55
 8005cc8:	08005f55 	.word	0x08005f55
 8005ccc:	08005f55 	.word	0x08005f55
 8005cd0:	08005f55 	.word	0x08005f55
 8005cd4:	08005f55 	.word	0x08005f55
 8005cd8:	08005f55 	.word	0x08005f55
 8005cdc:	08005f55 	.word	0x08005f55
 8005ce0:	08005d4b 	.word	0x08005d4b
 8005ce4:	08005f55 	.word	0x08005f55
 8005ce8:	08005f55 	.word	0x08005f55
 8005cec:	08005f55 	.word	0x08005f55
 8005cf0:	08005f55 	.word	0x08005f55
 8005cf4:	08005f55 	.word	0x08005f55
 8005cf8:	08005f55 	.word	0x08005f55
 8005cfc:	08005f55 	.word	0x08005f55
 8005d00:	08005d51 	.word	0x08005d51
 8005d04:	08005f55 	.word	0x08005f55
 8005d08:	08005f55 	.word	0x08005f55
 8005d0c:	08005f55 	.word	0x08005f55
 8005d10:	08005f55 	.word	0x08005f55
 8005d14:	08005f55 	.word	0x08005f55
 8005d18:	08005f55 	.word	0x08005f55
 8005d1c:	08005f55 	.word	0x08005f55
 8005d20:	08005d57 	.word	0x08005d57
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d24:	4b90      	ldr	r3, [pc, #576]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0320 	and.w	r3, r3, #32
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d009      	beq.n	8005d44 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005d30:	4b8d      	ldr	r3, [pc, #564]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	08db      	lsrs	r3, r3, #3
 8005d36:	f003 0303 	and.w	r3, r3, #3
 8005d3a:	4a8c      	ldr	r2, [pc, #560]	; (8005f6c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d40:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005d42:	e10a      	b.n	8005f5a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005d44:	4b89      	ldr	r3, [pc, #548]	; (8005f6c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005d46:	61bb      	str	r3, [r7, #24]
    break;
 8005d48:	e107      	b.n	8005f5a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005d4a:	4b89      	ldr	r3, [pc, #548]	; (8005f70 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005d4c:	61bb      	str	r3, [r7, #24]
    break;
 8005d4e:	e104      	b.n	8005f5a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005d50:	4b88      	ldr	r3, [pc, #544]	; (8005f74 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8005d52:	61bb      	str	r3, [r7, #24]
    break;
 8005d54:	e101      	b.n	8005f5a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d56:	4b84      	ldr	r3, [pc, #528]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5a:	f003 0303 	and.w	r3, r3, #3
 8005d5e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005d60:	4b81      	ldr	r3, [pc, #516]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d64:	091b      	lsrs	r3, r3, #4
 8005d66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d6a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005d6c:	4b7e      	ldr	r3, [pc, #504]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d70:	f003 0301 	and.w	r3, r3, #1
 8005d74:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005d76:	4b7c      	ldr	r3, [pc, #496]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d7a:	08db      	lsrs	r3, r3, #3
 8005d7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	fb02 f303 	mul.w	r3, r2, r3
 8005d86:	ee07 3a90 	vmov	s15, r3
 8005d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d8e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 80da 	beq.w	8005f4e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d05a      	beq.n	8005e56 <HAL_RCC_GetSysClockFreq+0x1b2>
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d302      	bcc.n	8005daa <HAL_RCC_GetSysClockFreq+0x106>
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d078      	beq.n	8005e9a <HAL_RCC_GetSysClockFreq+0x1f6>
 8005da8:	e099      	b.n	8005ede <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005daa:	4b6f      	ldr	r3, [pc, #444]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0320 	and.w	r3, r3, #32
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d02d      	beq.n	8005e12 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005db6:	4b6c      	ldr	r3, [pc, #432]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	08db      	lsrs	r3, r3, #3
 8005dbc:	f003 0303 	and.w	r3, r3, #3
 8005dc0:	4a6a      	ldr	r2, [pc, #424]	; (8005f6c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8005dc6:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	ee07 3a90 	vmov	s15, r3
 8005dce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	ee07 3a90 	vmov	s15, r3
 8005dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ddc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005de0:	4b61      	ldr	r3, [pc, #388]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de8:	ee07 3a90 	vmov	s15, r3
 8005dec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005df0:	ed97 6a02 	vldr	s12, [r7, #8]
 8005df4:	eddf 5a60 	vldr	s11, [pc, #384]	; 8005f78 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005df8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e0c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005e10:	e087      	b.n	8005f22 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	ee07 3a90 	vmov	s15, r3
 8005e18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e1c:	eddf 6a57 	vldr	s13, [pc, #348]	; 8005f7c <HAL_RCC_GetSysClockFreq+0x2d8>
 8005e20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e24:	4b50      	ldr	r3, [pc, #320]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e2c:	ee07 3a90 	vmov	s15, r3
 8005e30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e34:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e38:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8005f78 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005e3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e50:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e54:	e065      	b.n	8005f22 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	ee07 3a90 	vmov	s15, r3
 8005e5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e60:	eddf 6a47 	vldr	s13, [pc, #284]	; 8005f80 <HAL_RCC_GetSysClockFreq+0x2dc>
 8005e64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e68:	4b3f      	ldr	r3, [pc, #252]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e70:	ee07 3a90 	vmov	s15, r3
 8005e74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e78:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e7c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005f78 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005e80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e94:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e98:	e043      	b.n	8005f22 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	ee07 3a90 	vmov	s15, r3
 8005ea0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ea4:	eddf 6a37 	vldr	s13, [pc, #220]	; 8005f84 <HAL_RCC_GetSysClockFreq+0x2e0>
 8005ea8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eac:	4b2e      	ldr	r3, [pc, #184]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eb4:	ee07 3a90 	vmov	s15, r3
 8005eb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ebc:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ec0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005f78 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005ec4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ec8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ecc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ed0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ed4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ed8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005edc:	e021      	b.n	8005f22 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	ee07 3a90 	vmov	s15, r3
 8005ee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8005f80 <HAL_RCC_GetSysClockFreq+0x2dc>
 8005eec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ef0:	4b1d      	ldr	r3, [pc, #116]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ef8:	ee07 3a90 	vmov	s15, r3
 8005efc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f00:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f04:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8005f78 <HAL_RCC_GetSysClockFreq+0x2d4>
 8005f08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f1c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f20:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005f22:	4b11      	ldr	r3, [pc, #68]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f26:	0a5b      	lsrs	r3, r3, #9
 8005f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	ee07 3a90 	vmov	s15, r3
 8005f36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f46:	ee17 3a90 	vmov	r3, s15
 8005f4a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005f4c:	e005      	b.n	8005f5a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	61bb      	str	r3, [r7, #24]
    break;
 8005f52:	e002      	b.n	8005f5a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8005f54:	4b06      	ldr	r3, [pc, #24]	; (8005f70 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005f56:	61bb      	str	r3, [r7, #24]
    break;
 8005f58:	bf00      	nop
  }

  return sysclockfreq;
 8005f5a:	69bb      	ldr	r3, [r7, #24]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3724      	adds	r7, #36	; 0x24
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr
 8005f68:	58024400 	.word	0x58024400
 8005f6c:	03d09000 	.word	0x03d09000
 8005f70:	003d0900 	.word	0x003d0900
 8005f74:	017d7840 	.word	0x017d7840
 8005f78:	46000000 	.word	0x46000000
 8005f7c:	4c742400 	.word	0x4c742400
 8005f80:	4a742400 	.word	0x4a742400
 8005f84:	4bbebc20 	.word	0x4bbebc20

08005f88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005f8e:	f7ff fe89 	bl	8005ca4 <HAL_RCC_GetSysClockFreq>
 8005f92:	4601      	mov	r1, r0
 8005f94:	4b10      	ldr	r3, [pc, #64]	; (8005fd8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	0a1b      	lsrs	r3, r3, #8
 8005f9a:	f003 030f 	and.w	r3, r3, #15
 8005f9e:	4a0f      	ldr	r2, [pc, #60]	; (8005fdc <HAL_RCC_GetHCLKFreq+0x54>)
 8005fa0:	5cd3      	ldrb	r3, [r2, r3]
 8005fa2:	f003 031f 	and.w	r3, r3, #31
 8005fa6:	fa21 f303 	lsr.w	r3, r1, r3
 8005faa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005fac:	4b0a      	ldr	r3, [pc, #40]	; (8005fd8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	f003 030f 	and.w	r3, r3, #15
 8005fb4:	4a09      	ldr	r2, [pc, #36]	; (8005fdc <HAL_RCC_GetHCLKFreq+0x54>)
 8005fb6:	5cd3      	ldrb	r3, [r2, r3]
 8005fb8:	f003 031f 	and.w	r3, r3, #31
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8005fc2:	4a07      	ldr	r2, [pc, #28]	; (8005fe0 <HAL_RCC_GetHCLKFreq+0x58>)
 8005fc4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005fc6:	4a07      	ldr	r2, [pc, #28]	; (8005fe4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005fcc:	4b04      	ldr	r3, [pc, #16]	; (8005fe0 <HAL_RCC_GetHCLKFreq+0x58>)
 8005fce:	681b      	ldr	r3, [r3, #0]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3708      	adds	r7, #8
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	58024400 	.word	0x58024400
 8005fdc:	080128e0 	.word	0x080128e0
 8005fe0:	24000004 	.word	0x24000004
 8005fe4:	24000000 	.word	0x24000000

08005fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005fec:	f7ff ffcc 	bl	8005f88 <HAL_RCC_GetHCLKFreq>
 8005ff0:	4601      	mov	r1, r0
 8005ff2:	4b06      	ldr	r3, [pc, #24]	; (800600c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	091b      	lsrs	r3, r3, #4
 8005ff8:	f003 0307 	and.w	r3, r3, #7
 8005ffc:	4a04      	ldr	r2, [pc, #16]	; (8006010 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ffe:	5cd3      	ldrb	r3, [r2, r3]
 8006000:	f003 031f 	and.w	r3, r3, #31
 8006004:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006008:	4618      	mov	r0, r3
 800600a:	bd80      	pop	{r7, pc}
 800600c:	58024400 	.word	0x58024400
 8006010:	080128e0 	.word	0x080128e0

08006014 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006018:	f7ff ffb6 	bl	8005f88 <HAL_RCC_GetHCLKFreq>
 800601c:	4601      	mov	r1, r0
 800601e:	4b06      	ldr	r3, [pc, #24]	; (8006038 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006020:	69db      	ldr	r3, [r3, #28]
 8006022:	0a1b      	lsrs	r3, r3, #8
 8006024:	f003 0307 	and.w	r3, r3, #7
 8006028:	4a04      	ldr	r2, [pc, #16]	; (800603c <HAL_RCC_GetPCLK2Freq+0x28>)
 800602a:	5cd3      	ldrb	r3, [r2, r3]
 800602c:	f003 031f 	and.w	r3, r3, #31
 8006030:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006034:	4618      	mov	r0, r3
 8006036:	bd80      	pop	{r7, pc}
 8006038:	58024400 	.word	0x58024400
 800603c:	080128e0 	.word	0x080128e0

08006040 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006048:	2300      	movs	r3, #0
 800604a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800604c:	2300      	movs	r3, #0
 800604e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d03d      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006060:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006064:	d013      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006066:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800606a:	d802      	bhi.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800606c:	2b00      	cmp	r3, #0
 800606e:	d007      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006070:	e01f      	b.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006072:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006076:	d013      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006078:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800607c:	d01c      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800607e:	e018      	b.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006080:	4baf      	ldr	r3, [pc, #700]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006084:	4aae      	ldr	r2, [pc, #696]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006086:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800608a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800608c:	e015      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	3304      	adds	r3, #4
 8006092:	2102      	movs	r1, #2
 8006094:	4618      	mov	r0, r3
 8006096:	f001 fd33 	bl	8007b00 <RCCEx_PLL2_Config>
 800609a:	4603      	mov	r3, r0
 800609c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800609e:	e00c      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	3324      	adds	r3, #36	; 0x24
 80060a4:	2102      	movs	r1, #2
 80060a6:	4618      	mov	r0, r3
 80060a8:	f001 fddc 	bl	8007c64 <RCCEx_PLL3_Config>
 80060ac:	4603      	mov	r3, r0
 80060ae:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80060b0:	e003      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	75fb      	strb	r3, [r7, #23]
      break;
 80060b6:	e000      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80060b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060ba:	7dfb      	ldrb	r3, [r7, #23]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d109      	bne.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80060c0:	4b9f      	ldr	r3, [pc, #636]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80060c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060cc:	499c      	ldr	r1, [pc, #624]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	650b      	str	r3, [r1, #80]	; 0x50
 80060d2:	e001      	b.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060d4:	7dfb      	ldrb	r3, [r7, #23]
 80060d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d03d      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e8:	2b04      	cmp	r3, #4
 80060ea:	d826      	bhi.n	800613a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80060ec:	a201      	add	r2, pc, #4	; (adr r2, 80060f4 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80060ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f2:	bf00      	nop
 80060f4:	08006109 	.word	0x08006109
 80060f8:	08006117 	.word	0x08006117
 80060fc:	08006129 	.word	0x08006129
 8006100:	08006141 	.word	0x08006141
 8006104:	08006141 	.word	0x08006141
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006108:	4b8d      	ldr	r3, [pc, #564]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800610a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610c:	4a8c      	ldr	r2, [pc, #560]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800610e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006112:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006114:	e015      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	3304      	adds	r3, #4
 800611a:	2100      	movs	r1, #0
 800611c:	4618      	mov	r0, r3
 800611e:	f001 fcef 	bl	8007b00 <RCCEx_PLL2_Config>
 8006122:	4603      	mov	r3, r0
 8006124:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006126:	e00c      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	3324      	adds	r3, #36	; 0x24
 800612c:	2100      	movs	r1, #0
 800612e:	4618      	mov	r0, r3
 8006130:	f001 fd98 	bl	8007c64 <RCCEx_PLL3_Config>
 8006134:	4603      	mov	r3, r0
 8006136:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006138:	e003      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	75fb      	strb	r3, [r7, #23]
      break;
 800613e:	e000      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006140:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006142:	7dfb      	ldrb	r3, [r7, #23]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d109      	bne.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006148:	4b7d      	ldr	r3, [pc, #500]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800614a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800614c:	f023 0207 	bic.w	r2, r3, #7
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006154:	497a      	ldr	r1, [pc, #488]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006156:	4313      	orrs	r3, r2
 8006158:	650b      	str	r3, [r1, #80]	; 0x50
 800615a:	e001      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800615c:	7dfb      	ldrb	r3, [r7, #23]
 800615e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006168:	2b00      	cmp	r3, #0
 800616a:	d03e      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006170:	2b80      	cmp	r3, #128	; 0x80
 8006172:	d01c      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006174:	2b80      	cmp	r3, #128	; 0x80
 8006176:	d804      	bhi.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006178:	2b00      	cmp	r3, #0
 800617a:	d008      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800617c:	2b40      	cmp	r3, #64	; 0x40
 800617e:	d00d      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006180:	e01e      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006182:	2bc0      	cmp	r3, #192	; 0xc0
 8006184:	d01f      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006186:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800618a:	d01e      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800618c:	e018      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800618e:	4b6c      	ldr	r3, [pc, #432]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006192:	4a6b      	ldr	r2, [pc, #428]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006198:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800619a:	e017      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	3304      	adds	r3, #4
 80061a0:	2100      	movs	r1, #0
 80061a2:	4618      	mov	r0, r3
 80061a4:	f001 fcac 	bl	8007b00 <RCCEx_PLL2_Config>
 80061a8:	4603      	mov	r3, r0
 80061aa:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80061ac:	e00e      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	3324      	adds	r3, #36	; 0x24
 80061b2:	2100      	movs	r1, #0
 80061b4:	4618      	mov	r0, r3
 80061b6:	f001 fd55 	bl	8007c64 <RCCEx_PLL3_Config>
 80061ba:	4603      	mov	r3, r0
 80061bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80061be:	e005      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	75fb      	strb	r3, [r7, #23]
      break;
 80061c4:	e002      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80061c6:	bf00      	nop
 80061c8:	e000      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80061ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061cc:	7dfb      	ldrb	r3, [r7, #23]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d109      	bne.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80061d2:	4b5b      	ldr	r3, [pc, #364]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80061d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061d6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061de:	4958      	ldr	r1, [pc, #352]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80061e0:	4313      	orrs	r3, r2
 80061e2:	650b      	str	r3, [r1, #80]	; 0x50
 80061e4:	e001      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061e6:	7dfb      	ldrb	r3, [r7, #23]
 80061e8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d044      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80061fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006200:	d01f      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006202:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006206:	d805      	bhi.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00a      	beq.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800620c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006210:	d00e      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8006212:	e01f      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8006214:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006218:	d01f      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800621a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800621e:	d01e      	beq.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006220:	e018      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006222:	4b47      	ldr	r3, [pc, #284]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006226:	4a46      	ldr	r2, [pc, #280]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800622c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800622e:	e017      	b.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	3304      	adds	r3, #4
 8006234:	2100      	movs	r1, #0
 8006236:	4618      	mov	r0, r3
 8006238:	f001 fc62 	bl	8007b00 <RCCEx_PLL2_Config>
 800623c:	4603      	mov	r3, r0
 800623e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006240:	e00e      	b.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	3324      	adds	r3, #36	; 0x24
 8006246:	2100      	movs	r1, #0
 8006248:	4618      	mov	r0, r3
 800624a:	f001 fd0b 	bl	8007c64 <RCCEx_PLL3_Config>
 800624e:	4603      	mov	r3, r0
 8006250:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006252:	e005      	b.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	75fb      	strb	r3, [r7, #23]
      break;
 8006258:	e002      	b.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800625a:	bf00      	nop
 800625c:	e000      	b.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800625e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006260:	7dfb      	ldrb	r3, [r7, #23]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10a      	bne.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006266:	4b36      	ldr	r3, [pc, #216]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800626a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006274:	4932      	ldr	r1, [pc, #200]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006276:	4313      	orrs	r3, r2
 8006278:	658b      	str	r3, [r1, #88]	; 0x58
 800627a:	e001      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800627c:	7dfb      	ldrb	r3, [r7, #23]
 800627e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006288:	2b00      	cmp	r3, #0
 800628a:	d044      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006292:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006296:	d01f      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006298:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800629c:	d805      	bhi.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00a      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80062a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80062a6:	d00e      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80062a8:	e01f      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80062aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80062ae:	d01f      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80062b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062b4:	d01e      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80062b6:	e018      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062b8:	4b21      	ldr	r3, [pc, #132]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062bc:	4a20      	ldr	r2, [pc, #128]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062c4:	e017      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	3304      	adds	r3, #4
 80062ca:	2100      	movs	r1, #0
 80062cc:	4618      	mov	r0, r3
 80062ce:	f001 fc17 	bl	8007b00 <RCCEx_PLL2_Config>
 80062d2:	4603      	mov	r3, r0
 80062d4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80062d6:	e00e      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	3324      	adds	r3, #36	; 0x24
 80062dc:	2100      	movs	r1, #0
 80062de:	4618      	mov	r0, r3
 80062e0:	f001 fcc0 	bl	8007c64 <RCCEx_PLL3_Config>
 80062e4:	4603      	mov	r3, r0
 80062e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062e8:	e005      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	75fb      	strb	r3, [r7, #23]
      break;
 80062ee:	e002      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80062f0:	bf00      	nop
 80062f2:	e000      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80062f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062f6:	7dfb      	ldrb	r3, [r7, #23]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10a      	bne.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80062fc:	4b10      	ldr	r3, [pc, #64]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80062fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006300:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800630a:	490d      	ldr	r1, [pc, #52]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800630c:	4313      	orrs	r3, r2
 800630e:	658b      	str	r3, [r1, #88]	; 0x58
 8006310:	e001      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006312:	7dfb      	ldrb	r3, [r7, #23]
 8006314:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800631e:	2b00      	cmp	r3, #0
 8006320:	d035      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006326:	2b10      	cmp	r3, #16
 8006328:	d00c      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800632a:	2b10      	cmp	r3, #16
 800632c:	d802      	bhi.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800632e:	2b00      	cmp	r3, #0
 8006330:	d01b      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8006332:	e017      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006334:	2b20      	cmp	r3, #32
 8006336:	d00c      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8006338:	2b30      	cmp	r3, #48	; 0x30
 800633a:	d018      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800633c:	e012      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800633e:	bf00      	nop
 8006340:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006344:	4baf      	ldr	r3, [pc, #700]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006348:	4aae      	ldr	r2, [pc, #696]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800634a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800634e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006350:	e00e      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	3304      	adds	r3, #4
 8006356:	2102      	movs	r1, #2
 8006358:	4618      	mov	r0, r3
 800635a:	f001 fbd1 	bl	8007b00 <RCCEx_PLL2_Config>
 800635e:	4603      	mov	r3, r0
 8006360:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006362:	e005      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	75fb      	strb	r3, [r7, #23]
      break;
 8006368:	e002      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800636a:	bf00      	nop
 800636c:	e000      	b.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800636e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006370:	7dfb      	ldrb	r3, [r7, #23]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d109      	bne.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006376:	4ba3      	ldr	r3, [pc, #652]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800637a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006382:	49a0      	ldr	r1, [pc, #640]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006384:	4313      	orrs	r3, r2
 8006386:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006388:	e001      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800638a:	7dfb      	ldrb	r3, [r7, #23]
 800638c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d042      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800639e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063a2:	d01f      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80063a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063a8:	d805      	bhi.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00a      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80063ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063b2:	d00e      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80063b4:	e01f      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80063b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063ba:	d01f      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80063bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063c0:	d01e      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80063c2:	e018      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063c4:	4b8f      	ldr	r3, [pc, #572]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80063c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c8:	4a8e      	ldr	r2, [pc, #568]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80063ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80063d0:	e017      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	3304      	adds	r3, #4
 80063d6:	2100      	movs	r1, #0
 80063d8:	4618      	mov	r0, r3
 80063da:	f001 fb91 	bl	8007b00 <RCCEx_PLL2_Config>
 80063de:	4603      	mov	r3, r0
 80063e0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80063e2:	e00e      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	3324      	adds	r3, #36	; 0x24
 80063e8:	2100      	movs	r1, #0
 80063ea:	4618      	mov	r0, r3
 80063ec:	f001 fc3a 	bl	8007c64 <RCCEx_PLL3_Config>
 80063f0:	4603      	mov	r3, r0
 80063f2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80063f4:	e005      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	75fb      	strb	r3, [r7, #23]
      break;
 80063fa:	e002      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80063fc:	bf00      	nop
 80063fe:	e000      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006400:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006402:	7dfb      	ldrb	r3, [r7, #23]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d109      	bne.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006408:	4b7e      	ldr	r3, [pc, #504]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800640a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800640c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006414:	497b      	ldr	r1, [pc, #492]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006416:	4313      	orrs	r3, r2
 8006418:	650b      	str	r3, [r1, #80]	; 0x50
 800641a:	e001      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800641c:	7dfb      	ldrb	r3, [r7, #23]
 800641e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d042      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006430:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006434:	d01b      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006436:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800643a:	d805      	bhi.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800643c:	2b00      	cmp	r3, #0
 800643e:	d022      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8006440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006444:	d00a      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006446:	e01b      	b.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006448:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800644c:	d01d      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800644e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006452:	d01c      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8006454:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006458:	d01b      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800645a:	e011      	b.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	3304      	adds	r3, #4
 8006460:	2101      	movs	r1, #1
 8006462:	4618      	mov	r0, r3
 8006464:	f001 fb4c 	bl	8007b00 <RCCEx_PLL2_Config>
 8006468:	4603      	mov	r3, r0
 800646a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800646c:	e012      	b.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	3324      	adds	r3, #36	; 0x24
 8006472:	2101      	movs	r1, #1
 8006474:	4618      	mov	r0, r3
 8006476:	f001 fbf5 	bl	8007c64 <RCCEx_PLL3_Config>
 800647a:	4603      	mov	r3, r0
 800647c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800647e:	e009      	b.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	75fb      	strb	r3, [r7, #23]
      break;
 8006484:	e006      	b.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006486:	bf00      	nop
 8006488:	e004      	b.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800648a:	bf00      	nop
 800648c:	e002      	b.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800648e:	bf00      	nop
 8006490:	e000      	b.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006492:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006494:	7dfb      	ldrb	r3, [r7, #23]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d109      	bne.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800649a:	4b5a      	ldr	r3, [pc, #360]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800649c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800649e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064a6:	4957      	ldr	r1, [pc, #348]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80064a8:	4313      	orrs	r3, r2
 80064aa:	650b      	str	r3, [r1, #80]	; 0x50
 80064ac:	e001      	b.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ae:	7dfb      	ldrb	r3, [r7, #23]
 80064b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d044      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80064c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064c8:	d01b      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80064ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064ce:	d805      	bhi.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d022      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80064d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064d8:	d00a      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80064da:	e01b      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80064dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064e0:	d01d      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80064e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064e6:	d01c      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80064e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80064ec:	d01b      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80064ee:	e011      	b.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	3304      	adds	r3, #4
 80064f4:	2101      	movs	r1, #1
 80064f6:	4618      	mov	r0, r3
 80064f8:	f001 fb02 	bl	8007b00 <RCCEx_PLL2_Config>
 80064fc:	4603      	mov	r3, r0
 80064fe:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006500:	e012      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	3324      	adds	r3, #36	; 0x24
 8006506:	2101      	movs	r1, #1
 8006508:	4618      	mov	r0, r3
 800650a:	f001 fbab 	bl	8007c64 <RCCEx_PLL3_Config>
 800650e:	4603      	mov	r3, r0
 8006510:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006512:	e009      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	75fb      	strb	r3, [r7, #23]
      break;
 8006518:	e006      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800651a:	bf00      	nop
 800651c:	e004      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800651e:	bf00      	nop
 8006520:	e002      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006522:	bf00      	nop
 8006524:	e000      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8006526:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006528:	7dfb      	ldrb	r3, [r7, #23]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10a      	bne.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800652e:	4b35      	ldr	r3, [pc, #212]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006532:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800653c:	4931      	ldr	r1, [pc, #196]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800653e:	4313      	orrs	r3, r2
 8006540:	658b      	str	r3, [r1, #88]	; 0x58
 8006542:	e001      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006544:	7dfb      	ldrb	r3, [r7, #23]
 8006546:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d02d      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006558:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800655c:	d005      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800655e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006562:	d009      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8006564:	2b00      	cmp	r3, #0
 8006566:	d013      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006568:	e00f      	b.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800656a:	4b26      	ldr	r3, [pc, #152]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800656c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656e:	4a25      	ldr	r2, [pc, #148]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006574:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006576:	e00c      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	3304      	adds	r3, #4
 800657c:	2101      	movs	r1, #1
 800657e:	4618      	mov	r0, r3
 8006580:	f001 fabe 	bl	8007b00 <RCCEx_PLL2_Config>
 8006584:	4603      	mov	r3, r0
 8006586:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006588:	e003      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	75fb      	strb	r3, [r7, #23]
      break;
 800658e:	e000      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8006590:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006592:	7dfb      	ldrb	r3, [r7, #23]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d109      	bne.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006598:	4b1a      	ldr	r3, [pc, #104]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800659a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800659c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065a4:	4917      	ldr	r1, [pc, #92]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	650b      	str	r3, [r1, #80]	; 0x50
 80065aa:	e001      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ac:	7dfb      	ldrb	r3, [r7, #23]
 80065ae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d035      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c0:	2b03      	cmp	r3, #3
 80065c2:	d81b      	bhi.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80065c4:	a201      	add	r2, pc, #4	; (adr r2, 80065cc <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80065c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ca:	bf00      	nop
 80065cc:	08006609 	.word	0x08006609
 80065d0:	080065dd 	.word	0x080065dd
 80065d4:	080065eb 	.word	0x080065eb
 80065d8:	08006609 	.word	0x08006609
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065dc:	4b09      	ldr	r3, [pc, #36]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e0:	4a08      	ldr	r2, [pc, #32]	; (8006604 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80065e8:	e00f      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	3304      	adds	r3, #4
 80065ee:	2102      	movs	r1, #2
 80065f0:	4618      	mov	r0, r3
 80065f2:	f001 fa85 	bl	8007b00 <RCCEx_PLL2_Config>
 80065f6:	4603      	mov	r3, r0
 80065f8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80065fa:	e006      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006600:	e003      	b.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8006602:	bf00      	nop
 8006604:	58024400 	.word	0x58024400
      break;
 8006608:	bf00      	nop
    }

    if(ret == HAL_OK)
 800660a:	7dfb      	ldrb	r3, [r7, #23]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d109      	bne.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006610:	4bba      	ldr	r3, [pc, #744]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006614:	f023 0203 	bic.w	r2, r3, #3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800661c:	49b7      	ldr	r1, [pc, #732]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800661e:	4313      	orrs	r3, r2
 8006620:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006622:	e001      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006624:	7dfb      	ldrb	r3, [r7, #23]
 8006626:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006630:	2b00      	cmp	r3, #0
 8006632:	f000 8086 	beq.w	8006742 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006636:	4bb2      	ldr	r3, [pc, #712]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4ab1      	ldr	r2, [pc, #708]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800663c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006640:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006642:	f7fa ffa7 	bl	8001594 <HAL_GetTick>
 8006646:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006648:	e009      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800664a:	f7fa ffa3 	bl	8001594 <HAL_GetTick>
 800664e:	4602      	mov	r2, r0
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	2b64      	cmp	r3, #100	; 0x64
 8006656:	d902      	bls.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	75fb      	strb	r3, [r7, #23]
        break;
 800665c:	e005      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800665e:	4ba8      	ldr	r3, [pc, #672]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006666:	2b00      	cmp	r3, #0
 8006668:	d0ef      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800666a:	7dfb      	ldrb	r3, [r7, #23]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d166      	bne.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006670:	4ba2      	ldr	r3, [pc, #648]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006672:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800667a:	4053      	eors	r3, r2
 800667c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006680:	2b00      	cmp	r3, #0
 8006682:	d013      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006684:	4b9d      	ldr	r3, [pc, #628]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800668c:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800668e:	4b9b      	ldr	r3, [pc, #620]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006692:	4a9a      	ldr	r2, [pc, #616]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006698:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800669a:	4b98      	ldr	r3, [pc, #608]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800669c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800669e:	4a97      	ldr	r2, [pc, #604]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066a4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80066a6:	4a95      	ldr	r2, [pc, #596]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80066b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066b6:	d115      	bne.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066b8:	f7fa ff6c 	bl	8001594 <HAL_GetTick>
 80066bc:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066be:	e00b      	b.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066c0:	f7fa ff68 	bl	8001594 <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d902      	bls.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	75fb      	strb	r3, [r7, #23]
            break;
 80066d6:	e005      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066d8:	4b88      	ldr	r3, [pc, #544]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066dc:	f003 0302 	and.w	r3, r3, #2
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d0ed      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80066e4:	7dfb      	ldrb	r3, [r7, #23]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d126      	bne.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80066f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066f8:	d10d      	bne.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80066fa:	4b80      	ldr	r3, [pc, #512]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006708:	0919      	lsrs	r1, r3, #4
 800670a:	4b7e      	ldr	r3, [pc, #504]	; (8006904 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800670c:	400b      	ands	r3, r1
 800670e:	497b      	ldr	r1, [pc, #492]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006710:	4313      	orrs	r3, r2
 8006712:	610b      	str	r3, [r1, #16]
 8006714:	e005      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8006716:	4b79      	ldr	r3, [pc, #484]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	4a78      	ldr	r2, [pc, #480]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800671c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006720:	6113      	str	r3, [r2, #16]
 8006722:	4b76      	ldr	r3, [pc, #472]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006724:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800672c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006730:	4972      	ldr	r1, [pc, #456]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006732:	4313      	orrs	r3, r2
 8006734:	670b      	str	r3, [r1, #112]	; 0x70
 8006736:	e004      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006738:	7dfb      	ldrb	r3, [r7, #23]
 800673a:	75bb      	strb	r3, [r7, #22]
 800673c:	e001      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800673e:	7dfb      	ldrb	r3, [r7, #23]
 8006740:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	2b00      	cmp	r3, #0
 800674c:	d07d      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006752:	2b28      	cmp	r3, #40	; 0x28
 8006754:	d866      	bhi.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8006756:	a201      	add	r2, pc, #4	; (adr r2, 800675c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675c:	0800682b 	.word	0x0800682b
 8006760:	08006825 	.word	0x08006825
 8006764:	08006825 	.word	0x08006825
 8006768:	08006825 	.word	0x08006825
 800676c:	08006825 	.word	0x08006825
 8006770:	08006825 	.word	0x08006825
 8006774:	08006825 	.word	0x08006825
 8006778:	08006825 	.word	0x08006825
 800677c:	08006801 	.word	0x08006801
 8006780:	08006825 	.word	0x08006825
 8006784:	08006825 	.word	0x08006825
 8006788:	08006825 	.word	0x08006825
 800678c:	08006825 	.word	0x08006825
 8006790:	08006825 	.word	0x08006825
 8006794:	08006825 	.word	0x08006825
 8006798:	08006825 	.word	0x08006825
 800679c:	08006813 	.word	0x08006813
 80067a0:	08006825 	.word	0x08006825
 80067a4:	08006825 	.word	0x08006825
 80067a8:	08006825 	.word	0x08006825
 80067ac:	08006825 	.word	0x08006825
 80067b0:	08006825 	.word	0x08006825
 80067b4:	08006825 	.word	0x08006825
 80067b8:	08006825 	.word	0x08006825
 80067bc:	0800682b 	.word	0x0800682b
 80067c0:	08006825 	.word	0x08006825
 80067c4:	08006825 	.word	0x08006825
 80067c8:	08006825 	.word	0x08006825
 80067cc:	08006825 	.word	0x08006825
 80067d0:	08006825 	.word	0x08006825
 80067d4:	08006825 	.word	0x08006825
 80067d8:	08006825 	.word	0x08006825
 80067dc:	0800682b 	.word	0x0800682b
 80067e0:	08006825 	.word	0x08006825
 80067e4:	08006825 	.word	0x08006825
 80067e8:	08006825 	.word	0x08006825
 80067ec:	08006825 	.word	0x08006825
 80067f0:	08006825 	.word	0x08006825
 80067f4:	08006825 	.word	0x08006825
 80067f8:	08006825 	.word	0x08006825
 80067fc:	0800682b 	.word	0x0800682b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	3304      	adds	r3, #4
 8006804:	2101      	movs	r1, #1
 8006806:	4618      	mov	r0, r3
 8006808:	f001 f97a 	bl	8007b00 <RCCEx_PLL2_Config>
 800680c:	4603      	mov	r3, r0
 800680e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006810:	e00c      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	3324      	adds	r3, #36	; 0x24
 8006816:	2101      	movs	r1, #1
 8006818:	4618      	mov	r0, r3
 800681a:	f001 fa23 	bl	8007c64 <RCCEx_PLL3_Config>
 800681e:	4603      	mov	r3, r0
 8006820:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006822:	e003      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	75fb      	strb	r3, [r7, #23]
      break;
 8006828:	e000      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800682a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800682c:	7dfb      	ldrb	r3, [r7, #23]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d109      	bne.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006832:	4b32      	ldr	r3, [pc, #200]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006836:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800683e:	492f      	ldr	r1, [pc, #188]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006840:	4313      	orrs	r3, r2
 8006842:	654b      	str	r3, [r1, #84]	; 0x54
 8006844:	e001      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006846:	7dfb      	ldrb	r3, [r7, #23]
 8006848:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0302 	and.w	r3, r3, #2
 8006852:	2b00      	cmp	r3, #0
 8006854:	d037      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800685a:	2b05      	cmp	r3, #5
 800685c:	d820      	bhi.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800685e:	a201      	add	r2, pc, #4	; (adr r2, 8006864 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8006860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006864:	080068a7 	.word	0x080068a7
 8006868:	0800687d 	.word	0x0800687d
 800686c:	0800688f 	.word	0x0800688f
 8006870:	080068a7 	.word	0x080068a7
 8006874:	080068a7 	.word	0x080068a7
 8006878:	080068a7 	.word	0x080068a7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	3304      	adds	r3, #4
 8006880:	2101      	movs	r1, #1
 8006882:	4618      	mov	r0, r3
 8006884:	f001 f93c 	bl	8007b00 <RCCEx_PLL2_Config>
 8006888:	4603      	mov	r3, r0
 800688a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800688c:	e00c      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	3324      	adds	r3, #36	; 0x24
 8006892:	2101      	movs	r1, #1
 8006894:	4618      	mov	r0, r3
 8006896:	f001 f9e5 	bl	8007c64 <RCCEx_PLL3_Config>
 800689a:	4603      	mov	r3, r0
 800689c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800689e:	e003      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	75fb      	strb	r3, [r7, #23]
      break;
 80068a4:	e000      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80068a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068a8:	7dfb      	ldrb	r3, [r7, #23]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d109      	bne.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80068ae:	4b13      	ldr	r3, [pc, #76]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068b2:	f023 0207 	bic.w	r2, r3, #7
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ba:	4910      	ldr	r1, [pc, #64]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068bc:	4313      	orrs	r3, r2
 80068be:	654b      	str	r3, [r1, #84]	; 0x54
 80068c0:	e001      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068c2:	7dfb      	ldrb	r3, [r7, #23]
 80068c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0304 	and.w	r3, r3, #4
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d040      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068d8:	2b05      	cmp	r3, #5
 80068da:	d827      	bhi.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80068dc:	a201      	add	r2, pc, #4	; (adr r2, 80068e4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80068de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e2:	bf00      	nop
 80068e4:	08006933 	.word	0x08006933
 80068e8:	08006909 	.word	0x08006909
 80068ec:	0800691b 	.word	0x0800691b
 80068f0:	08006933 	.word	0x08006933
 80068f4:	08006933 	.word	0x08006933
 80068f8:	08006933 	.word	0x08006933
 80068fc:	58024400 	.word	0x58024400
 8006900:	58024800 	.word	0x58024800
 8006904:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	3304      	adds	r3, #4
 800690c:	2101      	movs	r1, #1
 800690e:	4618      	mov	r0, r3
 8006910:	f001 f8f6 	bl	8007b00 <RCCEx_PLL2_Config>
 8006914:	4603      	mov	r3, r0
 8006916:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006918:	e00c      	b.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	3324      	adds	r3, #36	; 0x24
 800691e:	2101      	movs	r1, #1
 8006920:	4618      	mov	r0, r3
 8006922:	f001 f99f 	bl	8007c64 <RCCEx_PLL3_Config>
 8006926:	4603      	mov	r3, r0
 8006928:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800692a:	e003      	b.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	75fb      	strb	r3, [r7, #23]
      break;
 8006930:	e000      	b.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8006932:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006934:	7dfb      	ldrb	r3, [r7, #23]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10a      	bne.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800693a:	4bb2      	ldr	r3, [pc, #712]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800693c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800693e:	f023 0207 	bic.w	r2, r3, #7
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006948:	49ae      	ldr	r1, [pc, #696]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800694a:	4313      	orrs	r3, r2
 800694c:	658b      	str	r3, [r1, #88]	; 0x58
 800694e:	e001      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006950:	7dfb      	ldrb	r3, [r7, #23]
 8006952:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 0320 	and.w	r3, r3, #32
 800695c:	2b00      	cmp	r3, #0
 800695e:	d044      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006966:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800696a:	d01b      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800696c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006970:	d805      	bhi.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8006972:	2b00      	cmp	r3, #0
 8006974:	d022      	beq.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8006976:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800697a:	d00a      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800697c:	e01b      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800697e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006982:	d01d      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8006984:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006988:	d01c      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800698a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800698e:	d01b      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006990:	e011      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	3304      	adds	r3, #4
 8006996:	2100      	movs	r1, #0
 8006998:	4618      	mov	r0, r3
 800699a:	f001 f8b1 	bl	8007b00 <RCCEx_PLL2_Config>
 800699e:	4603      	mov	r3, r0
 80069a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80069a2:	e012      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	3324      	adds	r3, #36	; 0x24
 80069a8:	2102      	movs	r1, #2
 80069aa:	4618      	mov	r0, r3
 80069ac:	f001 f95a 	bl	8007c64 <RCCEx_PLL3_Config>
 80069b0:	4603      	mov	r3, r0
 80069b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80069b4:	e009      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	75fb      	strb	r3, [r7, #23]
      break;
 80069ba:	e006      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80069bc:	bf00      	nop
 80069be:	e004      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80069c0:	bf00      	nop
 80069c2:	e002      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80069c4:	bf00      	nop
 80069c6:	e000      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80069c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069ca:	7dfb      	ldrb	r3, [r7, #23]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10a      	bne.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80069d0:	4b8c      	ldr	r3, [pc, #560]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80069d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069d4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069de:	4989      	ldr	r1, [pc, #548]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80069e0:	4313      	orrs	r3, r2
 80069e2:	654b      	str	r3, [r1, #84]	; 0x54
 80069e4:	e001      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069e6:	7dfb      	ldrb	r3, [r7, #23]
 80069e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d044      	beq.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80069fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a00:	d01b      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8006a02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a06:	d805      	bhi.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d022      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a10:	d00a      	beq.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8006a12:	e01b      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8006a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a18:	d01d      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8006a1a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006a1e:	d01c      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8006a20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a24:	d01b      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8006a26:	e011      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	3304      	adds	r3, #4
 8006a2c:	2100      	movs	r1, #0
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f001 f866 	bl	8007b00 <RCCEx_PLL2_Config>
 8006a34:	4603      	mov	r3, r0
 8006a36:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006a38:	e012      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	3324      	adds	r3, #36	; 0x24
 8006a3e:	2102      	movs	r1, #2
 8006a40:	4618      	mov	r0, r3
 8006a42:	f001 f90f 	bl	8007c64 <RCCEx_PLL3_Config>
 8006a46:	4603      	mov	r3, r0
 8006a48:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006a4a:	e009      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a50:	e006      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006a52:	bf00      	nop
 8006a54:	e004      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006a56:	bf00      	nop
 8006a58:	e002      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006a5a:	bf00      	nop
 8006a5c:	e000      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006a5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a60:	7dfb      	ldrb	r3, [r7, #23]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d10a      	bne.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a66:	4b67      	ldr	r3, [pc, #412]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a6a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a74:	4963      	ldr	r1, [pc, #396]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006a76:	4313      	orrs	r3, r2
 8006a78:	658b      	str	r3, [r1, #88]	; 0x58
 8006a7a:	e001      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a7c:	7dfb      	ldrb	r3, [r7, #23]
 8006a7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d044      	beq.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a96:	d01b      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8006a98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a9c:	d805      	bhi.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d022      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006aa6:	d00a      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006aa8:	e01b      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8006aaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006aae:	d01d      	beq.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006ab0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006ab4:	d01c      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8006ab6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006aba:	d01b      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006abc:	e011      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	3304      	adds	r3, #4
 8006ac2:	2100      	movs	r1, #0
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f001 f81b 	bl	8007b00 <RCCEx_PLL2_Config>
 8006aca:	4603      	mov	r3, r0
 8006acc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006ace:	e012      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	3324      	adds	r3, #36	; 0x24
 8006ad4:	2102      	movs	r1, #2
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f001 f8c4 	bl	8007c64 <RCCEx_PLL3_Config>
 8006adc:	4603      	mov	r3, r0
 8006ade:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006ae0:	e009      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ae6:	e006      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006ae8:	bf00      	nop
 8006aea:	e004      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006aec:	bf00      	nop
 8006aee:	e002      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006af0:	bf00      	nop
 8006af2:	e000      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006af4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006af6:	7dfb      	ldrb	r3, [r7, #23]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10a      	bne.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006afc:	4b41      	ldr	r3, [pc, #260]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b00:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b0a:	493e      	ldr	r1, [pc, #248]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	658b      	str	r3, [r1, #88]	; 0x58
 8006b10:	e001      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b12:	7dfb      	ldrb	r3, [r7, #23]
 8006b14:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0308 	and.w	r3, r3, #8
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d01a      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b2c:	d10a      	bne.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	3324      	adds	r3, #36	; 0x24
 8006b32:	2102      	movs	r1, #2
 8006b34:	4618      	mov	r0, r3
 8006b36:	f001 f895 	bl	8007c64 <RCCEx_PLL3_Config>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d001      	beq.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006b44:	4b2f      	ldr	r3, [pc, #188]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b52:	492c      	ldr	r1, [pc, #176]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006b54:	4313      	orrs	r3, r2
 8006b56:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 0310 	and.w	r3, r3, #16
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d01a      	beq.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b6e:	d10a      	bne.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	3324      	adds	r3, #36	; 0x24
 8006b74:	2102      	movs	r1, #2
 8006b76:	4618      	mov	r0, r3
 8006b78:	f001 f874 	bl	8007c64 <RCCEx_PLL3_Config>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d001      	beq.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006b86:	4b1f      	ldr	r3, [pc, #124]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b94:	491b      	ldr	r1, [pc, #108]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006b96:	4313      	orrs	r3, r2
 8006b98:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d032      	beq.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bb0:	d00d      	beq.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8006bb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bb6:	d016      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d111      	bne.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	3304      	adds	r3, #4
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f000 ff9c 	bl	8007b00 <RCCEx_PLL2_Config>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006bcc:	e00c      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	3324      	adds	r3, #36	; 0x24
 8006bd2:	2102      	movs	r1, #2
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f001 f845 	bl	8007c64 <RCCEx_PLL3_Config>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006bde:	e003      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	75fb      	strb	r3, [r7, #23]
      break;
 8006be4:	e000      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8006be6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006be8:	7dfb      	ldrb	r3, [r7, #23]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d10c      	bne.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006bee:	4b05      	ldr	r3, [pc, #20]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bf2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006bfc:	4901      	ldr	r1, [pc, #4]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	658b      	str	r3, [r1, #88]	; 0x58
 8006c02:	e003      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8006c04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c08:	7dfb      	ldrb	r3, [r7, #23]
 8006c0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d02f      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c22:	d00c      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006c24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c28:	d015      	beq.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8006c2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c2e:	d10f      	bne.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c30:	4b79      	ldr	r3, [pc, #484]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c34:	4a78      	ldr	r2, [pc, #480]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006c36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006c3c:	e00c      	b.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	3324      	adds	r3, #36	; 0x24
 8006c42:	2101      	movs	r1, #1
 8006c44:	4618      	mov	r0, r3
 8006c46:	f001 f80d 	bl	8007c64 <RCCEx_PLL3_Config>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006c4e:	e003      	b.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	75fb      	strb	r3, [r7, #23]
      break;
 8006c54:	e000      	b.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8006c56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c58:	7dfb      	ldrb	r3, [r7, #23]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10a      	bne.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c5e:	4b6e      	ldr	r3, [pc, #440]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c6c:	496a      	ldr	r1, [pc, #424]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	654b      	str	r3, [r1, #84]	; 0x54
 8006c72:	e001      	b.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c74:	7dfb      	ldrb	r3, [r7, #23]
 8006c76:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d029      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d003      	beq.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8006c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c90:	d007      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8006c92:	e00f      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c94:	4b60      	ldr	r3, [pc, #384]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c98:	4a5f      	ldr	r2, [pc, #380]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006c9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006ca0:	e00b      	b.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	3304      	adds	r3, #4
 8006ca6:	2102      	movs	r1, #2
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f000 ff29 	bl	8007b00 <RCCEx_PLL2_Config>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006cb2:	e002      	b.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	75fb      	strb	r3, [r7, #23]
      break;
 8006cb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cba:	7dfb      	ldrb	r3, [r7, #23]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d109      	bne.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006cc0:	4b55      	ldr	r3, [pc, #340]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ccc:	4952      	ldr	r1, [pc, #328]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006cd2:	e001      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cd4:	7dfb      	ldrb	r3, [r7, #23]
 8006cd6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00a      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	3324      	adds	r3, #36	; 0x24
 8006ce8:	2102      	movs	r1, #2
 8006cea:	4618      	mov	r0, r3
 8006cec:	f000 ffba 	bl	8007c64 <RCCEx_PLL3_Config>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d001      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d02f      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d0e:	d00c      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d14:	d802      	bhi.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d011      	beq.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8006d1a:	e00d      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8006d1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d20:	d00f      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8006d22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d26:	d00e      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8006d28:	e006      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d2a:	4b3b      	ldr	r3, [pc, #236]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2e:	4a3a      	ldr	r2, [pc, #232]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d34:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006d36:	e007      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	75fb      	strb	r3, [r7, #23]
      break;
 8006d3c:	e004      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006d3e:	bf00      	nop
 8006d40:	e002      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006d42:	bf00      	nop
 8006d44:	e000      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006d46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d48:	7dfb      	ldrb	r3, [r7, #23]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d109      	bne.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d4e:	4b32      	ldr	r3, [pc, #200]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d5a:	492f      	ldr	r1, [pc, #188]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	654b      	str	r3, [r1, #84]	; 0x54
 8006d60:	e001      	b.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d62:	7dfb      	ldrb	r3, [r7, #23]
 8006d64:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d008      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006d72:	4b29      	ldr	r3, [pc, #164]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d7e:	4926      	ldr	r1, [pc, #152]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006d80:	4313      	orrs	r3, r2
 8006d82:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d009      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006d90:	4b21      	ldr	r3, [pc, #132]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006d92:	691b      	ldr	r3, [r3, #16]
 8006d94:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006d9e:	491e      	ldr	r1, [pc, #120]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006da0:	4313      	orrs	r3, r2
 8006da2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d008      	beq.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006db0:	4b19      	ldr	r3, [pc, #100]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006db4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006dbc:	4916      	ldr	r1, [pc, #88]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00d      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006dce:	4b12      	ldr	r3, [pc, #72]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	4a11      	ldr	r2, [pc, #68]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006dd4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006dd8:	6113      	str	r3, [r2, #16]
 8006dda:	4b0f      	ldr	r3, [pc, #60]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006ddc:	691a      	ldr	r2, [r3, #16]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006de4:	490c      	ldr	r1, [pc, #48]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006de6:	4313      	orrs	r3, r2
 8006de8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	da08      	bge.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006df2:	4b09      	ldr	r3, [pc, #36]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006df6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dfe:	4906      	ldr	r1, [pc, #24]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006e00:	4313      	orrs	r3, r2
 8006e02:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8006e04:	7dbb      	ldrb	r3, [r7, #22]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d101      	bne.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	e000      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3718      	adds	r7, #24
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	58024400 	.word	0x58024400

08006e1c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b090      	sub	sp, #64	; 0x40
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e2a:	d150      	bne.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006e2c:	4ba1      	ldr	r3, [pc, #644]	; (80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e30:	f003 0307 	and.w	r3, r3, #7
 8006e34:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e38:	2b04      	cmp	r3, #4
 8006e3a:	d844      	bhi.n	8006ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8006e3c:	a201      	add	r2, pc, #4	; (adr r2, 8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8006e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e42:	bf00      	nop
 8006e44:	08006e59 	.word	0x08006e59
 8006e48:	08006e69 	.word	0x08006e69
 8006e4c:	08006e79 	.word	0x08006e79
 8006e50:	08006ec1 	.word	0x08006ec1
 8006e54:	08006e89 	.word	0x08006e89
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f000 fd03 	bl	8007868 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e66:	e241      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e68:	f107 0318 	add.w	r3, r7, #24
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f000 fa63 	bl	8007338 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e76:	e239      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e78:	f107 030c 	add.w	r3, r7, #12
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f000 fba7 	bl	80075d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e86:	e231      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006e88:	4b8a      	ldr	r3, [pc, #552]	; (80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e90:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d102      	bne.n	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006e98:	4b87      	ldr	r3, [pc, #540]	; (80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006e9c:	e226      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ea0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ea4:	d102      	bne.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8006ea6:	4b85      	ldr	r3, [pc, #532]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006eaa:	e21f      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006eb2:	d102      	bne.n	8006eba <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8006eb4:	4b82      	ldr	r3, [pc, #520]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006eb8:	e218      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ebe:	e215      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006ec0:	4b80      	ldr	r3, [pc, #512]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ec4:	e212      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006eca:	bf00      	nop
 8006ecc:	e20e      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ed4:	d14f      	bne.n	8006f76 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8006ed6:	4b77      	ldr	r3, [pc, #476]	; (80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eda:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006ede:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee2:	2b80      	cmp	r3, #128	; 0x80
 8006ee4:	d01c      	beq.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8006ee6:	2b80      	cmp	r3, #128	; 0x80
 8006ee8:	d804      	bhi.n	8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d008      	beq.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8006eee:	2b40      	cmp	r3, #64	; 0x40
 8006ef0:	d00e      	beq.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006ef2:	e03c      	b.n	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8006ef4:	2bc0      	cmp	r3, #192	; 0xc0
 8006ef6:	d037      	beq.n	8006f68 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8006ef8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006efc:	d018      	beq.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8006efe:	e036      	b.n	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f04:	4618      	mov	r0, r3
 8006f06:	f000 fcaf 	bl	8007868 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f0e:	e1ed      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f10:	f107 0318 	add.w	r3, r7, #24
 8006f14:	4618      	mov	r0, r3
 8006f16:	f000 fa0f 	bl	8007338 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f1e:	e1e5      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f20:	f107 030c 	add.w	r3, r7, #12
 8006f24:	4618      	mov	r0, r3
 8006f26:	f000 fb53 	bl	80075d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f2e:	e1dd      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006f30:	4b60      	ldr	r3, [pc, #384]	; (80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f38:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d102      	bne.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006f40:	4b5d      	ldr	r3, [pc, #372]	; (80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006f42:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006f44:	e1d2      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f4c:	d102      	bne.n	8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8006f4e:	4b5b      	ldr	r3, [pc, #364]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006f50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f52:	e1cb      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f5a:	d102      	bne.n	8006f62 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8006f5c:	4b58      	ldr	r3, [pc, #352]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f60:	e1c4      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8006f62:	2300      	movs	r3, #0
 8006f64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f66:	e1c1      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006f68:	4b56      	ldr	r3, [pc, #344]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f6c:	e1be      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f72:	bf00      	nop
 8006f74:	e1ba      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f7c:	d153      	bne.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8006f7e:	4b4d      	ldr	r3, [pc, #308]	; (80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f82:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006f86:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f8e:	d01f      	beq.n	8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8006f90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f94:	d805      	bhi.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00a      	beq.n	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8006f9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f9e:	d00f      	beq.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8006fa0:	e03d      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8006fa2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006fa6:	d037      	beq.n	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8006fa8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006fac:	d018      	beq.n	8006fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8006fae:	e036      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f000 fc57 	bl	8007868 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fbe:	e195      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fc0:	f107 0318 	add.w	r3, r7, #24
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f000 f9b7 	bl	8007338 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fce:	e18d      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fd0:	f107 030c 	add.w	r3, r7, #12
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f000 fafb 	bl	80075d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fde:	e185      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006fe0:	4b34      	ldr	r3, [pc, #208]	; (80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fe4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006fe8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d102      	bne.n	8006ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006ff0:	4b31      	ldr	r3, [pc, #196]	; (80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006ff4:	e17a      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ff8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ffc:	d102      	bne.n	8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8006ffe:	4b2f      	ldr	r3, [pc, #188]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007000:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007002:	e173      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007006:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800700a:	d102      	bne.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 800700c:	4b2c      	ldr	r3, [pc, #176]	; (80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800700e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007010:	e16c      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007012:	2300      	movs	r3, #0
 8007014:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007016:	e169      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007018:	4b2a      	ldr	r3, [pc, #168]	; (80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800701a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800701c:	e166      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800701e:	2300      	movs	r3, #0
 8007020:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007022:	bf00      	nop
 8007024:	e162      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800702c:	d15d      	bne.n	80070ea <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800702e:	4b21      	ldr	r3, [pc, #132]	; (80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007032:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007036:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800703e:	d01f      	beq.n	8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007040:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007044:	d805      	bhi.n	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00a      	beq.n	8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800704a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800704e:	d00f      	beq.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8007050:	e047      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8007052:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007056:	d041      	beq.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8007058:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800705c:	d018      	beq.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800705e:	e040      	b.n	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007064:	4618      	mov	r0, r3
 8007066:	f000 fbff 	bl	8007868 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800706a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800706e:	e13d      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007070:	f107 0318 	add.w	r3, r7, #24
 8007074:	4618      	mov	r0, r3
 8007076:	f000 f95f 	bl	8007338 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800707e:	e135      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007080:	f107 030c 	add.w	r3, r7, #12
 8007084:	4618      	mov	r0, r3
 8007086:	f000 faa3 	bl	80075d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800708e:	e12d      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007090:	4b08      	ldr	r3, [pc, #32]	; (80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007094:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007098:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800709a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800709c:	2b00      	cmp	r3, #0
 800709e:	d102      	bne.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80070a0:	4b05      	ldr	r3, [pc, #20]	; (80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80070a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80070a4:	e122      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80070a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070ac:	d10c      	bne.n	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 80070ae:	4b03      	ldr	r3, [pc, #12]	; (80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80070b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070b2:	e11b      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80070b4:	58024400 	.word	0x58024400
 80070b8:	03d09000 	.word	0x03d09000
 80070bc:	003d0900 	.word	0x003d0900
 80070c0:	017d7840 	.word	0x017d7840
 80070c4:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80070c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070ce:	d102      	bne.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 80070d0:	4b89      	ldr	r3, [pc, #548]	; (80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80070d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070d4:	e10a      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80070d6:	2300      	movs	r3, #0
 80070d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070da:	e107      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80070dc:	4b87      	ldr	r3, [pc, #540]	; (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 80070de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070e0:	e104      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80070e2:	2300      	movs	r3, #0
 80070e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070e6:	bf00      	nop
 80070e8:	e100      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070f0:	d153      	bne.n	800719a <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80070f2:	4b83      	ldr	r3, [pc, #524]	; (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80070f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070f6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80070fa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80070fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007102:	d01f      	beq.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8007104:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007108:	d805      	bhi.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00a      	beq.n	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800710e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007112:	d00f      	beq.n	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8007114:	e03d      	b.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8007116:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800711a:	d037      	beq.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800711c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007120:	d018      	beq.n	8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8007122:	e036      	b.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007128:	4618      	mov	r0, r3
 800712a:	f000 fb9d 	bl	8007868 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800712e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007130:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007132:	e0db      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007134:	f107 0318 	add.w	r3, r7, #24
 8007138:	4618      	mov	r0, r3
 800713a:	f000 f8fd 	bl	8007338 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007142:	e0d3      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007144:	f107 030c 	add.w	r3, r7, #12
 8007148:	4618      	mov	r0, r3
 800714a:	f000 fa41 	bl	80075d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007152:	e0cb      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007154:	4b6a      	ldr	r3, [pc, #424]	; (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007158:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800715c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800715e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007160:	2b00      	cmp	r3, #0
 8007162:	d102      	bne.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007164:	4b67      	ldr	r3, [pc, #412]	; (8007304 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007166:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007168:	e0c0      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800716a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800716c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007170:	d102      	bne.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8007172:	4b65      	ldr	r3, [pc, #404]	; (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007174:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007176:	e0b9      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800717a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800717e:	d102      	bne.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8007180:	4b5d      	ldr	r3, [pc, #372]	; (80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007182:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007184:	e0b2      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007186:	2300      	movs	r3, #0
 8007188:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800718a:	e0af      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800718c:	4b5b      	ldr	r3, [pc, #364]	; (80072fc <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800718e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007190:	e0ac      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007192:	2300      	movs	r3, #0
 8007194:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007196:	bf00      	nop
 8007198:	e0a8      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80071a0:	d13d      	bne.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80071a2:	4b57      	ldr	r3, [pc, #348]	; (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80071a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80071aa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80071ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071b2:	d00c      	beq.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80071b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071b8:	d011      	beq.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d12b      	bne.n	8007216 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071be:	f107 0318 	add.w	r3, r7, #24
 80071c2:	4618      	mov	r0, r3
 80071c4:	f000 f8b8 	bl	8007338 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071cc:	e08e      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071ce:	f107 030c 	add.w	r3, r7, #12
 80071d2:	4618      	mov	r0, r3
 80071d4:	f000 f9fc 	bl	80075d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071dc:	e086      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80071de:	4b48      	ldr	r3, [pc, #288]	; (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80071e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80071e6:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80071e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d102      	bne.n	80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80071ee:	4b45      	ldr	r3, [pc, #276]	; (8007304 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80071f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80071f2:	e07b      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80071f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071fa:	d102      	bne.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 80071fc:	4b42      	ldr	r3, [pc, #264]	; (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80071fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007200:	e074      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007204:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007208:	d102      	bne.n	8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800720a:	4b3b      	ldr	r3, [pc, #236]	; (80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800720c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800720e:	e06d      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007210:	2300      	movs	r3, #0
 8007212:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007214:	e06a      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007216:	2300      	movs	r3, #0
 8007218:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800721a:	bf00      	nop
 800721c:	e066      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007224:	d11f      	bne.n	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007226:	4b36      	ldr	r3, [pc, #216]	; (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800722a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800722e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007232:	2b00      	cmp	r3, #0
 8007234:	d003      	beq.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800723a:	d008      	beq.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800723c:	e00f      	b.n	800725e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800723e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007242:	4618      	mov	r0, r3
 8007244:	f000 fb10 	bl	8007868 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800724c:	e04e      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800724e:	f107 0318 	add.w	r3, r7, #24
 8007252:	4618      	mov	r0, r3
 8007254:	f000 f870 	bl	8007338 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007258:	6a3b      	ldr	r3, [r7, #32]
 800725a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800725c:	e046      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800725e:	2300      	movs	r3, #0
 8007260:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007262:	bf00      	nop
 8007264:	e042      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800726c:	d13c      	bne.n	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800726e:	4b24      	ldr	r3, [pc, #144]	; (8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007272:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007276:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800727a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800727e:	d01e      	beq.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8007280:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007284:	d805      	bhi.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00d      	beq.n	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800728a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800728e:	d00e      	beq.n	80072ae <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8007290:	e026      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8007292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007296:	d01d      	beq.n	80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8007298:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800729c:	d01d      	beq.n	80072da <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800729e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80072a2:	d014      	beq.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80072a4:	e01c      	b.n	80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80072a6:	f000 f831 	bl	800730c <HAL_RCCEx_GetD3PCLK1Freq>
 80072aa:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80072ac:	e01e      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072ae:	f107 0318 	add.w	r3, r7, #24
 80072b2:	4618      	mov	r0, r3
 80072b4:	f000 f840 	bl	8007338 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072bc:	e016      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072be:	f107 030c 	add.w	r3, r7, #12
 80072c2:	4618      	mov	r0, r3
 80072c4:	f000 f984 	bl	80075d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072cc:	e00e      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 80072ce:	4b0d      	ldr	r3, [pc, #52]	; (8007304 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80072d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072d2:	e00b      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 80072d4:	4b0c      	ldr	r3, [pc, #48]	; (8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80072d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072d8:	e008      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 80072da:	4b07      	ldr	r3, [pc, #28]	; (80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80072dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072de:	e005      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80072e0:	2300      	movs	r3, #0
 80072e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072e4:	bf00      	nop
 80072e6:	e001      	b.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 80072e8:	2300      	movs	r3, #0
 80072ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80072ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3740      	adds	r7, #64	; 0x40
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	017d7840 	.word	0x017d7840
 80072fc:	00bb8000 	.word	0x00bb8000
 8007300:	58024400 	.word	0x58024400
 8007304:	03d09000 	.word	0x03d09000
 8007308:	003d0900 	.word	0x003d0900

0800730c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007310:	f7fe fe3a 	bl	8005f88 <HAL_RCC_GetHCLKFreq>
 8007314:	4601      	mov	r1, r0
 8007316:	4b06      	ldr	r3, [pc, #24]	; (8007330 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007318:	6a1b      	ldr	r3, [r3, #32]
 800731a:	091b      	lsrs	r3, r3, #4
 800731c:	f003 0307 	and.w	r3, r3, #7
 8007320:	4a04      	ldr	r2, [pc, #16]	; (8007334 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007322:	5cd3      	ldrb	r3, [r2, r3]
 8007324:	f003 031f 	and.w	r3, r3, #31
 8007328:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800732c:	4618      	mov	r0, r3
 800732e:	bd80      	pop	{r7, pc}
 8007330:	58024400 	.word	0x58024400
 8007334:	080128e0 	.word	0x080128e0

08007338 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007338:	b480      	push	{r7}
 800733a:	b089      	sub	sp, #36	; 0x24
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007340:	4b9d      	ldr	r3, [pc, #628]	; (80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007344:	f003 0303 	and.w	r3, r3, #3
 8007348:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800734a:	4b9b      	ldr	r3, [pc, #620]	; (80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800734c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800734e:	0b1b      	lsrs	r3, r3, #12
 8007350:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007354:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007356:	4b98      	ldr	r3, [pc, #608]	; (80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735a:	091b      	lsrs	r3, r3, #4
 800735c:	f003 0301 	and.w	r3, r3, #1
 8007360:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007362:	4b95      	ldr	r3, [pc, #596]	; (80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007366:	08db      	lsrs	r3, r3, #3
 8007368:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800736c:	693a      	ldr	r2, [r7, #16]
 800736e:	fb02 f303 	mul.w	r3, r2, r3
 8007372:	ee07 3a90 	vmov	s15, r3
 8007376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800737a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 810a 	beq.w	800759a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	2b01      	cmp	r3, #1
 800738a:	d05a      	beq.n	8007442 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800738c:	2b01      	cmp	r3, #1
 800738e:	d302      	bcc.n	8007396 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8007390:	2b02      	cmp	r3, #2
 8007392:	d078      	beq.n	8007486 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8007394:	e099      	b.n	80074ca <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007396:	4b88      	ldr	r3, [pc, #544]	; (80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 0320 	and.w	r3, r3, #32
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d02d      	beq.n	80073fe <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073a2:	4b85      	ldr	r3, [pc, #532]	; (80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	08db      	lsrs	r3, r3, #3
 80073a8:	f003 0303 	and.w	r3, r3, #3
 80073ac:	4a83      	ldr	r2, [pc, #524]	; (80075bc <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80073ae:	fa22 f303 	lsr.w	r3, r2, r3
 80073b2:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	ee07 3a90 	vmov	s15, r3
 80073ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	ee07 3a90 	vmov	s15, r3
 80073c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073cc:	4b7a      	ldr	r3, [pc, #488]	; (80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80073ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073d4:	ee07 3a90 	vmov	s15, r3
 80073d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80073e0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80073e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073f8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80073fc:	e087      	b.n	800750e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	ee07 3a90 	vmov	s15, r3
 8007404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007408:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80075c4 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800740c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007410:	4b69      	ldr	r3, [pc, #420]	; (80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007414:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007418:	ee07 3a90 	vmov	s15, r3
 800741c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007420:	ed97 6a03 	vldr	s12, [r7, #12]
 8007424:	eddf 5a66 	vldr	s11, [pc, #408]	; 80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007428:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800742c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007430:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007434:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800743c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007440:	e065      	b.n	800750e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	ee07 3a90 	vmov	s15, r3
 8007448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800744c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80075c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007450:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007454:	4b58      	ldr	r3, [pc, #352]	; (80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800745c:	ee07 3a90 	vmov	s15, r3
 8007460:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007464:	ed97 6a03 	vldr	s12, [r7, #12]
 8007468:	eddf 5a55 	vldr	s11, [pc, #340]	; 80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800746c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007470:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007474:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007478:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800747c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007480:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007484:	e043      	b.n	800750e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	ee07 3a90 	vmov	s15, r3
 800748c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007490:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80075cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8007494:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007498:	4b47      	ldr	r3, [pc, #284]	; (80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800749a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800749c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074a0:	ee07 3a90 	vmov	s15, r3
 80074a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80074ac:	eddf 5a44 	vldr	s11, [pc, #272]	; 80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80074b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074c8:	e021      	b.n	800750e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	ee07 3a90 	vmov	s15, r3
 80074d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074d4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80075c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80074d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074dc:	4b36      	ldr	r3, [pc, #216]	; (80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80074de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074e4:	ee07 3a90 	vmov	s15, r3
 80074e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80074f0:	eddf 5a33 	vldr	s11, [pc, #204]	; 80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80074f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007500:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007504:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007508:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800750c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800750e:	4b2a      	ldr	r3, [pc, #168]	; (80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007512:	0a5b      	lsrs	r3, r3, #9
 8007514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007518:	ee07 3a90 	vmov	s15, r3
 800751c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007520:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007524:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007528:	edd7 6a07 	vldr	s13, [r7, #28]
 800752c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007530:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007534:	ee17 2a90 	vmov	r2, s15
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800753c:	4b1e      	ldr	r3, [pc, #120]	; (80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800753e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007540:	0c1b      	lsrs	r3, r3, #16
 8007542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007546:	ee07 3a90 	vmov	s15, r3
 800754a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800754e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007552:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007556:	edd7 6a07 	vldr	s13, [r7, #28]
 800755a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800755e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007562:	ee17 2a90 	vmov	r2, s15
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800756a:	4b13      	ldr	r3, [pc, #76]	; (80075b8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800756c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800756e:	0e1b      	lsrs	r3, r3, #24
 8007570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007574:	ee07 3a90 	vmov	s15, r3
 8007578:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800757c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007580:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007584:	edd7 6a07 	vldr	s13, [r7, #28]
 8007588:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800758c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007590:	ee17 2a90 	vmov	r2, s15
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007598:	e008      	b.n	80075ac <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	609a      	str	r2, [r3, #8]
}
 80075ac:	bf00      	nop
 80075ae:	3724      	adds	r7, #36	; 0x24
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr
 80075b8:	58024400 	.word	0x58024400
 80075bc:	03d09000 	.word	0x03d09000
 80075c0:	46000000 	.word	0x46000000
 80075c4:	4c742400 	.word	0x4c742400
 80075c8:	4a742400 	.word	0x4a742400
 80075cc:	4bbebc20 	.word	0x4bbebc20

080075d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b089      	sub	sp, #36	; 0x24
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075d8:	4b9d      	ldr	r3, [pc, #628]	; (8007850 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80075da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075dc:	f003 0303 	and.w	r3, r3, #3
 80075e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80075e2:	4b9b      	ldr	r3, [pc, #620]	; (8007850 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80075e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e6:	0d1b      	lsrs	r3, r3, #20
 80075e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80075ee:	4b98      	ldr	r3, [pc, #608]	; (8007850 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80075f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f2:	0a1b      	lsrs	r3, r3, #8
 80075f4:	f003 0301 	and.w	r3, r3, #1
 80075f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80075fa:	4b95      	ldr	r3, [pc, #596]	; (8007850 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80075fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075fe:	08db      	lsrs	r3, r3, #3
 8007600:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	fb02 f303 	mul.w	r3, r2, r3
 800760a:	ee07 3a90 	vmov	s15, r3
 800760e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007612:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	2b00      	cmp	r3, #0
 800761a:	f000 810a 	beq.w	8007832 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	2b01      	cmp	r3, #1
 8007622:	d05a      	beq.n	80076da <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8007624:	2b01      	cmp	r3, #1
 8007626:	d302      	bcc.n	800762e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8007628:	2b02      	cmp	r3, #2
 800762a:	d078      	beq.n	800771e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800762c:	e099      	b.n	8007762 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800762e:	4b88      	ldr	r3, [pc, #544]	; (8007850 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f003 0320 	and.w	r3, r3, #32
 8007636:	2b00      	cmp	r3, #0
 8007638:	d02d      	beq.n	8007696 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800763a:	4b85      	ldr	r3, [pc, #532]	; (8007850 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	08db      	lsrs	r3, r3, #3
 8007640:	f003 0303 	and.w	r3, r3, #3
 8007644:	4a83      	ldr	r2, [pc, #524]	; (8007854 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007646:	fa22 f303 	lsr.w	r3, r2, r3
 800764a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	ee07 3a90 	vmov	s15, r3
 8007652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	ee07 3a90 	vmov	s15, r3
 800765c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007660:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007664:	4b7a      	ldr	r3, [pc, #488]	; (8007850 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800766c:	ee07 3a90 	vmov	s15, r3
 8007670:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007674:	ed97 6a03 	vldr	s12, [r7, #12]
 8007678:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007858 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800767c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007680:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007684:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007688:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800768c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007690:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007694:	e087      	b.n	80077a6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	ee07 3a90 	vmov	s15, r3
 800769c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076a0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800785c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80076a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076a8:	4b69      	ldr	r3, [pc, #420]	; (8007850 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80076aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076b0:	ee07 3a90 	vmov	s15, r3
 80076b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80076bc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007858 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80076c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076d8:	e065      	b.n	80077a6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	ee07 3a90 	vmov	s15, r3
 80076e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076e4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80076e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ec:	4b58      	ldr	r3, [pc, #352]	; (8007850 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80076ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076f4:	ee07 3a90 	vmov	s15, r3
 80076f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8007700:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007858 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007704:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007708:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800770c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007710:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007718:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800771c:	e043      	b.n	80077a6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	ee07 3a90 	vmov	s15, r3
 8007724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007728:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007864 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800772c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007730:	4b47      	ldr	r3, [pc, #284]	; (8007850 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007738:	ee07 3a90 	vmov	s15, r3
 800773c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007740:	ed97 6a03 	vldr	s12, [r7, #12]
 8007744:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007858 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007748:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800774c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007750:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007754:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007758:	ee67 7a27 	vmul.f32	s15, s14, s15
 800775c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007760:	e021      	b.n	80077a6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	ee07 3a90 	vmov	s15, r3
 8007768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800776c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007860 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007770:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007774:	4b36      	ldr	r3, [pc, #216]	; (8007850 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800777c:	ee07 3a90 	vmov	s15, r3
 8007780:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007784:	ed97 6a03 	vldr	s12, [r7, #12]
 8007788:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007858 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800778c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007790:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007794:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007798:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800779c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077a0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077a4:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80077a6:	4b2a      	ldr	r3, [pc, #168]	; (8007850 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80077a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077aa:	0a5b      	lsrs	r3, r3, #9
 80077ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077b0:	ee07 3a90 	vmov	s15, r3
 80077b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80077c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077cc:	ee17 2a90 	vmov	r2, s15
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80077d4:	4b1e      	ldr	r3, [pc, #120]	; (8007850 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80077d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d8:	0c1b      	lsrs	r3, r3, #16
 80077da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077de:	ee07 3a90 	vmov	s15, r3
 80077e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80077f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077fa:	ee17 2a90 	vmov	r2, s15
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007802:	4b13      	ldr	r3, [pc, #76]	; (8007850 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007806:	0e1b      	lsrs	r3, r3, #24
 8007808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800780c:	ee07 3a90 	vmov	s15, r3
 8007810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007814:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007818:	ee37 7a87 	vadd.f32	s14, s15, s14
 800781c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007820:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007824:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007828:	ee17 2a90 	vmov	r2, s15
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007830:	e008      	b.n	8007844 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	609a      	str	r2, [r3, #8]
}
 8007844:	bf00      	nop
 8007846:	3724      	adds	r7, #36	; 0x24
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr
 8007850:	58024400 	.word	0x58024400
 8007854:	03d09000 	.word	0x03d09000
 8007858:	46000000 	.word	0x46000000
 800785c:	4c742400 	.word	0x4c742400
 8007860:	4a742400 	.word	0x4a742400
 8007864:	4bbebc20 	.word	0x4bbebc20

08007868 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007868:	b480      	push	{r7}
 800786a:	b089      	sub	sp, #36	; 0x24
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007870:	4b9d      	ldr	r3, [pc, #628]	; (8007ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007874:	f003 0303 	and.w	r3, r3, #3
 8007878:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800787a:	4b9b      	ldr	r3, [pc, #620]	; (8007ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800787c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800787e:	091b      	lsrs	r3, r3, #4
 8007880:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007884:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007886:	4b98      	ldr	r3, [pc, #608]	; (8007ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800788a:	f003 0301 	and.w	r3, r3, #1
 800788e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007890:	4b95      	ldr	r3, [pc, #596]	; (8007ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007894:	08db      	lsrs	r3, r3, #3
 8007896:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800789a:	693a      	ldr	r2, [r7, #16]
 800789c:	fb02 f303 	mul.w	r3, r2, r3
 80078a0:	ee07 3a90 	vmov	s15, r3
 80078a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078a8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	f000 810a 	beq.w	8007ac8 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d05a      	beq.n	8007970 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d302      	bcc.n	80078c4 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 80078be:	2b02      	cmp	r3, #2
 80078c0:	d078      	beq.n	80079b4 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80078c2:	e099      	b.n	80079f8 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078c4:	4b88      	ldr	r3, [pc, #544]	; (8007ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 0320 	and.w	r3, r3, #32
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d02d      	beq.n	800792c <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80078d0:	4b85      	ldr	r3, [pc, #532]	; (8007ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	08db      	lsrs	r3, r3, #3
 80078d6:	f003 0303 	and.w	r3, r3, #3
 80078da:	4a84      	ldr	r2, [pc, #528]	; (8007aec <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 80078dc:	fa22 f303 	lsr.w	r3, r2, r3
 80078e0:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	ee07 3a90 	vmov	s15, r3
 80078e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	ee07 3a90 	vmov	s15, r3
 80078f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078fa:	4b7b      	ldr	r3, [pc, #492]	; (8007ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80078fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007902:	ee07 3a90 	vmov	s15, r3
 8007906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800790a:	ed97 6a03 	vldr	s12, [r7, #12]
 800790e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007af0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800791a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800791e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007926:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800792a:	e087      	b.n	8007a3c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	ee07 3a90 	vmov	s15, r3
 8007932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007936:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007af4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800793a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800793e:	4b6a      	ldr	r3, [pc, #424]	; (8007ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007946:	ee07 3a90 	vmov	s15, r3
 800794a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800794e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007952:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007af0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800795a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800795e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800796a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800796e:	e065      	b.n	8007a3c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	ee07 3a90 	vmov	s15, r3
 8007976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800797a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007af8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800797e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007982:	4b59      	ldr	r3, [pc, #356]	; (8007ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800798a:	ee07 3a90 	vmov	s15, r3
 800798e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007992:	ed97 6a03 	vldr	s12, [r7, #12]
 8007996:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007af0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800799a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800799e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079b2:	e043      	b.n	8007a3c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	ee07 3a90 	vmov	s15, r3
 80079ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079be:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007afc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80079c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079c6:	4b48      	ldr	r3, [pc, #288]	; (8007ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80079c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079ce:	ee07 3a90 	vmov	s15, r3
 80079d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80079da:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007af0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80079de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079f6:	e021      	b.n	8007a3c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	ee07 3a90 	vmov	s15, r3
 80079fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a02:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007af8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a0a:	4b37      	ldr	r3, [pc, #220]	; (8007ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a12:	ee07 3a90 	vmov	s15, r3
 8007a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a1e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007af0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a3a:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007a3c:	4b2a      	ldr	r3, [pc, #168]	; (8007ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a40:	0a5b      	lsrs	r3, r3, #9
 8007a42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a46:	ee07 3a90 	vmov	s15, r3
 8007a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a56:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a62:	ee17 2a90 	vmov	r2, s15
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007a6a:	4b1f      	ldr	r3, [pc, #124]	; (8007ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a6e:	0c1b      	lsrs	r3, r3, #16
 8007a70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a74:	ee07 3a90 	vmov	s15, r3
 8007a78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a84:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a90:	ee17 2a90 	vmov	r2, s15
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007a98:	4b13      	ldr	r3, [pc, #76]	; (8007ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a9c:	0e1b      	lsrs	r3, r3, #24
 8007a9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007aa2:	ee07 3a90 	vmov	s15, r3
 8007aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007aae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ab2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ab6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007aba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007abe:	ee17 2a90 	vmov	r2, s15
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007ac6:	e008      	b.n	8007ada <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	609a      	str	r2, [r3, #8]
}
 8007ada:	bf00      	nop
 8007adc:	3724      	adds	r7, #36	; 0x24
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr
 8007ae6:	bf00      	nop
 8007ae8:	58024400 	.word	0x58024400
 8007aec:	03d09000 	.word	0x03d09000
 8007af0:	46000000 	.word	0x46000000
 8007af4:	4c742400 	.word	0x4c742400
 8007af8:	4a742400 	.word	0x4a742400
 8007afc:	4bbebc20 	.word	0x4bbebc20

08007b00 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b0e:	4b53      	ldr	r3, [pc, #332]	; (8007c5c <RCCEx_PLL2_Config+0x15c>)
 8007b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b12:	f003 0303 	and.w	r3, r3, #3
 8007b16:	2b03      	cmp	r3, #3
 8007b18:	d101      	bne.n	8007b1e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e099      	b.n	8007c52 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007b1e:	4b4f      	ldr	r3, [pc, #316]	; (8007c5c <RCCEx_PLL2_Config+0x15c>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a4e      	ldr	r2, [pc, #312]	; (8007c5c <RCCEx_PLL2_Config+0x15c>)
 8007b24:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b2a:	f7f9 fd33 	bl	8001594 <HAL_GetTick>
 8007b2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b30:	e008      	b.n	8007b44 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007b32:	f7f9 fd2f 	bl	8001594 <HAL_GetTick>
 8007b36:	4602      	mov	r2, r0
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d901      	bls.n	8007b44 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007b40:	2303      	movs	r3, #3
 8007b42:	e086      	b.n	8007c52 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b44:	4b45      	ldr	r3, [pc, #276]	; (8007c5c <RCCEx_PLL2_Config+0x15c>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d1f0      	bne.n	8007b32 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007b50:	4b42      	ldr	r3, [pc, #264]	; (8007c5c <RCCEx_PLL2_Config+0x15c>)
 8007b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b54:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	031b      	lsls	r3, r3, #12
 8007b5e:	493f      	ldr	r1, [pc, #252]	; (8007c5c <RCCEx_PLL2_Config+0x15c>)
 8007b60:	4313      	orrs	r3, r2
 8007b62:	628b      	str	r3, [r1, #40]	; 0x28
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	3b01      	subs	r3, #1
 8007b74:	025b      	lsls	r3, r3, #9
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	431a      	orrs	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	041b      	lsls	r3, r3, #16
 8007b82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007b86:	431a      	orrs	r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	3b01      	subs	r3, #1
 8007b8e:	061b      	lsls	r3, r3, #24
 8007b90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007b94:	4931      	ldr	r1, [pc, #196]	; (8007c5c <RCCEx_PLL2_Config+0x15c>)
 8007b96:	4313      	orrs	r3, r2
 8007b98:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007b9a:	4b30      	ldr	r3, [pc, #192]	; (8007c5c <RCCEx_PLL2_Config+0x15c>)
 8007b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	695b      	ldr	r3, [r3, #20]
 8007ba6:	492d      	ldr	r1, [pc, #180]	; (8007c5c <RCCEx_PLL2_Config+0x15c>)
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007bac:	4b2b      	ldr	r3, [pc, #172]	; (8007c5c <RCCEx_PLL2_Config+0x15c>)
 8007bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb0:	f023 0220 	bic.w	r2, r3, #32
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	699b      	ldr	r3, [r3, #24]
 8007bb8:	4928      	ldr	r1, [pc, #160]	; (8007c5c <RCCEx_PLL2_Config+0x15c>)
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007bbe:	4b27      	ldr	r3, [pc, #156]	; (8007c5c <RCCEx_PLL2_Config+0x15c>)
 8007bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc2:	4a26      	ldr	r2, [pc, #152]	; (8007c5c <RCCEx_PLL2_Config+0x15c>)
 8007bc4:	f023 0310 	bic.w	r3, r3, #16
 8007bc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007bca:	4b24      	ldr	r3, [pc, #144]	; (8007c5c <RCCEx_PLL2_Config+0x15c>)
 8007bcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bce:	4b24      	ldr	r3, [pc, #144]	; (8007c60 <RCCEx_PLL2_Config+0x160>)
 8007bd0:	4013      	ands	r3, r2
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	69d2      	ldr	r2, [r2, #28]
 8007bd6:	00d2      	lsls	r2, r2, #3
 8007bd8:	4920      	ldr	r1, [pc, #128]	; (8007c5c <RCCEx_PLL2_Config+0x15c>)
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007bde:	4b1f      	ldr	r3, [pc, #124]	; (8007c5c <RCCEx_PLL2_Config+0x15c>)
 8007be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be2:	4a1e      	ldr	r2, [pc, #120]	; (8007c5c <RCCEx_PLL2_Config+0x15c>)
 8007be4:	f043 0310 	orr.w	r3, r3, #16
 8007be8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d106      	bne.n	8007bfe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007bf0:	4b1a      	ldr	r3, [pc, #104]	; (8007c5c <RCCEx_PLL2_Config+0x15c>)
 8007bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf4:	4a19      	ldr	r2, [pc, #100]	; (8007c5c <RCCEx_PLL2_Config+0x15c>)
 8007bf6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007bfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007bfc:	e00f      	b.n	8007c1e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d106      	bne.n	8007c12 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007c04:	4b15      	ldr	r3, [pc, #84]	; (8007c5c <RCCEx_PLL2_Config+0x15c>)
 8007c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c08:	4a14      	ldr	r2, [pc, #80]	; (8007c5c <RCCEx_PLL2_Config+0x15c>)
 8007c0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c10:	e005      	b.n	8007c1e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007c12:	4b12      	ldr	r3, [pc, #72]	; (8007c5c <RCCEx_PLL2_Config+0x15c>)
 8007c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c16:	4a11      	ldr	r2, [pc, #68]	; (8007c5c <RCCEx_PLL2_Config+0x15c>)
 8007c18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c1c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007c1e:	4b0f      	ldr	r3, [pc, #60]	; (8007c5c <RCCEx_PLL2_Config+0x15c>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a0e      	ldr	r2, [pc, #56]	; (8007c5c <RCCEx_PLL2_Config+0x15c>)
 8007c24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c2a:	f7f9 fcb3 	bl	8001594 <HAL_GetTick>
 8007c2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c30:	e008      	b.n	8007c44 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007c32:	f7f9 fcaf 	bl	8001594 <HAL_GetTick>
 8007c36:	4602      	mov	r2, r0
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	1ad3      	subs	r3, r2, r3
 8007c3c:	2b02      	cmp	r3, #2
 8007c3e:	d901      	bls.n	8007c44 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007c40:	2303      	movs	r3, #3
 8007c42:	e006      	b.n	8007c52 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c44:	4b05      	ldr	r3, [pc, #20]	; (8007c5c <RCCEx_PLL2_Config+0x15c>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d0f0      	beq.n	8007c32 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3710      	adds	r7, #16
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	58024400 	.word	0x58024400
 8007c60:	ffff0007 	.word	0xffff0007

08007c64 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c72:	4b53      	ldr	r3, [pc, #332]	; (8007dc0 <RCCEx_PLL3_Config+0x15c>)
 8007c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c76:	f003 0303 	and.w	r3, r3, #3
 8007c7a:	2b03      	cmp	r3, #3
 8007c7c:	d101      	bne.n	8007c82 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e099      	b.n	8007db6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007c82:	4b4f      	ldr	r3, [pc, #316]	; (8007dc0 <RCCEx_PLL3_Config+0x15c>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a4e      	ldr	r2, [pc, #312]	; (8007dc0 <RCCEx_PLL3_Config+0x15c>)
 8007c88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c8e:	f7f9 fc81 	bl	8001594 <HAL_GetTick>
 8007c92:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c94:	e008      	b.n	8007ca8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007c96:	f7f9 fc7d 	bl	8001594 <HAL_GetTick>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	d901      	bls.n	8007ca8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	e086      	b.n	8007db6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ca8:	4b45      	ldr	r3, [pc, #276]	; (8007dc0 <RCCEx_PLL3_Config+0x15c>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d1f0      	bne.n	8007c96 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007cb4:	4b42      	ldr	r3, [pc, #264]	; (8007dc0 <RCCEx_PLL3_Config+0x15c>)
 8007cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	051b      	lsls	r3, r3, #20
 8007cc2:	493f      	ldr	r1, [pc, #252]	; (8007dc0 <RCCEx_PLL3_Config+0x15c>)
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	628b      	str	r3, [r1, #40]	; 0x28
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	3b01      	subs	r3, #1
 8007cce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	025b      	lsls	r3, r3, #9
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	431a      	orrs	r2, r3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	3b01      	subs	r3, #1
 8007ce4:	041b      	lsls	r3, r3, #16
 8007ce6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007cea:	431a      	orrs	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	061b      	lsls	r3, r3, #24
 8007cf4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007cf8:	4931      	ldr	r1, [pc, #196]	; (8007dc0 <RCCEx_PLL3_Config+0x15c>)
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007cfe:	4b30      	ldr	r3, [pc, #192]	; (8007dc0 <RCCEx_PLL3_Config+0x15c>)
 8007d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d02:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	695b      	ldr	r3, [r3, #20]
 8007d0a:	492d      	ldr	r1, [pc, #180]	; (8007dc0 <RCCEx_PLL3_Config+0x15c>)
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007d10:	4b2b      	ldr	r3, [pc, #172]	; (8007dc0 <RCCEx_PLL3_Config+0x15c>)
 8007d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d14:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	699b      	ldr	r3, [r3, #24]
 8007d1c:	4928      	ldr	r1, [pc, #160]	; (8007dc0 <RCCEx_PLL3_Config+0x15c>)
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007d22:	4b27      	ldr	r3, [pc, #156]	; (8007dc0 <RCCEx_PLL3_Config+0x15c>)
 8007d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d26:	4a26      	ldr	r2, [pc, #152]	; (8007dc0 <RCCEx_PLL3_Config+0x15c>)
 8007d28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007d2e:	4b24      	ldr	r3, [pc, #144]	; (8007dc0 <RCCEx_PLL3_Config+0x15c>)
 8007d30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d32:	4b24      	ldr	r3, [pc, #144]	; (8007dc4 <RCCEx_PLL3_Config+0x160>)
 8007d34:	4013      	ands	r3, r2
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	69d2      	ldr	r2, [r2, #28]
 8007d3a:	00d2      	lsls	r2, r2, #3
 8007d3c:	4920      	ldr	r1, [pc, #128]	; (8007dc0 <RCCEx_PLL3_Config+0x15c>)
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007d42:	4b1f      	ldr	r3, [pc, #124]	; (8007dc0 <RCCEx_PLL3_Config+0x15c>)
 8007d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d46:	4a1e      	ldr	r2, [pc, #120]	; (8007dc0 <RCCEx_PLL3_Config+0x15c>)
 8007d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d106      	bne.n	8007d62 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007d54:	4b1a      	ldr	r3, [pc, #104]	; (8007dc0 <RCCEx_PLL3_Config+0x15c>)
 8007d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d58:	4a19      	ldr	r2, [pc, #100]	; (8007dc0 <RCCEx_PLL3_Config+0x15c>)
 8007d5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007d5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d60:	e00f      	b.n	8007d82 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d106      	bne.n	8007d76 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007d68:	4b15      	ldr	r3, [pc, #84]	; (8007dc0 <RCCEx_PLL3_Config+0x15c>)
 8007d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6c:	4a14      	ldr	r2, [pc, #80]	; (8007dc0 <RCCEx_PLL3_Config+0x15c>)
 8007d6e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007d72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d74:	e005      	b.n	8007d82 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007d76:	4b12      	ldr	r3, [pc, #72]	; (8007dc0 <RCCEx_PLL3_Config+0x15c>)
 8007d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7a:	4a11      	ldr	r2, [pc, #68]	; (8007dc0 <RCCEx_PLL3_Config+0x15c>)
 8007d7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d80:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007d82:	4b0f      	ldr	r3, [pc, #60]	; (8007dc0 <RCCEx_PLL3_Config+0x15c>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a0e      	ldr	r2, [pc, #56]	; (8007dc0 <RCCEx_PLL3_Config+0x15c>)
 8007d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d8e:	f7f9 fc01 	bl	8001594 <HAL_GetTick>
 8007d92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d94:	e008      	b.n	8007da8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007d96:	f7f9 fbfd 	bl	8001594 <HAL_GetTick>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	1ad3      	subs	r3, r2, r3
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	d901      	bls.n	8007da8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007da4:	2303      	movs	r3, #3
 8007da6:	e006      	b.n	8007db6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007da8:	4b05      	ldr	r3, [pc, #20]	; (8007dc0 <RCCEx_PLL3_Config+0x15c>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d0f0      	beq.n	8007d96 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3710      	adds	r7, #16
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	58024400 	.word	0x58024400
 8007dc4:	ffff0007 	.word	0xffff0007

08007dc8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b08a      	sub	sp, #40	; 0x28
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d101      	bne.n	8007dda <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e07c      	b.n	8007ed4 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d10c      	bne.n	8007e00 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	699b      	ldr	r3, [r3, #24]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d102      	bne.n	8007dfa <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2202      	movs	r2, #2
 8007df8:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f7f9 f8b0 	bl	8000f60 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2203      	movs	r2, #3
 8007e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 f867 	bl	8007edc <HAL_SD_InitCard>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d001      	beq.n	8007e18 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	e05d      	b.n	8007ed4 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007e18:	f107 0308 	add.w	r3, r7, #8
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 fdbe 	bl	80089a0 <HAL_SD_GetCardStatus>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d001      	beq.n	8007e2e <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e052      	b.n	8007ed4 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007e2e:	7e3b      	ldrb	r3, [r7, #24]
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007e34:	7e7b      	ldrb	r3, [r7, #25]
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d10a      	bne.n	8007e58 <HAL_SD_Init+0x90>
 8007e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d102      	bne.n	8007e4e <HAL_SD_Init+0x86>
 8007e48:	6a3b      	ldr	r3, [r7, #32]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d004      	beq.n	8007e58 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e54:	65da      	str	r2, [r3, #92]	; 0x5c
 8007e56:	e00b      	b.n	8007e70 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d104      	bne.n	8007e6a <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e66:	65da      	str	r2, [r3, #92]	; 0x5c
 8007e68:	e002      	b.n	8007e70 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	4619      	mov	r1, r3
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 fe74 	bl	8008b64 <HAL_SD_ConfigWideBusOperation>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d001      	beq.n	8007e86 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	e026      	b.n	8007ed4 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007e86:	f7f9 fb85 	bl	8001594 <HAL_GetTick>
 8007e8a:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007e8c:	e011      	b.n	8007eb2 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8007e8e:	f7f9 fb81 	bl	8001594 <HAL_GetTick>
 8007e92:	4602      	mov	r2, r0
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	1ad3      	subs	r3, r2, r3
 8007e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e9c:	d109      	bne.n	8007eb2 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007ea4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8007eae:	2303      	movs	r3, #3
 8007eb0:	e010      	b.n	8007ed4 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 ff00 	bl	8008cb8 <HAL_SD_GetCardState>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b04      	cmp	r3, #4
 8007ebc:	d1e7      	bne.n	8007e8e <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3728      	adds	r7, #40	; 0x28
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007edc:	b5b0      	push	{r4, r5, r7, lr}
 8007ede:	b08e      	sub	sp, #56	; 0x38
 8007ee0:	af04      	add	r7, sp, #16
 8007ee2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007eec:	2300      	movs	r3, #0
 8007eee:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007ef4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007ef8:	f7fe ff90 	bl	8006e1c <HAL_RCCEx_GetPeriphCLKFreq>
 8007efc:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8007efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f00:	0a1b      	lsrs	r3, r3, #8
 8007f02:	4a40      	ldr	r2, [pc, #256]	; (8008004 <HAL_SD_InitCard+0x128>)
 8007f04:	fba2 2303 	umull	r2, r3, r2, r3
 8007f08:	091b      	lsrs	r3, r3, #4
 8007f0a:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	699b      	ldr	r3, [r3, #24]
 8007f10:	2b02      	cmp	r3, #2
 8007f12:	d107      	bne.n	8007f24 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f042 0210 	orr.w	r2, r2, #16
 8007f22:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681d      	ldr	r5, [r3, #0]
 8007f28:	466c      	mov	r4, sp
 8007f2a:	f107 0314 	add.w	r3, r7, #20
 8007f2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007f32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007f36:	f107 0308 	add.w	r3, r7, #8
 8007f3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	f002 fc9b 	bl	800a878 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4618      	mov	r0, r3
 8007f48:	f002 fcde 	bl	800a908 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	005b      	lsls	r3, r3, #1
 8007f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f56:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 8007f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d008      	beq.n	8007f70 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8007f5e:	4a2a      	ldr	r2, [pc, #168]	; (8008008 <HAL_SD_InitCard+0x12c>)
 8007f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f66:	3301      	adds	r3, #1
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f7f9 fb1f 	bl	80015ac <HAL_Delay>
 8007f6e:	e002      	b.n	8007f76 <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 8007f70:	2002      	movs	r0, #2
 8007f72:	f7f9 fb1b 	bl	80015ac <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 ff7c 	bl	8008e74 <SD_PowerON>
 8007f7c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f7e:	6a3b      	ldr	r3, [r7, #32]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d00b      	beq.n	8007f9c <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f90:	6a3b      	ldr	r3, [r7, #32]
 8007f92:	431a      	orrs	r2, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	e02e      	b.n	8007ffa <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 feab 	bl	8008cf8 <SD_InitCard>
 8007fa2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007fa4:	6a3b      	ldr	r3, [r7, #32]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00b      	beq.n	8007fc2 <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2201      	movs	r2, #1
 8007fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fb6:	6a3b      	ldr	r3, [r7, #32]
 8007fb8:	431a      	orrs	r2, r3
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e01b      	b.n	8007ffa <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f002 fd32 	bl	800aa34 <SDMMC_CmdBlockLength>
 8007fd0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007fd2:	6a3b      	ldr	r3, [r7, #32]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d00f      	beq.n	8007ff8 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a0b      	ldr	r2, [pc, #44]	; (800800c <HAL_SD_InitCard+0x130>)
 8007fde:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fe4:	6a3b      	ldr	r3, [r7, #32]
 8007fe6:	431a      	orrs	r2, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e000      	b.n	8007ffa <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3728      	adds	r7, #40	; 0x28
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bdb0      	pop	{r4, r5, r7, pc}
 8008002:	bf00      	nop
 8008004:	014f8b59 	.word	0x014f8b59
 8008008:	00012110 	.word	0x00012110
 800800c:	1fe00fff 	.word	0x1fe00fff

08008010 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b092      	sub	sp, #72	; 0x48
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	607a      	str	r2, [r7, #4]
 800801c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800801e:	f7f9 fab9 	bl	8001594 <HAL_GetTick>
 8008022:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d107      	bne.n	8008042 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008036:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	e167      	b.n	8008312 <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008048:	b2db      	uxtb	r3, r3
 800804a:	2b01      	cmp	r3, #1
 800804c:	f040 815a 	bne.w	8008304 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2200      	movs	r2, #0
 8008054:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008056:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	441a      	add	r2, r3
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008060:	429a      	cmp	r2, r3
 8008062:	d907      	bls.n	8008074 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008068:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	e14e      	b.n	8008312 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2203      	movs	r2, #3
 8008078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2200      	movs	r2, #0
 8008082:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008088:	2b01      	cmp	r3, #1
 800808a:	d002      	beq.n	8008092 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800808c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808e:	025b      	lsls	r3, r3, #9
 8008090:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008092:	f04f 33ff 	mov.w	r3, #4294967295
 8008096:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	025b      	lsls	r3, r3, #9
 800809c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800809e:	2390      	movs	r3, #144	; 0x90
 80080a0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80080a2:	2302      	movs	r3, #2
 80080a4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80080a6:	2300      	movs	r3, #0
 80080a8:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80080aa:	2300      	movs	r3, #0
 80080ac:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f107 0214 	add.w	r2, r7, #20
 80080b6:	4611      	mov	r1, r2
 80080b8:	4618      	mov	r0, r3
 80080ba:	f002 fc8f 	bl	800a9dc <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	68da      	ldr	r2, [r3, #12]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080cc:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d90a      	bls.n	80080ea <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2202      	movs	r2, #2
 80080d8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80080e0:	4618      	mov	r0, r3
 80080e2:	f002 fced 	bl	800aac0 <SDMMC_CmdReadMultiBlock>
 80080e6:	6478      	str	r0, [r7, #68]	; 0x44
 80080e8:	e009      	b.n	80080fe <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2201      	movs	r2, #1
 80080ee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80080f6:	4618      	mov	r0, r3
 80080f8:	f002 fcbf 	bl	800aa7a <SDMMC_CmdReadSingleBlock>
 80080fc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80080fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008100:	2b00      	cmp	r3, #0
 8008102:	d012      	beq.n	800812a <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a84      	ldr	r2, [pc, #528]	; (800831c <HAL_SD_ReadBlocks+0x30c>)
 800810a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008112:	431a      	orrs	r2, r3
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2200      	movs	r2, #0
 8008124:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	e0f3      	b.n	8008312 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800812e:	e058      	b.n	80081e2 <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008136:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800813a:	2b00      	cmp	r3, #0
 800813c:	d033      	beq.n	80081a6 <HAL_SD_ReadBlocks+0x196>
 800813e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008140:	2b1f      	cmp	r3, #31
 8008142:	d930      	bls.n	80081a6 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8008144:	2300      	movs	r3, #0
 8008146:	643b      	str	r3, [r7, #64]	; 0x40
 8008148:	e027      	b.n	800819a <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4618      	mov	r0, r3
 8008150:	f002 fbbc 	bl	800a8cc <SDMMC_ReadFIFO>
 8008154:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8008156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008158:	b2da      	uxtb	r2, r3
 800815a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800815c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800815e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008160:	3301      	adds	r3, #1
 8008162:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008166:	0a1b      	lsrs	r3, r3, #8
 8008168:	b2da      	uxtb	r2, r3
 800816a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800816c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800816e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008170:	3301      	adds	r3, #1
 8008172:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008176:	0c1b      	lsrs	r3, r3, #16
 8008178:	b2da      	uxtb	r2, r3
 800817a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800817c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800817e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008180:	3301      	adds	r3, #1
 8008182:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008186:	0e1b      	lsrs	r3, r3, #24
 8008188:	b2da      	uxtb	r2, r3
 800818a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800818c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800818e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008190:	3301      	adds	r3, #1
 8008192:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 8008194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008196:	3301      	adds	r3, #1
 8008198:	643b      	str	r3, [r7, #64]	; 0x40
 800819a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800819c:	2b07      	cmp	r3, #7
 800819e:	d9d4      	bls.n	800814a <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 80081a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081a2:	3b20      	subs	r3, #32
 80081a4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80081a6:	f7f9 f9f5 	bl	8001594 <HAL_GetTick>
 80081aa:	4602      	mov	r2, r0
 80081ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ae:	1ad3      	subs	r3, r2, r3
 80081b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d902      	bls.n	80081bc <HAL_SD_ReadBlocks+0x1ac>
 80081b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d112      	bne.n	80081e2 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a56      	ldr	r2, [pc, #344]	; (800831c <HAL_SD_ReadBlocks+0x30c>)
 80081c2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2200      	movs	r2, #0
 80081dc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80081de:	2303      	movs	r3, #3
 80081e0:	e097      	b.n	8008312 <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081e8:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d09f      	beq.n	8008130 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	68da      	ldr	r2, [r3, #12]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081fe:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800820a:	2b00      	cmp	r3, #0
 800820c:	d022      	beq.n	8008254 <HAL_SD_ReadBlocks+0x244>
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	2b01      	cmp	r3, #1
 8008212:	d91f      	bls.n	8008254 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008218:	2b03      	cmp	r3, #3
 800821a:	d01b      	beq.n	8008254 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4618      	mov	r0, r3
 8008222:	f002 fcb7 	bl	800ab94 <SDMMC_CmdStopTransfer>
 8008226:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800822a:	2b00      	cmp	r3, #0
 800822c:	d012      	beq.n	8008254 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a3a      	ldr	r2, [pc, #232]	; (800831c <HAL_SD_ReadBlocks+0x30c>)
 8008234:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800823a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800823c:	431a      	orrs	r2, r3
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2201      	movs	r2, #1
 8008246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2200      	movs	r2, #0
 800824e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	e05e      	b.n	8008312 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800825a:	f003 0308 	and.w	r3, r3, #8
 800825e:	2b00      	cmp	r3, #0
 8008260:	d012      	beq.n	8008288 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a2d      	ldr	r2, [pc, #180]	; (800831c <HAL_SD_ReadBlocks+0x30c>)
 8008268:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800826e:	f043 0208 	orr.w	r2, r3, #8
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2201      	movs	r2, #1
 800827a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2200      	movs	r2, #0
 8008282:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	e044      	b.n	8008312 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800828e:	f003 0302 	and.w	r3, r3, #2
 8008292:	2b00      	cmp	r3, #0
 8008294:	d012      	beq.n	80082bc <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a20      	ldr	r2, [pc, #128]	; (800831c <HAL_SD_ReadBlocks+0x30c>)
 800829c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a2:	f043 0202 	orr.w	r2, r3, #2
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2201      	movs	r2, #1
 80082ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2200      	movs	r2, #0
 80082b6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	e02a      	b.n	8008312 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082c2:	f003 0320 	and.w	r3, r3, #32
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d012      	beq.n	80082f0 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a13      	ldr	r2, [pc, #76]	; (800831c <HAL_SD_ReadBlocks+0x30c>)
 80082d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d6:	f043 0220 	orr.w	r2, r3, #32
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2201      	movs	r2, #1
 80082e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e010      	b.n	8008312 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a0a      	ldr	r2, [pc, #40]	; (8008320 <HAL_SD_ReadBlocks+0x310>)
 80082f6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008300:	2300      	movs	r3, #0
 8008302:	e006      	b.n	8008312 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008308:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008310:	2301      	movs	r3, #1
  }
}
 8008312:	4618      	mov	r0, r3
 8008314:	3748      	adds	r7, #72	; 0x48
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	1fe00fff 	.word	0x1fe00fff
 8008320:	18000f3a 	.word	0x18000f3a

08008324 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b092      	sub	sp, #72	; 0x48
 8008328:	af00      	add	r7, sp, #0
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	60b9      	str	r1, [r7, #8]
 800832e:	607a      	str	r2, [r7, #4]
 8008330:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008332:	f7f9 f92f 	bl	8001594 <HAL_GetTick>
 8008336:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d107      	bne.n	8008356 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800834a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	e16b      	b.n	800862e <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800835c:	b2db      	uxtb	r3, r3
 800835e:	2b01      	cmp	r3, #1
 8008360:	f040 815e 	bne.w	8008620 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2200      	movs	r2, #0
 8008368:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800836a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	441a      	add	r2, r3
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008374:	429a      	cmp	r2, r3
 8008376:	d907      	bls.n	8008388 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800837c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008384:	2301      	movs	r3, #1
 8008386:	e152      	b.n	800862e <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2203      	movs	r2, #3
 800838c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	2200      	movs	r2, #0
 8008396:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800839c:	2b01      	cmp	r3, #1
 800839e:	d002      	beq.n	80083a6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80083a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a2:	025b      	lsls	r3, r3, #9
 80083a4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80083a6:	f04f 33ff 	mov.w	r3, #4294967295
 80083aa:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	025b      	lsls	r3, r3, #9
 80083b0:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80083b2:	2390      	movs	r3, #144	; 0x90
 80083b4:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80083b6:	2300      	movs	r3, #0
 80083b8:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80083ba:	2300      	movs	r3, #0
 80083bc:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80083be:	2300      	movs	r3, #0
 80083c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f107 0218 	add.w	r2, r7, #24
 80083ca:	4611      	mov	r1, r2
 80083cc:	4618      	mov	r0, r3
 80083ce:	f002 fb05 	bl	800a9dc <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68da      	ldr	r2, [r3, #12]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083e0:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d90a      	bls.n	80083fe <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2220      	movs	r2, #32
 80083ec:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80083f4:	4618      	mov	r0, r3
 80083f6:	f002 fba9 	bl	800ab4c <SDMMC_CmdWriteMultiBlock>
 80083fa:	6478      	str	r0, [r7, #68]	; 0x44
 80083fc:	e009      	b.n	8008412 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2210      	movs	r2, #16
 8008402:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800840a:	4618      	mov	r0, r3
 800840c:	f002 fb7b 	bl	800ab06 <SDMMC_CmdWriteSingleBlock>
 8008410:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008414:	2b00      	cmp	r3, #0
 8008416:	d012      	beq.n	800843e <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a86      	ldr	r2, [pc, #536]	; (8008638 <HAL_SD_WriteBlocks+0x314>)
 800841e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008426:	431a      	orrs	r2, r3
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2200      	movs	r2, #0
 8008438:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	e0f7      	b.n	800862e <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008442:	e05c      	b.n	80084fe <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800844a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800844e:	2b00      	cmp	r3, #0
 8008450:	d037      	beq.n	80084c2 <HAL_SD_WriteBlocks+0x19e>
 8008452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008454:	2b1f      	cmp	r3, #31
 8008456:	d934      	bls.n	80084c2 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8008458:	2300      	movs	r3, #0
 800845a:	643b      	str	r3, [r7, #64]	; 0x40
 800845c:	e02b      	b.n	80084b6 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800845e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008466:	3301      	adds	r3, #1
 8008468:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800846a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	021a      	lsls	r2, r3, #8
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	4313      	orrs	r3, r2
 8008474:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008478:	3301      	adds	r3, #1
 800847a:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800847c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	041a      	lsls	r2, r3, #16
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	4313      	orrs	r3, r2
 8008486:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800848a:	3301      	adds	r3, #1
 800848c:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800848e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	061a      	lsls	r2, r3, #24
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	4313      	orrs	r3, r2
 8008498:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800849a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800849c:	3301      	adds	r3, #1
 800849e:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f107 0214 	add.w	r2, r7, #20
 80084a8:	4611      	mov	r1, r2
 80084aa:	4618      	mov	r0, r3
 80084ac:	f002 fa1b 	bl	800a8e6 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80084b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084b2:	3301      	adds	r3, #1
 80084b4:	643b      	str	r3, [r7, #64]	; 0x40
 80084b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084b8:	2b07      	cmp	r3, #7
 80084ba:	d9d0      	bls.n	800845e <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 80084bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084be:	3b20      	subs	r3, #32
 80084c0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80084c2:	f7f9 f867 	bl	8001594 <HAL_GetTick>
 80084c6:	4602      	mov	r2, r0
 80084c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ca:	1ad3      	subs	r3, r2, r3
 80084cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d902      	bls.n	80084d8 <HAL_SD_WriteBlocks+0x1b4>
 80084d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d112      	bne.n	80084fe <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a56      	ldr	r2, [pc, #344]	; (8008638 <HAL_SD_WriteBlocks+0x314>)
 80084de:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084e6:	431a      	orrs	r2, r3
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2200      	movs	r2, #0
 80084f8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80084fa:	2303      	movs	r3, #3
 80084fc:	e097      	b.n	800862e <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008504:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8008508:	2b00      	cmp	r3, #0
 800850a:	d09b      	beq.n	8008444 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	68da      	ldr	r2, [r3, #12]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800851a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008526:	2b00      	cmp	r3, #0
 8008528:	d022      	beq.n	8008570 <HAL_SD_WriteBlocks+0x24c>
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	2b01      	cmp	r3, #1
 800852e:	d91f      	bls.n	8008570 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008534:	2b03      	cmp	r3, #3
 8008536:	d01b      	beq.n	8008570 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4618      	mov	r0, r3
 800853e:	f002 fb29 	bl	800ab94 <SDMMC_CmdStopTransfer>
 8008542:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008546:	2b00      	cmp	r3, #0
 8008548:	d012      	beq.n	8008570 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a3a      	ldr	r2, [pc, #232]	; (8008638 <HAL_SD_WriteBlocks+0x314>)
 8008550:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008556:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008558:	431a      	orrs	r2, r3
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2201      	movs	r2, #1
 8008562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2200      	movs	r2, #0
 800856a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800856c:	2301      	movs	r3, #1
 800856e:	e05e      	b.n	800862e <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008576:	f003 0308 	and.w	r3, r3, #8
 800857a:	2b00      	cmp	r3, #0
 800857c:	d012      	beq.n	80085a4 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a2d      	ldr	r2, [pc, #180]	; (8008638 <HAL_SD_WriteBlocks+0x314>)
 8008584:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800858a:	f043 0208 	orr.w	r2, r3, #8
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2201      	movs	r2, #1
 8008596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2200      	movs	r2, #0
 800859e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	e044      	b.n	800862e <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085aa:	f003 0302 	and.w	r3, r3, #2
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d012      	beq.n	80085d8 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a20      	ldr	r2, [pc, #128]	; (8008638 <HAL_SD_WriteBlocks+0x314>)
 80085b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085be:	f043 0202 	orr.w	r2, r3, #2
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2200      	movs	r2, #0
 80085d2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80085d4:	2301      	movs	r3, #1
 80085d6:	e02a      	b.n	800862e <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085de:	f003 0310 	and.w	r3, r3, #16
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d012      	beq.n	800860c <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a13      	ldr	r2, [pc, #76]	; (8008638 <HAL_SD_WriteBlocks+0x314>)
 80085ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f2:	f043 0210 	orr.w	r2, r3, #16
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2201      	movs	r2, #1
 80085fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2200      	movs	r2, #0
 8008606:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	e010      	b.n	800862e <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a0a      	ldr	r2, [pc, #40]	; (800863c <HAL_SD_WriteBlocks+0x318>)
 8008612:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2201      	movs	r2, #1
 8008618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800861c:	2300      	movs	r3, #0
 800861e:	e006      	b.n	800862e <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008624:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800862c:	2301      	movs	r3, #1
  }
}
 800862e:	4618      	mov	r0, r3
 8008630:	3748      	adds	r7, #72	; 0x48
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
 8008636:	bf00      	nop
 8008638:	1fe00fff 	.word	0x1fe00fff
 800863c:	18000f3a 	.word	0x18000f3a

08008640 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	4603      	mov	r3, r0
 8008648:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 800864a:	bf00      	nop
 800864c:	370c      	adds	r7, #12
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr
	...

08008658 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008666:	0f9b      	lsrs	r3, r3, #30
 8008668:	b2da      	uxtb	r2, r3
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008672:	0e9b      	lsrs	r3, r3, #26
 8008674:	b2db      	uxtb	r3, r3
 8008676:	f003 030f 	and.w	r3, r3, #15
 800867a:	b2da      	uxtb	r2, r3
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008684:	0e1b      	lsrs	r3, r3, #24
 8008686:	b2db      	uxtb	r3, r3
 8008688:	f003 0303 	and.w	r3, r3, #3
 800868c:	b2da      	uxtb	r2, r3
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008696:	0c1b      	lsrs	r3, r3, #16
 8008698:	b2da      	uxtb	r2, r3
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086a2:	0a1b      	lsrs	r3, r3, #8
 80086a4:	b2da      	uxtb	r2, r3
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086ae:	b2da      	uxtb	r2, r3
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086b8:	0d1b      	lsrs	r3, r3, #20
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086c4:	0c1b      	lsrs	r3, r3, #16
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	f003 030f 	and.w	r3, r3, #15
 80086cc:	b2da      	uxtb	r2, r3
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086d6:	0bdb      	lsrs	r3, r3, #15
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	f003 0301 	and.w	r3, r3, #1
 80086de:	b2da      	uxtb	r2, r3
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086e8:	0b9b      	lsrs	r3, r3, #14
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	f003 0301 	and.w	r3, r3, #1
 80086f0:	b2da      	uxtb	r2, r3
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086fa:	0b5b      	lsrs	r3, r3, #13
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	f003 0301 	and.w	r3, r3, #1
 8008702:	b2da      	uxtb	r2, r3
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800870c:	0b1b      	lsrs	r3, r3, #12
 800870e:	b2db      	uxtb	r3, r3
 8008710:	f003 0301 	and.w	r3, r3, #1
 8008714:	b2da      	uxtb	r2, r3
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	2200      	movs	r2, #0
 800871e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008724:	2b00      	cmp	r3, #0
 8008726:	d163      	bne.n	80087f0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800872c:	009a      	lsls	r2, r3, #2
 800872e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008732:	4013      	ands	r3, r2
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008738:	0f92      	lsrs	r2, r2, #30
 800873a:	431a      	orrs	r2, r3
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008744:	0edb      	lsrs	r3, r3, #27
 8008746:	b2db      	uxtb	r3, r3
 8008748:	f003 0307 	and.w	r3, r3, #7
 800874c:	b2da      	uxtb	r2, r3
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008756:	0e1b      	lsrs	r3, r3, #24
 8008758:	b2db      	uxtb	r3, r3
 800875a:	f003 0307 	and.w	r3, r3, #7
 800875e:	b2da      	uxtb	r2, r3
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008768:	0d5b      	lsrs	r3, r3, #21
 800876a:	b2db      	uxtb	r3, r3
 800876c:	f003 0307 	and.w	r3, r3, #7
 8008770:	b2da      	uxtb	r2, r3
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800877a:	0c9b      	lsrs	r3, r3, #18
 800877c:	b2db      	uxtb	r3, r3
 800877e:	f003 0307 	and.w	r3, r3, #7
 8008782:	b2da      	uxtb	r2, r3
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800878c:	0bdb      	lsrs	r3, r3, #15
 800878e:	b2db      	uxtb	r3, r3
 8008790:	f003 0307 	and.w	r3, r3, #7
 8008794:	b2da      	uxtb	r2, r3
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	1c5a      	adds	r2, r3, #1
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	7e1b      	ldrb	r3, [r3, #24]
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	f003 0307 	and.w	r3, r3, #7
 80087ae:	3302      	adds	r3, #2
 80087b0:	2201      	movs	r2, #1
 80087b2:	fa02 f303 	lsl.w	r3, r2, r3
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80087ba:	fb02 f203 	mul.w	r2, r2, r3
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	7a1b      	ldrb	r3, [r3, #8]
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	f003 030f 	and.w	r3, r3, #15
 80087cc:	2201      	movs	r2, #1
 80087ce:	409a      	lsls	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80087dc:	0a52      	lsrs	r2, r2, #9
 80087de:	fb02 f203 	mul.w	r2, r2, r3
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087ec:	659a      	str	r2, [r3, #88]	; 0x58
 80087ee:	e031      	b.n	8008854 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d11d      	bne.n	8008834 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087fc:	041b      	lsls	r3, r3, #16
 80087fe:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008806:	0c1b      	lsrs	r3, r3, #16
 8008808:	431a      	orrs	r2, r3
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	3301      	adds	r3, #1
 8008814:	029a      	lsls	r2, r3, #10
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008828:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	659a      	str	r2, [r3, #88]	; 0x58
 8008832:	e00f      	b.n	8008854 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a58      	ldr	r2, [pc, #352]	; (800899c <HAL_SD_GetCardCSD+0x344>)
 800883a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008840:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008850:	2301      	movs	r3, #1
 8008852:	e09d      	b.n	8008990 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008858:	0b9b      	lsrs	r3, r3, #14
 800885a:	b2db      	uxtb	r3, r3
 800885c:	f003 0301 	and.w	r3, r3, #1
 8008860:	b2da      	uxtb	r2, r3
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800886a:	09db      	lsrs	r3, r3, #7
 800886c:	b2db      	uxtb	r3, r3
 800886e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008872:	b2da      	uxtb	r2, r3
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800887c:	b2db      	uxtb	r3, r3
 800887e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008882:	b2da      	uxtb	r2, r3
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800888c:	0fdb      	lsrs	r3, r3, #31
 800888e:	b2da      	uxtb	r2, r3
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008898:	0f5b      	lsrs	r3, r3, #29
 800889a:	b2db      	uxtb	r3, r3
 800889c:	f003 0303 	and.w	r3, r3, #3
 80088a0:	b2da      	uxtb	r2, r3
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088aa:	0e9b      	lsrs	r3, r3, #26
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	f003 0307 	and.w	r3, r3, #7
 80088b2:	b2da      	uxtb	r2, r3
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088bc:	0d9b      	lsrs	r3, r3, #22
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	f003 030f 	and.w	r3, r3, #15
 80088c4:	b2da      	uxtb	r2, r3
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088ce:	0d5b      	lsrs	r3, r3, #21
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	f003 0301 	and.w	r3, r3, #1
 80088d6:	b2da      	uxtb	r2, r3
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088ea:	0c1b      	lsrs	r3, r3, #16
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	f003 0301 	and.w	r3, r3, #1
 80088f2:	b2da      	uxtb	r2, r3
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088fe:	0bdb      	lsrs	r3, r3, #15
 8008900:	b2db      	uxtb	r3, r3
 8008902:	f003 0301 	and.w	r3, r3, #1
 8008906:	b2da      	uxtb	r2, r3
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008912:	0b9b      	lsrs	r3, r3, #14
 8008914:	b2db      	uxtb	r3, r3
 8008916:	f003 0301 	and.w	r3, r3, #1
 800891a:	b2da      	uxtb	r2, r3
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008926:	0b5b      	lsrs	r3, r3, #13
 8008928:	b2db      	uxtb	r3, r3
 800892a:	f003 0301 	and.w	r3, r3, #1
 800892e:	b2da      	uxtb	r2, r3
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800893a:	0b1b      	lsrs	r3, r3, #12
 800893c:	b2db      	uxtb	r3, r3
 800893e:	f003 0301 	and.w	r3, r3, #1
 8008942:	b2da      	uxtb	r2, r3
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800894e:	0a9b      	lsrs	r3, r3, #10
 8008950:	b2db      	uxtb	r3, r3
 8008952:	f003 0303 	and.w	r3, r3, #3
 8008956:	b2da      	uxtb	r2, r3
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008962:	0a1b      	lsrs	r3, r3, #8
 8008964:	b2db      	uxtb	r3, r3
 8008966:	f003 0303 	and.w	r3, r3, #3
 800896a:	b2da      	uxtb	r2, r3
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008976:	085b      	lsrs	r3, r3, #1
 8008978:	b2db      	uxtb	r3, r3
 800897a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800897e:	b2da      	uxtb	r2, r3
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	2201      	movs	r2, #1
 800898a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800898e:	2300      	movs	r3, #0
}
 8008990:	4618      	mov	r0, r3
 8008992:	370c      	adds	r7, #12
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr
 800899c:	1fe00fff 	.word	0x1fe00fff

080089a0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b094      	sub	sp, #80	; 0x50
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80089aa:	2300      	movs	r3, #0
 80089ac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80089b0:	f107 0308 	add.w	r3, r7, #8
 80089b4:	4619      	mov	r1, r3
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 fb64 	bl	8009084 <SD_SendSDStatus>
 80089bc:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 80089be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d011      	beq.n	80089e8 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a4f      	ldr	r2, [pc, #316]	; (8008b08 <HAL_SD_GetCardStatus+0x168>)
 80089ca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089d2:	431a      	orrs	r2, r3
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2201      	movs	r2, #1
 80089dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80089e0:	2301      	movs	r3, #1
 80089e2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80089e6:	e070      	b.n	8008aca <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	099b      	lsrs	r3, r3, #6
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	f003 0303 	and.w	r3, r3, #3
 80089f2:	b2da      	uxtb	r2, r3
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	095b      	lsrs	r3, r3, #5
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	f003 0301 	and.w	r3, r3, #1
 8008a02:	b2da      	uxtb	r2, r3
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	0a1b      	lsrs	r3, r3, #8
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008a12:	b29a      	uxth	r2, r3
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	0e1b      	lsrs	r3, r3, #24
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	b29a      	uxth	r2, r3
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	061a      	lsls	r2, r3, #24
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	021b      	lsls	r3, r3, #8
 8008a2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a2e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	0a1b      	lsrs	r3, r3, #8
 8008a34:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008a38:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	0e1b      	lsrs	r3, r3, #24
 8008a3e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	b2da      	uxtb	r2, r3
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	0a1b      	lsrs	r3, r3, #8
 8008a50:	b2da      	uxtb	r2, r3
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	0d1b      	lsrs	r3, r3, #20
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	f003 030f 	and.w	r3, r3, #15
 8008a60:	b2da      	uxtb	r2, r3
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	0c1b      	lsrs	r3, r3, #16
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008a70:	b29a      	uxth	r2, r3
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	b2db      	uxtb	r3, r3
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	b29a      	uxth	r2, r3
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	0a9b      	lsrs	r3, r3, #10
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a8c:	b2da      	uxtb	r2, r3
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	0a1b      	lsrs	r3, r3, #8
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	f003 0303 	and.w	r3, r3, #3
 8008a9c:	b2da      	uxtb	r2, r3
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	091b      	lsrs	r3, r3, #4
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	f003 030f 	and.w	r3, r3, #15
 8008aac:	b2da      	uxtb	r2, r3
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	f003 030f 	and.w	r3, r3, #15
 8008aba:	b2da      	uxtb	r2, r3
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008ac0:	69bb      	ldr	r3, [r7, #24]
 8008ac2:	0e1b      	lsrs	r3, r3, #24
 8008ac4:	b2da      	uxtb	r2, r3
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f001 ffae 	bl	800aa34 <SDMMC_CmdBlockLength>
 8008ad8:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00d      	beq.n	8008afc <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a08      	ldr	r2, [pc, #32]	; (8008b08 <HAL_SD_GetCardStatus+0x168>)
 8008ae6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008aec:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2201      	movs	r2, #1
 8008af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8008afc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3750      	adds	r7, #80	; 0x50
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	1fe00fff 	.word	0x1fe00fff

08008b0c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008b56:	2300      	movs	r3, #0
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	370c      	adds	r7, #12
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008b64:	b5b0      	push	{r4, r5, r7, lr}
 8008b66:	b08e      	sub	sp, #56	; 0x38
 8008b68:	af04      	add	r7, sp, #16
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2203      	movs	r2, #3
 8008b78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b80:	2b03      	cmp	r3, #3
 8008b82:	d02e      	beq.n	8008be2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b8a:	d106      	bne.n	8008b9a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b90:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	639a      	str	r2, [r3, #56]	; 0x38
 8008b98:	e029      	b.n	8008bee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ba0:	d10a      	bne.n	8008bb8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 fb66 	bl	8009274 <SD_WideBus_Enable>
 8008ba8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bae:	6a3b      	ldr	r3, [r7, #32]
 8008bb0:	431a      	orrs	r2, r3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	639a      	str	r2, [r3, #56]	; 0x38
 8008bb6:	e01a      	b.n	8008bee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d10a      	bne.n	8008bd4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 fba3 	bl	800930a <SD_WideBus_Disable>
 8008bc4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bca:	6a3b      	ldr	r3, [r7, #32]
 8008bcc:	431a      	orrs	r2, r3
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	639a      	str	r2, [r3, #56]	; 0x38
 8008bd2:	e00c      	b.n	8008bee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	639a      	str	r2, [r3, #56]	; 0x38
 8008be0:	e005      	b.n	8008bee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d007      	beq.n	8008c06 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a2e      	ldr	r2, [pc, #184]	; (8008cb4 <HAL_SD_ConfigWideBusOperation+0x150>)
 8008bfc:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008c04:	e034      	b.n	8008c70 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	691b      	ldr	r3, [r3, #16]
 8008c1a:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	695b      	ldr	r3, [r3, #20]
 8008c20:	2b03      	cmp	r3, #3
 8008c22:	d903      	bls.n	8008c2c <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	695b      	ldr	r3, [r3, #20]
 8008c28:	61bb      	str	r3, [r7, #24]
 8008c2a:	e012      	b.n	8008c52 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c34:	d103      	bne.n	8008c3e <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	695b      	ldr	r3, [r3, #20]
 8008c3a:	61bb      	str	r3, [r7, #24]
 8008c3c:	e009      	b.n	8008c52 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c46:	d102      	bne.n	8008c4e <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8008c48:	2302      	movs	r3, #2
 8008c4a:	61bb      	str	r3, [r7, #24]
 8008c4c:	e001      	b.n	8008c52 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8008c4e:	2304      	movs	r3, #4
 8008c50:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681d      	ldr	r5, [r3, #0]
 8008c56:	466c      	mov	r4, sp
 8008c58:	f107 0314 	add.w	r3, r7, #20
 8008c5c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008c60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008c64:	f107 0308 	add.w	r3, r7, #8
 8008c68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	f001 fe04 	bl	800a878 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f001 fedb 	bl	800aa34 <SDMMC_CmdBlockLength>
 8008c7e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c80:	6a3b      	ldr	r3, [r7, #32]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00c      	beq.n	8008ca0 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a0a      	ldr	r2, [pc, #40]	; (8008cb4 <HAL_SD_ConfigWideBusOperation+0x150>)
 8008c8c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c92:	6a3b      	ldr	r3, [r7, #32]
 8008c94:	431a      	orrs	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008ca8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3728      	adds	r7, #40	; 0x28
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bdb0      	pop	{r4, r5, r7, pc}
 8008cb4:	1fe00fff 	.word	0x1fe00fff

08008cb8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b086      	sub	sp, #24
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008cc4:	f107 030c 	add.w	r3, r7, #12
 8008cc8:	4619      	mov	r1, r3
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 faaa 	bl	8009224 <SD_SendStatus>
 8008cd0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d005      	beq.n	8008ce4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	431a      	orrs	r2, r3
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	0a5b      	lsrs	r3, r3, #9
 8008ce8:	f003 030f 	and.w	r3, r3, #15
 8008cec:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008cee:	693b      	ldr	r3, [r7, #16]
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3718      	adds	r7, #24
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008cf8:	b590      	push	{r4, r7, lr}
 8008cfa:	b091      	sub	sp, #68	; 0x44
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008d00:	2301      	movs	r3, #1
 8008d02:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f001 fe0e 	bl	800a92a <SDMMC_GetPowerState>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d102      	bne.n	8008d1a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008d14:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008d18:	e0a8      	b.n	8008e6c <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d1e:	2b03      	cmp	r3, #3
 8008d20:	d02e      	beq.n	8008d80 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4618      	mov	r0, r3
 8008d28:	f002 f85a 	bl	800ade0 <SDMMC_CmdSendCID>
 8008d2c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d001      	beq.n	8008d38 <SD_InitCard+0x40>
    {
      return errorstate;
 8008d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d36:	e099      	b.n	8008e6c <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2100      	movs	r1, #0
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f001 fe39 	bl	800a9b6 <SDMMC_GetResponse>
 8008d44:	4602      	mov	r2, r0
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2104      	movs	r1, #4
 8008d50:	4618      	mov	r0, r3
 8008d52:	f001 fe30 	bl	800a9b6 <SDMMC_GetResponse>
 8008d56:	4602      	mov	r2, r0
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2108      	movs	r1, #8
 8008d62:	4618      	mov	r0, r3
 8008d64:	f001 fe27 	bl	800a9b6 <SDMMC_GetResponse>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	210c      	movs	r1, #12
 8008d74:	4618      	mov	r0, r3
 8008d76:	f001 fe1e 	bl	800a9b6 <SDMMC_GetResponse>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d84:	2b03      	cmp	r3, #3
 8008d86:	d00d      	beq.n	8008da4 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f107 020e 	add.w	r2, r7, #14
 8008d90:	4611      	mov	r1, r2
 8008d92:	4618      	mov	r0, r3
 8008d94:	f002 f863 	bl	800ae5e <SDMMC_CmdSetRelAdd>
 8008d98:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d001      	beq.n	8008da4 <SD_InitCard+0xac>
    {
      return errorstate;
 8008da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008da2:	e063      	b.n	8008e6c <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008da8:	2b03      	cmp	r3, #3
 8008daa:	d036      	beq.n	8008e1a <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008dac:	89fb      	ldrh	r3, [r7, #14]
 8008dae:	461a      	mov	r2, r3
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dbc:	041b      	lsls	r3, r3, #16
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	4610      	mov	r0, r2
 8008dc2:	f002 f82c 	bl	800ae1e <SDMMC_CmdSendCSD>
 8008dc6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d001      	beq.n	8008dd2 <SD_InitCard+0xda>
    {
      return errorstate;
 8008dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dd0:	e04c      	b.n	8008e6c <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2100      	movs	r1, #0
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f001 fdec 	bl	800a9b6 <SDMMC_GetResponse>
 8008dde:	4602      	mov	r2, r0
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	2104      	movs	r1, #4
 8008dea:	4618      	mov	r0, r3
 8008dec:	f001 fde3 	bl	800a9b6 <SDMMC_GetResponse>
 8008df0:	4602      	mov	r2, r0
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	2108      	movs	r1, #8
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f001 fdda 	bl	800a9b6 <SDMMC_GetResponse>
 8008e02:	4602      	mov	r2, r0
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	210c      	movs	r1, #12
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f001 fdd1 	bl	800a9b6 <SDMMC_GetResponse>
 8008e14:	4602      	mov	r2, r0
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2104      	movs	r1, #4
 8008e20:	4618      	mov	r0, r3
 8008e22:	f001 fdc8 	bl	800a9b6 <SDMMC_GetResponse>
 8008e26:	4603      	mov	r3, r0
 8008e28:	0d1a      	lsrs	r2, r3, #20
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008e2e:	f107 0310 	add.w	r3, r7, #16
 8008e32:	4619      	mov	r1, r3
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f7ff fc0f 	bl	8008658 <HAL_SD_GetCardCSD>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d002      	beq.n	8008e46 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008e44:	e012      	b.n	8008e6c <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6819      	ldr	r1, [r3, #0]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e4e:	041b      	lsls	r3, r3, #16
 8008e50:	f04f 0400 	mov.w	r4, #0
 8008e54:	461a      	mov	r2, r3
 8008e56:	4623      	mov	r3, r4
 8008e58:	4608      	mov	r0, r1
 8008e5a:	f001 fed7 	bl	800ac0c <SDMMC_CmdSelDesel>
 8008e5e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d001      	beq.n	8008e6a <SD_InitCard+0x172>
  {
    return errorstate;
 8008e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e68:	e000      	b.n	8008e6c <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008e6a:	2300      	movs	r3, #0
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3744      	adds	r7, #68	; 0x44
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd90      	pop	{r4, r7, pc}

08008e74 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b088      	sub	sp, #32
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8008e80:	2300      	movs	r3, #0
 8008e82:	61fb      	str	r3, [r7, #28]
 8008e84:	2300      	movs	r3, #0
 8008e86:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8008e88:	f7f8 fb84 	bl	8001594 <HAL_GetTick>
 8008e8c:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4618      	mov	r0, r3
 8008e94:	f001 fede 	bl	800ac54 <SDMMC_CmdGoIdleState>
 8008e98:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d001      	beq.n	8008ea4 <SD_PowerON+0x30>
  {
    return errorstate;
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	e0e9      	b.n	8009078 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f001 fef1 	bl	800ac90 <SDMMC_CmdOperCond>
 8008eae:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d00d      	beq.n	8008ed2 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f001 fec7 	bl	800ac54 <SDMMC_CmdGoIdleState>
 8008ec6:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d004      	beq.n	8008ed8 <SD_PowerON+0x64>
    {
      return errorstate;
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	e0d2      	b.n	8009078 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d137      	bne.n	8008f50 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	2100      	movs	r1, #0
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f001 fef2 	bl	800acd0 <SDMMC_CmdAppCommand>
 8008eec:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d02d      	beq.n	8008f50 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ef4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008ef8:	e0be      	b.n	8009078 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	2100      	movs	r1, #0
 8008f00:	4618      	mov	r0, r3
 8008f02:	f001 fee5 	bl	800acd0 <SDMMC_CmdAppCommand>
 8008f06:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d001      	beq.n	8008f12 <SD_PowerON+0x9e>
    {
      return errorstate;
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	e0b2      	b.n	8009078 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	495a      	ldr	r1, [pc, #360]	; (8009080 <SD_PowerON+0x20c>)
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f001 fefc 	bl	800ad16 <SDMMC_CmdAppOperCommand>
 8008f1e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d002      	beq.n	8008f2c <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f26:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008f2a:	e0a5      	b.n	8009078 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2100      	movs	r1, #0
 8008f32:	4618      	mov	r0, r3
 8008f34:	f001 fd3f 	bl	800a9b6 <SDMMC_GetResponse>
 8008f38:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008f3a:	69fb      	ldr	r3, [r7, #28]
 8008f3c:	0fdb      	lsrs	r3, r3, #31
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d101      	bne.n	8008f46 <SD_PowerON+0xd2>
 8008f42:	2301      	movs	r3, #1
 8008f44:	e000      	b.n	8008f48 <SD_PowerON+0xd4>
 8008f46:	2300      	movs	r3, #0
 8008f48:	61bb      	str	r3, [r7, #24]

    count++;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d802      	bhi.n	8008f60 <SD_PowerON+0xec>
 8008f5a:	69bb      	ldr	r3, [r7, #24]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d0cc      	beq.n	8008efa <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d902      	bls.n	8008f70 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008f6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008f6e:	e083      	b.n	8009078 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d07d      	beq.n	8009076 <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	699b      	ldr	r3, [r3, #24]
 8008f84:	2b02      	cmp	r3, #2
 8008f86:	d176      	bne.n	8009076 <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d071      	beq.n	8009076 <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f98:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f042 0208 	orr.w	r2, r2, #8
 8008fa8:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f001 ffbc 	bl	800af2c <SDMMC_CmdVoltageSwitch>
 8008fb4:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d00c      	beq.n	8008fd6 <SD_PowerON+0x162>
        {
          return errorstate;
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	e05b      	b.n	8009078 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008fc0:	f7f8 fae8 	bl	8001594 <HAL_GetTick>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	1ad3      	subs	r3, r2, r3
 8008fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fce:	d102      	bne.n	8008fd6 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8008fd0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008fd4:	e050      	b.n	8009078 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fdc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008fe0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008fe4:	d1ec      	bne.n	8008fc0 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008fee:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ff6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ffa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ffe:	d002      	beq.n	8009006 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8009000:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009004:	e038      	b.n	8009078 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8009006:	2001      	movs	r0, #1
 8009008:	f7ff fb1a 	bl	8008640 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	681a      	ldr	r2, [r3, #0]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f042 0204 	orr.w	r2, r2, #4
 800901a:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800901c:	e00a      	b.n	8009034 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800901e:	f7f8 fab9 	bl	8001594 <HAL_GetTick>
 8009022:	4602      	mov	r2, r0
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	1ad3      	subs	r3, r2, r3
 8009028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800902c:	d102      	bne.n	8009034 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800902e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009032:	e021      	b.n	8009078 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800903a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800903e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009042:	d1ec      	bne.n	800901e <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800904c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009054:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009058:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800905c:	d102      	bne.n	8009064 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800905e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009062:	e009      	b.n	8009078 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	2213      	movs	r2, #19
 800906a:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f04f 32ff 	mov.w	r2, #4294967295
 8009074:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8009076:	2300      	movs	r3, #0
}
 8009078:	4618      	mov	r0, r3
 800907a:	3720      	adds	r7, #32
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	c1100000 	.word	0xc1100000

08009084 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b08c      	sub	sp, #48	; 0x30
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800908e:	f7f8 fa81 	bl	8001594 <HAL_GetTick>
 8009092:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2100      	movs	r1, #0
 800909e:	4618      	mov	r0, r3
 80090a0:	f001 fc89 	bl	800a9b6 <SDMMC_GetResponse>
 80090a4:	4603      	mov	r3, r0
 80090a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090ae:	d102      	bne.n	80090b6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80090b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80090b4:	e0b0      	b.n	8009218 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2140      	movs	r1, #64	; 0x40
 80090bc:	4618      	mov	r0, r3
 80090be:	f001 fcb9 	bl	800aa34 <SDMMC_CmdBlockLength>
 80090c2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80090c4:	6a3b      	ldr	r3, [r7, #32]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d005      	beq.n	80090d6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80090d2:	6a3b      	ldr	r3, [r7, #32]
 80090d4:	e0a0      	b.n	8009218 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090de:	041b      	lsls	r3, r3, #16
 80090e0:	4619      	mov	r1, r3
 80090e2:	4610      	mov	r0, r2
 80090e4:	f001 fdf4 	bl	800acd0 <SDMMC_CmdAppCommand>
 80090e8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80090ea:	6a3b      	ldr	r3, [r7, #32]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d005      	beq.n	80090fc <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80090f8:	6a3b      	ldr	r3, [r7, #32]
 80090fa:	e08d      	b.n	8009218 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80090fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009100:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009102:	2340      	movs	r3, #64	; 0x40
 8009104:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009106:	2360      	movs	r3, #96	; 0x60
 8009108:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800910a:	2302      	movs	r3, #2
 800910c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800910e:	2300      	movs	r3, #0
 8009110:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009112:	2301      	movs	r3, #1
 8009114:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f107 0208 	add.w	r2, r7, #8
 800911e:	4611      	mov	r1, r2
 8009120:	4618      	mov	r0, r3
 8009122:	f001 fc5b 	bl	800a9dc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4618      	mov	r0, r3
 800912c:	f001 fedc 	bl	800aee8 <SDMMC_CmdStatusRegister>
 8009130:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009132:	6a3b      	ldr	r3, [r7, #32]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d02b      	beq.n	8009190 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009140:	6a3b      	ldr	r3, [r7, #32]
 8009142:	e069      	b.n	8009218 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800914a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800914e:	2b00      	cmp	r3, #0
 8009150:	d013      	beq.n	800917a <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8009152:	2300      	movs	r3, #0
 8009154:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009156:	e00d      	b.n	8009174 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4618      	mov	r0, r3
 800915e:	f001 fbb5 	bl	800a8cc <SDMMC_ReadFIFO>
 8009162:	4602      	mov	r2, r0
 8009164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009166:	601a      	str	r2, [r3, #0]
        pData++;
 8009168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916a:	3304      	adds	r3, #4
 800916c:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800916e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009170:	3301      	adds	r3, #1
 8009172:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009176:	2b07      	cmp	r3, #7
 8009178:	d9ee      	bls.n	8009158 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800917a:	f7f8 fa0b 	bl	8001594 <HAL_GetTick>
 800917e:	4602      	mov	r2, r0
 8009180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009182:	1ad3      	subs	r3, r2, r3
 8009184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009188:	d102      	bne.n	8009190 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800918a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800918e:	e043      	b.n	8009218 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009196:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800919a:	2b00      	cmp	r3, #0
 800919c:	d0d2      	beq.n	8009144 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091a4:	f003 0308 	and.w	r3, r3, #8
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d001      	beq.n	80091b0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80091ac:	2308      	movs	r3, #8
 80091ae:	e033      	b.n	8009218 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091b6:	f003 0302 	and.w	r3, r3, #2
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d001      	beq.n	80091c2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80091be:	2302      	movs	r3, #2
 80091c0:	e02a      	b.n	8009218 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091c8:	f003 0320 	and.w	r3, r3, #32
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d017      	beq.n	8009200 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80091d0:	2320      	movs	r3, #32
 80091d2:	e021      	b.n	8009218 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4618      	mov	r0, r3
 80091da:	f001 fb77 	bl	800a8cc <SDMMC_ReadFIFO>
 80091de:	4602      	mov	r2, r0
 80091e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e2:	601a      	str	r2, [r3, #0]
    pData++;
 80091e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e6:	3304      	adds	r3, #4
 80091e8:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80091ea:	f7f8 f9d3 	bl	8001594 <HAL_GetTick>
 80091ee:	4602      	mov	r2, r0
 80091f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f2:	1ad3      	subs	r3, r2, r3
 80091f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091f8:	d102      	bne.n	8009200 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80091fa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80091fe:	e00b      	b.n	8009218 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009206:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800920a:	2b00      	cmp	r3, #0
 800920c:	d1e2      	bne.n	80091d4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a03      	ldr	r2, [pc, #12]	; (8009220 <SD_SendSDStatus+0x19c>)
 8009214:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8009216:	2300      	movs	r3, #0
}
 8009218:	4618      	mov	r0, r3
 800921a:	3730      	adds	r7, #48	; 0x30
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}
 8009220:	18000f3a 	.word	0x18000f3a

08009224 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d102      	bne.n	800923a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009234:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009238:	e018      	b.n	800926c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009242:	041b      	lsls	r3, r3, #16
 8009244:	4619      	mov	r1, r3
 8009246:	4610      	mov	r0, r2
 8009248:	f001 fe2b 	bl	800aea2 <SDMMC_CmdSendStatus>
 800924c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d001      	beq.n	8009258 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	e009      	b.n	800926c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	2100      	movs	r1, #0
 800925e:	4618      	mov	r0, r3
 8009260:	f001 fba9 	bl	800a9b6 <SDMMC_GetResponse>
 8009264:	4602      	mov	r2, r0
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3710      	adds	r7, #16
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b086      	sub	sp, #24
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800927c:	2300      	movs	r3, #0
 800927e:	60fb      	str	r3, [r7, #12]
 8009280:	2300      	movs	r3, #0
 8009282:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2100      	movs	r1, #0
 800928a:	4618      	mov	r0, r3
 800928c:	f001 fb93 	bl	800a9b6 <SDMMC_GetResponse>
 8009290:	4603      	mov	r3, r0
 8009292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009296:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800929a:	d102      	bne.n	80092a2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800929c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80092a0:	e02f      	b.n	8009302 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80092a2:	f107 030c 	add.w	r3, r7, #12
 80092a6:	4619      	mov	r1, r3
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 f879 	bl	80093a0 <SD_FindSCR>
 80092ae:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d001      	beq.n	80092ba <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	e023      	b.n	8009302 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d01c      	beq.n	80092fe <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092cc:	041b      	lsls	r3, r3, #16
 80092ce:	4619      	mov	r1, r3
 80092d0:	4610      	mov	r0, r2
 80092d2:	f001 fcfd 	bl	800acd0 <SDMMC_CmdAppCommand>
 80092d6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d001      	beq.n	80092e2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	e00f      	b.n	8009302 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	2102      	movs	r1, #2
 80092e8:	4618      	mov	r0, r3
 80092ea:	f001 fd34 	bl	800ad56 <SDMMC_CmdBusWidth>
 80092ee:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d001      	beq.n	80092fa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	e003      	b.n	8009302 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80092fa:	2300      	movs	r3, #0
 80092fc:	e001      	b.n	8009302 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80092fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009302:	4618      	mov	r0, r3
 8009304:	3718      	adds	r7, #24
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800930a:	b580      	push	{r7, lr}
 800930c:	b086      	sub	sp, #24
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009312:	2300      	movs	r3, #0
 8009314:	60fb      	str	r3, [r7, #12]
 8009316:	2300      	movs	r3, #0
 8009318:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	2100      	movs	r1, #0
 8009320:	4618      	mov	r0, r3
 8009322:	f001 fb48 	bl	800a9b6 <SDMMC_GetResponse>
 8009326:	4603      	mov	r3, r0
 8009328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800932c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009330:	d102      	bne.n	8009338 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009332:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009336:	e02f      	b.n	8009398 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009338:	f107 030c 	add.w	r3, r7, #12
 800933c:	4619      	mov	r1, r3
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 f82e 	bl	80093a0 <SD_FindSCR>
 8009344:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d001      	beq.n	8009350 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	e023      	b.n	8009398 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009356:	2b00      	cmp	r3, #0
 8009358:	d01c      	beq.n	8009394 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681a      	ldr	r2, [r3, #0]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009362:	041b      	lsls	r3, r3, #16
 8009364:	4619      	mov	r1, r3
 8009366:	4610      	mov	r0, r2
 8009368:	f001 fcb2 	bl	800acd0 <SDMMC_CmdAppCommand>
 800936c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d001      	beq.n	8009378 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	e00f      	b.n	8009398 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2100      	movs	r1, #0
 800937e:	4618      	mov	r0, r3
 8009380:	f001 fce9 	bl	800ad56 <SDMMC_CmdBusWidth>
 8009384:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d001      	beq.n	8009390 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	e003      	b.n	8009398 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009390:	2300      	movs	r3, #0
 8009392:	e001      	b.n	8009398 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009394:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009398:	4618      	mov	r0, r3
 800939a:	3718      	adds	r7, #24
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b08e      	sub	sp, #56	; 0x38
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80093aa:	f7f8 f8f3 	bl	8001594 <HAL_GetTick>
 80093ae:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80093b0:	2300      	movs	r3, #0
 80093b2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80093b4:	2300      	movs	r3, #0
 80093b6:	60bb      	str	r3, [r7, #8]
 80093b8:	2300      	movs	r3, #0
 80093ba:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2108      	movs	r1, #8
 80093c6:	4618      	mov	r0, r3
 80093c8:	f001 fb34 	bl	800aa34 <SDMMC_CmdBlockLength>
 80093cc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80093ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d001      	beq.n	80093d8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80093d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d6:	e0ad      	b.n	8009534 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093e0:	041b      	lsls	r3, r3, #16
 80093e2:	4619      	mov	r1, r3
 80093e4:	4610      	mov	r0, r2
 80093e6:	f001 fc73 	bl	800acd0 <SDMMC_CmdAppCommand>
 80093ea:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80093ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d001      	beq.n	80093f6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80093f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f4:	e09e      	b.n	8009534 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80093f6:	f04f 33ff 	mov.w	r3, #4294967295
 80093fa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80093fc:	2308      	movs	r3, #8
 80093fe:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009400:	2330      	movs	r3, #48	; 0x30
 8009402:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009404:	2302      	movs	r3, #2
 8009406:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009408:	2300      	movs	r3, #0
 800940a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800940c:	2301      	movs	r3, #1
 800940e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f107 0210 	add.w	r2, r7, #16
 8009418:	4611      	mov	r1, r2
 800941a:	4618      	mov	r0, r3
 800941c:	f001 fade 	bl	800a9dc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4618      	mov	r0, r3
 8009426:	f001 fcb9 	bl	800ad9c <SDMMC_CmdSendSCR>
 800942a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800942c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942e:	2b00      	cmp	r3, #0
 8009430:	d027      	beq.n	8009482 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8009432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009434:	e07e      	b.n	8009534 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800943c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009440:	2b00      	cmp	r3, #0
 8009442:	d113      	bne.n	800946c <SD_FindSCR+0xcc>
 8009444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009446:	2b00      	cmp	r3, #0
 8009448:	d110      	bne.n	800946c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4618      	mov	r0, r3
 8009450:	f001 fa3c 	bl	800a8cc <SDMMC_ReadFIFO>
 8009454:	4603      	mov	r3, r0
 8009456:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4618      	mov	r0, r3
 800945e:	f001 fa35 	bl	800a8cc <SDMMC_ReadFIFO>
 8009462:	4603      	mov	r3, r0
 8009464:	60fb      	str	r3, [r7, #12]
      index++;
 8009466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009468:	3301      	adds	r3, #1
 800946a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800946c:	f7f8 f892 	bl	8001594 <HAL_GetTick>
 8009470:	4602      	mov	r2, r0
 8009472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009474:	1ad3      	subs	r3, r2, r3
 8009476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800947a:	d102      	bne.n	8009482 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800947c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009480:	e058      	b.n	8009534 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009488:	f240 532a 	movw	r3, #1322	; 0x52a
 800948c:	4013      	ands	r3, r2
 800948e:	2b00      	cmp	r3, #0
 8009490:	d0d1      	beq.n	8009436 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009498:	f003 0308 	and.w	r3, r3, #8
 800949c:	2b00      	cmp	r3, #0
 800949e:	d005      	beq.n	80094ac <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	2208      	movs	r2, #8
 80094a6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80094a8:	2308      	movs	r3, #8
 80094aa:	e043      	b.n	8009534 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094b2:	f003 0302 	and.w	r3, r3, #2
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d005      	beq.n	80094c6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	2202      	movs	r2, #2
 80094c0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80094c2:	2302      	movs	r3, #2
 80094c4:	e036      	b.n	8009534 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094cc:	f003 0320 	and.w	r3, r3, #32
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d005      	beq.n	80094e0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	2220      	movs	r2, #32
 80094da:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80094dc:	2320      	movs	r3, #32
 80094de:	e029      	b.n	8009534 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a15      	ldr	r2, [pc, #84]	; (800953c <SD_FindSCR+0x19c>)
 80094e6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	061a      	lsls	r2, r3, #24
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	021b      	lsls	r3, r3, #8
 80094f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80094f4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	0a1b      	lsrs	r3, r3, #8
 80094fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80094fe:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	0e1b      	lsrs	r3, r3, #24
 8009504:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009508:	601a      	str	r2, [r3, #0]
    scr++;
 800950a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800950c:	3304      	adds	r3, #4
 800950e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	061a      	lsls	r2, r3, #24
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	021b      	lsls	r3, r3, #8
 8009518:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800951c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	0a1b      	lsrs	r3, r3, #8
 8009522:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009526:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	0e1b      	lsrs	r3, r3, #24
 800952c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800952e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009530:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009532:	2300      	movs	r3, #0
}
 8009534:	4618      	mov	r0, r3
 8009536:	3738      	adds	r7, #56	; 0x38
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}
 800953c:	18000f3a 	.word	0x18000f3a

08009540 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8009548:	2300      	movs	r3, #0
 800954a:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d101      	bne.n	8009556 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8009552:	2301      	movs	r3, #1
 8009554:	e0e2      	b.n	800971c <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a70      	ldr	r2, [pc, #448]	; (8009724 <HAL_SPI_Init+0x1e4>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d00f      	beq.n	8009586 <HAL_SPI_Init+0x46>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a6f      	ldr	r2, [pc, #444]	; (8009728 <HAL_SPI_Init+0x1e8>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d00a      	beq.n	8009586 <HAL_SPI_Init+0x46>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a6d      	ldr	r2, [pc, #436]	; (800972c <HAL_SPI_Init+0x1ec>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d005      	beq.n	8009586 <HAL_SPI_Init+0x46>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	68db      	ldr	r3, [r3, #12]
 800957e:	2b0f      	cmp	r3, #15
 8009580:	d901      	bls.n	8009586 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8009582:	2301      	movs	r3, #1
 8009584:	e0ca      	b.n	800971c <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f000 f8d2 	bl	8009730 <SPI_GetPacketSize>
 800958c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a64      	ldr	r2, [pc, #400]	; (8009724 <HAL_SPI_Init+0x1e4>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d00c      	beq.n	80095b2 <HAL_SPI_Init+0x72>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a62      	ldr	r2, [pc, #392]	; (8009728 <HAL_SPI_Init+0x1e8>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d007      	beq.n	80095b2 <HAL_SPI_Init+0x72>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a61      	ldr	r2, [pc, #388]	; (800972c <HAL_SPI_Init+0x1ec>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d002      	beq.n	80095b2 <HAL_SPI_Init+0x72>
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	2b08      	cmp	r3, #8
 80095b0:	d811      	bhi.n	80095d6 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80095b6:	4a5b      	ldr	r2, [pc, #364]	; (8009724 <HAL_SPI_Init+0x1e4>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d009      	beq.n	80095d0 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a59      	ldr	r2, [pc, #356]	; (8009728 <HAL_SPI_Init+0x1e8>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d004      	beq.n	80095d0 <HAL_SPI_Init+0x90>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a58      	ldr	r2, [pc, #352]	; (800972c <HAL_SPI_Init+0x1ec>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d104      	bne.n	80095da <HAL_SPI_Init+0x9a>
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	2b10      	cmp	r3, #16
 80095d4:	d901      	bls.n	80095da <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 80095d6:	2301      	movs	r3, #1
 80095d8:	e0a0      	b.n	800971c <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d106      	bne.n	80095f4 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f7f7 fd22 	bl	8001038 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2202      	movs	r2, #2
 80095f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f022 0201 	bic.w	r2, r2, #1
 800960a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	699b      	ldr	r3, [r3, #24]
 8009610:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009614:	d110      	bne.n	8009638 <HAL_SPI_Init+0xf8>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800961e:	d10b      	bne.n	8009638 <HAL_SPI_Init+0xf8>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009624:	2b00      	cmp	r3, #0
 8009626:	d107      	bne.n	8009638 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	681a      	ldr	r2, [r3, #0]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009636:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	69da      	ldr	r2, [r3, #28]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009640:	431a      	orrs	r2, r3
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	431a      	orrs	r2, r3
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800964a:	ea42 0103 	orr.w	r1, r2, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	68da      	ldr	r2, [r3, #12]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	430a      	orrs	r2, r1
 8009658:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009662:	431a      	orrs	r2, r3
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009668:	431a      	orrs	r2, r3
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	699b      	ldr	r3, [r3, #24]
 800966e:	431a      	orrs	r2, r3
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	691b      	ldr	r3, [r3, #16]
 8009674:	431a      	orrs	r2, r3
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	695b      	ldr	r3, [r3, #20]
 800967a:	431a      	orrs	r2, r3
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6a1b      	ldr	r3, [r3, #32]
 8009680:	431a      	orrs	r2, r3
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	431a      	orrs	r2, r3
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800968c:	431a      	orrs	r2, r3
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	689b      	ldr	r3, [r3, #8]
 8009692:	431a      	orrs	r2, r3
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009698:	ea42 0103 	orr.w	r1, r2, r3
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	430a      	orrs	r2, r1
 80096a6:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d113      	bne.n	80096d8 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096c2:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	689b      	ldr	r3, [r3, #8]
 80096ca:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80096d6:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f022 0201 	bic.w	r2, r2, #1
 80096e6:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d00a      	beq.n	800970a <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	430a      	orrs	r2, r1
 8009708:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2200      	movs	r2, #0
 800970e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2201      	movs	r2, #1
 8009716:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800971a:	2300      	movs	r3, #0
}
 800971c:	4618      	mov	r0, r3
 800971e:	3710      	adds	r7, #16
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}
 8009724:	40013000 	.word	0x40013000
 8009728:	40003800 	.word	0x40003800
 800972c:	40003c00 	.word	0x40003c00

08009730 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009730:	b480      	push	{r7}
 8009732:	b085      	sub	sp, #20
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800973c:	095b      	lsrs	r3, r3, #5
 800973e:	3301      	adds	r3, #1
 8009740:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	68db      	ldr	r3, [r3, #12]
 8009746:	3301      	adds	r3, #1
 8009748:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	3307      	adds	r3, #7
 800974e:	08db      	lsrs	r3, r3, #3
 8009750:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	68fa      	ldr	r2, [r7, #12]
 8009756:	fb02 f303 	mul.w	r3, r2, r3
}
 800975a:	4618      	mov	r0, r3
 800975c:	3714      	adds	r7, #20
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr

08009766 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009766:	b580      	push	{r7, lr}
 8009768:	b082      	sub	sp, #8
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d101      	bne.n	8009778 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009774:	2301      	movs	r3, #1
 8009776:	e042      	b.n	80097fe <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800977e:	2b00      	cmp	r3, #0
 8009780:	d106      	bne.n	8009790 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2200      	movs	r2, #0
 8009786:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f7f7 fc9e 	bl	80010cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2224      	movs	r2, #36	; 0x24
 8009794:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f022 0201 	bic.w	r2, r2, #1
 80097a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 f82d 	bl	8009808 <UART_SetConfig>
 80097ae:	4603      	mov	r3, r0
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d101      	bne.n	80097b8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80097b4:	2301      	movs	r3, #1
 80097b6:	e022      	b.n	80097fe <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d002      	beq.n	80097c6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 fdd1 	bl	800a368 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	685a      	ldr	r2, [r3, #4]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80097d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	689a      	ldr	r2, [r3, #8]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80097e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f042 0201 	orr.w	r2, r2, #1
 80097f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 fe58 	bl	800a4ac <UART_CheckIdleState>
 80097fc:	4603      	mov	r3, r0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3708      	adds	r7, #8
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
	...

08009808 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009808:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800980c:	b08e      	sub	sp, #56	; 0x38
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009812:	2300      	movs	r3, #0
 8009814:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	689a      	ldr	r2, [r3, #8]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	691b      	ldr	r3, [r3, #16]
 8009820:	431a      	orrs	r2, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	695b      	ldr	r3, [r3, #20]
 8009826:	431a      	orrs	r2, r3
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	69db      	ldr	r3, [r3, #28]
 800982c:	4313      	orrs	r3, r2
 800982e:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009834:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009836:	4313      	orrs	r3, r2
 8009838:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	681a      	ldr	r2, [r3, #0]
 8009840:	4bc1      	ldr	r3, [pc, #772]	; (8009b48 <UART_SetConfig+0x340>)
 8009842:	4013      	ands	r3, r2
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	6812      	ldr	r2, [r2, #0]
 8009848:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800984a:	430b      	orrs	r3, r1
 800984c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	68da      	ldr	r2, [r3, #12]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	430a      	orrs	r2, r1
 8009862:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	699b      	ldr	r3, [r3, #24]
 8009868:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4ab7      	ldr	r2, [pc, #732]	; (8009b4c <UART_SetConfig+0x344>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d004      	beq.n	800987e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6a1b      	ldr	r3, [r3, #32]
 8009878:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800987a:	4313      	orrs	r3, r2
 800987c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	689a      	ldr	r2, [r3, #8]
 8009884:	4bb2      	ldr	r3, [pc, #712]	; (8009b50 <UART_SetConfig+0x348>)
 8009886:	4013      	ands	r3, r2
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	6812      	ldr	r2, [r2, #0]
 800988c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800988e:	430b      	orrs	r3, r1
 8009890:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009898:	f023 010f 	bic.w	r1, r3, #15
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	430a      	orrs	r2, r1
 80098a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4aa9      	ldr	r2, [pc, #676]	; (8009b54 <UART_SetConfig+0x34c>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d177      	bne.n	80099a2 <UART_SetConfig+0x19a>
 80098b2:	4ba9      	ldr	r3, [pc, #676]	; (8009b58 <UART_SetConfig+0x350>)
 80098b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098ba:	2b28      	cmp	r3, #40	; 0x28
 80098bc:	d86c      	bhi.n	8009998 <UART_SetConfig+0x190>
 80098be:	a201      	add	r2, pc, #4	; (adr r2, 80098c4 <UART_SetConfig+0xbc>)
 80098c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c4:	08009969 	.word	0x08009969
 80098c8:	08009999 	.word	0x08009999
 80098cc:	08009999 	.word	0x08009999
 80098d0:	08009999 	.word	0x08009999
 80098d4:	08009999 	.word	0x08009999
 80098d8:	08009999 	.word	0x08009999
 80098dc:	08009999 	.word	0x08009999
 80098e0:	08009999 	.word	0x08009999
 80098e4:	08009971 	.word	0x08009971
 80098e8:	08009999 	.word	0x08009999
 80098ec:	08009999 	.word	0x08009999
 80098f0:	08009999 	.word	0x08009999
 80098f4:	08009999 	.word	0x08009999
 80098f8:	08009999 	.word	0x08009999
 80098fc:	08009999 	.word	0x08009999
 8009900:	08009999 	.word	0x08009999
 8009904:	08009979 	.word	0x08009979
 8009908:	08009999 	.word	0x08009999
 800990c:	08009999 	.word	0x08009999
 8009910:	08009999 	.word	0x08009999
 8009914:	08009999 	.word	0x08009999
 8009918:	08009999 	.word	0x08009999
 800991c:	08009999 	.word	0x08009999
 8009920:	08009999 	.word	0x08009999
 8009924:	08009981 	.word	0x08009981
 8009928:	08009999 	.word	0x08009999
 800992c:	08009999 	.word	0x08009999
 8009930:	08009999 	.word	0x08009999
 8009934:	08009999 	.word	0x08009999
 8009938:	08009999 	.word	0x08009999
 800993c:	08009999 	.word	0x08009999
 8009940:	08009999 	.word	0x08009999
 8009944:	08009989 	.word	0x08009989
 8009948:	08009999 	.word	0x08009999
 800994c:	08009999 	.word	0x08009999
 8009950:	08009999 	.word	0x08009999
 8009954:	08009999 	.word	0x08009999
 8009958:	08009999 	.word	0x08009999
 800995c:	08009999 	.word	0x08009999
 8009960:	08009999 	.word	0x08009999
 8009964:	08009991 	.word	0x08009991
 8009968:	2301      	movs	r3, #1
 800996a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800996e:	e233      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009970:	2304      	movs	r3, #4
 8009972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009976:	e22f      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009978:	2308      	movs	r3, #8
 800997a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800997e:	e22b      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009980:	2310      	movs	r3, #16
 8009982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009986:	e227      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009988:	2320      	movs	r3, #32
 800998a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800998e:	e223      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009990:	2340      	movs	r3, #64	; 0x40
 8009992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009996:	e21f      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009998:	2380      	movs	r3, #128	; 0x80
 800999a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800999e:	bf00      	nop
 80099a0:	e21a      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a6d      	ldr	r2, [pc, #436]	; (8009b5c <UART_SetConfig+0x354>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d132      	bne.n	8009a12 <UART_SetConfig+0x20a>
 80099ac:	4b6a      	ldr	r3, [pc, #424]	; (8009b58 <UART_SetConfig+0x350>)
 80099ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099b0:	f003 0307 	and.w	r3, r3, #7
 80099b4:	2b05      	cmp	r3, #5
 80099b6:	d827      	bhi.n	8009a08 <UART_SetConfig+0x200>
 80099b8:	a201      	add	r2, pc, #4	; (adr r2, 80099c0 <UART_SetConfig+0x1b8>)
 80099ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099be:	bf00      	nop
 80099c0:	080099d9 	.word	0x080099d9
 80099c4:	080099e1 	.word	0x080099e1
 80099c8:	080099e9 	.word	0x080099e9
 80099cc:	080099f1 	.word	0x080099f1
 80099d0:	080099f9 	.word	0x080099f9
 80099d4:	08009a01 	.word	0x08009a01
 80099d8:	2300      	movs	r3, #0
 80099da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099de:	e1fb      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 80099e0:	2304      	movs	r3, #4
 80099e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099e6:	e1f7      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 80099e8:	2308      	movs	r3, #8
 80099ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ee:	e1f3      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 80099f0:	2310      	movs	r3, #16
 80099f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099f6:	e1ef      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 80099f8:	2320      	movs	r3, #32
 80099fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099fe:	e1eb      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009a00:	2340      	movs	r3, #64	; 0x40
 8009a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a06:	e1e7      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009a08:	2380      	movs	r3, #128	; 0x80
 8009a0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a0e:	bf00      	nop
 8009a10:	e1e2      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a52      	ldr	r2, [pc, #328]	; (8009b60 <UART_SetConfig+0x358>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d132      	bne.n	8009a82 <UART_SetConfig+0x27a>
 8009a1c:	4b4e      	ldr	r3, [pc, #312]	; (8009b58 <UART_SetConfig+0x350>)
 8009a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a20:	f003 0307 	and.w	r3, r3, #7
 8009a24:	2b05      	cmp	r3, #5
 8009a26:	d827      	bhi.n	8009a78 <UART_SetConfig+0x270>
 8009a28:	a201      	add	r2, pc, #4	; (adr r2, 8009a30 <UART_SetConfig+0x228>)
 8009a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a2e:	bf00      	nop
 8009a30:	08009a49 	.word	0x08009a49
 8009a34:	08009a51 	.word	0x08009a51
 8009a38:	08009a59 	.word	0x08009a59
 8009a3c:	08009a61 	.word	0x08009a61
 8009a40:	08009a69 	.word	0x08009a69
 8009a44:	08009a71 	.word	0x08009a71
 8009a48:	2300      	movs	r3, #0
 8009a4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a4e:	e1c3      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009a50:	2304      	movs	r3, #4
 8009a52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a56:	e1bf      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009a58:	2308      	movs	r3, #8
 8009a5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a5e:	e1bb      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009a60:	2310      	movs	r3, #16
 8009a62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a66:	e1b7      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009a68:	2320      	movs	r3, #32
 8009a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a6e:	e1b3      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009a70:	2340      	movs	r3, #64	; 0x40
 8009a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a76:	e1af      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009a78:	2380      	movs	r3, #128	; 0x80
 8009a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a7e:	bf00      	nop
 8009a80:	e1aa      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a37      	ldr	r2, [pc, #220]	; (8009b64 <UART_SetConfig+0x35c>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d132      	bne.n	8009af2 <UART_SetConfig+0x2ea>
 8009a8c:	4b32      	ldr	r3, [pc, #200]	; (8009b58 <UART_SetConfig+0x350>)
 8009a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a90:	f003 0307 	and.w	r3, r3, #7
 8009a94:	2b05      	cmp	r3, #5
 8009a96:	d827      	bhi.n	8009ae8 <UART_SetConfig+0x2e0>
 8009a98:	a201      	add	r2, pc, #4	; (adr r2, 8009aa0 <UART_SetConfig+0x298>)
 8009a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a9e:	bf00      	nop
 8009aa0:	08009ab9 	.word	0x08009ab9
 8009aa4:	08009ac1 	.word	0x08009ac1
 8009aa8:	08009ac9 	.word	0x08009ac9
 8009aac:	08009ad1 	.word	0x08009ad1
 8009ab0:	08009ad9 	.word	0x08009ad9
 8009ab4:	08009ae1 	.word	0x08009ae1
 8009ab8:	2300      	movs	r3, #0
 8009aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009abe:	e18b      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009ac0:	2304      	movs	r3, #4
 8009ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ac6:	e187      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009ac8:	2308      	movs	r3, #8
 8009aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ace:	e183      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009ad0:	2310      	movs	r3, #16
 8009ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ad6:	e17f      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009ad8:	2320      	movs	r3, #32
 8009ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ade:	e17b      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009ae0:	2340      	movs	r3, #64	; 0x40
 8009ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ae6:	e177      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009ae8:	2380      	movs	r3, #128	; 0x80
 8009aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aee:	bf00      	nop
 8009af0:	e172      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a1c      	ldr	r2, [pc, #112]	; (8009b68 <UART_SetConfig+0x360>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d144      	bne.n	8009b86 <UART_SetConfig+0x37e>
 8009afc:	4b16      	ldr	r3, [pc, #88]	; (8009b58 <UART_SetConfig+0x350>)
 8009afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b00:	f003 0307 	and.w	r3, r3, #7
 8009b04:	2b05      	cmp	r3, #5
 8009b06:	d839      	bhi.n	8009b7c <UART_SetConfig+0x374>
 8009b08:	a201      	add	r2, pc, #4	; (adr r2, 8009b10 <UART_SetConfig+0x308>)
 8009b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b0e:	bf00      	nop
 8009b10:	08009b29 	.word	0x08009b29
 8009b14:	08009b31 	.word	0x08009b31
 8009b18:	08009b39 	.word	0x08009b39
 8009b1c:	08009b41 	.word	0x08009b41
 8009b20:	08009b6d 	.word	0x08009b6d
 8009b24:	08009b75 	.word	0x08009b75
 8009b28:	2300      	movs	r3, #0
 8009b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b2e:	e153      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009b30:	2304      	movs	r3, #4
 8009b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b36:	e14f      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009b38:	2308      	movs	r3, #8
 8009b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b3e:	e14b      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009b40:	2310      	movs	r3, #16
 8009b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b46:	e147      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009b48:	cfff69f3 	.word	0xcfff69f3
 8009b4c:	58000c00 	.word	0x58000c00
 8009b50:	11fff4ff 	.word	0x11fff4ff
 8009b54:	40011000 	.word	0x40011000
 8009b58:	58024400 	.word	0x58024400
 8009b5c:	40004400 	.word	0x40004400
 8009b60:	40004800 	.word	0x40004800
 8009b64:	40004c00 	.word	0x40004c00
 8009b68:	40005000 	.word	0x40005000
 8009b6c:	2320      	movs	r3, #32
 8009b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b72:	e131      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009b74:	2340      	movs	r3, #64	; 0x40
 8009b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b7a:	e12d      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009b7c:	2380      	movs	r3, #128	; 0x80
 8009b7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b82:	bf00      	nop
 8009b84:	e128      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4ab6      	ldr	r2, [pc, #728]	; (8009e64 <UART_SetConfig+0x65c>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d178      	bne.n	8009c82 <UART_SetConfig+0x47a>
 8009b90:	4bb5      	ldr	r3, [pc, #724]	; (8009e68 <UART_SetConfig+0x660>)
 8009b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b98:	2b28      	cmp	r3, #40	; 0x28
 8009b9a:	d86d      	bhi.n	8009c78 <UART_SetConfig+0x470>
 8009b9c:	a201      	add	r2, pc, #4	; (adr r2, 8009ba4 <UART_SetConfig+0x39c>)
 8009b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ba2:	bf00      	nop
 8009ba4:	08009c49 	.word	0x08009c49
 8009ba8:	08009c79 	.word	0x08009c79
 8009bac:	08009c79 	.word	0x08009c79
 8009bb0:	08009c79 	.word	0x08009c79
 8009bb4:	08009c79 	.word	0x08009c79
 8009bb8:	08009c79 	.word	0x08009c79
 8009bbc:	08009c79 	.word	0x08009c79
 8009bc0:	08009c79 	.word	0x08009c79
 8009bc4:	08009c51 	.word	0x08009c51
 8009bc8:	08009c79 	.word	0x08009c79
 8009bcc:	08009c79 	.word	0x08009c79
 8009bd0:	08009c79 	.word	0x08009c79
 8009bd4:	08009c79 	.word	0x08009c79
 8009bd8:	08009c79 	.word	0x08009c79
 8009bdc:	08009c79 	.word	0x08009c79
 8009be0:	08009c79 	.word	0x08009c79
 8009be4:	08009c59 	.word	0x08009c59
 8009be8:	08009c79 	.word	0x08009c79
 8009bec:	08009c79 	.word	0x08009c79
 8009bf0:	08009c79 	.word	0x08009c79
 8009bf4:	08009c79 	.word	0x08009c79
 8009bf8:	08009c79 	.word	0x08009c79
 8009bfc:	08009c79 	.word	0x08009c79
 8009c00:	08009c79 	.word	0x08009c79
 8009c04:	08009c61 	.word	0x08009c61
 8009c08:	08009c79 	.word	0x08009c79
 8009c0c:	08009c79 	.word	0x08009c79
 8009c10:	08009c79 	.word	0x08009c79
 8009c14:	08009c79 	.word	0x08009c79
 8009c18:	08009c79 	.word	0x08009c79
 8009c1c:	08009c79 	.word	0x08009c79
 8009c20:	08009c79 	.word	0x08009c79
 8009c24:	08009c69 	.word	0x08009c69
 8009c28:	08009c79 	.word	0x08009c79
 8009c2c:	08009c79 	.word	0x08009c79
 8009c30:	08009c79 	.word	0x08009c79
 8009c34:	08009c79 	.word	0x08009c79
 8009c38:	08009c79 	.word	0x08009c79
 8009c3c:	08009c79 	.word	0x08009c79
 8009c40:	08009c79 	.word	0x08009c79
 8009c44:	08009c71 	.word	0x08009c71
 8009c48:	2301      	movs	r3, #1
 8009c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c4e:	e0c3      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009c50:	2304      	movs	r3, #4
 8009c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c56:	e0bf      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009c58:	2308      	movs	r3, #8
 8009c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c5e:	e0bb      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009c60:	2310      	movs	r3, #16
 8009c62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c66:	e0b7      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009c68:	2320      	movs	r3, #32
 8009c6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c6e:	e0b3      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009c70:	2340      	movs	r3, #64	; 0x40
 8009c72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c76:	e0af      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009c78:	2380      	movs	r3, #128	; 0x80
 8009c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c7e:	bf00      	nop
 8009c80:	e0aa      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4a79      	ldr	r2, [pc, #484]	; (8009e6c <UART_SetConfig+0x664>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d132      	bne.n	8009cf2 <UART_SetConfig+0x4ea>
 8009c8c:	4b76      	ldr	r3, [pc, #472]	; (8009e68 <UART_SetConfig+0x660>)
 8009c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c90:	f003 0307 	and.w	r3, r3, #7
 8009c94:	2b05      	cmp	r3, #5
 8009c96:	d827      	bhi.n	8009ce8 <UART_SetConfig+0x4e0>
 8009c98:	a201      	add	r2, pc, #4	; (adr r2, 8009ca0 <UART_SetConfig+0x498>)
 8009c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c9e:	bf00      	nop
 8009ca0:	08009cb9 	.word	0x08009cb9
 8009ca4:	08009cc1 	.word	0x08009cc1
 8009ca8:	08009cc9 	.word	0x08009cc9
 8009cac:	08009cd1 	.word	0x08009cd1
 8009cb0:	08009cd9 	.word	0x08009cd9
 8009cb4:	08009ce1 	.word	0x08009ce1
 8009cb8:	2300      	movs	r3, #0
 8009cba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cbe:	e08b      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009cc0:	2304      	movs	r3, #4
 8009cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cc6:	e087      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009cc8:	2308      	movs	r3, #8
 8009cca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cce:	e083      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009cd0:	2310      	movs	r3, #16
 8009cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cd6:	e07f      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009cd8:	2320      	movs	r3, #32
 8009cda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cde:	e07b      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009ce0:	2340      	movs	r3, #64	; 0x40
 8009ce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ce6:	e077      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009ce8:	2380      	movs	r3, #128	; 0x80
 8009cea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cee:	bf00      	nop
 8009cf0:	e072      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4a5e      	ldr	r2, [pc, #376]	; (8009e70 <UART_SetConfig+0x668>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d132      	bne.n	8009d62 <UART_SetConfig+0x55a>
 8009cfc:	4b5a      	ldr	r3, [pc, #360]	; (8009e68 <UART_SetConfig+0x660>)
 8009cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d00:	f003 0307 	and.w	r3, r3, #7
 8009d04:	2b05      	cmp	r3, #5
 8009d06:	d827      	bhi.n	8009d58 <UART_SetConfig+0x550>
 8009d08:	a201      	add	r2, pc, #4	; (adr r2, 8009d10 <UART_SetConfig+0x508>)
 8009d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d0e:	bf00      	nop
 8009d10:	08009d29 	.word	0x08009d29
 8009d14:	08009d31 	.word	0x08009d31
 8009d18:	08009d39 	.word	0x08009d39
 8009d1c:	08009d41 	.word	0x08009d41
 8009d20:	08009d49 	.word	0x08009d49
 8009d24:	08009d51 	.word	0x08009d51
 8009d28:	2300      	movs	r3, #0
 8009d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d2e:	e053      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009d30:	2304      	movs	r3, #4
 8009d32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d36:	e04f      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009d38:	2308      	movs	r3, #8
 8009d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d3e:	e04b      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009d40:	2310      	movs	r3, #16
 8009d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d46:	e047      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009d48:	2320      	movs	r3, #32
 8009d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d4e:	e043      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009d50:	2340      	movs	r3, #64	; 0x40
 8009d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d56:	e03f      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009d58:	2380      	movs	r3, #128	; 0x80
 8009d5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d5e:	bf00      	nop
 8009d60:	e03a      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a43      	ldr	r2, [pc, #268]	; (8009e74 <UART_SetConfig+0x66c>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d132      	bne.n	8009dd2 <UART_SetConfig+0x5ca>
 8009d6c:	4b3e      	ldr	r3, [pc, #248]	; (8009e68 <UART_SetConfig+0x660>)
 8009d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d70:	f003 0307 	and.w	r3, r3, #7
 8009d74:	2b05      	cmp	r3, #5
 8009d76:	d827      	bhi.n	8009dc8 <UART_SetConfig+0x5c0>
 8009d78:	a201      	add	r2, pc, #4	; (adr r2, 8009d80 <UART_SetConfig+0x578>)
 8009d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d7e:	bf00      	nop
 8009d80:	08009d99 	.word	0x08009d99
 8009d84:	08009da1 	.word	0x08009da1
 8009d88:	08009da9 	.word	0x08009da9
 8009d8c:	08009db1 	.word	0x08009db1
 8009d90:	08009db9 	.word	0x08009db9
 8009d94:	08009dc1 	.word	0x08009dc1
 8009d98:	2302      	movs	r3, #2
 8009d9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d9e:	e01b      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009da0:	2304      	movs	r3, #4
 8009da2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009da6:	e017      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009da8:	2308      	movs	r3, #8
 8009daa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dae:	e013      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009db0:	2310      	movs	r3, #16
 8009db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009db6:	e00f      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009db8:	2320      	movs	r3, #32
 8009dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dbe:	e00b      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009dc0:	2340      	movs	r3, #64	; 0x40
 8009dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dc6:	e007      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009dc8:	2380      	movs	r3, #128	; 0x80
 8009dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dce:	bf00      	nop
 8009dd0:	e002      	b.n	8009dd8 <UART_SetConfig+0x5d0>
 8009dd2:	2380      	movs	r3, #128	; 0x80
 8009dd4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a25      	ldr	r2, [pc, #148]	; (8009e74 <UART_SetConfig+0x66c>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	f040 80b8 	bne.w	8009f54 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009de4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009de8:	2b08      	cmp	r3, #8
 8009dea:	d019      	beq.n	8009e20 <UART_SetConfig+0x618>
 8009dec:	2b08      	cmp	r3, #8
 8009dee:	dc04      	bgt.n	8009dfa <UART_SetConfig+0x5f2>
 8009df0:	2b02      	cmp	r3, #2
 8009df2:	d009      	beq.n	8009e08 <UART_SetConfig+0x600>
 8009df4:	2b04      	cmp	r3, #4
 8009df6:	d00b      	beq.n	8009e10 <UART_SetConfig+0x608>
 8009df8:	e042      	b.n	8009e80 <UART_SetConfig+0x678>
 8009dfa:	2b20      	cmp	r3, #32
 8009dfc:	d02b      	beq.n	8009e56 <UART_SetConfig+0x64e>
 8009dfe:	2b40      	cmp	r3, #64	; 0x40
 8009e00:	d02c      	beq.n	8009e5c <UART_SetConfig+0x654>
 8009e02:	2b10      	cmp	r3, #16
 8009e04:	d014      	beq.n	8009e30 <UART_SetConfig+0x628>
 8009e06:	e03b      	b.n	8009e80 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009e08:	f7fd fa80 	bl	800730c <HAL_RCCEx_GetD3PCLK1Freq>
 8009e0c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009e0e:	e03d      	b.n	8009e8c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e10:	f107 0314 	add.w	r3, r7, #20
 8009e14:	4618      	mov	r0, r3
 8009e16:	f7fd fa8f 	bl	8007338 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009e1a:	69bb      	ldr	r3, [r7, #24]
 8009e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e1e:	e035      	b.n	8009e8c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e20:	f107 0308 	add.w	r3, r7, #8
 8009e24:	4618      	mov	r0, r3
 8009e26:	f7fd fbd3 	bl	80075d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e2e:	e02d      	b.n	8009e8c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e30:	4b0d      	ldr	r3, [pc, #52]	; (8009e68 <UART_SetConfig+0x660>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f003 0320 	and.w	r3, r3, #32
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d009      	beq.n	8009e50 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009e3c:	4b0a      	ldr	r3, [pc, #40]	; (8009e68 <UART_SetConfig+0x660>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	08db      	lsrs	r3, r3, #3
 8009e42:	f003 0303 	and.w	r3, r3, #3
 8009e46:	4a0c      	ldr	r2, [pc, #48]	; (8009e78 <UART_SetConfig+0x670>)
 8009e48:	fa22 f303 	lsr.w	r3, r2, r3
 8009e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009e4e:	e01d      	b.n	8009e8c <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8009e50:	4b09      	ldr	r3, [pc, #36]	; (8009e78 <UART_SetConfig+0x670>)
 8009e52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e54:	e01a      	b.n	8009e8c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e56:	4b09      	ldr	r3, [pc, #36]	; (8009e7c <UART_SetConfig+0x674>)
 8009e58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e5a:	e017      	b.n	8009e8c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e62:	e013      	b.n	8009e8c <UART_SetConfig+0x684>
 8009e64:	40011400 	.word	0x40011400
 8009e68:	58024400 	.word	0x58024400
 8009e6c:	40007800 	.word	0x40007800
 8009e70:	40007c00 	.word	0x40007c00
 8009e74:	58000c00 	.word	0x58000c00
 8009e78:	03d09000 	.word	0x03d09000
 8009e7c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8009e80:	2300      	movs	r3, #0
 8009e82:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009e84:	2301      	movs	r3, #1
 8009e86:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009e8a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	f000 824d 	beq.w	800a32e <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e98:	4aad      	ldr	r2, [pc, #692]	; (800a150 <UART_SetConfig+0x948>)
 8009e9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ea2:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ea6:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	685a      	ldr	r2, [r3, #4]
 8009eac:	4613      	mov	r3, r2
 8009eae:	005b      	lsls	r3, r3, #1
 8009eb0:	4413      	add	r3, r2
 8009eb2:	6a3a      	ldr	r2, [r7, #32]
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d305      	bcc.n	8009ec4 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ebe:	6a3a      	ldr	r2, [r7, #32]
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d903      	bls.n	8009ecc <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009eca:	e230      	b.n	800a32e <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f04f 0100 	mov.w	r1, #0
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed8:	4a9d      	ldr	r2, [pc, #628]	; (800a150 <UART_SetConfig+0x948>)
 8009eda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	f04f 0400 	mov.w	r4, #0
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	4623      	mov	r3, r4
 8009ee8:	f7f6 f9f6 	bl	80002d8 <__aeabi_uldivmod>
 8009eec:	4603      	mov	r3, r0
 8009eee:	460c      	mov	r4, r1
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	4622      	mov	r2, r4
 8009ef4:	f04f 0300 	mov.w	r3, #0
 8009ef8:	f04f 0400 	mov.w	r4, #0
 8009efc:	0214      	lsls	r4, r2, #8
 8009efe:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009f02:	020b      	lsls	r3, r1, #8
 8009f04:	687a      	ldr	r2, [r7, #4]
 8009f06:	6852      	ldr	r2, [r2, #4]
 8009f08:	0852      	lsrs	r2, r2, #1
 8009f0a:	4611      	mov	r1, r2
 8009f0c:	f04f 0200 	mov.w	r2, #0
 8009f10:	eb13 0b01 	adds.w	fp, r3, r1
 8009f14:	eb44 0c02 	adc.w	ip, r4, r2
 8009f18:	4658      	mov	r0, fp
 8009f1a:	4661      	mov	r1, ip
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	f04f 0400 	mov.w	r4, #0
 8009f24:	461a      	mov	r2, r3
 8009f26:	4623      	mov	r3, r4
 8009f28:	f7f6 f9d6 	bl	80002d8 <__aeabi_uldivmod>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	460c      	mov	r4, r1
 8009f30:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f38:	d308      	bcc.n	8009f4c <UART_SetConfig+0x744>
 8009f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f40:	d204      	bcs.n	8009f4c <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f48:	60da      	str	r2, [r3, #12]
 8009f4a:	e1f0      	b.n	800a32e <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009f52:	e1ec      	b.n	800a32e <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	69db      	ldr	r3, [r3, #28]
 8009f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f5c:	f040 8100 	bne.w	800a160 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8009f60:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009f64:	2b40      	cmp	r3, #64	; 0x40
 8009f66:	f200 80b7 	bhi.w	800a0d8 <UART_SetConfig+0x8d0>
 8009f6a:	a201      	add	r2, pc, #4	; (adr r2, 8009f70 <UART_SetConfig+0x768>)
 8009f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f70:	0800a075 	.word	0x0800a075
 8009f74:	0800a07d 	.word	0x0800a07d
 8009f78:	0800a0d9 	.word	0x0800a0d9
 8009f7c:	0800a0d9 	.word	0x0800a0d9
 8009f80:	0800a085 	.word	0x0800a085
 8009f84:	0800a0d9 	.word	0x0800a0d9
 8009f88:	0800a0d9 	.word	0x0800a0d9
 8009f8c:	0800a0d9 	.word	0x0800a0d9
 8009f90:	0800a095 	.word	0x0800a095
 8009f94:	0800a0d9 	.word	0x0800a0d9
 8009f98:	0800a0d9 	.word	0x0800a0d9
 8009f9c:	0800a0d9 	.word	0x0800a0d9
 8009fa0:	0800a0d9 	.word	0x0800a0d9
 8009fa4:	0800a0d9 	.word	0x0800a0d9
 8009fa8:	0800a0d9 	.word	0x0800a0d9
 8009fac:	0800a0d9 	.word	0x0800a0d9
 8009fb0:	0800a0a5 	.word	0x0800a0a5
 8009fb4:	0800a0d9 	.word	0x0800a0d9
 8009fb8:	0800a0d9 	.word	0x0800a0d9
 8009fbc:	0800a0d9 	.word	0x0800a0d9
 8009fc0:	0800a0d9 	.word	0x0800a0d9
 8009fc4:	0800a0d9 	.word	0x0800a0d9
 8009fc8:	0800a0d9 	.word	0x0800a0d9
 8009fcc:	0800a0d9 	.word	0x0800a0d9
 8009fd0:	0800a0d9 	.word	0x0800a0d9
 8009fd4:	0800a0d9 	.word	0x0800a0d9
 8009fd8:	0800a0d9 	.word	0x0800a0d9
 8009fdc:	0800a0d9 	.word	0x0800a0d9
 8009fe0:	0800a0d9 	.word	0x0800a0d9
 8009fe4:	0800a0d9 	.word	0x0800a0d9
 8009fe8:	0800a0d9 	.word	0x0800a0d9
 8009fec:	0800a0d9 	.word	0x0800a0d9
 8009ff0:	0800a0cb 	.word	0x0800a0cb
 8009ff4:	0800a0d9 	.word	0x0800a0d9
 8009ff8:	0800a0d9 	.word	0x0800a0d9
 8009ffc:	0800a0d9 	.word	0x0800a0d9
 800a000:	0800a0d9 	.word	0x0800a0d9
 800a004:	0800a0d9 	.word	0x0800a0d9
 800a008:	0800a0d9 	.word	0x0800a0d9
 800a00c:	0800a0d9 	.word	0x0800a0d9
 800a010:	0800a0d9 	.word	0x0800a0d9
 800a014:	0800a0d9 	.word	0x0800a0d9
 800a018:	0800a0d9 	.word	0x0800a0d9
 800a01c:	0800a0d9 	.word	0x0800a0d9
 800a020:	0800a0d9 	.word	0x0800a0d9
 800a024:	0800a0d9 	.word	0x0800a0d9
 800a028:	0800a0d9 	.word	0x0800a0d9
 800a02c:	0800a0d9 	.word	0x0800a0d9
 800a030:	0800a0d9 	.word	0x0800a0d9
 800a034:	0800a0d9 	.word	0x0800a0d9
 800a038:	0800a0d9 	.word	0x0800a0d9
 800a03c:	0800a0d9 	.word	0x0800a0d9
 800a040:	0800a0d9 	.word	0x0800a0d9
 800a044:	0800a0d9 	.word	0x0800a0d9
 800a048:	0800a0d9 	.word	0x0800a0d9
 800a04c:	0800a0d9 	.word	0x0800a0d9
 800a050:	0800a0d9 	.word	0x0800a0d9
 800a054:	0800a0d9 	.word	0x0800a0d9
 800a058:	0800a0d9 	.word	0x0800a0d9
 800a05c:	0800a0d9 	.word	0x0800a0d9
 800a060:	0800a0d9 	.word	0x0800a0d9
 800a064:	0800a0d9 	.word	0x0800a0d9
 800a068:	0800a0d9 	.word	0x0800a0d9
 800a06c:	0800a0d9 	.word	0x0800a0d9
 800a070:	0800a0d1 	.word	0x0800a0d1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a074:	f7fb ffb8 	bl	8005fe8 <HAL_RCC_GetPCLK1Freq>
 800a078:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a07a:	e033      	b.n	800a0e4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a07c:	f7fb ffca 	bl	8006014 <HAL_RCC_GetPCLK2Freq>
 800a080:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a082:	e02f      	b.n	800a0e4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a084:	f107 0314 	add.w	r3, r7, #20
 800a088:	4618      	mov	r0, r3
 800a08a:	f7fd f955 	bl	8007338 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a08e:	69bb      	ldr	r3, [r7, #24]
 800a090:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a092:	e027      	b.n	800a0e4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a094:	f107 0308 	add.w	r3, r7, #8
 800a098:	4618      	mov	r0, r3
 800a09a:	f7fd fa99 	bl	80075d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0a2:	e01f      	b.n	800a0e4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0a4:	4b2b      	ldr	r3, [pc, #172]	; (800a154 <UART_SetConfig+0x94c>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f003 0320 	and.w	r3, r3, #32
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d009      	beq.n	800a0c4 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a0b0:	4b28      	ldr	r3, [pc, #160]	; (800a154 <UART_SetConfig+0x94c>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	08db      	lsrs	r3, r3, #3
 800a0b6:	f003 0303 	and.w	r3, r3, #3
 800a0ba:	4a27      	ldr	r2, [pc, #156]	; (800a158 <UART_SetConfig+0x950>)
 800a0bc:	fa22 f303 	lsr.w	r3, r2, r3
 800a0c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a0c2:	e00f      	b.n	800a0e4 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800a0c4:	4b24      	ldr	r3, [pc, #144]	; (800a158 <UART_SetConfig+0x950>)
 800a0c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0c8:	e00c      	b.n	800a0e4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a0ca:	4b24      	ldr	r3, [pc, #144]	; (800a15c <UART_SetConfig+0x954>)
 800a0cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0ce:	e009      	b.n	800a0e4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0d6:	e005      	b.n	800a0e4 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a0e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	f000 8121 	beq.w	800a32e <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f0:	4a17      	ldr	r2, [pc, #92]	; (800a150 <UART_SetConfig+0x948>)
 800a0f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0fe:	005a      	lsls	r2, r3, #1
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	085b      	lsrs	r3, r3, #1
 800a106:	441a      	add	r2, r3
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a110:	b29b      	uxth	r3, r3
 800a112:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a116:	2b0f      	cmp	r3, #15
 800a118:	d916      	bls.n	800a148 <UART_SetConfig+0x940>
 800a11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a11c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a120:	d212      	bcs.n	800a148 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a124:	b29b      	uxth	r3, r3
 800a126:	f023 030f 	bic.w	r3, r3, #15
 800a12a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a12e:	085b      	lsrs	r3, r3, #1
 800a130:	b29b      	uxth	r3, r3
 800a132:	f003 0307 	and.w	r3, r3, #7
 800a136:	b29a      	uxth	r2, r3
 800a138:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a13a:	4313      	orrs	r3, r2
 800a13c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a144:	60da      	str	r2, [r3, #12]
 800a146:	e0f2      	b.n	800a32e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800a148:	2301      	movs	r3, #1
 800a14a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a14e:	e0ee      	b.n	800a32e <UART_SetConfig+0xb26>
 800a150:	080128f8 	.word	0x080128f8
 800a154:	58024400 	.word	0x58024400
 800a158:	03d09000 	.word	0x03d09000
 800a15c:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800a160:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a164:	2b40      	cmp	r3, #64	; 0x40
 800a166:	f200 80b7 	bhi.w	800a2d8 <UART_SetConfig+0xad0>
 800a16a:	a201      	add	r2, pc, #4	; (adr r2, 800a170 <UART_SetConfig+0x968>)
 800a16c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a170:	0800a275 	.word	0x0800a275
 800a174:	0800a27d 	.word	0x0800a27d
 800a178:	0800a2d9 	.word	0x0800a2d9
 800a17c:	0800a2d9 	.word	0x0800a2d9
 800a180:	0800a285 	.word	0x0800a285
 800a184:	0800a2d9 	.word	0x0800a2d9
 800a188:	0800a2d9 	.word	0x0800a2d9
 800a18c:	0800a2d9 	.word	0x0800a2d9
 800a190:	0800a295 	.word	0x0800a295
 800a194:	0800a2d9 	.word	0x0800a2d9
 800a198:	0800a2d9 	.word	0x0800a2d9
 800a19c:	0800a2d9 	.word	0x0800a2d9
 800a1a0:	0800a2d9 	.word	0x0800a2d9
 800a1a4:	0800a2d9 	.word	0x0800a2d9
 800a1a8:	0800a2d9 	.word	0x0800a2d9
 800a1ac:	0800a2d9 	.word	0x0800a2d9
 800a1b0:	0800a2a5 	.word	0x0800a2a5
 800a1b4:	0800a2d9 	.word	0x0800a2d9
 800a1b8:	0800a2d9 	.word	0x0800a2d9
 800a1bc:	0800a2d9 	.word	0x0800a2d9
 800a1c0:	0800a2d9 	.word	0x0800a2d9
 800a1c4:	0800a2d9 	.word	0x0800a2d9
 800a1c8:	0800a2d9 	.word	0x0800a2d9
 800a1cc:	0800a2d9 	.word	0x0800a2d9
 800a1d0:	0800a2d9 	.word	0x0800a2d9
 800a1d4:	0800a2d9 	.word	0x0800a2d9
 800a1d8:	0800a2d9 	.word	0x0800a2d9
 800a1dc:	0800a2d9 	.word	0x0800a2d9
 800a1e0:	0800a2d9 	.word	0x0800a2d9
 800a1e4:	0800a2d9 	.word	0x0800a2d9
 800a1e8:	0800a2d9 	.word	0x0800a2d9
 800a1ec:	0800a2d9 	.word	0x0800a2d9
 800a1f0:	0800a2cb 	.word	0x0800a2cb
 800a1f4:	0800a2d9 	.word	0x0800a2d9
 800a1f8:	0800a2d9 	.word	0x0800a2d9
 800a1fc:	0800a2d9 	.word	0x0800a2d9
 800a200:	0800a2d9 	.word	0x0800a2d9
 800a204:	0800a2d9 	.word	0x0800a2d9
 800a208:	0800a2d9 	.word	0x0800a2d9
 800a20c:	0800a2d9 	.word	0x0800a2d9
 800a210:	0800a2d9 	.word	0x0800a2d9
 800a214:	0800a2d9 	.word	0x0800a2d9
 800a218:	0800a2d9 	.word	0x0800a2d9
 800a21c:	0800a2d9 	.word	0x0800a2d9
 800a220:	0800a2d9 	.word	0x0800a2d9
 800a224:	0800a2d9 	.word	0x0800a2d9
 800a228:	0800a2d9 	.word	0x0800a2d9
 800a22c:	0800a2d9 	.word	0x0800a2d9
 800a230:	0800a2d9 	.word	0x0800a2d9
 800a234:	0800a2d9 	.word	0x0800a2d9
 800a238:	0800a2d9 	.word	0x0800a2d9
 800a23c:	0800a2d9 	.word	0x0800a2d9
 800a240:	0800a2d9 	.word	0x0800a2d9
 800a244:	0800a2d9 	.word	0x0800a2d9
 800a248:	0800a2d9 	.word	0x0800a2d9
 800a24c:	0800a2d9 	.word	0x0800a2d9
 800a250:	0800a2d9 	.word	0x0800a2d9
 800a254:	0800a2d9 	.word	0x0800a2d9
 800a258:	0800a2d9 	.word	0x0800a2d9
 800a25c:	0800a2d9 	.word	0x0800a2d9
 800a260:	0800a2d9 	.word	0x0800a2d9
 800a264:	0800a2d9 	.word	0x0800a2d9
 800a268:	0800a2d9 	.word	0x0800a2d9
 800a26c:	0800a2d9 	.word	0x0800a2d9
 800a270:	0800a2d1 	.word	0x0800a2d1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a274:	f7fb feb8 	bl	8005fe8 <HAL_RCC_GetPCLK1Freq>
 800a278:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a27a:	e033      	b.n	800a2e4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a27c:	f7fb feca 	bl	8006014 <HAL_RCC_GetPCLK2Freq>
 800a280:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a282:	e02f      	b.n	800a2e4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a284:	f107 0314 	add.w	r3, r7, #20
 800a288:	4618      	mov	r0, r3
 800a28a:	f7fd f855 	bl	8007338 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a28e:	69bb      	ldr	r3, [r7, #24]
 800a290:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a292:	e027      	b.n	800a2e4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a294:	f107 0308 	add.w	r3, r7, #8
 800a298:	4618      	mov	r0, r3
 800a29a:	f7fd f999 	bl	80075d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2a2:	e01f      	b.n	800a2e4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2a4:	4b2c      	ldr	r3, [pc, #176]	; (800a358 <UART_SetConfig+0xb50>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f003 0320 	and.w	r3, r3, #32
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d009      	beq.n	800a2c4 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a2b0:	4b29      	ldr	r3, [pc, #164]	; (800a358 <UART_SetConfig+0xb50>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	08db      	lsrs	r3, r3, #3
 800a2b6:	f003 0303 	and.w	r3, r3, #3
 800a2ba:	4a28      	ldr	r2, [pc, #160]	; (800a35c <UART_SetConfig+0xb54>)
 800a2bc:	fa22 f303 	lsr.w	r3, r2, r3
 800a2c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a2c2:	e00f      	b.n	800a2e4 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800a2c4:	4b25      	ldr	r3, [pc, #148]	; (800a35c <UART_SetConfig+0xb54>)
 800a2c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2c8:	e00c      	b.n	800a2e4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a2ca:	4b25      	ldr	r3, [pc, #148]	; (800a360 <UART_SetConfig+0xb58>)
 800a2cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2ce:	e009      	b.n	800a2e4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2d6:	e005      	b.n	800a2e4 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a2dc:	2301      	movs	r3, #1
 800a2de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a2e2:	bf00      	nop
    }

    if (pclk != 0U)
 800a2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d021      	beq.n	800a32e <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ee:	4a1d      	ldr	r2, [pc, #116]	; (800a364 <UART_SetConfig+0xb5c>)
 800a2f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2f4:	461a      	mov	r2, r3
 800a2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f8:	fbb3 f2f2 	udiv	r2, r3, r2
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	085b      	lsrs	r3, r3, #1
 800a302:	441a      	add	r2, r3
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	fbb2 f3f3 	udiv	r3, r2, r3
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a312:	2b0f      	cmp	r3, #15
 800a314:	d908      	bls.n	800a328 <UART_SetConfig+0xb20>
 800a316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a31c:	d204      	bcs.n	800a328 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a324:	60da      	str	r2, [r3, #12]
 800a326:	e002      	b.n	800a32e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800a328:	2301      	movs	r3, #1
 800a32a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2201      	movs	r2, #1
 800a332:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2201      	movs	r2, #1
 800a33a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2200      	movs	r2, #0
 800a348:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800a34a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3738      	adds	r7, #56	; 0x38
 800a352:	46bd      	mov	sp, r7
 800a354:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800a358:	58024400 	.word	0x58024400
 800a35c:	03d09000 	.word	0x03d09000
 800a360:	003d0900 	.word	0x003d0900
 800a364:	080128f8 	.word	0x080128f8

0800a368 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a368:	b480      	push	{r7}
 800a36a:	b083      	sub	sp, #12
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a374:	f003 0301 	and.w	r3, r3, #1
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d00a      	beq.n	800a392 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	430a      	orrs	r2, r1
 800a390:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a396:	f003 0302 	and.w	r3, r3, #2
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d00a      	beq.n	800a3b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	430a      	orrs	r2, r1
 800a3b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3b8:	f003 0304 	and.w	r3, r3, #4
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d00a      	beq.n	800a3d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	430a      	orrs	r2, r1
 800a3d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3da:	f003 0308 	and.w	r3, r3, #8
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d00a      	beq.n	800a3f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	430a      	orrs	r2, r1
 800a3f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3fc:	f003 0310 	and.w	r3, r3, #16
 800a400:	2b00      	cmp	r3, #0
 800a402:	d00a      	beq.n	800a41a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	689b      	ldr	r3, [r3, #8]
 800a40a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	430a      	orrs	r2, r1
 800a418:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a41e:	f003 0320 	and.w	r3, r3, #32
 800a422:	2b00      	cmp	r3, #0
 800a424:	d00a      	beq.n	800a43c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	430a      	orrs	r2, r1
 800a43a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a444:	2b00      	cmp	r3, #0
 800a446:	d01a      	beq.n	800a47e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	430a      	orrs	r2, r1
 800a45c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a462:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a466:	d10a      	bne.n	800a47e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	430a      	orrs	r2, r1
 800a47c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a486:	2b00      	cmp	r3, #0
 800a488:	d00a      	beq.n	800a4a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	430a      	orrs	r2, r1
 800a49e:	605a      	str	r2, [r3, #4]
  }
}
 800a4a0:	bf00      	nop
 800a4a2:	370c      	adds	r7, #12
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr

0800a4ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b086      	sub	sp, #24
 800a4b0:	af02      	add	r7, sp, #8
 800a4b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a4bc:	f7f7 f86a 	bl	8001594 <HAL_GetTick>
 800a4c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f003 0308 	and.w	r3, r3, #8
 800a4cc:	2b08      	cmp	r3, #8
 800a4ce:	d10e      	bne.n	800a4ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a4d4:	9300      	str	r3, [sp, #0]
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f000 f82c 	bl	800a53c <UART_WaitOnFlagUntilTimeout>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d001      	beq.n	800a4ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4ea:	2303      	movs	r3, #3
 800a4ec:	e022      	b.n	800a534 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f003 0304 	and.w	r3, r3, #4
 800a4f8:	2b04      	cmp	r3, #4
 800a4fa:	d10e      	bne.n	800a51a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a500:	9300      	str	r3, [sp, #0]
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2200      	movs	r2, #0
 800a506:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 f816 	bl	800a53c <UART_WaitOnFlagUntilTimeout>
 800a510:	4603      	mov	r3, r0
 800a512:	2b00      	cmp	r3, #0
 800a514:	d001      	beq.n	800a51a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a516:	2303      	movs	r3, #3
 800a518:	e00c      	b.n	800a534 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2220      	movs	r2, #32
 800a51e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2220      	movs	r2, #32
 800a526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2200      	movs	r2, #0
 800a52e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a532:	2300      	movs	r3, #0
}
 800a534:	4618      	mov	r0, r3
 800a536:	3710      	adds	r7, #16
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	60b9      	str	r1, [r7, #8]
 800a546:	603b      	str	r3, [r7, #0]
 800a548:	4613      	mov	r3, r2
 800a54a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a54c:	e062      	b.n	800a614 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a54e:	69bb      	ldr	r3, [r7, #24]
 800a550:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a554:	d05e      	beq.n	800a614 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a556:	f7f7 f81d 	bl	8001594 <HAL_GetTick>
 800a55a:	4602      	mov	r2, r0
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	1ad3      	subs	r3, r2, r3
 800a560:	69ba      	ldr	r2, [r7, #24]
 800a562:	429a      	cmp	r2, r3
 800a564:	d302      	bcc.n	800a56c <UART_WaitOnFlagUntilTimeout+0x30>
 800a566:	69bb      	ldr	r3, [r7, #24]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d11d      	bne.n	800a5a8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	681a      	ldr	r2, [r3, #0]
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a57a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	689a      	ldr	r2, [r3, #8]
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f022 0201 	bic.w	r2, r2, #1
 800a58a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2220      	movs	r2, #32
 800a590:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2220      	movs	r2, #32
 800a598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a5a4:	2303      	movs	r3, #3
 800a5a6:	e045      	b.n	800a634 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f003 0304 	and.w	r3, r3, #4
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d02e      	beq.n	800a614 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	69db      	ldr	r3, [r3, #28]
 800a5bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a5c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5c4:	d126      	bne.n	800a614 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a5ce:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	681a      	ldr	r2, [r3, #0]
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a5de:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	689a      	ldr	r2, [r3, #8]
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f022 0201 	bic.w	r2, r2, #1
 800a5ee:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2220      	movs	r2, #32
 800a5f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2220      	movs	r2, #32
 800a5fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	2220      	movs	r2, #32
 800a604:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2200      	movs	r2, #0
 800a60c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800a610:	2303      	movs	r3, #3
 800a612:	e00f      	b.n	800a634 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	69da      	ldr	r2, [r3, #28]
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	4013      	ands	r3, r2
 800a61e:	68ba      	ldr	r2, [r7, #8]
 800a620:	429a      	cmp	r2, r3
 800a622:	bf0c      	ite	eq
 800a624:	2301      	moveq	r3, #1
 800a626:	2300      	movne	r3, #0
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	461a      	mov	r2, r3
 800a62c:	79fb      	ldrb	r3, [r7, #7]
 800a62e:	429a      	cmp	r2, r3
 800a630:	d08d      	beq.n	800a54e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a632:	2300      	movs	r3, #0
}
 800a634:	4618      	mov	r0, r3
 800a636:	3710      	adds	r7, #16
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b085      	sub	sp, #20
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d101      	bne.n	800a652 <HAL_UARTEx_DisableFifoMode+0x16>
 800a64e:	2302      	movs	r3, #2
 800a650:	e027      	b.n	800a6a2 <HAL_UARTEx_DisableFifoMode+0x66>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2201      	movs	r2, #1
 800a656:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2224      	movs	r2, #36	; 0x24
 800a65e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f022 0201 	bic.w	r2, r2, #1
 800a678:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a680:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2200      	movs	r2, #0
 800a686:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	68fa      	ldr	r2, [r7, #12]
 800a68e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2220      	movs	r2, #32
 800a694:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2200      	movs	r2, #0
 800a69c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a6a0:	2300      	movs	r3, #0
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3714      	adds	r7, #20
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr

0800a6ae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b084      	sub	sp, #16
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
 800a6b6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d101      	bne.n	800a6c6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a6c2:	2302      	movs	r3, #2
 800a6c4:	e02d      	b.n	800a722 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2224      	movs	r2, #36	; 0x24
 800a6d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f022 0201 	bic.w	r2, r2, #1
 800a6ec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	683a      	ldr	r2, [r7, #0]
 800a6fe:	430a      	orrs	r2, r1
 800a700:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 f850 	bl	800a7a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	68fa      	ldr	r2, [r7, #12]
 800a70e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2220      	movs	r2, #32
 800a714:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2200      	movs	r2, #0
 800a71c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a720:	2300      	movs	r3, #0
}
 800a722:	4618      	mov	r0, r3
 800a724:	3710      	adds	r7, #16
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}

0800a72a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a72a:	b580      	push	{r7, lr}
 800a72c:	b084      	sub	sp, #16
 800a72e:	af00      	add	r7, sp, #0
 800a730:	6078      	str	r0, [r7, #4]
 800a732:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d101      	bne.n	800a742 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a73e:	2302      	movs	r3, #2
 800a740:	e02d      	b.n	800a79e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2201      	movs	r2, #1
 800a746:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2224      	movs	r2, #36	; 0x24
 800a74e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f022 0201 	bic.w	r2, r2, #1
 800a768:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	689b      	ldr	r3, [r3, #8]
 800a770:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	683a      	ldr	r2, [r7, #0]
 800a77a:	430a      	orrs	r2, r1
 800a77c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 f812 	bl	800a7a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	68fa      	ldr	r2, [r7, #12]
 800a78a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2220      	movs	r2, #32
 800a790:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2200      	movs	r2, #0
 800a798:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a79c:	2300      	movs	r3, #0
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3710      	adds	r7, #16
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
	...

0800a7a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b089      	sub	sp, #36	; 0x24
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a7b0:	4a2f      	ldr	r2, [pc, #188]	; (800a870 <UARTEx_SetNbDataToProcess+0xc8>)
 800a7b2:	f107 0314 	add.w	r3, r7, #20
 800a7b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a7ba:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a7be:	4a2d      	ldr	r2, [pc, #180]	; (800a874 <UARTEx_SetNbDataToProcess+0xcc>)
 800a7c0:	f107 030c 	add.w	r3, r7, #12
 800a7c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a7c8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d108      	bne.n	800a7e6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a7e4:	e03d      	b.n	800a862 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a7e6:	2310      	movs	r3, #16
 800a7e8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a7ea:	2310      	movs	r3, #16
 800a7ec:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	689b      	ldr	r3, [r3, #8]
 800a7f4:	0e5b      	lsrs	r3, r3, #25
 800a7f6:	b2db      	uxtb	r3, r3
 800a7f8:	f003 0307 	and.w	r3, r3, #7
 800a7fc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	689b      	ldr	r3, [r3, #8]
 800a804:	0f5b      	lsrs	r3, r3, #29
 800a806:	b2db      	uxtb	r3, r3
 800a808:	f003 0307 	and.w	r3, r3, #7
 800a80c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a80e:	7fbb      	ldrb	r3, [r7, #30]
 800a810:	7f3a      	ldrb	r2, [r7, #28]
 800a812:	f107 0120 	add.w	r1, r7, #32
 800a816:	440a      	add	r2, r1
 800a818:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a81c:	fb02 f303 	mul.w	r3, r2, r3
 800a820:	7f3a      	ldrb	r2, [r7, #28]
 800a822:	f107 0120 	add.w	r1, r7, #32
 800a826:	440a      	add	r2, r1
 800a828:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a82c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a830:	b29a      	uxth	r2, r3
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a838:	7ffb      	ldrb	r3, [r7, #31]
 800a83a:	7f7a      	ldrb	r2, [r7, #29]
 800a83c:	f107 0120 	add.w	r1, r7, #32
 800a840:	440a      	add	r2, r1
 800a842:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a846:	fb02 f303 	mul.w	r3, r2, r3
 800a84a:	7f7a      	ldrb	r2, [r7, #29]
 800a84c:	f107 0120 	add.w	r1, r7, #32
 800a850:	440a      	add	r2, r1
 800a852:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a856:	fb93 f3f2 	sdiv	r3, r3, r2
 800a85a:	b29a      	uxth	r2, r3
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a862:	bf00      	nop
 800a864:	3724      	adds	r7, #36	; 0x24
 800a866:	46bd      	mov	sp, r7
 800a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86c:	4770      	bx	lr
 800a86e:	bf00      	nop
 800a870:	08012848 	.word	0x08012848
 800a874:	08012850 	.word	0x08012850

0800a878 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a878:	b084      	sub	sp, #16
 800a87a:	b480      	push	{r7}
 800a87c:	b085      	sub	sp, #20
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
 800a882:	f107 001c 	add.w	r0, r7, #28
 800a886:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a88a:	2300      	movs	r3, #0
 800a88c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a88e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800a890:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a892:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800a896:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a898:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800a89a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800a89e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a8a0:	68fa      	ldr	r2, [r7, #12]
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	685a      	ldr	r2, [r3, #4]
 800a8aa:	4b07      	ldr	r3, [pc, #28]	; (800a8c8 <SDMMC_Init+0x50>)
 800a8ac:	4013      	ands	r3, r2
 800a8ae:	68fa      	ldr	r2, [r7, #12]
 800a8b0:	431a      	orrs	r2, r3
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a8b6:	2300      	movs	r3, #0
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3714      	adds	r7, #20
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	b004      	add	sp, #16
 800a8c4:	4770      	bx	lr
 800a8c6:	bf00      	nop
 800a8c8:	ffc02c00 	.word	0xffc02c00

0800a8cc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b083      	sub	sp, #12
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	370c      	adds	r7, #12
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr

0800a8e6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800a8e6:	b480      	push	{r7}
 800a8e8:	b083      	sub	sp, #12
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
 800a8ee:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	681a      	ldr	r2, [r3, #0]
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a8fa:	2300      	movs	r3, #0
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	370c      	adds	r7, #12
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr

0800a908 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800a908:	b480      	push	{r7}
 800a90a:	b083      	sub	sp, #12
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f043 0203 	orr.w	r2, r3, #3
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a91c:	2300      	movs	r3, #0
}
 800a91e:	4618      	mov	r0, r3
 800a920:	370c      	adds	r7, #12
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr

0800a92a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800a92a:	b480      	push	{r7}
 800a92c:	b083      	sub	sp, #12
 800a92e:	af00      	add	r7, sp, #0
 800a930:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f003 0303 	and.w	r3, r3, #3
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	370c      	adds	r7, #12
 800a93e:	46bd      	mov	sp, r7
 800a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a944:	4770      	bx	lr
	...

0800a948 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a948:	b480      	push	{r7}
 800a94a:	b085      	sub	sp, #20
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a952:	2300      	movs	r3, #0
 800a954:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a966:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a96c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a972:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a974:	68fa      	ldr	r2, [r7, #12]
 800a976:	4313      	orrs	r3, r2
 800a978:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	68da      	ldr	r2, [r3, #12]
 800a97e:	4b06      	ldr	r3, [pc, #24]	; (800a998 <SDMMC_SendCommand+0x50>)
 800a980:	4013      	ands	r3, r2
 800a982:	68fa      	ldr	r2, [r7, #12]
 800a984:	431a      	orrs	r2, r3
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a98a:	2300      	movs	r3, #0
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3714      	adds	r7, #20
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr
 800a998:	fffee0c0 	.word	0xfffee0c0

0800a99c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b083      	sub	sp, #12
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	691b      	ldr	r3, [r3, #16]
 800a9a8:	b2db      	uxtb	r3, r3
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	370c      	adds	r7, #12
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b4:	4770      	bx	lr

0800a9b6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a9b6:	b480      	push	{r7}
 800a9b8:	b085      	sub	sp, #20
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	6078      	str	r0, [r7, #4]
 800a9be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	3314      	adds	r3, #20
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	4413      	add	r3, r2
 800a9ca:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3714      	adds	r7, #20
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9da:	4770      	bx	lr

0800a9dc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b085      	sub	sp, #20
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	681a      	ldr	r2, [r3, #0]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	685a      	ldr	r2, [r3, #4]
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aa02:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800aa08:	431a      	orrs	r2, r3
                       Data->DPSM);
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800aa0e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aa10:	68fa      	ldr	r2, [r7, #12]
 800aa12:	4313      	orrs	r3, r2
 800aa14:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	431a      	orrs	r2, r3
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800aa26:	2300      	movs	r3, #0

}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3714      	adds	r7, #20
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr

0800aa34 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b088      	sub	sp, #32
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800aa42:	2310      	movs	r3, #16
 800aa44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa46:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa56:	f107 0308 	add.w	r3, r7, #8
 800aa5a:	4619      	mov	r1, r3
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f7ff ff73 	bl	800a948 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800aa62:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa66:	2110      	movs	r1, #16
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f000 faaf 	bl	800afcc <SDMMC_GetCmdResp1>
 800aa6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa70:	69fb      	ldr	r3, [r7, #28]
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3720      	adds	r7, #32
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}

0800aa7a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800aa7a:	b580      	push	{r7, lr}
 800aa7c:	b088      	sub	sp, #32
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
 800aa82:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800aa88:	2311      	movs	r3, #17
 800aa8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa92:	2300      	movs	r3, #0
 800aa94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa9c:	f107 0308 	add.w	r3, r7, #8
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f7ff ff50 	bl	800a948 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800aaa8:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaac:	2111      	movs	r1, #17
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 fa8c 	bl	800afcc <SDMMC_GetCmdResp1>
 800aab4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aab6:	69fb      	ldr	r3, [r7, #28]
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3720      	adds	r7, #32
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b088      	sub	sp, #32
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800aace:	2312      	movs	r3, #18
 800aad0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aad2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aad6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aad8:	2300      	movs	r3, #0
 800aada:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aadc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aae0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aae2:	f107 0308 	add.w	r3, r7, #8
 800aae6:	4619      	mov	r1, r3
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f7ff ff2d 	bl	800a948 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800aaee:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaf2:	2112      	movs	r1, #18
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f000 fa69 	bl	800afcc <SDMMC_GetCmdResp1>
 800aafa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aafc:	69fb      	ldr	r3, [r7, #28]
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3720      	adds	r7, #32
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}

0800ab06 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ab06:	b580      	push	{r7, lr}
 800ab08:	b088      	sub	sp, #32
 800ab0a:	af00      	add	r7, sp, #0
 800ab0c:	6078      	str	r0, [r7, #4]
 800ab0e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ab14:	2318      	movs	r3, #24
 800ab16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab18:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab28:	f107 0308 	add.w	r3, r7, #8
 800ab2c:	4619      	mov	r1, r3
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f7ff ff0a 	bl	800a948 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ab34:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab38:	2118      	movs	r1, #24
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f000 fa46 	bl	800afcc <SDMMC_GetCmdResp1>
 800ab40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab42:	69fb      	ldr	r3, [r7, #28]
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3720      	adds	r7, #32
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b088      	sub	sp, #32
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ab5a:	2319      	movs	r3, #25
 800ab5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab64:	2300      	movs	r3, #0
 800ab66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab6e:	f107 0308 	add.w	r3, r7, #8
 800ab72:	4619      	mov	r1, r3
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f7ff fee7 	bl	800a948 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ab7a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab7e:	2119      	movs	r1, #25
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f000 fa23 	bl	800afcc <SDMMC_GetCmdResp1>
 800ab86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab88:	69fb      	ldr	r3, [r7, #28]
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3720      	adds	r7, #32
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}
	...

0800ab94 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b088      	sub	sp, #32
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800aba0:	230c      	movs	r3, #12
 800aba2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aba4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aba8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800abaa:	2300      	movs	r3, #0
 800abac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800abae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800abb2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	68db      	ldr	r3, [r3, #12]
 800abb8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	68db      	ldr	r3, [r3, #12]
 800abc4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800abcc:	f107 0308 	add.w	r3, r7, #8
 800abd0:	4619      	mov	r1, r3
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f7ff feb8 	bl	800a948 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800abd8:	4a0b      	ldr	r2, [pc, #44]	; (800ac08 <SDMMC_CmdStopTransfer+0x74>)
 800abda:	210c      	movs	r1, #12
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f000 f9f5 	bl	800afcc <SDMMC_GetCmdResp1>
 800abe2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	68db      	ldr	r3, [r3, #12]
 800abe8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800abf0:	69fb      	ldr	r3, [r7, #28]
 800abf2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800abf6:	d101      	bne.n	800abfc <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800abf8:	2300      	movs	r3, #0
 800abfa:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800abfc:	69fb      	ldr	r3, [r7, #28]
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3720      	adds	r7, #32
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}
 800ac06:	bf00      	nop
 800ac08:	05f5e100 	.word	0x05f5e100

0800ac0c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b08a      	sub	sp, #40	; 0x28
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	60f8      	str	r0, [r7, #12]
 800ac14:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ac1c:	2307      	movs	r3, #7
 800ac1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac20:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac24:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac26:	2300      	movs	r3, #0
 800ac28:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac2e:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac30:	f107 0310 	add.w	r3, r7, #16
 800ac34:	4619      	mov	r1, r3
 800ac36:	68f8      	ldr	r0, [r7, #12]
 800ac38:	f7ff fe86 	bl	800a948 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ac3c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac40:	2107      	movs	r1, #7
 800ac42:	68f8      	ldr	r0, [r7, #12]
 800ac44:	f000 f9c2 	bl	800afcc <SDMMC_GetCmdResp1>
 800ac48:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ac4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3728      	adds	r7, #40	; 0x28
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b088      	sub	sp, #32
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ac60:	2300      	movs	r3, #0
 800ac62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ac64:	2300      	movs	r3, #0
 800ac66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac72:	f107 0308 	add.w	r3, r7, #8
 800ac76:	4619      	mov	r1, r3
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f7ff fe65 	bl	800a948 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f000 f976 	bl	800af70 <SDMMC_GetCmdError>
 800ac84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac86:	69fb      	ldr	r3, [r7, #28]
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3720      	adds	r7, #32
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b088      	sub	sp, #32
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ac98:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ac9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ac9e:	2308      	movs	r3, #8
 800aca0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aca2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aca6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aca8:	2300      	movs	r3, #0
 800acaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800acb0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acb2:	f107 0308 	add.w	r3, r7, #8
 800acb6:	4619      	mov	r1, r3
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f7ff fe45 	bl	800a948 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f000 fb78 	bl	800b3b4 <SDMMC_GetCmdResp7>
 800acc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acc6:	69fb      	ldr	r3, [r7, #28]
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3720      	adds	r7, #32
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b088      	sub	sp, #32
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800acde:	2337      	movs	r3, #55	; 0x37
 800ace0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ace2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ace6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ace8:	2300      	movs	r3, #0
 800acea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800acf0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acf2:	f107 0308 	add.w	r3, r7, #8
 800acf6:	4619      	mov	r1, r3
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f7ff fe25 	bl	800a948 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800acfe:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad02:	2137      	movs	r1, #55	; 0x37
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f000 f961 	bl	800afcc <SDMMC_GetCmdResp1>
 800ad0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad0c:	69fb      	ldr	r3, [r7, #28]
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3720      	adds	r7, #32
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}

0800ad16 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ad16:	b580      	push	{r7, lr}
 800ad18:	b088      	sub	sp, #32
 800ad1a:	af00      	add	r7, sp, #0
 800ad1c:	6078      	str	r0, [r7, #4]
 800ad1e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ad24:	2329      	movs	r3, #41	; 0x29
 800ad26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad28:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad38:	f107 0308 	add.w	r3, r7, #8
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f7ff fe02 	bl	800a948 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f000 fa7d 	bl	800b244 <SDMMC_GetCmdResp3>
 800ad4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad4c:	69fb      	ldr	r3, [r7, #28]
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3720      	adds	r7, #32
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}

0800ad56 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ad56:	b580      	push	{r7, lr}
 800ad58:	b088      	sub	sp, #32
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	6078      	str	r0, [r7, #4]
 800ad5e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ad64:	2306      	movs	r3, #6
 800ad66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad68:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad78:	f107 0308 	add.w	r3, r7, #8
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f7ff fde2 	bl	800a948 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800ad84:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad88:	2106      	movs	r1, #6
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 f91e 	bl	800afcc <SDMMC_GetCmdResp1>
 800ad90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad92:	69fb      	ldr	r3, [r7, #28]
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3720      	adds	r7, #32
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b088      	sub	sp, #32
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ada4:	2300      	movs	r3, #0
 800ada6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ada8:	2333      	movs	r3, #51	; 0x33
 800adaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800adac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800adb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adb2:	2300      	movs	r3, #0
 800adb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800adba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800adbc:	f107 0308 	add.w	r3, r7, #8
 800adc0:	4619      	mov	r1, r3
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f7ff fdc0 	bl	800a948 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800adc8:	f241 3288 	movw	r2, #5000	; 0x1388
 800adcc:	2133      	movs	r1, #51	; 0x33
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f000 f8fc 	bl	800afcc <SDMMC_GetCmdResp1>
 800add4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800add6:	69fb      	ldr	r3, [r7, #28]
}
 800add8:	4618      	mov	r0, r3
 800adda:	3720      	adds	r7, #32
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}

0800ade0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b088      	sub	sp, #32
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ade8:	2300      	movs	r3, #0
 800adea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800adec:	2302      	movs	r3, #2
 800adee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800adf0:	f44f 7340 	mov.w	r3, #768	; 0x300
 800adf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adf6:	2300      	movs	r3, #0
 800adf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800adfe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae00:	f107 0308 	add.w	r3, r7, #8
 800ae04:	4619      	mov	r1, r3
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f7ff fd9e 	bl	800a948 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f000 f9cf 	bl	800b1b0 <SDMMC_GetCmdResp2>
 800ae12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae14:	69fb      	ldr	r3, [r7, #28]
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3720      	adds	r7, #32
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}

0800ae1e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ae1e:	b580      	push	{r7, lr}
 800ae20:	b088      	sub	sp, #32
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	6078      	str	r0, [r7, #4]
 800ae26:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ae2c:	2309      	movs	r3, #9
 800ae2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ae30:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ae34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae36:	2300      	movs	r3, #0
 800ae38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae40:	f107 0308 	add.w	r3, r7, #8
 800ae44:	4619      	mov	r1, r3
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f7ff fd7e 	bl	800a948 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 f9af 	bl	800b1b0 <SDMMC_GetCmdResp2>
 800ae52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae54:	69fb      	ldr	r3, [r7, #28]
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3720      	adds	r7, #32
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}

0800ae5e <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ae5e:	b580      	push	{r7, lr}
 800ae60:	b088      	sub	sp, #32
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	6078      	str	r0, [r7, #4]
 800ae66:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ae6c:	2303      	movs	r3, #3
 800ae6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae70:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae76:	2300      	movs	r3, #0
 800ae78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae80:	f107 0308 	add.w	r3, r7, #8
 800ae84:	4619      	mov	r1, r3
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f7ff fd5e 	bl	800a948 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ae8c:	683a      	ldr	r2, [r7, #0]
 800ae8e:	2103      	movs	r1, #3
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 fa17 	bl	800b2c4 <SDMMC_GetCmdResp6>
 800ae96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae98:	69fb      	ldr	r3, [r7, #28]
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3720      	adds	r7, #32
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}

0800aea2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b088      	sub	sp, #32
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
 800aeaa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800aeb0:	230d      	movs	r3, #13
 800aeb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aeb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aeb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aeba:	2300      	movs	r3, #0
 800aebc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aebe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aec2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aec4:	f107 0308 	add.w	r3, r7, #8
 800aec8:	4619      	mov	r1, r3
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f7ff fd3c 	bl	800a948 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800aed0:	f241 3288 	movw	r2, #5000	; 0x1388
 800aed4:	210d      	movs	r1, #13
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 f878 	bl	800afcc <SDMMC_GetCmdResp1>
 800aedc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aede:	69fb      	ldr	r3, [r7, #28]
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3720      	adds	r7, #32
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b088      	sub	sp, #32
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800aef0:	2300      	movs	r3, #0
 800aef2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800aef4:	230d      	movs	r3, #13
 800aef6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aef8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aefc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aefe:	2300      	movs	r3, #0
 800af00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af06:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af08:	f107 0308 	add.w	r3, r7, #8
 800af0c:	4619      	mov	r1, r3
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f7ff fd1a 	bl	800a948 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800af14:	f241 3288 	movw	r2, #5000	; 0x1388
 800af18:	210d      	movs	r1, #13
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 f856 	bl	800afcc <SDMMC_GetCmdResp1>
 800af20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af22:	69fb      	ldr	r3, [r7, #28]
}
 800af24:	4618      	mov	r0, r3
 800af26:	3720      	adds	r7, #32
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b088      	sub	sp, #32
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800af34:	2300      	movs	r3, #0
 800af36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800af38:	230b      	movs	r3, #11
 800af3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af42:	2300      	movs	r3, #0
 800af44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af4a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af4c:	f107 0308 	add.w	r3, r7, #8
 800af50:	4619      	mov	r1, r3
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f7ff fcf8 	bl	800a948 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800af58:	f241 3288 	movw	r2, #5000	; 0x1388
 800af5c:	210b      	movs	r1, #11
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f000 f834 	bl	800afcc <SDMMC_GetCmdResp1>
 800af64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af66:	69fb      	ldr	r3, [r7, #28]
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3720      	adds	r7, #32
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800af70:	b480      	push	{r7}
 800af72:	b085      	sub	sp, #20
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800af78:	4b11      	ldr	r3, [pc, #68]	; (800afc0 <SDMMC_GetCmdError+0x50>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4a11      	ldr	r2, [pc, #68]	; (800afc4 <SDMMC_GetCmdError+0x54>)
 800af7e:	fba2 2303 	umull	r2, r3, r2, r3
 800af82:	0a5b      	lsrs	r3, r3, #9
 800af84:	f241 3288 	movw	r2, #5000	; 0x1388
 800af88:	fb02 f303 	mul.w	r3, r2, r3
 800af8c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	1e5a      	subs	r2, r3, #1
 800af92:	60fa      	str	r2, [r7, #12]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d102      	bne.n	800af9e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af9c:	e009      	b.n	800afb2 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d0f1      	beq.n	800af8e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	4a06      	ldr	r2, [pc, #24]	; (800afc8 <SDMMC_GetCmdError+0x58>)
 800afae:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800afb0:	2300      	movs	r3, #0
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3714      	adds	r7, #20
 800afb6:	46bd      	mov	sp, r7
 800afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbc:	4770      	bx	lr
 800afbe:	bf00      	nop
 800afc0:	24000000 	.word	0x24000000
 800afc4:	10624dd3 	.word	0x10624dd3
 800afc8:	002000c5 	.word	0x002000c5

0800afcc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b088      	sub	sp, #32
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	60f8      	str	r0, [r7, #12]
 800afd4:	460b      	mov	r3, r1
 800afd6:	607a      	str	r2, [r7, #4]
 800afd8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800afda:	4b70      	ldr	r3, [pc, #448]	; (800b19c <SDMMC_GetCmdResp1+0x1d0>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4a70      	ldr	r2, [pc, #448]	; (800b1a0 <SDMMC_GetCmdResp1+0x1d4>)
 800afe0:	fba2 2303 	umull	r2, r3, r2, r3
 800afe4:	0a5a      	lsrs	r2, r3, #9
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	fb02 f303 	mul.w	r3, r2, r3
 800afec:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800afee:	69fb      	ldr	r3, [r7, #28]
 800aff0:	1e5a      	subs	r2, r3, #1
 800aff2:	61fa      	str	r2, [r7, #28]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d102      	bne.n	800affe <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aff8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800affc:	e0c9      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b002:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b004:	69ba      	ldr	r2, [r7, #24]
 800b006:	4b67      	ldr	r3, [pc, #412]	; (800b1a4 <SDMMC_GetCmdResp1+0x1d8>)
 800b008:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d0ef      	beq.n	800afee <SDMMC_GetCmdResp1+0x22>
 800b00e:	69bb      	ldr	r3, [r7, #24]
 800b010:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800b014:	2b00      	cmp	r3, #0
 800b016:	d1ea      	bne.n	800afee <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b01c:	f003 0304 	and.w	r3, r3, #4
 800b020:	2b00      	cmp	r3, #0
 800b022:	d004      	beq.n	800b02e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2204      	movs	r2, #4
 800b028:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b02a:	2304      	movs	r3, #4
 800b02c:	e0b1      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b032:	f003 0301 	and.w	r3, r3, #1
 800b036:	2b00      	cmp	r3, #0
 800b038:	d004      	beq.n	800b044 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	2201      	movs	r2, #1
 800b03e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b040:	2301      	movs	r3, #1
 800b042:	e0a6      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	4a58      	ldr	r2, [pc, #352]	; (800b1a8 <SDMMC_GetCmdResp1+0x1dc>)
 800b048:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b04a:	68f8      	ldr	r0, [r7, #12]
 800b04c:	f7ff fca6 	bl	800a99c <SDMMC_GetCommandResponse>
 800b050:	4603      	mov	r3, r0
 800b052:	461a      	mov	r2, r3
 800b054:	7afb      	ldrb	r3, [r7, #11]
 800b056:	4293      	cmp	r3, r2
 800b058:	d001      	beq.n	800b05e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b05a:	2301      	movs	r3, #1
 800b05c:	e099      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b05e:	2100      	movs	r1, #0
 800b060:	68f8      	ldr	r0, [r7, #12]
 800b062:	f7ff fca8 	bl	800a9b6 <SDMMC_GetResponse>
 800b066:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b068:	697a      	ldr	r2, [r7, #20]
 800b06a:	4b50      	ldr	r3, [pc, #320]	; (800b1ac <SDMMC_GetCmdResp1+0x1e0>)
 800b06c:	4013      	ands	r3, r2
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d101      	bne.n	800b076 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b072:	2300      	movs	r3, #0
 800b074:	e08d      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	da02      	bge.n	800b082 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b07c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b080:	e087      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d001      	beq.n	800b090 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b08c:	2340      	movs	r3, #64	; 0x40
 800b08e:	e080      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b096:	2b00      	cmp	r3, #0
 800b098:	d001      	beq.n	800b09e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b09a:	2380      	movs	r3, #128	; 0x80
 800b09c:	e079      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d002      	beq.n	800b0ae <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b0a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0ac:	e071      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d002      	beq.n	800b0be <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b0b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0bc:	e069      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d002      	beq.n	800b0ce <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b0c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0cc:	e061      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d002      	beq.n	800b0de <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b0d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b0dc:	e059      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d002      	beq.n	800b0ee <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b0e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b0ec:	e051      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d002      	beq.n	800b0fe <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b0f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b0fc:	e049      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b104:	2b00      	cmp	r3, #0
 800b106:	d002      	beq.n	800b10e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b108:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b10c:	e041      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b114:	2b00      	cmp	r3, #0
 800b116:	d002      	beq.n	800b11e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b118:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b11c:	e039      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b124:	2b00      	cmp	r3, #0
 800b126:	d002      	beq.n	800b12e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b128:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b12c:	e031      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b134:	2b00      	cmp	r3, #0
 800b136:	d002      	beq.n	800b13e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b138:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b13c:	e029      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b144:	2b00      	cmp	r3, #0
 800b146:	d002      	beq.n	800b14e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b148:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b14c:	e021      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b154:	2b00      	cmp	r3, #0
 800b156:	d002      	beq.n	800b15e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b158:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b15c:	e019      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b164:	2b00      	cmp	r3, #0
 800b166:	d002      	beq.n	800b16e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b168:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b16c:	e011      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b174:	2b00      	cmp	r3, #0
 800b176:	d002      	beq.n	800b17e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b178:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b17c:	e009      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	f003 0308 	and.w	r3, r3, #8
 800b184:	2b00      	cmp	r3, #0
 800b186:	d002      	beq.n	800b18e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b188:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b18c:	e001      	b.n	800b192 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b18e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b192:	4618      	mov	r0, r3
 800b194:	3720      	adds	r7, #32
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}
 800b19a:	bf00      	nop
 800b19c:	24000000 	.word	0x24000000
 800b1a0:	10624dd3 	.word	0x10624dd3
 800b1a4:	00200045 	.word	0x00200045
 800b1a8:	002000c5 	.word	0x002000c5
 800b1ac:	fdffe008 	.word	0xfdffe008

0800b1b0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b085      	sub	sp, #20
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b1b8:	4b1f      	ldr	r3, [pc, #124]	; (800b238 <SDMMC_GetCmdResp2+0x88>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	4a1f      	ldr	r2, [pc, #124]	; (800b23c <SDMMC_GetCmdResp2+0x8c>)
 800b1be:	fba2 2303 	umull	r2, r3, r2, r3
 800b1c2:	0a5b      	lsrs	r3, r3, #9
 800b1c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1c8:	fb02 f303 	mul.w	r3, r2, r3
 800b1cc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	1e5a      	subs	r2, r3, #1
 800b1d2:	60fa      	str	r2, [r7, #12]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d102      	bne.n	800b1de <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b1d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b1dc:	e026      	b.n	800b22c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1e2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d0ef      	beq.n	800b1ce <SDMMC_GetCmdResp2+0x1e>
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d1ea      	bne.n	800b1ce <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1fc:	f003 0304 	and.w	r3, r3, #4
 800b200:	2b00      	cmp	r3, #0
 800b202:	d004      	beq.n	800b20e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2204      	movs	r2, #4
 800b208:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b20a:	2304      	movs	r3, #4
 800b20c:	e00e      	b.n	800b22c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b212:	f003 0301 	and.w	r3, r3, #1
 800b216:	2b00      	cmp	r3, #0
 800b218:	d004      	beq.n	800b224 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2201      	movs	r2, #1
 800b21e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b220:	2301      	movs	r3, #1
 800b222:	e003      	b.n	800b22c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	4a06      	ldr	r2, [pc, #24]	; (800b240 <SDMMC_GetCmdResp2+0x90>)
 800b228:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b22a:	2300      	movs	r3, #0
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3714      	adds	r7, #20
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr
 800b238:	24000000 	.word	0x24000000
 800b23c:	10624dd3 	.word	0x10624dd3
 800b240:	002000c5 	.word	0x002000c5

0800b244 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b244:	b480      	push	{r7}
 800b246:	b085      	sub	sp, #20
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b24c:	4b1a      	ldr	r3, [pc, #104]	; (800b2b8 <SDMMC_GetCmdResp3+0x74>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4a1a      	ldr	r2, [pc, #104]	; (800b2bc <SDMMC_GetCmdResp3+0x78>)
 800b252:	fba2 2303 	umull	r2, r3, r2, r3
 800b256:	0a5b      	lsrs	r3, r3, #9
 800b258:	f241 3288 	movw	r2, #5000	; 0x1388
 800b25c:	fb02 f303 	mul.w	r3, r2, r3
 800b260:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	1e5a      	subs	r2, r3, #1
 800b266:	60fa      	str	r2, [r7, #12]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d102      	bne.n	800b272 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b26c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b270:	e01b      	b.n	800b2aa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b276:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d0ef      	beq.n	800b262 <SDMMC_GetCmdResp3+0x1e>
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d1ea      	bne.n	800b262 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b290:	f003 0304 	and.w	r3, r3, #4
 800b294:	2b00      	cmp	r3, #0
 800b296:	d004      	beq.n	800b2a2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2204      	movs	r2, #4
 800b29c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b29e:	2304      	movs	r3, #4
 800b2a0:	e003      	b.n	800b2aa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	4a06      	ldr	r2, [pc, #24]	; (800b2c0 <SDMMC_GetCmdResp3+0x7c>)
 800b2a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b2a8:	2300      	movs	r3, #0
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3714      	adds	r7, #20
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b4:	4770      	bx	lr
 800b2b6:	bf00      	nop
 800b2b8:	24000000 	.word	0x24000000
 800b2bc:	10624dd3 	.word	0x10624dd3
 800b2c0:	002000c5 	.word	0x002000c5

0800b2c4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b088      	sub	sp, #32
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	60f8      	str	r0, [r7, #12]
 800b2cc:	460b      	mov	r3, r1
 800b2ce:	607a      	str	r2, [r7, #4]
 800b2d0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b2d2:	4b35      	ldr	r3, [pc, #212]	; (800b3a8 <SDMMC_GetCmdResp6+0xe4>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	4a35      	ldr	r2, [pc, #212]	; (800b3ac <SDMMC_GetCmdResp6+0xe8>)
 800b2d8:	fba2 2303 	umull	r2, r3, r2, r3
 800b2dc:	0a5b      	lsrs	r3, r3, #9
 800b2de:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2e2:	fb02 f303 	mul.w	r3, r2, r3
 800b2e6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b2e8:	69fb      	ldr	r3, [r7, #28]
 800b2ea:	1e5a      	subs	r2, r3, #1
 800b2ec:	61fa      	str	r2, [r7, #28]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d102      	bne.n	800b2f8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b2f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b2f6:	e052      	b.n	800b39e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2fc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b2fe:	69bb      	ldr	r3, [r7, #24]
 800b300:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b304:	2b00      	cmp	r3, #0
 800b306:	d0ef      	beq.n	800b2e8 <SDMMC_GetCmdResp6+0x24>
 800b308:	69bb      	ldr	r3, [r7, #24]
 800b30a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d1ea      	bne.n	800b2e8 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b316:	f003 0304 	and.w	r3, r3, #4
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d004      	beq.n	800b328 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2204      	movs	r2, #4
 800b322:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b324:	2304      	movs	r3, #4
 800b326:	e03a      	b.n	800b39e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b32c:	f003 0301 	and.w	r3, r3, #1
 800b330:	2b00      	cmp	r3, #0
 800b332:	d004      	beq.n	800b33e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2201      	movs	r2, #1
 800b338:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b33a:	2301      	movs	r3, #1
 800b33c:	e02f      	b.n	800b39e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b33e:	68f8      	ldr	r0, [r7, #12]
 800b340:	f7ff fb2c 	bl	800a99c <SDMMC_GetCommandResponse>
 800b344:	4603      	mov	r3, r0
 800b346:	461a      	mov	r2, r3
 800b348:	7afb      	ldrb	r3, [r7, #11]
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d001      	beq.n	800b352 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b34e:	2301      	movs	r3, #1
 800b350:	e025      	b.n	800b39e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	4a16      	ldr	r2, [pc, #88]	; (800b3b0 <SDMMC_GetCmdResp6+0xec>)
 800b356:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b358:	2100      	movs	r1, #0
 800b35a:	68f8      	ldr	r0, [r7, #12]
 800b35c:	f7ff fb2b 	bl	800a9b6 <SDMMC_GetResponse>
 800b360:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d106      	bne.n	800b37a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	0c1b      	lsrs	r3, r3, #16
 800b370:	b29a      	uxth	r2, r3
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800b376:	2300      	movs	r3, #0
 800b378:	e011      	b.n	800b39e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b380:	2b00      	cmp	r3, #0
 800b382:	d002      	beq.n	800b38a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b384:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b388:	e009      	b.n	800b39e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b390:	2b00      	cmp	r3, #0
 800b392:	d002      	beq.n	800b39a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b398:	e001      	b.n	800b39e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b39a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3720      	adds	r7, #32
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	24000000 	.word	0x24000000
 800b3ac:	10624dd3 	.word	0x10624dd3
 800b3b0:	002000c5 	.word	0x002000c5

0800b3b4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b085      	sub	sp, #20
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b3bc:	4b22      	ldr	r3, [pc, #136]	; (800b448 <SDMMC_GetCmdResp7+0x94>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	4a22      	ldr	r2, [pc, #136]	; (800b44c <SDMMC_GetCmdResp7+0x98>)
 800b3c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b3c6:	0a5b      	lsrs	r3, r3, #9
 800b3c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3cc:	fb02 f303 	mul.w	r3, r2, r3
 800b3d0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	1e5a      	subs	r2, r3, #1
 800b3d6:	60fa      	str	r2, [r7, #12]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d102      	bne.n	800b3e2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b3dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b3e0:	e02c      	b.n	800b43c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3e6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d0ef      	beq.n	800b3d2 <SDMMC_GetCmdResp7+0x1e>
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d1ea      	bne.n	800b3d2 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b400:	f003 0304 	and.w	r3, r3, #4
 800b404:	2b00      	cmp	r3, #0
 800b406:	d004      	beq.n	800b412 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2204      	movs	r2, #4
 800b40c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b40e:	2304      	movs	r3, #4
 800b410:	e014      	b.n	800b43c <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b416:	f003 0301 	and.w	r3, r3, #1
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d004      	beq.n	800b428 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2201      	movs	r2, #1
 800b422:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b424:	2301      	movs	r3, #1
 800b426:	e009      	b.n	800b43c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b42c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b430:	2b00      	cmp	r3, #0
 800b432:	d002      	beq.n	800b43a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2240      	movs	r2, #64	; 0x40
 800b438:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b43a:	2300      	movs	r3, #0

}
 800b43c:	4618      	mov	r0, r3
 800b43e:	3714      	adds	r7, #20
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr
 800b448:	24000000 	.word	0x24000000
 800b44c:	10624dd3 	.word	0x10624dd3

0800b450 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b450:	b084      	sub	sp, #16
 800b452:	b580      	push	{r7, lr}
 800b454:	b084      	sub	sp, #16
 800b456:	af00      	add	r7, sp, #0
 800b458:	6078      	str	r0, [r7, #4]
 800b45a:	f107 001c 	add.w	r0, r7, #28
 800b45e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b464:	2b01      	cmp	r3, #1
 800b466:	d120      	bne.n	800b4aa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b46c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	68da      	ldr	r2, [r3, #12]
 800b478:	4b25      	ldr	r3, [pc, #148]	; (800b510 <USB_CoreInit+0xc0>)
 800b47a:	4013      	ands	r3, r2
 800b47c:	687a      	ldr	r2, [r7, #4]
 800b47e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	68db      	ldr	r3, [r3, #12]
 800b484:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b48c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b48e:	2b01      	cmp	r3, #1
 800b490:	d105      	bne.n	800b49e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	68db      	ldr	r3, [r3, #12]
 800b496:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f001 fabe 	bl	800ca20 <USB_CoreReset>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	73fb      	strb	r3, [r7, #15]
 800b4a8:	e01a      	b.n	800b4e0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	68db      	ldr	r3, [r3, #12]
 800b4ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f001 fab2 	bl	800ca20 <USB_CoreReset>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b4c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d106      	bne.n	800b4d4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	639a      	str	r2, [r3, #56]	; 0x38
 800b4d2:	e005      	b.n	800b4e0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	d10b      	bne.n	800b4fe <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	689b      	ldr	r3, [r3, #8]
 800b4ea:	f043 0206 	orr.w	r2, r3, #6
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	689b      	ldr	r3, [r3, #8]
 800b4f6:	f043 0220 	orr.w	r2, r3, #32
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b4fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b500:	4618      	mov	r0, r3
 800b502:	3710      	adds	r7, #16
 800b504:	46bd      	mov	sp, r7
 800b506:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b50a:	b004      	add	sp, #16
 800b50c:	4770      	bx	lr
 800b50e:	bf00      	nop
 800b510:	ffbdffbf 	.word	0xffbdffbf

0800b514 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b514:	b480      	push	{r7}
 800b516:	b087      	sub	sp, #28
 800b518:	af00      	add	r7, sp, #0
 800b51a:	60f8      	str	r0, [r7, #12]
 800b51c:	60b9      	str	r1, [r7, #8]
 800b51e:	4613      	mov	r3, r2
 800b520:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b522:	79fb      	ldrb	r3, [r7, #7]
 800b524:	2b02      	cmp	r3, #2
 800b526:	d165      	bne.n	800b5f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	4a41      	ldr	r2, [pc, #260]	; (800b630 <USB_SetTurnaroundTime+0x11c>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d906      	bls.n	800b53e <USB_SetTurnaroundTime+0x2a>
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	4a40      	ldr	r2, [pc, #256]	; (800b634 <USB_SetTurnaroundTime+0x120>)
 800b534:	4293      	cmp	r3, r2
 800b536:	d802      	bhi.n	800b53e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b538:	230f      	movs	r3, #15
 800b53a:	617b      	str	r3, [r7, #20]
 800b53c:	e062      	b.n	800b604 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	4a3c      	ldr	r2, [pc, #240]	; (800b634 <USB_SetTurnaroundTime+0x120>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d906      	bls.n	800b554 <USB_SetTurnaroundTime+0x40>
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	4a3b      	ldr	r2, [pc, #236]	; (800b638 <USB_SetTurnaroundTime+0x124>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d802      	bhi.n	800b554 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b54e:	230e      	movs	r3, #14
 800b550:	617b      	str	r3, [r7, #20]
 800b552:	e057      	b.n	800b604 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	4a38      	ldr	r2, [pc, #224]	; (800b638 <USB_SetTurnaroundTime+0x124>)
 800b558:	4293      	cmp	r3, r2
 800b55a:	d906      	bls.n	800b56a <USB_SetTurnaroundTime+0x56>
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	4a37      	ldr	r2, [pc, #220]	; (800b63c <USB_SetTurnaroundTime+0x128>)
 800b560:	4293      	cmp	r3, r2
 800b562:	d802      	bhi.n	800b56a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b564:	230d      	movs	r3, #13
 800b566:	617b      	str	r3, [r7, #20]
 800b568:	e04c      	b.n	800b604 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	4a33      	ldr	r2, [pc, #204]	; (800b63c <USB_SetTurnaroundTime+0x128>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d906      	bls.n	800b580 <USB_SetTurnaroundTime+0x6c>
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	4a32      	ldr	r2, [pc, #200]	; (800b640 <USB_SetTurnaroundTime+0x12c>)
 800b576:	4293      	cmp	r3, r2
 800b578:	d802      	bhi.n	800b580 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b57a:	230c      	movs	r3, #12
 800b57c:	617b      	str	r3, [r7, #20]
 800b57e:	e041      	b.n	800b604 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	4a2f      	ldr	r2, [pc, #188]	; (800b640 <USB_SetTurnaroundTime+0x12c>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d906      	bls.n	800b596 <USB_SetTurnaroundTime+0x82>
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	4a2e      	ldr	r2, [pc, #184]	; (800b644 <USB_SetTurnaroundTime+0x130>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d802      	bhi.n	800b596 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b590:	230b      	movs	r3, #11
 800b592:	617b      	str	r3, [r7, #20]
 800b594:	e036      	b.n	800b604 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	4a2a      	ldr	r2, [pc, #168]	; (800b644 <USB_SetTurnaroundTime+0x130>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d906      	bls.n	800b5ac <USB_SetTurnaroundTime+0x98>
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	4a29      	ldr	r2, [pc, #164]	; (800b648 <USB_SetTurnaroundTime+0x134>)
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d802      	bhi.n	800b5ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b5a6:	230a      	movs	r3, #10
 800b5a8:	617b      	str	r3, [r7, #20]
 800b5aa:	e02b      	b.n	800b604 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	4a26      	ldr	r2, [pc, #152]	; (800b648 <USB_SetTurnaroundTime+0x134>)
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d906      	bls.n	800b5c2 <USB_SetTurnaroundTime+0xae>
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	4a25      	ldr	r2, [pc, #148]	; (800b64c <USB_SetTurnaroundTime+0x138>)
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d802      	bhi.n	800b5c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b5bc:	2309      	movs	r3, #9
 800b5be:	617b      	str	r3, [r7, #20]
 800b5c0:	e020      	b.n	800b604 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	4a21      	ldr	r2, [pc, #132]	; (800b64c <USB_SetTurnaroundTime+0x138>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d906      	bls.n	800b5d8 <USB_SetTurnaroundTime+0xc4>
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	4a20      	ldr	r2, [pc, #128]	; (800b650 <USB_SetTurnaroundTime+0x13c>)
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	d802      	bhi.n	800b5d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b5d2:	2308      	movs	r3, #8
 800b5d4:	617b      	str	r3, [r7, #20]
 800b5d6:	e015      	b.n	800b604 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	4a1d      	ldr	r2, [pc, #116]	; (800b650 <USB_SetTurnaroundTime+0x13c>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d906      	bls.n	800b5ee <USB_SetTurnaroundTime+0xda>
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	4a1c      	ldr	r2, [pc, #112]	; (800b654 <USB_SetTurnaroundTime+0x140>)
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d802      	bhi.n	800b5ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b5e8:	2307      	movs	r3, #7
 800b5ea:	617b      	str	r3, [r7, #20]
 800b5ec:	e00a      	b.n	800b604 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b5ee:	2306      	movs	r3, #6
 800b5f0:	617b      	str	r3, [r7, #20]
 800b5f2:	e007      	b.n	800b604 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b5f4:	79fb      	ldrb	r3, [r7, #7]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d102      	bne.n	800b600 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b5fa:	2309      	movs	r3, #9
 800b5fc:	617b      	str	r3, [r7, #20]
 800b5fe:	e001      	b.n	800b604 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b600:	2309      	movs	r3, #9
 800b602:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	68db      	ldr	r3, [r3, #12]
 800b608:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	68da      	ldr	r2, [r3, #12]
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	029b      	lsls	r3, r3, #10
 800b618:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b61c:	431a      	orrs	r2, r3
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b622:	2300      	movs	r3, #0
}
 800b624:	4618      	mov	r0, r3
 800b626:	371c      	adds	r7, #28
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr
 800b630:	00d8acbf 	.word	0x00d8acbf
 800b634:	00e4e1bf 	.word	0x00e4e1bf
 800b638:	00f423ff 	.word	0x00f423ff
 800b63c:	0106737f 	.word	0x0106737f
 800b640:	011a499f 	.word	0x011a499f
 800b644:	01312cff 	.word	0x01312cff
 800b648:	014ca43f 	.word	0x014ca43f
 800b64c:	016e35ff 	.word	0x016e35ff
 800b650:	01a6ab1f 	.word	0x01a6ab1f
 800b654:	01e847ff 	.word	0x01e847ff

0800b658 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b658:	b480      	push	{r7}
 800b65a:	b083      	sub	sp, #12
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	689b      	ldr	r3, [r3, #8]
 800b664:	f043 0201 	orr.w	r2, r3, #1
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b66c:	2300      	movs	r3, #0
}
 800b66e:	4618      	mov	r0, r3
 800b670:	370c      	adds	r7, #12
 800b672:	46bd      	mov	sp, r7
 800b674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b678:	4770      	bx	lr

0800b67a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b67a:	b480      	push	{r7}
 800b67c:	b083      	sub	sp, #12
 800b67e:	af00      	add	r7, sp, #0
 800b680:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	689b      	ldr	r3, [r3, #8]
 800b686:	f023 0201 	bic.w	r2, r3, #1
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b68e:	2300      	movs	r3, #0
}
 800b690:	4618      	mov	r0, r3
 800b692:	370c      	adds	r7, #12
 800b694:	46bd      	mov	sp, r7
 800b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69a:	4770      	bx	lr

0800b69c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b082      	sub	sp, #8
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	460b      	mov	r3, r1
 800b6a6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	68db      	ldr	r3, [r3, #12]
 800b6ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b6b4:	78fb      	ldrb	r3, [r7, #3]
 800b6b6:	2b01      	cmp	r3, #1
 800b6b8:	d106      	bne.n	800b6c8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	68db      	ldr	r3, [r3, #12]
 800b6be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	60da      	str	r2, [r3, #12]
 800b6c6:	e00b      	b.n	800b6e0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b6c8:	78fb      	ldrb	r3, [r7, #3]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d106      	bne.n	800b6dc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	68db      	ldr	r3, [r3, #12]
 800b6d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	60da      	str	r2, [r3, #12]
 800b6da:	e001      	b.n	800b6e0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b6dc:	2301      	movs	r3, #1
 800b6de:	e003      	b.n	800b6e8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b6e0:	2032      	movs	r0, #50	; 0x32
 800b6e2:	f7f5 ff63 	bl	80015ac <HAL_Delay>

  return HAL_OK;
 800b6e6:	2300      	movs	r3, #0
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3708      	adds	r7, #8
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}

0800b6f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b6f0:	b084      	sub	sp, #16
 800b6f2:	b580      	push	{r7, lr}
 800b6f4:	b086      	sub	sp, #24
 800b6f6:	af00      	add	r7, sp, #0
 800b6f8:	6078      	str	r0, [r7, #4]
 800b6fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b6fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b702:	2300      	movs	r3, #0
 800b704:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b70a:	2300      	movs	r3, #0
 800b70c:	613b      	str	r3, [r7, #16]
 800b70e:	e009      	b.n	800b724 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b710:	687a      	ldr	r2, [r7, #4]
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	3340      	adds	r3, #64	; 0x40
 800b716:	009b      	lsls	r3, r3, #2
 800b718:	4413      	add	r3, r2
 800b71a:	2200      	movs	r2, #0
 800b71c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	3301      	adds	r3, #1
 800b722:	613b      	str	r3, [r7, #16]
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	2b0e      	cmp	r3, #14
 800b728:	d9f2      	bls.n	800b710 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b72a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d11c      	bne.n	800b76a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b736:	685b      	ldr	r3, [r3, #4]
 800b738:	68fa      	ldr	r2, [r7, #12]
 800b73a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b73e:	f043 0302 	orr.w	r3, r3, #2
 800b742:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b748:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	601a      	str	r2, [r3, #0]
 800b768:	e005      	b.n	800b776 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b76e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b77c:	461a      	mov	r2, r3
 800b77e:	2300      	movs	r3, #0
 800b780:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b788:	4619      	mov	r1, r3
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b790:	461a      	mov	r2, r3
 800b792:	680b      	ldr	r3, [r1, #0]
 800b794:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b798:	2b01      	cmp	r3, #1
 800b79a:	d10c      	bne.n	800b7b6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d104      	bne.n	800b7ac <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b7a2:	2100      	movs	r1, #0
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f000 f949 	bl	800ba3c <USB_SetDevSpeed>
 800b7aa:	e008      	b.n	800b7be <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b7ac:	2101      	movs	r1, #1
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 f944 	bl	800ba3c <USB_SetDevSpeed>
 800b7b4:	e003      	b.n	800b7be <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b7b6:	2103      	movs	r1, #3
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f000 f93f 	bl	800ba3c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b7be:	2110      	movs	r1, #16
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f000 f8f3 	bl	800b9ac <USB_FlushTxFifo>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d001      	beq.n	800b7d0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f000 f911 	bl	800b9f8 <USB_FlushRxFifo>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d001      	beq.n	800b7e0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b7dc:	2301      	movs	r3, #1
 800b7de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7fe:	461a      	mov	r2, r3
 800b800:	2300      	movs	r3, #0
 800b802:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b804:	2300      	movs	r3, #0
 800b806:	613b      	str	r3, [r7, #16]
 800b808:	e043      	b.n	800b892 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	015a      	lsls	r2, r3, #5
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	4413      	add	r3, r2
 800b812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b81c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b820:	d118      	bne.n	800b854 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d10a      	bne.n	800b83e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	015a      	lsls	r2, r3, #5
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	4413      	add	r3, r2
 800b830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b834:	461a      	mov	r2, r3
 800b836:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b83a:	6013      	str	r3, [r2, #0]
 800b83c:	e013      	b.n	800b866 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	015a      	lsls	r2, r3, #5
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	4413      	add	r3, r2
 800b846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b84a:	461a      	mov	r2, r3
 800b84c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b850:	6013      	str	r3, [r2, #0]
 800b852:	e008      	b.n	800b866 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	015a      	lsls	r2, r3, #5
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	4413      	add	r3, r2
 800b85c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b860:	461a      	mov	r2, r3
 800b862:	2300      	movs	r3, #0
 800b864:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	015a      	lsls	r2, r3, #5
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	4413      	add	r3, r2
 800b86e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b872:	461a      	mov	r2, r3
 800b874:	2300      	movs	r3, #0
 800b876:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	015a      	lsls	r2, r3, #5
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	4413      	add	r3, r2
 800b880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b884:	461a      	mov	r2, r3
 800b886:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b88a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	3301      	adds	r3, #1
 800b890:	613b      	str	r3, [r7, #16]
 800b892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b894:	693a      	ldr	r2, [r7, #16]
 800b896:	429a      	cmp	r2, r3
 800b898:	d3b7      	bcc.n	800b80a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b89a:	2300      	movs	r3, #0
 800b89c:	613b      	str	r3, [r7, #16]
 800b89e:	e043      	b.n	800b928 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	015a      	lsls	r2, r3, #5
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	4413      	add	r3, r2
 800b8a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b8b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b8b6:	d118      	bne.n	800b8ea <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d10a      	bne.n	800b8d4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	015a      	lsls	r2, r3, #5
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	4413      	add	r3, r2
 800b8c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8ca:	461a      	mov	r2, r3
 800b8cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b8d0:	6013      	str	r3, [r2, #0]
 800b8d2:	e013      	b.n	800b8fc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	015a      	lsls	r2, r3, #5
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	4413      	add	r3, r2
 800b8dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8e0:	461a      	mov	r2, r3
 800b8e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b8e6:	6013      	str	r3, [r2, #0]
 800b8e8:	e008      	b.n	800b8fc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	015a      	lsls	r2, r3, #5
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	4413      	add	r3, r2
 800b8f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	015a      	lsls	r2, r3, #5
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	4413      	add	r3, r2
 800b904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b908:	461a      	mov	r2, r3
 800b90a:	2300      	movs	r3, #0
 800b90c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	015a      	lsls	r2, r3, #5
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	4413      	add	r3, r2
 800b916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b91a:	461a      	mov	r2, r3
 800b91c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b920:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	3301      	adds	r3, #1
 800b926:	613b      	str	r3, [r7, #16]
 800b928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92a:	693a      	ldr	r2, [r7, #16]
 800b92c:	429a      	cmp	r2, r3
 800b92e:	d3b7      	bcc.n	800b8a0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b936:	691b      	ldr	r3, [r3, #16]
 800b938:	68fa      	ldr	r2, [r7, #12]
 800b93a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b93e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b942:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2200      	movs	r2, #0
 800b948:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b950:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b954:	2b00      	cmp	r3, #0
 800b956:	d105      	bne.n	800b964 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	699b      	ldr	r3, [r3, #24]
 800b95c:	f043 0210 	orr.w	r2, r3, #16
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	699a      	ldr	r2, [r3, #24]
 800b968:	4b0e      	ldr	r3, [pc, #56]	; (800b9a4 <USB_DevInit+0x2b4>)
 800b96a:	4313      	orrs	r3, r2
 800b96c:	687a      	ldr	r2, [r7, #4]
 800b96e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b972:	2b00      	cmp	r3, #0
 800b974:	d005      	beq.n	800b982 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	699b      	ldr	r3, [r3, #24]
 800b97a:	f043 0208 	orr.w	r2, r3, #8
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b984:	2b01      	cmp	r3, #1
 800b986:	d105      	bne.n	800b994 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	699a      	ldr	r2, [r3, #24]
 800b98c:	4b06      	ldr	r3, [pc, #24]	; (800b9a8 <USB_DevInit+0x2b8>)
 800b98e:	4313      	orrs	r3, r2
 800b990:	687a      	ldr	r2, [r7, #4]
 800b992:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b994:	7dfb      	ldrb	r3, [r7, #23]
}
 800b996:	4618      	mov	r0, r3
 800b998:	3718      	adds	r7, #24
 800b99a:	46bd      	mov	sp, r7
 800b99c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b9a0:	b004      	add	sp, #16
 800b9a2:	4770      	bx	lr
 800b9a4:	803c3800 	.word	0x803c3800
 800b9a8:	40000004 	.word	0x40000004

0800b9ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b085      	sub	sp, #20
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	019b      	lsls	r3, r3, #6
 800b9be:	f043 0220 	orr.w	r2, r3, #32
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	3301      	adds	r3, #1
 800b9ca:	60fb      	str	r3, [r7, #12]
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	4a09      	ldr	r2, [pc, #36]	; (800b9f4 <USB_FlushTxFifo+0x48>)
 800b9d0:	4293      	cmp	r3, r2
 800b9d2:	d901      	bls.n	800b9d8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b9d4:	2303      	movs	r3, #3
 800b9d6:	e006      	b.n	800b9e6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	691b      	ldr	r3, [r3, #16]
 800b9dc:	f003 0320 	and.w	r3, r3, #32
 800b9e0:	2b20      	cmp	r3, #32
 800b9e2:	d0f0      	beq.n	800b9c6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b9e4:	2300      	movs	r3, #0
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3714      	adds	r7, #20
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f0:	4770      	bx	lr
 800b9f2:	bf00      	nop
 800b9f4:	00030d40 	.word	0x00030d40

0800b9f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b085      	sub	sp, #20
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800ba00:	2300      	movs	r3, #0
 800ba02:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2210      	movs	r2, #16
 800ba08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	60fb      	str	r3, [r7, #12]
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	4a09      	ldr	r2, [pc, #36]	; (800ba38 <USB_FlushRxFifo+0x40>)
 800ba14:	4293      	cmp	r3, r2
 800ba16:	d901      	bls.n	800ba1c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800ba18:	2303      	movs	r3, #3
 800ba1a:	e006      	b.n	800ba2a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	691b      	ldr	r3, [r3, #16]
 800ba20:	f003 0310 	and.w	r3, r3, #16
 800ba24:	2b10      	cmp	r3, #16
 800ba26:	d0f0      	beq.n	800ba0a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800ba28:	2300      	movs	r3, #0
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3714      	adds	r7, #20
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba34:	4770      	bx	lr
 800ba36:	bf00      	nop
 800ba38:	00030d40 	.word	0x00030d40

0800ba3c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b085      	sub	sp, #20
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	460b      	mov	r3, r1
 800ba46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba52:	681a      	ldr	r2, [r3, #0]
 800ba54:	78fb      	ldrb	r3, [r7, #3]
 800ba56:	68f9      	ldr	r1, [r7, #12]
 800ba58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba5c:	4313      	orrs	r3, r2
 800ba5e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ba60:	2300      	movs	r3, #0
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3714      	adds	r7, #20
 800ba66:	46bd      	mov	sp, r7
 800ba68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6c:	4770      	bx	lr

0800ba6e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ba6e:	b480      	push	{r7}
 800ba70:	b087      	sub	sp, #28
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ba7a:	693b      	ldr	r3, [r7, #16]
 800ba7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba80:	689b      	ldr	r3, [r3, #8]
 800ba82:	f003 0306 	and.w	r3, r3, #6
 800ba86:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d102      	bne.n	800ba94 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	75fb      	strb	r3, [r7, #23]
 800ba92:	e00a      	b.n	800baaa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2b02      	cmp	r3, #2
 800ba98:	d002      	beq.n	800baa0 <USB_GetDevSpeed+0x32>
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2b06      	cmp	r3, #6
 800ba9e:	d102      	bne.n	800baa6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800baa0:	2302      	movs	r3, #2
 800baa2:	75fb      	strb	r3, [r7, #23]
 800baa4:	e001      	b.n	800baaa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800baa6:	230f      	movs	r3, #15
 800baa8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800baaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800baac:	4618      	mov	r0, r3
 800baae:	371c      	adds	r7, #28
 800bab0:	46bd      	mov	sp, r7
 800bab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab6:	4770      	bx	lr

0800bab8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bab8:	b480      	push	{r7}
 800baba:	b085      	sub	sp, #20
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	781b      	ldrb	r3, [r3, #0]
 800baca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	785b      	ldrb	r3, [r3, #1]
 800bad0:	2b01      	cmp	r3, #1
 800bad2:	d139      	bne.n	800bb48 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bada:	69da      	ldr	r2, [r3, #28]
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	781b      	ldrb	r3, [r3, #0]
 800bae0:	f003 030f 	and.w	r3, r3, #15
 800bae4:	2101      	movs	r1, #1
 800bae6:	fa01 f303 	lsl.w	r3, r1, r3
 800baea:	b29b      	uxth	r3, r3
 800baec:	68f9      	ldr	r1, [r7, #12]
 800baee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800baf2:	4313      	orrs	r3, r2
 800baf4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	015a      	lsls	r2, r3, #5
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	4413      	add	r3, r2
 800bafe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d153      	bne.n	800bbb4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	015a      	lsls	r2, r3, #5
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	4413      	add	r3, r2
 800bb14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb18:	681a      	ldr	r2, [r3, #0]
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	689b      	ldr	r3, [r3, #8]
 800bb1e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	78db      	ldrb	r3, [r3, #3]
 800bb26:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bb28:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	059b      	lsls	r3, r3, #22
 800bb2e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bb30:	431a      	orrs	r2, r3
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	0159      	lsls	r1, r3, #5
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	440b      	add	r3, r1
 800bb3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb3e:	4619      	mov	r1, r3
 800bb40:	4b20      	ldr	r3, [pc, #128]	; (800bbc4 <USB_ActivateEndpoint+0x10c>)
 800bb42:	4313      	orrs	r3, r2
 800bb44:	600b      	str	r3, [r1, #0]
 800bb46:	e035      	b.n	800bbb4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb4e:	69da      	ldr	r2, [r3, #28]
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	781b      	ldrb	r3, [r3, #0]
 800bb54:	f003 030f 	and.w	r3, r3, #15
 800bb58:	2101      	movs	r1, #1
 800bb5a:	fa01 f303 	lsl.w	r3, r1, r3
 800bb5e:	041b      	lsls	r3, r3, #16
 800bb60:	68f9      	ldr	r1, [r7, #12]
 800bb62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb66:	4313      	orrs	r3, r2
 800bb68:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	015a      	lsls	r2, r3, #5
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	4413      	add	r3, r2
 800bb72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d119      	bne.n	800bbb4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	015a      	lsls	r2, r3, #5
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	4413      	add	r3, r2
 800bb88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb8c:	681a      	ldr	r2, [r3, #0]
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	689b      	ldr	r3, [r3, #8]
 800bb92:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	78db      	ldrb	r3, [r3, #3]
 800bb9a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bb9c:	430b      	orrs	r3, r1
 800bb9e:	431a      	orrs	r2, r3
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	0159      	lsls	r1, r3, #5
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	440b      	add	r3, r1
 800bba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbac:	4619      	mov	r1, r3
 800bbae:	4b05      	ldr	r3, [pc, #20]	; (800bbc4 <USB_ActivateEndpoint+0x10c>)
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bbb4:	2300      	movs	r3, #0
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3714      	adds	r7, #20
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc0:	4770      	bx	lr
 800bbc2:	bf00      	nop
 800bbc4:	10008000 	.word	0x10008000

0800bbc8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b085      	sub	sp, #20
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	781b      	ldrb	r3, [r3, #0]
 800bbda:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	785b      	ldrb	r3, [r3, #1]
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	d161      	bne.n	800bca8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	015a      	lsls	r2, r3, #5
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	4413      	add	r3, r2
 800bbec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bbf6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bbfa:	d11f      	bne.n	800bc3c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	015a      	lsls	r2, r3, #5
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	4413      	add	r3, r2
 800bc04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	68ba      	ldr	r2, [r7, #8]
 800bc0c:	0151      	lsls	r1, r2, #5
 800bc0e:	68fa      	ldr	r2, [r7, #12]
 800bc10:	440a      	add	r2, r1
 800bc12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bc1a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	015a      	lsls	r2, r3, #5
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	4413      	add	r3, r2
 800bc24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	68ba      	ldr	r2, [r7, #8]
 800bc2c:	0151      	lsls	r1, r2, #5
 800bc2e:	68fa      	ldr	r2, [r7, #12]
 800bc30:	440a      	add	r2, r1
 800bc32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bc3a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	781b      	ldrb	r3, [r3, #0]
 800bc48:	f003 030f 	and.w	r3, r3, #15
 800bc4c:	2101      	movs	r1, #1
 800bc4e:	fa01 f303 	lsl.w	r3, r1, r3
 800bc52:	b29b      	uxth	r3, r3
 800bc54:	43db      	mvns	r3, r3
 800bc56:	68f9      	ldr	r1, [r7, #12]
 800bc58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc5c:	4013      	ands	r3, r2
 800bc5e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc66:	69da      	ldr	r2, [r3, #28]
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	781b      	ldrb	r3, [r3, #0]
 800bc6c:	f003 030f 	and.w	r3, r3, #15
 800bc70:	2101      	movs	r1, #1
 800bc72:	fa01 f303 	lsl.w	r3, r1, r3
 800bc76:	b29b      	uxth	r3, r3
 800bc78:	43db      	mvns	r3, r3
 800bc7a:	68f9      	ldr	r1, [r7, #12]
 800bc7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc80:	4013      	ands	r3, r2
 800bc82:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	015a      	lsls	r2, r3, #5
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	4413      	add	r3, r2
 800bc8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc90:	681a      	ldr	r2, [r3, #0]
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	0159      	lsls	r1, r3, #5
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	440b      	add	r3, r1
 800bc9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc9e:	4619      	mov	r1, r3
 800bca0:	4b35      	ldr	r3, [pc, #212]	; (800bd78 <USB_DeactivateEndpoint+0x1b0>)
 800bca2:	4013      	ands	r3, r2
 800bca4:	600b      	str	r3, [r1, #0]
 800bca6:	e060      	b.n	800bd6a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	015a      	lsls	r2, r3, #5
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	4413      	add	r3, r2
 800bcb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bcba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bcbe:	d11f      	bne.n	800bd00 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	015a      	lsls	r2, r3, #5
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	4413      	add	r3, r2
 800bcc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	68ba      	ldr	r2, [r7, #8]
 800bcd0:	0151      	lsls	r1, r2, #5
 800bcd2:	68fa      	ldr	r2, [r7, #12]
 800bcd4:	440a      	add	r2, r1
 800bcd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bcde:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	015a      	lsls	r2, r3, #5
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	4413      	add	r3, r2
 800bce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	68ba      	ldr	r2, [r7, #8]
 800bcf0:	0151      	lsls	r1, r2, #5
 800bcf2:	68fa      	ldr	r2, [r7, #12]
 800bcf4:	440a      	add	r2, r1
 800bcf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcfa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bcfe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	781b      	ldrb	r3, [r3, #0]
 800bd0c:	f003 030f 	and.w	r3, r3, #15
 800bd10:	2101      	movs	r1, #1
 800bd12:	fa01 f303 	lsl.w	r3, r1, r3
 800bd16:	041b      	lsls	r3, r3, #16
 800bd18:	43db      	mvns	r3, r3
 800bd1a:	68f9      	ldr	r1, [r7, #12]
 800bd1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd20:	4013      	ands	r3, r2
 800bd22:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd2a:	69da      	ldr	r2, [r3, #28]
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	781b      	ldrb	r3, [r3, #0]
 800bd30:	f003 030f 	and.w	r3, r3, #15
 800bd34:	2101      	movs	r1, #1
 800bd36:	fa01 f303 	lsl.w	r3, r1, r3
 800bd3a:	041b      	lsls	r3, r3, #16
 800bd3c:	43db      	mvns	r3, r3
 800bd3e:	68f9      	ldr	r1, [r7, #12]
 800bd40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd44:	4013      	ands	r3, r2
 800bd46:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	015a      	lsls	r2, r3, #5
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	4413      	add	r3, r2
 800bd50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd54:	681a      	ldr	r2, [r3, #0]
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	0159      	lsls	r1, r3, #5
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	440b      	add	r3, r1
 800bd5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd62:	4619      	mov	r1, r3
 800bd64:	4b05      	ldr	r3, [pc, #20]	; (800bd7c <USB_DeactivateEndpoint+0x1b4>)
 800bd66:	4013      	ands	r3, r2
 800bd68:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800bd6a:	2300      	movs	r3, #0
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3714      	adds	r7, #20
 800bd70:	46bd      	mov	sp, r7
 800bd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd76:	4770      	bx	lr
 800bd78:	ec337800 	.word	0xec337800
 800bd7c:	eff37800 	.word	0xeff37800

0800bd80 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b08a      	sub	sp, #40	; 0x28
 800bd84:	af02      	add	r7, sp, #8
 800bd86:	60f8      	str	r0, [r7, #12]
 800bd88:	60b9      	str	r1, [r7, #8]
 800bd8a:	4613      	mov	r3, r2
 800bd8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	785b      	ldrb	r3, [r3, #1]
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	f040 8163 	bne.w	800c068 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	695b      	ldr	r3, [r3, #20]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d132      	bne.n	800be10 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bdaa:	69bb      	ldr	r3, [r7, #24]
 800bdac:	015a      	lsls	r2, r3, #5
 800bdae:	69fb      	ldr	r3, [r7, #28]
 800bdb0:	4413      	add	r3, r2
 800bdb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdb6:	691a      	ldr	r2, [r3, #16]
 800bdb8:	69bb      	ldr	r3, [r7, #24]
 800bdba:	0159      	lsls	r1, r3, #5
 800bdbc:	69fb      	ldr	r3, [r7, #28]
 800bdbe:	440b      	add	r3, r1
 800bdc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdc4:	4619      	mov	r1, r3
 800bdc6:	4ba5      	ldr	r3, [pc, #660]	; (800c05c <USB_EPStartXfer+0x2dc>)
 800bdc8:	4013      	ands	r3, r2
 800bdca:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bdcc:	69bb      	ldr	r3, [r7, #24]
 800bdce:	015a      	lsls	r2, r3, #5
 800bdd0:	69fb      	ldr	r3, [r7, #28]
 800bdd2:	4413      	add	r3, r2
 800bdd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdd8:	691b      	ldr	r3, [r3, #16]
 800bdda:	69ba      	ldr	r2, [r7, #24]
 800bddc:	0151      	lsls	r1, r2, #5
 800bdde:	69fa      	ldr	r2, [r7, #28]
 800bde0:	440a      	add	r2, r1
 800bde2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bde6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bdea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bdec:	69bb      	ldr	r3, [r7, #24]
 800bdee:	015a      	lsls	r2, r3, #5
 800bdf0:	69fb      	ldr	r3, [r7, #28]
 800bdf2:	4413      	add	r3, r2
 800bdf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdf8:	691a      	ldr	r2, [r3, #16]
 800bdfa:	69bb      	ldr	r3, [r7, #24]
 800bdfc:	0159      	lsls	r1, r3, #5
 800bdfe:	69fb      	ldr	r3, [r7, #28]
 800be00:	440b      	add	r3, r1
 800be02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be06:	4619      	mov	r1, r3
 800be08:	4b95      	ldr	r3, [pc, #596]	; (800c060 <USB_EPStartXfer+0x2e0>)
 800be0a:	4013      	ands	r3, r2
 800be0c:	610b      	str	r3, [r1, #16]
 800be0e:	e074      	b.n	800befa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800be10:	69bb      	ldr	r3, [r7, #24]
 800be12:	015a      	lsls	r2, r3, #5
 800be14:	69fb      	ldr	r3, [r7, #28]
 800be16:	4413      	add	r3, r2
 800be18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be1c:	691a      	ldr	r2, [r3, #16]
 800be1e:	69bb      	ldr	r3, [r7, #24]
 800be20:	0159      	lsls	r1, r3, #5
 800be22:	69fb      	ldr	r3, [r7, #28]
 800be24:	440b      	add	r3, r1
 800be26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be2a:	4619      	mov	r1, r3
 800be2c:	4b8c      	ldr	r3, [pc, #560]	; (800c060 <USB_EPStartXfer+0x2e0>)
 800be2e:	4013      	ands	r3, r2
 800be30:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800be32:	69bb      	ldr	r3, [r7, #24]
 800be34:	015a      	lsls	r2, r3, #5
 800be36:	69fb      	ldr	r3, [r7, #28]
 800be38:	4413      	add	r3, r2
 800be3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be3e:	691a      	ldr	r2, [r3, #16]
 800be40:	69bb      	ldr	r3, [r7, #24]
 800be42:	0159      	lsls	r1, r3, #5
 800be44:	69fb      	ldr	r3, [r7, #28]
 800be46:	440b      	add	r3, r1
 800be48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be4c:	4619      	mov	r1, r3
 800be4e:	4b83      	ldr	r3, [pc, #524]	; (800c05c <USB_EPStartXfer+0x2dc>)
 800be50:	4013      	ands	r3, r2
 800be52:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800be54:	69bb      	ldr	r3, [r7, #24]
 800be56:	015a      	lsls	r2, r3, #5
 800be58:	69fb      	ldr	r3, [r7, #28]
 800be5a:	4413      	add	r3, r2
 800be5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be60:	691a      	ldr	r2, [r3, #16]
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	6959      	ldr	r1, [r3, #20]
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	689b      	ldr	r3, [r3, #8]
 800be6a:	440b      	add	r3, r1
 800be6c:	1e59      	subs	r1, r3, #1
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	689b      	ldr	r3, [r3, #8]
 800be72:	fbb1 f3f3 	udiv	r3, r1, r3
 800be76:	04d9      	lsls	r1, r3, #19
 800be78:	4b7a      	ldr	r3, [pc, #488]	; (800c064 <USB_EPStartXfer+0x2e4>)
 800be7a:	400b      	ands	r3, r1
 800be7c:	69b9      	ldr	r1, [r7, #24]
 800be7e:	0148      	lsls	r0, r1, #5
 800be80:	69f9      	ldr	r1, [r7, #28]
 800be82:	4401      	add	r1, r0
 800be84:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800be88:	4313      	orrs	r3, r2
 800be8a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800be8c:	69bb      	ldr	r3, [r7, #24]
 800be8e:	015a      	lsls	r2, r3, #5
 800be90:	69fb      	ldr	r3, [r7, #28]
 800be92:	4413      	add	r3, r2
 800be94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be98:	691a      	ldr	r2, [r3, #16]
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	695b      	ldr	r3, [r3, #20]
 800be9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bea2:	69b9      	ldr	r1, [r7, #24]
 800bea4:	0148      	lsls	r0, r1, #5
 800bea6:	69f9      	ldr	r1, [r7, #28]
 800bea8:	4401      	add	r1, r0
 800beaa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800beae:	4313      	orrs	r3, r2
 800beb0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	78db      	ldrb	r3, [r3, #3]
 800beb6:	2b01      	cmp	r3, #1
 800beb8:	d11f      	bne.n	800befa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800beba:	69bb      	ldr	r3, [r7, #24]
 800bebc:	015a      	lsls	r2, r3, #5
 800bebe:	69fb      	ldr	r3, [r7, #28]
 800bec0:	4413      	add	r3, r2
 800bec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bec6:	691b      	ldr	r3, [r3, #16]
 800bec8:	69ba      	ldr	r2, [r7, #24]
 800beca:	0151      	lsls	r1, r2, #5
 800becc:	69fa      	ldr	r2, [r7, #28]
 800bece:	440a      	add	r2, r1
 800bed0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bed4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800bed8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800beda:	69bb      	ldr	r3, [r7, #24]
 800bedc:	015a      	lsls	r2, r3, #5
 800bede:	69fb      	ldr	r3, [r7, #28]
 800bee0:	4413      	add	r3, r2
 800bee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bee6:	691b      	ldr	r3, [r3, #16]
 800bee8:	69ba      	ldr	r2, [r7, #24]
 800beea:	0151      	lsls	r1, r2, #5
 800beec:	69fa      	ldr	r2, [r7, #28]
 800beee:	440a      	add	r2, r1
 800bef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bef4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bef8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800befa:	79fb      	ldrb	r3, [r7, #7]
 800befc:	2b01      	cmp	r3, #1
 800befe:	d14b      	bne.n	800bf98 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	691b      	ldr	r3, [r3, #16]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d009      	beq.n	800bf1c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bf08:	69bb      	ldr	r3, [r7, #24]
 800bf0a:	015a      	lsls	r2, r3, #5
 800bf0c:	69fb      	ldr	r3, [r7, #28]
 800bf0e:	4413      	add	r3, r2
 800bf10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf14:	461a      	mov	r2, r3
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	691b      	ldr	r3, [r3, #16]
 800bf1a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	78db      	ldrb	r3, [r3, #3]
 800bf20:	2b01      	cmp	r3, #1
 800bf22:	d128      	bne.n	800bf76 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bf24:	69fb      	ldr	r3, [r7, #28]
 800bf26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf2a:	689b      	ldr	r3, [r3, #8]
 800bf2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d110      	bne.n	800bf56 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bf34:	69bb      	ldr	r3, [r7, #24]
 800bf36:	015a      	lsls	r2, r3, #5
 800bf38:	69fb      	ldr	r3, [r7, #28]
 800bf3a:	4413      	add	r3, r2
 800bf3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	69ba      	ldr	r2, [r7, #24]
 800bf44:	0151      	lsls	r1, r2, #5
 800bf46:	69fa      	ldr	r2, [r7, #28]
 800bf48:	440a      	add	r2, r1
 800bf4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bf52:	6013      	str	r3, [r2, #0]
 800bf54:	e00f      	b.n	800bf76 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bf56:	69bb      	ldr	r3, [r7, #24]
 800bf58:	015a      	lsls	r2, r3, #5
 800bf5a:	69fb      	ldr	r3, [r7, #28]
 800bf5c:	4413      	add	r3, r2
 800bf5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	69ba      	ldr	r2, [r7, #24]
 800bf66:	0151      	lsls	r1, r2, #5
 800bf68:	69fa      	ldr	r2, [r7, #28]
 800bf6a:	440a      	add	r2, r1
 800bf6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf74:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bf76:	69bb      	ldr	r3, [r7, #24]
 800bf78:	015a      	lsls	r2, r3, #5
 800bf7a:	69fb      	ldr	r3, [r7, #28]
 800bf7c:	4413      	add	r3, r2
 800bf7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	69ba      	ldr	r2, [r7, #24]
 800bf86:	0151      	lsls	r1, r2, #5
 800bf88:	69fa      	ldr	r2, [r7, #28]
 800bf8a:	440a      	add	r2, r1
 800bf8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bf94:	6013      	str	r3, [r2, #0]
 800bf96:	e133      	b.n	800c200 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bf98:	69bb      	ldr	r3, [r7, #24]
 800bf9a:	015a      	lsls	r2, r3, #5
 800bf9c:	69fb      	ldr	r3, [r7, #28]
 800bf9e:	4413      	add	r3, r2
 800bfa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	69ba      	ldr	r2, [r7, #24]
 800bfa8:	0151      	lsls	r1, r2, #5
 800bfaa:	69fa      	ldr	r2, [r7, #28]
 800bfac:	440a      	add	r2, r1
 800bfae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfb2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bfb6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	78db      	ldrb	r3, [r3, #3]
 800bfbc:	2b01      	cmp	r3, #1
 800bfbe:	d015      	beq.n	800bfec <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	695b      	ldr	r3, [r3, #20]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	f000 811b 	beq.w	800c200 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bfca:	69fb      	ldr	r3, [r7, #28]
 800bfcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	781b      	ldrb	r3, [r3, #0]
 800bfd6:	f003 030f 	and.w	r3, r3, #15
 800bfda:	2101      	movs	r1, #1
 800bfdc:	fa01 f303 	lsl.w	r3, r1, r3
 800bfe0:	69f9      	ldr	r1, [r7, #28]
 800bfe2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bfe6:	4313      	orrs	r3, r2
 800bfe8:	634b      	str	r3, [r1, #52]	; 0x34
 800bfea:	e109      	b.n	800c200 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bfec:	69fb      	ldr	r3, [r7, #28]
 800bfee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bff2:	689b      	ldr	r3, [r3, #8]
 800bff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d110      	bne.n	800c01e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bffc:	69bb      	ldr	r3, [r7, #24]
 800bffe:	015a      	lsls	r2, r3, #5
 800c000:	69fb      	ldr	r3, [r7, #28]
 800c002:	4413      	add	r3, r2
 800c004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	69ba      	ldr	r2, [r7, #24]
 800c00c:	0151      	lsls	r1, r2, #5
 800c00e:	69fa      	ldr	r2, [r7, #28]
 800c010:	440a      	add	r2, r1
 800c012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c016:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c01a:	6013      	str	r3, [r2, #0]
 800c01c:	e00f      	b.n	800c03e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c01e:	69bb      	ldr	r3, [r7, #24]
 800c020:	015a      	lsls	r2, r3, #5
 800c022:	69fb      	ldr	r3, [r7, #28]
 800c024:	4413      	add	r3, r2
 800c026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	69ba      	ldr	r2, [r7, #24]
 800c02e:	0151      	lsls	r1, r2, #5
 800c030:	69fa      	ldr	r2, [r7, #28]
 800c032:	440a      	add	r2, r1
 800c034:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c03c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	68d9      	ldr	r1, [r3, #12]
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	781a      	ldrb	r2, [r3, #0]
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	695b      	ldr	r3, [r3, #20]
 800c04a:	b298      	uxth	r0, r3
 800c04c:	79fb      	ldrb	r3, [r7, #7]
 800c04e:	9300      	str	r3, [sp, #0]
 800c050:	4603      	mov	r3, r0
 800c052:	68f8      	ldr	r0, [r7, #12]
 800c054:	f000 fa38 	bl	800c4c8 <USB_WritePacket>
 800c058:	e0d2      	b.n	800c200 <USB_EPStartXfer+0x480>
 800c05a:	bf00      	nop
 800c05c:	e007ffff 	.word	0xe007ffff
 800c060:	fff80000 	.word	0xfff80000
 800c064:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c068:	69bb      	ldr	r3, [r7, #24]
 800c06a:	015a      	lsls	r2, r3, #5
 800c06c:	69fb      	ldr	r3, [r7, #28]
 800c06e:	4413      	add	r3, r2
 800c070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c074:	691a      	ldr	r2, [r3, #16]
 800c076:	69bb      	ldr	r3, [r7, #24]
 800c078:	0159      	lsls	r1, r3, #5
 800c07a:	69fb      	ldr	r3, [r7, #28]
 800c07c:	440b      	add	r3, r1
 800c07e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c082:	4619      	mov	r1, r3
 800c084:	4b61      	ldr	r3, [pc, #388]	; (800c20c <USB_EPStartXfer+0x48c>)
 800c086:	4013      	ands	r3, r2
 800c088:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c08a:	69bb      	ldr	r3, [r7, #24]
 800c08c:	015a      	lsls	r2, r3, #5
 800c08e:	69fb      	ldr	r3, [r7, #28]
 800c090:	4413      	add	r3, r2
 800c092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c096:	691a      	ldr	r2, [r3, #16]
 800c098:	69bb      	ldr	r3, [r7, #24]
 800c09a:	0159      	lsls	r1, r3, #5
 800c09c:	69fb      	ldr	r3, [r7, #28]
 800c09e:	440b      	add	r3, r1
 800c0a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0a4:	4619      	mov	r1, r3
 800c0a6:	4b5a      	ldr	r3, [pc, #360]	; (800c210 <USB_EPStartXfer+0x490>)
 800c0a8:	4013      	ands	r3, r2
 800c0aa:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	695b      	ldr	r3, [r3, #20]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d123      	bne.n	800c0fc <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c0b4:	69bb      	ldr	r3, [r7, #24]
 800c0b6:	015a      	lsls	r2, r3, #5
 800c0b8:	69fb      	ldr	r3, [r7, #28]
 800c0ba:	4413      	add	r3, r2
 800c0bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0c0:	691a      	ldr	r2, [r3, #16]
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	689b      	ldr	r3, [r3, #8]
 800c0c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c0ca:	69b9      	ldr	r1, [r7, #24]
 800c0cc:	0148      	lsls	r0, r1, #5
 800c0ce:	69f9      	ldr	r1, [r7, #28]
 800c0d0:	4401      	add	r1, r0
 800c0d2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c0d6:	4313      	orrs	r3, r2
 800c0d8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c0da:	69bb      	ldr	r3, [r7, #24]
 800c0dc:	015a      	lsls	r2, r3, #5
 800c0de:	69fb      	ldr	r3, [r7, #28]
 800c0e0:	4413      	add	r3, r2
 800c0e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0e6:	691b      	ldr	r3, [r3, #16]
 800c0e8:	69ba      	ldr	r2, [r7, #24]
 800c0ea:	0151      	lsls	r1, r2, #5
 800c0ec:	69fa      	ldr	r2, [r7, #28]
 800c0ee:	440a      	add	r2, r1
 800c0f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c0f8:	6113      	str	r3, [r2, #16]
 800c0fa:	e033      	b.n	800c164 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	695a      	ldr	r2, [r3, #20]
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	689b      	ldr	r3, [r3, #8]
 800c104:	4413      	add	r3, r2
 800c106:	1e5a      	subs	r2, r3, #1
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	689b      	ldr	r3, [r3, #8]
 800c10c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c110:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c112:	69bb      	ldr	r3, [r7, #24]
 800c114:	015a      	lsls	r2, r3, #5
 800c116:	69fb      	ldr	r3, [r7, #28]
 800c118:	4413      	add	r3, r2
 800c11a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c11e:	691a      	ldr	r2, [r3, #16]
 800c120:	8afb      	ldrh	r3, [r7, #22]
 800c122:	04d9      	lsls	r1, r3, #19
 800c124:	4b3b      	ldr	r3, [pc, #236]	; (800c214 <USB_EPStartXfer+0x494>)
 800c126:	400b      	ands	r3, r1
 800c128:	69b9      	ldr	r1, [r7, #24]
 800c12a:	0148      	lsls	r0, r1, #5
 800c12c:	69f9      	ldr	r1, [r7, #28]
 800c12e:	4401      	add	r1, r0
 800c130:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c134:	4313      	orrs	r3, r2
 800c136:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800c138:	69bb      	ldr	r3, [r7, #24]
 800c13a:	015a      	lsls	r2, r3, #5
 800c13c:	69fb      	ldr	r3, [r7, #28]
 800c13e:	4413      	add	r3, r2
 800c140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c144:	691a      	ldr	r2, [r3, #16]
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	689b      	ldr	r3, [r3, #8]
 800c14a:	8af9      	ldrh	r1, [r7, #22]
 800c14c:	fb01 f303 	mul.w	r3, r1, r3
 800c150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c154:	69b9      	ldr	r1, [r7, #24]
 800c156:	0148      	lsls	r0, r1, #5
 800c158:	69f9      	ldr	r1, [r7, #28]
 800c15a:	4401      	add	r1, r0
 800c15c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c160:	4313      	orrs	r3, r2
 800c162:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c164:	79fb      	ldrb	r3, [r7, #7]
 800c166:	2b01      	cmp	r3, #1
 800c168:	d10d      	bne.n	800c186 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	68db      	ldr	r3, [r3, #12]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d009      	beq.n	800c186 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	68d9      	ldr	r1, [r3, #12]
 800c176:	69bb      	ldr	r3, [r7, #24]
 800c178:	015a      	lsls	r2, r3, #5
 800c17a:	69fb      	ldr	r3, [r7, #28]
 800c17c:	4413      	add	r3, r2
 800c17e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c182:	460a      	mov	r2, r1
 800c184:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	78db      	ldrb	r3, [r3, #3]
 800c18a:	2b01      	cmp	r3, #1
 800c18c:	d128      	bne.n	800c1e0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c18e:	69fb      	ldr	r3, [r7, #28]
 800c190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c194:	689b      	ldr	r3, [r3, #8]
 800c196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d110      	bne.n	800c1c0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c19e:	69bb      	ldr	r3, [r7, #24]
 800c1a0:	015a      	lsls	r2, r3, #5
 800c1a2:	69fb      	ldr	r3, [r7, #28]
 800c1a4:	4413      	add	r3, r2
 800c1a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	69ba      	ldr	r2, [r7, #24]
 800c1ae:	0151      	lsls	r1, r2, #5
 800c1b0:	69fa      	ldr	r2, [r7, #28]
 800c1b2:	440a      	add	r2, r1
 800c1b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c1bc:	6013      	str	r3, [r2, #0]
 800c1be:	e00f      	b.n	800c1e0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c1c0:	69bb      	ldr	r3, [r7, #24]
 800c1c2:	015a      	lsls	r2, r3, #5
 800c1c4:	69fb      	ldr	r3, [r7, #28]
 800c1c6:	4413      	add	r3, r2
 800c1c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	69ba      	ldr	r2, [r7, #24]
 800c1d0:	0151      	lsls	r1, r2, #5
 800c1d2:	69fa      	ldr	r2, [r7, #28]
 800c1d4:	440a      	add	r2, r1
 800c1d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c1de:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c1e0:	69bb      	ldr	r3, [r7, #24]
 800c1e2:	015a      	lsls	r2, r3, #5
 800c1e4:	69fb      	ldr	r3, [r7, #28]
 800c1e6:	4413      	add	r3, r2
 800c1e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	69ba      	ldr	r2, [r7, #24]
 800c1f0:	0151      	lsls	r1, r2, #5
 800c1f2:	69fa      	ldr	r2, [r7, #28]
 800c1f4:	440a      	add	r2, r1
 800c1f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c1fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c200:	2300      	movs	r3, #0
}
 800c202:	4618      	mov	r0, r3
 800c204:	3720      	adds	r7, #32
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}
 800c20a:	bf00      	nop
 800c20c:	fff80000 	.word	0xfff80000
 800c210:	e007ffff 	.word	0xe007ffff
 800c214:	1ff80000 	.word	0x1ff80000

0800c218 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c218:	b480      	push	{r7}
 800c21a:	b087      	sub	sp, #28
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	60f8      	str	r0, [r7, #12]
 800c220:	60b9      	str	r1, [r7, #8]
 800c222:	4613      	mov	r3, r2
 800c224:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	781b      	ldrb	r3, [r3, #0]
 800c22e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	785b      	ldrb	r3, [r3, #1]
 800c234:	2b01      	cmp	r3, #1
 800c236:	f040 80cd 	bne.w	800c3d4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	695b      	ldr	r3, [r3, #20]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d132      	bne.n	800c2a8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	015a      	lsls	r2, r3, #5
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	4413      	add	r3, r2
 800c24a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c24e:	691a      	ldr	r2, [r3, #16]
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	0159      	lsls	r1, r3, #5
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	440b      	add	r3, r1
 800c258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c25c:	4619      	mov	r1, r3
 800c25e:	4b98      	ldr	r3, [pc, #608]	; (800c4c0 <USB_EP0StartXfer+0x2a8>)
 800c260:	4013      	ands	r3, r2
 800c262:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	015a      	lsls	r2, r3, #5
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	4413      	add	r3, r2
 800c26c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c270:	691b      	ldr	r3, [r3, #16]
 800c272:	693a      	ldr	r2, [r7, #16]
 800c274:	0151      	lsls	r1, r2, #5
 800c276:	697a      	ldr	r2, [r7, #20]
 800c278:	440a      	add	r2, r1
 800c27a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c27e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c282:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	015a      	lsls	r2, r3, #5
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	4413      	add	r3, r2
 800c28c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c290:	691a      	ldr	r2, [r3, #16]
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	0159      	lsls	r1, r3, #5
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	440b      	add	r3, r1
 800c29a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c29e:	4619      	mov	r1, r3
 800c2a0:	4b88      	ldr	r3, [pc, #544]	; (800c4c4 <USB_EP0StartXfer+0x2ac>)
 800c2a2:	4013      	ands	r3, r2
 800c2a4:	610b      	str	r3, [r1, #16]
 800c2a6:	e04e      	b.n	800c346 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	015a      	lsls	r2, r3, #5
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	4413      	add	r3, r2
 800c2b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2b4:	691a      	ldr	r2, [r3, #16]
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	0159      	lsls	r1, r3, #5
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	440b      	add	r3, r1
 800c2be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2c2:	4619      	mov	r1, r3
 800c2c4:	4b7f      	ldr	r3, [pc, #508]	; (800c4c4 <USB_EP0StartXfer+0x2ac>)
 800c2c6:	4013      	ands	r3, r2
 800c2c8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	015a      	lsls	r2, r3, #5
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	4413      	add	r3, r2
 800c2d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2d6:	691a      	ldr	r2, [r3, #16]
 800c2d8:	693b      	ldr	r3, [r7, #16]
 800c2da:	0159      	lsls	r1, r3, #5
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	440b      	add	r3, r1
 800c2e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2e4:	4619      	mov	r1, r3
 800c2e6:	4b76      	ldr	r3, [pc, #472]	; (800c4c0 <USB_EP0StartXfer+0x2a8>)
 800c2e8:	4013      	ands	r3, r2
 800c2ea:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	695a      	ldr	r2, [r3, #20]
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	689b      	ldr	r3, [r3, #8]
 800c2f4:	429a      	cmp	r2, r3
 800c2f6:	d903      	bls.n	800c300 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	689a      	ldr	r2, [r3, #8]
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c300:	693b      	ldr	r3, [r7, #16]
 800c302:	015a      	lsls	r2, r3, #5
 800c304:	697b      	ldr	r3, [r7, #20]
 800c306:	4413      	add	r3, r2
 800c308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c30c:	691b      	ldr	r3, [r3, #16]
 800c30e:	693a      	ldr	r2, [r7, #16]
 800c310:	0151      	lsls	r1, r2, #5
 800c312:	697a      	ldr	r2, [r7, #20]
 800c314:	440a      	add	r2, r1
 800c316:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c31a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c31e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	015a      	lsls	r2, r3, #5
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	4413      	add	r3, r2
 800c328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c32c:	691a      	ldr	r2, [r3, #16]
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	695b      	ldr	r3, [r3, #20]
 800c332:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c336:	6939      	ldr	r1, [r7, #16]
 800c338:	0148      	lsls	r0, r1, #5
 800c33a:	6979      	ldr	r1, [r7, #20]
 800c33c:	4401      	add	r1, r0
 800c33e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c342:	4313      	orrs	r3, r2
 800c344:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c346:	79fb      	ldrb	r3, [r7, #7]
 800c348:	2b01      	cmp	r3, #1
 800c34a:	d11e      	bne.n	800c38a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	691b      	ldr	r3, [r3, #16]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d009      	beq.n	800c368 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	015a      	lsls	r2, r3, #5
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	4413      	add	r3, r2
 800c35c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c360:	461a      	mov	r2, r3
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	691b      	ldr	r3, [r3, #16]
 800c366:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	015a      	lsls	r2, r3, #5
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	4413      	add	r3, r2
 800c370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	693a      	ldr	r2, [r7, #16]
 800c378:	0151      	lsls	r1, r2, #5
 800c37a:	697a      	ldr	r2, [r7, #20]
 800c37c:	440a      	add	r2, r1
 800c37e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c382:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c386:	6013      	str	r3, [r2, #0]
 800c388:	e092      	b.n	800c4b0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c38a:	693b      	ldr	r3, [r7, #16]
 800c38c:	015a      	lsls	r2, r3, #5
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	4413      	add	r3, r2
 800c392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	693a      	ldr	r2, [r7, #16]
 800c39a:	0151      	lsls	r1, r2, #5
 800c39c:	697a      	ldr	r2, [r7, #20]
 800c39e:	440a      	add	r2, r1
 800c3a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c3a8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	695b      	ldr	r3, [r3, #20]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d07e      	beq.n	800c4b0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c3b2:	697b      	ldr	r3, [r7, #20]
 800c3b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	781b      	ldrb	r3, [r3, #0]
 800c3be:	f003 030f 	and.w	r3, r3, #15
 800c3c2:	2101      	movs	r1, #1
 800c3c4:	fa01 f303 	lsl.w	r3, r1, r3
 800c3c8:	6979      	ldr	r1, [r7, #20]
 800c3ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c3ce:	4313      	orrs	r3, r2
 800c3d0:	634b      	str	r3, [r1, #52]	; 0x34
 800c3d2:	e06d      	b.n	800c4b0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	015a      	lsls	r2, r3, #5
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	4413      	add	r3, r2
 800c3dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3e0:	691a      	ldr	r2, [r3, #16]
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	0159      	lsls	r1, r3, #5
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	440b      	add	r3, r1
 800c3ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3ee:	4619      	mov	r1, r3
 800c3f0:	4b34      	ldr	r3, [pc, #208]	; (800c4c4 <USB_EP0StartXfer+0x2ac>)
 800c3f2:	4013      	ands	r3, r2
 800c3f4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c3f6:	693b      	ldr	r3, [r7, #16]
 800c3f8:	015a      	lsls	r2, r3, #5
 800c3fa:	697b      	ldr	r3, [r7, #20]
 800c3fc:	4413      	add	r3, r2
 800c3fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c402:	691a      	ldr	r2, [r3, #16]
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	0159      	lsls	r1, r3, #5
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	440b      	add	r3, r1
 800c40c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c410:	4619      	mov	r1, r3
 800c412:	4b2b      	ldr	r3, [pc, #172]	; (800c4c0 <USB_EP0StartXfer+0x2a8>)
 800c414:	4013      	ands	r3, r2
 800c416:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	695b      	ldr	r3, [r3, #20]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d003      	beq.n	800c428 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	689a      	ldr	r2, [r3, #8]
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	015a      	lsls	r2, r3, #5
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	4413      	add	r3, r2
 800c430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c434:	691b      	ldr	r3, [r3, #16]
 800c436:	693a      	ldr	r2, [r7, #16]
 800c438:	0151      	lsls	r1, r2, #5
 800c43a:	697a      	ldr	r2, [r7, #20]
 800c43c:	440a      	add	r2, r1
 800c43e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c442:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c446:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800c448:	693b      	ldr	r3, [r7, #16]
 800c44a:	015a      	lsls	r2, r3, #5
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	4413      	add	r3, r2
 800c450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c454:	691a      	ldr	r2, [r3, #16]
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	689b      	ldr	r3, [r3, #8]
 800c45a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c45e:	6939      	ldr	r1, [r7, #16]
 800c460:	0148      	lsls	r0, r1, #5
 800c462:	6979      	ldr	r1, [r7, #20]
 800c464:	4401      	add	r1, r0
 800c466:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c46a:	4313      	orrs	r3, r2
 800c46c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c46e:	79fb      	ldrb	r3, [r7, #7]
 800c470:	2b01      	cmp	r3, #1
 800c472:	d10d      	bne.n	800c490 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	68db      	ldr	r3, [r3, #12]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d009      	beq.n	800c490 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	68d9      	ldr	r1, [r3, #12]
 800c480:	693b      	ldr	r3, [r7, #16]
 800c482:	015a      	lsls	r2, r3, #5
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	4413      	add	r3, r2
 800c488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c48c:	460a      	mov	r2, r1
 800c48e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	015a      	lsls	r2, r3, #5
 800c494:	697b      	ldr	r3, [r7, #20]
 800c496:	4413      	add	r3, r2
 800c498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	693a      	ldr	r2, [r7, #16]
 800c4a0:	0151      	lsls	r1, r2, #5
 800c4a2:	697a      	ldr	r2, [r7, #20]
 800c4a4:	440a      	add	r2, r1
 800c4a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c4ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c4b0:	2300      	movs	r3, #0
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	371c      	adds	r7, #28
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4bc:	4770      	bx	lr
 800c4be:	bf00      	nop
 800c4c0:	e007ffff 	.word	0xe007ffff
 800c4c4:	fff80000 	.word	0xfff80000

0800c4c8 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b089      	sub	sp, #36	; 0x24
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	60f8      	str	r0, [r7, #12]
 800c4d0:	60b9      	str	r1, [r7, #8]
 800c4d2:	4611      	mov	r1, r2
 800c4d4:	461a      	mov	r2, r3
 800c4d6:	460b      	mov	r3, r1
 800c4d8:	71fb      	strb	r3, [r7, #7]
 800c4da:	4613      	mov	r3, r2
 800c4dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800c4e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d11a      	bne.n	800c524 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c4ee:	88bb      	ldrh	r3, [r7, #4]
 800c4f0:	3303      	adds	r3, #3
 800c4f2:	089b      	lsrs	r3, r3, #2
 800c4f4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	61bb      	str	r3, [r7, #24]
 800c4fa:	e00f      	b.n	800c51c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c4fc:	79fb      	ldrb	r3, [r7, #7]
 800c4fe:	031a      	lsls	r2, r3, #12
 800c500:	697b      	ldr	r3, [r7, #20]
 800c502:	4413      	add	r3, r2
 800c504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c508:	461a      	mov	r2, r3
 800c50a:	69fb      	ldr	r3, [r7, #28]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c510:	69fb      	ldr	r3, [r7, #28]
 800c512:	3304      	adds	r3, #4
 800c514:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c516:	69bb      	ldr	r3, [r7, #24]
 800c518:	3301      	adds	r3, #1
 800c51a:	61bb      	str	r3, [r7, #24]
 800c51c:	69ba      	ldr	r2, [r7, #24]
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	429a      	cmp	r2, r3
 800c522:	d3eb      	bcc.n	800c4fc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c524:	2300      	movs	r3, #0
}
 800c526:	4618      	mov	r0, r3
 800c528:	3724      	adds	r7, #36	; 0x24
 800c52a:	46bd      	mov	sp, r7
 800c52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c530:	4770      	bx	lr

0800c532 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c532:	b480      	push	{r7}
 800c534:	b089      	sub	sp, #36	; 0x24
 800c536:	af00      	add	r7, sp, #0
 800c538:	60f8      	str	r0, [r7, #12]
 800c53a:	60b9      	str	r1, [r7, #8]
 800c53c:	4613      	mov	r3, r2
 800c53e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800c548:	88fb      	ldrh	r3, [r7, #6]
 800c54a:	3303      	adds	r3, #3
 800c54c:	089b      	lsrs	r3, r3, #2
 800c54e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800c550:	2300      	movs	r3, #0
 800c552:	61bb      	str	r3, [r7, #24]
 800c554:	e00b      	b.n	800c56e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c55c:	681a      	ldr	r2, [r3, #0]
 800c55e:	69fb      	ldr	r3, [r7, #28]
 800c560:	601a      	str	r2, [r3, #0]
    pDest++;
 800c562:	69fb      	ldr	r3, [r7, #28]
 800c564:	3304      	adds	r3, #4
 800c566:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c568:	69bb      	ldr	r3, [r7, #24]
 800c56a:	3301      	adds	r3, #1
 800c56c:	61bb      	str	r3, [r7, #24]
 800c56e:	69ba      	ldr	r2, [r7, #24]
 800c570:	693b      	ldr	r3, [r7, #16]
 800c572:	429a      	cmp	r2, r3
 800c574:	d3ef      	bcc.n	800c556 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800c576:	69fb      	ldr	r3, [r7, #28]
}
 800c578:	4618      	mov	r0, r3
 800c57a:	3724      	adds	r7, #36	; 0x24
 800c57c:	46bd      	mov	sp, r7
 800c57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c582:	4770      	bx	lr

0800c584 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c584:	b480      	push	{r7}
 800c586:	b085      	sub	sp, #20
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	781b      	ldrb	r3, [r3, #0]
 800c596:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	785b      	ldrb	r3, [r3, #1]
 800c59c:	2b01      	cmp	r3, #1
 800c59e:	d12c      	bne.n	800c5fa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	015a      	lsls	r2, r3, #5
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	4413      	add	r3, r2
 800c5a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	db12      	blt.n	800c5d8 <USB_EPSetStall+0x54>
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d00f      	beq.n	800c5d8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	015a      	lsls	r2, r3, #5
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	4413      	add	r3, r2
 800c5c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	68ba      	ldr	r2, [r7, #8]
 800c5c8:	0151      	lsls	r1, r2, #5
 800c5ca:	68fa      	ldr	r2, [r7, #12]
 800c5cc:	440a      	add	r2, r1
 800c5ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c5d6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	015a      	lsls	r2, r3, #5
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	4413      	add	r3, r2
 800c5e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	68ba      	ldr	r2, [r7, #8]
 800c5e8:	0151      	lsls	r1, r2, #5
 800c5ea:	68fa      	ldr	r2, [r7, #12]
 800c5ec:	440a      	add	r2, r1
 800c5ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c5f6:	6013      	str	r3, [r2, #0]
 800c5f8:	e02b      	b.n	800c652 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c5fa:	68bb      	ldr	r3, [r7, #8]
 800c5fc:	015a      	lsls	r2, r3, #5
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	4413      	add	r3, r2
 800c602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	db12      	blt.n	800c632 <USB_EPSetStall+0xae>
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d00f      	beq.n	800c632 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	015a      	lsls	r2, r3, #5
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	4413      	add	r3, r2
 800c61a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	68ba      	ldr	r2, [r7, #8]
 800c622:	0151      	lsls	r1, r2, #5
 800c624:	68fa      	ldr	r2, [r7, #12]
 800c626:	440a      	add	r2, r1
 800c628:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c62c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c630:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	015a      	lsls	r2, r3, #5
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	4413      	add	r3, r2
 800c63a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	68ba      	ldr	r2, [r7, #8]
 800c642:	0151      	lsls	r1, r2, #5
 800c644:	68fa      	ldr	r2, [r7, #12]
 800c646:	440a      	add	r2, r1
 800c648:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c64c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c650:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c652:	2300      	movs	r3, #0
}
 800c654:	4618      	mov	r0, r3
 800c656:	3714      	adds	r7, #20
 800c658:	46bd      	mov	sp, r7
 800c65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65e:	4770      	bx	lr

0800c660 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c660:	b480      	push	{r7}
 800c662:	b085      	sub	sp, #20
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	781b      	ldrb	r3, [r3, #0]
 800c672:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	785b      	ldrb	r3, [r3, #1]
 800c678:	2b01      	cmp	r3, #1
 800c67a:	d128      	bne.n	800c6ce <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	015a      	lsls	r2, r3, #5
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	4413      	add	r3, r2
 800c684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	68ba      	ldr	r2, [r7, #8]
 800c68c:	0151      	lsls	r1, r2, #5
 800c68e:	68fa      	ldr	r2, [r7, #12]
 800c690:	440a      	add	r2, r1
 800c692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c696:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c69a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	78db      	ldrb	r3, [r3, #3]
 800c6a0:	2b03      	cmp	r3, #3
 800c6a2:	d003      	beq.n	800c6ac <USB_EPClearStall+0x4c>
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	78db      	ldrb	r3, [r3, #3]
 800c6a8:	2b02      	cmp	r3, #2
 800c6aa:	d138      	bne.n	800c71e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	015a      	lsls	r2, r3, #5
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	4413      	add	r3, r2
 800c6b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	68ba      	ldr	r2, [r7, #8]
 800c6bc:	0151      	lsls	r1, r2, #5
 800c6be:	68fa      	ldr	r2, [r7, #12]
 800c6c0:	440a      	add	r2, r1
 800c6c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c6ca:	6013      	str	r3, [r2, #0]
 800c6cc:	e027      	b.n	800c71e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	015a      	lsls	r2, r3, #5
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	4413      	add	r3, r2
 800c6d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	68ba      	ldr	r2, [r7, #8]
 800c6de:	0151      	lsls	r1, r2, #5
 800c6e0:	68fa      	ldr	r2, [r7, #12]
 800c6e2:	440a      	add	r2, r1
 800c6e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c6ec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	78db      	ldrb	r3, [r3, #3]
 800c6f2:	2b03      	cmp	r3, #3
 800c6f4:	d003      	beq.n	800c6fe <USB_EPClearStall+0x9e>
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	78db      	ldrb	r3, [r3, #3]
 800c6fa:	2b02      	cmp	r3, #2
 800c6fc:	d10f      	bne.n	800c71e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	015a      	lsls	r2, r3, #5
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	4413      	add	r3, r2
 800c706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	68ba      	ldr	r2, [r7, #8]
 800c70e:	0151      	lsls	r1, r2, #5
 800c710:	68fa      	ldr	r2, [r7, #12]
 800c712:	440a      	add	r2, r1
 800c714:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c71c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c71e:	2300      	movs	r3, #0
}
 800c720:	4618      	mov	r0, r3
 800c722:	3714      	adds	r7, #20
 800c724:	46bd      	mov	sp, r7
 800c726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72a:	4770      	bx	lr

0800c72c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c72c:	b480      	push	{r7}
 800c72e:	b085      	sub	sp, #20
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
 800c734:	460b      	mov	r3, r1
 800c736:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	68fa      	ldr	r2, [r7, #12]
 800c746:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c74a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c74e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c756:	681a      	ldr	r2, [r3, #0]
 800c758:	78fb      	ldrb	r3, [r7, #3]
 800c75a:	011b      	lsls	r3, r3, #4
 800c75c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c760:	68f9      	ldr	r1, [r7, #12]
 800c762:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c766:	4313      	orrs	r3, r2
 800c768:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c76a:	2300      	movs	r3, #0
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3714      	adds	r7, #20
 800c770:	46bd      	mov	sp, r7
 800c772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c776:	4770      	bx	lr

0800c778 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b084      	sub	sp, #16
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c78a:	685b      	ldr	r3, [r3, #4]
 800c78c:	68fa      	ldr	r2, [r7, #12]
 800c78e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c792:	f023 0302 	bic.w	r3, r3, #2
 800c796:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c798:	2003      	movs	r0, #3
 800c79a:	f7f4 ff07 	bl	80015ac <HAL_Delay>

  return HAL_OK;
 800c79e:	2300      	movs	r3, #0
}
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	3710      	adds	r7, #16
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}

0800c7a8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b084      	sub	sp, #16
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7ba:	685b      	ldr	r3, [r3, #4]
 800c7bc:	68fa      	ldr	r2, [r7, #12]
 800c7be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c7c2:	f043 0302 	orr.w	r3, r3, #2
 800c7c6:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c7c8:	2003      	movs	r0, #3
 800c7ca:	f7f4 feef 	bl	80015ac <HAL_Delay>

  return HAL_OK;
 800c7ce:	2300      	movs	r3, #0
}
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	3710      	adds	r7, #16
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}

0800c7d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c7d8:	b480      	push	{r7}
 800c7da:	b085      	sub	sp, #20
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	695b      	ldr	r3, [r3, #20]
 800c7e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	699b      	ldr	r3, [r3, #24]
 800c7ea:	68fa      	ldr	r2, [r7, #12]
 800c7ec:	4013      	ands	r3, r2
 800c7ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3714      	adds	r7, #20
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fc:	4770      	bx	lr

0800c7fe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c7fe:	b480      	push	{r7}
 800c800:	b085      	sub	sp, #20
 800c802:	af00      	add	r7, sp, #0
 800c804:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c810:	699b      	ldr	r3, [r3, #24]
 800c812:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c81a:	69db      	ldr	r3, [r3, #28]
 800c81c:	68ba      	ldr	r2, [r7, #8]
 800c81e:	4013      	ands	r3, r2
 800c820:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	0c1b      	lsrs	r3, r3, #16
}
 800c826:	4618      	mov	r0, r3
 800c828:	3714      	adds	r7, #20
 800c82a:	46bd      	mov	sp, r7
 800c82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c830:	4770      	bx	lr

0800c832 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c832:	b480      	push	{r7}
 800c834:	b085      	sub	sp, #20
 800c836:	af00      	add	r7, sp, #0
 800c838:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c844:	699b      	ldr	r3, [r3, #24]
 800c846:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c84e:	69db      	ldr	r3, [r3, #28]
 800c850:	68ba      	ldr	r2, [r7, #8]
 800c852:	4013      	ands	r3, r2
 800c854:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	b29b      	uxth	r3, r3
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3714      	adds	r7, #20
 800c85e:	46bd      	mov	sp, r7
 800c860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c864:	4770      	bx	lr

0800c866 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c866:	b480      	push	{r7}
 800c868:	b085      	sub	sp, #20
 800c86a:	af00      	add	r7, sp, #0
 800c86c:	6078      	str	r0, [r7, #4]
 800c86e:	460b      	mov	r3, r1
 800c870:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c876:	78fb      	ldrb	r3, [r7, #3]
 800c878:	015a      	lsls	r2, r3, #5
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	4413      	add	r3, r2
 800c87e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c882:	689b      	ldr	r3, [r3, #8]
 800c884:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c88c:	695b      	ldr	r3, [r3, #20]
 800c88e:	68ba      	ldr	r2, [r7, #8]
 800c890:	4013      	ands	r3, r2
 800c892:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c894:	68bb      	ldr	r3, [r7, #8]
}
 800c896:	4618      	mov	r0, r3
 800c898:	3714      	adds	r7, #20
 800c89a:	46bd      	mov	sp, r7
 800c89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a0:	4770      	bx	lr

0800c8a2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c8a2:	b480      	push	{r7}
 800c8a4:	b087      	sub	sp, #28
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	6078      	str	r0, [r7, #4]
 800c8aa:	460b      	mov	r3, r1
 800c8ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8b8:	691b      	ldr	r3, [r3, #16]
 800c8ba:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8c4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c8c6:	78fb      	ldrb	r3, [r7, #3]
 800c8c8:	f003 030f 	and.w	r3, r3, #15
 800c8cc:	68fa      	ldr	r2, [r7, #12]
 800c8ce:	fa22 f303 	lsr.w	r3, r2, r3
 800c8d2:	01db      	lsls	r3, r3, #7
 800c8d4:	b2db      	uxtb	r3, r3
 800c8d6:	693a      	ldr	r2, [r7, #16]
 800c8d8:	4313      	orrs	r3, r2
 800c8da:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c8dc:	78fb      	ldrb	r3, [r7, #3]
 800c8de:	015a      	lsls	r2, r3, #5
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	4413      	add	r3, r2
 800c8e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8e8:	689b      	ldr	r3, [r3, #8]
 800c8ea:	693a      	ldr	r2, [r7, #16]
 800c8ec:	4013      	ands	r3, r2
 800c8ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c8f0:	68bb      	ldr	r3, [r7, #8]
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	371c      	adds	r7, #28
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fc:	4770      	bx	lr

0800c8fe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c8fe:	b480      	push	{r7}
 800c900:	b083      	sub	sp, #12
 800c902:	af00      	add	r7, sp, #0
 800c904:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	695b      	ldr	r3, [r3, #20]
 800c90a:	f003 0301 	and.w	r3, r3, #1
}
 800c90e:	4618      	mov	r0, r3
 800c910:	370c      	adds	r7, #12
 800c912:	46bd      	mov	sp, r7
 800c914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c918:	4770      	bx	lr
	...

0800c91c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c91c:	b480      	push	{r7}
 800c91e:	b085      	sub	sp, #20
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c92e:	681a      	ldr	r2, [r3, #0]
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c936:	4619      	mov	r1, r3
 800c938:	4b09      	ldr	r3, [pc, #36]	; (800c960 <USB_ActivateSetup+0x44>)
 800c93a:	4013      	ands	r3, r2
 800c93c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c944:	685b      	ldr	r3, [r3, #4]
 800c946:	68fa      	ldr	r2, [r7, #12]
 800c948:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c94c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c950:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c952:	2300      	movs	r3, #0
}
 800c954:	4618      	mov	r0, r3
 800c956:	3714      	adds	r7, #20
 800c958:	46bd      	mov	sp, r7
 800c95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95e:	4770      	bx	lr
 800c960:	fffff800 	.word	0xfffff800

0800c964 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c964:	b480      	push	{r7}
 800c966:	b087      	sub	sp, #28
 800c968:	af00      	add	r7, sp, #0
 800c96a:	60f8      	str	r0, [r7, #12]
 800c96c:	460b      	mov	r3, r1
 800c96e:	607a      	str	r2, [r7, #4]
 800c970:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	333c      	adds	r3, #60	; 0x3c
 800c97a:	3304      	adds	r3, #4
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	4a26      	ldr	r2, [pc, #152]	; (800ca1c <USB_EP0_OutStart+0xb8>)
 800c984:	4293      	cmp	r3, r2
 800c986:	d90a      	bls.n	800c99e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c994:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c998:	d101      	bne.n	800c99e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c99a:	2300      	movs	r3, #0
 800c99c:	e037      	b.n	800ca0e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c99e:	697b      	ldr	r3, [r7, #20]
 800c9a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9a4:	461a      	mov	r2, r3
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9b0:	691b      	ldr	r3, [r3, #16]
 800c9b2:	697a      	ldr	r2, [r7, #20]
 800c9b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c9bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9c4:	691b      	ldr	r3, [r3, #16]
 800c9c6:	697a      	ldr	r2, [r7, #20]
 800c9c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9cc:	f043 0318 	orr.w	r3, r3, #24
 800c9d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9d8:	691b      	ldr	r3, [r3, #16]
 800c9da:	697a      	ldr	r2, [r7, #20]
 800c9dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9e0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c9e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c9e6:	7afb      	ldrb	r3, [r7, #11]
 800c9e8:	2b01      	cmp	r3, #1
 800c9ea:	d10f      	bne.n	800ca0c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c9ec:	697b      	ldr	r3, [r7, #20]
 800c9ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9f2:	461a      	mov	r2, r3
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	697a      	ldr	r2, [r7, #20]
 800ca02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca06:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ca0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ca0c:	2300      	movs	r3, #0
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	371c      	adds	r7, #28
 800ca12:	46bd      	mov	sp, r7
 800ca14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca18:	4770      	bx	lr
 800ca1a:	bf00      	nop
 800ca1c:	4f54300a 	.word	0x4f54300a

0800ca20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ca20:	b480      	push	{r7}
 800ca22:	b085      	sub	sp, #20
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	3301      	adds	r3, #1
 800ca30:	60fb      	str	r3, [r7, #12]
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	4a13      	ldr	r2, [pc, #76]	; (800ca84 <USB_CoreReset+0x64>)
 800ca36:	4293      	cmp	r3, r2
 800ca38:	d901      	bls.n	800ca3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ca3a:	2303      	movs	r3, #3
 800ca3c:	e01b      	b.n	800ca76 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	691b      	ldr	r3, [r3, #16]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	daf2      	bge.n	800ca2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ca46:	2300      	movs	r3, #0
 800ca48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	691b      	ldr	r3, [r3, #16]
 800ca4e:	f043 0201 	orr.w	r2, r3, #1
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	3301      	adds	r3, #1
 800ca5a:	60fb      	str	r3, [r7, #12]
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	4a09      	ldr	r2, [pc, #36]	; (800ca84 <USB_CoreReset+0x64>)
 800ca60:	4293      	cmp	r3, r2
 800ca62:	d901      	bls.n	800ca68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ca64:	2303      	movs	r3, #3
 800ca66:	e006      	b.n	800ca76 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	691b      	ldr	r3, [r3, #16]
 800ca6c:	f003 0301 	and.w	r3, r3, #1
 800ca70:	2b01      	cmp	r3, #1
 800ca72:	d0f0      	beq.n	800ca56 <USB_CoreReset+0x36>

  return HAL_OK;
 800ca74:	2300      	movs	r3, #0
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	3714      	adds	r7, #20
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca80:	4770      	bx	lr
 800ca82:	bf00      	nop
 800ca84:	00030d40 	.word	0x00030d40

0800ca88 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ca8c:	4904      	ldr	r1, [pc, #16]	; (800caa0 <MX_FATFS_Init+0x18>)
 800ca8e:	4805      	ldr	r0, [pc, #20]	; (800caa4 <MX_FATFS_Init+0x1c>)
 800ca90:	f005 f8b2 	bl	8011bf8 <FATFS_LinkDriver>
 800ca94:	4603      	mov	r3, r0
 800ca96:	461a      	mov	r2, r3
 800ca98:	4b03      	ldr	r3, [pc, #12]	; (800caa8 <MX_FATFS_Init+0x20>)
 800ca9a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ca9c:	bf00      	nop
 800ca9e:	bd80      	pop	{r7, pc}
 800caa0:	24000a74 	.word	0x24000a74
 800caa4:	08012910 	.word	0x08012910
 800caa8:	24000a70 	.word	0x24000a70

0800caac <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800caac:	b480      	push	{r7}
 800caae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800cab0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	46bd      	mov	sp, r7
 800cab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caba:	4770      	bx	lr

0800cabc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b082      	sub	sp, #8
 800cac0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800cac2:	2300      	movs	r3, #0
 800cac4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800cac6:	f000 f879 	bl	800cbbc <BSP_SD_IsDetected>
 800caca:	4603      	mov	r3, r0
 800cacc:	2b01      	cmp	r3, #1
 800cace:	d001      	beq.n	800cad4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800cad0:	2302      	movs	r3, #2
 800cad2:	e012      	b.n	800cafa <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800cad4:	480b      	ldr	r0, [pc, #44]	; (800cb04 <BSP_SD_Init+0x48>)
 800cad6:	f7fb f977 	bl	8007dc8 <HAL_SD_Init>
 800cada:	4603      	mov	r3, r0
 800cadc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800cade:	79fb      	ldrb	r3, [r7, #7]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d109      	bne.n	800caf8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800cae4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800cae8:	4806      	ldr	r0, [pc, #24]	; (800cb04 <BSP_SD_Init+0x48>)
 800caea:	f7fc f83b 	bl	8008b64 <HAL_SD_ConfigWideBusOperation>
 800caee:	4603      	mov	r3, r0
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d001      	beq.n	800caf8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800caf4:	2301      	movs	r3, #1
 800caf6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800caf8:	79fb      	ldrb	r3, [r7, #7]
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3708      	adds	r7, #8
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}
 800cb02:	bf00      	nop
 800cb04:	24000564 	.word	0x24000564

0800cb08 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b088      	sub	sp, #32
 800cb0c:	af02      	add	r7, sp, #8
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	60b9      	str	r1, [r7, #8]
 800cb12:	607a      	str	r2, [r7, #4]
 800cb14:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800cb16:	2300      	movs	r3, #0
 800cb18:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	9300      	str	r3, [sp, #0]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	68ba      	ldr	r2, [r7, #8]
 800cb22:	68f9      	ldr	r1, [r7, #12]
 800cb24:	4806      	ldr	r0, [pc, #24]	; (800cb40 <BSP_SD_ReadBlocks+0x38>)
 800cb26:	f7fb fa73 	bl	8008010 <HAL_SD_ReadBlocks>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d001      	beq.n	800cb34 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800cb30:	2301      	movs	r3, #1
 800cb32:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cb34:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	3718      	adds	r7, #24
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}
 800cb3e:	bf00      	nop
 800cb40:	24000564 	.word	0x24000564

0800cb44 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b088      	sub	sp, #32
 800cb48:	af02      	add	r7, sp, #8
 800cb4a:	60f8      	str	r0, [r7, #12]
 800cb4c:	60b9      	str	r1, [r7, #8]
 800cb4e:	607a      	str	r2, [r7, #4]
 800cb50:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800cb52:	2300      	movs	r3, #0
 800cb54:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	9300      	str	r3, [sp, #0]
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	68ba      	ldr	r2, [r7, #8]
 800cb5e:	68f9      	ldr	r1, [r7, #12]
 800cb60:	4806      	ldr	r0, [pc, #24]	; (800cb7c <BSP_SD_WriteBlocks+0x38>)
 800cb62:	f7fb fbdf 	bl	8008324 <HAL_SD_WriteBlocks>
 800cb66:	4603      	mov	r3, r0
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d001      	beq.n	800cb70 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cb70:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3718      	adds	r7, #24
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}
 800cb7a:	bf00      	nop
 800cb7c:	24000564 	.word	0x24000564

0800cb80 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800cb84:	4805      	ldr	r0, [pc, #20]	; (800cb9c <BSP_SD_GetCardState+0x1c>)
 800cb86:	f7fc f897 	bl	8008cb8 <HAL_SD_GetCardState>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	2b04      	cmp	r3, #4
 800cb8e:	bf14      	ite	ne
 800cb90:	2301      	movne	r3, #1
 800cb92:	2300      	moveq	r3, #0
 800cb94:	b2db      	uxtb	r3, r3
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	bd80      	pop	{r7, pc}
 800cb9a:	bf00      	nop
 800cb9c:	24000564 	.word	0x24000564

0800cba0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b082      	sub	sp, #8
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800cba8:	6879      	ldr	r1, [r7, #4]
 800cbaa:	4803      	ldr	r0, [pc, #12]	; (800cbb8 <BSP_SD_GetCardInfo+0x18>)
 800cbac:	f7fb ffae 	bl	8008b0c <HAL_SD_GetCardInfo>
}
 800cbb0:	bf00      	nop
 800cbb2:	3708      	adds	r7, #8
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}
 800cbb8:	24000564 	.word	0x24000564

0800cbbc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800cbc6:	f000 f80b 	bl	800cbe0 <BSP_PlatformIsDetected>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d101      	bne.n	800cbd4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800cbd4:	79fb      	ldrb	r3, [r7, #7]
 800cbd6:	b2db      	uxtb	r3, r3
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	3708      	adds	r7, #8
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}

0800cbe0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b082      	sub	sp, #8
 800cbe4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800cbea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cbee:	4806      	ldr	r0, [pc, #24]	; (800cc08 <BSP_PlatformIsDetected+0x28>)
 800cbf0:	f7f6 fff4 	bl	8003bdc <HAL_GPIO_ReadPin>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d001      	beq.n	800cbfe <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800cbfe:	79fb      	ldrb	r3, [r7, #7]
}
 800cc00:	4618      	mov	r0, r3
 800cc02:	3708      	adds	r7, #8
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bd80      	pop	{r7, pc}
 800cc08:	58020000 	.word	0x58020000

0800cc0c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b082      	sub	sp, #8
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	4603      	mov	r3, r0
 800cc14:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800cc16:	4b0b      	ldr	r3, [pc, #44]	; (800cc44 <SD_CheckStatus+0x38>)
 800cc18:	2201      	movs	r2, #1
 800cc1a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800cc1c:	f7ff ffb0 	bl	800cb80 <BSP_SD_GetCardState>
 800cc20:	4603      	mov	r3, r0
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d107      	bne.n	800cc36 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800cc26:	4b07      	ldr	r3, [pc, #28]	; (800cc44 <SD_CheckStatus+0x38>)
 800cc28:	781b      	ldrb	r3, [r3, #0]
 800cc2a:	b2db      	uxtb	r3, r3
 800cc2c:	f023 0301 	bic.w	r3, r3, #1
 800cc30:	b2da      	uxtb	r2, r3
 800cc32:	4b04      	ldr	r3, [pc, #16]	; (800cc44 <SD_CheckStatus+0x38>)
 800cc34:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800cc36:	4b03      	ldr	r3, [pc, #12]	; (800cc44 <SD_CheckStatus+0x38>)
 800cc38:	781b      	ldrb	r3, [r3, #0]
 800cc3a:	b2db      	uxtb	r3, r3
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3708      	adds	r7, #8
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}
 800cc44:	2400000d 	.word	0x2400000d

0800cc48 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	4603      	mov	r3, r0
 800cc50:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800cc52:	4b0b      	ldr	r3, [pc, #44]	; (800cc80 <SD_initialize+0x38>)
 800cc54:	2201      	movs	r2, #1
 800cc56:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800cc58:	f7ff ff30 	bl	800cabc <BSP_SD_Init>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d107      	bne.n	800cc72 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800cc62:	79fb      	ldrb	r3, [r7, #7]
 800cc64:	4618      	mov	r0, r3
 800cc66:	f7ff ffd1 	bl	800cc0c <SD_CheckStatus>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	461a      	mov	r2, r3
 800cc6e:	4b04      	ldr	r3, [pc, #16]	; (800cc80 <SD_initialize+0x38>)
 800cc70:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800cc72:	4b03      	ldr	r3, [pc, #12]	; (800cc80 <SD_initialize+0x38>)
 800cc74:	781b      	ldrb	r3, [r3, #0]
 800cc76:	b2db      	uxtb	r3, r3
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3708      	adds	r7, #8
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}
 800cc80:	2400000d 	.word	0x2400000d

0800cc84 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b082      	sub	sp, #8
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800cc8e:	79fb      	ldrb	r3, [r7, #7]
 800cc90:	4618      	mov	r0, r3
 800cc92:	f7ff ffbb 	bl	800cc0c <SD_CheckStatus>
 800cc96:	4603      	mov	r3, r0
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3708      	adds	r7, #8
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}

0800cca0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b086      	sub	sp, #24
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	60b9      	str	r1, [r7, #8]
 800cca8:	607a      	str	r2, [r7, #4]
 800ccaa:	603b      	str	r3, [r7, #0]
 800ccac:	4603      	mov	r3, r0
 800ccae:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800ccb4:	f04f 33ff 	mov.w	r3, #4294967295
 800ccb8:	683a      	ldr	r2, [r7, #0]
 800ccba:	6879      	ldr	r1, [r7, #4]
 800ccbc:	68b8      	ldr	r0, [r7, #8]
 800ccbe:	f7ff ff23 	bl	800cb08 <BSP_SD_ReadBlocks>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d107      	bne.n	800ccd8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800ccc8:	bf00      	nop
 800ccca:	f7ff ff59 	bl	800cb80 <BSP_SD_GetCardState>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d1fa      	bne.n	800ccca <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ccd8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3718      	adds	r7, #24
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}

0800cce2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800cce2:	b580      	push	{r7, lr}
 800cce4:	b086      	sub	sp, #24
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	60b9      	str	r1, [r7, #8]
 800ccea:	607a      	str	r2, [r7, #4]
 800ccec:	603b      	str	r3, [r7, #0]
 800ccee:	4603      	mov	r3, r0
 800ccf0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ccf2:	2301      	movs	r3, #1
 800ccf4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800ccf6:	f04f 33ff 	mov.w	r3, #4294967295
 800ccfa:	683a      	ldr	r2, [r7, #0]
 800ccfc:	6879      	ldr	r1, [r7, #4]
 800ccfe:	68b8      	ldr	r0, [r7, #8]
 800cd00:	f7ff ff20 	bl	800cb44 <BSP_SD_WriteBlocks>
 800cd04:	4603      	mov	r3, r0
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d107      	bne.n	800cd1a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800cd0a:	bf00      	nop
 800cd0c:	f7ff ff38 	bl	800cb80 <BSP_SD_GetCardState>
 800cd10:	4603      	mov	r3, r0
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d1fa      	bne.n	800cd0c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800cd16:	2300      	movs	r3, #0
 800cd18:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800cd1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3718      	adds	r7, #24
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}

0800cd24 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b08c      	sub	sp, #48	; 0x30
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	603a      	str	r2, [r7, #0]
 800cd2e:	71fb      	strb	r3, [r7, #7]
 800cd30:	460b      	mov	r3, r1
 800cd32:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800cd34:	2301      	movs	r3, #1
 800cd36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cd3a:	4b25      	ldr	r3, [pc, #148]	; (800cdd0 <SD_ioctl+0xac>)
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	b2db      	uxtb	r3, r3
 800cd40:	f003 0301 	and.w	r3, r3, #1
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d001      	beq.n	800cd4c <SD_ioctl+0x28>
 800cd48:	2303      	movs	r3, #3
 800cd4a:	e03c      	b.n	800cdc6 <SD_ioctl+0xa2>

  switch (cmd)
 800cd4c:	79bb      	ldrb	r3, [r7, #6]
 800cd4e:	2b03      	cmp	r3, #3
 800cd50:	d834      	bhi.n	800cdbc <SD_ioctl+0x98>
 800cd52:	a201      	add	r2, pc, #4	; (adr r2, 800cd58 <SD_ioctl+0x34>)
 800cd54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd58:	0800cd69 	.word	0x0800cd69
 800cd5c:	0800cd71 	.word	0x0800cd71
 800cd60:	0800cd89 	.word	0x0800cd89
 800cd64:	0800cda3 	.word	0x0800cda3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cd68:	2300      	movs	r3, #0
 800cd6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cd6e:	e028      	b.n	800cdc2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cd70:	f107 0308 	add.w	r3, r7, #8
 800cd74:	4618      	mov	r0, r3
 800cd76:	f7ff ff13 	bl	800cba0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cd7a:	6a3a      	ldr	r2, [r7, #32]
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cd80:	2300      	movs	r3, #0
 800cd82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cd86:	e01c      	b.n	800cdc2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cd88:	f107 0308 	add.w	r3, r7, #8
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f7ff ff07 	bl	800cba0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd94:	b29a      	uxth	r2, r3
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cda0:	e00f      	b.n	800cdc2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cda2:	f107 0308 	add.w	r3, r7, #8
 800cda6:	4618      	mov	r0, r3
 800cda8:	f7ff fefa 	bl	800cba0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cdac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdae:	0a5a      	lsrs	r2, r3, #9
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cdba:	e002      	b.n	800cdc2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cdbc:	2304      	movs	r3, #4
 800cdbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800cdc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	3730      	adds	r7, #48	; 0x30
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}
 800cdce:	bf00      	nop
 800cdd0:	2400000d 	.word	0x2400000d

0800cdd4 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b084      	sub	sp, #16
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	460b      	mov	r3, r1
 800cdde:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800cde0:	f44f 701d 	mov.w	r0, #628	; 0x274
 800cde4:	f005 fc04 	bl	80125f0 <malloc>
 800cde8:	4603      	mov	r3, r0
 800cdea:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d105      	bne.n	800cdfe <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800cdfa:	2302      	movs	r3, #2
 800cdfc:	e034      	b.n	800ce68 <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	68fa      	ldr	r2, [r7, #12]
 800ce02:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	7c1b      	ldrb	r3, [r3, #16]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d115      	bne.n	800ce3a <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800ce0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ce12:	2202      	movs	r2, #2
 800ce14:	2101      	movs	r1, #1
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	f005 fa51 	bl	80122be <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2201      	movs	r2, #1
 800ce20:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800ce24:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ce28:	2202      	movs	r2, #2
 800ce2a:	2181      	movs	r1, #129	; 0x81
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	f005 fa46 	bl	80122be <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	2201      	movs	r2, #1
 800ce36:	871a      	strh	r2, [r3, #56]	; 0x38
 800ce38:	e012      	b.n	800ce60 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800ce3a:	2340      	movs	r3, #64	; 0x40
 800ce3c:	2202      	movs	r2, #2
 800ce3e:	2101      	movs	r1, #1
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f005 fa3c 	bl	80122be <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2201      	movs	r2, #1
 800ce4a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800ce4e:	2340      	movs	r3, #64	; 0x40
 800ce50:	2202      	movs	r2, #2
 800ce52:	2181      	movs	r1, #129	; 0x81
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f005 fa32 	bl	80122be <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2201      	movs	r2, #1
 800ce5e:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f000 f98e 	bl	800d182 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800ce66:	2300      	movs	r3, #0
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3710      	adds	r7, #16
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd80      	pop	{r7, pc}

0800ce70 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b082      	sub	sp, #8
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	460b      	mov	r3, r1
 800ce7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800ce7c:	2101      	movs	r1, #1
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f005 fa43 	bl	801230a <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2200      	movs	r2, #0
 800ce88:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800ce8c:	2181      	movs	r1, #129	; 0x81
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f005 fa3b 	bl	801230a <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2200      	movs	r2, #0
 800ce98:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	f000 f9c7 	bl	800d22e <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d009      	beq.n	800cebe <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	f005 fba5 	bl	8012600 <free>
    pdev->pClassData = NULL;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2200      	movs	r2, #0
 800ceba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cebe:	2300      	movs	r3, #0
}
 800cec0:	4618      	mov	r0, r3
 800cec2:	3708      	adds	r7, #8
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}

0800cec8 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b086      	sub	sp, #24
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
 800ced0:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ced8:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800ceda:	2300      	movs	r3, #0
 800cedc:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800cede:	2300      	movs	r3, #0
 800cee0:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	781b      	ldrb	r3, [r3, #0]
 800cee6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d04d      	beq.n	800cf8a <USBD_MSC_Setup+0xc2>
 800ceee:	2b20      	cmp	r3, #32
 800cef0:	f040 80c6 	bne.w	800d080 <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	785b      	ldrb	r3, [r3, #1]
 800cef8:	2bfe      	cmp	r3, #254	; 0xfe
 800cefa:	d002      	beq.n	800cf02 <USBD_MSC_Setup+0x3a>
 800cefc:	2bff      	cmp	r3, #255	; 0xff
 800cefe:	d024      	beq.n	800cf4a <USBD_MSC_Setup+0x82>
 800cf00:	e03b      	b.n	800cf7a <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	885b      	ldrh	r3, [r3, #2]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d118      	bne.n	800cf3c <USBD_MSC_Setup+0x74>
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	88db      	ldrh	r3, [r3, #6]
 800cf0e:	2b01      	cmp	r3, #1
 800cf10:	d114      	bne.n	800cf3c <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	781b      	ldrb	r3, [r3, #0]
 800cf16:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	da0f      	bge.n	800cf3c <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf22:	699b      	ldr	r3, [r3, #24]
 800cf24:	4798      	blx	r3
 800cf26:	4603      	mov	r3, r0
 800cf28:	461a      	mov	r2, r3
 800cf2a:	693b      	ldr	r3, [r7, #16]
 800cf2c:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800cf2e:	693b      	ldr	r3, [r7, #16]
 800cf30:	2201      	movs	r2, #1
 800cf32:	4619      	mov	r1, r3
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f002 fc58 	bl	800f7ea <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800cf3a:	e025      	b.n	800cf88 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800cf3c:	6839      	ldr	r1, [r7, #0]
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f002 fbe2 	bl	800f708 <USBD_CtlError>
        ret = USBD_FAIL;
 800cf44:	2303      	movs	r3, #3
 800cf46:	75fb      	strb	r3, [r7, #23]
      break;
 800cf48:	e01e      	b.n	800cf88 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	885b      	ldrh	r3, [r3, #2]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d10c      	bne.n	800cf6c <USBD_MSC_Setup+0xa4>
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	88db      	ldrh	r3, [r3, #6]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d108      	bne.n	800cf6c <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	781b      	ldrb	r3, [r3, #0]
 800cf5e:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	db03      	blt.n	800cf6c <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f000 f940 	bl	800d1ea <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800cf6a:	e00d      	b.n	800cf88 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800cf6c:	6839      	ldr	r1, [r7, #0]
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	f002 fbca 	bl	800f708 <USBD_CtlError>
        ret = USBD_FAIL;
 800cf74:	2303      	movs	r3, #3
 800cf76:	75fb      	strb	r3, [r7, #23]
      break;
 800cf78:	e006      	b.n	800cf88 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 800cf7a:	6839      	ldr	r1, [r7, #0]
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f002 fbc3 	bl	800f708 <USBD_CtlError>
      ret = USBD_FAIL;
 800cf82:	2303      	movs	r3, #3
 800cf84:	75fb      	strb	r3, [r7, #23]
      break;
 800cf86:	bf00      	nop
    }
    break;
 800cf88:	e081      	b.n	800d08e <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	785b      	ldrb	r3, [r3, #1]
 800cf8e:	2b0b      	cmp	r3, #11
 800cf90:	d86d      	bhi.n	800d06e <USBD_MSC_Setup+0x1a6>
 800cf92:	a201      	add	r2, pc, #4	; (adr r2, 800cf98 <USBD_MSC_Setup+0xd0>)
 800cf94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf98:	0800cfc9 	.word	0x0800cfc9
 800cf9c:	0800d03f 	.word	0x0800d03f
 800cfa0:	0800d06f 	.word	0x0800d06f
 800cfa4:	0800d06f 	.word	0x0800d06f
 800cfa8:	0800d06f 	.word	0x0800d06f
 800cfac:	0800d06f 	.word	0x0800d06f
 800cfb0:	0800d06f 	.word	0x0800d06f
 800cfb4:	0800d06f 	.word	0x0800d06f
 800cfb8:	0800d06f 	.word	0x0800d06f
 800cfbc:	0800d06f 	.word	0x0800d06f
 800cfc0:	0800cff1 	.word	0x0800cff1
 800cfc4:	0800d019 	.word	0x0800d019
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfce:	2b03      	cmp	r3, #3
 800cfd0:	d107      	bne.n	800cfe2 <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cfd2:	f107 030e 	add.w	r3, r7, #14
 800cfd6:	2202      	movs	r2, #2
 800cfd8:	4619      	mov	r1, r3
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	f002 fc05 	bl	800f7ea <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800cfe0:	e04d      	b.n	800d07e <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800cfe2:	6839      	ldr	r1, [r7, #0]
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f002 fb8f 	bl	800f708 <USBD_CtlError>
        ret = USBD_FAIL;
 800cfea:	2303      	movs	r3, #3
 800cfec:	75fb      	strb	r3, [r7, #23]
      break;
 800cfee:	e046      	b.n	800d07e <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cff6:	2b03      	cmp	r3, #3
 800cff8:	d107      	bne.n	800d00a <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800cffa:	693b      	ldr	r3, [r7, #16]
 800cffc:	3304      	adds	r3, #4
 800cffe:	2201      	movs	r2, #1
 800d000:	4619      	mov	r1, r3
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	f002 fbf1 	bl	800f7ea <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800d008:	e039      	b.n	800d07e <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800d00a:	6839      	ldr	r1, [r7, #0]
 800d00c:	6878      	ldr	r0, [r7, #4]
 800d00e:	f002 fb7b 	bl	800f708 <USBD_CtlError>
        ret = USBD_FAIL;
 800d012:	2303      	movs	r3, #3
 800d014:	75fb      	strb	r3, [r7, #23]
      break;
 800d016:	e032      	b.n	800d07e <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d01e:	2b03      	cmp	r3, #3
 800d020:	d106      	bne.n	800d030 <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	885b      	ldrh	r3, [r3, #2]
 800d026:	b2db      	uxtb	r3, r3
 800d028:	461a      	mov	r2, r3
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800d02e:	e026      	b.n	800d07e <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800d030:	6839      	ldr	r1, [r7, #0]
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	f002 fb68 	bl	800f708 <USBD_CtlError>
        ret = USBD_FAIL;
 800d038:	2303      	movs	r3, #3
 800d03a:	75fb      	strb	r3, [r7, #23]
      break;
 800d03c:	e01f      	b.n	800d07e <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d044:	2b03      	cmp	r3, #3
 800d046:	d119      	bne.n	800d07c <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	885b      	ldrh	r3, [r3, #2]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d115      	bne.n	800d07c <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	889b      	ldrh	r3, [r3, #4]
 800d054:	b2db      	uxtb	r3, r3
 800d056:	4619      	mov	r1, r3
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	f005 f975 	bl	8012348 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	889b      	ldrh	r3, [r3, #4]
 800d062:	b2db      	uxtb	r3, r3
 800d064:	4619      	mov	r1, r3
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	f000 fa5a 	bl	800d520 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 800d06c:	e006      	b.n	800d07c <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 800d06e:	6839      	ldr	r1, [r7, #0]
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	f002 fb49 	bl	800f708 <USBD_CtlError>
      ret = USBD_FAIL;
 800d076:	2303      	movs	r3, #3
 800d078:	75fb      	strb	r3, [r7, #23]
      break;
 800d07a:	e000      	b.n	800d07e <USBD_MSC_Setup+0x1b6>
      break;
 800d07c:	bf00      	nop
    }
    break;
 800d07e:	e006      	b.n	800d08e <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 800d080:	6839      	ldr	r1, [r7, #0]
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f002 fb40 	bl	800f708 <USBD_CtlError>
    ret = USBD_FAIL;
 800d088:	2303      	movs	r3, #3
 800d08a:	75fb      	strb	r3, [r7, #23]
    break;
 800d08c:	bf00      	nop
  }

  return (uint8_t)ret;
 800d08e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d090:	4618      	mov	r0, r3
 800d092:	3718      	adds	r7, #24
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}

0800d098 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b082      	sub	sp, #8
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
 800d0a0:	460b      	mov	r3, r1
 800d0a2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800d0a4:	78fb      	ldrb	r3, [r7, #3]
 800d0a6:	4619      	mov	r1, r3
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	f000 f8d1 	bl	800d250 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800d0ae:	2300      	movs	r3, #0
}
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	3708      	adds	r7, #8
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}

0800d0b8 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b082      	sub	sp, #8
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
 800d0c0:	460b      	mov	r3, r1
 800d0c2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800d0c4:	78fb      	ldrb	r3, [r7, #3]
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f000 f8f2 	bl	800d2b2 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800d0ce:	2300      	movs	r3, #0
}
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	3708      	adds	r7, #8
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}

0800d0d8 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800d0d8:	b480      	push	{r7}
 800d0da:	b083      	sub	sp, #12
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2220      	movs	r2, #32
 800d0e4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800d0e6:	4b03      	ldr	r3, [pc, #12]	; (800d0f4 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	370c      	adds	r7, #12
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f2:	4770      	bx	lr
 800d0f4:	24000048 	.word	0x24000048

0800d0f8 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b083      	sub	sp, #12
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2220      	movs	r2, #32
 800d104:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800d106:	4b03      	ldr	r3, [pc, #12]	; (800d114 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800d108:	4618      	mov	r0, r3
 800d10a:	370c      	adds	r7, #12
 800d10c:	46bd      	mov	sp, r7
 800d10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d112:	4770      	bx	lr
 800d114:	24000068 	.word	0x24000068

0800d118 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d118:	b480      	push	{r7}
 800d11a:	b083      	sub	sp, #12
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2220      	movs	r2, #32
 800d124:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800d126:	4b03      	ldr	r3, [pc, #12]	; (800d134 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d128:	4618      	mov	r0, r3
 800d12a:	370c      	adds	r7, #12
 800d12c:	46bd      	mov	sp, r7
 800d12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d132:	4770      	bx	lr
 800d134:	24000088 	.word	0x24000088

0800d138 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d138:	b480      	push	{r7}
 800d13a:	b083      	sub	sp, #12
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	220a      	movs	r2, #10
 800d144:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800d146:	4b03      	ldr	r3, [pc, #12]	; (800d154 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d148:	4618      	mov	r0, r3
 800d14a:	370c      	adds	r7, #12
 800d14c:	46bd      	mov	sp, r7
 800d14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d152:	4770      	bx	lr
 800d154:	240000a8 	.word	0x240000a8

0800d158 <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800d158:	b480      	push	{r7}
 800d15a:	b083      	sub	sp, #12
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
 800d160:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d101      	bne.n	800d16c <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d168:	2303      	movs	r3, #3
 800d16a:	e004      	b.n	800d176 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	683a      	ldr	r2, [r7, #0]
 800d170:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800d174:	2300      	movs	r3, #0
}
 800d176:	4618      	mov	r0, r3
 800d178:	370c      	adds	r7, #12
 800d17a:	46bd      	mov	sp, r7
 800d17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d180:	4770      	bx	lr

0800d182 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800d182:	b580      	push	{r7, lr}
 800d184:	b084      	sub	sp, #16
 800d186:	af00      	add	r7, sp, #0
 800d188:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d190:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	2200      	movs	r2, #0
 800d196:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	2200      	movs	r2, #0
 800d19c:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	2000      	movs	r0, #0
 800d1c0:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800d1c2:	2101      	movs	r1, #1
 800d1c4:	6878      	ldr	r0, [r7, #4]
 800d1c6:	f005 f8bf 	bl	8012348 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800d1ca:	2181      	movs	r1, #129	; 0x81
 800d1cc:	6878      	ldr	r0, [r7, #4]
 800d1ce:	f005 f8bb 	bl	8012348 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800d1d8:	231f      	movs	r3, #31
 800d1da:	2101      	movs	r1, #1
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f005 f97c 	bl	80124da <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800d1e2:	bf00      	nop
 800d1e4:	3710      	adds	r7, #16
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}

0800d1ea <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800d1ea:	b580      	push	{r7, lr}
 800d1ec:	b084      	sub	sp, #16
 800d1ee:	af00      	add	r7, sp, #0
 800d1f0:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d1f8:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	2201      	movs	r2, #1
 800d204:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 800d206:	2181      	movs	r1, #129	; 0x81
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f005 f8db 	bl	80123c4 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 800d20e:	2101      	movs	r1, #1
 800d210:	6878      	ldr	r0, [r7, #4]
 800d212:	f005 f8d7 	bl	80123c4 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800d21c:	231f      	movs	r3, #31
 800d21e:	2101      	movs	r1, #1
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f005 f95a 	bl	80124da <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800d226:	bf00      	nop
 800d228:	3710      	adds	r7, #16
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bd80      	pop	{r7, pc}

0800d22e <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800d22e:	b480      	push	{r7}
 800d230:	b085      	sub	sp, #20
 800d232:	af00      	add	r7, sp, #0
 800d234:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d23c:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	2200      	movs	r2, #0
 800d242:	721a      	strb	r2, [r3, #8]
}
 800d244:	bf00      	nop
 800d246:	3714      	adds	r7, #20
 800d248:	46bd      	mov	sp, r7
 800d24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24e:	4770      	bx	lr

0800d250 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b084      	sub	sp, #16
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
 800d258:	460b      	mov	r3, r1
 800d25a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d262:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	7a1b      	ldrb	r3, [r3, #8]
 800d268:	2b02      	cmp	r3, #2
 800d26a:	d004      	beq.n	800d276 <MSC_BOT_DataIn+0x26>
 800d26c:	2b02      	cmp	r3, #2
 800d26e:	db19      	blt.n	800d2a4 <MSC_BOT_DataIn+0x54>
 800d270:	2b04      	cmp	r3, #4
 800d272:	dc17      	bgt.n	800d2a4 <MSC_BOT_DataIn+0x54>
 800d274:	e011      	b.n	800d29a <MSC_BOT_DataIn+0x4a>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800d282:	461a      	mov	r2, r3
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f000 f973 	bl	800d570 <SCSI_ProcessCmd>
 800d28a:	4603      	mov	r3, r0
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	da0b      	bge.n	800d2a8 <MSC_BOT_DataIn+0x58>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d290:	2101      	movs	r1, #1
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f000 f8ea 	bl	800d46c <MSC_BOT_SendCSW>
    }
    break;
 800d298:	e006      	b.n	800d2a8 <MSC_BOT_DataIn+0x58>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800d29a:	2100      	movs	r1, #0
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f000 f8e5 	bl	800d46c <MSC_BOT_SendCSW>
    break;
 800d2a2:	e002      	b.n	800d2aa <MSC_BOT_DataIn+0x5a>

  default:
    break;
 800d2a4:	bf00      	nop
 800d2a6:	e000      	b.n	800d2aa <MSC_BOT_DataIn+0x5a>
    break;
 800d2a8:	bf00      	nop
  }
}
 800d2aa:	bf00      	nop
 800d2ac:	3710      	adds	r7, #16
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}

0800d2b2 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d2b2:	b580      	push	{r7, lr}
 800d2b4:	b084      	sub	sp, #16
 800d2b6:	af00      	add	r7, sp, #0
 800d2b8:	6078      	str	r0, [r7, #4]
 800d2ba:	460b      	mov	r3, r1
 800d2bc:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d2c4:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	7a1b      	ldrb	r3, [r3, #8]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d002      	beq.n	800d2d4 <MSC_BOT_DataOut+0x22>
 800d2ce:	2b01      	cmp	r3, #1
 800d2d0:	d004      	beq.n	800d2dc <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800d2d2:	e015      	b.n	800d300 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f000 f817 	bl	800d308 <MSC_BOT_CBW_Decode>
      break;
 800d2da:	e011      	b.n	800d300 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800d2e8:	461a      	mov	r2, r3
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f000 f940 	bl	800d570 <SCSI_ProcessCmd>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	da03      	bge.n	800d2fe <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d2f6:	2101      	movs	r1, #1
 800d2f8:	6878      	ldr	r0, [r7, #4]
 800d2fa:	f000 f8b7 	bl	800d46c <MSC_BOT_SendCSW>
      break;
 800d2fe:	bf00      	nop
  }
}
 800d300:	bf00      	nop
 800d302:	3710      	adds	r7, #16
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}

0800d308 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b084      	sub	sp, #16
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d316:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800d330:	2101      	movs	r1, #1
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f005 f8f2 	bl	801251c <USBD_LL_GetRxDataSize>
 800d338:	4603      	mov	r3, r0
 800d33a:	2b1f      	cmp	r3, #31
 800d33c:	d114      	bne.n	800d368 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800d344:	4a32      	ldr	r2, [pc, #200]	; (800d410 <MSC_BOT_CBW_Decode+0x108>)
 800d346:	4293      	cmp	r3, r2
 800d348:	d10e      	bne.n	800d368 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800d350:	2b01      	cmp	r3, #1
 800d352:	d809      	bhi.n	800d368 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d004      	beq.n	800d368 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength > 16U))
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800d364:	2b10      	cmp	r3, #16
 800d366:	d90e      	bls.n	800d386 <MSC_BOT_CBW_Decode+0x7e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d36e:	2320      	movs	r3, #32
 800d370:	2205      	movs	r2, #5
 800d372:	6878      	ldr	r0, [r7, #4]
 800d374:	f000 fcc9 	bl	800dd0a <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	2202      	movs	r2, #2
 800d37c:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f000 f8a0 	bl	800d4c4 <MSC_BOT_Abort>
 800d384:	e041      	b.n	800d40a <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800d392:	461a      	mov	r2, r3
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f000 f8eb 	bl	800d570 <SCSI_ProcessCmd>
 800d39a:	4603      	mov	r3, r0
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	da0c      	bge.n	800d3ba <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	7a1b      	ldrb	r3, [r3, #8]
 800d3a4:	2b05      	cmp	r3, #5
 800d3a6:	d104      	bne.n	800d3b2 <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d3a8:	2101      	movs	r1, #1
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f000 f85e 	bl	800d46c <MSC_BOT_SendCSW>
 800d3b0:	e02b      	b.n	800d40a <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f000 f886 	bl	800d4c4 <MSC_BOT_Abort>
 800d3b8:	e027      	b.n	800d40a <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	7a1b      	ldrb	r3, [r3, #8]
 800d3be:	2b02      	cmp	r3, #2
 800d3c0:	d022      	beq.n	800d408 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800d3c6:	2b01      	cmp	r3, #1
 800d3c8:	d01e      	beq.n	800d408 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800d3ce:	2b03      	cmp	r3, #3
 800d3d0:	d01a      	beq.n	800d408 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	68db      	ldr	r3, [r3, #12]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d009      	beq.n	800d3ee <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	f103 0110 	add.w	r1, r3, #16
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	68db      	ldr	r3, [r3, #12]
 800d3e4:	461a      	mov	r2, r3
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f000 f814 	bl	800d414 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800d3ec:	e00d      	b.n	800d40a <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	68db      	ldr	r3, [r3, #12]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d104      	bne.n	800d400 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800d3f6:	2100      	movs	r1, #0
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f000 f837 	bl	800d46c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800d3fe:	e004      	b.n	800d40a <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f000 f85f 	bl	800d4c4 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800d406:	e000      	b.n	800d40a <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 800d408:	bf00      	nop
    }
  }
}
 800d40a:	3710      	adds	r7, #16
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}
 800d410:	43425355 	.word	0x43425355

0800d414 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b086      	sub	sp, #24
 800d418:	af00      	add	r7, sp, #0
 800d41a:	60f8      	str	r0, [r7, #12]
 800d41c:	60b9      	str	r1, [r7, #8]
 800d41e:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d426:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 800d428:	697b      	ldr	r3, [r7, #20]
 800d42a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d42e:	687a      	ldr	r2, [r7, #4]
 800d430:	4293      	cmp	r3, r2
 800d432:	bf28      	it	cs
 800d434:	4613      	movcs	r3, r2
 800d436:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800d438:	697b      	ldr	r3, [r7, #20]
 800d43a:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	1ad2      	subs	r2, r2, r3
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800d448:	697b      	ldr	r3, [r7, #20]
 800d44a:	2200      	movs	r2, #0
 800d44c:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800d450:	697b      	ldr	r3, [r7, #20]
 800d452:	2204      	movs	r2, #4
 800d454:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800d456:	693b      	ldr	r3, [r7, #16]
 800d458:	68ba      	ldr	r2, [r7, #8]
 800d45a:	2181      	movs	r1, #129	; 0x81
 800d45c:	68f8      	ldr	r0, [r7, #12]
 800d45e:	f005 f81b 	bl	8012498 <USBD_LL_Transmit>
}
 800d462:	bf00      	nop
 800d464:	3718      	adds	r7, #24
 800d466:	46bd      	mov	sp, r7
 800d468:	bd80      	pop	{r7, pc}
	...

0800d46c <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b084      	sub	sp, #16
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
 800d474:	460b      	mov	r3, r1
 800d476:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d47e:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	4a0f      	ldr	r2, [pc, #60]	; (800d4c0 <MSC_BOT_SendCSW+0x54>)
 800d484:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	78fa      	ldrb	r2, [r7, #3]
 800d48c:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	2200      	movs	r2, #0
 800d494:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800d49c:	230d      	movs	r3, #13
 800d49e:	2181      	movs	r1, #129	; 0x81
 800d4a0:	6878      	ldr	r0, [r7, #4]
 800d4a2:	f004 fff9 	bl	8012498 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800d4ac:	231f      	movs	r3, #31
 800d4ae:	2101      	movs	r1, #1
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f005 f812 	bl	80124da <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800d4b6:	bf00      	nop
 800d4b8:	3710      	adds	r7, #16
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}
 800d4be:	bf00      	nop
 800d4c0:	53425355 	.word	0x53425355

0800d4c4 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b084      	sub	sp, #16
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d4d2:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d10c      	bne.n	800d4f8 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d007      	beq.n	800d4f8 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d103      	bne.n	800d4f8 <MSC_BOT_Abort+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800d4f0:	2101      	movs	r1, #1
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f004 ff47 	bl	8012386 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800d4f8:	2181      	movs	r1, #129	; 0x81
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f004 ff43 	bl	8012386 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	7a5b      	ldrb	r3, [r3, #9]
 800d504:	2b02      	cmp	r3, #2
 800d506:	d107      	bne.n	800d518 <MSC_BOT_Abort+0x54>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800d508:	2181      	movs	r1, #129	; 0x81
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	f004 ff3b 	bl	8012386 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800d510:	2101      	movs	r1, #1
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f004 ff37 	bl	8012386 <USBD_LL_StallEP>
  }
}
 800d518:	bf00      	nop
 800d51a:	3710      	adds	r7, #16
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bd80      	pop	{r7, pc}

0800d520 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b084      	sub	sp, #16
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
 800d528:	460b      	mov	r3, r1
 800d52a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d532:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	7a5b      	ldrb	r3, [r3, #9]
 800d538:	2b02      	cmp	r3, #2
 800d53a:	d108      	bne.n	800d54e <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800d53c:	2181      	movs	r1, #129	; 0x81
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f004 ff21 	bl	8012386 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800d544:	2101      	movs	r1, #1
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	f004 ff1d 	bl	8012386 <USBD_LL_StallEP>
 800d54c:	e00d      	b.n	800d56a <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800d54e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d552:	2b00      	cmp	r3, #0
 800d554:	da08      	bge.n	800d568 <MSC_BOT_CplClrFeature+0x48>
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	7a5b      	ldrb	r3, [r3, #9]
 800d55a:	2b01      	cmp	r3, #1
 800d55c:	d004      	beq.n	800d568 <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d55e:	2101      	movs	r1, #1
 800d560:	6878      	ldr	r0, [r7, #4]
 800d562:	f7ff ff83 	bl	800d46c <MSC_BOT_SendCSW>
 800d566:	e000      	b.n	800d56a <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 800d568:	bf00      	nop
  }
}
 800d56a:	3710      	adds	r7, #16
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}

0800d570 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b086      	sub	sp, #24
 800d574:	af00      	add	r7, sp, #0
 800d576:	60f8      	str	r0, [r7, #12]
 800d578:	460b      	mov	r3, r1
 800d57a:	607a      	str	r2, [r7, #4]
 800d57c:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d584:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	781b      	ldrb	r3, [r3, #0]
 800d58a:	2b25      	cmp	r3, #37	; 0x25
 800d58c:	d06e      	beq.n	800d66c <SCSI_ProcessCmd+0xfc>
 800d58e:	2b25      	cmp	r3, #37	; 0x25
 800d590:	dc11      	bgt.n	800d5b6 <SCSI_ProcessCmd+0x46>
 800d592:	2b1a      	cmp	r3, #26
 800d594:	d04f      	beq.n	800d636 <SCSI_ProcessCmd+0xc6>
 800d596:	2b1a      	cmp	r3, #26
 800d598:	dc06      	bgt.n	800d5a8 <SCSI_ProcessCmd+0x38>
 800d59a:	2b03      	cmp	r3, #3
 800d59c:	d027      	beq.n	800d5ee <SCSI_ProcessCmd+0x7e>
 800d59e:	2b12      	cmp	r3, #18
 800d5a0:	d02e      	beq.n	800d600 <SCSI_ProcessCmd+0x90>
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d01a      	beq.n	800d5dc <SCSI_ProcessCmd+0x6c>
 800d5a6:	e0a0      	b.n	800d6ea <SCSI_ProcessCmd+0x17a>
 800d5a8:	2b1e      	cmp	r3, #30
 800d5aa:	d03b      	beq.n	800d624 <SCSI_ProcessCmd+0xb4>
 800d5ac:	2b23      	cmp	r3, #35	; 0x23
 800d5ae:	d054      	beq.n	800d65a <SCSI_ProcessCmd+0xea>
 800d5b0:	2b1b      	cmp	r3, #27
 800d5b2:	d02e      	beq.n	800d612 <SCSI_ProcessCmd+0xa2>
 800d5b4:	e099      	b.n	800d6ea <SCSI_ProcessCmd+0x17a>
 800d5b6:	2b5a      	cmp	r3, #90	; 0x5a
 800d5b8:	d046      	beq.n	800d648 <SCSI_ProcessCmd+0xd8>
 800d5ba:	2b5a      	cmp	r3, #90	; 0x5a
 800d5bc:	dc07      	bgt.n	800d5ce <SCSI_ProcessCmd+0x5e>
 800d5be:	2b2a      	cmp	r3, #42	; 0x2a
 800d5c0:	d078      	beq.n	800d6b4 <SCSI_ProcessCmd+0x144>
 800d5c2:	2b2f      	cmp	r3, #47	; 0x2f
 800d5c4:	f000 8088 	beq.w	800d6d8 <SCSI_ProcessCmd+0x168>
 800d5c8:	2b28      	cmp	r3, #40	; 0x28
 800d5ca:	d061      	beq.n	800d690 <SCSI_ProcessCmd+0x120>
 800d5cc:	e08d      	b.n	800d6ea <SCSI_ProcessCmd+0x17a>
 800d5ce:	2ba8      	cmp	r3, #168	; 0xa8
 800d5d0:	d067      	beq.n	800d6a2 <SCSI_ProcessCmd+0x132>
 800d5d2:	2baa      	cmp	r3, #170	; 0xaa
 800d5d4:	d077      	beq.n	800d6c6 <SCSI_ProcessCmd+0x156>
 800d5d6:	2b9e      	cmp	r3, #158	; 0x9e
 800d5d8:	d051      	beq.n	800d67e <SCSI_ProcessCmd+0x10e>
 800d5da:	e086      	b.n	800d6ea <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800d5dc:	7afb      	ldrb	r3, [r7, #11]
 800d5de:	687a      	ldr	r2, [r7, #4]
 800d5e0:	4619      	mov	r1, r3
 800d5e2:	68f8      	ldr	r0, [r7, #12]
 800d5e4:	f000 f893 	bl	800d70e <SCSI_TestUnitReady>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	75fb      	strb	r3, [r7, #23]
    break;
 800d5ec:	e089      	b.n	800d702 <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 800d5ee:	7afb      	ldrb	r3, [r7, #11]
 800d5f0:	687a      	ldr	r2, [r7, #4]
 800d5f2:	4619      	mov	r1, r3
 800d5f4:	68f8      	ldr	r0, [r7, #12]
 800d5f6:	f000 fb0f 	bl	800dc18 <SCSI_RequestSense>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	75fb      	strb	r3, [r7, #23]
    break;
 800d5fe:	e080      	b.n	800d702 <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 800d600:	7afb      	ldrb	r3, [r7, #11]
 800d602:	687a      	ldr	r2, [r7, #4]
 800d604:	4619      	mov	r1, r3
 800d606:	68f8      	ldr	r0, [r7, #12]
 800d608:	f000 f8cc 	bl	800d7a4 <SCSI_Inquiry>
 800d60c:	4603      	mov	r3, r0
 800d60e:	75fb      	strb	r3, [r7, #23]
    break;
 800d610:	e077      	b.n	800d702 <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800d612:	7afb      	ldrb	r3, [r7, #11]
 800d614:	687a      	ldr	r2, [r7, #4]
 800d616:	4619      	mov	r1, r3
 800d618:	68f8      	ldr	r0, [r7, #12]
 800d61a:	f000 fbb9 	bl	800dd90 <SCSI_StartStopUnit>
 800d61e:	4603      	mov	r3, r0
 800d620:	75fb      	strb	r3, [r7, #23]
    break;
 800d622:	e06e      	b.n	800d702 <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800d624:	7afb      	ldrb	r3, [r7, #11]
 800d626:	687a      	ldr	r2, [r7, #4]
 800d628:	4619      	mov	r1, r3
 800d62a:	68f8      	ldr	r0, [r7, #12]
 800d62c:	f000 fbfb 	bl	800de26 <SCSI_AllowPreventRemovable>
 800d630:	4603      	mov	r3, r0
 800d632:	75fb      	strb	r3, [r7, #23]
    break;
 800d634:	e065      	b.n	800d702 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 800d636:	7afb      	ldrb	r3, [r7, #11]
 800d638:	687a      	ldr	r2, [r7, #4]
 800d63a:	4619      	mov	r1, r3
 800d63c:	68f8      	ldr	r0, [r7, #12]
 800d63e:	f000 fa9f 	bl	800db80 <SCSI_ModeSense6>
 800d642:	4603      	mov	r3, r0
 800d644:	75fb      	strb	r3, [r7, #23]
    break;
 800d646:	e05c      	b.n	800d702 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 800d648:	7afb      	ldrb	r3, [r7, #11]
 800d64a:	687a      	ldr	r2, [r7, #4]
 800d64c:	4619      	mov	r1, r3
 800d64e:	68f8      	ldr	r0, [r7, #12]
 800d650:	f000 fabc 	bl	800dbcc <SCSI_ModeSense10>
 800d654:	4603      	mov	r3, r0
 800d656:	75fb      	strb	r3, [r7, #23]
    break;
 800d658:	e053      	b.n	800d702 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800d65a:	7afb      	ldrb	r3, [r7, #11]
 800d65c:	687a      	ldr	r2, [r7, #4]
 800d65e:	4619      	mov	r1, r3
 800d660:	68f8      	ldr	r0, [r7, #12]
 800d662:	f000 fa20 	bl	800daa6 <SCSI_ReadFormatCapacity>
 800d666:	4603      	mov	r3, r0
 800d668:	75fb      	strb	r3, [r7, #23]
    break;
 800d66a:	e04a      	b.n	800d702 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800d66c:	7afb      	ldrb	r3, [r7, #11]
 800d66e:	687a      	ldr	r2, [r7, #4]
 800d670:	4619      	mov	r1, r3
 800d672:	68f8      	ldr	r0, [r7, #12]
 800d674:	f000 f904 	bl	800d880 <SCSI_ReadCapacity10>
 800d678:	4603      	mov	r3, r0
 800d67a:	75fb      	strb	r3, [r7, #23]
    break;
 800d67c:	e041      	b.n	800d702 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800d67e:	7afb      	ldrb	r3, [r7, #11]
 800d680:	687a      	ldr	r2, [r7, #4]
 800d682:	4619      	mov	r1, r3
 800d684:	68f8      	ldr	r0, [r7, #12]
 800d686:	f000 f96a 	bl	800d95e <SCSI_ReadCapacity16>
 800d68a:	4603      	mov	r3, r0
 800d68c:	75fb      	strb	r3, [r7, #23]
    break;
 800d68e:	e038      	b.n	800d702 <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 800d690:	7afb      	ldrb	r3, [r7, #11]
 800d692:	687a      	ldr	r2, [r7, #4]
 800d694:	4619      	mov	r1, r3
 800d696:	68f8      	ldr	r0, [r7, #12]
 800d698:	f000 fbe8 	bl	800de6c <SCSI_Read10>
 800d69c:	4603      	mov	r3, r0
 800d69e:	75fb      	strb	r3, [r7, #23]
    break;
 800d6a0:	e02f      	b.n	800d702 <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 800d6a2:	7afb      	ldrb	r3, [r7, #11]
 800d6a4:	687a      	ldr	r2, [r7, #4]
 800d6a6:	4619      	mov	r1, r3
 800d6a8:	68f8      	ldr	r0, [r7, #12]
 800d6aa:	f000 fc79 	bl	800dfa0 <SCSI_Read12>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	75fb      	strb	r3, [r7, #23]
    break;
 800d6b2:	e026      	b.n	800d702 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 800d6b4:	7afb      	ldrb	r3, [r7, #11]
 800d6b6:	687a      	ldr	r2, [r7, #4]
 800d6b8:	4619      	mov	r1, r3
 800d6ba:	68f8      	ldr	r0, [r7, #12]
 800d6bc:	f000 fd15 	bl	800e0ea <SCSI_Write10>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	75fb      	strb	r3, [r7, #23]
    break;
 800d6c4:	e01d      	b.n	800d702 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 800d6c6:	7afb      	ldrb	r3, [r7, #11]
 800d6c8:	687a      	ldr	r2, [r7, #4]
 800d6ca:	4619      	mov	r1, r3
 800d6cc:	68f8      	ldr	r0, [r7, #12]
 800d6ce:	f000 fdcb 	bl	800e268 <SCSI_Write12>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	75fb      	strb	r3, [r7, #23]
    break;
 800d6d6:	e014      	b.n	800d702 <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 800d6d8:	7afb      	ldrb	r3, [r7, #11]
 800d6da:	687a      	ldr	r2, [r7, #4]
 800d6dc:	4619      	mov	r1, r3
 800d6de:	68f8      	ldr	r0, [r7, #12]
 800d6e0:	f000 fe91 	bl	800e406 <SCSI_Verify10>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	75fb      	strb	r3, [r7, #23]
    break;
 800d6e8:	e00b      	b.n	800d702 <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800d6ea:	7af9      	ldrb	r1, [r7, #11]
 800d6ec:	2320      	movs	r3, #32
 800d6ee:	2205      	movs	r2, #5
 800d6f0:	68f8      	ldr	r0, [r7, #12]
 800d6f2:	f000 fb0a 	bl	800dd0a <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800d6f6:	693b      	ldr	r3, [r7, #16]
 800d6f8:	2202      	movs	r2, #2
 800d6fa:	725a      	strb	r2, [r3, #9]
    ret = -1;
 800d6fc:	23ff      	movs	r3, #255	; 0xff
 800d6fe:	75fb      	strb	r3, [r7, #23]
    break;
 800d700:	bf00      	nop
  }

  return ret;
 800d702:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d706:	4618      	mov	r0, r3
 800d708:	3718      	adds	r7, #24
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}

0800d70e <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d70e:	b580      	push	{r7, lr}
 800d710:	b086      	sub	sp, #24
 800d712:	af00      	add	r7, sp, #0
 800d714:	60f8      	str	r0, [r7, #12]
 800d716:	460b      	mov	r3, r1
 800d718:	607a      	str	r2, [r7, #4]
 800d71a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d722:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800d724:	697b      	ldr	r3, [r7, #20]
 800d726:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d00a      	beq.n	800d744 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d72e:	697b      	ldr	r3, [r7, #20]
 800d730:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d734:	2320      	movs	r3, #32
 800d736:	2205      	movs	r2, #5
 800d738:	68f8      	ldr	r0, [r7, #12]
 800d73a:	f000 fae6 	bl	800dd0a <SCSI_SenseCode>

    return -1;
 800d73e:	f04f 33ff 	mov.w	r3, #4294967295
 800d742:	e02a      	b.n	800d79a <SCSI_TestUnitReady+0x8c>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800d744:	697b      	ldr	r3, [r7, #20]
 800d746:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800d74a:	2b02      	cmp	r3, #2
 800d74c:	d10b      	bne.n	800d766 <SCSI_TestUnitReady+0x58>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d74e:	7af9      	ldrb	r1, [r7, #11]
 800d750:	233a      	movs	r3, #58	; 0x3a
 800d752:	2202      	movs	r2, #2
 800d754:	68f8      	ldr	r0, [r7, #12]
 800d756:	f000 fad8 	bl	800dd0a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800d75a:	697b      	ldr	r3, [r7, #20]
 800d75c:	2205      	movs	r2, #5
 800d75e:	721a      	strb	r2, [r3, #8]
    return -1;
 800d760:	f04f 33ff 	mov.w	r3, #4294967295
 800d764:	e019      	b.n	800d79a <SCSI_TestUnitReady+0x8c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d76c:	689b      	ldr	r3, [r3, #8]
 800d76e:	7afa      	ldrb	r2, [r7, #11]
 800d770:	4610      	mov	r0, r2
 800d772:	4798      	blx	r3
 800d774:	4603      	mov	r3, r0
 800d776:	2b00      	cmp	r3, #0
 800d778:	d00b      	beq.n	800d792 <SCSI_TestUnitReady+0x84>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d77a:	7af9      	ldrb	r1, [r7, #11]
 800d77c:	233a      	movs	r3, #58	; 0x3a
 800d77e:	2202      	movs	r2, #2
 800d780:	68f8      	ldr	r0, [r7, #12]
 800d782:	f000 fac2 	bl	800dd0a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800d786:	697b      	ldr	r3, [r7, #20]
 800d788:	2205      	movs	r2, #5
 800d78a:	721a      	strb	r2, [r3, #8]

    return -1;
 800d78c:	f04f 33ff 	mov.w	r3, #4294967295
 800d790:	e003      	b.n	800d79a <SCSI_TestUnitReady+0x8c>
  }
  hmsc->bot_data_length = 0U;
 800d792:	697b      	ldr	r3, [r7, #20]
 800d794:	2200      	movs	r2, #0
 800d796:	60da      	str	r2, [r3, #12]

  return 0;
 800d798:	2300      	movs	r3, #0
}
 800d79a:	4618      	mov	r0, r3
 800d79c:	3718      	adds	r7, #24
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bd80      	pop	{r7, pc}
	...

0800d7a4 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b088      	sub	sp, #32
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	60f8      	str	r0, [r7, #12]
 800d7ac:	460b      	mov	r3, r1
 800d7ae:	607a      	str	r2, [r7, #4]
 800d7b0:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d7b8:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 800d7ba:	69bb      	ldr	r3, [r7, #24]
 800d7bc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d10a      	bne.n	800d7da <SCSI_Inquiry+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d7c4:	69bb      	ldr	r3, [r7, #24]
 800d7c6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d7ca:	2320      	movs	r3, #32
 800d7cc:	2205      	movs	r2, #5
 800d7ce:	68f8      	ldr	r0, [r7, #12]
 800d7d0:	f000 fa9b 	bl	800dd0a <SCSI_SenseCode>
    return -1;
 800d7d4:	f04f 33ff 	mov.w	r3, #4294967295
 800d7d8:	e04a      	b.n	800d870 <SCSI_Inquiry+0xcc>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	3301      	adds	r3, #1
 800d7de:	781b      	ldrb	r3, [r3, #0]
 800d7e0:	f003 0301 	and.w	r3, r3, #1
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d020      	beq.n	800d82a <SCSI_Inquiry+0x86>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	3302      	adds	r3, #2
 800d7ec:	781b      	ldrb	r3, [r3, #0]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d105      	bne.n	800d7fe <SCSI_Inquiry+0x5a>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800d7f2:	2206      	movs	r2, #6
 800d7f4:	4920      	ldr	r1, [pc, #128]	; (800d878 <SCSI_Inquiry+0xd4>)
 800d7f6:	69b8      	ldr	r0, [r7, #24]
 800d7f8:	f000 ff50 	bl	800e69c <SCSI_UpdateBotData>
 800d7fc:	e037      	b.n	800d86e <SCSI_Inquiry+0xca>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	3302      	adds	r3, #2
 800d802:	781b      	ldrb	r3, [r3, #0]
 800d804:	2b80      	cmp	r3, #128	; 0x80
 800d806:	d105      	bne.n	800d814 <SCSI_Inquiry+0x70>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800d808:	2208      	movs	r2, #8
 800d80a:	491c      	ldr	r1, [pc, #112]	; (800d87c <SCSI_Inquiry+0xd8>)
 800d80c:	69b8      	ldr	r0, [r7, #24]
 800d80e:	f000 ff45 	bl	800e69c <SCSI_UpdateBotData>
 800d812:	e02c      	b.n	800d86e <SCSI_Inquiry+0xca>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800d814:	69bb      	ldr	r3, [r7, #24]
 800d816:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d81a:	2324      	movs	r3, #36	; 0x24
 800d81c:	2205      	movs	r2, #5
 800d81e:	68f8      	ldr	r0, [r7, #12]
 800d820:	f000 fa73 	bl	800dd0a <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800d824:	f04f 33ff 	mov.w	r3, #4294967295
 800d828:	e022      	b.n	800d870 <SCSI_Inquiry+0xcc>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d830:	69d9      	ldr	r1, [r3, #28]
 800d832:	7afa      	ldrb	r2, [r7, #11]
 800d834:	4613      	mov	r3, r2
 800d836:	00db      	lsls	r3, r3, #3
 800d838:	4413      	add	r3, r2
 800d83a:	009b      	lsls	r3, r3, #2
 800d83c:	440b      	add	r3, r1
 800d83e:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	3304      	adds	r3, #4
 800d844:	781b      	ldrb	r3, [r3, #0]
 800d846:	b29b      	uxth	r3, r3
 800d848:	3305      	adds	r3, #5
 800d84a:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	3304      	adds	r3, #4
 800d850:	781b      	ldrb	r3, [r3, #0]
 800d852:	b29b      	uxth	r3, r3
 800d854:	8bfa      	ldrh	r2, [r7, #30]
 800d856:	429a      	cmp	r2, r3
 800d858:	d303      	bcc.n	800d862 <SCSI_Inquiry+0xbe>
    {
      len = params[4];
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	3304      	adds	r3, #4
 800d85e:	781b      	ldrb	r3, [r3, #0]
 800d860:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800d862:	8bfb      	ldrh	r3, [r7, #30]
 800d864:	461a      	mov	r2, r3
 800d866:	6979      	ldr	r1, [r7, #20]
 800d868:	69b8      	ldr	r0, [r7, #24]
 800d86a:	f000 ff17 	bl	800e69c <SCSI_UpdateBotData>
  }

  return 0;
 800d86e:	2300      	movs	r3, #0
}
 800d870:	4618      	mov	r0, r3
 800d872:	3720      	adds	r7, #32
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}
 800d878:	240000b4 	.word	0x240000b4
 800d87c:	240000bc 	.word	0x240000bc

0800d880 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b086      	sub	sp, #24
 800d884:	af00      	add	r7, sp, #0
 800d886:	60f8      	str	r0, [r7, #12]
 800d888:	460b      	mov	r3, r1
 800d88a:	607a      	str	r2, [r7, #4]
 800d88c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d894:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d89c:	685b      	ldr	r3, [r3, #4]
 800d89e:	697a      	ldr	r2, [r7, #20]
 800d8a0:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800d8a4:	697a      	ldr	r2, [r7, #20]
 800d8a6:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800d8aa:	7af8      	ldrb	r0, [r7, #11]
 800d8ac:	4798      	blx	r3
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800d8b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d104      	bne.n	800d8c4 <SCSI_ReadCapacity10+0x44>
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800d8c0:	2b02      	cmp	r3, #2
 800d8c2:	d108      	bne.n	800d8d6 <SCSI_ReadCapacity10+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d8c4:	7af9      	ldrb	r1, [r7, #11]
 800d8c6:	233a      	movs	r3, #58	; 0x3a
 800d8c8:	2202      	movs	r2, #2
 800d8ca:	68f8      	ldr	r0, [r7, #12]
 800d8cc:	f000 fa1d 	bl	800dd0a <SCSI_SenseCode>
    return -1;
 800d8d0:	f04f 33ff 	mov.w	r3, #4294967295
 800d8d4:	e03f      	b.n	800d956 <SCSI_ReadCapacity10+0xd6>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800d8d6:	697b      	ldr	r3, [r7, #20]
 800d8d8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d8dc:	3b01      	subs	r3, #1
 800d8de:	0e1b      	lsrs	r3, r3, #24
 800d8e0:	b2da      	uxtb	r2, r3
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800d8e6:	697b      	ldr	r3, [r7, #20]
 800d8e8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d8ec:	3b01      	subs	r3, #1
 800d8ee:	0c1b      	lsrs	r3, r3, #16
 800d8f0:	b2da      	uxtb	r2, r3
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800d8f6:	697b      	ldr	r3, [r7, #20]
 800d8f8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d8fc:	3b01      	subs	r3, #1
 800d8fe:	0a1b      	lsrs	r3, r3, #8
 800d900:	b2da      	uxtb	r2, r3
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d90c:	b2db      	uxtb	r3, r3
 800d90e:	3b01      	subs	r3, #1
 800d910:	b2da      	uxtb	r2, r3
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d91c:	161b      	asrs	r3, r3, #24
 800d91e:	b2da      	uxtb	r2, r3
 800d920:	697b      	ldr	r3, [r7, #20]
 800d922:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800d924:	697b      	ldr	r3, [r7, #20]
 800d926:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d92a:	141b      	asrs	r3, r3, #16
 800d92c:	b2da      	uxtb	r2, r3
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d938:	0a1b      	lsrs	r3, r3, #8
 800d93a:	b29b      	uxth	r3, r3
 800d93c:	b2da      	uxtb	r2, r3
 800d93e:	697b      	ldr	r3, [r7, #20]
 800d940:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d948:	b2da      	uxtb	r2, r3
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	2208      	movs	r2, #8
 800d952:	60da      	str	r2, [r3, #12]

  return 0;
 800d954:	2300      	movs	r3, #0

}
 800d956:	4618      	mov	r0, r3
 800d958:	3718      	adds	r7, #24
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}

0800d95e <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d95e:	b580      	push	{r7, lr}
 800d960:	b088      	sub	sp, #32
 800d962:	af00      	add	r7, sp, #0
 800d964:	60f8      	str	r0, [r7, #12]
 800d966:	460b      	mov	r3, r1
 800d968:	607a      	str	r2, [r7, #4]
 800d96a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d972:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d97a:	685b      	ldr	r3, [r3, #4]
 800d97c:	69ba      	ldr	r2, [r7, #24]
 800d97e:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800d982:	69ba      	ldr	r2, [r7, #24]
 800d984:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800d988:	7af8      	ldrb	r0, [r7, #11]
 800d98a:	4798      	blx	r3
 800d98c:	4603      	mov	r3, r0
 800d98e:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800d990:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d104      	bne.n	800d9a2 <SCSI_ReadCapacity16+0x44>
 800d998:	69bb      	ldr	r3, [r7, #24]
 800d99a:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800d99e:	2b02      	cmp	r3, #2
 800d9a0:	d108      	bne.n	800d9b4 <SCSI_ReadCapacity16+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d9a2:	7af9      	ldrb	r1, [r7, #11]
 800d9a4:	233a      	movs	r3, #58	; 0x3a
 800d9a6:	2202      	movs	r2, #2
 800d9a8:	68f8      	ldr	r0, [r7, #12]
 800d9aa:	f000 f9ae 	bl	800dd0a <SCSI_SenseCode>
    return -1;
 800d9ae:	f04f 33ff 	mov.w	r3, #4294967295
 800d9b2:	e074      	b.n	800da9e <SCSI_ReadCapacity16+0x140>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	330a      	adds	r3, #10
 800d9b8:	781b      	ldrb	r3, [r3, #0]
 800d9ba:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	330b      	adds	r3, #11
 800d9c0:	781b      	ldrb	r3, [r3, #0]
 800d9c2:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800d9c4:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	330c      	adds	r3, #12
 800d9ca:	781b      	ldrb	r3, [r3, #0]
 800d9cc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800d9ce:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 800d9d0:	687a      	ldr	r2, [r7, #4]
 800d9d2:	320d      	adds	r2, #13
 800d9d4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800d9d6:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800d9d8:	69bb      	ldr	r3, [r7, #24]
 800d9da:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800d9dc:	2300      	movs	r3, #0
 800d9de:	77fb      	strb	r3, [r7, #31]
 800d9e0:	e007      	b.n	800d9f2 <SCSI_ReadCapacity16+0x94>
  {
    hmsc->bot_data[idx] = 0U;
 800d9e2:	7ffb      	ldrb	r3, [r7, #31]
 800d9e4:	69ba      	ldr	r2, [r7, #24]
 800d9e6:	4413      	add	r3, r2
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800d9ec:	7ffb      	ldrb	r3, [r7, #31]
 800d9ee:	3301      	adds	r3, #1
 800d9f0:	77fb      	strb	r3, [r7, #31]
 800d9f2:	7ffa      	ldrb	r2, [r7, #31]
 800d9f4:	69bb      	ldr	r3, [r7, #24]
 800d9f6:	68db      	ldr	r3, [r3, #12]
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	d3f2      	bcc.n	800d9e2 <SCSI_ReadCapacity16+0x84>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800d9fc:	69bb      	ldr	r3, [r7, #24]
 800d9fe:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800da02:	3b01      	subs	r3, #1
 800da04:	0e1b      	lsrs	r3, r3, #24
 800da06:	b2da      	uxtb	r2, r3
 800da08:	69bb      	ldr	r3, [r7, #24]
 800da0a:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800da0c:	69bb      	ldr	r3, [r7, #24]
 800da0e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800da12:	3b01      	subs	r3, #1
 800da14:	0c1b      	lsrs	r3, r3, #16
 800da16:	b2da      	uxtb	r2, r3
 800da18:	69bb      	ldr	r3, [r7, #24]
 800da1a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800da1c:	69bb      	ldr	r3, [r7, #24]
 800da1e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800da22:	3b01      	subs	r3, #1
 800da24:	0a1b      	lsrs	r3, r3, #8
 800da26:	b2da      	uxtb	r2, r3
 800da28:	69bb      	ldr	r3, [r7, #24]
 800da2a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800da2c:	69bb      	ldr	r3, [r7, #24]
 800da2e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800da32:	b2db      	uxtb	r3, r3
 800da34:	3b01      	subs	r3, #1
 800da36:	b2da      	uxtb	r2, r3
 800da38:	69bb      	ldr	r3, [r7, #24]
 800da3a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800da3c:	69bb      	ldr	r3, [r7, #24]
 800da3e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800da42:	161b      	asrs	r3, r3, #24
 800da44:	b2da      	uxtb	r2, r3
 800da46:	69bb      	ldr	r3, [r7, #24]
 800da48:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800da4a:	69bb      	ldr	r3, [r7, #24]
 800da4c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800da50:	141b      	asrs	r3, r3, #16
 800da52:	b2da      	uxtb	r2, r3
 800da54:	69bb      	ldr	r3, [r7, #24]
 800da56:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800da58:	69bb      	ldr	r3, [r7, #24]
 800da5a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800da5e:	0a1b      	lsrs	r3, r3, #8
 800da60:	b29b      	uxth	r3, r3
 800da62:	b2da      	uxtb	r2, r3
 800da64:	69bb      	ldr	r3, [r7, #24]
 800da66:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800da68:	69bb      	ldr	r3, [r7, #24]
 800da6a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800da6e:	b2da      	uxtb	r2, r3
 800da70:	69bb      	ldr	r3, [r7, #24]
 800da72:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	330a      	adds	r3, #10
 800da78:	781b      	ldrb	r3, [r3, #0]
 800da7a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	330b      	adds	r3, #11
 800da80:	781b      	ldrb	r3, [r3, #0]
 800da82:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800da84:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	330c      	adds	r3, #12
 800da8a:	781b      	ldrb	r3, [r3, #0]
 800da8c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800da8e:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 800da90:	687a      	ldr	r2, [r7, #4]
 800da92:	320d      	adds	r2, #13
 800da94:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800da96:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800da98:	69bb      	ldr	r3, [r7, #24]
 800da9a:	60da      	str	r2, [r3, #12]

  return 0;
 800da9c:	2300      	movs	r3, #0
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3720      	adds	r7, #32
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}

0800daa6 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800daa6:	b580      	push	{r7, lr}
 800daa8:	b088      	sub	sp, #32
 800daaa:	af00      	add	r7, sp, #0
 800daac:	60f8      	str	r0, [r7, #12]
 800daae:	460b      	mov	r3, r1
 800dab0:	607a      	str	r2, [r7, #4]
 800dab2:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800daba:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dac2:	685b      	ldr	r3, [r3, #4]
 800dac4:	f107 0214 	add.w	r2, r7, #20
 800dac8:	f107 0110 	add.w	r1, r7, #16
 800dacc:	7af8      	ldrb	r0, [r7, #11]
 800dace:	4798      	blx	r3
 800dad0:	4603      	mov	r3, r0
 800dad2:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800dad4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d104      	bne.n	800dae6 <SCSI_ReadFormatCapacity+0x40>
 800dadc:	69bb      	ldr	r3, [r7, #24]
 800dade:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800dae2:	2b02      	cmp	r3, #2
 800dae4:	d108      	bne.n	800daf8 <SCSI_ReadFormatCapacity+0x52>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800dae6:	7af9      	ldrb	r1, [r7, #11]
 800dae8:	233a      	movs	r3, #58	; 0x3a
 800daea:	2202      	movs	r2, #2
 800daec:	68f8      	ldr	r0, [r7, #12]
 800daee:	f000 f90c 	bl	800dd0a <SCSI_SenseCode>
    return -1;
 800daf2:	f04f 33ff 	mov.w	r3, #4294967295
 800daf6:	e03e      	b.n	800db76 <SCSI_ReadFormatCapacity+0xd0>
  }

  for (i = 0U; i < 12U ; i++)
 800daf8:	2300      	movs	r3, #0
 800dafa:	83fb      	strh	r3, [r7, #30]
 800dafc:	e007      	b.n	800db0e <SCSI_ReadFormatCapacity+0x68>
  {
    hmsc->bot_data[i] = 0U;
 800dafe:	8bfb      	ldrh	r3, [r7, #30]
 800db00:	69ba      	ldr	r2, [r7, #24]
 800db02:	4413      	add	r3, r2
 800db04:	2200      	movs	r2, #0
 800db06:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800db08:	8bfb      	ldrh	r3, [r7, #30]
 800db0a:	3301      	adds	r3, #1
 800db0c:	83fb      	strh	r3, [r7, #30]
 800db0e:	8bfb      	ldrh	r3, [r7, #30]
 800db10:	2b0b      	cmp	r3, #11
 800db12:	d9f4      	bls.n	800dafe <SCSI_ReadFormatCapacity+0x58>
  }

  hmsc->bot_data[3] = 0x08U;
 800db14:	69bb      	ldr	r3, [r7, #24]
 800db16:	2208      	movs	r2, #8
 800db18:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800db1a:	693b      	ldr	r3, [r7, #16]
 800db1c:	3b01      	subs	r3, #1
 800db1e:	0e1b      	lsrs	r3, r3, #24
 800db20:	b2da      	uxtb	r2, r3
 800db22:	69bb      	ldr	r3, [r7, #24]
 800db24:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800db26:	693b      	ldr	r3, [r7, #16]
 800db28:	3b01      	subs	r3, #1
 800db2a:	0c1b      	lsrs	r3, r3, #16
 800db2c:	b2da      	uxtb	r2, r3
 800db2e:	69bb      	ldr	r3, [r7, #24]
 800db30:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800db32:	693b      	ldr	r3, [r7, #16]
 800db34:	3b01      	subs	r3, #1
 800db36:	0a1b      	lsrs	r3, r3, #8
 800db38:	b2da      	uxtb	r2, r3
 800db3a:	69bb      	ldr	r3, [r7, #24]
 800db3c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800db3e:	693b      	ldr	r3, [r7, #16]
 800db40:	b2db      	uxtb	r3, r3
 800db42:	3b01      	subs	r3, #1
 800db44:	b2da      	uxtb	r2, r3
 800db46:	69bb      	ldr	r3, [r7, #24]
 800db48:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800db4a:	69bb      	ldr	r3, [r7, #24]
 800db4c:	2202      	movs	r2, #2
 800db4e:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800db50:	8abb      	ldrh	r3, [r7, #20]
 800db52:	141b      	asrs	r3, r3, #16
 800db54:	b2da      	uxtb	r2, r3
 800db56:	69bb      	ldr	r3, [r7, #24]
 800db58:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800db5a:	8abb      	ldrh	r3, [r7, #20]
 800db5c:	0a1b      	lsrs	r3, r3, #8
 800db5e:	b29b      	uxth	r3, r3
 800db60:	b2da      	uxtb	r2, r3
 800db62:	69bb      	ldr	r3, [r7, #24]
 800db64:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800db66:	8abb      	ldrh	r3, [r7, #20]
 800db68:	b2da      	uxtb	r2, r3
 800db6a:	69bb      	ldr	r3, [r7, #24]
 800db6c:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800db6e:	69bb      	ldr	r3, [r7, #24]
 800db70:	220c      	movs	r2, #12
 800db72:	60da      	str	r2, [r3, #12]

  return 0;
 800db74:	2300      	movs	r3, #0
}
 800db76:	4618      	mov	r0, r3
 800db78:	3720      	adds	r7, #32
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}
	...

0800db80 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b086      	sub	sp, #24
 800db84:	af00      	add	r7, sp, #0
 800db86:	60f8      	str	r0, [r7, #12]
 800db88:	460b      	mov	r3, r1
 800db8a:	607a      	str	r2, [r7, #4]
 800db8c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800db94:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800db96:	2317      	movs	r3, #23
 800db98:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	3304      	adds	r3, #4
 800db9e:	781b      	ldrb	r3, [r3, #0]
 800dba0:	b29b      	uxth	r3, r3
 800dba2:	8afa      	ldrh	r2, [r7, #22]
 800dba4:	429a      	cmp	r2, r3
 800dba6:	d303      	bcc.n	800dbb0 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	3304      	adds	r3, #4
 800dbac:	781b      	ldrb	r3, [r3, #0]
 800dbae:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800dbb0:	8afb      	ldrh	r3, [r7, #22]
 800dbb2:	461a      	mov	r2, r3
 800dbb4:	4904      	ldr	r1, [pc, #16]	; (800dbc8 <SCSI_ModeSense6+0x48>)
 800dbb6:	6938      	ldr	r0, [r7, #16]
 800dbb8:	f000 fd70 	bl	800e69c <SCSI_UpdateBotData>

  return 0;
 800dbbc:	2300      	movs	r3, #0
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3718      	adds	r7, #24
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}
 800dbc6:	bf00      	nop
 800dbc8:	240000c4 	.word	0x240000c4

0800dbcc <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b086      	sub	sp, #24
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	60f8      	str	r0, [r7, #12]
 800dbd4:	460b      	mov	r3, r1
 800dbd6:	607a      	str	r2, [r7, #4]
 800dbd8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dbe0:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800dbe2:	231b      	movs	r3, #27
 800dbe4:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	3308      	adds	r3, #8
 800dbea:	781b      	ldrb	r3, [r3, #0]
 800dbec:	b29b      	uxth	r3, r3
 800dbee:	8afa      	ldrh	r2, [r7, #22]
 800dbf0:	429a      	cmp	r2, r3
 800dbf2:	d303      	bcc.n	800dbfc <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	3308      	adds	r3, #8
 800dbf8:	781b      	ldrb	r3, [r3, #0]
 800dbfa:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800dbfc:	8afb      	ldrh	r3, [r7, #22]
 800dbfe:	461a      	mov	r2, r3
 800dc00:	4904      	ldr	r1, [pc, #16]	; (800dc14 <SCSI_ModeSense10+0x48>)
 800dc02:	6938      	ldr	r0, [r7, #16]
 800dc04:	f000 fd4a 	bl	800e69c <SCSI_UpdateBotData>

  return 0;
 800dc08:	2300      	movs	r3, #0
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3718      	adds	r7, #24
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}
 800dc12:	bf00      	nop
 800dc14:	240000dc 	.word	0x240000dc

0800dc18 <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b086      	sub	sp, #24
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	60f8      	str	r0, [r7, #12]
 800dc20:	460b      	mov	r3, r1
 800dc22:	607a      	str	r2, [r7, #4]
 800dc24:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc2c:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 800dc2e:	693b      	ldr	r3, [r7, #16]
 800dc30:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d10a      	bne.n	800dc4e <SCSI_RequestSense+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800dc38:	693b      	ldr	r3, [r7, #16]
 800dc3a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800dc3e:	2320      	movs	r3, #32
 800dc40:	2205      	movs	r2, #5
 800dc42:	68f8      	ldr	r0, [r7, #12]
 800dc44:	f000 f861 	bl	800dd0a <SCSI_SenseCode>
    return -1;
 800dc48:	f04f 33ff 	mov.w	r3, #4294967295
 800dc4c:	e059      	b.n	800dd02 <SCSI_RequestSense+0xea>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800dc4e:	2300      	movs	r3, #0
 800dc50:	75fb      	strb	r3, [r7, #23]
 800dc52:	e007      	b.n	800dc64 <SCSI_RequestSense+0x4c>
  {
    hmsc->bot_data[i] = 0U;
 800dc54:	7dfb      	ldrb	r3, [r7, #23]
 800dc56:	693a      	ldr	r2, [r7, #16]
 800dc58:	4413      	add	r3, r2
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800dc5e:	7dfb      	ldrb	r3, [r7, #23]
 800dc60:	3301      	adds	r3, #1
 800dc62:	75fb      	strb	r3, [r7, #23]
 800dc64:	7dfb      	ldrb	r3, [r7, #23]
 800dc66:	2b11      	cmp	r3, #17
 800dc68:	d9f4      	bls.n	800dc54 <SCSI_RequestSense+0x3c>
  }

  hmsc->bot_data[0] = 0x70U;
 800dc6a:	693b      	ldr	r3, [r7, #16]
 800dc6c:	2270      	movs	r2, #112	; 0x70
 800dc6e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800dc70:	693b      	ldr	r3, [r7, #16]
 800dc72:	220c      	movs	r2, #12
 800dc74:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800dc76:	693b      	ldr	r3, [r7, #16]
 800dc78:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800dc82:	429a      	cmp	r2, r3
 800dc84:	d02e      	beq.n	800dce4 <SCSI_RequestSense+0xcc>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800dc86:	693b      	ldr	r3, [r7, #16]
 800dc88:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800dc8c:	461a      	mov	r2, r3
 800dc8e:	693b      	ldr	r3, [r7, #16]
 800dc90:	3248      	adds	r2, #72	; 0x48
 800dc92:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800dc96:	693b      	ldr	r3, [r7, #16]
 800dc98:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800dc9a:	693b      	ldr	r3, [r7, #16]
 800dc9c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800dca0:	693a      	ldr	r2, [r7, #16]
 800dca2:	3348      	adds	r3, #72	; 0x48
 800dca4:	00db      	lsls	r3, r3, #3
 800dca6:	4413      	add	r3, r2
 800dca8:	791a      	ldrb	r2, [r3, #4]
 800dcaa:	693b      	ldr	r3, [r7, #16]
 800dcac:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800dcae:	693b      	ldr	r3, [r7, #16]
 800dcb0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800dcb4:	693a      	ldr	r2, [r7, #16]
 800dcb6:	3348      	adds	r3, #72	; 0x48
 800dcb8:	00db      	lsls	r3, r3, #3
 800dcba:	4413      	add	r3, r2
 800dcbc:	795a      	ldrb	r2, [r3, #5]
 800dcbe:	693b      	ldr	r3, [r7, #16]
 800dcc0:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800dcc2:	693b      	ldr	r3, [r7, #16]
 800dcc4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800dcc8:	3301      	adds	r3, #1
 800dcca:	b2da      	uxtb	r2, r3
 800dccc:	693b      	ldr	r3, [r7, #16]
 800dcce:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800dcd2:	693b      	ldr	r3, [r7, #16]
 800dcd4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800dcd8:	2b04      	cmp	r3, #4
 800dcda:	d103      	bne.n	800dce4 <SCSI_RequestSense+0xcc>
    {
      hmsc->scsi_sense_head = 0U;
 800dcdc:	693b      	ldr	r3, [r7, #16]
 800dcde:	2200      	movs	r2, #0
 800dce0:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800dce4:	693b      	ldr	r3, [r7, #16]
 800dce6:	2212      	movs	r2, #18
 800dce8:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	3304      	adds	r3, #4
 800dcee:	781b      	ldrb	r3, [r3, #0]
 800dcf0:	2b12      	cmp	r3, #18
 800dcf2:	d805      	bhi.n	800dd00 <SCSI_RequestSense+0xe8>
  {
    hmsc->bot_data_length = params[4];
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	3304      	adds	r3, #4
 800dcf8:	781b      	ldrb	r3, [r3, #0]
 800dcfa:	461a      	mov	r2, r3
 800dcfc:	693b      	ldr	r3, [r7, #16]
 800dcfe:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800dd00:	2300      	movs	r3, #0
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	3718      	adds	r7, #24
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}

0800dd0a <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800dd0a:	b480      	push	{r7}
 800dd0c:	b085      	sub	sp, #20
 800dd0e:	af00      	add	r7, sp, #0
 800dd10:	6078      	str	r0, [r7, #4]
 800dd12:	4608      	mov	r0, r1
 800dd14:	4611      	mov	r1, r2
 800dd16:	461a      	mov	r2, r3
 800dd18:	4603      	mov	r3, r0
 800dd1a:	70fb      	strb	r3, [r7, #3]
 800dd1c:	460b      	mov	r3, r1
 800dd1e:	70bb      	strb	r3, [r7, #2]
 800dd20:	4613      	mov	r3, r2
 800dd22:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dd2a:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800dd32:	461a      	mov	r2, r3
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	3248      	adds	r2, #72	; 0x48
 800dd38:	78b9      	ldrb	r1, [r7, #2]
 800dd3a:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800dd44:	68fa      	ldr	r2, [r7, #12]
 800dd46:	3348      	adds	r3, #72	; 0x48
 800dd48:	00db      	lsls	r3, r3, #3
 800dd4a:	4413      	add	r3, r2
 800dd4c:	787a      	ldrb	r2, [r7, #1]
 800dd4e:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800dd56:	68fa      	ldr	r2, [r7, #12]
 800dd58:	3348      	adds	r3, #72	; 0x48
 800dd5a:	00db      	lsls	r3, r3, #3
 800dd5c:	4413      	add	r3, r2
 800dd5e:	2200      	movs	r2, #0
 800dd60:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800dd68:	3301      	adds	r3, #1
 800dd6a:	b2da      	uxtb	r2, r3
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800dd78:	2b04      	cmp	r3, #4
 800dd7a:	d103      	bne.n	800dd84 <SCSI_SenseCode+0x7a>
  {
    hmsc->scsi_sense_tail = 0U;
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	2200      	movs	r2, #0
 800dd80:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  }
}
 800dd84:	bf00      	nop
 800dd86:	3714      	adds	r7, #20
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8e:	4770      	bx	lr

0800dd90 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b086      	sub	sp, #24
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	60f8      	str	r0, [r7, #12]
 800dd98:	460b      	mov	r3, r1
 800dd9a:	607a      	str	r2, [r7, #4]
 800dd9c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dda4:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800dda6:	697b      	ldr	r3, [r7, #20]
 800dda8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800ddac:	2b01      	cmp	r3, #1
 800ddae:	d10f      	bne.n	800ddd0 <SCSI_StartStopUnit+0x40>
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	3304      	adds	r3, #4
 800ddb4:	781b      	ldrb	r3, [r3, #0]
 800ddb6:	f003 0303 	and.w	r3, r3, #3
 800ddba:	2b02      	cmp	r3, #2
 800ddbc:	d108      	bne.n	800ddd0 <SCSI_StartStopUnit+0x40>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800ddbe:	7af9      	ldrb	r1, [r7, #11]
 800ddc0:	2324      	movs	r3, #36	; 0x24
 800ddc2:	2205      	movs	r2, #5
 800ddc4:	68f8      	ldr	r0, [r7, #12]
 800ddc6:	f7ff ffa0 	bl	800dd0a <SCSI_SenseCode>

    return -1;
 800ddca:	f04f 33ff 	mov.w	r3, #4294967295
 800ddce:	e026      	b.n	800de1e <SCSI_StartStopUnit+0x8e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	3304      	adds	r3, #4
 800ddd4:	781b      	ldrb	r3, [r3, #0]
 800ddd6:	f003 0303 	and.w	r3, r3, #3
 800ddda:	2b01      	cmp	r3, #1
 800dddc:	d104      	bne.n	800dde8 <SCSI_StartStopUnit+0x58>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800ddde:	697b      	ldr	r3, [r7, #20]
 800dde0:	2200      	movs	r2, #0
 800dde2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800dde6:	e016      	b.n	800de16 <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	3304      	adds	r3, #4
 800ddec:	781b      	ldrb	r3, [r3, #0]
 800ddee:	f003 0303 	and.w	r3, r3, #3
 800ddf2:	2b02      	cmp	r3, #2
 800ddf4:	d104      	bne.n	800de00 <SCSI_StartStopUnit+0x70>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800ddf6:	697b      	ldr	r3, [r7, #20]
 800ddf8:	2202      	movs	r2, #2
 800ddfa:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800ddfe:	e00a      	b.n	800de16 <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	3304      	adds	r3, #4
 800de04:	781b      	ldrb	r3, [r3, #0]
 800de06:	f003 0303 	and.w	r3, r3, #3
 800de0a:	2b03      	cmp	r3, #3
 800de0c:	d103      	bne.n	800de16 <SCSI_StartStopUnit+0x86>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800de0e:	697b      	ldr	r3, [r7, #20]
 800de10:	2200      	movs	r2, #0
 800de12:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	2200      	movs	r2, #0
 800de1a:	60da      	str	r2, [r3, #12]

  return 0;
 800de1c:	2300      	movs	r3, #0
}
 800de1e:	4618      	mov	r0, r3
 800de20:	3718      	adds	r7, #24
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}

0800de26 <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800de26:	b480      	push	{r7}
 800de28:	b087      	sub	sp, #28
 800de2a:	af00      	add	r7, sp, #0
 800de2c:	60f8      	str	r0, [r7, #12]
 800de2e:	460b      	mov	r3, r1
 800de30:	607a      	str	r2, [r7, #4]
 800de32:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de3a:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	3304      	adds	r3, #4
 800de40:	781b      	ldrb	r3, [r3, #0]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d104      	bne.n	800de50 <SCSI_AllowPreventRemovable+0x2a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800de46:	697b      	ldr	r3, [r7, #20]
 800de48:	2200      	movs	r2, #0
 800de4a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800de4e:	e003      	b.n	800de58 <SCSI_AllowPreventRemovable+0x32>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	2201      	movs	r2, #1
 800de54:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 800de58:	697b      	ldr	r3, [r7, #20]
 800de5a:	2200      	movs	r2, #0
 800de5c:	60da      	str	r2, [r3, #12]

  return 0;
 800de5e:	2300      	movs	r3, #0
}
 800de60:	4618      	mov	r0, r3
 800de62:	371c      	adds	r7, #28
 800de64:	46bd      	mov	sp, r7
 800de66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6a:	4770      	bx	lr

0800de6c <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b086      	sub	sp, #24
 800de70:	af00      	add	r7, sp, #0
 800de72:	60f8      	str	r0, [r7, #12]
 800de74:	460b      	mov	r3, r1
 800de76:	607a      	str	r2, [r7, #4]
 800de78:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de80:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800de82:	697b      	ldr	r3, [r7, #20]
 800de84:	7a1b      	ldrb	r3, [r3, #8]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d17c      	bne.n	800df84 <SCSI_Read10+0x118>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800de8a:	697b      	ldr	r3, [r7, #20]
 800de8c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800de90:	b25b      	sxtb	r3, r3
 800de92:	2b00      	cmp	r3, #0
 800de94:	db0a      	blt.n	800deac <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800de96:	697b      	ldr	r3, [r7, #20]
 800de98:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800de9c:	2320      	movs	r3, #32
 800de9e:	2205      	movs	r2, #5
 800dea0:	68f8      	ldr	r0, [r7, #12]
 800dea2:	f7ff ff32 	bl	800dd0a <SCSI_SenseCode>
      return -1;
 800dea6:	f04f 33ff 	mov.w	r3, #4294967295
 800deaa:	e075      	b.n	800df98 <SCSI_Read10+0x12c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800deac:	697b      	ldr	r3, [r7, #20]
 800deae:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800deb2:	2b02      	cmp	r3, #2
 800deb4:	d108      	bne.n	800dec8 <SCSI_Read10+0x5c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800deb6:	7af9      	ldrb	r1, [r7, #11]
 800deb8:	233a      	movs	r3, #58	; 0x3a
 800deba:	2202      	movs	r2, #2
 800debc:	68f8      	ldr	r0, [r7, #12]
 800debe:	f7ff ff24 	bl	800dd0a <SCSI_SenseCode>

      return -1;
 800dec2:	f04f 33ff 	mov.w	r3, #4294967295
 800dec6:	e067      	b.n	800df98 <SCSI_Read10+0x12c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dece:	689b      	ldr	r3, [r3, #8]
 800ded0:	7afa      	ldrb	r2, [r7, #11]
 800ded2:	4610      	mov	r0, r2
 800ded4:	4798      	blx	r3
 800ded6:	4603      	mov	r3, r0
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d008      	beq.n	800deee <SCSI_Read10+0x82>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800dedc:	7af9      	ldrb	r1, [r7, #11]
 800dede:	233a      	movs	r3, #58	; 0x3a
 800dee0:	2202      	movs	r2, #2
 800dee2:	68f8      	ldr	r0, [r7, #12]
 800dee4:	f7ff ff11 	bl	800dd0a <SCSI_SenseCode>
      return -1;
 800dee8:	f04f 33ff 	mov.w	r3, #4294967295
 800deec:	e054      	b.n	800df98 <SCSI_Read10+0x12c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	3302      	adds	r3, #2
 800def2:	781b      	ldrb	r3, [r3, #0]
 800def4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	3303      	adds	r3, #3
 800defa:	781b      	ldrb	r3, [r3, #0]
 800defc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800defe:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	3304      	adds	r3, #4
 800df04:	781b      	ldrb	r3, [r3, #0]
 800df06:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800df08:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800df0a:	687a      	ldr	r2, [r7, #4]
 800df0c:	3205      	adds	r2, #5
 800df0e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800df10:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800df12:	697b      	ldr	r3, [r7, #20]
 800df14:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	3307      	adds	r3, #7
 800df1c:	781b      	ldrb	r3, [r3, #0]
 800df1e:	021b      	lsls	r3, r3, #8
 800df20:	687a      	ldr	r2, [r7, #4]
 800df22:	3208      	adds	r2, #8
 800df24:	7812      	ldrb	r2, [r2, #0]
 800df26:	431a      	orrs	r2, r3
 800df28:	697b      	ldr	r3, [r7, #20]
 800df2a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800df2e:	697b      	ldr	r3, [r7, #20]
 800df30:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800df34:	697b      	ldr	r3, [r7, #20]
 800df36:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800df3a:	7af9      	ldrb	r1, [r7, #11]
 800df3c:	68f8      	ldr	r0, [r7, #12]
 800df3e:	f000 fa95 	bl	800e46c <SCSI_CheckAddressRange>
 800df42:	4603      	mov	r3, r0
 800df44:	2b00      	cmp	r3, #0
 800df46:	da02      	bge.n	800df4e <SCSI_Read10+0xe2>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800df48:	f04f 33ff 	mov.w	r3, #4294967295
 800df4c:	e024      	b.n	800df98 <SCSI_Read10+0x12c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800df4e:	697b      	ldr	r3, [r7, #20]
 800df50:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800df54:	697b      	ldr	r3, [r7, #20]
 800df56:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800df5a:	6979      	ldr	r1, [r7, #20]
 800df5c:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800df60:	fb01 f303 	mul.w	r3, r1, r3
 800df64:	429a      	cmp	r2, r3
 800df66:	d00a      	beq.n	800df7e <SCSI_Read10+0x112>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800df68:	697b      	ldr	r3, [r7, #20]
 800df6a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800df6e:	2320      	movs	r3, #32
 800df70:	2205      	movs	r2, #5
 800df72:	68f8      	ldr	r0, [r7, #12]
 800df74:	f7ff fec9 	bl	800dd0a <SCSI_SenseCode>
      return -1;
 800df78:	f04f 33ff 	mov.w	r3, #4294967295
 800df7c:	e00c      	b.n	800df98 <SCSI_Read10+0x12c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	2202      	movs	r2, #2
 800df82:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800df84:	697b      	ldr	r3, [r7, #20]
 800df86:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df8a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800df8c:	7afb      	ldrb	r3, [r7, #11]
 800df8e:	4619      	mov	r1, r3
 800df90:	68f8      	ldr	r0, [r7, #12]
 800df92:	f000 fa8d 	bl	800e4b0 <SCSI_ProcessRead>
 800df96:	4603      	mov	r3, r0
}
 800df98:	4618      	mov	r0, r3
 800df9a:	3718      	adds	r7, #24
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}

0800dfa0 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b086      	sub	sp, #24
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	60f8      	str	r0, [r7, #12]
 800dfa8:	460b      	mov	r3, r1
 800dfaa:	607a      	str	r2, [r7, #4]
 800dfac:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dfb4:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800dfb6:	697b      	ldr	r3, [r7, #20]
 800dfb8:	7a1b      	ldrb	r3, [r3, #8]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	f040 8087 	bne.w	800e0ce <SCSI_Read12+0x12e>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800dfc0:	697b      	ldr	r3, [r7, #20]
 800dfc2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800dfc6:	b25b      	sxtb	r3, r3
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	db0a      	blt.n	800dfe2 <SCSI_Read12+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800dfcc:	697b      	ldr	r3, [r7, #20]
 800dfce:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800dfd2:	2320      	movs	r3, #32
 800dfd4:	2205      	movs	r2, #5
 800dfd6:	68f8      	ldr	r0, [r7, #12]
 800dfd8:	f7ff fe97 	bl	800dd0a <SCSI_SenseCode>
      return -1;
 800dfdc:	f04f 33ff 	mov.w	r3, #4294967295
 800dfe0:	e07f      	b.n	800e0e2 <SCSI_Read12+0x142>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800dfe8:	2b02      	cmp	r3, #2
 800dfea:	d108      	bne.n	800dffe <SCSI_Read12+0x5e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800dfec:	7af9      	ldrb	r1, [r7, #11]
 800dfee:	233a      	movs	r3, #58	; 0x3a
 800dff0:	2202      	movs	r2, #2
 800dff2:	68f8      	ldr	r0, [r7, #12]
 800dff4:	f7ff fe89 	bl	800dd0a <SCSI_SenseCode>
      return -1;
 800dff8:	f04f 33ff 	mov.w	r3, #4294967295
 800dffc:	e071      	b.n	800e0e2 <SCSI_Read12+0x142>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e004:	689b      	ldr	r3, [r3, #8]
 800e006:	7afa      	ldrb	r2, [r7, #11]
 800e008:	4610      	mov	r0, r2
 800e00a:	4798      	blx	r3
 800e00c:	4603      	mov	r3, r0
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d008      	beq.n	800e024 <SCSI_Read12+0x84>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e012:	7af9      	ldrb	r1, [r7, #11]
 800e014:	233a      	movs	r3, #58	; 0x3a
 800e016:	2202      	movs	r2, #2
 800e018:	68f8      	ldr	r0, [r7, #12]
 800e01a:	f7ff fe76 	bl	800dd0a <SCSI_SenseCode>
      return -1;
 800e01e:	f04f 33ff 	mov.w	r3, #4294967295
 800e022:	e05e      	b.n	800e0e2 <SCSI_Read12+0x142>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	3302      	adds	r3, #2
 800e028:	781b      	ldrb	r3, [r3, #0]
 800e02a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	3303      	adds	r3, #3
 800e030:	781b      	ldrb	r3, [r3, #0]
 800e032:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e034:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	3304      	adds	r3, #4
 800e03a:	781b      	ldrb	r3, [r3, #0]
 800e03c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800e03e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800e040:	687a      	ldr	r2, [r7, #4]
 800e042:	3205      	adds	r2, #5
 800e044:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800e046:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e048:	697b      	ldr	r3, [r7, #20]
 800e04a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	3306      	adds	r3, #6
 800e052:	781b      	ldrb	r3, [r3, #0]
 800e054:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	3307      	adds	r3, #7
 800e05a:	781b      	ldrb	r3, [r3, #0]
 800e05c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e05e:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	3308      	adds	r3, #8
 800e064:	781b      	ldrb	r3, [r3, #0]
 800e066:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800e068:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800e06a:	687a      	ldr	r2, [r7, #4]
 800e06c:	3209      	adds	r2, #9
 800e06e:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800e070:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e078:	697b      	ldr	r3, [r7, #20]
 800e07a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e07e:	697b      	ldr	r3, [r7, #20]
 800e080:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e084:	7af9      	ldrb	r1, [r7, #11]
 800e086:	68f8      	ldr	r0, [r7, #12]
 800e088:	f000 f9f0 	bl	800e46c <SCSI_CheckAddressRange>
 800e08c:	4603      	mov	r3, r0
 800e08e:	2b00      	cmp	r3, #0
 800e090:	da02      	bge.n	800e098 <SCSI_Read12+0xf8>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e092:	f04f 33ff 	mov.w	r3, #4294967295
 800e096:	e024      	b.n	800e0e2 <SCSI_Read12+0x142>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800e098:	697b      	ldr	r3, [r7, #20]
 800e09a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e0a4:	6979      	ldr	r1, [r7, #20]
 800e0a6:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800e0aa:	fb01 f303 	mul.w	r3, r1, r3
 800e0ae:	429a      	cmp	r2, r3
 800e0b0:	d00a      	beq.n	800e0c8 <SCSI_Read12+0x128>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e0b8:	2320      	movs	r3, #32
 800e0ba:	2205      	movs	r2, #5
 800e0bc:	68f8      	ldr	r0, [r7, #12]
 800e0be:	f7ff fe24 	bl	800dd0a <SCSI_SenseCode>
      return -1;
 800e0c2:	f04f 33ff 	mov.w	r3, #4294967295
 800e0c6:	e00c      	b.n	800e0e2 <SCSI_Read12+0x142>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	2202      	movs	r2, #2
 800e0cc:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800e0ce:	697b      	ldr	r3, [r7, #20]
 800e0d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e0d4:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800e0d6:	7afb      	ldrb	r3, [r7, #11]
 800e0d8:	4619      	mov	r1, r3
 800e0da:	68f8      	ldr	r0, [r7, #12]
 800e0dc:	f000 f9e8 	bl	800e4b0 <SCSI_ProcessRead>
 800e0e0:	4603      	mov	r3, r0
}
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	3718      	adds	r7, #24
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd80      	pop	{r7, pc}

0800e0ea <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e0ea:	b580      	push	{r7, lr}
 800e0ec:	b086      	sub	sp, #24
 800e0ee:	af00      	add	r7, sp, #0
 800e0f0:	60f8      	str	r0, [r7, #12]
 800e0f2:	460b      	mov	r3, r1
 800e0f4:	607a      	str	r2, [r7, #4]
 800e0f6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e0fe:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800e100:	697b      	ldr	r3, [r7, #20]
 800e102:	7a1b      	ldrb	r3, [r3, #8]
 800e104:	2b00      	cmp	r3, #0
 800e106:	f040 80a5 	bne.w	800e254 <SCSI_Write10+0x16a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800e10a:	697b      	ldr	r3, [r7, #20]
 800e10c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e110:	2b00      	cmp	r3, #0
 800e112:	d10a      	bne.n	800e12a <SCSI_Write10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e114:	697b      	ldr	r3, [r7, #20]
 800e116:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e11a:	2320      	movs	r3, #32
 800e11c:	2205      	movs	r2, #5
 800e11e:	68f8      	ldr	r0, [r7, #12]
 800e120:	f7ff fdf3 	bl	800dd0a <SCSI_SenseCode>
      return -1;
 800e124:	f04f 33ff 	mov.w	r3, #4294967295
 800e128:	e09a      	b.n	800e260 <SCSI_Write10+0x176>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800e12a:	697b      	ldr	r3, [r7, #20]
 800e12c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800e130:	b25b      	sxtb	r3, r3
 800e132:	2b00      	cmp	r3, #0
 800e134:	da0a      	bge.n	800e14c <SCSI_Write10+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e136:	697b      	ldr	r3, [r7, #20]
 800e138:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e13c:	2320      	movs	r3, #32
 800e13e:	2205      	movs	r2, #5
 800e140:	68f8      	ldr	r0, [r7, #12]
 800e142:	f7ff fde2 	bl	800dd0a <SCSI_SenseCode>
      return -1;
 800e146:	f04f 33ff 	mov.w	r3, #4294967295
 800e14a:	e089      	b.n	800e260 <SCSI_Write10+0x176>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e152:	689b      	ldr	r3, [r3, #8]
 800e154:	7afa      	ldrb	r2, [r7, #11]
 800e156:	4610      	mov	r0, r2
 800e158:	4798      	blx	r3
 800e15a:	4603      	mov	r3, r0
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d008      	beq.n	800e172 <SCSI_Write10+0x88>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e160:	7af9      	ldrb	r1, [r7, #11]
 800e162:	233a      	movs	r3, #58	; 0x3a
 800e164:	2202      	movs	r2, #2
 800e166:	68f8      	ldr	r0, [r7, #12]
 800e168:	f7ff fdcf 	bl	800dd0a <SCSI_SenseCode>
      return -1;
 800e16c:	f04f 33ff 	mov.w	r3, #4294967295
 800e170:	e076      	b.n	800e260 <SCSI_Write10+0x176>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e178:	68db      	ldr	r3, [r3, #12]
 800e17a:	7afa      	ldrb	r2, [r7, #11]
 800e17c:	4610      	mov	r0, r2
 800e17e:	4798      	blx	r3
 800e180:	4603      	mov	r3, r0
 800e182:	2b00      	cmp	r3, #0
 800e184:	d008      	beq.n	800e198 <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800e186:	7af9      	ldrb	r1, [r7, #11]
 800e188:	2327      	movs	r3, #39	; 0x27
 800e18a:	2202      	movs	r2, #2
 800e18c:	68f8      	ldr	r0, [r7, #12]
 800e18e:	f7ff fdbc 	bl	800dd0a <SCSI_SenseCode>
      return -1;
 800e192:	f04f 33ff 	mov.w	r3, #4294967295
 800e196:	e063      	b.n	800e260 <SCSI_Write10+0x176>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	3302      	adds	r3, #2
 800e19c:	781b      	ldrb	r3, [r3, #0]
 800e19e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	3303      	adds	r3, #3
 800e1a4:	781b      	ldrb	r3, [r3, #0]
 800e1a6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e1a8:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	3304      	adds	r3, #4
 800e1ae:	781b      	ldrb	r3, [r3, #0]
 800e1b0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800e1b2:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800e1b4:	687a      	ldr	r2, [r7, #4]
 800e1b6:	3205      	adds	r2, #5
 800e1b8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800e1ba:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e1bc:	697b      	ldr	r3, [r7, #20]
 800e1be:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	3307      	adds	r3, #7
 800e1c6:	781b      	ldrb	r3, [r3, #0]
 800e1c8:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800e1ca:	687a      	ldr	r2, [r7, #4]
 800e1cc:	3208      	adds	r2, #8
 800e1ce:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800e1d0:	431a      	orrs	r2, r3
 800e1d2:	697b      	ldr	r3, [r7, #20]
 800e1d4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e1d8:	697b      	ldr	r3, [r7, #20]
 800e1da:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e1e4:	7af9      	ldrb	r1, [r7, #11]
 800e1e6:	68f8      	ldr	r0, [r7, #12]
 800e1e8:	f000 f940 	bl	800e46c <SCSI_CheckAddressRange>
 800e1ec:	4603      	mov	r3, r0
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	da02      	bge.n	800e1f8 <SCSI_Write10+0x10e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e1f2:	f04f 33ff 	mov.w	r3, #4294967295
 800e1f6:	e033      	b.n	800e260 <SCSI_Write10+0x176>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e1f8:	697b      	ldr	r3, [r7, #20]
 800e1fa:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e1fe:	697a      	ldr	r2, [r7, #20]
 800e200:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800e204:	fb02 f303 	mul.w	r3, r2, r3
 800e208:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e210:	693a      	ldr	r2, [r7, #16]
 800e212:	429a      	cmp	r2, r3
 800e214:	d00a      	beq.n	800e22c <SCSI_Write10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e216:	697b      	ldr	r3, [r7, #20]
 800e218:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e21c:	2320      	movs	r3, #32
 800e21e:	2205      	movs	r2, #5
 800e220:	68f8      	ldr	r0, [r7, #12]
 800e222:	f7ff fd72 	bl	800dd0a <SCSI_SenseCode>
      return -1;
 800e226:	f04f 33ff 	mov.w	r3, #4294967295
 800e22a:	e019      	b.n	800e260 <SCSI_Write10+0x176>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800e22c:	693b      	ldr	r3, [r7, #16]
 800e22e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e232:	bf28      	it	cs
 800e234:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e238:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800e23a:	697b      	ldr	r3, [r7, #20]
 800e23c:	2201      	movs	r2, #1
 800e23e:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800e240:	697b      	ldr	r3, [r7, #20]
 800e242:	f103 0210 	add.w	r2, r3, #16
 800e246:	693b      	ldr	r3, [r7, #16]
 800e248:	2101      	movs	r1, #1
 800e24a:	68f8      	ldr	r0, [r7, #12]
 800e24c:	f004 f945 	bl	80124da <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800e250:	2300      	movs	r3, #0
 800e252:	e005      	b.n	800e260 <SCSI_Write10+0x176>
    return SCSI_ProcessWrite(pdev, lun);
 800e254:	7afb      	ldrb	r3, [r7, #11]
 800e256:	4619      	mov	r1, r3
 800e258:	68f8      	ldr	r0, [r7, #12]
 800e25a:	f000 f99c 	bl	800e596 <SCSI_ProcessWrite>
 800e25e:	4603      	mov	r3, r0
}
 800e260:	4618      	mov	r0, r3
 800e262:	3718      	adds	r7, #24
 800e264:	46bd      	mov	sp, r7
 800e266:	bd80      	pop	{r7, pc}

0800e268 <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b086      	sub	sp, #24
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	60f8      	str	r0, [r7, #12]
 800e270:	460b      	mov	r3, r1
 800e272:	607a      	str	r2, [r7, #4]
 800e274:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e27c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800e27e:	697b      	ldr	r3, [r7, #20]
 800e280:	7a1b      	ldrb	r3, [r3, #8]
 800e282:	2b00      	cmp	r3, #0
 800e284:	f040 80b5 	bne.w	800e3f2 <SCSI_Write12+0x18a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800e288:	697b      	ldr	r3, [r7, #20]
 800e28a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d10a      	bne.n	800e2a8 <SCSI_Write12+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e292:	697b      	ldr	r3, [r7, #20]
 800e294:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e298:	2320      	movs	r3, #32
 800e29a:	2205      	movs	r2, #5
 800e29c:	68f8      	ldr	r0, [r7, #12]
 800e29e:	f7ff fd34 	bl	800dd0a <SCSI_SenseCode>
      return -1;
 800e2a2:	f04f 33ff 	mov.w	r3, #4294967295
 800e2a6:	e0aa      	b.n	800e3fe <SCSI_Write12+0x196>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800e2a8:	697b      	ldr	r3, [r7, #20]
 800e2aa:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800e2ae:	b25b      	sxtb	r3, r3
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	da0a      	bge.n	800e2ca <SCSI_Write12+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e2b4:	697b      	ldr	r3, [r7, #20]
 800e2b6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e2ba:	2320      	movs	r3, #32
 800e2bc:	2205      	movs	r2, #5
 800e2be:	68f8      	ldr	r0, [r7, #12]
 800e2c0:	f7ff fd23 	bl	800dd0a <SCSI_SenseCode>
      return -1;
 800e2c4:	f04f 33ff 	mov.w	r3, #4294967295
 800e2c8:	e099      	b.n	800e3fe <SCSI_Write12+0x196>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e2d0:	689b      	ldr	r3, [r3, #8]
 800e2d2:	7afa      	ldrb	r2, [r7, #11]
 800e2d4:	4610      	mov	r0, r2
 800e2d6:	4798      	blx	r3
 800e2d8:	4603      	mov	r3, r0
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d00b      	beq.n	800e2f6 <SCSI_Write12+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e2de:	7af9      	ldrb	r1, [r7, #11]
 800e2e0:	233a      	movs	r3, #58	; 0x3a
 800e2e2:	2202      	movs	r2, #2
 800e2e4:	68f8      	ldr	r0, [r7, #12]
 800e2e6:	f7ff fd10 	bl	800dd0a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800e2ea:	697b      	ldr	r3, [r7, #20]
 800e2ec:	2205      	movs	r2, #5
 800e2ee:	721a      	strb	r2, [r3, #8]
      return -1;
 800e2f0:	f04f 33ff 	mov.w	r3, #4294967295
 800e2f4:	e083      	b.n	800e3fe <SCSI_Write12+0x196>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e2fc:	68db      	ldr	r3, [r3, #12]
 800e2fe:	7afa      	ldrb	r2, [r7, #11]
 800e300:	4610      	mov	r0, r2
 800e302:	4798      	blx	r3
 800e304:	4603      	mov	r3, r0
 800e306:	2b00      	cmp	r3, #0
 800e308:	d00b      	beq.n	800e322 <SCSI_Write12+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800e30a:	7af9      	ldrb	r1, [r7, #11]
 800e30c:	2327      	movs	r3, #39	; 0x27
 800e30e:	2202      	movs	r2, #2
 800e310:	68f8      	ldr	r0, [r7, #12]
 800e312:	f7ff fcfa 	bl	800dd0a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800e316:	697b      	ldr	r3, [r7, #20]
 800e318:	2205      	movs	r2, #5
 800e31a:	721a      	strb	r2, [r3, #8]
      return -1;
 800e31c:	f04f 33ff 	mov.w	r3, #4294967295
 800e320:	e06d      	b.n	800e3fe <SCSI_Write12+0x196>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	3302      	adds	r3, #2
 800e326:	781b      	ldrb	r3, [r3, #0]
 800e328:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	3303      	adds	r3, #3
 800e32e:	781b      	ldrb	r3, [r3, #0]
 800e330:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e332:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	3304      	adds	r3, #4
 800e338:	781b      	ldrb	r3, [r3, #0]
 800e33a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800e33c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800e33e:	687a      	ldr	r2, [r7, #4]
 800e340:	3205      	adds	r2, #5
 800e342:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800e344:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e346:	697b      	ldr	r3, [r7, #20]
 800e348:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	3306      	adds	r3, #6
 800e350:	781b      	ldrb	r3, [r3, #0]
 800e352:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	3307      	adds	r3, #7
 800e358:	781b      	ldrb	r3, [r3, #0]
 800e35a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e35c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	3308      	adds	r3, #8
 800e362:	781b      	ldrb	r3, [r3, #0]
 800e364:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800e366:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800e368:	687a      	ldr	r2, [r7, #4]
 800e36a:	3209      	adds	r2, #9
 800e36c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800e36e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e370:	697b      	ldr	r3, [r7, #20]
 800e372:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e376:	697b      	ldr	r3, [r7, #20]
 800e378:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e37c:	697b      	ldr	r3, [r7, #20]
 800e37e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e382:	7af9      	ldrb	r1, [r7, #11]
 800e384:	68f8      	ldr	r0, [r7, #12]
 800e386:	f000 f871 	bl	800e46c <SCSI_CheckAddressRange>
 800e38a:	4603      	mov	r3, r0
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	da02      	bge.n	800e396 <SCSI_Write12+0x12e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e390:	f04f 33ff 	mov.w	r3, #4294967295
 800e394:	e033      	b.n	800e3fe <SCSI_Write12+0x196>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e396:	697b      	ldr	r3, [r7, #20]
 800e398:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e39c:	697a      	ldr	r2, [r7, #20]
 800e39e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800e3a2:	fb02 f303 	mul.w	r3, r2, r3
 800e3a6:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e3ae:	693a      	ldr	r2, [r7, #16]
 800e3b0:	429a      	cmp	r2, r3
 800e3b2:	d00a      	beq.n	800e3ca <SCSI_Write12+0x162>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e3b4:	697b      	ldr	r3, [r7, #20]
 800e3b6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e3ba:	2320      	movs	r3, #32
 800e3bc:	2205      	movs	r2, #5
 800e3be:	68f8      	ldr	r0, [r7, #12]
 800e3c0:	f7ff fca3 	bl	800dd0a <SCSI_SenseCode>
      return -1;
 800e3c4:	f04f 33ff 	mov.w	r3, #4294967295
 800e3c8:	e019      	b.n	800e3fe <SCSI_Write12+0x196>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800e3ca:	693b      	ldr	r3, [r7, #16]
 800e3cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3d0:	bf28      	it	cs
 800e3d2:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e3d6:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800e3d8:	697b      	ldr	r3, [r7, #20]
 800e3da:	2201      	movs	r2, #1
 800e3dc:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800e3de:	697b      	ldr	r3, [r7, #20]
 800e3e0:	f103 0210 	add.w	r2, r3, #16
 800e3e4:	693b      	ldr	r3, [r7, #16]
 800e3e6:	2101      	movs	r1, #1
 800e3e8:	68f8      	ldr	r0, [r7, #12]
 800e3ea:	f004 f876 	bl	80124da <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	e005      	b.n	800e3fe <SCSI_Write12+0x196>
    return SCSI_ProcessWrite(pdev, lun);
 800e3f2:	7afb      	ldrb	r3, [r7, #11]
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	68f8      	ldr	r0, [r7, #12]
 800e3f8:	f000 f8cd 	bl	800e596 <SCSI_ProcessWrite>
 800e3fc:	4603      	mov	r3, r0
}
 800e3fe:	4618      	mov	r0, r3
 800e400:	3718      	adds	r7, #24
 800e402:	46bd      	mov	sp, r7
 800e404:	bd80      	pop	{r7, pc}

0800e406 <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e406:	b580      	push	{r7, lr}
 800e408:	b086      	sub	sp, #24
 800e40a:	af00      	add	r7, sp, #0
 800e40c:	60f8      	str	r0, [r7, #12]
 800e40e:	460b      	mov	r3, r1
 800e410:	607a      	str	r2, [r7, #4]
 800e412:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e41a:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	3301      	adds	r3, #1
 800e420:	781b      	ldrb	r3, [r3, #0]
 800e422:	f003 0302 	and.w	r3, r3, #2
 800e426:	2b00      	cmp	r3, #0
 800e428:	d008      	beq.n	800e43c <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800e42a:	7af9      	ldrb	r1, [r7, #11]
 800e42c:	2324      	movs	r3, #36	; 0x24
 800e42e:	2205      	movs	r2, #5
 800e430:	68f8      	ldr	r0, [r7, #12]
 800e432:	f7ff fc6a 	bl	800dd0a <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800e436:	f04f 33ff 	mov.w	r3, #4294967295
 800e43a:	e013      	b.n	800e464 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800e43c:	697b      	ldr	r3, [r7, #20]
 800e43e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e442:	697b      	ldr	r3, [r7, #20]
 800e444:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e448:	7af9      	ldrb	r1, [r7, #11]
 800e44a:	68f8      	ldr	r0, [r7, #12]
 800e44c:	f000 f80e 	bl	800e46c <SCSI_CheckAddressRange>
 800e450:	4603      	mov	r3, r0
 800e452:	2b00      	cmp	r3, #0
 800e454:	da02      	bge.n	800e45c <SCSI_Verify10+0x56>
  {
    return -1; /* error */
 800e456:	f04f 33ff 	mov.w	r3, #4294967295
 800e45a:	e003      	b.n	800e464 <SCSI_Verify10+0x5e>
  }

  hmsc->bot_data_length = 0U;
 800e45c:	697b      	ldr	r3, [r7, #20]
 800e45e:	2200      	movs	r2, #0
 800e460:	60da      	str	r2, [r3, #12]

  return 0;
 800e462:	2300      	movs	r3, #0
}
 800e464:	4618      	mov	r0, r3
 800e466:	3718      	adds	r7, #24
 800e468:	46bd      	mov	sp, r7
 800e46a:	bd80      	pop	{r7, pc}

0800e46c <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b086      	sub	sp, #24
 800e470:	af00      	add	r7, sp, #0
 800e472:	60f8      	str	r0, [r7, #12]
 800e474:	607a      	str	r2, [r7, #4]
 800e476:	603b      	str	r3, [r7, #0]
 800e478:	460b      	mov	r3, r1
 800e47a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e482:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800e484:	687a      	ldr	r2, [r7, #4]
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	441a      	add	r2, r3
 800e48a:	697b      	ldr	r3, [r7, #20]
 800e48c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e490:	429a      	cmp	r2, r3
 800e492:	d908      	bls.n	800e4a6 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800e494:	7af9      	ldrb	r1, [r7, #11]
 800e496:	2321      	movs	r3, #33	; 0x21
 800e498:	2205      	movs	r2, #5
 800e49a:	68f8      	ldr	r0, [r7, #12]
 800e49c:	f7ff fc35 	bl	800dd0a <SCSI_SenseCode>
    return -1;
 800e4a0:	f04f 33ff 	mov.w	r3, #4294967295
 800e4a4:	e000      	b.n	800e4a8 <SCSI_CheckAddressRange+0x3c>
  }

  return 0;
 800e4a6:	2300      	movs	r3, #0
}
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	3718      	adds	r7, #24
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}

0800e4b0 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800e4b0:	b590      	push	{r4, r7, lr}
 800e4b2:	b085      	sub	sp, #20
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
 800e4b8:	460b      	mov	r3, r1
 800e4ba:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e4c2:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e4ca:	68fa      	ldr	r2, [r7, #12]
 800e4cc:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800e4d0:	fb02 f303 	mul.w	r3, r2, r3
 800e4d4:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800e4d6:	68bb      	ldr	r3, [r7, #8]
 800e4d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e4dc:	bf28      	it	cs
 800e4de:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e4e2:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e4ea:	691c      	ldr	r4, [r3, #16]
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	f103 0110 	add.w	r1, r3, #16
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e4fe:	4618      	mov	r0, r3
 800e500:	68bb      	ldr	r3, [r7, #8]
 800e502:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800e506:	b29b      	uxth	r3, r3
 800e508:	78f8      	ldrb	r0, [r7, #3]
 800e50a:	47a0      	blx	r4
 800e50c:	4603      	mov	r3, r0
 800e50e:	2b00      	cmp	r3, #0
 800e510:	da08      	bge.n	800e524 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800e512:	78f9      	ldrb	r1, [r7, #3]
 800e514:	2311      	movs	r3, #17
 800e516:	2204      	movs	r2, #4
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f7ff fbf6 	bl	800dd0a <SCSI_SenseCode>
    return -1;
 800e51e:	f04f 33ff 	mov.w	r3, #4294967295
 800e522:	e034      	b.n	800e58e <SCSI_ProcessRead+0xde>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	f103 0210 	add.w	r2, r3, #16
 800e52a:	68bb      	ldr	r3, [r7, #8]
 800e52c:	2181      	movs	r1, #129	; 0x81
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	f003 ffb2 	bl	8012498 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e540:	4619      	mov	r1, r3
 800e542:	68bb      	ldr	r3, [r7, #8]
 800e544:	fbb3 f3f1 	udiv	r3, r3, r1
 800e548:	441a      	add	r2, r3
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e55c:	4619      	mov	r1, r3
 800e55e:	68bb      	ldr	r3, [r7, #8]
 800e560:	fbb3 f3f1 	udiv	r3, r3, r1
 800e564:	1ad2      	subs	r2, r2, r3
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800e572:	68bb      	ldr	r3, [r7, #8]
 800e574:	1ad2      	subs	r2, r2, r3
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e582:	2b00      	cmp	r3, #0
 800e584:	d102      	bne.n	800e58c <SCSI_ProcessRead+0xdc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	2203      	movs	r2, #3
 800e58a:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800e58c:	2300      	movs	r3, #0
}
 800e58e:	4618      	mov	r0, r3
 800e590:	3714      	adds	r7, #20
 800e592:	46bd      	mov	sp, r7
 800e594:	bd90      	pop	{r4, r7, pc}

0800e596 <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800e596:	b590      	push	{r4, r7, lr}
 800e598:	b085      	sub	sp, #20
 800e59a:	af00      	add	r7, sp, #0
 800e59c:	6078      	str	r0, [r7, #4]
 800e59e:	460b      	mov	r3, r1
 800e5a0:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e5a8:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e5b0:	68fa      	ldr	r2, [r7, #12]
 800e5b2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800e5b6:	fb02 f303 	mul.w	r3, r2, r3
 800e5ba:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e5c2:	bf28      	it	cs
 800e5c4:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e5c8:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e5d0:	695c      	ldr	r4, [r3, #20]
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	f103 0110 	add.w	r1, r3, #16
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	68bb      	ldr	r3, [r7, #8]
 800e5e8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800e5ec:	b29b      	uxth	r3, r3
 800e5ee:	78f8      	ldrb	r0, [r7, #3]
 800e5f0:	47a0      	blx	r4
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	da08      	bge.n	800e60a <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800e5f8:	78f9      	ldrb	r1, [r7, #3]
 800e5fa:	2303      	movs	r3, #3
 800e5fc:	2204      	movs	r2, #4
 800e5fe:	6878      	ldr	r0, [r7, #4]
 800e600:	f7ff fb83 	bl	800dd0a <SCSI_SenseCode>
    return -1;
 800e604:	f04f 33ff 	mov.w	r3, #4294967295
 800e608:	e044      	b.n	800e694 <SCSI_ProcessWrite+0xfe>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e616:	4619      	mov	r1, r3
 800e618:	68bb      	ldr	r3, [r7, #8]
 800e61a:	fbb3 f3f1 	udiv	r3, r3, r1
 800e61e:	441a      	add	r2, r3
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e632:	4619      	mov	r1, r3
 800e634:	68bb      	ldr	r3, [r7, #8]
 800e636:	fbb3 f3f1 	udiv	r3, r3, r1
 800e63a:	1ad2      	subs	r2, r2, r3
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800e648:	68bb      	ldr	r3, [r7, #8]
 800e64a:	1ad2      	subs	r2, r2, r3
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d104      	bne.n	800e666 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800e65c:	2100      	movs	r1, #0
 800e65e:	6878      	ldr	r0, [r7, #4]
 800e660:	f7fe ff04 	bl	800d46c <MSC_BOT_SendCSW>
 800e664:	e015      	b.n	800e692 <SCSI_ProcessWrite+0xfc>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e66c:	68fa      	ldr	r2, [r7, #12]
 800e66e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800e672:	fb02 f303 	mul.w	r3, r2, r3
 800e676:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e67a:	bf28      	it	cs
 800e67c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e680:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	f103 0210 	add.w	r2, r3, #16
 800e688:	68bb      	ldr	r3, [r7, #8]
 800e68a:	2101      	movs	r1, #1
 800e68c:	6878      	ldr	r0, [r7, #4]
 800e68e:	f003 ff24 	bl	80124da <USBD_LL_PrepareReceive>
  }

  return 0;
 800e692:	2300      	movs	r3, #0
}
 800e694:	4618      	mov	r0, r3
 800e696:	3714      	adds	r7, #20
 800e698:	46bd      	mov	sp, r7
 800e69a:	bd90      	pop	{r4, r7, pc}

0800e69c <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800e69c:	b480      	push	{r7}
 800e69e:	b087      	sub	sp, #28
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	60f8      	str	r0, [r7, #12]
 800e6a4:	60b9      	str	r1, [r7, #8]
 800e6a6:	4613      	mov	r3, r2
 800e6a8:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800e6aa:	88fb      	ldrh	r3, [r7, #6]
 800e6ac:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 800e6ae:	8afa      	ldrh	r2, [r7, #22]
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800e6b4:	e00b      	b.n	800e6ce <SCSI_UpdateBotData+0x32>
  {
    len--;
 800e6b6:	8afb      	ldrh	r3, [r7, #22]
 800e6b8:	3b01      	subs	r3, #1
 800e6ba:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800e6bc:	8afb      	ldrh	r3, [r7, #22]
 800e6be:	68ba      	ldr	r2, [r7, #8]
 800e6c0:	441a      	add	r2, r3
 800e6c2:	8afb      	ldrh	r3, [r7, #22]
 800e6c4:	7811      	ldrb	r1, [r2, #0]
 800e6c6:	68fa      	ldr	r2, [r7, #12]
 800e6c8:	4413      	add	r3, r2
 800e6ca:	460a      	mov	r2, r1
 800e6cc:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800e6ce:	8afb      	ldrh	r3, [r7, #22]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d1f0      	bne.n	800e6b6 <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 800e6d4:	2300      	movs	r3, #0
}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	371c      	adds	r7, #28
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e0:	4770      	bx	lr

0800e6e2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e6e2:	b580      	push	{r7, lr}
 800e6e4:	b086      	sub	sp, #24
 800e6e6:	af00      	add	r7, sp, #0
 800e6e8:	60f8      	str	r0, [r7, #12]
 800e6ea:	60b9      	str	r1, [r7, #8]
 800e6ec:	4613      	mov	r3, r2
 800e6ee:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d101      	bne.n	800e6fa <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e6f6:	2303      	movs	r3, #3
 800e6f8:	e025      	b.n	800e746 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e700:	2b00      	cmp	r3, #0
 800e702:	d003      	beq.n	800e70c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	2200      	movs	r2, #0
 800e708:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800e712:	2b00      	cmp	r3, #0
 800e714:	d003      	beq.n	800e71e <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	2200      	movs	r2, #0
 800e71a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e71e:	68bb      	ldr	r3, [r7, #8]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d003      	beq.n	800e72c <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	68ba      	ldr	r2, [r7, #8]
 800e728:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	2201      	movs	r2, #1
 800e730:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	79fa      	ldrb	r2, [r7, #7]
 800e738:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e73a:	68f8      	ldr	r0, [r7, #12]
 800e73c:	f003 fd54 	bl	80121e8 <USBD_LL_Init>
 800e740:	4603      	mov	r3, r0
 800e742:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e744:	7dfb      	ldrb	r3, [r7, #23]
}
 800e746:	4618      	mov	r0, r3
 800e748:	3718      	adds	r7, #24
 800e74a:	46bd      	mov	sp, r7
 800e74c:	bd80      	pop	{r7, pc}

0800e74e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e74e:	b580      	push	{r7, lr}
 800e750:	b084      	sub	sp, #16
 800e752:	af00      	add	r7, sp, #0
 800e754:	6078      	str	r0, [r7, #4]
 800e756:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e758:	2300      	movs	r3, #0
 800e75a:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d101      	bne.n	800e766 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e762:	2303      	movs	r3, #3
 800e764:	e010      	b.n	800e788 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	683a      	ldr	r2, [r7, #0]
 800e76a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e776:	f107 020e 	add.w	r2, r7, #14
 800e77a:	4610      	mov	r0, r2
 800e77c:	4798      	blx	r3
 800e77e:	4602      	mov	r2, r0
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800e786:	2300      	movs	r3, #0
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3710      	adds	r7, #16
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}

0800e790 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b082      	sub	sp, #8
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e798:	6878      	ldr	r0, [r7, #4]
 800e79a:	f003 fd75 	bl	8012288 <USBD_LL_Start>
 800e79e:	4603      	mov	r3, r0
}
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	3708      	adds	r7, #8
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bd80      	pop	{r7, pc}

0800e7a8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e7a8:	b480      	push	{r7}
 800e7aa:	b083      	sub	sp, #12
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e7b0:	2300      	movs	r3, #0
}
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	370c      	adds	r7, #12
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7bc:	4770      	bx	lr

0800e7be <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e7be:	b580      	push	{r7, lr}
 800e7c0:	b084      	sub	sp, #16
 800e7c2:	af00      	add	r7, sp, #0
 800e7c4:	6078      	str	r0, [r7, #4]
 800e7c6:	460b      	mov	r3, r1
 800e7c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e7ca:	2303      	movs	r3, #3
 800e7cc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d009      	beq.n	800e7ec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	78fa      	ldrb	r2, [r7, #3]
 800e7e2:	4611      	mov	r1, r2
 800e7e4:	6878      	ldr	r0, [r7, #4]
 800e7e6:	4798      	blx	r3
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e7ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	3710      	adds	r7, #16
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	bd80      	pop	{r7, pc}

0800e7f6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e7f6:	b580      	push	{r7, lr}
 800e7f8:	b082      	sub	sp, #8
 800e7fa:	af00      	add	r7, sp, #0
 800e7fc:	6078      	str	r0, [r7, #4]
 800e7fe:	460b      	mov	r3, r1
 800e800:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d007      	beq.n	800e81c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e812:	685b      	ldr	r3, [r3, #4]
 800e814:	78fa      	ldrb	r2, [r7, #3]
 800e816:	4611      	mov	r1, r2
 800e818:	6878      	ldr	r0, [r7, #4]
 800e81a:	4798      	blx	r3
  }

  return USBD_OK;
 800e81c:	2300      	movs	r3, #0
}
 800e81e:	4618      	mov	r0, r3
 800e820:	3708      	adds	r7, #8
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}

0800e826 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e826:	b580      	push	{r7, lr}
 800e828:	b084      	sub	sp, #16
 800e82a:	af00      	add	r7, sp, #0
 800e82c:	6078      	str	r0, [r7, #4]
 800e82e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e836:	6839      	ldr	r1, [r7, #0]
 800e838:	4618      	mov	r0, r3
 800e83a:	f000 ff2b 	bl	800f694 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	2201      	movs	r2, #1
 800e842:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e84c:	461a      	mov	r2, r3
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e85a:	f003 031f 	and.w	r3, r3, #31
 800e85e:	2b01      	cmp	r3, #1
 800e860:	d00e      	beq.n	800e880 <USBD_LL_SetupStage+0x5a>
 800e862:	2b01      	cmp	r3, #1
 800e864:	d302      	bcc.n	800e86c <USBD_LL_SetupStage+0x46>
 800e866:	2b02      	cmp	r3, #2
 800e868:	d014      	beq.n	800e894 <USBD_LL_SetupStage+0x6e>
 800e86a:	e01d      	b.n	800e8a8 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e872:	4619      	mov	r1, r3
 800e874:	6878      	ldr	r0, [r7, #4]
 800e876:	f000 fa17 	bl	800eca8 <USBD_StdDevReq>
 800e87a:	4603      	mov	r3, r0
 800e87c:	73fb      	strb	r3, [r7, #15]
      break;
 800e87e:	e020      	b.n	800e8c2 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e886:	4619      	mov	r1, r3
 800e888:	6878      	ldr	r0, [r7, #4]
 800e88a:	f000 fa7b 	bl	800ed84 <USBD_StdItfReq>
 800e88e:	4603      	mov	r3, r0
 800e890:	73fb      	strb	r3, [r7, #15]
      break;
 800e892:	e016      	b.n	800e8c2 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e89a:	4619      	mov	r1, r3
 800e89c:	6878      	ldr	r0, [r7, #4]
 800e89e:	f000 fab7 	bl	800ee10 <USBD_StdEPReq>
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	73fb      	strb	r3, [r7, #15]
      break;
 800e8a6:	e00c      	b.n	800e8c2 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e8ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e8b2:	b2db      	uxtb	r3, r3
 800e8b4:	4619      	mov	r1, r3
 800e8b6:	6878      	ldr	r0, [r7, #4]
 800e8b8:	f003 fd65 	bl	8012386 <USBD_LL_StallEP>
 800e8bc:	4603      	mov	r3, r0
 800e8be:	73fb      	strb	r3, [r7, #15]
      break;
 800e8c0:	bf00      	nop
  }

  return ret;
 800e8c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	3710      	adds	r7, #16
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}

0800e8cc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b086      	sub	sp, #24
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	60f8      	str	r0, [r7, #12]
 800e8d4:	460b      	mov	r3, r1
 800e8d6:	607a      	str	r2, [r7, #4]
 800e8d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e8da:	7afb      	ldrb	r3, [r7, #11]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d137      	bne.n	800e950 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e8e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e8ee:	2b03      	cmp	r3, #3
 800e8f0:	d14a      	bne.n	800e988 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800e8f2:	693b      	ldr	r3, [r7, #16]
 800e8f4:	689a      	ldr	r2, [r3, #8]
 800e8f6:	693b      	ldr	r3, [r7, #16]
 800e8f8:	68db      	ldr	r3, [r3, #12]
 800e8fa:	429a      	cmp	r2, r3
 800e8fc:	d913      	bls.n	800e926 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e8fe:	693b      	ldr	r3, [r7, #16]
 800e900:	689a      	ldr	r2, [r3, #8]
 800e902:	693b      	ldr	r3, [r7, #16]
 800e904:	68db      	ldr	r3, [r3, #12]
 800e906:	1ad2      	subs	r2, r2, r3
 800e908:	693b      	ldr	r3, [r7, #16]
 800e90a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e90c:	693b      	ldr	r3, [r7, #16]
 800e90e:	68da      	ldr	r2, [r3, #12]
 800e910:	693b      	ldr	r3, [r7, #16]
 800e912:	689b      	ldr	r3, [r3, #8]
 800e914:	4293      	cmp	r3, r2
 800e916:	bf28      	it	cs
 800e918:	4613      	movcs	r3, r2
 800e91a:	461a      	mov	r2, r3
 800e91c:	6879      	ldr	r1, [r7, #4]
 800e91e:	68f8      	ldr	r0, [r7, #12]
 800e920:	f000 ff8f 	bl	800f842 <USBD_CtlContinueRx>
 800e924:	e030      	b.n	800e988 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e92c:	691b      	ldr	r3, [r3, #16]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d00a      	beq.n	800e948 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e938:	2b03      	cmp	r3, #3
 800e93a:	d105      	bne.n	800e948 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e942:	691b      	ldr	r3, [r3, #16]
 800e944:	68f8      	ldr	r0, [r7, #12]
 800e946:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800e948:	68f8      	ldr	r0, [r7, #12]
 800e94a:	f000 ff8b 	bl	800f864 <USBD_CtlSendStatus>
 800e94e:	e01b      	b.n	800e988 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e956:	699b      	ldr	r3, [r3, #24]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d013      	beq.n	800e984 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800e962:	2b03      	cmp	r3, #3
 800e964:	d10e      	bne.n	800e984 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e96c:	699b      	ldr	r3, [r3, #24]
 800e96e:	7afa      	ldrb	r2, [r7, #11]
 800e970:	4611      	mov	r1, r2
 800e972:	68f8      	ldr	r0, [r7, #12]
 800e974:	4798      	blx	r3
 800e976:	4603      	mov	r3, r0
 800e978:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800e97a:	7dfb      	ldrb	r3, [r7, #23]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d003      	beq.n	800e988 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800e980:	7dfb      	ldrb	r3, [r7, #23]
 800e982:	e002      	b.n	800e98a <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e984:	2303      	movs	r3, #3
 800e986:	e000      	b.n	800e98a <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800e988:	2300      	movs	r3, #0
}
 800e98a:	4618      	mov	r0, r3
 800e98c:	3718      	adds	r7, #24
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}

0800e992 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e992:	b580      	push	{r7, lr}
 800e994:	b086      	sub	sp, #24
 800e996:	af00      	add	r7, sp, #0
 800e998:	60f8      	str	r0, [r7, #12]
 800e99a:	460b      	mov	r3, r1
 800e99c:	607a      	str	r2, [r7, #4]
 800e99e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e9a0:	7afb      	ldrb	r3, [r7, #11]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d16a      	bne.n	800ea7c <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	3314      	adds	r3, #20
 800e9aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e9b2:	2b02      	cmp	r3, #2
 800e9b4:	d155      	bne.n	800ea62 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800e9b6:	693b      	ldr	r3, [r7, #16]
 800e9b8:	689a      	ldr	r2, [r3, #8]
 800e9ba:	693b      	ldr	r3, [r7, #16]
 800e9bc:	68db      	ldr	r3, [r3, #12]
 800e9be:	429a      	cmp	r2, r3
 800e9c0:	d914      	bls.n	800e9ec <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e9c2:	693b      	ldr	r3, [r7, #16]
 800e9c4:	689a      	ldr	r2, [r3, #8]
 800e9c6:	693b      	ldr	r3, [r7, #16]
 800e9c8:	68db      	ldr	r3, [r3, #12]
 800e9ca:	1ad2      	subs	r2, r2, r3
 800e9cc:	693b      	ldr	r3, [r7, #16]
 800e9ce:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e9d0:	693b      	ldr	r3, [r7, #16]
 800e9d2:	689b      	ldr	r3, [r3, #8]
 800e9d4:	461a      	mov	r2, r3
 800e9d6:	6879      	ldr	r1, [r7, #4]
 800e9d8:	68f8      	ldr	r0, [r7, #12]
 800e9da:	f000 ff21 	bl	800f820 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e9de:	2300      	movs	r3, #0
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	2100      	movs	r1, #0
 800e9e4:	68f8      	ldr	r0, [r7, #12]
 800e9e6:	f003 fd78 	bl	80124da <USBD_LL_PrepareReceive>
 800e9ea:	e03a      	b.n	800ea62 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e9ec:	693b      	ldr	r3, [r7, #16]
 800e9ee:	68da      	ldr	r2, [r3, #12]
 800e9f0:	693b      	ldr	r3, [r7, #16]
 800e9f2:	689b      	ldr	r3, [r3, #8]
 800e9f4:	429a      	cmp	r2, r3
 800e9f6:	d11c      	bne.n	800ea32 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e9f8:	693b      	ldr	r3, [r7, #16]
 800e9fa:	685a      	ldr	r2, [r3, #4]
 800e9fc:	693b      	ldr	r3, [r7, #16]
 800e9fe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ea00:	429a      	cmp	r2, r3
 800ea02:	d316      	bcc.n	800ea32 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ea04:	693b      	ldr	r3, [r7, #16]
 800ea06:	685a      	ldr	r2, [r3, #4]
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ea0e:	429a      	cmp	r2, r3
 800ea10:	d20f      	bcs.n	800ea32 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ea12:	2200      	movs	r2, #0
 800ea14:	2100      	movs	r1, #0
 800ea16:	68f8      	ldr	r0, [r7, #12]
 800ea18:	f000 ff02 	bl	800f820 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	2200      	movs	r2, #0
 800ea20:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ea24:	2300      	movs	r3, #0
 800ea26:	2200      	movs	r2, #0
 800ea28:	2100      	movs	r1, #0
 800ea2a:	68f8      	ldr	r0, [r7, #12]
 800ea2c:	f003 fd55 	bl	80124da <USBD_LL_PrepareReceive>
 800ea30:	e017      	b.n	800ea62 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea38:	68db      	ldr	r3, [r3, #12]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d00a      	beq.n	800ea54 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ea44:	2b03      	cmp	r3, #3
 800ea46:	d105      	bne.n	800ea54 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea4e:	68db      	ldr	r3, [r3, #12]
 800ea50:	68f8      	ldr	r0, [r7, #12]
 800ea52:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ea54:	2180      	movs	r1, #128	; 0x80
 800ea56:	68f8      	ldr	r0, [r7, #12]
 800ea58:	f003 fc95 	bl	8012386 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ea5c:	68f8      	ldr	r0, [r7, #12]
 800ea5e:	f000 ff14 	bl	800f88a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ea68:	2b01      	cmp	r3, #1
 800ea6a:	d123      	bne.n	800eab4 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ea6c:	68f8      	ldr	r0, [r7, #12]
 800ea6e:	f7ff fe9b 	bl	800e7a8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	2200      	movs	r2, #0
 800ea76:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ea7a:	e01b      	b.n	800eab4 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea82:	695b      	ldr	r3, [r3, #20]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d013      	beq.n	800eab0 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ea8e:	2b03      	cmp	r3, #3
 800ea90:	d10e      	bne.n	800eab0 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea98:	695b      	ldr	r3, [r3, #20]
 800ea9a:	7afa      	ldrb	r2, [r7, #11]
 800ea9c:	4611      	mov	r1, r2
 800ea9e:	68f8      	ldr	r0, [r7, #12]
 800eaa0:	4798      	blx	r3
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800eaa6:	7dfb      	ldrb	r3, [r7, #23]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d003      	beq.n	800eab4 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800eaac:	7dfb      	ldrb	r3, [r7, #23]
 800eaae:	e002      	b.n	800eab6 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800eab0:	2303      	movs	r3, #3
 800eab2:	e000      	b.n	800eab6 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800eab4:	2300      	movs	r3, #0
}
 800eab6:	4618      	mov	r0, r3
 800eab8:	3718      	adds	r7, #24
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}

0800eabe <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800eabe:	b580      	push	{r7, lr}
 800eac0:	b082      	sub	sp, #8
 800eac2:	af00      	add	r7, sp, #0
 800eac4:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2201      	movs	r2, #1
 800eaca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2200      	movs	r2, #0
 800ead2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	2200      	movs	r2, #0
 800eada:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2200      	movs	r2, #0
 800eae0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d009      	beq.n	800eb02 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eaf4:	685b      	ldr	r3, [r3, #4]
 800eaf6:	687a      	ldr	r2, [r7, #4]
 800eaf8:	6852      	ldr	r2, [r2, #4]
 800eafa:	b2d2      	uxtb	r2, r2
 800eafc:	4611      	mov	r1, r2
 800eafe:	6878      	ldr	r0, [r7, #4]
 800eb00:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800eb02:	2340      	movs	r3, #64	; 0x40
 800eb04:	2200      	movs	r2, #0
 800eb06:	2100      	movs	r1, #0
 800eb08:	6878      	ldr	r0, [r7, #4]
 800eb0a:	f003 fbd8 	bl	80122be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	2201      	movs	r2, #1
 800eb12:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	2240      	movs	r2, #64	; 0x40
 800eb1a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800eb1e:	2340      	movs	r3, #64	; 0x40
 800eb20:	2200      	movs	r2, #0
 800eb22:	2180      	movs	r1, #128	; 0x80
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f003 fbca 	bl	80122be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	2201      	movs	r2, #1
 800eb2e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2240      	movs	r2, #64	; 0x40
 800eb34:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800eb36:	2300      	movs	r3, #0
}
 800eb38:	4618      	mov	r0, r3
 800eb3a:	3708      	adds	r7, #8
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	bd80      	pop	{r7, pc}

0800eb40 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800eb40:	b480      	push	{r7}
 800eb42:	b083      	sub	sp, #12
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
 800eb48:	460b      	mov	r3, r1
 800eb4a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	78fa      	ldrb	r2, [r7, #3]
 800eb50:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800eb52:	2300      	movs	r3, #0
}
 800eb54:	4618      	mov	r0, r3
 800eb56:	370c      	adds	r7, #12
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5e:	4770      	bx	lr

0800eb60 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800eb60:	b480      	push	{r7}
 800eb62:	b083      	sub	sp, #12
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2204      	movs	r2, #4
 800eb78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800eb7c:	2300      	movs	r3, #0
}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	370c      	adds	r7, #12
 800eb82:	46bd      	mov	sp, r7
 800eb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb88:	4770      	bx	lr

0800eb8a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800eb8a:	b480      	push	{r7}
 800eb8c:	b083      	sub	sp, #12
 800eb8e:	af00      	add	r7, sp, #0
 800eb90:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb98:	2b04      	cmp	r3, #4
 800eb9a:	d105      	bne.n	800eba8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800eba8:	2300      	movs	r3, #0
}
 800ebaa:	4618      	mov	r0, r3
 800ebac:	370c      	adds	r7, #12
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb4:	4770      	bx	lr

0800ebb6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ebb6:	b580      	push	{r7, lr}
 800ebb8:	b082      	sub	sp, #8
 800ebba:	af00      	add	r7, sp, #0
 800ebbc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebc4:	2b03      	cmp	r3, #3
 800ebc6:	d10b      	bne.n	800ebe0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebce:	69db      	ldr	r3, [r3, #28]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d005      	beq.n	800ebe0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebda:	69db      	ldr	r3, [r3, #28]
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ebe0:	2300      	movs	r3, #0
}
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	3708      	adds	r7, #8
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	bd80      	pop	{r7, pc}

0800ebea <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ebea:	b480      	push	{r7}
 800ebec:	b083      	sub	sp, #12
 800ebee:	af00      	add	r7, sp, #0
 800ebf0:	6078      	str	r0, [r7, #4]
 800ebf2:	460b      	mov	r3, r1
 800ebf4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800ebf6:	2300      	movs	r3, #0
}
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	370c      	adds	r7, #12
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec02:	4770      	bx	lr

0800ec04 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ec04:	b480      	push	{r7}
 800ec06:	b083      	sub	sp, #12
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
 800ec0c:	460b      	mov	r3, r1
 800ec0e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800ec10:	2300      	movs	r3, #0
}
 800ec12:	4618      	mov	r0, r3
 800ec14:	370c      	adds	r7, #12
 800ec16:	46bd      	mov	sp, r7
 800ec18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1c:	4770      	bx	lr

0800ec1e <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ec1e:	b480      	push	{r7}
 800ec20:	b083      	sub	sp, #12
 800ec22:	af00      	add	r7, sp, #0
 800ec24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ec26:	2300      	movs	r3, #0
}
 800ec28:	4618      	mov	r0, r3
 800ec2a:	370c      	adds	r7, #12
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec32:	4770      	bx	lr

0800ec34 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b082      	sub	sp, #8
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	2201      	movs	r2, #1
 800ec40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d009      	beq.n	800ec62 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec54:	685b      	ldr	r3, [r3, #4]
 800ec56:	687a      	ldr	r2, [r7, #4]
 800ec58:	6852      	ldr	r2, [r2, #4]
 800ec5a:	b2d2      	uxtb	r2, r2
 800ec5c:	4611      	mov	r1, r2
 800ec5e:	6878      	ldr	r0, [r7, #4]
 800ec60:	4798      	blx	r3
  }

  return USBD_OK;
 800ec62:	2300      	movs	r3, #0
}
 800ec64:	4618      	mov	r0, r3
 800ec66:	3708      	adds	r7, #8
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}

0800ec6c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ec6c:	b480      	push	{r7}
 800ec6e:	b087      	sub	sp, #28
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ec78:	697b      	ldr	r3, [r7, #20]
 800ec7a:	781b      	ldrb	r3, [r3, #0]
 800ec7c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ec7e:	697b      	ldr	r3, [r7, #20]
 800ec80:	3301      	adds	r3, #1
 800ec82:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ec84:	697b      	ldr	r3, [r7, #20]
 800ec86:	781b      	ldrb	r3, [r3, #0]
 800ec88:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ec8a:	8a3b      	ldrh	r3, [r7, #16]
 800ec8c:	021b      	lsls	r3, r3, #8
 800ec8e:	b21a      	sxth	r2, r3
 800ec90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ec94:	4313      	orrs	r3, r2
 800ec96:	b21b      	sxth	r3, r3
 800ec98:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ec9a:	89fb      	ldrh	r3, [r7, #14]
}
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	371c      	adds	r7, #28
 800eca0:	46bd      	mov	sp, r7
 800eca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca6:	4770      	bx	lr

0800eca8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b084      	sub	sp, #16
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
 800ecb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	781b      	ldrb	r3, [r3, #0]
 800ecba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ecbe:	2b20      	cmp	r3, #32
 800ecc0:	d004      	beq.n	800eccc <USBD_StdDevReq+0x24>
 800ecc2:	2b40      	cmp	r3, #64	; 0x40
 800ecc4:	d002      	beq.n	800eccc <USBD_StdDevReq+0x24>
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d00a      	beq.n	800ece0 <USBD_StdDevReq+0x38>
 800ecca:	e050      	b.n	800ed6e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecd2:	689b      	ldr	r3, [r3, #8]
 800ecd4:	6839      	ldr	r1, [r7, #0]
 800ecd6:	6878      	ldr	r0, [r7, #4]
 800ecd8:	4798      	blx	r3
 800ecda:	4603      	mov	r3, r0
 800ecdc:	73fb      	strb	r3, [r7, #15]
    break;
 800ecde:	e04b      	b.n	800ed78 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ece0:	683b      	ldr	r3, [r7, #0]
 800ece2:	785b      	ldrb	r3, [r3, #1]
 800ece4:	2b09      	cmp	r3, #9
 800ece6:	d83c      	bhi.n	800ed62 <USBD_StdDevReq+0xba>
 800ece8:	a201      	add	r2, pc, #4	; (adr r2, 800ecf0 <USBD_StdDevReq+0x48>)
 800ecea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecee:	bf00      	nop
 800ecf0:	0800ed45 	.word	0x0800ed45
 800ecf4:	0800ed59 	.word	0x0800ed59
 800ecf8:	0800ed63 	.word	0x0800ed63
 800ecfc:	0800ed4f 	.word	0x0800ed4f
 800ed00:	0800ed63 	.word	0x0800ed63
 800ed04:	0800ed23 	.word	0x0800ed23
 800ed08:	0800ed19 	.word	0x0800ed19
 800ed0c:	0800ed63 	.word	0x0800ed63
 800ed10:	0800ed3b 	.word	0x0800ed3b
 800ed14:	0800ed2d 	.word	0x0800ed2d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800ed18:	6839      	ldr	r1, [r7, #0]
 800ed1a:	6878      	ldr	r0, [r7, #4]
 800ed1c:	f000 f9ce 	bl	800f0bc <USBD_GetDescriptor>
      break;
 800ed20:	e024      	b.n	800ed6c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800ed22:	6839      	ldr	r1, [r7, #0]
 800ed24:	6878      	ldr	r0, [r7, #4]
 800ed26:	f000 fb33 	bl	800f390 <USBD_SetAddress>
      break;
 800ed2a:	e01f      	b.n	800ed6c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800ed2c:	6839      	ldr	r1, [r7, #0]
 800ed2e:	6878      	ldr	r0, [r7, #4]
 800ed30:	f000 fb70 	bl	800f414 <USBD_SetConfig>
 800ed34:	4603      	mov	r3, r0
 800ed36:	73fb      	strb	r3, [r7, #15]
      break;
 800ed38:	e018      	b.n	800ed6c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800ed3a:	6839      	ldr	r1, [r7, #0]
 800ed3c:	6878      	ldr	r0, [r7, #4]
 800ed3e:	f000 fc0d 	bl	800f55c <USBD_GetConfig>
      break;
 800ed42:	e013      	b.n	800ed6c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800ed44:	6839      	ldr	r1, [r7, #0]
 800ed46:	6878      	ldr	r0, [r7, #4]
 800ed48:	f000 fc3c 	bl	800f5c4 <USBD_GetStatus>
      break;
 800ed4c:	e00e      	b.n	800ed6c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800ed4e:	6839      	ldr	r1, [r7, #0]
 800ed50:	6878      	ldr	r0, [r7, #4]
 800ed52:	f000 fc6a 	bl	800f62a <USBD_SetFeature>
      break;
 800ed56:	e009      	b.n	800ed6c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800ed58:	6839      	ldr	r1, [r7, #0]
 800ed5a:	6878      	ldr	r0, [r7, #4]
 800ed5c:	f000 fc79 	bl	800f652 <USBD_ClrFeature>
      break;
 800ed60:	e004      	b.n	800ed6c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800ed62:	6839      	ldr	r1, [r7, #0]
 800ed64:	6878      	ldr	r0, [r7, #4]
 800ed66:	f000 fccf 	bl	800f708 <USBD_CtlError>
      break;
 800ed6a:	bf00      	nop
    }
    break;
 800ed6c:	e004      	b.n	800ed78 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800ed6e:	6839      	ldr	r1, [r7, #0]
 800ed70:	6878      	ldr	r0, [r7, #4]
 800ed72:	f000 fcc9 	bl	800f708 <USBD_CtlError>
    break;
 800ed76:	bf00      	nop
  }

  return ret;
 800ed78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	3710      	adds	r7, #16
 800ed7e:	46bd      	mov	sp, r7
 800ed80:	bd80      	pop	{r7, pc}
 800ed82:	bf00      	nop

0800ed84 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b084      	sub	sp, #16
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
 800ed8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ed8e:	2300      	movs	r3, #0
 800ed90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ed92:	683b      	ldr	r3, [r7, #0]
 800ed94:	781b      	ldrb	r3, [r3, #0]
 800ed96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ed9a:	2b20      	cmp	r3, #32
 800ed9c:	d003      	beq.n	800eda6 <USBD_StdItfReq+0x22>
 800ed9e:	2b40      	cmp	r3, #64	; 0x40
 800eda0:	d001      	beq.n	800eda6 <USBD_StdItfReq+0x22>
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d12a      	bne.n	800edfc <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800edac:	3b01      	subs	r3, #1
 800edae:	2b02      	cmp	r3, #2
 800edb0:	d81d      	bhi.n	800edee <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800edb2:	683b      	ldr	r3, [r7, #0]
 800edb4:	889b      	ldrh	r3, [r3, #4]
 800edb6:	b2db      	uxtb	r3, r3
 800edb8:	2b01      	cmp	r3, #1
 800edba:	d813      	bhi.n	800ede4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edc2:	689b      	ldr	r3, [r3, #8]
 800edc4:	6839      	ldr	r1, [r7, #0]
 800edc6:	6878      	ldr	r0, [r7, #4]
 800edc8:	4798      	blx	r3
 800edca:	4603      	mov	r3, r0
 800edcc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800edce:	683b      	ldr	r3, [r7, #0]
 800edd0:	88db      	ldrh	r3, [r3, #6]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d110      	bne.n	800edf8 <USBD_StdItfReq+0x74>
 800edd6:	7bfb      	ldrb	r3, [r7, #15]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d10d      	bne.n	800edf8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800eddc:	6878      	ldr	r0, [r7, #4]
 800edde:	f000 fd41 	bl	800f864 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800ede2:	e009      	b.n	800edf8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800ede4:	6839      	ldr	r1, [r7, #0]
 800ede6:	6878      	ldr	r0, [r7, #4]
 800ede8:	f000 fc8e 	bl	800f708 <USBD_CtlError>
      break;
 800edec:	e004      	b.n	800edf8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800edee:	6839      	ldr	r1, [r7, #0]
 800edf0:	6878      	ldr	r0, [r7, #4]
 800edf2:	f000 fc89 	bl	800f708 <USBD_CtlError>
      break;
 800edf6:	e000      	b.n	800edfa <USBD_StdItfReq+0x76>
      break;
 800edf8:	bf00      	nop
    }
    break;
 800edfa:	e004      	b.n	800ee06 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800edfc:	6839      	ldr	r1, [r7, #0]
 800edfe:	6878      	ldr	r0, [r7, #4]
 800ee00:	f000 fc82 	bl	800f708 <USBD_CtlError>
    break;
 800ee04:	bf00      	nop
  }

  return ret;
 800ee06:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee08:	4618      	mov	r0, r3
 800ee0a:	3710      	adds	r7, #16
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}

0800ee10 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b084      	sub	sp, #16
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
 800ee18:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ee1e:	683b      	ldr	r3, [r7, #0]
 800ee20:	889b      	ldrh	r3, [r3, #4]
 800ee22:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ee24:	683b      	ldr	r3, [r7, #0]
 800ee26:	781b      	ldrb	r3, [r3, #0]
 800ee28:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ee2c:	2b20      	cmp	r3, #32
 800ee2e:	d004      	beq.n	800ee3a <USBD_StdEPReq+0x2a>
 800ee30:	2b40      	cmp	r3, #64	; 0x40
 800ee32:	d002      	beq.n	800ee3a <USBD_StdEPReq+0x2a>
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d00a      	beq.n	800ee4e <USBD_StdEPReq+0x3e>
 800ee38:	e135      	b.n	800f0a6 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee40:	689b      	ldr	r3, [r3, #8]
 800ee42:	6839      	ldr	r1, [r7, #0]
 800ee44:	6878      	ldr	r0, [r7, #4]
 800ee46:	4798      	blx	r3
 800ee48:	4603      	mov	r3, r0
 800ee4a:	73fb      	strb	r3, [r7, #15]
    break;
 800ee4c:	e130      	b.n	800f0b0 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	785b      	ldrb	r3, [r3, #1]
 800ee52:	2b01      	cmp	r3, #1
 800ee54:	d03e      	beq.n	800eed4 <USBD_StdEPReq+0xc4>
 800ee56:	2b03      	cmp	r3, #3
 800ee58:	d002      	beq.n	800ee60 <USBD_StdEPReq+0x50>
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d077      	beq.n	800ef4e <USBD_StdEPReq+0x13e>
 800ee5e:	e11c      	b.n	800f09a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee66:	2b02      	cmp	r3, #2
 800ee68:	d002      	beq.n	800ee70 <USBD_StdEPReq+0x60>
 800ee6a:	2b03      	cmp	r3, #3
 800ee6c:	d015      	beq.n	800ee9a <USBD_StdEPReq+0x8a>
 800ee6e:	e02b      	b.n	800eec8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ee70:	7bbb      	ldrb	r3, [r7, #14]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d00c      	beq.n	800ee90 <USBD_StdEPReq+0x80>
 800ee76:	7bbb      	ldrb	r3, [r7, #14]
 800ee78:	2b80      	cmp	r3, #128	; 0x80
 800ee7a:	d009      	beq.n	800ee90 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ee7c:	7bbb      	ldrb	r3, [r7, #14]
 800ee7e:	4619      	mov	r1, r3
 800ee80:	6878      	ldr	r0, [r7, #4]
 800ee82:	f003 fa80 	bl	8012386 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ee86:	2180      	movs	r1, #128	; 0x80
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	f003 fa7c 	bl	8012386 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ee8e:	e020      	b.n	800eed2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800ee90:	6839      	ldr	r1, [r7, #0]
 800ee92:	6878      	ldr	r0, [r7, #4]
 800ee94:	f000 fc38 	bl	800f708 <USBD_CtlError>
        break;
 800ee98:	e01b      	b.n	800eed2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	885b      	ldrh	r3, [r3, #2]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d10e      	bne.n	800eec0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800eea2:	7bbb      	ldrb	r3, [r7, #14]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d00b      	beq.n	800eec0 <USBD_StdEPReq+0xb0>
 800eea8:	7bbb      	ldrb	r3, [r7, #14]
 800eeaa:	2b80      	cmp	r3, #128	; 0x80
 800eeac:	d008      	beq.n	800eec0 <USBD_StdEPReq+0xb0>
 800eeae:	683b      	ldr	r3, [r7, #0]
 800eeb0:	88db      	ldrh	r3, [r3, #6]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d104      	bne.n	800eec0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800eeb6:	7bbb      	ldrb	r3, [r7, #14]
 800eeb8:	4619      	mov	r1, r3
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	f003 fa63 	bl	8012386 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800eec0:	6878      	ldr	r0, [r7, #4]
 800eec2:	f000 fccf 	bl	800f864 <USBD_CtlSendStatus>

        break;
 800eec6:	e004      	b.n	800eed2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800eec8:	6839      	ldr	r1, [r7, #0]
 800eeca:	6878      	ldr	r0, [r7, #4]
 800eecc:	f000 fc1c 	bl	800f708 <USBD_CtlError>
        break;
 800eed0:	bf00      	nop
      }
      break;
 800eed2:	e0e7      	b.n	800f0a4 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eeda:	2b02      	cmp	r3, #2
 800eedc:	d002      	beq.n	800eee4 <USBD_StdEPReq+0xd4>
 800eede:	2b03      	cmp	r3, #3
 800eee0:	d015      	beq.n	800ef0e <USBD_StdEPReq+0xfe>
 800eee2:	e02d      	b.n	800ef40 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eee4:	7bbb      	ldrb	r3, [r7, #14]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d00c      	beq.n	800ef04 <USBD_StdEPReq+0xf4>
 800eeea:	7bbb      	ldrb	r3, [r7, #14]
 800eeec:	2b80      	cmp	r3, #128	; 0x80
 800eeee:	d009      	beq.n	800ef04 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800eef0:	7bbb      	ldrb	r3, [r7, #14]
 800eef2:	4619      	mov	r1, r3
 800eef4:	6878      	ldr	r0, [r7, #4]
 800eef6:	f003 fa46 	bl	8012386 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800eefa:	2180      	movs	r1, #128	; 0x80
 800eefc:	6878      	ldr	r0, [r7, #4]
 800eefe:	f003 fa42 	bl	8012386 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ef02:	e023      	b.n	800ef4c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800ef04:	6839      	ldr	r1, [r7, #0]
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	f000 fbfe 	bl	800f708 <USBD_CtlError>
        break;
 800ef0c:	e01e      	b.n	800ef4c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ef0e:	683b      	ldr	r3, [r7, #0]
 800ef10:	885b      	ldrh	r3, [r3, #2]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d119      	bne.n	800ef4a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800ef16:	7bbb      	ldrb	r3, [r7, #14]
 800ef18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d004      	beq.n	800ef2a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ef20:	7bbb      	ldrb	r3, [r7, #14]
 800ef22:	4619      	mov	r1, r3
 800ef24:	6878      	ldr	r0, [r7, #4]
 800ef26:	f003 fa4d 	bl	80123c4 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800ef2a:	6878      	ldr	r0, [r7, #4]
 800ef2c:	f000 fc9a 	bl	800f864 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef36:	689b      	ldr	r3, [r3, #8]
 800ef38:	6839      	ldr	r1, [r7, #0]
 800ef3a:	6878      	ldr	r0, [r7, #4]
 800ef3c:	4798      	blx	r3
        }
        break;
 800ef3e:	e004      	b.n	800ef4a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800ef40:	6839      	ldr	r1, [r7, #0]
 800ef42:	6878      	ldr	r0, [r7, #4]
 800ef44:	f000 fbe0 	bl	800f708 <USBD_CtlError>
        break;
 800ef48:	e000      	b.n	800ef4c <USBD_StdEPReq+0x13c>
        break;
 800ef4a:	bf00      	nop
      }
      break;
 800ef4c:	e0aa      	b.n	800f0a4 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef54:	2b02      	cmp	r3, #2
 800ef56:	d002      	beq.n	800ef5e <USBD_StdEPReq+0x14e>
 800ef58:	2b03      	cmp	r3, #3
 800ef5a:	d032      	beq.n	800efc2 <USBD_StdEPReq+0x1b2>
 800ef5c:	e097      	b.n	800f08e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ef5e:	7bbb      	ldrb	r3, [r7, #14]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d007      	beq.n	800ef74 <USBD_StdEPReq+0x164>
 800ef64:	7bbb      	ldrb	r3, [r7, #14]
 800ef66:	2b80      	cmp	r3, #128	; 0x80
 800ef68:	d004      	beq.n	800ef74 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800ef6a:	6839      	ldr	r1, [r7, #0]
 800ef6c:	6878      	ldr	r0, [r7, #4]
 800ef6e:	f000 fbcb 	bl	800f708 <USBD_CtlError>
          break;
 800ef72:	e091      	b.n	800f098 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ef74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	da0b      	bge.n	800ef94 <USBD_StdEPReq+0x184>
 800ef7c:	7bbb      	ldrb	r3, [r7, #14]
 800ef7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ef82:	4613      	mov	r3, r2
 800ef84:	009b      	lsls	r3, r3, #2
 800ef86:	4413      	add	r3, r2
 800ef88:	009b      	lsls	r3, r3, #2
 800ef8a:	3310      	adds	r3, #16
 800ef8c:	687a      	ldr	r2, [r7, #4]
 800ef8e:	4413      	add	r3, r2
 800ef90:	3304      	adds	r3, #4
 800ef92:	e00b      	b.n	800efac <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ef94:	7bbb      	ldrb	r3, [r7, #14]
 800ef96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ef9a:	4613      	mov	r3, r2
 800ef9c:	009b      	lsls	r3, r3, #2
 800ef9e:	4413      	add	r3, r2
 800efa0:	009b      	lsls	r3, r3, #2
 800efa2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800efa6:	687a      	ldr	r2, [r7, #4]
 800efa8:	4413      	add	r3, r2
 800efaa:	3304      	adds	r3, #4
 800efac:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800efae:	68bb      	ldr	r3, [r7, #8]
 800efb0:	2200      	movs	r2, #0
 800efb2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	2202      	movs	r2, #2
 800efb8:	4619      	mov	r1, r3
 800efba:	6878      	ldr	r0, [r7, #4]
 800efbc:	f000 fc15 	bl	800f7ea <USBD_CtlSendData>
        break;
 800efc0:	e06a      	b.n	800f098 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800efc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	da11      	bge.n	800efee <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800efca:	7bbb      	ldrb	r3, [r7, #14]
 800efcc:	f003 020f 	and.w	r2, r3, #15
 800efd0:	6879      	ldr	r1, [r7, #4]
 800efd2:	4613      	mov	r3, r2
 800efd4:	009b      	lsls	r3, r3, #2
 800efd6:	4413      	add	r3, r2
 800efd8:	009b      	lsls	r3, r3, #2
 800efda:	440b      	add	r3, r1
 800efdc:	3324      	adds	r3, #36	; 0x24
 800efde:	881b      	ldrh	r3, [r3, #0]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d117      	bne.n	800f014 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800efe4:	6839      	ldr	r1, [r7, #0]
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f000 fb8e 	bl	800f708 <USBD_CtlError>
            break;
 800efec:	e054      	b.n	800f098 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800efee:	7bbb      	ldrb	r3, [r7, #14]
 800eff0:	f003 020f 	and.w	r2, r3, #15
 800eff4:	6879      	ldr	r1, [r7, #4]
 800eff6:	4613      	mov	r3, r2
 800eff8:	009b      	lsls	r3, r3, #2
 800effa:	4413      	add	r3, r2
 800effc:	009b      	lsls	r3, r3, #2
 800effe:	440b      	add	r3, r1
 800f000:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f004:	881b      	ldrh	r3, [r3, #0]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d104      	bne.n	800f014 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800f00a:	6839      	ldr	r1, [r7, #0]
 800f00c:	6878      	ldr	r0, [r7, #4]
 800f00e:	f000 fb7b 	bl	800f708 <USBD_CtlError>
            break;
 800f012:	e041      	b.n	800f098 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f014:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	da0b      	bge.n	800f034 <USBD_StdEPReq+0x224>
 800f01c:	7bbb      	ldrb	r3, [r7, #14]
 800f01e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f022:	4613      	mov	r3, r2
 800f024:	009b      	lsls	r3, r3, #2
 800f026:	4413      	add	r3, r2
 800f028:	009b      	lsls	r3, r3, #2
 800f02a:	3310      	adds	r3, #16
 800f02c:	687a      	ldr	r2, [r7, #4]
 800f02e:	4413      	add	r3, r2
 800f030:	3304      	adds	r3, #4
 800f032:	e00b      	b.n	800f04c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800f034:	7bbb      	ldrb	r3, [r7, #14]
 800f036:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f03a:	4613      	mov	r3, r2
 800f03c:	009b      	lsls	r3, r3, #2
 800f03e:	4413      	add	r3, r2
 800f040:	009b      	lsls	r3, r3, #2
 800f042:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f046:	687a      	ldr	r2, [r7, #4]
 800f048:	4413      	add	r3, r2
 800f04a:	3304      	adds	r3, #4
 800f04c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f04e:	7bbb      	ldrb	r3, [r7, #14]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d002      	beq.n	800f05a <USBD_StdEPReq+0x24a>
 800f054:	7bbb      	ldrb	r3, [r7, #14]
 800f056:	2b80      	cmp	r3, #128	; 0x80
 800f058:	d103      	bne.n	800f062 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800f05a:	68bb      	ldr	r3, [r7, #8]
 800f05c:	2200      	movs	r2, #0
 800f05e:	601a      	str	r2, [r3, #0]
 800f060:	e00e      	b.n	800f080 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f062:	7bbb      	ldrb	r3, [r7, #14]
 800f064:	4619      	mov	r1, r3
 800f066:	6878      	ldr	r0, [r7, #4]
 800f068:	f003 f9cb 	bl	8012402 <USBD_LL_IsStallEP>
 800f06c:	4603      	mov	r3, r0
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d003      	beq.n	800f07a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800f072:	68bb      	ldr	r3, [r7, #8]
 800f074:	2201      	movs	r2, #1
 800f076:	601a      	str	r2, [r3, #0]
 800f078:	e002      	b.n	800f080 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800f07a:	68bb      	ldr	r3, [r7, #8]
 800f07c:	2200      	movs	r2, #0
 800f07e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f080:	68bb      	ldr	r3, [r7, #8]
 800f082:	2202      	movs	r2, #2
 800f084:	4619      	mov	r1, r3
 800f086:	6878      	ldr	r0, [r7, #4]
 800f088:	f000 fbaf 	bl	800f7ea <USBD_CtlSendData>
          break;
 800f08c:	e004      	b.n	800f098 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800f08e:	6839      	ldr	r1, [r7, #0]
 800f090:	6878      	ldr	r0, [r7, #4]
 800f092:	f000 fb39 	bl	800f708 <USBD_CtlError>
        break;
 800f096:	bf00      	nop
      }
      break;
 800f098:	e004      	b.n	800f0a4 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800f09a:	6839      	ldr	r1, [r7, #0]
 800f09c:	6878      	ldr	r0, [r7, #4]
 800f09e:	f000 fb33 	bl	800f708 <USBD_CtlError>
      break;
 800f0a2:	bf00      	nop
    }
    break;
 800f0a4:	e004      	b.n	800f0b0 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800f0a6:	6839      	ldr	r1, [r7, #0]
 800f0a8:	6878      	ldr	r0, [r7, #4]
 800f0aa:	f000 fb2d 	bl	800f708 <USBD_CtlError>
    break;
 800f0ae:	bf00      	nop
  }

  return ret;
 800f0b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	3710      	adds	r7, #16
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	bd80      	pop	{r7, pc}
	...

0800f0bc <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b084      	sub	sp, #16
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
 800f0c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f0d2:	683b      	ldr	r3, [r7, #0]
 800f0d4:	885b      	ldrh	r3, [r3, #2]
 800f0d6:	0a1b      	lsrs	r3, r3, #8
 800f0d8:	b29b      	uxth	r3, r3
 800f0da:	3b01      	subs	r3, #1
 800f0dc:	2b06      	cmp	r3, #6
 800f0de:	f200 8128 	bhi.w	800f332 <USBD_GetDescriptor+0x276>
 800f0e2:	a201      	add	r2, pc, #4	; (adr r2, 800f0e8 <USBD_GetDescriptor+0x2c>)
 800f0e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0e8:	0800f105 	.word	0x0800f105
 800f0ec:	0800f11d 	.word	0x0800f11d
 800f0f0:	0800f15d 	.word	0x0800f15d
 800f0f4:	0800f333 	.word	0x0800f333
 800f0f8:	0800f333 	.word	0x0800f333
 800f0fc:	0800f2d3 	.word	0x0800f2d3
 800f100:	0800f2ff 	.word	0x0800f2ff
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	687a      	ldr	r2, [r7, #4]
 800f10e:	7c12      	ldrb	r2, [r2, #16]
 800f110:	f107 0108 	add.w	r1, r7, #8
 800f114:	4610      	mov	r0, r2
 800f116:	4798      	blx	r3
 800f118:	60f8      	str	r0, [r7, #12]
    break;
 800f11a:	e112      	b.n	800f342 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	7c1b      	ldrb	r3, [r3, #16]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d10d      	bne.n	800f140 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f12a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f12c:	f107 0208 	add.w	r2, r7, #8
 800f130:	4610      	mov	r0, r2
 800f132:	4798      	blx	r3
 800f134:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	3301      	adds	r3, #1
 800f13a:	2202      	movs	r2, #2
 800f13c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800f13e:	e100      	b.n	800f342 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f148:	f107 0208 	add.w	r2, r7, #8
 800f14c:	4610      	mov	r0, r2
 800f14e:	4798      	blx	r3
 800f150:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	3301      	adds	r3, #1
 800f156:	2202      	movs	r2, #2
 800f158:	701a      	strb	r2, [r3, #0]
    break;
 800f15a:	e0f2      	b.n	800f342 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800f15c:	683b      	ldr	r3, [r7, #0]
 800f15e:	885b      	ldrh	r3, [r3, #2]
 800f160:	b2db      	uxtb	r3, r3
 800f162:	2b05      	cmp	r3, #5
 800f164:	f200 80ac 	bhi.w	800f2c0 <USBD_GetDescriptor+0x204>
 800f168:	a201      	add	r2, pc, #4	; (adr r2, 800f170 <USBD_GetDescriptor+0xb4>)
 800f16a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f16e:	bf00      	nop
 800f170:	0800f189 	.word	0x0800f189
 800f174:	0800f1bd 	.word	0x0800f1bd
 800f178:	0800f1f1 	.word	0x0800f1f1
 800f17c:	0800f225 	.word	0x0800f225
 800f180:	0800f259 	.word	0x0800f259
 800f184:	0800f28d 	.word	0x0800f28d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f18e:	685b      	ldr	r3, [r3, #4]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d00b      	beq.n	800f1ac <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f19a:	685b      	ldr	r3, [r3, #4]
 800f19c:	687a      	ldr	r2, [r7, #4]
 800f19e:	7c12      	ldrb	r2, [r2, #16]
 800f1a0:	f107 0108 	add.w	r1, r7, #8
 800f1a4:	4610      	mov	r0, r2
 800f1a6:	4798      	blx	r3
 800f1a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f1aa:	e091      	b.n	800f2d0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f1ac:	6839      	ldr	r1, [r7, #0]
 800f1ae:	6878      	ldr	r0, [r7, #4]
 800f1b0:	f000 faaa 	bl	800f708 <USBD_CtlError>
        err++;
 800f1b4:	7afb      	ldrb	r3, [r7, #11]
 800f1b6:	3301      	adds	r3, #1
 800f1b8:	72fb      	strb	r3, [r7, #11]
      break;
 800f1ba:	e089      	b.n	800f2d0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1c2:	689b      	ldr	r3, [r3, #8]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d00b      	beq.n	800f1e0 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1ce:	689b      	ldr	r3, [r3, #8]
 800f1d0:	687a      	ldr	r2, [r7, #4]
 800f1d2:	7c12      	ldrb	r2, [r2, #16]
 800f1d4:	f107 0108 	add.w	r1, r7, #8
 800f1d8:	4610      	mov	r0, r2
 800f1da:	4798      	blx	r3
 800f1dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f1de:	e077      	b.n	800f2d0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f1e0:	6839      	ldr	r1, [r7, #0]
 800f1e2:	6878      	ldr	r0, [r7, #4]
 800f1e4:	f000 fa90 	bl	800f708 <USBD_CtlError>
        err++;
 800f1e8:	7afb      	ldrb	r3, [r7, #11]
 800f1ea:	3301      	adds	r3, #1
 800f1ec:	72fb      	strb	r3, [r7, #11]
      break;
 800f1ee:	e06f      	b.n	800f2d0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1f6:	68db      	ldr	r3, [r3, #12]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d00b      	beq.n	800f214 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f202:	68db      	ldr	r3, [r3, #12]
 800f204:	687a      	ldr	r2, [r7, #4]
 800f206:	7c12      	ldrb	r2, [r2, #16]
 800f208:	f107 0108 	add.w	r1, r7, #8
 800f20c:	4610      	mov	r0, r2
 800f20e:	4798      	blx	r3
 800f210:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f212:	e05d      	b.n	800f2d0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f214:	6839      	ldr	r1, [r7, #0]
 800f216:	6878      	ldr	r0, [r7, #4]
 800f218:	f000 fa76 	bl	800f708 <USBD_CtlError>
        err++;
 800f21c:	7afb      	ldrb	r3, [r7, #11]
 800f21e:	3301      	adds	r3, #1
 800f220:	72fb      	strb	r3, [r7, #11]
      break;
 800f222:	e055      	b.n	800f2d0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f22a:	691b      	ldr	r3, [r3, #16]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d00b      	beq.n	800f248 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f236:	691b      	ldr	r3, [r3, #16]
 800f238:	687a      	ldr	r2, [r7, #4]
 800f23a:	7c12      	ldrb	r2, [r2, #16]
 800f23c:	f107 0108 	add.w	r1, r7, #8
 800f240:	4610      	mov	r0, r2
 800f242:	4798      	blx	r3
 800f244:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f246:	e043      	b.n	800f2d0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f248:	6839      	ldr	r1, [r7, #0]
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	f000 fa5c 	bl	800f708 <USBD_CtlError>
        err++;
 800f250:	7afb      	ldrb	r3, [r7, #11]
 800f252:	3301      	adds	r3, #1
 800f254:	72fb      	strb	r3, [r7, #11]
      break;
 800f256:	e03b      	b.n	800f2d0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f25e:	695b      	ldr	r3, [r3, #20]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d00b      	beq.n	800f27c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f26a:	695b      	ldr	r3, [r3, #20]
 800f26c:	687a      	ldr	r2, [r7, #4]
 800f26e:	7c12      	ldrb	r2, [r2, #16]
 800f270:	f107 0108 	add.w	r1, r7, #8
 800f274:	4610      	mov	r0, r2
 800f276:	4798      	blx	r3
 800f278:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f27a:	e029      	b.n	800f2d0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f27c:	6839      	ldr	r1, [r7, #0]
 800f27e:	6878      	ldr	r0, [r7, #4]
 800f280:	f000 fa42 	bl	800f708 <USBD_CtlError>
        err++;
 800f284:	7afb      	ldrb	r3, [r7, #11]
 800f286:	3301      	adds	r3, #1
 800f288:	72fb      	strb	r3, [r7, #11]
      break;
 800f28a:	e021      	b.n	800f2d0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f292:	699b      	ldr	r3, [r3, #24]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d00b      	beq.n	800f2b0 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f29e:	699b      	ldr	r3, [r3, #24]
 800f2a0:	687a      	ldr	r2, [r7, #4]
 800f2a2:	7c12      	ldrb	r2, [r2, #16]
 800f2a4:	f107 0108 	add.w	r1, r7, #8
 800f2a8:	4610      	mov	r0, r2
 800f2aa:	4798      	blx	r3
 800f2ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f2ae:	e00f      	b.n	800f2d0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f2b0:	6839      	ldr	r1, [r7, #0]
 800f2b2:	6878      	ldr	r0, [r7, #4]
 800f2b4:	f000 fa28 	bl	800f708 <USBD_CtlError>
        err++;
 800f2b8:	7afb      	ldrb	r3, [r7, #11]
 800f2ba:	3301      	adds	r3, #1
 800f2bc:	72fb      	strb	r3, [r7, #11]
      break;
 800f2be:	e007      	b.n	800f2d0 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800f2c0:	6839      	ldr	r1, [r7, #0]
 800f2c2:	6878      	ldr	r0, [r7, #4]
 800f2c4:	f000 fa20 	bl	800f708 <USBD_CtlError>
      err++;
 800f2c8:	7afb      	ldrb	r3, [r7, #11]
 800f2ca:	3301      	adds	r3, #1
 800f2cc:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800f2ce:	bf00      	nop
    }
    break;
 800f2d0:	e037      	b.n	800f342 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	7c1b      	ldrb	r3, [r3, #16]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d109      	bne.n	800f2ee <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2e2:	f107 0208 	add.w	r2, r7, #8
 800f2e6:	4610      	mov	r0, r2
 800f2e8:	4798      	blx	r3
 800f2ea:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f2ec:	e029      	b.n	800f342 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800f2ee:	6839      	ldr	r1, [r7, #0]
 800f2f0:	6878      	ldr	r0, [r7, #4]
 800f2f2:	f000 fa09 	bl	800f708 <USBD_CtlError>
      err++;
 800f2f6:	7afb      	ldrb	r3, [r7, #11]
 800f2f8:	3301      	adds	r3, #1
 800f2fa:	72fb      	strb	r3, [r7, #11]
    break;
 800f2fc:	e021      	b.n	800f342 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	7c1b      	ldrb	r3, [r3, #16]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d10d      	bne.n	800f322 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f30c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f30e:	f107 0208 	add.w	r2, r7, #8
 800f312:	4610      	mov	r0, r2
 800f314:	4798      	blx	r3
 800f316:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	3301      	adds	r3, #1
 800f31c:	2207      	movs	r2, #7
 800f31e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f320:	e00f      	b.n	800f342 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800f322:	6839      	ldr	r1, [r7, #0]
 800f324:	6878      	ldr	r0, [r7, #4]
 800f326:	f000 f9ef 	bl	800f708 <USBD_CtlError>
      err++;
 800f32a:	7afb      	ldrb	r3, [r7, #11]
 800f32c:	3301      	adds	r3, #1
 800f32e:	72fb      	strb	r3, [r7, #11]
    break;
 800f330:	e007      	b.n	800f342 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800f332:	6839      	ldr	r1, [r7, #0]
 800f334:	6878      	ldr	r0, [r7, #4]
 800f336:	f000 f9e7 	bl	800f708 <USBD_CtlError>
    err++;
 800f33a:	7afb      	ldrb	r3, [r7, #11]
 800f33c:	3301      	adds	r3, #1
 800f33e:	72fb      	strb	r3, [r7, #11]
    break;
 800f340:	bf00      	nop
  }

  if (err != 0U)
 800f342:	7afb      	ldrb	r3, [r7, #11]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d11e      	bne.n	800f386 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	88db      	ldrh	r3, [r3, #6]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d016      	beq.n	800f37e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800f350:	893b      	ldrh	r3, [r7, #8]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d00e      	beq.n	800f374 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	88da      	ldrh	r2, [r3, #6]
 800f35a:	893b      	ldrh	r3, [r7, #8]
 800f35c:	4293      	cmp	r3, r2
 800f35e:	bf28      	it	cs
 800f360:	4613      	movcs	r3, r2
 800f362:	b29b      	uxth	r3, r3
 800f364:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800f366:	893b      	ldrh	r3, [r7, #8]
 800f368:	461a      	mov	r2, r3
 800f36a:	68f9      	ldr	r1, [r7, #12]
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	f000 fa3c 	bl	800f7ea <USBD_CtlSendData>
 800f372:	e009      	b.n	800f388 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800f374:	6839      	ldr	r1, [r7, #0]
 800f376:	6878      	ldr	r0, [r7, #4]
 800f378:	f000 f9c6 	bl	800f708 <USBD_CtlError>
 800f37c:	e004      	b.n	800f388 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800f37e:	6878      	ldr	r0, [r7, #4]
 800f380:	f000 fa70 	bl	800f864 <USBD_CtlSendStatus>
 800f384:	e000      	b.n	800f388 <USBD_GetDescriptor+0x2cc>
    return;
 800f386:	bf00      	nop
    }
  }
}
 800f388:	3710      	adds	r7, #16
 800f38a:	46bd      	mov	sp, r7
 800f38c:	bd80      	pop	{r7, pc}
 800f38e:	bf00      	nop

0800f390 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f390:	b580      	push	{r7, lr}
 800f392:	b084      	sub	sp, #16
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
 800f398:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f39a:	683b      	ldr	r3, [r7, #0]
 800f39c:	889b      	ldrh	r3, [r3, #4]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d130      	bne.n	800f404 <USBD_SetAddress+0x74>
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	88db      	ldrh	r3, [r3, #6]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d12c      	bne.n	800f404 <USBD_SetAddress+0x74>
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	885b      	ldrh	r3, [r3, #2]
 800f3ae:	2b7f      	cmp	r3, #127	; 0x7f
 800f3b0:	d828      	bhi.n	800f404 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	885b      	ldrh	r3, [r3, #2]
 800f3b6:	b2db      	uxtb	r3, r3
 800f3b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f3bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3c4:	2b03      	cmp	r3, #3
 800f3c6:	d104      	bne.n	800f3d2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800f3c8:	6839      	ldr	r1, [r7, #0]
 800f3ca:	6878      	ldr	r0, [r7, #4]
 800f3cc:	f000 f99c 	bl	800f708 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3d0:	e01c      	b.n	800f40c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	7bfa      	ldrb	r2, [r7, #15]
 800f3d6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f3da:	7bfb      	ldrb	r3, [r7, #15]
 800f3dc:	4619      	mov	r1, r3
 800f3de:	6878      	ldr	r0, [r7, #4]
 800f3e0:	f003 f83b 	bl	801245a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f3e4:	6878      	ldr	r0, [r7, #4]
 800f3e6:	f000 fa3d 	bl	800f864 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f3ea:	7bfb      	ldrb	r3, [r7, #15]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d004      	beq.n	800f3fa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	2202      	movs	r2, #2
 800f3f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3f8:	e008      	b.n	800f40c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	2201      	movs	r2, #1
 800f3fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f402:	e003      	b.n	800f40c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f404:	6839      	ldr	r1, [r7, #0]
 800f406:	6878      	ldr	r0, [r7, #4]
 800f408:	f000 f97e 	bl	800f708 <USBD_CtlError>
  }
}
 800f40c:	bf00      	nop
 800f40e:	3710      	adds	r7, #16
 800f410:	46bd      	mov	sp, r7
 800f412:	bd80      	pop	{r7, pc}

0800f414 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b084      	sub	sp, #16
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
 800f41c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f41e:	2300      	movs	r3, #0
 800f420:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	885b      	ldrh	r3, [r3, #2]
 800f426:	b2da      	uxtb	r2, r3
 800f428:	4b4b      	ldr	r3, [pc, #300]	; (800f558 <USBD_SetConfig+0x144>)
 800f42a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f42c:	4b4a      	ldr	r3, [pc, #296]	; (800f558 <USBD_SetConfig+0x144>)
 800f42e:	781b      	ldrb	r3, [r3, #0]
 800f430:	2b01      	cmp	r3, #1
 800f432:	d905      	bls.n	800f440 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f434:	6839      	ldr	r1, [r7, #0]
 800f436:	6878      	ldr	r0, [r7, #4]
 800f438:	f000 f966 	bl	800f708 <USBD_CtlError>
    return USBD_FAIL;
 800f43c:	2303      	movs	r3, #3
 800f43e:	e087      	b.n	800f550 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f446:	2b02      	cmp	r3, #2
 800f448:	d002      	beq.n	800f450 <USBD_SetConfig+0x3c>
 800f44a:	2b03      	cmp	r3, #3
 800f44c:	d025      	beq.n	800f49a <USBD_SetConfig+0x86>
 800f44e:	e071      	b.n	800f534 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800f450:	4b41      	ldr	r3, [pc, #260]	; (800f558 <USBD_SetConfig+0x144>)
 800f452:	781b      	ldrb	r3, [r3, #0]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d01c      	beq.n	800f492 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800f458:	4b3f      	ldr	r3, [pc, #252]	; (800f558 <USBD_SetConfig+0x144>)
 800f45a:	781b      	ldrb	r3, [r3, #0]
 800f45c:	461a      	mov	r2, r3
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f462:	4b3d      	ldr	r3, [pc, #244]	; (800f558 <USBD_SetConfig+0x144>)
 800f464:	781b      	ldrb	r3, [r3, #0]
 800f466:	4619      	mov	r1, r3
 800f468:	6878      	ldr	r0, [r7, #4]
 800f46a:	f7ff f9a8 	bl	800e7be <USBD_SetClassConfig>
 800f46e:	4603      	mov	r3, r0
 800f470:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800f472:	7bfb      	ldrb	r3, [r7, #15]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d004      	beq.n	800f482 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800f478:	6839      	ldr	r1, [r7, #0]
 800f47a:	6878      	ldr	r0, [r7, #4]
 800f47c:	f000 f944 	bl	800f708 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f480:	e065      	b.n	800f54e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f482:	6878      	ldr	r0, [r7, #4]
 800f484:	f000 f9ee 	bl	800f864 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	2203      	movs	r2, #3
 800f48c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f490:	e05d      	b.n	800f54e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f492:	6878      	ldr	r0, [r7, #4]
 800f494:	f000 f9e6 	bl	800f864 <USBD_CtlSendStatus>
    break;
 800f498:	e059      	b.n	800f54e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800f49a:	4b2f      	ldr	r3, [pc, #188]	; (800f558 <USBD_SetConfig+0x144>)
 800f49c:	781b      	ldrb	r3, [r3, #0]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d112      	bne.n	800f4c8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	2202      	movs	r2, #2
 800f4a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800f4aa:	4b2b      	ldr	r3, [pc, #172]	; (800f558 <USBD_SetConfig+0x144>)
 800f4ac:	781b      	ldrb	r3, [r3, #0]
 800f4ae:	461a      	mov	r2, r3
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f4b4:	4b28      	ldr	r3, [pc, #160]	; (800f558 <USBD_SetConfig+0x144>)
 800f4b6:	781b      	ldrb	r3, [r3, #0]
 800f4b8:	4619      	mov	r1, r3
 800f4ba:	6878      	ldr	r0, [r7, #4]
 800f4bc:	f7ff f99b 	bl	800e7f6 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f000 f9cf 	bl	800f864 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f4c6:	e042      	b.n	800f54e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800f4c8:	4b23      	ldr	r3, [pc, #140]	; (800f558 <USBD_SetConfig+0x144>)
 800f4ca:	781b      	ldrb	r3, [r3, #0]
 800f4cc:	461a      	mov	r2, r3
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	685b      	ldr	r3, [r3, #4]
 800f4d2:	429a      	cmp	r2, r3
 800f4d4:	d02a      	beq.n	800f52c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	685b      	ldr	r3, [r3, #4]
 800f4da:	b2db      	uxtb	r3, r3
 800f4dc:	4619      	mov	r1, r3
 800f4de:	6878      	ldr	r0, [r7, #4]
 800f4e0:	f7ff f989 	bl	800e7f6 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800f4e4:	4b1c      	ldr	r3, [pc, #112]	; (800f558 <USBD_SetConfig+0x144>)
 800f4e6:	781b      	ldrb	r3, [r3, #0]
 800f4e8:	461a      	mov	r2, r3
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f4ee:	4b1a      	ldr	r3, [pc, #104]	; (800f558 <USBD_SetConfig+0x144>)
 800f4f0:	781b      	ldrb	r3, [r3, #0]
 800f4f2:	4619      	mov	r1, r3
 800f4f4:	6878      	ldr	r0, [r7, #4]
 800f4f6:	f7ff f962 	bl	800e7be <USBD_SetClassConfig>
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800f4fe:	7bfb      	ldrb	r3, [r7, #15]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d00f      	beq.n	800f524 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800f504:	6839      	ldr	r1, [r7, #0]
 800f506:	6878      	ldr	r0, [r7, #4]
 800f508:	f000 f8fe 	bl	800f708 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	685b      	ldr	r3, [r3, #4]
 800f510:	b2db      	uxtb	r3, r3
 800f512:	4619      	mov	r1, r3
 800f514:	6878      	ldr	r0, [r7, #4]
 800f516:	f7ff f96e 	bl	800e7f6 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	2202      	movs	r2, #2
 800f51e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f522:	e014      	b.n	800f54e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f524:	6878      	ldr	r0, [r7, #4]
 800f526:	f000 f99d 	bl	800f864 <USBD_CtlSendStatus>
    break;
 800f52a:	e010      	b.n	800f54e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f52c:	6878      	ldr	r0, [r7, #4]
 800f52e:	f000 f999 	bl	800f864 <USBD_CtlSendStatus>
    break;
 800f532:	e00c      	b.n	800f54e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800f534:	6839      	ldr	r1, [r7, #0]
 800f536:	6878      	ldr	r0, [r7, #4]
 800f538:	f000 f8e6 	bl	800f708 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f53c:	4b06      	ldr	r3, [pc, #24]	; (800f558 <USBD_SetConfig+0x144>)
 800f53e:	781b      	ldrb	r3, [r3, #0]
 800f540:	4619      	mov	r1, r3
 800f542:	6878      	ldr	r0, [r7, #4]
 800f544:	f7ff f957 	bl	800e7f6 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800f548:	2303      	movs	r3, #3
 800f54a:	73fb      	strb	r3, [r7, #15]
    break;
 800f54c:	bf00      	nop
  }

  return ret;
 800f54e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f550:	4618      	mov	r0, r3
 800f552:	3710      	adds	r7, #16
 800f554:	46bd      	mov	sp, r7
 800f556:	bd80      	pop	{r7, pc}
 800f558:	240001f0 	.word	0x240001f0

0800f55c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b082      	sub	sp, #8
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
 800f564:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f566:	683b      	ldr	r3, [r7, #0]
 800f568:	88db      	ldrh	r3, [r3, #6]
 800f56a:	2b01      	cmp	r3, #1
 800f56c:	d004      	beq.n	800f578 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f56e:	6839      	ldr	r1, [r7, #0]
 800f570:	6878      	ldr	r0, [r7, #4]
 800f572:	f000 f8c9 	bl	800f708 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800f576:	e021      	b.n	800f5bc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f57e:	2b01      	cmp	r3, #1
 800f580:	db17      	blt.n	800f5b2 <USBD_GetConfig+0x56>
 800f582:	2b02      	cmp	r3, #2
 800f584:	dd02      	ble.n	800f58c <USBD_GetConfig+0x30>
 800f586:	2b03      	cmp	r3, #3
 800f588:	d00b      	beq.n	800f5a2 <USBD_GetConfig+0x46>
 800f58a:	e012      	b.n	800f5b2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	2200      	movs	r2, #0
 800f590:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	3308      	adds	r3, #8
 800f596:	2201      	movs	r2, #1
 800f598:	4619      	mov	r1, r3
 800f59a:	6878      	ldr	r0, [r7, #4]
 800f59c:	f000 f925 	bl	800f7ea <USBD_CtlSendData>
      break;
 800f5a0:	e00c      	b.n	800f5bc <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	3304      	adds	r3, #4
 800f5a6:	2201      	movs	r2, #1
 800f5a8:	4619      	mov	r1, r3
 800f5aa:	6878      	ldr	r0, [r7, #4]
 800f5ac:	f000 f91d 	bl	800f7ea <USBD_CtlSendData>
      break;
 800f5b0:	e004      	b.n	800f5bc <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800f5b2:	6839      	ldr	r1, [r7, #0]
 800f5b4:	6878      	ldr	r0, [r7, #4]
 800f5b6:	f000 f8a7 	bl	800f708 <USBD_CtlError>
      break;
 800f5ba:	bf00      	nop
}
 800f5bc:	bf00      	nop
 800f5be:	3708      	adds	r7, #8
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bd80      	pop	{r7, pc}

0800f5c4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b082      	sub	sp, #8
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
 800f5cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f5d4:	3b01      	subs	r3, #1
 800f5d6:	2b02      	cmp	r3, #2
 800f5d8:	d81e      	bhi.n	800f618 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800f5da:	683b      	ldr	r3, [r7, #0]
 800f5dc:	88db      	ldrh	r3, [r3, #6]
 800f5de:	2b02      	cmp	r3, #2
 800f5e0:	d004      	beq.n	800f5ec <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800f5e2:	6839      	ldr	r1, [r7, #0]
 800f5e4:	6878      	ldr	r0, [r7, #4]
 800f5e6:	f000 f88f 	bl	800f708 <USBD_CtlError>
      break;
 800f5ea:	e01a      	b.n	800f622 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	2201      	movs	r2, #1
 800f5f0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d005      	beq.n	800f608 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	68db      	ldr	r3, [r3, #12]
 800f600:	f043 0202 	orr.w	r2, r3, #2
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	330c      	adds	r3, #12
 800f60c:	2202      	movs	r2, #2
 800f60e:	4619      	mov	r1, r3
 800f610:	6878      	ldr	r0, [r7, #4]
 800f612:	f000 f8ea 	bl	800f7ea <USBD_CtlSendData>
    break;
 800f616:	e004      	b.n	800f622 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800f618:	6839      	ldr	r1, [r7, #0]
 800f61a:	6878      	ldr	r0, [r7, #4]
 800f61c:	f000 f874 	bl	800f708 <USBD_CtlError>
    break;
 800f620:	bf00      	nop
  }
}
 800f622:	bf00      	nop
 800f624:	3708      	adds	r7, #8
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}

0800f62a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f62a:	b580      	push	{r7, lr}
 800f62c:	b082      	sub	sp, #8
 800f62e:	af00      	add	r7, sp, #0
 800f630:	6078      	str	r0, [r7, #4]
 800f632:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	885b      	ldrh	r3, [r3, #2]
 800f638:	2b01      	cmp	r3, #1
 800f63a:	d106      	bne.n	800f64a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2201      	movs	r2, #1
 800f640:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f644:	6878      	ldr	r0, [r7, #4]
 800f646:	f000 f90d 	bl	800f864 <USBD_CtlSendStatus>
  }
}
 800f64a:	bf00      	nop
 800f64c:	3708      	adds	r7, #8
 800f64e:	46bd      	mov	sp, r7
 800f650:	bd80      	pop	{r7, pc}

0800f652 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f652:	b580      	push	{r7, lr}
 800f654:	b082      	sub	sp, #8
 800f656:	af00      	add	r7, sp, #0
 800f658:	6078      	str	r0, [r7, #4]
 800f65a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f662:	3b01      	subs	r3, #1
 800f664:	2b02      	cmp	r3, #2
 800f666:	d80b      	bhi.n	800f680 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	885b      	ldrh	r3, [r3, #2]
 800f66c:	2b01      	cmp	r3, #1
 800f66e:	d10c      	bne.n	800f68a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	2200      	movs	r2, #0
 800f674:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f678:	6878      	ldr	r0, [r7, #4]
 800f67a:	f000 f8f3 	bl	800f864 <USBD_CtlSendStatus>
      }
      break;
 800f67e:	e004      	b.n	800f68a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800f680:	6839      	ldr	r1, [r7, #0]
 800f682:	6878      	ldr	r0, [r7, #4]
 800f684:	f000 f840 	bl	800f708 <USBD_CtlError>
      break;
 800f688:	e000      	b.n	800f68c <USBD_ClrFeature+0x3a>
      break;
 800f68a:	bf00      	nop
  }
}
 800f68c:	bf00      	nop
 800f68e:	3708      	adds	r7, #8
 800f690:	46bd      	mov	sp, r7
 800f692:	bd80      	pop	{r7, pc}

0800f694 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f694:	b580      	push	{r7, lr}
 800f696:	b084      	sub	sp, #16
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
 800f69c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f69e:	683b      	ldr	r3, [r7, #0]
 800f6a0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	781a      	ldrb	r2, [r3, #0]
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	3301      	adds	r3, #1
 800f6ae:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	781a      	ldrb	r2, [r3, #0]
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	3301      	adds	r3, #1
 800f6bc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f6be:	68f8      	ldr	r0, [r7, #12]
 800f6c0:	f7ff fad4 	bl	800ec6c <SWAPBYTE>
 800f6c4:	4603      	mov	r3, r0
 800f6c6:	461a      	mov	r2, r3
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	3301      	adds	r3, #1
 800f6d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	3301      	adds	r3, #1
 800f6d6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f6d8:	68f8      	ldr	r0, [r7, #12]
 800f6da:	f7ff fac7 	bl	800ec6c <SWAPBYTE>
 800f6de:	4603      	mov	r3, r0
 800f6e0:	461a      	mov	r2, r3
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	3301      	adds	r3, #1
 800f6ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	3301      	adds	r3, #1
 800f6f0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f6f2:	68f8      	ldr	r0, [r7, #12]
 800f6f4:	f7ff faba 	bl	800ec6c <SWAPBYTE>
 800f6f8:	4603      	mov	r3, r0
 800f6fa:	461a      	mov	r2, r3
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	80da      	strh	r2, [r3, #6]
}
 800f700:	bf00      	nop
 800f702:	3710      	adds	r7, #16
 800f704:	46bd      	mov	sp, r7
 800f706:	bd80      	pop	{r7, pc}

0800f708 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b082      	sub	sp, #8
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
 800f710:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f712:	2180      	movs	r1, #128	; 0x80
 800f714:	6878      	ldr	r0, [r7, #4]
 800f716:	f002 fe36 	bl	8012386 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f71a:	2100      	movs	r1, #0
 800f71c:	6878      	ldr	r0, [r7, #4]
 800f71e:	f002 fe32 	bl	8012386 <USBD_LL_StallEP>
}
 800f722:	bf00      	nop
 800f724:	3708      	adds	r7, #8
 800f726:	46bd      	mov	sp, r7
 800f728:	bd80      	pop	{r7, pc}

0800f72a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f72a:	b580      	push	{r7, lr}
 800f72c:	b086      	sub	sp, #24
 800f72e:	af00      	add	r7, sp, #0
 800f730:	60f8      	str	r0, [r7, #12]
 800f732:	60b9      	str	r1, [r7, #8]
 800f734:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f736:	2300      	movs	r3, #0
 800f738:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d036      	beq.n	800f7ae <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f744:	6938      	ldr	r0, [r7, #16]
 800f746:	f000 f836 	bl	800f7b6 <USBD_GetLen>
 800f74a:	4603      	mov	r3, r0
 800f74c:	3301      	adds	r3, #1
 800f74e:	b29b      	uxth	r3, r3
 800f750:	005b      	lsls	r3, r3, #1
 800f752:	b29a      	uxth	r2, r3
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f758:	7dfb      	ldrb	r3, [r7, #23]
 800f75a:	68ba      	ldr	r2, [r7, #8]
 800f75c:	4413      	add	r3, r2
 800f75e:	687a      	ldr	r2, [r7, #4]
 800f760:	7812      	ldrb	r2, [r2, #0]
 800f762:	701a      	strb	r2, [r3, #0]
  idx++;
 800f764:	7dfb      	ldrb	r3, [r7, #23]
 800f766:	3301      	adds	r3, #1
 800f768:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f76a:	7dfb      	ldrb	r3, [r7, #23]
 800f76c:	68ba      	ldr	r2, [r7, #8]
 800f76e:	4413      	add	r3, r2
 800f770:	2203      	movs	r2, #3
 800f772:	701a      	strb	r2, [r3, #0]
  idx++;
 800f774:	7dfb      	ldrb	r3, [r7, #23]
 800f776:	3301      	adds	r3, #1
 800f778:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f77a:	e013      	b.n	800f7a4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f77c:	7dfb      	ldrb	r3, [r7, #23]
 800f77e:	68ba      	ldr	r2, [r7, #8]
 800f780:	4413      	add	r3, r2
 800f782:	693a      	ldr	r2, [r7, #16]
 800f784:	7812      	ldrb	r2, [r2, #0]
 800f786:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f788:	693b      	ldr	r3, [r7, #16]
 800f78a:	3301      	adds	r3, #1
 800f78c:	613b      	str	r3, [r7, #16]
    idx++;
 800f78e:	7dfb      	ldrb	r3, [r7, #23]
 800f790:	3301      	adds	r3, #1
 800f792:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f794:	7dfb      	ldrb	r3, [r7, #23]
 800f796:	68ba      	ldr	r2, [r7, #8]
 800f798:	4413      	add	r3, r2
 800f79a:	2200      	movs	r2, #0
 800f79c:	701a      	strb	r2, [r3, #0]
    idx++;
 800f79e:	7dfb      	ldrb	r3, [r7, #23]
 800f7a0:	3301      	adds	r3, #1
 800f7a2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f7a4:	693b      	ldr	r3, [r7, #16]
 800f7a6:	781b      	ldrb	r3, [r3, #0]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d1e7      	bne.n	800f77c <USBD_GetString+0x52>
 800f7ac:	e000      	b.n	800f7b0 <USBD_GetString+0x86>
    return;
 800f7ae:	bf00      	nop
  }
}
 800f7b0:	3718      	adds	r7, #24
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	bd80      	pop	{r7, pc}

0800f7b6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f7b6:	b480      	push	{r7}
 800f7b8:	b085      	sub	sp, #20
 800f7ba:	af00      	add	r7, sp, #0
 800f7bc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f7be:	2300      	movs	r3, #0
 800f7c0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f7c6:	e005      	b.n	800f7d4 <USBD_GetLen+0x1e>
  {
    len++;
 800f7c8:	7bfb      	ldrb	r3, [r7, #15]
 800f7ca:	3301      	adds	r3, #1
 800f7cc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f7ce:	68bb      	ldr	r3, [r7, #8]
 800f7d0:	3301      	adds	r3, #1
 800f7d2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f7d4:	68bb      	ldr	r3, [r7, #8]
 800f7d6:	781b      	ldrb	r3, [r3, #0]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d1f5      	bne.n	800f7c8 <USBD_GetLen+0x12>
  }

  return len;
 800f7dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7de:	4618      	mov	r0, r3
 800f7e0:	3714      	adds	r7, #20
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e8:	4770      	bx	lr

0800f7ea <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f7ea:	b580      	push	{r7, lr}
 800f7ec:	b084      	sub	sp, #16
 800f7ee:	af00      	add	r7, sp, #0
 800f7f0:	60f8      	str	r0, [r7, #12]
 800f7f2:	60b9      	str	r1, [r7, #8]
 800f7f4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	2202      	movs	r2, #2
 800f7fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	687a      	ldr	r2, [r7, #4]
 800f802:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	687a      	ldr	r2, [r7, #4]
 800f808:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	68ba      	ldr	r2, [r7, #8]
 800f80e:	2100      	movs	r1, #0
 800f810:	68f8      	ldr	r0, [r7, #12]
 800f812:	f002 fe41 	bl	8012498 <USBD_LL_Transmit>

  return USBD_OK;
 800f816:	2300      	movs	r3, #0
}
 800f818:	4618      	mov	r0, r3
 800f81a:	3710      	adds	r7, #16
 800f81c:	46bd      	mov	sp, r7
 800f81e:	bd80      	pop	{r7, pc}

0800f820 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f820:	b580      	push	{r7, lr}
 800f822:	b084      	sub	sp, #16
 800f824:	af00      	add	r7, sp, #0
 800f826:	60f8      	str	r0, [r7, #12]
 800f828:	60b9      	str	r1, [r7, #8]
 800f82a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	68ba      	ldr	r2, [r7, #8]
 800f830:	2100      	movs	r1, #0
 800f832:	68f8      	ldr	r0, [r7, #12]
 800f834:	f002 fe30 	bl	8012498 <USBD_LL_Transmit>

  return USBD_OK;
 800f838:	2300      	movs	r3, #0
}
 800f83a:	4618      	mov	r0, r3
 800f83c:	3710      	adds	r7, #16
 800f83e:	46bd      	mov	sp, r7
 800f840:	bd80      	pop	{r7, pc}

0800f842 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f842:	b580      	push	{r7, lr}
 800f844:	b084      	sub	sp, #16
 800f846:	af00      	add	r7, sp, #0
 800f848:	60f8      	str	r0, [r7, #12]
 800f84a:	60b9      	str	r1, [r7, #8]
 800f84c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	68ba      	ldr	r2, [r7, #8]
 800f852:	2100      	movs	r1, #0
 800f854:	68f8      	ldr	r0, [r7, #12]
 800f856:	f002 fe40 	bl	80124da <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f85a:	2300      	movs	r3, #0
}
 800f85c:	4618      	mov	r0, r3
 800f85e:	3710      	adds	r7, #16
 800f860:	46bd      	mov	sp, r7
 800f862:	bd80      	pop	{r7, pc}

0800f864 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b082      	sub	sp, #8
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	2204      	movs	r2, #4
 800f870:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f874:	2300      	movs	r3, #0
 800f876:	2200      	movs	r2, #0
 800f878:	2100      	movs	r1, #0
 800f87a:	6878      	ldr	r0, [r7, #4]
 800f87c:	f002 fe0c 	bl	8012498 <USBD_LL_Transmit>

  return USBD_OK;
 800f880:	2300      	movs	r3, #0
}
 800f882:	4618      	mov	r0, r3
 800f884:	3708      	adds	r7, #8
 800f886:	46bd      	mov	sp, r7
 800f888:	bd80      	pop	{r7, pc}

0800f88a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f88a:	b580      	push	{r7, lr}
 800f88c:	b082      	sub	sp, #8
 800f88e:	af00      	add	r7, sp, #0
 800f890:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	2205      	movs	r2, #5
 800f896:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f89a:	2300      	movs	r3, #0
 800f89c:	2200      	movs	r2, #0
 800f89e:	2100      	movs	r1, #0
 800f8a0:	6878      	ldr	r0, [r7, #4]
 800f8a2:	f002 fe1a 	bl	80124da <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f8a6:	2300      	movs	r3, #0
}
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	3708      	adds	r7, #8
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	bd80      	pop	{r7, pc}

0800f8b0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b084      	sub	sp, #16
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f8ba:	79fb      	ldrb	r3, [r7, #7]
 800f8bc:	4a08      	ldr	r2, [pc, #32]	; (800f8e0 <disk_status+0x30>)
 800f8be:	009b      	lsls	r3, r3, #2
 800f8c0:	4413      	add	r3, r2
 800f8c2:	685b      	ldr	r3, [r3, #4]
 800f8c4:	685b      	ldr	r3, [r3, #4]
 800f8c6:	79fa      	ldrb	r2, [r7, #7]
 800f8c8:	4905      	ldr	r1, [pc, #20]	; (800f8e0 <disk_status+0x30>)
 800f8ca:	440a      	add	r2, r1
 800f8cc:	7a12      	ldrb	r2, [r2, #8]
 800f8ce:	4610      	mov	r0, r2
 800f8d0:	4798      	blx	r3
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f8d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8d8:	4618      	mov	r0, r3
 800f8da:	3710      	adds	r7, #16
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	bd80      	pop	{r7, pc}
 800f8e0:	2400021c 	.word	0x2400021c

0800f8e4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b084      	sub	sp, #16
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f8f2:	79fb      	ldrb	r3, [r7, #7]
 800f8f4:	4a0d      	ldr	r2, [pc, #52]	; (800f92c <disk_initialize+0x48>)
 800f8f6:	5cd3      	ldrb	r3, [r2, r3]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d111      	bne.n	800f920 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f8fc:	79fb      	ldrb	r3, [r7, #7]
 800f8fe:	4a0b      	ldr	r2, [pc, #44]	; (800f92c <disk_initialize+0x48>)
 800f900:	2101      	movs	r1, #1
 800f902:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f904:	79fb      	ldrb	r3, [r7, #7]
 800f906:	4a09      	ldr	r2, [pc, #36]	; (800f92c <disk_initialize+0x48>)
 800f908:	009b      	lsls	r3, r3, #2
 800f90a:	4413      	add	r3, r2
 800f90c:	685b      	ldr	r3, [r3, #4]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	79fa      	ldrb	r2, [r7, #7]
 800f912:	4906      	ldr	r1, [pc, #24]	; (800f92c <disk_initialize+0x48>)
 800f914:	440a      	add	r2, r1
 800f916:	7a12      	ldrb	r2, [r2, #8]
 800f918:	4610      	mov	r0, r2
 800f91a:	4798      	blx	r3
 800f91c:	4603      	mov	r3, r0
 800f91e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f920:	7bfb      	ldrb	r3, [r7, #15]
}
 800f922:	4618      	mov	r0, r3
 800f924:	3710      	adds	r7, #16
 800f926:	46bd      	mov	sp, r7
 800f928:	bd80      	pop	{r7, pc}
 800f92a:	bf00      	nop
 800f92c:	2400021c 	.word	0x2400021c

0800f930 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f930:	b590      	push	{r4, r7, lr}
 800f932:	b087      	sub	sp, #28
 800f934:	af00      	add	r7, sp, #0
 800f936:	60b9      	str	r1, [r7, #8]
 800f938:	607a      	str	r2, [r7, #4]
 800f93a:	603b      	str	r3, [r7, #0]
 800f93c:	4603      	mov	r3, r0
 800f93e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f940:	7bfb      	ldrb	r3, [r7, #15]
 800f942:	4a0a      	ldr	r2, [pc, #40]	; (800f96c <disk_read+0x3c>)
 800f944:	009b      	lsls	r3, r3, #2
 800f946:	4413      	add	r3, r2
 800f948:	685b      	ldr	r3, [r3, #4]
 800f94a:	689c      	ldr	r4, [r3, #8]
 800f94c:	7bfb      	ldrb	r3, [r7, #15]
 800f94e:	4a07      	ldr	r2, [pc, #28]	; (800f96c <disk_read+0x3c>)
 800f950:	4413      	add	r3, r2
 800f952:	7a18      	ldrb	r0, [r3, #8]
 800f954:	683b      	ldr	r3, [r7, #0]
 800f956:	687a      	ldr	r2, [r7, #4]
 800f958:	68b9      	ldr	r1, [r7, #8]
 800f95a:	47a0      	blx	r4
 800f95c:	4603      	mov	r3, r0
 800f95e:	75fb      	strb	r3, [r7, #23]
  return res;
 800f960:	7dfb      	ldrb	r3, [r7, #23]
}
 800f962:	4618      	mov	r0, r3
 800f964:	371c      	adds	r7, #28
 800f966:	46bd      	mov	sp, r7
 800f968:	bd90      	pop	{r4, r7, pc}
 800f96a:	bf00      	nop
 800f96c:	2400021c 	.word	0x2400021c

0800f970 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f970:	b590      	push	{r4, r7, lr}
 800f972:	b087      	sub	sp, #28
 800f974:	af00      	add	r7, sp, #0
 800f976:	60b9      	str	r1, [r7, #8]
 800f978:	607a      	str	r2, [r7, #4]
 800f97a:	603b      	str	r3, [r7, #0]
 800f97c:	4603      	mov	r3, r0
 800f97e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f980:	7bfb      	ldrb	r3, [r7, #15]
 800f982:	4a0a      	ldr	r2, [pc, #40]	; (800f9ac <disk_write+0x3c>)
 800f984:	009b      	lsls	r3, r3, #2
 800f986:	4413      	add	r3, r2
 800f988:	685b      	ldr	r3, [r3, #4]
 800f98a:	68dc      	ldr	r4, [r3, #12]
 800f98c:	7bfb      	ldrb	r3, [r7, #15]
 800f98e:	4a07      	ldr	r2, [pc, #28]	; (800f9ac <disk_write+0x3c>)
 800f990:	4413      	add	r3, r2
 800f992:	7a18      	ldrb	r0, [r3, #8]
 800f994:	683b      	ldr	r3, [r7, #0]
 800f996:	687a      	ldr	r2, [r7, #4]
 800f998:	68b9      	ldr	r1, [r7, #8]
 800f99a:	47a0      	blx	r4
 800f99c:	4603      	mov	r3, r0
 800f99e:	75fb      	strb	r3, [r7, #23]
  return res;
 800f9a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	371c      	adds	r7, #28
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	bd90      	pop	{r4, r7, pc}
 800f9aa:	bf00      	nop
 800f9ac:	2400021c 	.word	0x2400021c

0800f9b0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b084      	sub	sp, #16
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	603a      	str	r2, [r7, #0]
 800f9ba:	71fb      	strb	r3, [r7, #7]
 800f9bc:	460b      	mov	r3, r1
 800f9be:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f9c0:	79fb      	ldrb	r3, [r7, #7]
 800f9c2:	4a09      	ldr	r2, [pc, #36]	; (800f9e8 <disk_ioctl+0x38>)
 800f9c4:	009b      	lsls	r3, r3, #2
 800f9c6:	4413      	add	r3, r2
 800f9c8:	685b      	ldr	r3, [r3, #4]
 800f9ca:	691b      	ldr	r3, [r3, #16]
 800f9cc:	79fa      	ldrb	r2, [r7, #7]
 800f9ce:	4906      	ldr	r1, [pc, #24]	; (800f9e8 <disk_ioctl+0x38>)
 800f9d0:	440a      	add	r2, r1
 800f9d2:	7a10      	ldrb	r0, [r2, #8]
 800f9d4:	79b9      	ldrb	r1, [r7, #6]
 800f9d6:	683a      	ldr	r2, [r7, #0]
 800f9d8:	4798      	blx	r3
 800f9da:	4603      	mov	r3, r0
 800f9dc:	73fb      	strb	r3, [r7, #15]
  return res;
 800f9de:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	3710      	adds	r7, #16
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}
 800f9e8:	2400021c 	.word	0x2400021c

0800f9ec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f9ec:	b480      	push	{r7}
 800f9ee:	b085      	sub	sp, #20
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	3301      	adds	r3, #1
 800f9f8:	781b      	ldrb	r3, [r3, #0]
 800f9fa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f9fc:	89fb      	ldrh	r3, [r7, #14]
 800f9fe:	021b      	lsls	r3, r3, #8
 800fa00:	b21a      	sxth	r2, r3
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	781b      	ldrb	r3, [r3, #0]
 800fa06:	b21b      	sxth	r3, r3
 800fa08:	4313      	orrs	r3, r2
 800fa0a:	b21b      	sxth	r3, r3
 800fa0c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800fa0e:	89fb      	ldrh	r3, [r7, #14]
}
 800fa10:	4618      	mov	r0, r3
 800fa12:	3714      	adds	r7, #20
 800fa14:	46bd      	mov	sp, r7
 800fa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1a:	4770      	bx	lr

0800fa1c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800fa1c:	b480      	push	{r7}
 800fa1e:	b085      	sub	sp, #20
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	3303      	adds	r3, #3
 800fa28:	781b      	ldrb	r3, [r3, #0]
 800fa2a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	021b      	lsls	r3, r3, #8
 800fa30:	687a      	ldr	r2, [r7, #4]
 800fa32:	3202      	adds	r2, #2
 800fa34:	7812      	ldrb	r2, [r2, #0]
 800fa36:	4313      	orrs	r3, r2
 800fa38:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	021b      	lsls	r3, r3, #8
 800fa3e:	687a      	ldr	r2, [r7, #4]
 800fa40:	3201      	adds	r2, #1
 800fa42:	7812      	ldrb	r2, [r2, #0]
 800fa44:	4313      	orrs	r3, r2
 800fa46:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	021b      	lsls	r3, r3, #8
 800fa4c:	687a      	ldr	r2, [r7, #4]
 800fa4e:	7812      	ldrb	r2, [r2, #0]
 800fa50:	4313      	orrs	r3, r2
 800fa52:	60fb      	str	r3, [r7, #12]
	return rv;
 800fa54:	68fb      	ldr	r3, [r7, #12]
}
 800fa56:	4618      	mov	r0, r3
 800fa58:	3714      	adds	r7, #20
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa60:	4770      	bx	lr

0800fa62 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800fa62:	b480      	push	{r7}
 800fa64:	b083      	sub	sp, #12
 800fa66:	af00      	add	r7, sp, #0
 800fa68:	6078      	str	r0, [r7, #4]
 800fa6a:	460b      	mov	r3, r1
 800fa6c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	1c5a      	adds	r2, r3, #1
 800fa72:	607a      	str	r2, [r7, #4]
 800fa74:	887a      	ldrh	r2, [r7, #2]
 800fa76:	b2d2      	uxtb	r2, r2
 800fa78:	701a      	strb	r2, [r3, #0]
 800fa7a:	887b      	ldrh	r3, [r7, #2]
 800fa7c:	0a1b      	lsrs	r3, r3, #8
 800fa7e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	1c5a      	adds	r2, r3, #1
 800fa84:	607a      	str	r2, [r7, #4]
 800fa86:	887a      	ldrh	r2, [r7, #2]
 800fa88:	b2d2      	uxtb	r2, r2
 800fa8a:	701a      	strb	r2, [r3, #0]
}
 800fa8c:	bf00      	nop
 800fa8e:	370c      	adds	r7, #12
 800fa90:	46bd      	mov	sp, r7
 800fa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa96:	4770      	bx	lr

0800fa98 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800fa98:	b480      	push	{r7}
 800fa9a:	b083      	sub	sp, #12
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
 800faa0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	1c5a      	adds	r2, r3, #1
 800faa6:	607a      	str	r2, [r7, #4]
 800faa8:	683a      	ldr	r2, [r7, #0]
 800faaa:	b2d2      	uxtb	r2, r2
 800faac:	701a      	strb	r2, [r3, #0]
 800faae:	683b      	ldr	r3, [r7, #0]
 800fab0:	0a1b      	lsrs	r3, r3, #8
 800fab2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	1c5a      	adds	r2, r3, #1
 800fab8:	607a      	str	r2, [r7, #4]
 800faba:	683a      	ldr	r2, [r7, #0]
 800fabc:	b2d2      	uxtb	r2, r2
 800fabe:	701a      	strb	r2, [r3, #0]
 800fac0:	683b      	ldr	r3, [r7, #0]
 800fac2:	0a1b      	lsrs	r3, r3, #8
 800fac4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	1c5a      	adds	r2, r3, #1
 800faca:	607a      	str	r2, [r7, #4]
 800facc:	683a      	ldr	r2, [r7, #0]
 800face:	b2d2      	uxtb	r2, r2
 800fad0:	701a      	strb	r2, [r3, #0]
 800fad2:	683b      	ldr	r3, [r7, #0]
 800fad4:	0a1b      	lsrs	r3, r3, #8
 800fad6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	1c5a      	adds	r2, r3, #1
 800fadc:	607a      	str	r2, [r7, #4]
 800fade:	683a      	ldr	r2, [r7, #0]
 800fae0:	b2d2      	uxtb	r2, r2
 800fae2:	701a      	strb	r2, [r3, #0]
}
 800fae4:	bf00      	nop
 800fae6:	370c      	adds	r7, #12
 800fae8:	46bd      	mov	sp, r7
 800faea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faee:	4770      	bx	lr

0800faf0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800faf0:	b480      	push	{r7}
 800faf2:	b087      	sub	sp, #28
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	60f8      	str	r0, [r7, #12]
 800faf8:	60b9      	str	r1, [r7, #8]
 800fafa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800fb00:	68bb      	ldr	r3, [r7, #8]
 800fb02:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d00d      	beq.n	800fb26 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800fb0a:	693a      	ldr	r2, [r7, #16]
 800fb0c:	1c53      	adds	r3, r2, #1
 800fb0e:	613b      	str	r3, [r7, #16]
 800fb10:	697b      	ldr	r3, [r7, #20]
 800fb12:	1c59      	adds	r1, r3, #1
 800fb14:	6179      	str	r1, [r7, #20]
 800fb16:	7812      	ldrb	r2, [r2, #0]
 800fb18:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	3b01      	subs	r3, #1
 800fb1e:	607b      	str	r3, [r7, #4]
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d1f1      	bne.n	800fb0a <mem_cpy+0x1a>
	}
}
 800fb26:	bf00      	nop
 800fb28:	371c      	adds	r7, #28
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb30:	4770      	bx	lr

0800fb32 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800fb32:	b480      	push	{r7}
 800fb34:	b087      	sub	sp, #28
 800fb36:	af00      	add	r7, sp, #0
 800fb38:	60f8      	str	r0, [r7, #12]
 800fb3a:	60b9      	str	r1, [r7, #8]
 800fb3c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800fb42:	697b      	ldr	r3, [r7, #20]
 800fb44:	1c5a      	adds	r2, r3, #1
 800fb46:	617a      	str	r2, [r7, #20]
 800fb48:	68ba      	ldr	r2, [r7, #8]
 800fb4a:	b2d2      	uxtb	r2, r2
 800fb4c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	3b01      	subs	r3, #1
 800fb52:	607b      	str	r3, [r7, #4]
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d1f3      	bne.n	800fb42 <mem_set+0x10>
}
 800fb5a:	bf00      	nop
 800fb5c:	371c      	adds	r7, #28
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb64:	4770      	bx	lr

0800fb66 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800fb66:	b480      	push	{r7}
 800fb68:	b089      	sub	sp, #36	; 0x24
 800fb6a:	af00      	add	r7, sp, #0
 800fb6c:	60f8      	str	r0, [r7, #12]
 800fb6e:	60b9      	str	r1, [r7, #8]
 800fb70:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	61fb      	str	r3, [r7, #28]
 800fb76:	68bb      	ldr	r3, [r7, #8]
 800fb78:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800fb7e:	69fb      	ldr	r3, [r7, #28]
 800fb80:	1c5a      	adds	r2, r3, #1
 800fb82:	61fa      	str	r2, [r7, #28]
 800fb84:	781b      	ldrb	r3, [r3, #0]
 800fb86:	4619      	mov	r1, r3
 800fb88:	69bb      	ldr	r3, [r7, #24]
 800fb8a:	1c5a      	adds	r2, r3, #1
 800fb8c:	61ba      	str	r2, [r7, #24]
 800fb8e:	781b      	ldrb	r3, [r3, #0]
 800fb90:	1acb      	subs	r3, r1, r3
 800fb92:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	3b01      	subs	r3, #1
 800fb98:	607b      	str	r3, [r7, #4]
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d002      	beq.n	800fba6 <mem_cmp+0x40>
 800fba0:	697b      	ldr	r3, [r7, #20]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d0eb      	beq.n	800fb7e <mem_cmp+0x18>

	return r;
 800fba6:	697b      	ldr	r3, [r7, #20]
}
 800fba8:	4618      	mov	r0, r3
 800fbaa:	3724      	adds	r7, #36	; 0x24
 800fbac:	46bd      	mov	sp, r7
 800fbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb2:	4770      	bx	lr

0800fbb4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800fbb4:	b480      	push	{r7}
 800fbb6:	b083      	sub	sp, #12
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	6078      	str	r0, [r7, #4]
 800fbbc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800fbbe:	e002      	b.n	800fbc6 <chk_chr+0x12>
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	3301      	adds	r3, #1
 800fbc4:	607b      	str	r3, [r7, #4]
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	781b      	ldrb	r3, [r3, #0]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d005      	beq.n	800fbda <chk_chr+0x26>
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	781b      	ldrb	r3, [r3, #0]
 800fbd2:	461a      	mov	r2, r3
 800fbd4:	683b      	ldr	r3, [r7, #0]
 800fbd6:	4293      	cmp	r3, r2
 800fbd8:	d1f2      	bne.n	800fbc0 <chk_chr+0xc>
	return *str;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	781b      	ldrb	r3, [r3, #0]
}
 800fbde:	4618      	mov	r0, r3
 800fbe0:	370c      	adds	r7, #12
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe8:	4770      	bx	lr
	...

0800fbec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fbec:	b480      	push	{r7}
 800fbee:	b085      	sub	sp, #20
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
 800fbf4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	60bb      	str	r3, [r7, #8]
 800fbfa:	68bb      	ldr	r3, [r7, #8]
 800fbfc:	60fb      	str	r3, [r7, #12]
 800fbfe:	e029      	b.n	800fc54 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800fc00:	4a27      	ldr	r2, [pc, #156]	; (800fca0 <chk_lock+0xb4>)
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	011b      	lsls	r3, r3, #4
 800fc06:	4413      	add	r3, r2
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d01d      	beq.n	800fc4a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fc0e:	4a24      	ldr	r2, [pc, #144]	; (800fca0 <chk_lock+0xb4>)
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	011b      	lsls	r3, r3, #4
 800fc14:	4413      	add	r3, r2
 800fc16:	681a      	ldr	r2, [r3, #0]
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	429a      	cmp	r2, r3
 800fc1e:	d116      	bne.n	800fc4e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800fc20:	4a1f      	ldr	r2, [pc, #124]	; (800fca0 <chk_lock+0xb4>)
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	011b      	lsls	r3, r3, #4
 800fc26:	4413      	add	r3, r2
 800fc28:	3304      	adds	r3, #4
 800fc2a:	681a      	ldr	r2, [r3, #0]
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fc30:	429a      	cmp	r2, r3
 800fc32:	d10c      	bne.n	800fc4e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fc34:	4a1a      	ldr	r2, [pc, #104]	; (800fca0 <chk_lock+0xb4>)
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	011b      	lsls	r3, r3, #4
 800fc3a:	4413      	add	r3, r2
 800fc3c:	3308      	adds	r3, #8
 800fc3e:	681a      	ldr	r2, [r3, #0]
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800fc44:	429a      	cmp	r2, r3
 800fc46:	d102      	bne.n	800fc4e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fc48:	e007      	b.n	800fc5a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800fc4a:	2301      	movs	r3, #1
 800fc4c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	3301      	adds	r3, #1
 800fc52:	60fb      	str	r3, [r7, #12]
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	2b01      	cmp	r3, #1
 800fc58:	d9d2      	bls.n	800fc00 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	2b02      	cmp	r3, #2
 800fc5e:	d109      	bne.n	800fc74 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800fc60:	68bb      	ldr	r3, [r7, #8]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d102      	bne.n	800fc6c <chk_lock+0x80>
 800fc66:	683b      	ldr	r3, [r7, #0]
 800fc68:	2b02      	cmp	r3, #2
 800fc6a:	d101      	bne.n	800fc70 <chk_lock+0x84>
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	e010      	b.n	800fc92 <chk_lock+0xa6>
 800fc70:	2312      	movs	r3, #18
 800fc72:	e00e      	b.n	800fc92 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800fc74:	683b      	ldr	r3, [r7, #0]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d108      	bne.n	800fc8c <chk_lock+0xa0>
 800fc7a:	4a09      	ldr	r2, [pc, #36]	; (800fca0 <chk_lock+0xb4>)
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	011b      	lsls	r3, r3, #4
 800fc80:	4413      	add	r3, r2
 800fc82:	330c      	adds	r3, #12
 800fc84:	881b      	ldrh	r3, [r3, #0]
 800fc86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc8a:	d101      	bne.n	800fc90 <chk_lock+0xa4>
 800fc8c:	2310      	movs	r3, #16
 800fc8e:	e000      	b.n	800fc92 <chk_lock+0xa6>
 800fc90:	2300      	movs	r3, #0
}
 800fc92:	4618      	mov	r0, r3
 800fc94:	3714      	adds	r7, #20
 800fc96:	46bd      	mov	sp, r7
 800fc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9c:	4770      	bx	lr
 800fc9e:	bf00      	nop
 800fca0:	240001fc 	.word	0x240001fc

0800fca4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800fca4:	b480      	push	{r7}
 800fca6:	b083      	sub	sp, #12
 800fca8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fcaa:	2300      	movs	r3, #0
 800fcac:	607b      	str	r3, [r7, #4]
 800fcae:	e002      	b.n	800fcb6 <enq_lock+0x12>
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	3301      	adds	r3, #1
 800fcb4:	607b      	str	r3, [r7, #4]
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	2b01      	cmp	r3, #1
 800fcba:	d806      	bhi.n	800fcca <enq_lock+0x26>
 800fcbc:	4a09      	ldr	r2, [pc, #36]	; (800fce4 <enq_lock+0x40>)
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	011b      	lsls	r3, r3, #4
 800fcc2:	4413      	add	r3, r2
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d1f2      	bne.n	800fcb0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	2b02      	cmp	r3, #2
 800fcce:	bf14      	ite	ne
 800fcd0:	2301      	movne	r3, #1
 800fcd2:	2300      	moveq	r3, #0
 800fcd4:	b2db      	uxtb	r3, r3
}
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	370c      	adds	r7, #12
 800fcda:	46bd      	mov	sp, r7
 800fcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce0:	4770      	bx	lr
 800fce2:	bf00      	nop
 800fce4:	240001fc 	.word	0x240001fc

0800fce8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fce8:	b480      	push	{r7}
 800fcea:	b085      	sub	sp, #20
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
 800fcf0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	60fb      	str	r3, [r7, #12]
 800fcf6:	e01f      	b.n	800fd38 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800fcf8:	4a41      	ldr	r2, [pc, #260]	; (800fe00 <inc_lock+0x118>)
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	011b      	lsls	r3, r3, #4
 800fcfe:	4413      	add	r3, r2
 800fd00:	681a      	ldr	r2, [r3, #0]
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	429a      	cmp	r2, r3
 800fd08:	d113      	bne.n	800fd32 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800fd0a:	4a3d      	ldr	r2, [pc, #244]	; (800fe00 <inc_lock+0x118>)
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	011b      	lsls	r3, r3, #4
 800fd10:	4413      	add	r3, r2
 800fd12:	3304      	adds	r3, #4
 800fd14:	681a      	ldr	r2, [r3, #0]
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800fd1a:	429a      	cmp	r2, r3
 800fd1c:	d109      	bne.n	800fd32 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800fd1e:	4a38      	ldr	r2, [pc, #224]	; (800fe00 <inc_lock+0x118>)
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	011b      	lsls	r3, r3, #4
 800fd24:	4413      	add	r3, r2
 800fd26:	3308      	adds	r3, #8
 800fd28:	681a      	ldr	r2, [r3, #0]
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800fd2e:	429a      	cmp	r2, r3
 800fd30:	d006      	beq.n	800fd40 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	3301      	adds	r3, #1
 800fd36:	60fb      	str	r3, [r7, #12]
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	2b01      	cmp	r3, #1
 800fd3c:	d9dc      	bls.n	800fcf8 <inc_lock+0x10>
 800fd3e:	e000      	b.n	800fd42 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800fd40:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	2b02      	cmp	r3, #2
 800fd46:	d132      	bne.n	800fdae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fd48:	2300      	movs	r3, #0
 800fd4a:	60fb      	str	r3, [r7, #12]
 800fd4c:	e002      	b.n	800fd54 <inc_lock+0x6c>
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	3301      	adds	r3, #1
 800fd52:	60fb      	str	r3, [r7, #12]
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	2b01      	cmp	r3, #1
 800fd58:	d806      	bhi.n	800fd68 <inc_lock+0x80>
 800fd5a:	4a29      	ldr	r2, [pc, #164]	; (800fe00 <inc_lock+0x118>)
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	011b      	lsls	r3, r3, #4
 800fd60:	4413      	add	r3, r2
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d1f2      	bne.n	800fd4e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	2b02      	cmp	r3, #2
 800fd6c:	d101      	bne.n	800fd72 <inc_lock+0x8a>
 800fd6e:	2300      	movs	r3, #0
 800fd70:	e040      	b.n	800fdf4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	681a      	ldr	r2, [r3, #0]
 800fd76:	4922      	ldr	r1, [pc, #136]	; (800fe00 <inc_lock+0x118>)
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	011b      	lsls	r3, r3, #4
 800fd7c:	440b      	add	r3, r1
 800fd7e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	689a      	ldr	r2, [r3, #8]
 800fd84:	491e      	ldr	r1, [pc, #120]	; (800fe00 <inc_lock+0x118>)
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	011b      	lsls	r3, r3, #4
 800fd8a:	440b      	add	r3, r1
 800fd8c:	3304      	adds	r3, #4
 800fd8e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	695a      	ldr	r2, [r3, #20]
 800fd94:	491a      	ldr	r1, [pc, #104]	; (800fe00 <inc_lock+0x118>)
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	011b      	lsls	r3, r3, #4
 800fd9a:	440b      	add	r3, r1
 800fd9c:	3308      	adds	r3, #8
 800fd9e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800fda0:	4a17      	ldr	r2, [pc, #92]	; (800fe00 <inc_lock+0x118>)
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	011b      	lsls	r3, r3, #4
 800fda6:	4413      	add	r3, r2
 800fda8:	330c      	adds	r3, #12
 800fdaa:	2200      	movs	r2, #0
 800fdac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800fdae:	683b      	ldr	r3, [r7, #0]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d009      	beq.n	800fdc8 <inc_lock+0xe0>
 800fdb4:	4a12      	ldr	r2, [pc, #72]	; (800fe00 <inc_lock+0x118>)
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	011b      	lsls	r3, r3, #4
 800fdba:	4413      	add	r3, r2
 800fdbc:	330c      	adds	r3, #12
 800fdbe:	881b      	ldrh	r3, [r3, #0]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d001      	beq.n	800fdc8 <inc_lock+0xe0>
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	e015      	b.n	800fdf4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d108      	bne.n	800fde0 <inc_lock+0xf8>
 800fdce:	4a0c      	ldr	r2, [pc, #48]	; (800fe00 <inc_lock+0x118>)
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	011b      	lsls	r3, r3, #4
 800fdd4:	4413      	add	r3, r2
 800fdd6:	330c      	adds	r3, #12
 800fdd8:	881b      	ldrh	r3, [r3, #0]
 800fdda:	3301      	adds	r3, #1
 800fddc:	b29a      	uxth	r2, r3
 800fdde:	e001      	b.n	800fde4 <inc_lock+0xfc>
 800fde0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fde4:	4906      	ldr	r1, [pc, #24]	; (800fe00 <inc_lock+0x118>)
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	011b      	lsls	r3, r3, #4
 800fdea:	440b      	add	r3, r1
 800fdec:	330c      	adds	r3, #12
 800fdee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	3301      	adds	r3, #1
}
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	3714      	adds	r7, #20
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdfe:	4770      	bx	lr
 800fe00:	240001fc 	.word	0x240001fc

0800fe04 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800fe04:	b480      	push	{r7}
 800fe06:	b085      	sub	sp, #20
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	3b01      	subs	r3, #1
 800fe10:	607b      	str	r3, [r7, #4]
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	2b01      	cmp	r3, #1
 800fe16:	d825      	bhi.n	800fe64 <dec_lock+0x60>
		n = Files[i].ctr;
 800fe18:	4a17      	ldr	r2, [pc, #92]	; (800fe78 <dec_lock+0x74>)
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	011b      	lsls	r3, r3, #4
 800fe1e:	4413      	add	r3, r2
 800fe20:	330c      	adds	r3, #12
 800fe22:	881b      	ldrh	r3, [r3, #0]
 800fe24:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800fe26:	89fb      	ldrh	r3, [r7, #14]
 800fe28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fe2c:	d101      	bne.n	800fe32 <dec_lock+0x2e>
 800fe2e:	2300      	movs	r3, #0
 800fe30:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800fe32:	89fb      	ldrh	r3, [r7, #14]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d002      	beq.n	800fe3e <dec_lock+0x3a>
 800fe38:	89fb      	ldrh	r3, [r7, #14]
 800fe3a:	3b01      	subs	r3, #1
 800fe3c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800fe3e:	4a0e      	ldr	r2, [pc, #56]	; (800fe78 <dec_lock+0x74>)
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	011b      	lsls	r3, r3, #4
 800fe44:	4413      	add	r3, r2
 800fe46:	330c      	adds	r3, #12
 800fe48:	89fa      	ldrh	r2, [r7, #14]
 800fe4a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800fe4c:	89fb      	ldrh	r3, [r7, #14]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d105      	bne.n	800fe5e <dec_lock+0x5a>
 800fe52:	4a09      	ldr	r2, [pc, #36]	; (800fe78 <dec_lock+0x74>)
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	011b      	lsls	r3, r3, #4
 800fe58:	4413      	add	r3, r2
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800fe5e:	2300      	movs	r3, #0
 800fe60:	737b      	strb	r3, [r7, #13]
 800fe62:	e001      	b.n	800fe68 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800fe64:	2302      	movs	r3, #2
 800fe66:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800fe68:	7b7b      	ldrb	r3, [r7, #13]
}
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	3714      	adds	r7, #20
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe74:	4770      	bx	lr
 800fe76:	bf00      	nop
 800fe78:	240001fc 	.word	0x240001fc

0800fe7c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800fe7c:	b480      	push	{r7}
 800fe7e:	b085      	sub	sp, #20
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800fe84:	2300      	movs	r3, #0
 800fe86:	60fb      	str	r3, [r7, #12]
 800fe88:	e010      	b.n	800feac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800fe8a:	4a0d      	ldr	r2, [pc, #52]	; (800fec0 <clear_lock+0x44>)
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	011b      	lsls	r3, r3, #4
 800fe90:	4413      	add	r3, r2
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	687a      	ldr	r2, [r7, #4]
 800fe96:	429a      	cmp	r2, r3
 800fe98:	d105      	bne.n	800fea6 <clear_lock+0x2a>
 800fe9a:	4a09      	ldr	r2, [pc, #36]	; (800fec0 <clear_lock+0x44>)
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	011b      	lsls	r3, r3, #4
 800fea0:	4413      	add	r3, r2
 800fea2:	2200      	movs	r2, #0
 800fea4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	3301      	adds	r3, #1
 800feaa:	60fb      	str	r3, [r7, #12]
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	2b01      	cmp	r3, #1
 800feb0:	d9eb      	bls.n	800fe8a <clear_lock+0xe>
	}
}
 800feb2:	bf00      	nop
 800feb4:	3714      	adds	r7, #20
 800feb6:	46bd      	mov	sp, r7
 800feb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800febc:	4770      	bx	lr
 800febe:	bf00      	nop
 800fec0:	240001fc 	.word	0x240001fc

0800fec4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b086      	sub	sp, #24
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800fecc:	2300      	movs	r3, #0
 800fece:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	78db      	ldrb	r3, [r3, #3]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d034      	beq.n	800ff42 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fedc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	7858      	ldrb	r0, [r3, #1]
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fee8:	2301      	movs	r3, #1
 800feea:	697a      	ldr	r2, [r7, #20]
 800feec:	f7ff fd40 	bl	800f970 <disk_write>
 800fef0:	4603      	mov	r3, r0
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d002      	beq.n	800fefc <sync_window+0x38>
			res = FR_DISK_ERR;
 800fef6:	2301      	movs	r3, #1
 800fef8:	73fb      	strb	r3, [r7, #15]
 800fefa:	e022      	b.n	800ff42 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	2200      	movs	r2, #0
 800ff00:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	6a1b      	ldr	r3, [r3, #32]
 800ff06:	697a      	ldr	r2, [r7, #20]
 800ff08:	1ad2      	subs	r2, r2, r3
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	699b      	ldr	r3, [r3, #24]
 800ff0e:	429a      	cmp	r2, r3
 800ff10:	d217      	bcs.n	800ff42 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	789b      	ldrb	r3, [r3, #2]
 800ff16:	613b      	str	r3, [r7, #16]
 800ff18:	e010      	b.n	800ff3c <sync_window+0x78>
					wsect += fs->fsize;
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	699b      	ldr	r3, [r3, #24]
 800ff1e:	697a      	ldr	r2, [r7, #20]
 800ff20:	4413      	add	r3, r2
 800ff22:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	7858      	ldrb	r0, [r3, #1]
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ff2e:	2301      	movs	r3, #1
 800ff30:	697a      	ldr	r2, [r7, #20]
 800ff32:	f7ff fd1d 	bl	800f970 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ff36:	693b      	ldr	r3, [r7, #16]
 800ff38:	3b01      	subs	r3, #1
 800ff3a:	613b      	str	r3, [r7, #16]
 800ff3c:	693b      	ldr	r3, [r7, #16]
 800ff3e:	2b01      	cmp	r3, #1
 800ff40:	d8eb      	bhi.n	800ff1a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ff42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff44:	4618      	mov	r0, r3
 800ff46:	3718      	adds	r7, #24
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	bd80      	pop	{r7, pc}

0800ff4c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b084      	sub	sp, #16
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
 800ff54:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ff56:	2300      	movs	r3, #0
 800ff58:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff5e:	683a      	ldr	r2, [r7, #0]
 800ff60:	429a      	cmp	r2, r3
 800ff62:	d01b      	beq.n	800ff9c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ff64:	6878      	ldr	r0, [r7, #4]
 800ff66:	f7ff ffad 	bl	800fec4 <sync_window>
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ff6e:	7bfb      	ldrb	r3, [r7, #15]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d113      	bne.n	800ff9c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	7858      	ldrb	r0, [r3, #1]
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ff7e:	2301      	movs	r3, #1
 800ff80:	683a      	ldr	r2, [r7, #0]
 800ff82:	f7ff fcd5 	bl	800f930 <disk_read>
 800ff86:	4603      	mov	r3, r0
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d004      	beq.n	800ff96 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ff8c:	f04f 33ff 	mov.w	r3, #4294967295
 800ff90:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ff92:	2301      	movs	r3, #1
 800ff94:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	683a      	ldr	r2, [r7, #0]
 800ff9a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800ff9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	3710      	adds	r7, #16
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	bd80      	pop	{r7, pc}
	...

0800ffa8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b084      	sub	sp, #16
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ffb0:	6878      	ldr	r0, [r7, #4]
 800ffb2:	f7ff ff87 	bl	800fec4 <sync_window>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ffba:	7bfb      	ldrb	r3, [r7, #15]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d158      	bne.n	8010072 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	781b      	ldrb	r3, [r3, #0]
 800ffc4:	2b03      	cmp	r3, #3
 800ffc6:	d148      	bne.n	801005a <sync_fs+0xb2>
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	791b      	ldrb	r3, [r3, #4]
 800ffcc:	2b01      	cmp	r3, #1
 800ffce:	d144      	bne.n	801005a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	3330      	adds	r3, #48	; 0x30
 800ffd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ffd8:	2100      	movs	r1, #0
 800ffda:	4618      	mov	r0, r3
 800ffdc:	f7ff fda9 	bl	800fb32 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	3330      	adds	r3, #48	; 0x30
 800ffe4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ffe8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ffec:	4618      	mov	r0, r3
 800ffee:	f7ff fd38 	bl	800fa62 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	3330      	adds	r3, #48	; 0x30
 800fff6:	4921      	ldr	r1, [pc, #132]	; (801007c <sync_fs+0xd4>)
 800fff8:	4618      	mov	r0, r3
 800fffa:	f7ff fd4d 	bl	800fa98 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	3330      	adds	r3, #48	; 0x30
 8010002:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010006:	491e      	ldr	r1, [pc, #120]	; (8010080 <sync_fs+0xd8>)
 8010008:	4618      	mov	r0, r3
 801000a:	f7ff fd45 	bl	800fa98 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	3330      	adds	r3, #48	; 0x30
 8010012:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	691b      	ldr	r3, [r3, #16]
 801001a:	4619      	mov	r1, r3
 801001c:	4610      	mov	r0, r2
 801001e:	f7ff fd3b 	bl	800fa98 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	3330      	adds	r3, #48	; 0x30
 8010026:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	68db      	ldr	r3, [r3, #12]
 801002e:	4619      	mov	r1, r3
 8010030:	4610      	mov	r0, r2
 8010032:	f7ff fd31 	bl	800fa98 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	69db      	ldr	r3, [r3, #28]
 801003a:	1c5a      	adds	r2, r3, #1
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	7858      	ldrb	r0, [r3, #1]
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801004e:	2301      	movs	r3, #1
 8010050:	f7ff fc8e 	bl	800f970 <disk_write>
			fs->fsi_flag = 0;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	2200      	movs	r2, #0
 8010058:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	785b      	ldrb	r3, [r3, #1]
 801005e:	2200      	movs	r2, #0
 8010060:	2100      	movs	r1, #0
 8010062:	4618      	mov	r0, r3
 8010064:	f7ff fca4 	bl	800f9b0 <disk_ioctl>
 8010068:	4603      	mov	r3, r0
 801006a:	2b00      	cmp	r3, #0
 801006c:	d001      	beq.n	8010072 <sync_fs+0xca>
 801006e:	2301      	movs	r3, #1
 8010070:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010072:	7bfb      	ldrb	r3, [r7, #15]
}
 8010074:	4618      	mov	r0, r3
 8010076:	3710      	adds	r7, #16
 8010078:	46bd      	mov	sp, r7
 801007a:	bd80      	pop	{r7, pc}
 801007c:	41615252 	.word	0x41615252
 8010080:	61417272 	.word	0x61417272

08010084 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010084:	b480      	push	{r7}
 8010086:	b083      	sub	sp, #12
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
 801008c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801008e:	683b      	ldr	r3, [r7, #0]
 8010090:	3b02      	subs	r3, #2
 8010092:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	695b      	ldr	r3, [r3, #20]
 8010098:	3b02      	subs	r3, #2
 801009a:	683a      	ldr	r2, [r7, #0]
 801009c:	429a      	cmp	r2, r3
 801009e:	d301      	bcc.n	80100a4 <clust2sect+0x20>
 80100a0:	2300      	movs	r3, #0
 80100a2:	e008      	b.n	80100b6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	895b      	ldrh	r3, [r3, #10]
 80100a8:	461a      	mov	r2, r3
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	fb03 f202 	mul.w	r2, r3, r2
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100b4:	4413      	add	r3, r2
}
 80100b6:	4618      	mov	r0, r3
 80100b8:	370c      	adds	r7, #12
 80100ba:	46bd      	mov	sp, r7
 80100bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c0:	4770      	bx	lr

080100c2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80100c2:	b580      	push	{r7, lr}
 80100c4:	b086      	sub	sp, #24
 80100c6:	af00      	add	r7, sp, #0
 80100c8:	6078      	str	r0, [r7, #4]
 80100ca:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80100d2:	683b      	ldr	r3, [r7, #0]
 80100d4:	2b01      	cmp	r3, #1
 80100d6:	d904      	bls.n	80100e2 <get_fat+0x20>
 80100d8:	693b      	ldr	r3, [r7, #16]
 80100da:	695b      	ldr	r3, [r3, #20]
 80100dc:	683a      	ldr	r2, [r7, #0]
 80100de:	429a      	cmp	r2, r3
 80100e0:	d302      	bcc.n	80100e8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80100e2:	2301      	movs	r3, #1
 80100e4:	617b      	str	r3, [r7, #20]
 80100e6:	e08c      	b.n	8010202 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80100e8:	f04f 33ff 	mov.w	r3, #4294967295
 80100ec:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80100ee:	693b      	ldr	r3, [r7, #16]
 80100f0:	781b      	ldrb	r3, [r3, #0]
 80100f2:	2b02      	cmp	r3, #2
 80100f4:	d045      	beq.n	8010182 <get_fat+0xc0>
 80100f6:	2b03      	cmp	r3, #3
 80100f8:	d05d      	beq.n	80101b6 <get_fat+0xf4>
 80100fa:	2b01      	cmp	r3, #1
 80100fc:	d177      	bne.n	80101ee <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80100fe:	683b      	ldr	r3, [r7, #0]
 8010100:	60fb      	str	r3, [r7, #12]
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	085b      	lsrs	r3, r3, #1
 8010106:	68fa      	ldr	r2, [r7, #12]
 8010108:	4413      	add	r3, r2
 801010a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801010c:	693b      	ldr	r3, [r7, #16]
 801010e:	6a1a      	ldr	r2, [r3, #32]
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	0a5b      	lsrs	r3, r3, #9
 8010114:	4413      	add	r3, r2
 8010116:	4619      	mov	r1, r3
 8010118:	6938      	ldr	r0, [r7, #16]
 801011a:	f7ff ff17 	bl	800ff4c <move_window>
 801011e:	4603      	mov	r3, r0
 8010120:	2b00      	cmp	r3, #0
 8010122:	d167      	bne.n	80101f4 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	1c5a      	adds	r2, r3, #1
 8010128:	60fa      	str	r2, [r7, #12]
 801012a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801012e:	693a      	ldr	r2, [r7, #16]
 8010130:	4413      	add	r3, r2
 8010132:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010136:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010138:	693b      	ldr	r3, [r7, #16]
 801013a:	6a1a      	ldr	r2, [r3, #32]
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	0a5b      	lsrs	r3, r3, #9
 8010140:	4413      	add	r3, r2
 8010142:	4619      	mov	r1, r3
 8010144:	6938      	ldr	r0, [r7, #16]
 8010146:	f7ff ff01 	bl	800ff4c <move_window>
 801014a:	4603      	mov	r3, r0
 801014c:	2b00      	cmp	r3, #0
 801014e:	d153      	bne.n	80101f8 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010156:	693a      	ldr	r2, [r7, #16]
 8010158:	4413      	add	r3, r2
 801015a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801015e:	021b      	lsls	r3, r3, #8
 8010160:	461a      	mov	r2, r3
 8010162:	68bb      	ldr	r3, [r7, #8]
 8010164:	4313      	orrs	r3, r2
 8010166:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010168:	683b      	ldr	r3, [r7, #0]
 801016a:	f003 0301 	and.w	r3, r3, #1
 801016e:	2b00      	cmp	r3, #0
 8010170:	d002      	beq.n	8010178 <get_fat+0xb6>
 8010172:	68bb      	ldr	r3, [r7, #8]
 8010174:	091b      	lsrs	r3, r3, #4
 8010176:	e002      	b.n	801017e <get_fat+0xbc>
 8010178:	68bb      	ldr	r3, [r7, #8]
 801017a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801017e:	617b      	str	r3, [r7, #20]
			break;
 8010180:	e03f      	b.n	8010202 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010182:	693b      	ldr	r3, [r7, #16]
 8010184:	6a1a      	ldr	r2, [r3, #32]
 8010186:	683b      	ldr	r3, [r7, #0]
 8010188:	0a1b      	lsrs	r3, r3, #8
 801018a:	4413      	add	r3, r2
 801018c:	4619      	mov	r1, r3
 801018e:	6938      	ldr	r0, [r7, #16]
 8010190:	f7ff fedc 	bl	800ff4c <move_window>
 8010194:	4603      	mov	r3, r0
 8010196:	2b00      	cmp	r3, #0
 8010198:	d130      	bne.n	80101fc <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801019a:	693b      	ldr	r3, [r7, #16]
 801019c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80101a0:	683b      	ldr	r3, [r7, #0]
 80101a2:	005b      	lsls	r3, r3, #1
 80101a4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80101a8:	4413      	add	r3, r2
 80101aa:	4618      	mov	r0, r3
 80101ac:	f7ff fc1e 	bl	800f9ec <ld_word>
 80101b0:	4603      	mov	r3, r0
 80101b2:	617b      	str	r3, [r7, #20]
			break;
 80101b4:	e025      	b.n	8010202 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80101b6:	693b      	ldr	r3, [r7, #16]
 80101b8:	6a1a      	ldr	r2, [r3, #32]
 80101ba:	683b      	ldr	r3, [r7, #0]
 80101bc:	09db      	lsrs	r3, r3, #7
 80101be:	4413      	add	r3, r2
 80101c0:	4619      	mov	r1, r3
 80101c2:	6938      	ldr	r0, [r7, #16]
 80101c4:	f7ff fec2 	bl	800ff4c <move_window>
 80101c8:	4603      	mov	r3, r0
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d118      	bne.n	8010200 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80101ce:	693b      	ldr	r3, [r7, #16]
 80101d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80101d4:	683b      	ldr	r3, [r7, #0]
 80101d6:	009b      	lsls	r3, r3, #2
 80101d8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80101dc:	4413      	add	r3, r2
 80101de:	4618      	mov	r0, r3
 80101e0:	f7ff fc1c 	bl	800fa1c <ld_dword>
 80101e4:	4603      	mov	r3, r0
 80101e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80101ea:	617b      	str	r3, [r7, #20]
			break;
 80101ec:	e009      	b.n	8010202 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80101ee:	2301      	movs	r3, #1
 80101f0:	617b      	str	r3, [r7, #20]
 80101f2:	e006      	b.n	8010202 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80101f4:	bf00      	nop
 80101f6:	e004      	b.n	8010202 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80101f8:	bf00      	nop
 80101fa:	e002      	b.n	8010202 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80101fc:	bf00      	nop
 80101fe:	e000      	b.n	8010202 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010200:	bf00      	nop
		}
	}

	return val;
 8010202:	697b      	ldr	r3, [r7, #20]
}
 8010204:	4618      	mov	r0, r3
 8010206:	3718      	adds	r7, #24
 8010208:	46bd      	mov	sp, r7
 801020a:	bd80      	pop	{r7, pc}

0801020c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801020c:	b590      	push	{r4, r7, lr}
 801020e:	b089      	sub	sp, #36	; 0x24
 8010210:	af00      	add	r7, sp, #0
 8010212:	60f8      	str	r0, [r7, #12]
 8010214:	60b9      	str	r1, [r7, #8]
 8010216:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010218:	2302      	movs	r3, #2
 801021a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801021c:	68bb      	ldr	r3, [r7, #8]
 801021e:	2b01      	cmp	r3, #1
 8010220:	f240 80d6 	bls.w	80103d0 <put_fat+0x1c4>
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	695b      	ldr	r3, [r3, #20]
 8010228:	68ba      	ldr	r2, [r7, #8]
 801022a:	429a      	cmp	r2, r3
 801022c:	f080 80d0 	bcs.w	80103d0 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	781b      	ldrb	r3, [r3, #0]
 8010234:	2b02      	cmp	r3, #2
 8010236:	d073      	beq.n	8010320 <put_fat+0x114>
 8010238:	2b03      	cmp	r3, #3
 801023a:	f000 8091 	beq.w	8010360 <put_fat+0x154>
 801023e:	2b01      	cmp	r3, #1
 8010240:	f040 80c6 	bne.w	80103d0 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010244:	68bb      	ldr	r3, [r7, #8]
 8010246:	61bb      	str	r3, [r7, #24]
 8010248:	69bb      	ldr	r3, [r7, #24]
 801024a:	085b      	lsrs	r3, r3, #1
 801024c:	69ba      	ldr	r2, [r7, #24]
 801024e:	4413      	add	r3, r2
 8010250:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	6a1a      	ldr	r2, [r3, #32]
 8010256:	69bb      	ldr	r3, [r7, #24]
 8010258:	0a5b      	lsrs	r3, r3, #9
 801025a:	4413      	add	r3, r2
 801025c:	4619      	mov	r1, r3
 801025e:	68f8      	ldr	r0, [r7, #12]
 8010260:	f7ff fe74 	bl	800ff4c <move_window>
 8010264:	4603      	mov	r3, r0
 8010266:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010268:	7ffb      	ldrb	r3, [r7, #31]
 801026a:	2b00      	cmp	r3, #0
 801026c:	f040 80a9 	bne.w	80103c2 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010276:	69bb      	ldr	r3, [r7, #24]
 8010278:	1c59      	adds	r1, r3, #1
 801027a:	61b9      	str	r1, [r7, #24]
 801027c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010280:	4413      	add	r3, r2
 8010282:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010284:	68bb      	ldr	r3, [r7, #8]
 8010286:	f003 0301 	and.w	r3, r3, #1
 801028a:	2b00      	cmp	r3, #0
 801028c:	d00d      	beq.n	80102aa <put_fat+0x9e>
 801028e:	697b      	ldr	r3, [r7, #20]
 8010290:	781b      	ldrb	r3, [r3, #0]
 8010292:	b25b      	sxtb	r3, r3
 8010294:	f003 030f 	and.w	r3, r3, #15
 8010298:	b25a      	sxtb	r2, r3
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	b2db      	uxtb	r3, r3
 801029e:	011b      	lsls	r3, r3, #4
 80102a0:	b25b      	sxtb	r3, r3
 80102a2:	4313      	orrs	r3, r2
 80102a4:	b25b      	sxtb	r3, r3
 80102a6:	b2db      	uxtb	r3, r3
 80102a8:	e001      	b.n	80102ae <put_fat+0xa2>
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	b2db      	uxtb	r3, r3
 80102ae:	697a      	ldr	r2, [r7, #20]
 80102b0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	2201      	movs	r2, #1
 80102b6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	6a1a      	ldr	r2, [r3, #32]
 80102bc:	69bb      	ldr	r3, [r7, #24]
 80102be:	0a5b      	lsrs	r3, r3, #9
 80102c0:	4413      	add	r3, r2
 80102c2:	4619      	mov	r1, r3
 80102c4:	68f8      	ldr	r0, [r7, #12]
 80102c6:	f7ff fe41 	bl	800ff4c <move_window>
 80102ca:	4603      	mov	r3, r0
 80102cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80102ce:	7ffb      	ldrb	r3, [r7, #31]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d178      	bne.n	80103c6 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80102da:	69bb      	ldr	r3, [r7, #24]
 80102dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80102e0:	4413      	add	r3, r2
 80102e2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80102e4:	68bb      	ldr	r3, [r7, #8]
 80102e6:	f003 0301 	and.w	r3, r3, #1
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d003      	beq.n	80102f6 <put_fat+0xea>
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	091b      	lsrs	r3, r3, #4
 80102f2:	b2db      	uxtb	r3, r3
 80102f4:	e00e      	b.n	8010314 <put_fat+0x108>
 80102f6:	697b      	ldr	r3, [r7, #20]
 80102f8:	781b      	ldrb	r3, [r3, #0]
 80102fa:	b25b      	sxtb	r3, r3
 80102fc:	f023 030f 	bic.w	r3, r3, #15
 8010300:	b25a      	sxtb	r2, r3
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	0a1b      	lsrs	r3, r3, #8
 8010306:	b25b      	sxtb	r3, r3
 8010308:	f003 030f 	and.w	r3, r3, #15
 801030c:	b25b      	sxtb	r3, r3
 801030e:	4313      	orrs	r3, r2
 8010310:	b25b      	sxtb	r3, r3
 8010312:	b2db      	uxtb	r3, r3
 8010314:	697a      	ldr	r2, [r7, #20]
 8010316:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	2201      	movs	r2, #1
 801031c:	70da      	strb	r2, [r3, #3]
			break;
 801031e:	e057      	b.n	80103d0 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	6a1a      	ldr	r2, [r3, #32]
 8010324:	68bb      	ldr	r3, [r7, #8]
 8010326:	0a1b      	lsrs	r3, r3, #8
 8010328:	4413      	add	r3, r2
 801032a:	4619      	mov	r1, r3
 801032c:	68f8      	ldr	r0, [r7, #12]
 801032e:	f7ff fe0d 	bl	800ff4c <move_window>
 8010332:	4603      	mov	r3, r0
 8010334:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010336:	7ffb      	ldrb	r3, [r7, #31]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d146      	bne.n	80103ca <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010342:	68bb      	ldr	r3, [r7, #8]
 8010344:	005b      	lsls	r3, r3, #1
 8010346:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801034a:	4413      	add	r3, r2
 801034c:	687a      	ldr	r2, [r7, #4]
 801034e:	b292      	uxth	r2, r2
 8010350:	4611      	mov	r1, r2
 8010352:	4618      	mov	r0, r3
 8010354:	f7ff fb85 	bl	800fa62 <st_word>
			fs->wflag = 1;
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	2201      	movs	r2, #1
 801035c:	70da      	strb	r2, [r3, #3]
			break;
 801035e:	e037      	b.n	80103d0 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	6a1a      	ldr	r2, [r3, #32]
 8010364:	68bb      	ldr	r3, [r7, #8]
 8010366:	09db      	lsrs	r3, r3, #7
 8010368:	4413      	add	r3, r2
 801036a:	4619      	mov	r1, r3
 801036c:	68f8      	ldr	r0, [r7, #12]
 801036e:	f7ff fded 	bl	800ff4c <move_window>
 8010372:	4603      	mov	r3, r0
 8010374:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010376:	7ffb      	ldrb	r3, [r7, #31]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d128      	bne.n	80103ce <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010388:	68bb      	ldr	r3, [r7, #8]
 801038a:	009b      	lsls	r3, r3, #2
 801038c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010390:	4413      	add	r3, r2
 8010392:	4618      	mov	r0, r3
 8010394:	f7ff fb42 	bl	800fa1c <ld_dword>
 8010398:	4603      	mov	r3, r0
 801039a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801039e:	4323      	orrs	r3, r4
 80103a0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80103a8:	68bb      	ldr	r3, [r7, #8]
 80103aa:	009b      	lsls	r3, r3, #2
 80103ac:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80103b0:	4413      	add	r3, r2
 80103b2:	6879      	ldr	r1, [r7, #4]
 80103b4:	4618      	mov	r0, r3
 80103b6:	f7ff fb6f 	bl	800fa98 <st_dword>
			fs->wflag = 1;
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	2201      	movs	r2, #1
 80103be:	70da      	strb	r2, [r3, #3]
			break;
 80103c0:	e006      	b.n	80103d0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80103c2:	bf00      	nop
 80103c4:	e004      	b.n	80103d0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80103c6:	bf00      	nop
 80103c8:	e002      	b.n	80103d0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80103ca:	bf00      	nop
 80103cc:	e000      	b.n	80103d0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80103ce:	bf00      	nop
		}
	}
	return res;
 80103d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80103d2:	4618      	mov	r0, r3
 80103d4:	3724      	adds	r7, #36	; 0x24
 80103d6:	46bd      	mov	sp, r7
 80103d8:	bd90      	pop	{r4, r7, pc}

080103da <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80103da:	b580      	push	{r7, lr}
 80103dc:	b088      	sub	sp, #32
 80103de:	af00      	add	r7, sp, #0
 80103e0:	60f8      	str	r0, [r7, #12]
 80103e2:	60b9      	str	r1, [r7, #8]
 80103e4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80103e6:	2300      	movs	r3, #0
 80103e8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80103f0:	68bb      	ldr	r3, [r7, #8]
 80103f2:	2b01      	cmp	r3, #1
 80103f4:	d904      	bls.n	8010400 <remove_chain+0x26>
 80103f6:	69bb      	ldr	r3, [r7, #24]
 80103f8:	695b      	ldr	r3, [r3, #20]
 80103fa:	68ba      	ldr	r2, [r7, #8]
 80103fc:	429a      	cmp	r2, r3
 80103fe:	d301      	bcc.n	8010404 <remove_chain+0x2a>
 8010400:	2302      	movs	r3, #2
 8010402:	e04b      	b.n	801049c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d00c      	beq.n	8010424 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801040a:	f04f 32ff 	mov.w	r2, #4294967295
 801040e:	6879      	ldr	r1, [r7, #4]
 8010410:	69b8      	ldr	r0, [r7, #24]
 8010412:	f7ff fefb 	bl	801020c <put_fat>
 8010416:	4603      	mov	r3, r0
 8010418:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801041a:	7ffb      	ldrb	r3, [r7, #31]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d001      	beq.n	8010424 <remove_chain+0x4a>
 8010420:	7ffb      	ldrb	r3, [r7, #31]
 8010422:	e03b      	b.n	801049c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8010424:	68b9      	ldr	r1, [r7, #8]
 8010426:	68f8      	ldr	r0, [r7, #12]
 8010428:	f7ff fe4b 	bl	80100c2 <get_fat>
 801042c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801042e:	697b      	ldr	r3, [r7, #20]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d031      	beq.n	8010498 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8010434:	697b      	ldr	r3, [r7, #20]
 8010436:	2b01      	cmp	r3, #1
 8010438:	d101      	bne.n	801043e <remove_chain+0x64>
 801043a:	2302      	movs	r3, #2
 801043c:	e02e      	b.n	801049c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801043e:	697b      	ldr	r3, [r7, #20]
 8010440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010444:	d101      	bne.n	801044a <remove_chain+0x70>
 8010446:	2301      	movs	r3, #1
 8010448:	e028      	b.n	801049c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801044a:	2200      	movs	r2, #0
 801044c:	68b9      	ldr	r1, [r7, #8]
 801044e:	69b8      	ldr	r0, [r7, #24]
 8010450:	f7ff fedc 	bl	801020c <put_fat>
 8010454:	4603      	mov	r3, r0
 8010456:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010458:	7ffb      	ldrb	r3, [r7, #31]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d001      	beq.n	8010462 <remove_chain+0x88>
 801045e:	7ffb      	ldrb	r3, [r7, #31]
 8010460:	e01c      	b.n	801049c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8010462:	69bb      	ldr	r3, [r7, #24]
 8010464:	691a      	ldr	r2, [r3, #16]
 8010466:	69bb      	ldr	r3, [r7, #24]
 8010468:	695b      	ldr	r3, [r3, #20]
 801046a:	3b02      	subs	r3, #2
 801046c:	429a      	cmp	r2, r3
 801046e:	d20b      	bcs.n	8010488 <remove_chain+0xae>
			fs->free_clst++;
 8010470:	69bb      	ldr	r3, [r7, #24]
 8010472:	691b      	ldr	r3, [r3, #16]
 8010474:	1c5a      	adds	r2, r3, #1
 8010476:	69bb      	ldr	r3, [r7, #24]
 8010478:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 801047a:	69bb      	ldr	r3, [r7, #24]
 801047c:	791b      	ldrb	r3, [r3, #4]
 801047e:	f043 0301 	orr.w	r3, r3, #1
 8010482:	b2da      	uxtb	r2, r3
 8010484:	69bb      	ldr	r3, [r7, #24]
 8010486:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8010488:	697b      	ldr	r3, [r7, #20]
 801048a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801048c:	69bb      	ldr	r3, [r7, #24]
 801048e:	695b      	ldr	r3, [r3, #20]
 8010490:	68ba      	ldr	r2, [r7, #8]
 8010492:	429a      	cmp	r2, r3
 8010494:	d3c6      	bcc.n	8010424 <remove_chain+0x4a>
 8010496:	e000      	b.n	801049a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8010498:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801049a:	2300      	movs	r3, #0
}
 801049c:	4618      	mov	r0, r3
 801049e:	3720      	adds	r7, #32
 80104a0:	46bd      	mov	sp, r7
 80104a2:	bd80      	pop	{r7, pc}

080104a4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b088      	sub	sp, #32
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
 80104ac:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80104b4:	683b      	ldr	r3, [r7, #0]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d10d      	bne.n	80104d6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80104ba:	693b      	ldr	r3, [r7, #16]
 80104bc:	68db      	ldr	r3, [r3, #12]
 80104be:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80104c0:	69bb      	ldr	r3, [r7, #24]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d004      	beq.n	80104d0 <create_chain+0x2c>
 80104c6:	693b      	ldr	r3, [r7, #16]
 80104c8:	695b      	ldr	r3, [r3, #20]
 80104ca:	69ba      	ldr	r2, [r7, #24]
 80104cc:	429a      	cmp	r2, r3
 80104ce:	d31b      	bcc.n	8010508 <create_chain+0x64>
 80104d0:	2301      	movs	r3, #1
 80104d2:	61bb      	str	r3, [r7, #24]
 80104d4:	e018      	b.n	8010508 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80104d6:	6839      	ldr	r1, [r7, #0]
 80104d8:	6878      	ldr	r0, [r7, #4]
 80104da:	f7ff fdf2 	bl	80100c2 <get_fat>
 80104de:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	2b01      	cmp	r3, #1
 80104e4:	d801      	bhi.n	80104ea <create_chain+0x46>
 80104e6:	2301      	movs	r3, #1
 80104e8:	e070      	b.n	80105cc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104f0:	d101      	bne.n	80104f6 <create_chain+0x52>
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	e06a      	b.n	80105cc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80104f6:	693b      	ldr	r3, [r7, #16]
 80104f8:	695b      	ldr	r3, [r3, #20]
 80104fa:	68fa      	ldr	r2, [r7, #12]
 80104fc:	429a      	cmp	r2, r3
 80104fe:	d201      	bcs.n	8010504 <create_chain+0x60>
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	e063      	b.n	80105cc <create_chain+0x128>
		scl = clst;
 8010504:	683b      	ldr	r3, [r7, #0]
 8010506:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010508:	69bb      	ldr	r3, [r7, #24]
 801050a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801050c:	69fb      	ldr	r3, [r7, #28]
 801050e:	3301      	adds	r3, #1
 8010510:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8010512:	693b      	ldr	r3, [r7, #16]
 8010514:	695b      	ldr	r3, [r3, #20]
 8010516:	69fa      	ldr	r2, [r7, #28]
 8010518:	429a      	cmp	r2, r3
 801051a:	d307      	bcc.n	801052c <create_chain+0x88>
				ncl = 2;
 801051c:	2302      	movs	r3, #2
 801051e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8010520:	69fa      	ldr	r2, [r7, #28]
 8010522:	69bb      	ldr	r3, [r7, #24]
 8010524:	429a      	cmp	r2, r3
 8010526:	d901      	bls.n	801052c <create_chain+0x88>
 8010528:	2300      	movs	r3, #0
 801052a:	e04f      	b.n	80105cc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801052c:	69f9      	ldr	r1, [r7, #28]
 801052e:	6878      	ldr	r0, [r7, #4]
 8010530:	f7ff fdc7 	bl	80100c2 <get_fat>
 8010534:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d00e      	beq.n	801055a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	2b01      	cmp	r3, #1
 8010540:	d003      	beq.n	801054a <create_chain+0xa6>
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010548:	d101      	bne.n	801054e <create_chain+0xaa>
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	e03e      	b.n	80105cc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801054e:	69fa      	ldr	r2, [r7, #28]
 8010550:	69bb      	ldr	r3, [r7, #24]
 8010552:	429a      	cmp	r2, r3
 8010554:	d1da      	bne.n	801050c <create_chain+0x68>
 8010556:	2300      	movs	r3, #0
 8010558:	e038      	b.n	80105cc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801055a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801055c:	f04f 32ff 	mov.w	r2, #4294967295
 8010560:	69f9      	ldr	r1, [r7, #28]
 8010562:	6938      	ldr	r0, [r7, #16]
 8010564:	f7ff fe52 	bl	801020c <put_fat>
 8010568:	4603      	mov	r3, r0
 801056a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801056c:	7dfb      	ldrb	r3, [r7, #23]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d109      	bne.n	8010586 <create_chain+0xe2>
 8010572:	683b      	ldr	r3, [r7, #0]
 8010574:	2b00      	cmp	r3, #0
 8010576:	d006      	beq.n	8010586 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010578:	69fa      	ldr	r2, [r7, #28]
 801057a:	6839      	ldr	r1, [r7, #0]
 801057c:	6938      	ldr	r0, [r7, #16]
 801057e:	f7ff fe45 	bl	801020c <put_fat>
 8010582:	4603      	mov	r3, r0
 8010584:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010586:	7dfb      	ldrb	r3, [r7, #23]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d116      	bne.n	80105ba <create_chain+0x116>
		fs->last_clst = ncl;
 801058c:	693b      	ldr	r3, [r7, #16]
 801058e:	69fa      	ldr	r2, [r7, #28]
 8010590:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010592:	693b      	ldr	r3, [r7, #16]
 8010594:	691a      	ldr	r2, [r3, #16]
 8010596:	693b      	ldr	r3, [r7, #16]
 8010598:	695b      	ldr	r3, [r3, #20]
 801059a:	3b02      	subs	r3, #2
 801059c:	429a      	cmp	r2, r3
 801059e:	d804      	bhi.n	80105aa <create_chain+0x106>
 80105a0:	693b      	ldr	r3, [r7, #16]
 80105a2:	691b      	ldr	r3, [r3, #16]
 80105a4:	1e5a      	subs	r2, r3, #1
 80105a6:	693b      	ldr	r3, [r7, #16]
 80105a8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80105aa:	693b      	ldr	r3, [r7, #16]
 80105ac:	791b      	ldrb	r3, [r3, #4]
 80105ae:	f043 0301 	orr.w	r3, r3, #1
 80105b2:	b2da      	uxtb	r2, r3
 80105b4:	693b      	ldr	r3, [r7, #16]
 80105b6:	711a      	strb	r2, [r3, #4]
 80105b8:	e007      	b.n	80105ca <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80105ba:	7dfb      	ldrb	r3, [r7, #23]
 80105bc:	2b01      	cmp	r3, #1
 80105be:	d102      	bne.n	80105c6 <create_chain+0x122>
 80105c0:	f04f 33ff 	mov.w	r3, #4294967295
 80105c4:	e000      	b.n	80105c8 <create_chain+0x124>
 80105c6:	2301      	movs	r3, #1
 80105c8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80105ca:	69fb      	ldr	r3, [r7, #28]
}
 80105cc:	4618      	mov	r0, r3
 80105ce:	3720      	adds	r7, #32
 80105d0:	46bd      	mov	sp, r7
 80105d2:	bd80      	pop	{r7, pc}

080105d4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80105d4:	b480      	push	{r7}
 80105d6:	b087      	sub	sp, #28
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
 80105dc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105e8:	3304      	adds	r3, #4
 80105ea:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	0a5b      	lsrs	r3, r3, #9
 80105f0:	68fa      	ldr	r2, [r7, #12]
 80105f2:	8952      	ldrh	r2, [r2, #10]
 80105f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80105f8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80105fa:	693b      	ldr	r3, [r7, #16]
 80105fc:	1d1a      	adds	r2, r3, #4
 80105fe:	613a      	str	r2, [r7, #16]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8010604:	68bb      	ldr	r3, [r7, #8]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d101      	bne.n	801060e <clmt_clust+0x3a>
 801060a:	2300      	movs	r3, #0
 801060c:	e010      	b.n	8010630 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801060e:	697a      	ldr	r2, [r7, #20]
 8010610:	68bb      	ldr	r3, [r7, #8]
 8010612:	429a      	cmp	r2, r3
 8010614:	d307      	bcc.n	8010626 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8010616:	697a      	ldr	r2, [r7, #20]
 8010618:	68bb      	ldr	r3, [r7, #8]
 801061a:	1ad3      	subs	r3, r2, r3
 801061c:	617b      	str	r3, [r7, #20]
 801061e:	693b      	ldr	r3, [r7, #16]
 8010620:	3304      	adds	r3, #4
 8010622:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010624:	e7e9      	b.n	80105fa <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8010626:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010628:	693b      	ldr	r3, [r7, #16]
 801062a:	681a      	ldr	r2, [r3, #0]
 801062c:	697b      	ldr	r3, [r7, #20]
 801062e:	4413      	add	r3, r2
}
 8010630:	4618      	mov	r0, r3
 8010632:	371c      	adds	r7, #28
 8010634:	46bd      	mov	sp, r7
 8010636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801063a:	4770      	bx	lr

0801063c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b086      	sub	sp, #24
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
 8010644:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801064c:	683b      	ldr	r3, [r7, #0]
 801064e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010652:	d204      	bcs.n	801065e <dir_sdi+0x22>
 8010654:	683b      	ldr	r3, [r7, #0]
 8010656:	f003 031f 	and.w	r3, r3, #31
 801065a:	2b00      	cmp	r3, #0
 801065c:	d001      	beq.n	8010662 <dir_sdi+0x26>
		return FR_INT_ERR;
 801065e:	2302      	movs	r3, #2
 8010660:	e063      	b.n	801072a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	683a      	ldr	r2, [r7, #0]
 8010666:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	689b      	ldr	r3, [r3, #8]
 801066c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801066e:	697b      	ldr	r3, [r7, #20]
 8010670:	2b00      	cmp	r3, #0
 8010672:	d106      	bne.n	8010682 <dir_sdi+0x46>
 8010674:	693b      	ldr	r3, [r7, #16]
 8010676:	781b      	ldrb	r3, [r3, #0]
 8010678:	2b02      	cmp	r3, #2
 801067a:	d902      	bls.n	8010682 <dir_sdi+0x46>
		clst = fs->dirbase;
 801067c:	693b      	ldr	r3, [r7, #16]
 801067e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010680:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010682:	697b      	ldr	r3, [r7, #20]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d10c      	bne.n	80106a2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010688:	683b      	ldr	r3, [r7, #0]
 801068a:	095b      	lsrs	r3, r3, #5
 801068c:	693a      	ldr	r2, [r7, #16]
 801068e:	8912      	ldrh	r2, [r2, #8]
 8010690:	4293      	cmp	r3, r2
 8010692:	d301      	bcc.n	8010698 <dir_sdi+0x5c>
 8010694:	2302      	movs	r3, #2
 8010696:	e048      	b.n	801072a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8010698:	693b      	ldr	r3, [r7, #16]
 801069a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	61da      	str	r2, [r3, #28]
 80106a0:	e029      	b.n	80106f6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80106a2:	693b      	ldr	r3, [r7, #16]
 80106a4:	895b      	ldrh	r3, [r3, #10]
 80106a6:	025b      	lsls	r3, r3, #9
 80106a8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80106aa:	e019      	b.n	80106e0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	6979      	ldr	r1, [r7, #20]
 80106b0:	4618      	mov	r0, r3
 80106b2:	f7ff fd06 	bl	80100c2 <get_fat>
 80106b6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80106b8:	697b      	ldr	r3, [r7, #20]
 80106ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106be:	d101      	bne.n	80106c4 <dir_sdi+0x88>
 80106c0:	2301      	movs	r3, #1
 80106c2:	e032      	b.n	801072a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80106c4:	697b      	ldr	r3, [r7, #20]
 80106c6:	2b01      	cmp	r3, #1
 80106c8:	d904      	bls.n	80106d4 <dir_sdi+0x98>
 80106ca:	693b      	ldr	r3, [r7, #16]
 80106cc:	695b      	ldr	r3, [r3, #20]
 80106ce:	697a      	ldr	r2, [r7, #20]
 80106d0:	429a      	cmp	r2, r3
 80106d2:	d301      	bcc.n	80106d8 <dir_sdi+0x9c>
 80106d4:	2302      	movs	r3, #2
 80106d6:	e028      	b.n	801072a <dir_sdi+0xee>
			ofs -= csz;
 80106d8:	683a      	ldr	r2, [r7, #0]
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	1ad3      	subs	r3, r2, r3
 80106de:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80106e0:	683a      	ldr	r2, [r7, #0]
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	429a      	cmp	r2, r3
 80106e6:	d2e1      	bcs.n	80106ac <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80106e8:	6979      	ldr	r1, [r7, #20]
 80106ea:	6938      	ldr	r0, [r7, #16]
 80106ec:	f7ff fcca 	bl	8010084 <clust2sect>
 80106f0:	4602      	mov	r2, r0
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	697a      	ldr	r2, [r7, #20]
 80106fa:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	69db      	ldr	r3, [r3, #28]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d101      	bne.n	8010708 <dir_sdi+0xcc>
 8010704:	2302      	movs	r3, #2
 8010706:	e010      	b.n	801072a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	69da      	ldr	r2, [r3, #28]
 801070c:	683b      	ldr	r3, [r7, #0]
 801070e:	0a5b      	lsrs	r3, r3, #9
 8010710:	441a      	add	r2, r3
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8010716:	693b      	ldr	r3, [r7, #16]
 8010718:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801071c:	683b      	ldr	r3, [r7, #0]
 801071e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010722:	441a      	add	r2, r3
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010728:	2300      	movs	r3, #0
}
 801072a:	4618      	mov	r0, r3
 801072c:	3718      	adds	r7, #24
 801072e:	46bd      	mov	sp, r7
 8010730:	bd80      	pop	{r7, pc}

08010732 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8010732:	b580      	push	{r7, lr}
 8010734:	b086      	sub	sp, #24
 8010736:	af00      	add	r7, sp, #0
 8010738:	6078      	str	r0, [r7, #4]
 801073a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	695b      	ldr	r3, [r3, #20]
 8010746:	3320      	adds	r3, #32
 8010748:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	69db      	ldr	r3, [r3, #28]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d003      	beq.n	801075a <dir_next+0x28>
 8010752:	68bb      	ldr	r3, [r7, #8]
 8010754:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010758:	d301      	bcc.n	801075e <dir_next+0x2c>
 801075a:	2304      	movs	r3, #4
 801075c:	e0aa      	b.n	80108b4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801075e:	68bb      	ldr	r3, [r7, #8]
 8010760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010764:	2b00      	cmp	r3, #0
 8010766:	f040 8098 	bne.w	801089a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	69db      	ldr	r3, [r3, #28]
 801076e:	1c5a      	adds	r2, r3, #1
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	699b      	ldr	r3, [r3, #24]
 8010778:	2b00      	cmp	r3, #0
 801077a:	d10b      	bne.n	8010794 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801077c:	68bb      	ldr	r3, [r7, #8]
 801077e:	095b      	lsrs	r3, r3, #5
 8010780:	68fa      	ldr	r2, [r7, #12]
 8010782:	8912      	ldrh	r2, [r2, #8]
 8010784:	4293      	cmp	r3, r2
 8010786:	f0c0 8088 	bcc.w	801089a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	2200      	movs	r2, #0
 801078e:	61da      	str	r2, [r3, #28]
 8010790:	2304      	movs	r3, #4
 8010792:	e08f      	b.n	80108b4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010794:	68bb      	ldr	r3, [r7, #8]
 8010796:	0a5b      	lsrs	r3, r3, #9
 8010798:	68fa      	ldr	r2, [r7, #12]
 801079a:	8952      	ldrh	r2, [r2, #10]
 801079c:	3a01      	subs	r2, #1
 801079e:	4013      	ands	r3, r2
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d17a      	bne.n	801089a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80107a4:	687a      	ldr	r2, [r7, #4]
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	699b      	ldr	r3, [r3, #24]
 80107aa:	4619      	mov	r1, r3
 80107ac:	4610      	mov	r0, r2
 80107ae:	f7ff fc88 	bl	80100c2 <get_fat>
 80107b2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80107b4:	697b      	ldr	r3, [r7, #20]
 80107b6:	2b01      	cmp	r3, #1
 80107b8:	d801      	bhi.n	80107be <dir_next+0x8c>
 80107ba:	2302      	movs	r3, #2
 80107bc:	e07a      	b.n	80108b4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80107be:	697b      	ldr	r3, [r7, #20]
 80107c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107c4:	d101      	bne.n	80107ca <dir_next+0x98>
 80107c6:	2301      	movs	r3, #1
 80107c8:	e074      	b.n	80108b4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	695b      	ldr	r3, [r3, #20]
 80107ce:	697a      	ldr	r2, [r7, #20]
 80107d0:	429a      	cmp	r2, r3
 80107d2:	d358      	bcc.n	8010886 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80107d4:	683b      	ldr	r3, [r7, #0]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d104      	bne.n	80107e4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	2200      	movs	r2, #0
 80107de:	61da      	str	r2, [r3, #28]
 80107e0:	2304      	movs	r3, #4
 80107e2:	e067      	b.n	80108b4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80107e4:	687a      	ldr	r2, [r7, #4]
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	699b      	ldr	r3, [r3, #24]
 80107ea:	4619      	mov	r1, r3
 80107ec:	4610      	mov	r0, r2
 80107ee:	f7ff fe59 	bl	80104a4 <create_chain>
 80107f2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80107f4:	697b      	ldr	r3, [r7, #20]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d101      	bne.n	80107fe <dir_next+0xcc>
 80107fa:	2307      	movs	r3, #7
 80107fc:	e05a      	b.n	80108b4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80107fe:	697b      	ldr	r3, [r7, #20]
 8010800:	2b01      	cmp	r3, #1
 8010802:	d101      	bne.n	8010808 <dir_next+0xd6>
 8010804:	2302      	movs	r3, #2
 8010806:	e055      	b.n	80108b4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010808:	697b      	ldr	r3, [r7, #20]
 801080a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801080e:	d101      	bne.n	8010814 <dir_next+0xe2>
 8010810:	2301      	movs	r3, #1
 8010812:	e04f      	b.n	80108b4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8010814:	68f8      	ldr	r0, [r7, #12]
 8010816:	f7ff fb55 	bl	800fec4 <sync_window>
 801081a:	4603      	mov	r3, r0
 801081c:	2b00      	cmp	r3, #0
 801081e:	d001      	beq.n	8010824 <dir_next+0xf2>
 8010820:	2301      	movs	r3, #1
 8010822:	e047      	b.n	80108b4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	3330      	adds	r3, #48	; 0x30
 8010828:	f44f 7200 	mov.w	r2, #512	; 0x200
 801082c:	2100      	movs	r1, #0
 801082e:	4618      	mov	r0, r3
 8010830:	f7ff f97f 	bl	800fb32 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010834:	2300      	movs	r3, #0
 8010836:	613b      	str	r3, [r7, #16]
 8010838:	6979      	ldr	r1, [r7, #20]
 801083a:	68f8      	ldr	r0, [r7, #12]
 801083c:	f7ff fc22 	bl	8010084 <clust2sect>
 8010840:	4602      	mov	r2, r0
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	62da      	str	r2, [r3, #44]	; 0x2c
 8010846:	e012      	b.n	801086e <dir_next+0x13c>
						fs->wflag = 1;
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	2201      	movs	r2, #1
 801084c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801084e:	68f8      	ldr	r0, [r7, #12]
 8010850:	f7ff fb38 	bl	800fec4 <sync_window>
 8010854:	4603      	mov	r3, r0
 8010856:	2b00      	cmp	r3, #0
 8010858:	d001      	beq.n	801085e <dir_next+0x12c>
 801085a:	2301      	movs	r3, #1
 801085c:	e02a      	b.n	80108b4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801085e:	693b      	ldr	r3, [r7, #16]
 8010860:	3301      	adds	r3, #1
 8010862:	613b      	str	r3, [r7, #16]
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010868:	1c5a      	adds	r2, r3, #1
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	62da      	str	r2, [r3, #44]	; 0x2c
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	895b      	ldrh	r3, [r3, #10]
 8010872:	461a      	mov	r2, r3
 8010874:	693b      	ldr	r3, [r7, #16]
 8010876:	4293      	cmp	r3, r2
 8010878:	d3e6      	bcc.n	8010848 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801087e:	693b      	ldr	r3, [r7, #16]
 8010880:	1ad2      	subs	r2, r2, r3
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	697a      	ldr	r2, [r7, #20]
 801088a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801088c:	6979      	ldr	r1, [r7, #20]
 801088e:	68f8      	ldr	r0, [r7, #12]
 8010890:	f7ff fbf8 	bl	8010084 <clust2sect>
 8010894:	4602      	mov	r2, r0
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	68ba      	ldr	r2, [r7, #8]
 801089e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80108a6:	68bb      	ldr	r3, [r7, #8]
 80108a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80108ac:	441a      	add	r2, r3
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80108b2:	2300      	movs	r3, #0
}
 80108b4:	4618      	mov	r0, r3
 80108b6:	3718      	adds	r7, #24
 80108b8:	46bd      	mov	sp, r7
 80108ba:	bd80      	pop	{r7, pc}

080108bc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80108bc:	b580      	push	{r7, lr}
 80108be:	b086      	sub	sp, #24
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
 80108c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80108cc:	2100      	movs	r1, #0
 80108ce:	6878      	ldr	r0, [r7, #4]
 80108d0:	f7ff feb4 	bl	801063c <dir_sdi>
 80108d4:	4603      	mov	r3, r0
 80108d6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80108d8:	7dfb      	ldrb	r3, [r7, #23]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d12b      	bne.n	8010936 <dir_alloc+0x7a>
		n = 0;
 80108de:	2300      	movs	r3, #0
 80108e0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	69db      	ldr	r3, [r3, #28]
 80108e6:	4619      	mov	r1, r3
 80108e8:	68f8      	ldr	r0, [r7, #12]
 80108ea:	f7ff fb2f 	bl	800ff4c <move_window>
 80108ee:	4603      	mov	r3, r0
 80108f0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80108f2:	7dfb      	ldrb	r3, [r7, #23]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d11d      	bne.n	8010934 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	6a1b      	ldr	r3, [r3, #32]
 80108fc:	781b      	ldrb	r3, [r3, #0]
 80108fe:	2be5      	cmp	r3, #229	; 0xe5
 8010900:	d004      	beq.n	801090c <dir_alloc+0x50>
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	6a1b      	ldr	r3, [r3, #32]
 8010906:	781b      	ldrb	r3, [r3, #0]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d107      	bne.n	801091c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801090c:	693b      	ldr	r3, [r7, #16]
 801090e:	3301      	adds	r3, #1
 8010910:	613b      	str	r3, [r7, #16]
 8010912:	693a      	ldr	r2, [r7, #16]
 8010914:	683b      	ldr	r3, [r7, #0]
 8010916:	429a      	cmp	r2, r3
 8010918:	d102      	bne.n	8010920 <dir_alloc+0x64>
 801091a:	e00c      	b.n	8010936 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801091c:	2300      	movs	r3, #0
 801091e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8010920:	2101      	movs	r1, #1
 8010922:	6878      	ldr	r0, [r7, #4]
 8010924:	f7ff ff05 	bl	8010732 <dir_next>
 8010928:	4603      	mov	r3, r0
 801092a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801092c:	7dfb      	ldrb	r3, [r7, #23]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d0d7      	beq.n	80108e2 <dir_alloc+0x26>
 8010932:	e000      	b.n	8010936 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8010934:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010936:	7dfb      	ldrb	r3, [r7, #23]
 8010938:	2b04      	cmp	r3, #4
 801093a:	d101      	bne.n	8010940 <dir_alloc+0x84>
 801093c:	2307      	movs	r3, #7
 801093e:	75fb      	strb	r3, [r7, #23]
	return res;
 8010940:	7dfb      	ldrb	r3, [r7, #23]
}
 8010942:	4618      	mov	r0, r3
 8010944:	3718      	adds	r7, #24
 8010946:	46bd      	mov	sp, r7
 8010948:	bd80      	pop	{r7, pc}

0801094a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801094a:	b580      	push	{r7, lr}
 801094c:	b084      	sub	sp, #16
 801094e:	af00      	add	r7, sp, #0
 8010950:	6078      	str	r0, [r7, #4]
 8010952:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8010954:	683b      	ldr	r3, [r7, #0]
 8010956:	331a      	adds	r3, #26
 8010958:	4618      	mov	r0, r3
 801095a:	f7ff f847 	bl	800f9ec <ld_word>
 801095e:	4603      	mov	r3, r0
 8010960:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	781b      	ldrb	r3, [r3, #0]
 8010966:	2b03      	cmp	r3, #3
 8010968:	d109      	bne.n	801097e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801096a:	683b      	ldr	r3, [r7, #0]
 801096c:	3314      	adds	r3, #20
 801096e:	4618      	mov	r0, r3
 8010970:	f7ff f83c 	bl	800f9ec <ld_word>
 8010974:	4603      	mov	r3, r0
 8010976:	041b      	lsls	r3, r3, #16
 8010978:	68fa      	ldr	r2, [r7, #12]
 801097a:	4313      	orrs	r3, r2
 801097c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801097e:	68fb      	ldr	r3, [r7, #12]
}
 8010980:	4618      	mov	r0, r3
 8010982:	3710      	adds	r7, #16
 8010984:	46bd      	mov	sp, r7
 8010986:	bd80      	pop	{r7, pc}

08010988 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010988:	b580      	push	{r7, lr}
 801098a:	b084      	sub	sp, #16
 801098c:	af00      	add	r7, sp, #0
 801098e:	60f8      	str	r0, [r7, #12]
 8010990:	60b9      	str	r1, [r7, #8]
 8010992:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010994:	68bb      	ldr	r3, [r7, #8]
 8010996:	331a      	adds	r3, #26
 8010998:	687a      	ldr	r2, [r7, #4]
 801099a:	b292      	uxth	r2, r2
 801099c:	4611      	mov	r1, r2
 801099e:	4618      	mov	r0, r3
 80109a0:	f7ff f85f 	bl	800fa62 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	781b      	ldrb	r3, [r3, #0]
 80109a8:	2b03      	cmp	r3, #3
 80109aa:	d109      	bne.n	80109c0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80109ac:	68bb      	ldr	r3, [r7, #8]
 80109ae:	f103 0214 	add.w	r2, r3, #20
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	0c1b      	lsrs	r3, r3, #16
 80109b6:	b29b      	uxth	r3, r3
 80109b8:	4619      	mov	r1, r3
 80109ba:	4610      	mov	r0, r2
 80109bc:	f7ff f851 	bl	800fa62 <st_word>
	}
}
 80109c0:	bf00      	nop
 80109c2:	3710      	adds	r7, #16
 80109c4:	46bd      	mov	sp, r7
 80109c6:	bd80      	pop	{r7, pc}

080109c8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b086      	sub	sp, #24
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80109d6:	2100      	movs	r1, #0
 80109d8:	6878      	ldr	r0, [r7, #4]
 80109da:	f7ff fe2f 	bl	801063c <dir_sdi>
 80109de:	4603      	mov	r3, r0
 80109e0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80109e2:	7dfb      	ldrb	r3, [r7, #23]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d001      	beq.n	80109ec <dir_find+0x24>
 80109e8:	7dfb      	ldrb	r3, [r7, #23]
 80109ea:	e03e      	b.n	8010a6a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	69db      	ldr	r3, [r3, #28]
 80109f0:	4619      	mov	r1, r3
 80109f2:	6938      	ldr	r0, [r7, #16]
 80109f4:	f7ff faaa 	bl	800ff4c <move_window>
 80109f8:	4603      	mov	r3, r0
 80109fa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80109fc:	7dfb      	ldrb	r3, [r7, #23]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d12f      	bne.n	8010a62 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	6a1b      	ldr	r3, [r3, #32]
 8010a06:	781b      	ldrb	r3, [r3, #0]
 8010a08:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010a0a:	7bfb      	ldrb	r3, [r7, #15]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d102      	bne.n	8010a16 <dir_find+0x4e>
 8010a10:	2304      	movs	r3, #4
 8010a12:	75fb      	strb	r3, [r7, #23]
 8010a14:	e028      	b.n	8010a68 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	6a1b      	ldr	r3, [r3, #32]
 8010a1a:	330b      	adds	r3, #11
 8010a1c:	781b      	ldrb	r3, [r3, #0]
 8010a1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010a22:	b2da      	uxtb	r2, r3
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	6a1b      	ldr	r3, [r3, #32]
 8010a2c:	330b      	adds	r3, #11
 8010a2e:	781b      	ldrb	r3, [r3, #0]
 8010a30:	f003 0308 	and.w	r3, r3, #8
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d10a      	bne.n	8010a4e <dir_find+0x86>
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	6a18      	ldr	r0, [r3, #32]
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	3324      	adds	r3, #36	; 0x24
 8010a40:	220b      	movs	r2, #11
 8010a42:	4619      	mov	r1, r3
 8010a44:	f7ff f88f 	bl	800fb66 <mem_cmp>
 8010a48:	4603      	mov	r3, r0
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d00b      	beq.n	8010a66 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010a4e:	2100      	movs	r1, #0
 8010a50:	6878      	ldr	r0, [r7, #4]
 8010a52:	f7ff fe6e 	bl	8010732 <dir_next>
 8010a56:	4603      	mov	r3, r0
 8010a58:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010a5a:	7dfb      	ldrb	r3, [r7, #23]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d0c5      	beq.n	80109ec <dir_find+0x24>
 8010a60:	e002      	b.n	8010a68 <dir_find+0xa0>
		if (res != FR_OK) break;
 8010a62:	bf00      	nop
 8010a64:	e000      	b.n	8010a68 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010a66:	bf00      	nop

	return res;
 8010a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	3718      	adds	r7, #24
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	bd80      	pop	{r7, pc}

08010a72 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010a72:	b580      	push	{r7, lr}
 8010a74:	b084      	sub	sp, #16
 8010a76:	af00      	add	r7, sp, #0
 8010a78:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8010a80:	2101      	movs	r1, #1
 8010a82:	6878      	ldr	r0, [r7, #4]
 8010a84:	f7ff ff1a 	bl	80108bc <dir_alloc>
 8010a88:	4603      	mov	r3, r0
 8010a8a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010a8c:	7bfb      	ldrb	r3, [r7, #15]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d11c      	bne.n	8010acc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	69db      	ldr	r3, [r3, #28]
 8010a96:	4619      	mov	r1, r3
 8010a98:	68b8      	ldr	r0, [r7, #8]
 8010a9a:	f7ff fa57 	bl	800ff4c <move_window>
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010aa2:	7bfb      	ldrb	r3, [r7, #15]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d111      	bne.n	8010acc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	6a1b      	ldr	r3, [r3, #32]
 8010aac:	2220      	movs	r2, #32
 8010aae:	2100      	movs	r1, #0
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	f7ff f83e 	bl	800fb32 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	6a18      	ldr	r0, [r3, #32]
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	3324      	adds	r3, #36	; 0x24
 8010abe:	220b      	movs	r2, #11
 8010ac0:	4619      	mov	r1, r3
 8010ac2:	f7ff f815 	bl	800faf0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8010ac6:	68bb      	ldr	r3, [r7, #8]
 8010ac8:	2201      	movs	r2, #1
 8010aca:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ace:	4618      	mov	r0, r3
 8010ad0:	3710      	adds	r7, #16
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	bd80      	pop	{r7, pc}
	...

08010ad8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b088      	sub	sp, #32
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
 8010ae0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8010ae2:	683b      	ldr	r3, [r7, #0]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	60fb      	str	r3, [r7, #12]
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	3324      	adds	r3, #36	; 0x24
 8010aec:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8010aee:	220b      	movs	r2, #11
 8010af0:	2120      	movs	r1, #32
 8010af2:	68b8      	ldr	r0, [r7, #8]
 8010af4:	f7ff f81d 	bl	800fb32 <mem_set>
	si = i = 0; ni = 8;
 8010af8:	2300      	movs	r3, #0
 8010afa:	613b      	str	r3, [r7, #16]
 8010afc:	693b      	ldr	r3, [r7, #16]
 8010afe:	617b      	str	r3, [r7, #20]
 8010b00:	2308      	movs	r3, #8
 8010b02:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8010b04:	697b      	ldr	r3, [r7, #20]
 8010b06:	1c5a      	adds	r2, r3, #1
 8010b08:	617a      	str	r2, [r7, #20]
 8010b0a:	68fa      	ldr	r2, [r7, #12]
 8010b0c:	4413      	add	r3, r2
 8010b0e:	781b      	ldrb	r3, [r3, #0]
 8010b10:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010b12:	7ffb      	ldrb	r3, [r7, #31]
 8010b14:	2b20      	cmp	r3, #32
 8010b16:	d94e      	bls.n	8010bb6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8010b18:	7ffb      	ldrb	r3, [r7, #31]
 8010b1a:	2b2f      	cmp	r3, #47	; 0x2f
 8010b1c:	d006      	beq.n	8010b2c <create_name+0x54>
 8010b1e:	7ffb      	ldrb	r3, [r7, #31]
 8010b20:	2b5c      	cmp	r3, #92	; 0x5c
 8010b22:	d110      	bne.n	8010b46 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010b24:	e002      	b.n	8010b2c <create_name+0x54>
 8010b26:	697b      	ldr	r3, [r7, #20]
 8010b28:	3301      	adds	r3, #1
 8010b2a:	617b      	str	r3, [r7, #20]
 8010b2c:	68fa      	ldr	r2, [r7, #12]
 8010b2e:	697b      	ldr	r3, [r7, #20]
 8010b30:	4413      	add	r3, r2
 8010b32:	781b      	ldrb	r3, [r3, #0]
 8010b34:	2b2f      	cmp	r3, #47	; 0x2f
 8010b36:	d0f6      	beq.n	8010b26 <create_name+0x4e>
 8010b38:	68fa      	ldr	r2, [r7, #12]
 8010b3a:	697b      	ldr	r3, [r7, #20]
 8010b3c:	4413      	add	r3, r2
 8010b3e:	781b      	ldrb	r3, [r3, #0]
 8010b40:	2b5c      	cmp	r3, #92	; 0x5c
 8010b42:	d0f0      	beq.n	8010b26 <create_name+0x4e>
			break;
 8010b44:	e038      	b.n	8010bb8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8010b46:	7ffb      	ldrb	r3, [r7, #31]
 8010b48:	2b2e      	cmp	r3, #46	; 0x2e
 8010b4a:	d003      	beq.n	8010b54 <create_name+0x7c>
 8010b4c:	693a      	ldr	r2, [r7, #16]
 8010b4e:	69bb      	ldr	r3, [r7, #24]
 8010b50:	429a      	cmp	r2, r3
 8010b52:	d30c      	bcc.n	8010b6e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8010b54:	69bb      	ldr	r3, [r7, #24]
 8010b56:	2b0b      	cmp	r3, #11
 8010b58:	d002      	beq.n	8010b60 <create_name+0x88>
 8010b5a:	7ffb      	ldrb	r3, [r7, #31]
 8010b5c:	2b2e      	cmp	r3, #46	; 0x2e
 8010b5e:	d001      	beq.n	8010b64 <create_name+0x8c>
 8010b60:	2306      	movs	r3, #6
 8010b62:	e044      	b.n	8010bee <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8010b64:	2308      	movs	r3, #8
 8010b66:	613b      	str	r3, [r7, #16]
 8010b68:	230b      	movs	r3, #11
 8010b6a:	61bb      	str	r3, [r7, #24]
			continue;
 8010b6c:	e022      	b.n	8010bb4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8010b6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	da04      	bge.n	8010b80 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8010b76:	7ffb      	ldrb	r3, [r7, #31]
 8010b78:	3b80      	subs	r3, #128	; 0x80
 8010b7a:	4a1f      	ldr	r2, [pc, #124]	; (8010bf8 <create_name+0x120>)
 8010b7c:	5cd3      	ldrb	r3, [r2, r3]
 8010b7e:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8010b80:	7ffb      	ldrb	r3, [r7, #31]
 8010b82:	4619      	mov	r1, r3
 8010b84:	481d      	ldr	r0, [pc, #116]	; (8010bfc <create_name+0x124>)
 8010b86:	f7ff f815 	bl	800fbb4 <chk_chr>
 8010b8a:	4603      	mov	r3, r0
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d001      	beq.n	8010b94 <create_name+0xbc>
 8010b90:	2306      	movs	r3, #6
 8010b92:	e02c      	b.n	8010bee <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8010b94:	7ffb      	ldrb	r3, [r7, #31]
 8010b96:	2b60      	cmp	r3, #96	; 0x60
 8010b98:	d905      	bls.n	8010ba6 <create_name+0xce>
 8010b9a:	7ffb      	ldrb	r3, [r7, #31]
 8010b9c:	2b7a      	cmp	r3, #122	; 0x7a
 8010b9e:	d802      	bhi.n	8010ba6 <create_name+0xce>
 8010ba0:	7ffb      	ldrb	r3, [r7, #31]
 8010ba2:	3b20      	subs	r3, #32
 8010ba4:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8010ba6:	693b      	ldr	r3, [r7, #16]
 8010ba8:	1c5a      	adds	r2, r3, #1
 8010baa:	613a      	str	r2, [r7, #16]
 8010bac:	68ba      	ldr	r2, [r7, #8]
 8010bae:	4413      	add	r3, r2
 8010bb0:	7ffa      	ldrb	r2, [r7, #31]
 8010bb2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8010bb4:	e7a6      	b.n	8010b04 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010bb6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8010bb8:	68fa      	ldr	r2, [r7, #12]
 8010bba:	697b      	ldr	r3, [r7, #20]
 8010bbc:	441a      	add	r2, r3
 8010bbe:	683b      	ldr	r3, [r7, #0]
 8010bc0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8010bc2:	693b      	ldr	r3, [r7, #16]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d101      	bne.n	8010bcc <create_name+0xf4>
 8010bc8:	2306      	movs	r3, #6
 8010bca:	e010      	b.n	8010bee <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010bcc:	68bb      	ldr	r3, [r7, #8]
 8010bce:	781b      	ldrb	r3, [r3, #0]
 8010bd0:	2be5      	cmp	r3, #229	; 0xe5
 8010bd2:	d102      	bne.n	8010bda <create_name+0x102>
 8010bd4:	68bb      	ldr	r3, [r7, #8]
 8010bd6:	2205      	movs	r2, #5
 8010bd8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010bda:	7ffb      	ldrb	r3, [r7, #31]
 8010bdc:	2b20      	cmp	r3, #32
 8010bde:	d801      	bhi.n	8010be4 <create_name+0x10c>
 8010be0:	2204      	movs	r2, #4
 8010be2:	e000      	b.n	8010be6 <create_name+0x10e>
 8010be4:	2200      	movs	r2, #0
 8010be6:	68bb      	ldr	r3, [r7, #8]
 8010be8:	330b      	adds	r3, #11
 8010bea:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8010bec:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8010bee:	4618      	mov	r0, r3
 8010bf0:	3720      	adds	r7, #32
 8010bf2:	46bd      	mov	sp, r7
 8010bf4:	bd80      	pop	{r7, pc}
 8010bf6:	bf00      	nop
 8010bf8:	08012924 	.word	0x08012924
 8010bfc:	08012858 	.word	0x08012858

08010c00 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b086      	sub	sp, #24
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
 8010c08:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010c0e:	693b      	ldr	r3, [r7, #16]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010c14:	e002      	b.n	8010c1c <follow_path+0x1c>
 8010c16:	683b      	ldr	r3, [r7, #0]
 8010c18:	3301      	adds	r3, #1
 8010c1a:	603b      	str	r3, [r7, #0]
 8010c1c:	683b      	ldr	r3, [r7, #0]
 8010c1e:	781b      	ldrb	r3, [r3, #0]
 8010c20:	2b2f      	cmp	r3, #47	; 0x2f
 8010c22:	d0f8      	beq.n	8010c16 <follow_path+0x16>
 8010c24:	683b      	ldr	r3, [r7, #0]
 8010c26:	781b      	ldrb	r3, [r3, #0]
 8010c28:	2b5c      	cmp	r3, #92	; 0x5c
 8010c2a:	d0f4      	beq.n	8010c16 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8010c2c:	693b      	ldr	r3, [r7, #16]
 8010c2e:	2200      	movs	r2, #0
 8010c30:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010c32:	683b      	ldr	r3, [r7, #0]
 8010c34:	781b      	ldrb	r3, [r3, #0]
 8010c36:	2b1f      	cmp	r3, #31
 8010c38:	d80a      	bhi.n	8010c50 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	2280      	movs	r2, #128	; 0x80
 8010c3e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8010c42:	2100      	movs	r1, #0
 8010c44:	6878      	ldr	r0, [r7, #4]
 8010c46:	f7ff fcf9 	bl	801063c <dir_sdi>
 8010c4a:	4603      	mov	r3, r0
 8010c4c:	75fb      	strb	r3, [r7, #23]
 8010c4e:	e043      	b.n	8010cd8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010c50:	463b      	mov	r3, r7
 8010c52:	4619      	mov	r1, r3
 8010c54:	6878      	ldr	r0, [r7, #4]
 8010c56:	f7ff ff3f 	bl	8010ad8 <create_name>
 8010c5a:	4603      	mov	r3, r0
 8010c5c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010c5e:	7dfb      	ldrb	r3, [r7, #23]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d134      	bne.n	8010cce <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010c64:	6878      	ldr	r0, [r7, #4]
 8010c66:	f7ff feaf 	bl	80109c8 <dir_find>
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010c74:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010c76:	7dfb      	ldrb	r3, [r7, #23]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d00a      	beq.n	8010c92 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010c7c:	7dfb      	ldrb	r3, [r7, #23]
 8010c7e:	2b04      	cmp	r3, #4
 8010c80:	d127      	bne.n	8010cd2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010c82:	7afb      	ldrb	r3, [r7, #11]
 8010c84:	f003 0304 	and.w	r3, r3, #4
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d122      	bne.n	8010cd2 <follow_path+0xd2>
 8010c8c:	2305      	movs	r3, #5
 8010c8e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010c90:	e01f      	b.n	8010cd2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010c92:	7afb      	ldrb	r3, [r7, #11]
 8010c94:	f003 0304 	and.w	r3, r3, #4
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d11c      	bne.n	8010cd6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010c9c:	693b      	ldr	r3, [r7, #16]
 8010c9e:	799b      	ldrb	r3, [r3, #6]
 8010ca0:	f003 0310 	and.w	r3, r3, #16
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d102      	bne.n	8010cae <follow_path+0xae>
				res = FR_NO_PATH; break;
 8010ca8:	2305      	movs	r3, #5
 8010caa:	75fb      	strb	r3, [r7, #23]
 8010cac:	e014      	b.n	8010cd8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	695b      	ldr	r3, [r3, #20]
 8010cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010cbc:	4413      	add	r3, r2
 8010cbe:	4619      	mov	r1, r3
 8010cc0:	68f8      	ldr	r0, [r7, #12]
 8010cc2:	f7ff fe42 	bl	801094a <ld_clust>
 8010cc6:	4602      	mov	r2, r0
 8010cc8:	693b      	ldr	r3, [r7, #16]
 8010cca:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010ccc:	e7c0      	b.n	8010c50 <follow_path+0x50>
			if (res != FR_OK) break;
 8010cce:	bf00      	nop
 8010cd0:	e002      	b.n	8010cd8 <follow_path+0xd8>
				break;
 8010cd2:	bf00      	nop
 8010cd4:	e000      	b.n	8010cd8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010cd6:	bf00      	nop
			}
		}
	}

	return res;
 8010cd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010cda:	4618      	mov	r0, r3
 8010cdc:	3718      	adds	r7, #24
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	bd80      	pop	{r7, pc}

08010ce2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010ce2:	b480      	push	{r7}
 8010ce4:	b087      	sub	sp, #28
 8010ce6:	af00      	add	r7, sp, #0
 8010ce8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010cea:	f04f 33ff 	mov.w	r3, #4294967295
 8010cee:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d031      	beq.n	8010d5c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	617b      	str	r3, [r7, #20]
 8010cfe:	e002      	b.n	8010d06 <get_ldnumber+0x24>
 8010d00:	697b      	ldr	r3, [r7, #20]
 8010d02:	3301      	adds	r3, #1
 8010d04:	617b      	str	r3, [r7, #20]
 8010d06:	697b      	ldr	r3, [r7, #20]
 8010d08:	781b      	ldrb	r3, [r3, #0]
 8010d0a:	2b20      	cmp	r3, #32
 8010d0c:	d903      	bls.n	8010d16 <get_ldnumber+0x34>
 8010d0e:	697b      	ldr	r3, [r7, #20]
 8010d10:	781b      	ldrb	r3, [r3, #0]
 8010d12:	2b3a      	cmp	r3, #58	; 0x3a
 8010d14:	d1f4      	bne.n	8010d00 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010d16:	697b      	ldr	r3, [r7, #20]
 8010d18:	781b      	ldrb	r3, [r3, #0]
 8010d1a:	2b3a      	cmp	r3, #58	; 0x3a
 8010d1c:	d11c      	bne.n	8010d58 <get_ldnumber+0x76>
			tp = *path;
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	1c5a      	adds	r2, r3, #1
 8010d28:	60fa      	str	r2, [r7, #12]
 8010d2a:	781b      	ldrb	r3, [r3, #0]
 8010d2c:	3b30      	subs	r3, #48	; 0x30
 8010d2e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010d30:	68bb      	ldr	r3, [r7, #8]
 8010d32:	2b09      	cmp	r3, #9
 8010d34:	d80e      	bhi.n	8010d54 <get_ldnumber+0x72>
 8010d36:	68fa      	ldr	r2, [r7, #12]
 8010d38:	697b      	ldr	r3, [r7, #20]
 8010d3a:	429a      	cmp	r2, r3
 8010d3c:	d10a      	bne.n	8010d54 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010d3e:	68bb      	ldr	r3, [r7, #8]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d107      	bne.n	8010d54 <get_ldnumber+0x72>
					vol = (int)i;
 8010d44:	68bb      	ldr	r3, [r7, #8]
 8010d46:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010d48:	697b      	ldr	r3, [r7, #20]
 8010d4a:	3301      	adds	r3, #1
 8010d4c:	617b      	str	r3, [r7, #20]
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	697a      	ldr	r2, [r7, #20]
 8010d52:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010d54:	693b      	ldr	r3, [r7, #16]
 8010d56:	e002      	b.n	8010d5e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010d58:	2300      	movs	r3, #0
 8010d5a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010d5c:	693b      	ldr	r3, [r7, #16]
}
 8010d5e:	4618      	mov	r0, r3
 8010d60:	371c      	adds	r7, #28
 8010d62:	46bd      	mov	sp, r7
 8010d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d68:	4770      	bx	lr
	...

08010d6c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b082      	sub	sp, #8
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
 8010d74:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	2200      	movs	r2, #0
 8010d7a:	70da      	strb	r2, [r3, #3]
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8010d82:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010d84:	6839      	ldr	r1, [r7, #0]
 8010d86:	6878      	ldr	r0, [r7, #4]
 8010d88:	f7ff f8e0 	bl	800ff4c <move_window>
 8010d8c:	4603      	mov	r3, r0
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d001      	beq.n	8010d96 <check_fs+0x2a>
 8010d92:	2304      	movs	r3, #4
 8010d94:	e038      	b.n	8010e08 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	3330      	adds	r3, #48	; 0x30
 8010d9a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010d9e:	4618      	mov	r0, r3
 8010da0:	f7fe fe24 	bl	800f9ec <ld_word>
 8010da4:	4603      	mov	r3, r0
 8010da6:	461a      	mov	r2, r3
 8010da8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010dac:	429a      	cmp	r2, r3
 8010dae:	d001      	beq.n	8010db4 <check_fs+0x48>
 8010db0:	2303      	movs	r3, #3
 8010db2:	e029      	b.n	8010e08 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010dba:	2be9      	cmp	r3, #233	; 0xe9
 8010dbc:	d009      	beq.n	8010dd2 <check_fs+0x66>
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010dc4:	2beb      	cmp	r3, #235	; 0xeb
 8010dc6:	d11e      	bne.n	8010e06 <check_fs+0x9a>
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8010dce:	2b90      	cmp	r3, #144	; 0x90
 8010dd0:	d119      	bne.n	8010e06 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	3330      	adds	r3, #48	; 0x30
 8010dd6:	3336      	adds	r3, #54	; 0x36
 8010dd8:	4618      	mov	r0, r3
 8010dda:	f7fe fe1f 	bl	800fa1c <ld_dword>
 8010dde:	4603      	mov	r3, r0
 8010de0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010de4:	4a0a      	ldr	r2, [pc, #40]	; (8010e10 <check_fs+0xa4>)
 8010de6:	4293      	cmp	r3, r2
 8010de8:	d101      	bne.n	8010dee <check_fs+0x82>
 8010dea:	2300      	movs	r3, #0
 8010dec:	e00c      	b.n	8010e08 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	3330      	adds	r3, #48	; 0x30
 8010df2:	3352      	adds	r3, #82	; 0x52
 8010df4:	4618      	mov	r0, r3
 8010df6:	f7fe fe11 	bl	800fa1c <ld_dword>
 8010dfa:	4602      	mov	r2, r0
 8010dfc:	4b05      	ldr	r3, [pc, #20]	; (8010e14 <check_fs+0xa8>)
 8010dfe:	429a      	cmp	r2, r3
 8010e00:	d101      	bne.n	8010e06 <check_fs+0x9a>
 8010e02:	2300      	movs	r3, #0
 8010e04:	e000      	b.n	8010e08 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010e06:	2302      	movs	r3, #2
}
 8010e08:	4618      	mov	r0, r3
 8010e0a:	3708      	adds	r7, #8
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	bd80      	pop	{r7, pc}
 8010e10:	00544146 	.word	0x00544146
 8010e14:	33544146 	.word	0x33544146

08010e18 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b096      	sub	sp, #88	; 0x58
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	60f8      	str	r0, [r7, #12]
 8010e20:	60b9      	str	r1, [r7, #8]
 8010e22:	4613      	mov	r3, r2
 8010e24:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010e26:	68bb      	ldr	r3, [r7, #8]
 8010e28:	2200      	movs	r2, #0
 8010e2a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010e2c:	68f8      	ldr	r0, [r7, #12]
 8010e2e:	f7ff ff58 	bl	8010ce2 <get_ldnumber>
 8010e32:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	da01      	bge.n	8010e3e <find_volume+0x26>
 8010e3a:	230b      	movs	r3, #11
 8010e3c:	e22e      	b.n	801129c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010e3e:	4aa8      	ldr	r2, [pc, #672]	; (80110e0 <find_volume+0x2c8>)
 8010e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e46:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d101      	bne.n	8010e52 <find_volume+0x3a>
 8010e4e:	230c      	movs	r3, #12
 8010e50:	e224      	b.n	801129c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8010e52:	68bb      	ldr	r3, [r7, #8]
 8010e54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010e56:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010e58:	79fb      	ldrb	r3, [r7, #7]
 8010e5a:	f023 0301 	bic.w	r3, r3, #1
 8010e5e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e62:	781b      	ldrb	r3, [r3, #0]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d01a      	beq.n	8010e9e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8010e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e6a:	785b      	ldrb	r3, [r3, #1]
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	f7fe fd1f 	bl	800f8b0 <disk_status>
 8010e72:	4603      	mov	r3, r0
 8010e74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010e78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010e7c:	f003 0301 	and.w	r3, r3, #1
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d10c      	bne.n	8010e9e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010e84:	79fb      	ldrb	r3, [r7, #7]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d007      	beq.n	8010e9a <find_volume+0x82>
 8010e8a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010e8e:	f003 0304 	and.w	r3, r3, #4
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d001      	beq.n	8010e9a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8010e96:	230a      	movs	r3, #10
 8010e98:	e200      	b.n	801129c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8010e9a:	2300      	movs	r3, #0
 8010e9c:	e1fe      	b.n	801129c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ea0:	2200      	movs	r2, #0
 8010ea2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ea6:	b2da      	uxtb	r2, r3
 8010ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eaa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eae:	785b      	ldrb	r3, [r3, #1]
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	f7fe fd17 	bl	800f8e4 <disk_initialize>
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010ebc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ec0:	f003 0301 	and.w	r3, r3, #1
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d001      	beq.n	8010ecc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010ec8:	2303      	movs	r3, #3
 8010eca:	e1e7      	b.n	801129c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010ecc:	79fb      	ldrb	r3, [r7, #7]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d007      	beq.n	8010ee2 <find_volume+0xca>
 8010ed2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ed6:	f003 0304 	and.w	r3, r3, #4
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d001      	beq.n	8010ee2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8010ede:	230a      	movs	r3, #10
 8010ee0:	e1dc      	b.n	801129c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010ee6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010ee8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010eea:	f7ff ff3f 	bl	8010d6c <check_fs>
 8010eee:	4603      	mov	r3, r0
 8010ef0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010ef4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010ef8:	2b02      	cmp	r3, #2
 8010efa:	d14b      	bne.n	8010f94 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010efc:	2300      	movs	r3, #0
 8010efe:	643b      	str	r3, [r7, #64]	; 0x40
 8010f00:	e01f      	b.n	8010f42 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f04:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010f08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f0a:	011b      	lsls	r3, r3, #4
 8010f0c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010f10:	4413      	add	r3, r2
 8010f12:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f16:	3304      	adds	r3, #4
 8010f18:	781b      	ldrb	r3, [r3, #0]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d006      	beq.n	8010f2c <find_volume+0x114>
 8010f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f20:	3308      	adds	r3, #8
 8010f22:	4618      	mov	r0, r3
 8010f24:	f7fe fd7a 	bl	800fa1c <ld_dword>
 8010f28:	4602      	mov	r2, r0
 8010f2a:	e000      	b.n	8010f2e <find_volume+0x116>
 8010f2c:	2200      	movs	r2, #0
 8010f2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f30:	009b      	lsls	r3, r3, #2
 8010f32:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8010f36:	440b      	add	r3, r1
 8010f38:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010f3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f3e:	3301      	adds	r3, #1
 8010f40:	643b      	str	r3, [r7, #64]	; 0x40
 8010f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f44:	2b03      	cmp	r3, #3
 8010f46:	d9dc      	bls.n	8010f02 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010f48:	2300      	movs	r3, #0
 8010f4a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8010f4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d002      	beq.n	8010f58 <find_volume+0x140>
 8010f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f54:	3b01      	subs	r3, #1
 8010f56:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010f58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f5a:	009b      	lsls	r3, r3, #2
 8010f5c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010f60:	4413      	add	r3, r2
 8010f62:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010f66:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010f68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d005      	beq.n	8010f7a <find_volume+0x162>
 8010f6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010f70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010f72:	f7ff fefb 	bl	8010d6c <check_fs>
 8010f76:	4603      	mov	r3, r0
 8010f78:	e000      	b.n	8010f7c <find_volume+0x164>
 8010f7a:	2303      	movs	r3, #3
 8010f7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010f80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010f84:	2b01      	cmp	r3, #1
 8010f86:	d905      	bls.n	8010f94 <find_volume+0x17c>
 8010f88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f8a:	3301      	adds	r3, #1
 8010f8c:	643b      	str	r3, [r7, #64]	; 0x40
 8010f8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f90:	2b03      	cmp	r3, #3
 8010f92:	d9e1      	bls.n	8010f58 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010f94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010f98:	2b04      	cmp	r3, #4
 8010f9a:	d101      	bne.n	8010fa0 <find_volume+0x188>
 8010f9c:	2301      	movs	r3, #1
 8010f9e:	e17d      	b.n	801129c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010fa0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010fa4:	2b01      	cmp	r3, #1
 8010fa6:	d901      	bls.n	8010fac <find_volume+0x194>
 8010fa8:	230d      	movs	r3, #13
 8010faa:	e177      	b.n	801129c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fae:	3330      	adds	r3, #48	; 0x30
 8010fb0:	330b      	adds	r3, #11
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	f7fe fd1a 	bl	800f9ec <ld_word>
 8010fb8:	4603      	mov	r3, r0
 8010fba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010fbe:	d001      	beq.n	8010fc4 <find_volume+0x1ac>
 8010fc0:	230d      	movs	r3, #13
 8010fc2:	e16b      	b.n	801129c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fc6:	3330      	adds	r3, #48	; 0x30
 8010fc8:	3316      	adds	r3, #22
 8010fca:	4618      	mov	r0, r3
 8010fcc:	f7fe fd0e 	bl	800f9ec <ld_word>
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d106      	bne.n	8010fe8 <find_volume+0x1d0>
 8010fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fdc:	3330      	adds	r3, #48	; 0x30
 8010fde:	3324      	adds	r3, #36	; 0x24
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f7fe fd1b 	bl	800fa1c <ld_dword>
 8010fe6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8010fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010fec:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ff0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8010ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ff6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ffa:	789b      	ldrb	r3, [r3, #2]
 8010ffc:	2b01      	cmp	r3, #1
 8010ffe:	d005      	beq.n	801100c <find_volume+0x1f4>
 8011000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011002:	789b      	ldrb	r3, [r3, #2]
 8011004:	2b02      	cmp	r3, #2
 8011006:	d001      	beq.n	801100c <find_volume+0x1f4>
 8011008:	230d      	movs	r3, #13
 801100a:	e147      	b.n	801129c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801100c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801100e:	789b      	ldrb	r3, [r3, #2]
 8011010:	461a      	mov	r2, r3
 8011012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011014:	fb02 f303 	mul.w	r3, r2, r3
 8011018:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801101a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801101c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011020:	b29a      	uxth	r2, r3
 8011022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011024:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011028:	895b      	ldrh	r3, [r3, #10]
 801102a:	2b00      	cmp	r3, #0
 801102c:	d008      	beq.n	8011040 <find_volume+0x228>
 801102e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011030:	895b      	ldrh	r3, [r3, #10]
 8011032:	461a      	mov	r2, r3
 8011034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011036:	895b      	ldrh	r3, [r3, #10]
 8011038:	3b01      	subs	r3, #1
 801103a:	4013      	ands	r3, r2
 801103c:	2b00      	cmp	r3, #0
 801103e:	d001      	beq.n	8011044 <find_volume+0x22c>
 8011040:	230d      	movs	r3, #13
 8011042:	e12b      	b.n	801129c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011046:	3330      	adds	r3, #48	; 0x30
 8011048:	3311      	adds	r3, #17
 801104a:	4618      	mov	r0, r3
 801104c:	f7fe fcce 	bl	800f9ec <ld_word>
 8011050:	4603      	mov	r3, r0
 8011052:	461a      	mov	r2, r3
 8011054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011056:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801105a:	891b      	ldrh	r3, [r3, #8]
 801105c:	f003 030f 	and.w	r3, r3, #15
 8011060:	b29b      	uxth	r3, r3
 8011062:	2b00      	cmp	r3, #0
 8011064:	d001      	beq.n	801106a <find_volume+0x252>
 8011066:	230d      	movs	r3, #13
 8011068:	e118      	b.n	801129c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801106a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801106c:	3330      	adds	r3, #48	; 0x30
 801106e:	3313      	adds	r3, #19
 8011070:	4618      	mov	r0, r3
 8011072:	f7fe fcbb 	bl	800f9ec <ld_word>
 8011076:	4603      	mov	r3, r0
 8011078:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801107a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801107c:	2b00      	cmp	r3, #0
 801107e:	d106      	bne.n	801108e <find_volume+0x276>
 8011080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011082:	3330      	adds	r3, #48	; 0x30
 8011084:	3320      	adds	r3, #32
 8011086:	4618      	mov	r0, r3
 8011088:	f7fe fcc8 	bl	800fa1c <ld_dword>
 801108c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801108e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011090:	3330      	adds	r3, #48	; 0x30
 8011092:	330e      	adds	r3, #14
 8011094:	4618      	mov	r0, r3
 8011096:	f7fe fca9 	bl	800f9ec <ld_word>
 801109a:	4603      	mov	r3, r0
 801109c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801109e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d101      	bne.n	80110a8 <find_volume+0x290>
 80110a4:	230d      	movs	r3, #13
 80110a6:	e0f9      	b.n	801129c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80110a8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80110aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110ac:	4413      	add	r3, r2
 80110ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80110b0:	8912      	ldrh	r2, [r2, #8]
 80110b2:	0912      	lsrs	r2, r2, #4
 80110b4:	b292      	uxth	r2, r2
 80110b6:	4413      	add	r3, r2
 80110b8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80110ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80110bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110be:	429a      	cmp	r2, r3
 80110c0:	d201      	bcs.n	80110c6 <find_volume+0x2ae>
 80110c2:	230d      	movs	r3, #13
 80110c4:	e0ea      	b.n	801129c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80110c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80110c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ca:	1ad3      	subs	r3, r2, r3
 80110cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80110ce:	8952      	ldrh	r2, [r2, #10]
 80110d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80110d4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80110d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d103      	bne.n	80110e4 <find_volume+0x2cc>
 80110dc:	230d      	movs	r3, #13
 80110de:	e0dd      	b.n	801129c <find_volume+0x484>
 80110e0:	240001f4 	.word	0x240001f4
		fmt = FS_FAT32;
 80110e4:	2303      	movs	r3, #3
 80110e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80110ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ec:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80110f0:	4293      	cmp	r3, r2
 80110f2:	d802      	bhi.n	80110fa <find_volume+0x2e2>
 80110f4:	2302      	movs	r3, #2
 80110f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80110fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110fc:	f640 72f5 	movw	r2, #4085	; 0xff5
 8011100:	4293      	cmp	r3, r2
 8011102:	d802      	bhi.n	801110a <find_volume+0x2f2>
 8011104:	2301      	movs	r3, #1
 8011106:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801110a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801110c:	1c9a      	adds	r2, r3, #2
 801110e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011110:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8011112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011114:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011116:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011118:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801111a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801111c:	441a      	add	r2, r3
 801111e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011120:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8011122:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011126:	441a      	add	r2, r3
 8011128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801112a:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 801112c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011130:	2b03      	cmp	r3, #3
 8011132:	d11e      	bne.n	8011172 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011136:	3330      	adds	r3, #48	; 0x30
 8011138:	332a      	adds	r3, #42	; 0x2a
 801113a:	4618      	mov	r0, r3
 801113c:	f7fe fc56 	bl	800f9ec <ld_word>
 8011140:	4603      	mov	r3, r0
 8011142:	2b00      	cmp	r3, #0
 8011144:	d001      	beq.n	801114a <find_volume+0x332>
 8011146:	230d      	movs	r3, #13
 8011148:	e0a8      	b.n	801129c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801114a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801114c:	891b      	ldrh	r3, [r3, #8]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d001      	beq.n	8011156 <find_volume+0x33e>
 8011152:	230d      	movs	r3, #13
 8011154:	e0a2      	b.n	801129c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011158:	3330      	adds	r3, #48	; 0x30
 801115a:	332c      	adds	r3, #44	; 0x2c
 801115c:	4618      	mov	r0, r3
 801115e:	f7fe fc5d 	bl	800fa1c <ld_dword>
 8011162:	4602      	mov	r2, r0
 8011164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011166:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801116a:	695b      	ldr	r3, [r3, #20]
 801116c:	009b      	lsls	r3, r3, #2
 801116e:	647b      	str	r3, [r7, #68]	; 0x44
 8011170:	e01f      	b.n	80111b2 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011174:	891b      	ldrh	r3, [r3, #8]
 8011176:	2b00      	cmp	r3, #0
 8011178:	d101      	bne.n	801117e <find_volume+0x366>
 801117a:	230d      	movs	r3, #13
 801117c:	e08e      	b.n	801129c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801117e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011180:	6a1a      	ldr	r2, [r3, #32]
 8011182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011184:	441a      	add	r2, r3
 8011186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011188:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801118a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801118e:	2b02      	cmp	r3, #2
 8011190:	d103      	bne.n	801119a <find_volume+0x382>
 8011192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011194:	695b      	ldr	r3, [r3, #20]
 8011196:	005b      	lsls	r3, r3, #1
 8011198:	e00a      	b.n	80111b0 <find_volume+0x398>
 801119a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801119c:	695a      	ldr	r2, [r3, #20]
 801119e:	4613      	mov	r3, r2
 80111a0:	005b      	lsls	r3, r3, #1
 80111a2:	4413      	add	r3, r2
 80111a4:	085a      	lsrs	r2, r3, #1
 80111a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111a8:	695b      	ldr	r3, [r3, #20]
 80111aa:	f003 0301 	and.w	r3, r3, #1
 80111ae:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80111b0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80111b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111b4:	699a      	ldr	r2, [r3, #24]
 80111b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80111b8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80111bc:	0a5b      	lsrs	r3, r3, #9
 80111be:	429a      	cmp	r2, r3
 80111c0:	d201      	bcs.n	80111c6 <find_volume+0x3ae>
 80111c2:	230d      	movs	r3, #13
 80111c4:	e06a      	b.n	801129c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80111c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111c8:	f04f 32ff 	mov.w	r2, #4294967295
 80111cc:	611a      	str	r2, [r3, #16]
 80111ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111d0:	691a      	ldr	r2, [r3, #16]
 80111d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111d4:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80111d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111d8:	2280      	movs	r2, #128	; 0x80
 80111da:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80111dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80111e0:	2b03      	cmp	r3, #3
 80111e2:	d149      	bne.n	8011278 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80111e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111e6:	3330      	adds	r3, #48	; 0x30
 80111e8:	3330      	adds	r3, #48	; 0x30
 80111ea:	4618      	mov	r0, r3
 80111ec:	f7fe fbfe 	bl	800f9ec <ld_word>
 80111f0:	4603      	mov	r3, r0
 80111f2:	2b01      	cmp	r3, #1
 80111f4:	d140      	bne.n	8011278 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80111f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111f8:	3301      	adds	r3, #1
 80111fa:	4619      	mov	r1, r3
 80111fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80111fe:	f7fe fea5 	bl	800ff4c <move_window>
 8011202:	4603      	mov	r3, r0
 8011204:	2b00      	cmp	r3, #0
 8011206:	d137      	bne.n	8011278 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8011208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801120a:	2200      	movs	r2, #0
 801120c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801120e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011210:	3330      	adds	r3, #48	; 0x30
 8011212:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011216:	4618      	mov	r0, r3
 8011218:	f7fe fbe8 	bl	800f9ec <ld_word>
 801121c:	4603      	mov	r3, r0
 801121e:	461a      	mov	r2, r3
 8011220:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011224:	429a      	cmp	r2, r3
 8011226:	d127      	bne.n	8011278 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801122a:	3330      	adds	r3, #48	; 0x30
 801122c:	4618      	mov	r0, r3
 801122e:	f7fe fbf5 	bl	800fa1c <ld_dword>
 8011232:	4602      	mov	r2, r0
 8011234:	4b1b      	ldr	r3, [pc, #108]	; (80112a4 <find_volume+0x48c>)
 8011236:	429a      	cmp	r2, r3
 8011238:	d11e      	bne.n	8011278 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801123a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801123c:	3330      	adds	r3, #48	; 0x30
 801123e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011242:	4618      	mov	r0, r3
 8011244:	f7fe fbea 	bl	800fa1c <ld_dword>
 8011248:	4602      	mov	r2, r0
 801124a:	4b17      	ldr	r3, [pc, #92]	; (80112a8 <find_volume+0x490>)
 801124c:	429a      	cmp	r2, r3
 801124e:	d113      	bne.n	8011278 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011252:	3330      	adds	r3, #48	; 0x30
 8011254:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8011258:	4618      	mov	r0, r3
 801125a:	f7fe fbdf 	bl	800fa1c <ld_dword>
 801125e:	4602      	mov	r2, r0
 8011260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011262:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8011264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011266:	3330      	adds	r3, #48	; 0x30
 8011268:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801126c:	4618      	mov	r0, r3
 801126e:	f7fe fbd5 	bl	800fa1c <ld_dword>
 8011272:	4602      	mov	r2, r0
 8011274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011276:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801127a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801127e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011280:	4b0a      	ldr	r3, [pc, #40]	; (80112ac <find_volume+0x494>)
 8011282:	881b      	ldrh	r3, [r3, #0]
 8011284:	3301      	adds	r3, #1
 8011286:	b29a      	uxth	r2, r3
 8011288:	4b08      	ldr	r3, [pc, #32]	; (80112ac <find_volume+0x494>)
 801128a:	801a      	strh	r2, [r3, #0]
 801128c:	4b07      	ldr	r3, [pc, #28]	; (80112ac <find_volume+0x494>)
 801128e:	881a      	ldrh	r2, [r3, #0]
 8011290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011292:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011294:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011296:	f7fe fdf1 	bl	800fe7c <clear_lock>
#endif
	return FR_OK;
 801129a:	2300      	movs	r3, #0
}
 801129c:	4618      	mov	r0, r3
 801129e:	3758      	adds	r7, #88	; 0x58
 80112a0:	46bd      	mov	sp, r7
 80112a2:	bd80      	pop	{r7, pc}
 80112a4:	41615252 	.word	0x41615252
 80112a8:	61417272 	.word	0x61417272
 80112ac:	240001f8 	.word	0x240001f8

080112b0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80112b0:	b580      	push	{r7, lr}
 80112b2:	b084      	sub	sp, #16
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]
 80112b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80112ba:	2309      	movs	r3, #9
 80112bc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d01c      	beq.n	80112fe <validate+0x4e>
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d018      	beq.n	80112fe <validate+0x4e>
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	781b      	ldrb	r3, [r3, #0]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d013      	beq.n	80112fe <validate+0x4e>
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	889a      	ldrh	r2, [r3, #4]
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	88db      	ldrh	r3, [r3, #6]
 80112e0:	429a      	cmp	r2, r3
 80112e2:	d10c      	bne.n	80112fe <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	785b      	ldrb	r3, [r3, #1]
 80112ea:	4618      	mov	r0, r3
 80112ec:	f7fe fae0 	bl	800f8b0 <disk_status>
 80112f0:	4603      	mov	r3, r0
 80112f2:	f003 0301 	and.w	r3, r3, #1
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d101      	bne.n	80112fe <validate+0x4e>
			res = FR_OK;
 80112fa:	2300      	movs	r3, #0
 80112fc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80112fe:	7bfb      	ldrb	r3, [r7, #15]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d102      	bne.n	801130a <validate+0x5a>
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	e000      	b.n	801130c <validate+0x5c>
 801130a:	2300      	movs	r3, #0
 801130c:	683a      	ldr	r2, [r7, #0]
 801130e:	6013      	str	r3, [r2, #0]
	return res;
 8011310:	7bfb      	ldrb	r3, [r7, #15]
}
 8011312:	4618      	mov	r0, r3
 8011314:	3710      	adds	r7, #16
 8011316:	46bd      	mov	sp, r7
 8011318:	bd80      	pop	{r7, pc}
	...

0801131c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801131c:	b580      	push	{r7, lr}
 801131e:	b088      	sub	sp, #32
 8011320:	af00      	add	r7, sp, #0
 8011322:	60f8      	str	r0, [r7, #12]
 8011324:	60b9      	str	r1, [r7, #8]
 8011326:	4613      	mov	r3, r2
 8011328:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801132a:	68bb      	ldr	r3, [r7, #8]
 801132c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801132e:	f107 0310 	add.w	r3, r7, #16
 8011332:	4618      	mov	r0, r3
 8011334:	f7ff fcd5 	bl	8010ce2 <get_ldnumber>
 8011338:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801133a:	69fb      	ldr	r3, [r7, #28]
 801133c:	2b00      	cmp	r3, #0
 801133e:	da01      	bge.n	8011344 <f_mount+0x28>
 8011340:	230b      	movs	r3, #11
 8011342:	e02b      	b.n	801139c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011344:	4a17      	ldr	r2, [pc, #92]	; (80113a4 <f_mount+0x88>)
 8011346:	69fb      	ldr	r3, [r7, #28]
 8011348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801134c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801134e:	69bb      	ldr	r3, [r7, #24]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d005      	beq.n	8011360 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011354:	69b8      	ldr	r0, [r7, #24]
 8011356:	f7fe fd91 	bl	800fe7c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801135a:	69bb      	ldr	r3, [r7, #24]
 801135c:	2200      	movs	r2, #0
 801135e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d002      	beq.n	801136c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	2200      	movs	r2, #0
 801136a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801136c:	68fa      	ldr	r2, [r7, #12]
 801136e:	490d      	ldr	r1, [pc, #52]	; (80113a4 <f_mount+0x88>)
 8011370:	69fb      	ldr	r3, [r7, #28]
 8011372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d002      	beq.n	8011382 <f_mount+0x66>
 801137c:	79fb      	ldrb	r3, [r7, #7]
 801137e:	2b01      	cmp	r3, #1
 8011380:	d001      	beq.n	8011386 <f_mount+0x6a>
 8011382:	2300      	movs	r3, #0
 8011384:	e00a      	b.n	801139c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011386:	f107 010c 	add.w	r1, r7, #12
 801138a:	f107 0308 	add.w	r3, r7, #8
 801138e:	2200      	movs	r2, #0
 8011390:	4618      	mov	r0, r3
 8011392:	f7ff fd41 	bl	8010e18 <find_volume>
 8011396:	4603      	mov	r3, r0
 8011398:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801139a:	7dfb      	ldrb	r3, [r7, #23]
}
 801139c:	4618      	mov	r0, r3
 801139e:	3720      	adds	r7, #32
 80113a0:	46bd      	mov	sp, r7
 80113a2:	bd80      	pop	{r7, pc}
 80113a4:	240001f4 	.word	0x240001f4

080113a8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b098      	sub	sp, #96	; 0x60
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	60f8      	str	r0, [r7, #12]
 80113b0:	60b9      	str	r1, [r7, #8]
 80113b2:	4613      	mov	r3, r2
 80113b4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d101      	bne.n	80113c0 <f_open+0x18>
 80113bc:	2309      	movs	r3, #9
 80113be:	e1ad      	b.n	801171c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80113c0:	79fb      	ldrb	r3, [r7, #7]
 80113c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80113c6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80113c8:	79fa      	ldrb	r2, [r7, #7]
 80113ca:	f107 0110 	add.w	r1, r7, #16
 80113ce:	f107 0308 	add.w	r3, r7, #8
 80113d2:	4618      	mov	r0, r3
 80113d4:	f7ff fd20 	bl	8010e18 <find_volume>
 80113d8:	4603      	mov	r3, r0
 80113da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80113de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	f040 8191 	bne.w	801170a <f_open+0x362>
		dj.obj.fs = fs;
 80113e8:	693b      	ldr	r3, [r7, #16]
 80113ea:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80113ec:	68ba      	ldr	r2, [r7, #8]
 80113ee:	f107 0314 	add.w	r3, r7, #20
 80113f2:	4611      	mov	r1, r2
 80113f4:	4618      	mov	r0, r3
 80113f6:	f7ff fc03 	bl	8010c00 <follow_path>
 80113fa:	4603      	mov	r3, r0
 80113fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011400:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011404:	2b00      	cmp	r3, #0
 8011406:	d11a      	bne.n	801143e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011408:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801140c:	b25b      	sxtb	r3, r3
 801140e:	2b00      	cmp	r3, #0
 8011410:	da03      	bge.n	801141a <f_open+0x72>
				res = FR_INVALID_NAME;
 8011412:	2306      	movs	r3, #6
 8011414:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011418:	e011      	b.n	801143e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801141a:	79fb      	ldrb	r3, [r7, #7]
 801141c:	f023 0301 	bic.w	r3, r3, #1
 8011420:	2b00      	cmp	r3, #0
 8011422:	bf14      	ite	ne
 8011424:	2301      	movne	r3, #1
 8011426:	2300      	moveq	r3, #0
 8011428:	b2db      	uxtb	r3, r3
 801142a:	461a      	mov	r2, r3
 801142c:	f107 0314 	add.w	r3, r7, #20
 8011430:	4611      	mov	r1, r2
 8011432:	4618      	mov	r0, r3
 8011434:	f7fe fbda 	bl	800fbec <chk_lock>
 8011438:	4603      	mov	r3, r0
 801143a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801143e:	79fb      	ldrb	r3, [r7, #7]
 8011440:	f003 031c 	and.w	r3, r3, #28
 8011444:	2b00      	cmp	r3, #0
 8011446:	d07f      	beq.n	8011548 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8011448:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801144c:	2b00      	cmp	r3, #0
 801144e:	d017      	beq.n	8011480 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8011450:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011454:	2b04      	cmp	r3, #4
 8011456:	d10e      	bne.n	8011476 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011458:	f7fe fc24 	bl	800fca4 <enq_lock>
 801145c:	4603      	mov	r3, r0
 801145e:	2b00      	cmp	r3, #0
 8011460:	d006      	beq.n	8011470 <f_open+0xc8>
 8011462:	f107 0314 	add.w	r3, r7, #20
 8011466:	4618      	mov	r0, r3
 8011468:	f7ff fb03 	bl	8010a72 <dir_register>
 801146c:	4603      	mov	r3, r0
 801146e:	e000      	b.n	8011472 <f_open+0xca>
 8011470:	2312      	movs	r3, #18
 8011472:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8011476:	79fb      	ldrb	r3, [r7, #7]
 8011478:	f043 0308 	orr.w	r3, r3, #8
 801147c:	71fb      	strb	r3, [r7, #7]
 801147e:	e010      	b.n	80114a2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011480:	7ebb      	ldrb	r3, [r7, #26]
 8011482:	f003 0311 	and.w	r3, r3, #17
 8011486:	2b00      	cmp	r3, #0
 8011488:	d003      	beq.n	8011492 <f_open+0xea>
					res = FR_DENIED;
 801148a:	2307      	movs	r3, #7
 801148c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011490:	e007      	b.n	80114a2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8011492:	79fb      	ldrb	r3, [r7, #7]
 8011494:	f003 0304 	and.w	r3, r3, #4
 8011498:	2b00      	cmp	r3, #0
 801149a:	d002      	beq.n	80114a2 <f_open+0xfa>
 801149c:	2308      	movs	r3, #8
 801149e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80114a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d168      	bne.n	801157c <f_open+0x1d4>
 80114aa:	79fb      	ldrb	r3, [r7, #7]
 80114ac:	f003 0308 	and.w	r3, r3, #8
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d063      	beq.n	801157c <f_open+0x1d4>
				dw = GET_FATTIME();
 80114b4:	f7fb fafa 	bl	800caac <get_fattime>
 80114b8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80114ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114bc:	330e      	adds	r3, #14
 80114be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80114c0:	4618      	mov	r0, r3
 80114c2:	f7fe fae9 	bl	800fa98 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80114c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114c8:	3316      	adds	r3, #22
 80114ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80114cc:	4618      	mov	r0, r3
 80114ce:	f7fe fae3 	bl	800fa98 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80114d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114d4:	330b      	adds	r3, #11
 80114d6:	2220      	movs	r2, #32
 80114d8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80114da:	693b      	ldr	r3, [r7, #16]
 80114dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80114de:	4611      	mov	r1, r2
 80114e0:	4618      	mov	r0, r3
 80114e2:	f7ff fa32 	bl	801094a <ld_clust>
 80114e6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80114e8:	693b      	ldr	r3, [r7, #16]
 80114ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80114ec:	2200      	movs	r2, #0
 80114ee:	4618      	mov	r0, r3
 80114f0:	f7ff fa4a 	bl	8010988 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80114f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114f6:	331c      	adds	r3, #28
 80114f8:	2100      	movs	r1, #0
 80114fa:	4618      	mov	r0, r3
 80114fc:	f7fe facc 	bl	800fa98 <st_dword>
					fs->wflag = 1;
 8011500:	693b      	ldr	r3, [r7, #16]
 8011502:	2201      	movs	r2, #1
 8011504:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8011506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011508:	2b00      	cmp	r3, #0
 801150a:	d037      	beq.n	801157c <f_open+0x1d4>
						dw = fs->winsect;
 801150c:	693b      	ldr	r3, [r7, #16]
 801150e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011510:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8011512:	f107 0314 	add.w	r3, r7, #20
 8011516:	2200      	movs	r2, #0
 8011518:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801151a:	4618      	mov	r0, r3
 801151c:	f7fe ff5d 	bl	80103da <remove_chain>
 8011520:	4603      	mov	r3, r0
 8011522:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8011526:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801152a:	2b00      	cmp	r3, #0
 801152c:	d126      	bne.n	801157c <f_open+0x1d4>
							res = move_window(fs, dw);
 801152e:	693b      	ldr	r3, [r7, #16]
 8011530:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011532:	4618      	mov	r0, r3
 8011534:	f7fe fd0a 	bl	800ff4c <move_window>
 8011538:	4603      	mov	r3, r0
 801153a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801153e:	693b      	ldr	r3, [r7, #16]
 8011540:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011542:	3a01      	subs	r2, #1
 8011544:	60da      	str	r2, [r3, #12]
 8011546:	e019      	b.n	801157c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011548:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801154c:	2b00      	cmp	r3, #0
 801154e:	d115      	bne.n	801157c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8011550:	7ebb      	ldrb	r3, [r7, #26]
 8011552:	f003 0310 	and.w	r3, r3, #16
 8011556:	2b00      	cmp	r3, #0
 8011558:	d003      	beq.n	8011562 <f_open+0x1ba>
					res = FR_NO_FILE;
 801155a:	2304      	movs	r3, #4
 801155c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011560:	e00c      	b.n	801157c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8011562:	79fb      	ldrb	r3, [r7, #7]
 8011564:	f003 0302 	and.w	r3, r3, #2
 8011568:	2b00      	cmp	r3, #0
 801156a:	d007      	beq.n	801157c <f_open+0x1d4>
 801156c:	7ebb      	ldrb	r3, [r7, #26]
 801156e:	f003 0301 	and.w	r3, r3, #1
 8011572:	2b00      	cmp	r3, #0
 8011574:	d002      	beq.n	801157c <f_open+0x1d4>
						res = FR_DENIED;
 8011576:	2307      	movs	r3, #7
 8011578:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801157c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011580:	2b00      	cmp	r3, #0
 8011582:	d128      	bne.n	80115d6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011584:	79fb      	ldrb	r3, [r7, #7]
 8011586:	f003 0308 	and.w	r3, r3, #8
 801158a:	2b00      	cmp	r3, #0
 801158c:	d003      	beq.n	8011596 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801158e:	79fb      	ldrb	r3, [r7, #7]
 8011590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011594:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011596:	693b      	ldr	r3, [r7, #16]
 8011598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801159e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80115a4:	79fb      	ldrb	r3, [r7, #7]
 80115a6:	f023 0301 	bic.w	r3, r3, #1
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	bf14      	ite	ne
 80115ae:	2301      	movne	r3, #1
 80115b0:	2300      	moveq	r3, #0
 80115b2:	b2db      	uxtb	r3, r3
 80115b4:	461a      	mov	r2, r3
 80115b6:	f107 0314 	add.w	r3, r7, #20
 80115ba:	4611      	mov	r1, r2
 80115bc:	4618      	mov	r0, r3
 80115be:	f7fe fb93 	bl	800fce8 <inc_lock>
 80115c2:	4602      	mov	r2, r0
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	691b      	ldr	r3, [r3, #16]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d102      	bne.n	80115d6 <f_open+0x22e>
 80115d0:	2302      	movs	r3, #2
 80115d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80115d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80115da:	2b00      	cmp	r3, #0
 80115dc:	f040 8095 	bne.w	801170a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80115e0:	693b      	ldr	r3, [r7, #16]
 80115e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80115e4:	4611      	mov	r1, r2
 80115e6:	4618      	mov	r0, r3
 80115e8:	f7ff f9af 	bl	801094a <ld_clust>
 80115ec:	4602      	mov	r2, r0
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80115f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115f4:	331c      	adds	r3, #28
 80115f6:	4618      	mov	r0, r3
 80115f8:	f7fe fa10 	bl	800fa1c <ld_dword>
 80115fc:	4602      	mov	r2, r0
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	2200      	movs	r2, #0
 8011606:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011608:	693a      	ldr	r2, [r7, #16]
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801160e:	693b      	ldr	r3, [r7, #16]
 8011610:	88da      	ldrh	r2, [r3, #6]
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	79fa      	ldrb	r2, [r7, #7]
 801161a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	2200      	movs	r2, #0
 8011620:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	2200      	movs	r2, #0
 8011626:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	2200      	movs	r2, #0
 801162c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	3330      	adds	r3, #48	; 0x30
 8011632:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011636:	2100      	movs	r1, #0
 8011638:	4618      	mov	r0, r3
 801163a:	f7fe fa7a 	bl	800fb32 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801163e:	79fb      	ldrb	r3, [r7, #7]
 8011640:	f003 0320 	and.w	r3, r3, #32
 8011644:	2b00      	cmp	r3, #0
 8011646:	d060      	beq.n	801170a <f_open+0x362>
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	68db      	ldr	r3, [r3, #12]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d05c      	beq.n	801170a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	68da      	ldr	r2, [r3, #12]
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011658:	693b      	ldr	r3, [r7, #16]
 801165a:	895b      	ldrh	r3, [r3, #10]
 801165c:	025b      	lsls	r3, r3, #9
 801165e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	689b      	ldr	r3, [r3, #8]
 8011664:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	68db      	ldr	r3, [r3, #12]
 801166a:	657b      	str	r3, [r7, #84]	; 0x54
 801166c:	e016      	b.n	801169c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011672:	4618      	mov	r0, r3
 8011674:	f7fe fd25 	bl	80100c2 <get_fat>
 8011678:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801167a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801167c:	2b01      	cmp	r3, #1
 801167e:	d802      	bhi.n	8011686 <f_open+0x2de>
 8011680:	2302      	movs	r3, #2
 8011682:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011686:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011688:	f1b3 3fff 	cmp.w	r3, #4294967295
 801168c:	d102      	bne.n	8011694 <f_open+0x2ec>
 801168e:	2301      	movs	r3, #1
 8011690:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011694:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011696:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011698:	1ad3      	subs	r3, r2, r3
 801169a:	657b      	str	r3, [r7, #84]	; 0x54
 801169c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d103      	bne.n	80116ac <f_open+0x304>
 80116a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80116a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80116a8:	429a      	cmp	r2, r3
 80116aa:	d8e0      	bhi.n	801166e <f_open+0x2c6>
				}
				fp->clust = clst;
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80116b0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80116b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d127      	bne.n	801170a <f_open+0x362>
 80116ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d022      	beq.n	801170a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80116c4:	693b      	ldr	r3, [r7, #16]
 80116c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80116c8:	4618      	mov	r0, r3
 80116ca:	f7fe fcdb 	bl	8010084 <clust2sect>
 80116ce:	6478      	str	r0, [r7, #68]	; 0x44
 80116d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d103      	bne.n	80116de <f_open+0x336>
						res = FR_INT_ERR;
 80116d6:	2302      	movs	r3, #2
 80116d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80116dc:	e015      	b.n	801170a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80116de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116e0:	0a5a      	lsrs	r2, r3, #9
 80116e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80116e4:	441a      	add	r2, r3
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80116ea:	693b      	ldr	r3, [r7, #16]
 80116ec:	7858      	ldrb	r0, [r3, #1]
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	6a1a      	ldr	r2, [r3, #32]
 80116f8:	2301      	movs	r3, #1
 80116fa:	f7fe f919 	bl	800f930 <disk_read>
 80116fe:	4603      	mov	r3, r0
 8011700:	2b00      	cmp	r3, #0
 8011702:	d002      	beq.n	801170a <f_open+0x362>
 8011704:	2301      	movs	r3, #1
 8011706:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801170a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801170e:	2b00      	cmp	r3, #0
 8011710:	d002      	beq.n	8011718 <f_open+0x370>
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	2200      	movs	r2, #0
 8011716:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011718:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 801171c:	4618      	mov	r0, r3
 801171e:	3760      	adds	r7, #96	; 0x60
 8011720:	46bd      	mov	sp, r7
 8011722:	bd80      	pop	{r7, pc}

08011724 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011724:	b580      	push	{r7, lr}
 8011726:	b08c      	sub	sp, #48	; 0x30
 8011728:	af00      	add	r7, sp, #0
 801172a:	60f8      	str	r0, [r7, #12]
 801172c:	60b9      	str	r1, [r7, #8]
 801172e:	607a      	str	r2, [r7, #4]
 8011730:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8011732:	68bb      	ldr	r3, [r7, #8]
 8011734:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8011736:	683b      	ldr	r3, [r7, #0]
 8011738:	2200      	movs	r2, #0
 801173a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	f107 0210 	add.w	r2, r7, #16
 8011742:	4611      	mov	r1, r2
 8011744:	4618      	mov	r0, r3
 8011746:	f7ff fdb3 	bl	80112b0 <validate>
 801174a:	4603      	mov	r3, r0
 801174c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011750:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011754:	2b00      	cmp	r3, #0
 8011756:	d107      	bne.n	8011768 <f_write+0x44>
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	7d5b      	ldrb	r3, [r3, #21]
 801175c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011760:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011764:	2b00      	cmp	r3, #0
 8011766:	d002      	beq.n	801176e <f_write+0x4a>
 8011768:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801176c:	e14b      	b.n	8011a06 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	7d1b      	ldrb	r3, [r3, #20]
 8011772:	f003 0302 	and.w	r3, r3, #2
 8011776:	2b00      	cmp	r3, #0
 8011778:	d101      	bne.n	801177e <f_write+0x5a>
 801177a:	2307      	movs	r3, #7
 801177c:	e143      	b.n	8011a06 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	699a      	ldr	r2, [r3, #24]
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	441a      	add	r2, r3
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	699b      	ldr	r3, [r3, #24]
 801178a:	429a      	cmp	r2, r3
 801178c:	f080 812d 	bcs.w	80119ea <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	699b      	ldr	r3, [r3, #24]
 8011794:	43db      	mvns	r3, r3
 8011796:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011798:	e127      	b.n	80119ea <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	699b      	ldr	r3, [r3, #24]
 801179e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	f040 80e3 	bne.w	801196e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	699b      	ldr	r3, [r3, #24]
 80117ac:	0a5b      	lsrs	r3, r3, #9
 80117ae:	693a      	ldr	r2, [r7, #16]
 80117b0:	8952      	ldrh	r2, [r2, #10]
 80117b2:	3a01      	subs	r2, #1
 80117b4:	4013      	ands	r3, r2
 80117b6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80117b8:	69bb      	ldr	r3, [r7, #24]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d143      	bne.n	8011846 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	699b      	ldr	r3, [r3, #24]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d10c      	bne.n	80117e0 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	689b      	ldr	r3, [r3, #8]
 80117ca:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80117cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d11a      	bne.n	8011808 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	2100      	movs	r1, #0
 80117d6:	4618      	mov	r0, r3
 80117d8:	f7fe fe64 	bl	80104a4 <create_chain>
 80117dc:	62b8      	str	r0, [r7, #40]	; 0x28
 80117de:	e013      	b.n	8011808 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d007      	beq.n	80117f8 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	699b      	ldr	r3, [r3, #24]
 80117ec:	4619      	mov	r1, r3
 80117ee:	68f8      	ldr	r0, [r7, #12]
 80117f0:	f7fe fef0 	bl	80105d4 <clmt_clust>
 80117f4:	62b8      	str	r0, [r7, #40]	; 0x28
 80117f6:	e007      	b.n	8011808 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80117f8:	68fa      	ldr	r2, [r7, #12]
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	69db      	ldr	r3, [r3, #28]
 80117fe:	4619      	mov	r1, r3
 8011800:	4610      	mov	r0, r2
 8011802:	f7fe fe4f 	bl	80104a4 <create_chain>
 8011806:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801180a:	2b00      	cmp	r3, #0
 801180c:	f000 80f2 	beq.w	80119f4 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011812:	2b01      	cmp	r3, #1
 8011814:	d104      	bne.n	8011820 <f_write+0xfc>
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	2202      	movs	r2, #2
 801181a:	755a      	strb	r2, [r3, #21]
 801181c:	2302      	movs	r3, #2
 801181e:	e0f2      	b.n	8011a06 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011826:	d104      	bne.n	8011832 <f_write+0x10e>
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	2201      	movs	r2, #1
 801182c:	755a      	strb	r2, [r3, #21]
 801182e:	2301      	movs	r3, #1
 8011830:	e0e9      	b.n	8011a06 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011836:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	689b      	ldr	r3, [r3, #8]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d102      	bne.n	8011846 <f_write+0x122>
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011844:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	7d1b      	ldrb	r3, [r3, #20]
 801184a:	b25b      	sxtb	r3, r3
 801184c:	2b00      	cmp	r3, #0
 801184e:	da18      	bge.n	8011882 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011850:	693b      	ldr	r3, [r7, #16]
 8011852:	7858      	ldrb	r0, [r3, #1]
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	6a1a      	ldr	r2, [r3, #32]
 801185e:	2301      	movs	r3, #1
 8011860:	f7fe f886 	bl	800f970 <disk_write>
 8011864:	4603      	mov	r3, r0
 8011866:	2b00      	cmp	r3, #0
 8011868:	d004      	beq.n	8011874 <f_write+0x150>
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	2201      	movs	r2, #1
 801186e:	755a      	strb	r2, [r3, #21]
 8011870:	2301      	movs	r3, #1
 8011872:	e0c8      	b.n	8011a06 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	7d1b      	ldrb	r3, [r3, #20]
 8011878:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801187c:	b2da      	uxtb	r2, r3
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011882:	693a      	ldr	r2, [r7, #16]
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	69db      	ldr	r3, [r3, #28]
 8011888:	4619      	mov	r1, r3
 801188a:	4610      	mov	r0, r2
 801188c:	f7fe fbfa 	bl	8010084 <clust2sect>
 8011890:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011892:	697b      	ldr	r3, [r7, #20]
 8011894:	2b00      	cmp	r3, #0
 8011896:	d104      	bne.n	80118a2 <f_write+0x17e>
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	2202      	movs	r2, #2
 801189c:	755a      	strb	r2, [r3, #21]
 801189e:	2302      	movs	r3, #2
 80118a0:	e0b1      	b.n	8011a06 <f_write+0x2e2>
			sect += csect;
 80118a2:	697a      	ldr	r2, [r7, #20]
 80118a4:	69bb      	ldr	r3, [r7, #24]
 80118a6:	4413      	add	r3, r2
 80118a8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	0a5b      	lsrs	r3, r3, #9
 80118ae:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80118b0:	6a3b      	ldr	r3, [r7, #32]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d03c      	beq.n	8011930 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80118b6:	69ba      	ldr	r2, [r7, #24]
 80118b8:	6a3b      	ldr	r3, [r7, #32]
 80118ba:	4413      	add	r3, r2
 80118bc:	693a      	ldr	r2, [r7, #16]
 80118be:	8952      	ldrh	r2, [r2, #10]
 80118c0:	4293      	cmp	r3, r2
 80118c2:	d905      	bls.n	80118d0 <f_write+0x1ac>
					cc = fs->csize - csect;
 80118c4:	693b      	ldr	r3, [r7, #16]
 80118c6:	895b      	ldrh	r3, [r3, #10]
 80118c8:	461a      	mov	r2, r3
 80118ca:	69bb      	ldr	r3, [r7, #24]
 80118cc:	1ad3      	subs	r3, r2, r3
 80118ce:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80118d0:	693b      	ldr	r3, [r7, #16]
 80118d2:	7858      	ldrb	r0, [r3, #1]
 80118d4:	6a3b      	ldr	r3, [r7, #32]
 80118d6:	697a      	ldr	r2, [r7, #20]
 80118d8:	69f9      	ldr	r1, [r7, #28]
 80118da:	f7fe f849 	bl	800f970 <disk_write>
 80118de:	4603      	mov	r3, r0
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d004      	beq.n	80118ee <f_write+0x1ca>
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	2201      	movs	r2, #1
 80118e8:	755a      	strb	r2, [r3, #21]
 80118ea:	2301      	movs	r3, #1
 80118ec:	e08b      	b.n	8011a06 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	6a1a      	ldr	r2, [r3, #32]
 80118f2:	697b      	ldr	r3, [r7, #20]
 80118f4:	1ad3      	subs	r3, r2, r3
 80118f6:	6a3a      	ldr	r2, [r7, #32]
 80118f8:	429a      	cmp	r2, r3
 80118fa:	d915      	bls.n	8011928 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	6a1a      	ldr	r2, [r3, #32]
 8011906:	697b      	ldr	r3, [r7, #20]
 8011908:	1ad3      	subs	r3, r2, r3
 801190a:	025b      	lsls	r3, r3, #9
 801190c:	69fa      	ldr	r2, [r7, #28]
 801190e:	4413      	add	r3, r2
 8011910:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011914:	4619      	mov	r1, r3
 8011916:	f7fe f8eb 	bl	800faf0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	7d1b      	ldrb	r3, [r3, #20]
 801191e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011922:	b2da      	uxtb	r2, r3
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011928:	6a3b      	ldr	r3, [r7, #32]
 801192a:	025b      	lsls	r3, r3, #9
 801192c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801192e:	e03f      	b.n	80119b0 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	6a1b      	ldr	r3, [r3, #32]
 8011934:	697a      	ldr	r2, [r7, #20]
 8011936:	429a      	cmp	r2, r3
 8011938:	d016      	beq.n	8011968 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	699a      	ldr	r2, [r3, #24]
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011942:	429a      	cmp	r2, r3
 8011944:	d210      	bcs.n	8011968 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011946:	693b      	ldr	r3, [r7, #16]
 8011948:	7858      	ldrb	r0, [r3, #1]
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011950:	2301      	movs	r3, #1
 8011952:	697a      	ldr	r2, [r7, #20]
 8011954:	f7fd ffec 	bl	800f930 <disk_read>
 8011958:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801195a:	2b00      	cmp	r3, #0
 801195c:	d004      	beq.n	8011968 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	2201      	movs	r2, #1
 8011962:	755a      	strb	r2, [r3, #21]
 8011964:	2301      	movs	r3, #1
 8011966:	e04e      	b.n	8011a06 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	697a      	ldr	r2, [r7, #20]
 801196c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	699b      	ldr	r3, [r3, #24]
 8011972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011976:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801197a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801197c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	429a      	cmp	r2, r3
 8011982:	d901      	bls.n	8011988 <f_write+0x264>
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	699b      	ldr	r3, [r3, #24]
 8011992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011996:	4413      	add	r3, r2
 8011998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801199a:	69f9      	ldr	r1, [r7, #28]
 801199c:	4618      	mov	r0, r3
 801199e:	f7fe f8a7 	bl	800faf0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	7d1b      	ldrb	r3, [r3, #20]
 80119a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80119aa:	b2da      	uxtb	r2, r3
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80119b0:	69fa      	ldr	r2, [r7, #28]
 80119b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119b4:	4413      	add	r3, r2
 80119b6:	61fb      	str	r3, [r7, #28]
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	699a      	ldr	r2, [r3, #24]
 80119bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119be:	441a      	add	r2, r3
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	619a      	str	r2, [r3, #24]
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	68da      	ldr	r2, [r3, #12]
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	699b      	ldr	r3, [r3, #24]
 80119cc:	429a      	cmp	r2, r3
 80119ce:	bf38      	it	cc
 80119d0:	461a      	movcc	r2, r3
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	60da      	str	r2, [r3, #12]
 80119d6:	683b      	ldr	r3, [r7, #0]
 80119d8:	681a      	ldr	r2, [r3, #0]
 80119da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119dc:	441a      	add	r2, r3
 80119de:	683b      	ldr	r3, [r7, #0]
 80119e0:	601a      	str	r2, [r3, #0]
 80119e2:	687a      	ldr	r2, [r7, #4]
 80119e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119e6:	1ad3      	subs	r3, r2, r3
 80119e8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	f47f aed4 	bne.w	801179a <f_write+0x76>
 80119f2:	e000      	b.n	80119f6 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80119f4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	7d1b      	ldrb	r3, [r3, #20]
 80119fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80119fe:	b2da      	uxtb	r2, r3
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011a04:	2300      	movs	r3, #0
}
 8011a06:	4618      	mov	r0, r3
 8011a08:	3730      	adds	r7, #48	; 0x30
 8011a0a:	46bd      	mov	sp, r7
 8011a0c:	bd80      	pop	{r7, pc}

08011a0e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011a0e:	b580      	push	{r7, lr}
 8011a10:	b086      	sub	sp, #24
 8011a12:	af00      	add	r7, sp, #0
 8011a14:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	f107 0208 	add.w	r2, r7, #8
 8011a1c:	4611      	mov	r1, r2
 8011a1e:	4618      	mov	r0, r3
 8011a20:	f7ff fc46 	bl	80112b0 <validate>
 8011a24:	4603      	mov	r3, r0
 8011a26:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011a28:	7dfb      	ldrb	r3, [r7, #23]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d168      	bne.n	8011b00 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	7d1b      	ldrb	r3, [r3, #20]
 8011a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d062      	beq.n	8011b00 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	7d1b      	ldrb	r3, [r3, #20]
 8011a3e:	b25b      	sxtb	r3, r3
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	da15      	bge.n	8011a70 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011a44:	68bb      	ldr	r3, [r7, #8]
 8011a46:	7858      	ldrb	r0, [r3, #1]
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	6a1a      	ldr	r2, [r3, #32]
 8011a52:	2301      	movs	r3, #1
 8011a54:	f7fd ff8c 	bl	800f970 <disk_write>
 8011a58:	4603      	mov	r3, r0
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d001      	beq.n	8011a62 <f_sync+0x54>
 8011a5e:	2301      	movs	r3, #1
 8011a60:	e04f      	b.n	8011b02 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	7d1b      	ldrb	r3, [r3, #20]
 8011a66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011a6a:	b2da      	uxtb	r2, r3
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011a70:	f7fb f81c 	bl	800caac <get_fattime>
 8011a74:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011a76:	68ba      	ldr	r2, [r7, #8]
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a7c:	4619      	mov	r1, r3
 8011a7e:	4610      	mov	r0, r2
 8011a80:	f7fe fa64 	bl	800ff4c <move_window>
 8011a84:	4603      	mov	r3, r0
 8011a86:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011a88:	7dfb      	ldrb	r3, [r7, #23]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d138      	bne.n	8011b00 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a92:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	330b      	adds	r3, #11
 8011a98:	781a      	ldrb	r2, [r3, #0]
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	330b      	adds	r3, #11
 8011a9e:	f042 0220 	orr.w	r2, r2, #32
 8011aa2:	b2d2      	uxtb	r2, r2
 8011aa4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	6818      	ldr	r0, [r3, #0]
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	689b      	ldr	r3, [r3, #8]
 8011aae:	461a      	mov	r2, r3
 8011ab0:	68f9      	ldr	r1, [r7, #12]
 8011ab2:	f7fe ff69 	bl	8010988 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	f103 021c 	add.w	r2, r3, #28
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	68db      	ldr	r3, [r3, #12]
 8011ac0:	4619      	mov	r1, r3
 8011ac2:	4610      	mov	r0, r2
 8011ac4:	f7fd ffe8 	bl	800fa98 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	3316      	adds	r3, #22
 8011acc:	6939      	ldr	r1, [r7, #16]
 8011ace:	4618      	mov	r0, r3
 8011ad0:	f7fd ffe2 	bl	800fa98 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	3312      	adds	r3, #18
 8011ad8:	2100      	movs	r1, #0
 8011ada:	4618      	mov	r0, r3
 8011adc:	f7fd ffc1 	bl	800fa62 <st_word>
					fs->wflag = 1;
 8011ae0:	68bb      	ldr	r3, [r7, #8]
 8011ae2:	2201      	movs	r2, #1
 8011ae4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011ae6:	68bb      	ldr	r3, [r7, #8]
 8011ae8:	4618      	mov	r0, r3
 8011aea:	f7fe fa5d 	bl	800ffa8 <sync_fs>
 8011aee:	4603      	mov	r3, r0
 8011af0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	7d1b      	ldrb	r3, [r3, #20]
 8011af6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011afa:	b2da      	uxtb	r2, r3
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011b00:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b02:	4618      	mov	r0, r3
 8011b04:	3718      	adds	r7, #24
 8011b06:	46bd      	mov	sp, r7
 8011b08:	bd80      	pop	{r7, pc}

08011b0a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011b0a:	b580      	push	{r7, lr}
 8011b0c:	b084      	sub	sp, #16
 8011b0e:	af00      	add	r7, sp, #0
 8011b10:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011b12:	6878      	ldr	r0, [r7, #4]
 8011b14:	f7ff ff7b 	bl	8011a0e <f_sync>
 8011b18:	4603      	mov	r3, r0
 8011b1a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011b1c:	7bfb      	ldrb	r3, [r7, #15]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d118      	bne.n	8011b54 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	f107 0208 	add.w	r2, r7, #8
 8011b28:	4611      	mov	r1, r2
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	f7ff fbc0 	bl	80112b0 <validate>
 8011b30:	4603      	mov	r3, r0
 8011b32:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011b34:	7bfb      	ldrb	r3, [r7, #15]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d10c      	bne.n	8011b54 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	691b      	ldr	r3, [r3, #16]
 8011b3e:	4618      	mov	r0, r3
 8011b40:	f7fe f960 	bl	800fe04 <dec_lock>
 8011b44:	4603      	mov	r3, r0
 8011b46:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011b48:	7bfb      	ldrb	r3, [r7, #15]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d102      	bne.n	8011b54 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	2200      	movs	r2, #0
 8011b52:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8011b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b56:	4618      	mov	r0, r3
 8011b58:	3710      	adds	r7, #16
 8011b5a:	46bd      	mov	sp, r7
 8011b5c:	bd80      	pop	{r7, pc}
	...

08011b60 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011b60:	b480      	push	{r7}
 8011b62:	b087      	sub	sp, #28
 8011b64:	af00      	add	r7, sp, #0
 8011b66:	60f8      	str	r0, [r7, #12]
 8011b68:	60b9      	str	r1, [r7, #8]
 8011b6a:	4613      	mov	r3, r2
 8011b6c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011b6e:	2301      	movs	r3, #1
 8011b70:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011b72:	2300      	movs	r3, #0
 8011b74:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011b76:	4b1f      	ldr	r3, [pc, #124]	; (8011bf4 <FATFS_LinkDriverEx+0x94>)
 8011b78:	7a5b      	ldrb	r3, [r3, #9]
 8011b7a:	b2db      	uxtb	r3, r3
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d131      	bne.n	8011be4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011b80:	4b1c      	ldr	r3, [pc, #112]	; (8011bf4 <FATFS_LinkDriverEx+0x94>)
 8011b82:	7a5b      	ldrb	r3, [r3, #9]
 8011b84:	b2db      	uxtb	r3, r3
 8011b86:	461a      	mov	r2, r3
 8011b88:	4b1a      	ldr	r3, [pc, #104]	; (8011bf4 <FATFS_LinkDriverEx+0x94>)
 8011b8a:	2100      	movs	r1, #0
 8011b8c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011b8e:	4b19      	ldr	r3, [pc, #100]	; (8011bf4 <FATFS_LinkDriverEx+0x94>)
 8011b90:	7a5b      	ldrb	r3, [r3, #9]
 8011b92:	b2db      	uxtb	r3, r3
 8011b94:	4a17      	ldr	r2, [pc, #92]	; (8011bf4 <FATFS_LinkDriverEx+0x94>)
 8011b96:	009b      	lsls	r3, r3, #2
 8011b98:	4413      	add	r3, r2
 8011b9a:	68fa      	ldr	r2, [r7, #12]
 8011b9c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011b9e:	4b15      	ldr	r3, [pc, #84]	; (8011bf4 <FATFS_LinkDriverEx+0x94>)
 8011ba0:	7a5b      	ldrb	r3, [r3, #9]
 8011ba2:	b2db      	uxtb	r3, r3
 8011ba4:	461a      	mov	r2, r3
 8011ba6:	4b13      	ldr	r3, [pc, #76]	; (8011bf4 <FATFS_LinkDriverEx+0x94>)
 8011ba8:	4413      	add	r3, r2
 8011baa:	79fa      	ldrb	r2, [r7, #7]
 8011bac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011bae:	4b11      	ldr	r3, [pc, #68]	; (8011bf4 <FATFS_LinkDriverEx+0x94>)
 8011bb0:	7a5b      	ldrb	r3, [r3, #9]
 8011bb2:	b2db      	uxtb	r3, r3
 8011bb4:	1c5a      	adds	r2, r3, #1
 8011bb6:	b2d1      	uxtb	r1, r2
 8011bb8:	4a0e      	ldr	r2, [pc, #56]	; (8011bf4 <FATFS_LinkDriverEx+0x94>)
 8011bba:	7251      	strb	r1, [r2, #9]
 8011bbc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011bbe:	7dbb      	ldrb	r3, [r7, #22]
 8011bc0:	3330      	adds	r3, #48	; 0x30
 8011bc2:	b2da      	uxtb	r2, r3
 8011bc4:	68bb      	ldr	r3, [r7, #8]
 8011bc6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011bc8:	68bb      	ldr	r3, [r7, #8]
 8011bca:	3301      	adds	r3, #1
 8011bcc:	223a      	movs	r2, #58	; 0x3a
 8011bce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011bd0:	68bb      	ldr	r3, [r7, #8]
 8011bd2:	3302      	adds	r3, #2
 8011bd4:	222f      	movs	r2, #47	; 0x2f
 8011bd6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011bd8:	68bb      	ldr	r3, [r7, #8]
 8011bda:	3303      	adds	r3, #3
 8011bdc:	2200      	movs	r2, #0
 8011bde:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011be0:	2300      	movs	r3, #0
 8011be2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8011be6:	4618      	mov	r0, r3
 8011be8:	371c      	adds	r7, #28
 8011bea:	46bd      	mov	sp, r7
 8011bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf0:	4770      	bx	lr
 8011bf2:	bf00      	nop
 8011bf4:	2400021c 	.word	0x2400021c

08011bf8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b082      	sub	sp, #8
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	6078      	str	r0, [r7, #4]
 8011c00:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011c02:	2200      	movs	r2, #0
 8011c04:	6839      	ldr	r1, [r7, #0]
 8011c06:	6878      	ldr	r0, [r7, #4]
 8011c08:	f7ff ffaa 	bl	8011b60 <FATFS_LinkDriverEx>
 8011c0c:	4603      	mov	r3, r0
}
 8011c0e:	4618      	mov	r0, r3
 8011c10:	3708      	adds	r7, #8
 8011c12:	46bd      	mov	sp, r7
 8011c14:	bd80      	pop	{r7, pc}
	...

08011c18 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011c18:	b580      	push	{r7, lr}
 8011c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011c1c:	2200      	movs	r2, #0
 8011c1e:	4913      	ldr	r1, [pc, #76]	; (8011c6c <MX_USB_DEVICE_Init+0x54>)
 8011c20:	4813      	ldr	r0, [pc, #76]	; (8011c70 <MX_USB_DEVICE_Init+0x58>)
 8011c22:	f7fc fd5e 	bl	800e6e2 <USBD_Init>
 8011c26:	4603      	mov	r3, r0
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d001      	beq.n	8011c30 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011c2c:	f7ef f8e6 	bl	8000dfc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8011c30:	4910      	ldr	r1, [pc, #64]	; (8011c74 <MX_USB_DEVICE_Init+0x5c>)
 8011c32:	480f      	ldr	r0, [pc, #60]	; (8011c70 <MX_USB_DEVICE_Init+0x58>)
 8011c34:	f7fc fd8b 	bl	800e74e <USBD_RegisterClass>
 8011c38:	4603      	mov	r3, r0
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d001      	beq.n	8011c42 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011c3e:	f7ef f8dd 	bl	8000dfc <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8011c42:	490d      	ldr	r1, [pc, #52]	; (8011c78 <MX_USB_DEVICE_Init+0x60>)
 8011c44:	480a      	ldr	r0, [pc, #40]	; (8011c70 <MX_USB_DEVICE_Init+0x58>)
 8011c46:	f7fb fa87 	bl	800d158 <USBD_MSC_RegisterStorage>
 8011c4a:	4603      	mov	r3, r0
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d001      	beq.n	8011c54 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011c50:	f7ef f8d4 	bl	8000dfc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011c54:	4806      	ldr	r0, [pc, #24]	; (8011c70 <MX_USB_DEVICE_Init+0x58>)
 8011c56:	f7fc fd9b 	bl	800e790 <USBD_Start>
 8011c5a:	4603      	mov	r3, r0
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d001      	beq.n	8011c64 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011c60:	f7ef f8cc 	bl	8000dfc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8011c64:	f7f3 fa48 	bl	80050f8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011c68:	bf00      	nop
 8011c6a:	bd80      	pop	{r7, pc}
 8011c6c:	240000f8 	.word	0x240000f8
 8011c70:	24000ed8 	.word	0x24000ed8
 8011c74:	24000010 	.word	0x24000010
 8011c78:	24000148 	.word	0x24000148

08011c7c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011c7c:	b480      	push	{r7}
 8011c7e:	b083      	sub	sp, #12
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	4603      	mov	r3, r0
 8011c84:	6039      	str	r1, [r7, #0]
 8011c86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011c88:	683b      	ldr	r3, [r7, #0]
 8011c8a:	2212      	movs	r2, #18
 8011c8c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011c8e:	4b03      	ldr	r3, [pc, #12]	; (8011c9c <USBD_FS_DeviceDescriptor+0x20>)
}
 8011c90:	4618      	mov	r0, r3
 8011c92:	370c      	adds	r7, #12
 8011c94:	46bd      	mov	sp, r7
 8011c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c9a:	4770      	bx	lr
 8011c9c:	24000114 	.word	0x24000114

08011ca0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011ca0:	b480      	push	{r7}
 8011ca2:	b083      	sub	sp, #12
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	6039      	str	r1, [r7, #0]
 8011caa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011cac:	683b      	ldr	r3, [r7, #0]
 8011cae:	2204      	movs	r2, #4
 8011cb0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011cb2:	4b03      	ldr	r3, [pc, #12]	; (8011cc0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	370c      	adds	r7, #12
 8011cb8:	46bd      	mov	sp, r7
 8011cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cbe:	4770      	bx	lr
 8011cc0:	24000128 	.word	0x24000128

08011cc4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011cc4:	b580      	push	{r7, lr}
 8011cc6:	b082      	sub	sp, #8
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	4603      	mov	r3, r0
 8011ccc:	6039      	str	r1, [r7, #0]
 8011cce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011cd0:	79fb      	ldrb	r3, [r7, #7]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d105      	bne.n	8011ce2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011cd6:	683a      	ldr	r2, [r7, #0]
 8011cd8:	4907      	ldr	r1, [pc, #28]	; (8011cf8 <USBD_FS_ProductStrDescriptor+0x34>)
 8011cda:	4808      	ldr	r0, [pc, #32]	; (8011cfc <USBD_FS_ProductStrDescriptor+0x38>)
 8011cdc:	f7fd fd25 	bl	800f72a <USBD_GetString>
 8011ce0:	e004      	b.n	8011cec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011ce2:	683a      	ldr	r2, [r7, #0]
 8011ce4:	4904      	ldr	r1, [pc, #16]	; (8011cf8 <USBD_FS_ProductStrDescriptor+0x34>)
 8011ce6:	4805      	ldr	r0, [pc, #20]	; (8011cfc <USBD_FS_ProductStrDescriptor+0x38>)
 8011ce8:	f7fd fd1f 	bl	800f72a <USBD_GetString>
  }
  return USBD_StrDesc;
 8011cec:	4b02      	ldr	r3, [pc, #8]	; (8011cf8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011cee:	4618      	mov	r0, r3
 8011cf0:	3708      	adds	r7, #8
 8011cf2:	46bd      	mov	sp, r7
 8011cf4:	bd80      	pop	{r7, pc}
 8011cf6:	bf00      	nop
 8011cf8:	240011a8 	.word	0x240011a8
 8011cfc:	0801289c 	.word	0x0801289c

08011d00 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b082      	sub	sp, #8
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	4603      	mov	r3, r0
 8011d08:	6039      	str	r1, [r7, #0]
 8011d0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011d0c:	683a      	ldr	r2, [r7, #0]
 8011d0e:	4904      	ldr	r1, [pc, #16]	; (8011d20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011d10:	4804      	ldr	r0, [pc, #16]	; (8011d24 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011d12:	f7fd fd0a 	bl	800f72a <USBD_GetString>
  return USBD_StrDesc;
 8011d16:	4b02      	ldr	r3, [pc, #8]	; (8011d20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011d18:	4618      	mov	r0, r3
 8011d1a:	3708      	adds	r7, #8
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	bd80      	pop	{r7, pc}
 8011d20:	240011a8 	.word	0x240011a8
 8011d24:	080128b0 	.word	0x080128b0

08011d28 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b082      	sub	sp, #8
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	4603      	mov	r3, r0
 8011d30:	6039      	str	r1, [r7, #0]
 8011d32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011d34:	683b      	ldr	r3, [r7, #0]
 8011d36:	221a      	movs	r2, #26
 8011d38:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011d3a:	f000 f843 	bl	8011dc4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011d3e:	4b02      	ldr	r3, [pc, #8]	; (8011d48 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011d40:	4618      	mov	r0, r3
 8011d42:	3708      	adds	r7, #8
 8011d44:	46bd      	mov	sp, r7
 8011d46:	bd80      	pop	{r7, pc}
 8011d48:	2400012c 	.word	0x2400012c

08011d4c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011d4c:	b580      	push	{r7, lr}
 8011d4e:	b082      	sub	sp, #8
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	4603      	mov	r3, r0
 8011d54:	6039      	str	r1, [r7, #0]
 8011d56:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011d58:	79fb      	ldrb	r3, [r7, #7]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d105      	bne.n	8011d6a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011d5e:	683a      	ldr	r2, [r7, #0]
 8011d60:	4907      	ldr	r1, [pc, #28]	; (8011d80 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011d62:	4808      	ldr	r0, [pc, #32]	; (8011d84 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011d64:	f7fd fce1 	bl	800f72a <USBD_GetString>
 8011d68:	e004      	b.n	8011d74 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011d6a:	683a      	ldr	r2, [r7, #0]
 8011d6c:	4904      	ldr	r1, [pc, #16]	; (8011d80 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011d6e:	4805      	ldr	r0, [pc, #20]	; (8011d84 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011d70:	f7fd fcdb 	bl	800f72a <USBD_GetString>
  }
  return USBD_StrDesc;
 8011d74:	4b02      	ldr	r3, [pc, #8]	; (8011d80 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011d76:	4618      	mov	r0, r3
 8011d78:	3708      	adds	r7, #8
 8011d7a:	46bd      	mov	sp, r7
 8011d7c:	bd80      	pop	{r7, pc}
 8011d7e:	bf00      	nop
 8011d80:	240011a8 	.word	0x240011a8
 8011d84:	080128c4 	.word	0x080128c4

08011d88 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011d88:	b580      	push	{r7, lr}
 8011d8a:	b082      	sub	sp, #8
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	4603      	mov	r3, r0
 8011d90:	6039      	str	r1, [r7, #0]
 8011d92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011d94:	79fb      	ldrb	r3, [r7, #7]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d105      	bne.n	8011da6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011d9a:	683a      	ldr	r2, [r7, #0]
 8011d9c:	4907      	ldr	r1, [pc, #28]	; (8011dbc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011d9e:	4808      	ldr	r0, [pc, #32]	; (8011dc0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011da0:	f7fd fcc3 	bl	800f72a <USBD_GetString>
 8011da4:	e004      	b.n	8011db0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011da6:	683a      	ldr	r2, [r7, #0]
 8011da8:	4904      	ldr	r1, [pc, #16]	; (8011dbc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011daa:	4805      	ldr	r0, [pc, #20]	; (8011dc0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011dac:	f7fd fcbd 	bl	800f72a <USBD_GetString>
  }
  return USBD_StrDesc;
 8011db0:	4b02      	ldr	r3, [pc, #8]	; (8011dbc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011db2:	4618      	mov	r0, r3
 8011db4:	3708      	adds	r7, #8
 8011db6:	46bd      	mov	sp, r7
 8011db8:	bd80      	pop	{r7, pc}
 8011dba:	bf00      	nop
 8011dbc:	240011a8 	.word	0x240011a8
 8011dc0:	080128d0 	.word	0x080128d0

08011dc4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b084      	sub	sp, #16
 8011dc8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011dca:	4b0f      	ldr	r3, [pc, #60]	; (8011e08 <Get_SerialNum+0x44>)
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011dd0:	4b0e      	ldr	r3, [pc, #56]	; (8011e0c <Get_SerialNum+0x48>)
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011dd6:	4b0e      	ldr	r3, [pc, #56]	; (8011e10 <Get_SerialNum+0x4c>)
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011ddc:	68fa      	ldr	r2, [r7, #12]
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	4413      	add	r3, r2
 8011de2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d009      	beq.n	8011dfe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011dea:	2208      	movs	r2, #8
 8011dec:	4909      	ldr	r1, [pc, #36]	; (8011e14 <Get_SerialNum+0x50>)
 8011dee:	68f8      	ldr	r0, [r7, #12]
 8011df0:	f000 f814 	bl	8011e1c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011df4:	2204      	movs	r2, #4
 8011df6:	4908      	ldr	r1, [pc, #32]	; (8011e18 <Get_SerialNum+0x54>)
 8011df8:	68b8      	ldr	r0, [r7, #8]
 8011dfa:	f000 f80f 	bl	8011e1c <IntToUnicode>
  }
}
 8011dfe:	bf00      	nop
 8011e00:	3710      	adds	r7, #16
 8011e02:	46bd      	mov	sp, r7
 8011e04:	bd80      	pop	{r7, pc}
 8011e06:	bf00      	nop
 8011e08:	1ff1e800 	.word	0x1ff1e800
 8011e0c:	1ff1e804 	.word	0x1ff1e804
 8011e10:	1ff1e808 	.word	0x1ff1e808
 8011e14:	2400012e 	.word	0x2400012e
 8011e18:	2400013e 	.word	0x2400013e

08011e1c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011e1c:	b480      	push	{r7}
 8011e1e:	b087      	sub	sp, #28
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	60f8      	str	r0, [r7, #12]
 8011e24:	60b9      	str	r1, [r7, #8]
 8011e26:	4613      	mov	r3, r2
 8011e28:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011e2e:	2300      	movs	r3, #0
 8011e30:	75fb      	strb	r3, [r7, #23]
 8011e32:	e027      	b.n	8011e84 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	0f1b      	lsrs	r3, r3, #28
 8011e38:	2b09      	cmp	r3, #9
 8011e3a:	d80b      	bhi.n	8011e54 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	0f1b      	lsrs	r3, r3, #28
 8011e40:	b2da      	uxtb	r2, r3
 8011e42:	7dfb      	ldrb	r3, [r7, #23]
 8011e44:	005b      	lsls	r3, r3, #1
 8011e46:	4619      	mov	r1, r3
 8011e48:	68bb      	ldr	r3, [r7, #8]
 8011e4a:	440b      	add	r3, r1
 8011e4c:	3230      	adds	r2, #48	; 0x30
 8011e4e:	b2d2      	uxtb	r2, r2
 8011e50:	701a      	strb	r2, [r3, #0]
 8011e52:	e00a      	b.n	8011e6a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	0f1b      	lsrs	r3, r3, #28
 8011e58:	b2da      	uxtb	r2, r3
 8011e5a:	7dfb      	ldrb	r3, [r7, #23]
 8011e5c:	005b      	lsls	r3, r3, #1
 8011e5e:	4619      	mov	r1, r3
 8011e60:	68bb      	ldr	r3, [r7, #8]
 8011e62:	440b      	add	r3, r1
 8011e64:	3237      	adds	r2, #55	; 0x37
 8011e66:	b2d2      	uxtb	r2, r2
 8011e68:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	011b      	lsls	r3, r3, #4
 8011e6e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011e70:	7dfb      	ldrb	r3, [r7, #23]
 8011e72:	005b      	lsls	r3, r3, #1
 8011e74:	3301      	adds	r3, #1
 8011e76:	68ba      	ldr	r2, [r7, #8]
 8011e78:	4413      	add	r3, r2
 8011e7a:	2200      	movs	r2, #0
 8011e7c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011e7e:	7dfb      	ldrb	r3, [r7, #23]
 8011e80:	3301      	adds	r3, #1
 8011e82:	75fb      	strb	r3, [r7, #23]
 8011e84:	7dfa      	ldrb	r2, [r7, #23]
 8011e86:	79fb      	ldrb	r3, [r7, #7]
 8011e88:	429a      	cmp	r2, r3
 8011e8a:	d3d3      	bcc.n	8011e34 <IntToUnicode+0x18>
  }
}
 8011e8c:	bf00      	nop
 8011e8e:	371c      	adds	r7, #28
 8011e90:	46bd      	mov	sp, r7
 8011e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e96:	4770      	bx	lr

08011e98 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8011e98:	b480      	push	{r7}
 8011e9a:	b083      	sub	sp, #12
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	4603      	mov	r3, r0
 8011ea0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8011ea2:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	370c      	adds	r7, #12
 8011ea8:	46bd      	mov	sp, r7
 8011eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eae:	4770      	bx	lr

08011eb0 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8011eb0:	b480      	push	{r7}
 8011eb2:	b085      	sub	sp, #20
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	4603      	mov	r3, r0
 8011eb8:	60b9      	str	r1, [r7, #8]
 8011eba:	607a      	str	r2, [r7, #4]
 8011ebc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8011ebe:	68bb      	ldr	r3, [r7, #8]
 8011ec0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011ec4:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011ecc:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8011ece:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	3714      	adds	r7, #20
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eda:	4770      	bx	lr

08011edc <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8011edc:	b480      	push	{r7}
 8011ede:	b083      	sub	sp, #12
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011ee6:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011ee8:	4618      	mov	r0, r3
 8011eea:	370c      	adds	r7, #12
 8011eec:	46bd      	mov	sp, r7
 8011eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef2:	4770      	bx	lr

08011ef4 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8011ef4:	b480      	push	{r7}
 8011ef6:	b083      	sub	sp, #12
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	4603      	mov	r3, r0
 8011efc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8011efe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011f00:	4618      	mov	r0, r3
 8011f02:	370c      	adds	r7, #12
 8011f04:	46bd      	mov	sp, r7
 8011f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f0a:	4770      	bx	lr

08011f0c <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8011f0c:	b480      	push	{r7}
 8011f0e:	b085      	sub	sp, #20
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	60b9      	str	r1, [r7, #8]
 8011f14:	607a      	str	r2, [r7, #4]
 8011f16:	461a      	mov	r2, r3
 8011f18:	4603      	mov	r3, r0
 8011f1a:	73fb      	strb	r3, [r7, #15]
 8011f1c:	4613      	mov	r3, r2
 8011f1e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8011f20:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011f22:	4618      	mov	r0, r3
 8011f24:	3714      	adds	r7, #20
 8011f26:	46bd      	mov	sp, r7
 8011f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f2c:	4770      	bx	lr

08011f2e <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8011f2e:	b480      	push	{r7}
 8011f30:	b085      	sub	sp, #20
 8011f32:	af00      	add	r7, sp, #0
 8011f34:	60b9      	str	r1, [r7, #8]
 8011f36:	607a      	str	r2, [r7, #4]
 8011f38:	461a      	mov	r2, r3
 8011f3a:	4603      	mov	r3, r0
 8011f3c:	73fb      	strb	r3, [r7, #15]
 8011f3e:	4613      	mov	r3, r2
 8011f40:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 8011f42:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8011f44:	4618      	mov	r0, r3
 8011f46:	3714      	adds	r7, #20
 8011f48:	46bd      	mov	sp, r7
 8011f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f4e:	4770      	bx	lr

08011f50 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8011f50:	b480      	push	{r7}
 8011f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8011f54:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8011f56:	4618      	mov	r0, r3
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5e:	4770      	bx	lr

08011f60 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b08a      	sub	sp, #40	; 0x28
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011f68:	f107 0314 	add.w	r3, r7, #20
 8011f6c:	2200      	movs	r2, #0
 8011f6e:	601a      	str	r2, [r3, #0]
 8011f70:	605a      	str	r2, [r3, #4]
 8011f72:	609a      	str	r2, [r3, #8]
 8011f74:	60da      	str	r2, [r3, #12]
 8011f76:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	4a1e      	ldr	r2, [pc, #120]	; (8011ff8 <HAL_PCD_MspInit+0x98>)
 8011f7e:	4293      	cmp	r3, r2
 8011f80:	d136      	bne.n	8011ff0 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011f82:	4b1e      	ldr	r3, [pc, #120]	; (8011ffc <HAL_PCD_MspInit+0x9c>)
 8011f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011f88:	4a1c      	ldr	r2, [pc, #112]	; (8011ffc <HAL_PCD_MspInit+0x9c>)
 8011f8a:	f043 0301 	orr.w	r3, r3, #1
 8011f8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8011f92:	4b1a      	ldr	r3, [pc, #104]	; (8011ffc <HAL_PCD_MspInit+0x9c>)
 8011f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011f98:	f003 0301 	and.w	r3, r3, #1
 8011f9c:	613b      	str	r3, [r7, #16]
 8011f9e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011fa0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8011fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011fa6:	2302      	movs	r3, #2
 8011fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011faa:	2300      	movs	r3, #0
 8011fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011fae:	2300      	movs	r3, #0
 8011fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8011fb2:	230a      	movs	r3, #10
 8011fb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011fb6:	f107 0314 	add.w	r3, r7, #20
 8011fba:	4619      	mov	r1, r3
 8011fbc:	4810      	ldr	r0, [pc, #64]	; (8012000 <HAL_PCD_MspInit+0xa0>)
 8011fbe:	f7f1 fc5d 	bl	800387c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011fc2:	4b0e      	ldr	r3, [pc, #56]	; (8011ffc <HAL_PCD_MspInit+0x9c>)
 8011fc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8011fc8:	4a0c      	ldr	r2, [pc, #48]	; (8011ffc <HAL_PCD_MspInit+0x9c>)
 8011fca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011fce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8011fd2:	4b0a      	ldr	r3, [pc, #40]	; (8011ffc <HAL_PCD_MspInit+0x9c>)
 8011fd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8011fd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011fdc:	60fb      	str	r3, [r7, #12]
 8011fde:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8011fe0:	2200      	movs	r2, #0
 8011fe2:	2100      	movs	r1, #0
 8011fe4:	2065      	movs	r0, #101	; 0x65
 8011fe6:	f7ef fbea 	bl	80017be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011fea:	2065      	movs	r0, #101	; 0x65
 8011fec:	f7ef fc01 	bl	80017f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011ff0:	bf00      	nop
 8011ff2:	3728      	adds	r7, #40	; 0x28
 8011ff4:	46bd      	mov	sp, r7
 8011ff6:	bd80      	pop	{r7, pc}
 8011ff8:	40080000 	.word	0x40080000
 8011ffc:	58024400 	.word	0x58024400
 8012000:	58020000 	.word	0x58020000

08012004 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012004:	b580      	push	{r7, lr}
 8012006:	b082      	sub	sp, #8
 8012008:	af00      	add	r7, sp, #0
 801200a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8012018:	4619      	mov	r1, r3
 801201a:	4610      	mov	r0, r2
 801201c:	f7fc fc03 	bl	800e826 <USBD_LL_SetupStage>
}
 8012020:	bf00      	nop
 8012022:	3708      	adds	r7, #8
 8012024:	46bd      	mov	sp, r7
 8012026:	bd80      	pop	{r7, pc}

08012028 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012028:	b580      	push	{r7, lr}
 801202a:	b082      	sub	sp, #8
 801202c:	af00      	add	r7, sp, #0
 801202e:	6078      	str	r0, [r7, #4]
 8012030:	460b      	mov	r3, r1
 8012032:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801203a:	78fa      	ldrb	r2, [r7, #3]
 801203c:	6879      	ldr	r1, [r7, #4]
 801203e:	4613      	mov	r3, r2
 8012040:	00db      	lsls	r3, r3, #3
 8012042:	1a9b      	subs	r3, r3, r2
 8012044:	009b      	lsls	r3, r3, #2
 8012046:	440b      	add	r3, r1
 8012048:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801204c:	681a      	ldr	r2, [r3, #0]
 801204e:	78fb      	ldrb	r3, [r7, #3]
 8012050:	4619      	mov	r1, r3
 8012052:	f7fc fc3b 	bl	800e8cc <USBD_LL_DataOutStage>
}
 8012056:	bf00      	nop
 8012058:	3708      	adds	r7, #8
 801205a:	46bd      	mov	sp, r7
 801205c:	bd80      	pop	{r7, pc}

0801205e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801205e:	b580      	push	{r7, lr}
 8012060:	b082      	sub	sp, #8
 8012062:	af00      	add	r7, sp, #0
 8012064:	6078      	str	r0, [r7, #4]
 8012066:	460b      	mov	r3, r1
 8012068:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8012070:	78fa      	ldrb	r2, [r7, #3]
 8012072:	6879      	ldr	r1, [r7, #4]
 8012074:	4613      	mov	r3, r2
 8012076:	00db      	lsls	r3, r3, #3
 8012078:	1a9b      	subs	r3, r3, r2
 801207a:	009b      	lsls	r3, r3, #2
 801207c:	440b      	add	r3, r1
 801207e:	3348      	adds	r3, #72	; 0x48
 8012080:	681a      	ldr	r2, [r3, #0]
 8012082:	78fb      	ldrb	r3, [r7, #3]
 8012084:	4619      	mov	r1, r3
 8012086:	f7fc fc84 	bl	800e992 <USBD_LL_DataInStage>
}
 801208a:	bf00      	nop
 801208c:	3708      	adds	r7, #8
 801208e:	46bd      	mov	sp, r7
 8012090:	bd80      	pop	{r7, pc}

08012092 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012092:	b580      	push	{r7, lr}
 8012094:	b082      	sub	sp, #8
 8012096:	af00      	add	r7, sp, #0
 8012098:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80120a0:	4618      	mov	r0, r3
 80120a2:	f7fc fd88 	bl	800ebb6 <USBD_LL_SOF>
}
 80120a6:	bf00      	nop
 80120a8:	3708      	adds	r7, #8
 80120aa:	46bd      	mov	sp, r7
 80120ac:	bd80      	pop	{r7, pc}

080120ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80120ae:	b580      	push	{r7, lr}
 80120b0:	b084      	sub	sp, #16
 80120b2:	af00      	add	r7, sp, #0
 80120b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80120b6:	2301      	movs	r3, #1
 80120b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	68db      	ldr	r3, [r3, #12]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d102      	bne.n	80120c8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80120c2:	2300      	movs	r3, #0
 80120c4:	73fb      	strb	r3, [r7, #15]
 80120c6:	e008      	b.n	80120da <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	68db      	ldr	r3, [r3, #12]
 80120cc:	2b02      	cmp	r3, #2
 80120ce:	d102      	bne.n	80120d6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80120d0:	2301      	movs	r3, #1
 80120d2:	73fb      	strb	r3, [r7, #15]
 80120d4:	e001      	b.n	80120da <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80120d6:	f7ee fe91 	bl	8000dfc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80120e0:	7bfa      	ldrb	r2, [r7, #15]
 80120e2:	4611      	mov	r1, r2
 80120e4:	4618      	mov	r0, r3
 80120e6:	f7fc fd2b 	bl	800eb40 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80120f0:	4618      	mov	r0, r3
 80120f2:	f7fc fce4 	bl	800eabe <USBD_LL_Reset>
}
 80120f6:	bf00      	nop
 80120f8:	3710      	adds	r7, #16
 80120fa:	46bd      	mov	sp, r7
 80120fc:	bd80      	pop	{r7, pc}
	...

08012100 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012100:	b580      	push	{r7, lr}
 8012102:	b082      	sub	sp, #8
 8012104:	af00      	add	r7, sp, #0
 8012106:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801210e:	4618      	mov	r0, r3
 8012110:	f7fc fd26 	bl	800eb60 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	687a      	ldr	r2, [r7, #4]
 8012120:	6812      	ldr	r2, [r2, #0]
 8012122:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012126:	f043 0301 	orr.w	r3, r3, #1
 801212a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	6a1b      	ldr	r3, [r3, #32]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d005      	beq.n	8012140 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012134:	4b04      	ldr	r3, [pc, #16]	; (8012148 <HAL_PCD_SuspendCallback+0x48>)
 8012136:	691b      	ldr	r3, [r3, #16]
 8012138:	4a03      	ldr	r2, [pc, #12]	; (8012148 <HAL_PCD_SuspendCallback+0x48>)
 801213a:	f043 0306 	orr.w	r3, r3, #6
 801213e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012140:	bf00      	nop
 8012142:	3708      	adds	r7, #8
 8012144:	46bd      	mov	sp, r7
 8012146:	bd80      	pop	{r7, pc}
 8012148:	e000ed00 	.word	0xe000ed00

0801214c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801214c:	b580      	push	{r7, lr}
 801214e:	b082      	sub	sp, #8
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801215a:	4618      	mov	r0, r3
 801215c:	f7fc fd15 	bl	800eb8a <USBD_LL_Resume>
}
 8012160:	bf00      	nop
 8012162:	3708      	adds	r7, #8
 8012164:	46bd      	mov	sp, r7
 8012166:	bd80      	pop	{r7, pc}

08012168 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012168:	b580      	push	{r7, lr}
 801216a:	b082      	sub	sp, #8
 801216c:	af00      	add	r7, sp, #0
 801216e:	6078      	str	r0, [r7, #4]
 8012170:	460b      	mov	r3, r1
 8012172:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801217a:	78fa      	ldrb	r2, [r7, #3]
 801217c:	4611      	mov	r1, r2
 801217e:	4618      	mov	r0, r3
 8012180:	f7fc fd40 	bl	800ec04 <USBD_LL_IsoOUTIncomplete>
}
 8012184:	bf00      	nop
 8012186:	3708      	adds	r7, #8
 8012188:	46bd      	mov	sp, r7
 801218a:	bd80      	pop	{r7, pc}

0801218c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801218c:	b580      	push	{r7, lr}
 801218e:	b082      	sub	sp, #8
 8012190:	af00      	add	r7, sp, #0
 8012192:	6078      	str	r0, [r7, #4]
 8012194:	460b      	mov	r3, r1
 8012196:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801219e:	78fa      	ldrb	r2, [r7, #3]
 80121a0:	4611      	mov	r1, r2
 80121a2:	4618      	mov	r0, r3
 80121a4:	f7fc fd21 	bl	800ebea <USBD_LL_IsoINIncomplete>
}
 80121a8:	bf00      	nop
 80121aa:	3708      	adds	r7, #8
 80121ac:	46bd      	mov	sp, r7
 80121ae:	bd80      	pop	{r7, pc}

080121b0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b082      	sub	sp, #8
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80121be:	4618      	mov	r0, r3
 80121c0:	f7fc fd2d 	bl	800ec1e <USBD_LL_DevConnected>
}
 80121c4:	bf00      	nop
 80121c6:	3708      	adds	r7, #8
 80121c8:	46bd      	mov	sp, r7
 80121ca:	bd80      	pop	{r7, pc}

080121cc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80121cc:	b580      	push	{r7, lr}
 80121ce:	b082      	sub	sp, #8
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80121da:	4618      	mov	r0, r3
 80121dc:	f7fc fd2a 	bl	800ec34 <USBD_LL_DevDisconnected>
}
 80121e0:	bf00      	nop
 80121e2:	3708      	adds	r7, #8
 80121e4:	46bd      	mov	sp, r7
 80121e6:	bd80      	pop	{r7, pc}

080121e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b082      	sub	sp, #8
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	781b      	ldrb	r3, [r3, #0]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d13e      	bne.n	8012276 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80121f8:	4a21      	ldr	r2, [pc, #132]	; (8012280 <USBD_LL_Init+0x98>)
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	4a1f      	ldr	r2, [pc, #124]	; (8012280 <USBD_LL_Init+0x98>)
 8012204:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012208:	4b1d      	ldr	r3, [pc, #116]	; (8012280 <USBD_LL_Init+0x98>)
 801220a:	4a1e      	ldr	r2, [pc, #120]	; (8012284 <USBD_LL_Init+0x9c>)
 801220c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801220e:	4b1c      	ldr	r3, [pc, #112]	; (8012280 <USBD_LL_Init+0x98>)
 8012210:	2209      	movs	r2, #9
 8012212:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8012214:	4b1a      	ldr	r3, [pc, #104]	; (8012280 <USBD_LL_Init+0x98>)
 8012216:	2202      	movs	r2, #2
 8012218:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801221a:	4b19      	ldr	r3, [pc, #100]	; (8012280 <USBD_LL_Init+0x98>)
 801221c:	2200      	movs	r2, #0
 801221e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012220:	4b17      	ldr	r3, [pc, #92]	; (8012280 <USBD_LL_Init+0x98>)
 8012222:	2202      	movs	r2, #2
 8012224:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8012226:	4b16      	ldr	r3, [pc, #88]	; (8012280 <USBD_LL_Init+0x98>)
 8012228:	2200      	movs	r2, #0
 801222a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801222c:	4b14      	ldr	r3, [pc, #80]	; (8012280 <USBD_LL_Init+0x98>)
 801222e:	2200      	movs	r2, #0
 8012230:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8012232:	4b13      	ldr	r3, [pc, #76]	; (8012280 <USBD_LL_Init+0x98>)
 8012234:	2200      	movs	r2, #0
 8012236:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8012238:	4b11      	ldr	r3, [pc, #68]	; (8012280 <USBD_LL_Init+0x98>)
 801223a:	2200      	movs	r2, #0
 801223c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801223e:	4b10      	ldr	r3, [pc, #64]	; (8012280 <USBD_LL_Init+0x98>)
 8012240:	2200      	movs	r2, #0
 8012242:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8012244:	4b0e      	ldr	r3, [pc, #56]	; (8012280 <USBD_LL_Init+0x98>)
 8012246:	2200      	movs	r2, #0
 8012248:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801224a:	480d      	ldr	r0, [pc, #52]	; (8012280 <USBD_LL_Init+0x98>)
 801224c:	f7f1 fd12 	bl	8003c74 <HAL_PCD_Init>
 8012250:	4603      	mov	r3, r0
 8012252:	2b00      	cmp	r3, #0
 8012254:	d001      	beq.n	801225a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8012256:	f7ee fdd1 	bl	8000dfc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801225a:	2180      	movs	r1, #128	; 0x80
 801225c:	4808      	ldr	r0, [pc, #32]	; (8012280 <USBD_LL_Init+0x98>)
 801225e:	f7f2 fed0 	bl	8005002 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8012262:	2240      	movs	r2, #64	; 0x40
 8012264:	2100      	movs	r1, #0
 8012266:	4806      	ldr	r0, [pc, #24]	; (8012280 <USBD_LL_Init+0x98>)
 8012268:	f7f2 fe84 	bl	8004f74 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801226c:	2280      	movs	r2, #128	; 0x80
 801226e:	2101      	movs	r1, #1
 8012270:	4803      	ldr	r0, [pc, #12]	; (8012280 <USBD_LL_Init+0x98>)
 8012272:	f7f2 fe7f 	bl	8004f74 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8012276:	2300      	movs	r3, #0
}
 8012278:	4618      	mov	r0, r3
 801227a:	3708      	adds	r7, #8
 801227c:	46bd      	mov	sp, r7
 801227e:	bd80      	pop	{r7, pc}
 8012280:	240013a8 	.word	0x240013a8
 8012284:	40080000 	.word	0x40080000

08012288 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012288:	b580      	push	{r7, lr}
 801228a:	b084      	sub	sp, #16
 801228c:	af00      	add	r7, sp, #0
 801228e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012290:	2300      	movs	r3, #0
 8012292:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012294:	2300      	movs	r3, #0
 8012296:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801229e:	4618      	mov	r0, r3
 80122a0:	f7f1 fe0c 	bl	8003ebc <HAL_PCD_Start>
 80122a4:	4603      	mov	r3, r0
 80122a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80122a8:	7bfb      	ldrb	r3, [r7, #15]
 80122aa:	4618      	mov	r0, r3
 80122ac:	f000 f94a 	bl	8012544 <USBD_Get_USB_Status>
 80122b0:	4603      	mov	r3, r0
 80122b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80122b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80122b6:	4618      	mov	r0, r3
 80122b8:	3710      	adds	r7, #16
 80122ba:	46bd      	mov	sp, r7
 80122bc:	bd80      	pop	{r7, pc}

080122be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80122be:	b580      	push	{r7, lr}
 80122c0:	b084      	sub	sp, #16
 80122c2:	af00      	add	r7, sp, #0
 80122c4:	6078      	str	r0, [r7, #4]
 80122c6:	4608      	mov	r0, r1
 80122c8:	4611      	mov	r1, r2
 80122ca:	461a      	mov	r2, r3
 80122cc:	4603      	mov	r3, r0
 80122ce:	70fb      	strb	r3, [r7, #3]
 80122d0:	460b      	mov	r3, r1
 80122d2:	70bb      	strb	r3, [r7, #2]
 80122d4:	4613      	mov	r3, r2
 80122d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80122d8:	2300      	movs	r3, #0
 80122da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80122dc:	2300      	movs	r3, #0
 80122de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80122e6:	78bb      	ldrb	r3, [r7, #2]
 80122e8:	883a      	ldrh	r2, [r7, #0]
 80122ea:	78f9      	ldrb	r1, [r7, #3]
 80122ec:	f7f2 fa1d 	bl	800472a <HAL_PCD_EP_Open>
 80122f0:	4603      	mov	r3, r0
 80122f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80122f4:	7bfb      	ldrb	r3, [r7, #15]
 80122f6:	4618      	mov	r0, r3
 80122f8:	f000 f924 	bl	8012544 <USBD_Get_USB_Status>
 80122fc:	4603      	mov	r3, r0
 80122fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012300:	7bbb      	ldrb	r3, [r7, #14]
}
 8012302:	4618      	mov	r0, r3
 8012304:	3710      	adds	r7, #16
 8012306:	46bd      	mov	sp, r7
 8012308:	bd80      	pop	{r7, pc}

0801230a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801230a:	b580      	push	{r7, lr}
 801230c:	b084      	sub	sp, #16
 801230e:	af00      	add	r7, sp, #0
 8012310:	6078      	str	r0, [r7, #4]
 8012312:	460b      	mov	r3, r1
 8012314:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012316:	2300      	movs	r3, #0
 8012318:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801231a:	2300      	movs	r3, #0
 801231c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012324:	78fa      	ldrb	r2, [r7, #3]
 8012326:	4611      	mov	r1, r2
 8012328:	4618      	mov	r0, r3
 801232a:	f7f2 fa66 	bl	80047fa <HAL_PCD_EP_Close>
 801232e:	4603      	mov	r3, r0
 8012330:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012332:	7bfb      	ldrb	r3, [r7, #15]
 8012334:	4618      	mov	r0, r3
 8012336:	f000 f905 	bl	8012544 <USBD_Get_USB_Status>
 801233a:	4603      	mov	r3, r0
 801233c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801233e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012340:	4618      	mov	r0, r3
 8012342:	3710      	adds	r7, #16
 8012344:	46bd      	mov	sp, r7
 8012346:	bd80      	pop	{r7, pc}

08012348 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012348:	b580      	push	{r7, lr}
 801234a:	b084      	sub	sp, #16
 801234c:	af00      	add	r7, sp, #0
 801234e:	6078      	str	r0, [r7, #4]
 8012350:	460b      	mov	r3, r1
 8012352:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012354:	2300      	movs	r3, #0
 8012356:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012358:	2300      	movs	r3, #0
 801235a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012362:	78fa      	ldrb	r2, [r7, #3]
 8012364:	4611      	mov	r1, r2
 8012366:	4618      	mov	r0, r3
 8012368:	f7f2 fbf8 	bl	8004b5c <HAL_PCD_EP_Flush>
 801236c:	4603      	mov	r3, r0
 801236e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012370:	7bfb      	ldrb	r3, [r7, #15]
 8012372:	4618      	mov	r0, r3
 8012374:	f000 f8e6 	bl	8012544 <USBD_Get_USB_Status>
 8012378:	4603      	mov	r3, r0
 801237a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801237c:	7bbb      	ldrb	r3, [r7, #14]
}
 801237e:	4618      	mov	r0, r3
 8012380:	3710      	adds	r7, #16
 8012382:	46bd      	mov	sp, r7
 8012384:	bd80      	pop	{r7, pc}

08012386 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012386:	b580      	push	{r7, lr}
 8012388:	b084      	sub	sp, #16
 801238a:	af00      	add	r7, sp, #0
 801238c:	6078      	str	r0, [r7, #4]
 801238e:	460b      	mov	r3, r1
 8012390:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012392:	2300      	movs	r3, #0
 8012394:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012396:	2300      	movs	r3, #0
 8012398:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80123a0:	78fa      	ldrb	r2, [r7, #3]
 80123a2:	4611      	mov	r1, r2
 80123a4:	4618      	mov	r0, r3
 80123a6:	f7f2 fb1f 	bl	80049e8 <HAL_PCD_EP_SetStall>
 80123aa:	4603      	mov	r3, r0
 80123ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80123ae:	7bfb      	ldrb	r3, [r7, #15]
 80123b0:	4618      	mov	r0, r3
 80123b2:	f000 f8c7 	bl	8012544 <USBD_Get_USB_Status>
 80123b6:	4603      	mov	r3, r0
 80123b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80123ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80123bc:	4618      	mov	r0, r3
 80123be:	3710      	adds	r7, #16
 80123c0:	46bd      	mov	sp, r7
 80123c2:	bd80      	pop	{r7, pc}

080123c4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80123c4:	b580      	push	{r7, lr}
 80123c6:	b084      	sub	sp, #16
 80123c8:	af00      	add	r7, sp, #0
 80123ca:	6078      	str	r0, [r7, #4]
 80123cc:	460b      	mov	r3, r1
 80123ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80123d0:	2300      	movs	r3, #0
 80123d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80123d4:	2300      	movs	r3, #0
 80123d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80123de:	78fa      	ldrb	r2, [r7, #3]
 80123e0:	4611      	mov	r1, r2
 80123e2:	4618      	mov	r0, r3
 80123e4:	f7f2 fb64 	bl	8004ab0 <HAL_PCD_EP_ClrStall>
 80123e8:	4603      	mov	r3, r0
 80123ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80123ec:	7bfb      	ldrb	r3, [r7, #15]
 80123ee:	4618      	mov	r0, r3
 80123f0:	f000 f8a8 	bl	8012544 <USBD_Get_USB_Status>
 80123f4:	4603      	mov	r3, r0
 80123f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80123f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80123fa:	4618      	mov	r0, r3
 80123fc:	3710      	adds	r7, #16
 80123fe:	46bd      	mov	sp, r7
 8012400:	bd80      	pop	{r7, pc}

08012402 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012402:	b480      	push	{r7}
 8012404:	b085      	sub	sp, #20
 8012406:	af00      	add	r7, sp, #0
 8012408:	6078      	str	r0, [r7, #4]
 801240a:	460b      	mov	r3, r1
 801240c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012414:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012416:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801241a:	2b00      	cmp	r3, #0
 801241c:	da0b      	bge.n	8012436 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801241e:	78fb      	ldrb	r3, [r7, #3]
 8012420:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012424:	68f9      	ldr	r1, [r7, #12]
 8012426:	4613      	mov	r3, r2
 8012428:	00db      	lsls	r3, r3, #3
 801242a:	1a9b      	subs	r3, r3, r2
 801242c:	009b      	lsls	r3, r3, #2
 801242e:	440b      	add	r3, r1
 8012430:	333e      	adds	r3, #62	; 0x3e
 8012432:	781b      	ldrb	r3, [r3, #0]
 8012434:	e00b      	b.n	801244e <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012436:	78fb      	ldrb	r3, [r7, #3]
 8012438:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801243c:	68f9      	ldr	r1, [r7, #12]
 801243e:	4613      	mov	r3, r2
 8012440:	00db      	lsls	r3, r3, #3
 8012442:	1a9b      	subs	r3, r3, r2
 8012444:	009b      	lsls	r3, r3, #2
 8012446:	440b      	add	r3, r1
 8012448:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801244c:	781b      	ldrb	r3, [r3, #0]
  }
}
 801244e:	4618      	mov	r0, r3
 8012450:	3714      	adds	r7, #20
 8012452:	46bd      	mov	sp, r7
 8012454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012458:	4770      	bx	lr

0801245a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801245a:	b580      	push	{r7, lr}
 801245c:	b084      	sub	sp, #16
 801245e:	af00      	add	r7, sp, #0
 8012460:	6078      	str	r0, [r7, #4]
 8012462:	460b      	mov	r3, r1
 8012464:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012466:	2300      	movs	r3, #0
 8012468:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801246a:	2300      	movs	r3, #0
 801246c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012474:	78fa      	ldrb	r2, [r7, #3]
 8012476:	4611      	mov	r1, r2
 8012478:	4618      	mov	r0, r3
 801247a:	f7f2 f931 	bl	80046e0 <HAL_PCD_SetAddress>
 801247e:	4603      	mov	r3, r0
 8012480:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012482:	7bfb      	ldrb	r3, [r7, #15]
 8012484:	4618      	mov	r0, r3
 8012486:	f000 f85d 	bl	8012544 <USBD_Get_USB_Status>
 801248a:	4603      	mov	r3, r0
 801248c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801248e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012490:	4618      	mov	r0, r3
 8012492:	3710      	adds	r7, #16
 8012494:	46bd      	mov	sp, r7
 8012496:	bd80      	pop	{r7, pc}

08012498 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012498:	b580      	push	{r7, lr}
 801249a:	b086      	sub	sp, #24
 801249c:	af00      	add	r7, sp, #0
 801249e:	60f8      	str	r0, [r7, #12]
 80124a0:	607a      	str	r2, [r7, #4]
 80124a2:	603b      	str	r3, [r7, #0]
 80124a4:	460b      	mov	r3, r1
 80124a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80124a8:	2300      	movs	r3, #0
 80124aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80124ac:	2300      	movs	r3, #0
 80124ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80124b6:	7af9      	ldrb	r1, [r7, #11]
 80124b8:	683b      	ldr	r3, [r7, #0]
 80124ba:	687a      	ldr	r2, [r7, #4]
 80124bc:	f7f2 fa4a 	bl	8004954 <HAL_PCD_EP_Transmit>
 80124c0:	4603      	mov	r3, r0
 80124c2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80124c4:	7dfb      	ldrb	r3, [r7, #23]
 80124c6:	4618      	mov	r0, r3
 80124c8:	f000 f83c 	bl	8012544 <USBD_Get_USB_Status>
 80124cc:	4603      	mov	r3, r0
 80124ce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80124d0:	7dbb      	ldrb	r3, [r7, #22]
}
 80124d2:	4618      	mov	r0, r3
 80124d4:	3718      	adds	r7, #24
 80124d6:	46bd      	mov	sp, r7
 80124d8:	bd80      	pop	{r7, pc}

080124da <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80124da:	b580      	push	{r7, lr}
 80124dc:	b086      	sub	sp, #24
 80124de:	af00      	add	r7, sp, #0
 80124e0:	60f8      	str	r0, [r7, #12]
 80124e2:	607a      	str	r2, [r7, #4]
 80124e4:	603b      	str	r3, [r7, #0]
 80124e6:	460b      	mov	r3, r1
 80124e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80124ea:	2300      	movs	r3, #0
 80124ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80124ee:	2300      	movs	r3, #0
 80124f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80124f8:	7af9      	ldrb	r1, [r7, #11]
 80124fa:	683b      	ldr	r3, [r7, #0]
 80124fc:	687a      	ldr	r2, [r7, #4]
 80124fe:	f7f2 f9c6 	bl	800488e <HAL_PCD_EP_Receive>
 8012502:	4603      	mov	r3, r0
 8012504:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012506:	7dfb      	ldrb	r3, [r7, #23]
 8012508:	4618      	mov	r0, r3
 801250a:	f000 f81b 	bl	8012544 <USBD_Get_USB_Status>
 801250e:	4603      	mov	r3, r0
 8012510:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012512:	7dbb      	ldrb	r3, [r7, #22]
}
 8012514:	4618      	mov	r0, r3
 8012516:	3718      	adds	r7, #24
 8012518:	46bd      	mov	sp, r7
 801251a:	bd80      	pop	{r7, pc}

0801251c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801251c:	b580      	push	{r7, lr}
 801251e:	b082      	sub	sp, #8
 8012520:	af00      	add	r7, sp, #0
 8012522:	6078      	str	r0, [r7, #4]
 8012524:	460b      	mov	r3, r1
 8012526:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801252e:	78fa      	ldrb	r2, [r7, #3]
 8012530:	4611      	mov	r1, r2
 8012532:	4618      	mov	r0, r3
 8012534:	f7f2 f9f6 	bl	8004924 <HAL_PCD_EP_GetRxCount>
 8012538:	4603      	mov	r3, r0
}
 801253a:	4618      	mov	r0, r3
 801253c:	3708      	adds	r7, #8
 801253e:	46bd      	mov	sp, r7
 8012540:	bd80      	pop	{r7, pc}
	...

08012544 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012544:	b480      	push	{r7}
 8012546:	b085      	sub	sp, #20
 8012548:	af00      	add	r7, sp, #0
 801254a:	4603      	mov	r3, r0
 801254c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801254e:	2300      	movs	r3, #0
 8012550:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012552:	79fb      	ldrb	r3, [r7, #7]
 8012554:	2b03      	cmp	r3, #3
 8012556:	d817      	bhi.n	8012588 <USBD_Get_USB_Status+0x44>
 8012558:	a201      	add	r2, pc, #4	; (adr r2, 8012560 <USBD_Get_USB_Status+0x1c>)
 801255a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801255e:	bf00      	nop
 8012560:	08012571 	.word	0x08012571
 8012564:	08012577 	.word	0x08012577
 8012568:	0801257d 	.word	0x0801257d
 801256c:	08012583 	.word	0x08012583
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012570:	2300      	movs	r3, #0
 8012572:	73fb      	strb	r3, [r7, #15]
    break;
 8012574:	e00b      	b.n	801258e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012576:	2303      	movs	r3, #3
 8012578:	73fb      	strb	r3, [r7, #15]
    break;
 801257a:	e008      	b.n	801258e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801257c:	2301      	movs	r3, #1
 801257e:	73fb      	strb	r3, [r7, #15]
    break;
 8012580:	e005      	b.n	801258e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012582:	2303      	movs	r3, #3
 8012584:	73fb      	strb	r3, [r7, #15]
    break;
 8012586:	e002      	b.n	801258e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012588:	2303      	movs	r3, #3
 801258a:	73fb      	strb	r3, [r7, #15]
    break;
 801258c:	bf00      	nop
  }
  return usb_status;
 801258e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012590:	4618      	mov	r0, r3
 8012592:	3714      	adds	r7, #20
 8012594:	46bd      	mov	sp, r7
 8012596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801259a:	4770      	bx	lr

0801259c <__errno>:
 801259c:	4b01      	ldr	r3, [pc, #4]	; (80125a4 <__errno+0x8>)
 801259e:	6818      	ldr	r0, [r3, #0]
 80125a0:	4770      	bx	lr
 80125a2:	bf00      	nop
 80125a4:	24000168 	.word	0x24000168

080125a8 <__libc_init_array>:
 80125a8:	b570      	push	{r4, r5, r6, lr}
 80125aa:	4e0d      	ldr	r6, [pc, #52]	; (80125e0 <__libc_init_array+0x38>)
 80125ac:	4c0d      	ldr	r4, [pc, #52]	; (80125e4 <__libc_init_array+0x3c>)
 80125ae:	1ba4      	subs	r4, r4, r6
 80125b0:	10a4      	asrs	r4, r4, #2
 80125b2:	2500      	movs	r5, #0
 80125b4:	42a5      	cmp	r5, r4
 80125b6:	d109      	bne.n	80125cc <__libc_init_array+0x24>
 80125b8:	4e0b      	ldr	r6, [pc, #44]	; (80125e8 <__libc_init_array+0x40>)
 80125ba:	4c0c      	ldr	r4, [pc, #48]	; (80125ec <__libc_init_array+0x44>)
 80125bc:	f000 f8f6 	bl	80127ac <_init>
 80125c0:	1ba4      	subs	r4, r4, r6
 80125c2:	10a4      	asrs	r4, r4, #2
 80125c4:	2500      	movs	r5, #0
 80125c6:	42a5      	cmp	r5, r4
 80125c8:	d105      	bne.n	80125d6 <__libc_init_array+0x2e>
 80125ca:	bd70      	pop	{r4, r5, r6, pc}
 80125cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80125d0:	4798      	blx	r3
 80125d2:	3501      	adds	r5, #1
 80125d4:	e7ee      	b.n	80125b4 <__libc_init_array+0xc>
 80125d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80125da:	4798      	blx	r3
 80125dc:	3501      	adds	r5, #1
 80125de:	e7f2      	b.n	80125c6 <__libc_init_array+0x1e>
 80125e0:	08012a30 	.word	0x08012a30
 80125e4:	08012a30 	.word	0x08012a30
 80125e8:	08012a30 	.word	0x08012a30
 80125ec:	08012a34 	.word	0x08012a34

080125f0 <malloc>:
 80125f0:	4b02      	ldr	r3, [pc, #8]	; (80125fc <malloc+0xc>)
 80125f2:	4601      	mov	r1, r0
 80125f4:	6818      	ldr	r0, [r3, #0]
 80125f6:	f000 b86d 	b.w	80126d4 <_malloc_r>
 80125fa:	bf00      	nop
 80125fc:	24000168 	.word	0x24000168

08012600 <free>:
 8012600:	4b02      	ldr	r3, [pc, #8]	; (801260c <free+0xc>)
 8012602:	4601      	mov	r1, r0
 8012604:	6818      	ldr	r0, [r3, #0]
 8012606:	f000 b817 	b.w	8012638 <_free_r>
 801260a:	bf00      	nop
 801260c:	24000168 	.word	0x24000168

08012610 <memcpy>:
 8012610:	b510      	push	{r4, lr}
 8012612:	1e43      	subs	r3, r0, #1
 8012614:	440a      	add	r2, r1
 8012616:	4291      	cmp	r1, r2
 8012618:	d100      	bne.n	801261c <memcpy+0xc>
 801261a:	bd10      	pop	{r4, pc}
 801261c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012620:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012624:	e7f7      	b.n	8012616 <memcpy+0x6>

08012626 <memset>:
 8012626:	4402      	add	r2, r0
 8012628:	4603      	mov	r3, r0
 801262a:	4293      	cmp	r3, r2
 801262c:	d100      	bne.n	8012630 <memset+0xa>
 801262e:	4770      	bx	lr
 8012630:	f803 1b01 	strb.w	r1, [r3], #1
 8012634:	e7f9      	b.n	801262a <memset+0x4>
	...

08012638 <_free_r>:
 8012638:	b538      	push	{r3, r4, r5, lr}
 801263a:	4605      	mov	r5, r0
 801263c:	2900      	cmp	r1, #0
 801263e:	d045      	beq.n	80126cc <_free_r+0x94>
 8012640:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012644:	1f0c      	subs	r4, r1, #4
 8012646:	2b00      	cmp	r3, #0
 8012648:	bfb8      	it	lt
 801264a:	18e4      	addlt	r4, r4, r3
 801264c:	f000 f8ac 	bl	80127a8 <__malloc_lock>
 8012650:	4a1f      	ldr	r2, [pc, #124]	; (80126d0 <_free_r+0x98>)
 8012652:	6813      	ldr	r3, [r2, #0]
 8012654:	4610      	mov	r0, r2
 8012656:	b933      	cbnz	r3, 8012666 <_free_r+0x2e>
 8012658:	6063      	str	r3, [r4, #4]
 801265a:	6014      	str	r4, [r2, #0]
 801265c:	4628      	mov	r0, r5
 801265e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012662:	f000 b8a2 	b.w	80127aa <__malloc_unlock>
 8012666:	42a3      	cmp	r3, r4
 8012668:	d90c      	bls.n	8012684 <_free_r+0x4c>
 801266a:	6821      	ldr	r1, [r4, #0]
 801266c:	1862      	adds	r2, r4, r1
 801266e:	4293      	cmp	r3, r2
 8012670:	bf04      	itt	eq
 8012672:	681a      	ldreq	r2, [r3, #0]
 8012674:	685b      	ldreq	r3, [r3, #4]
 8012676:	6063      	str	r3, [r4, #4]
 8012678:	bf04      	itt	eq
 801267a:	1852      	addeq	r2, r2, r1
 801267c:	6022      	streq	r2, [r4, #0]
 801267e:	6004      	str	r4, [r0, #0]
 8012680:	e7ec      	b.n	801265c <_free_r+0x24>
 8012682:	4613      	mov	r3, r2
 8012684:	685a      	ldr	r2, [r3, #4]
 8012686:	b10a      	cbz	r2, 801268c <_free_r+0x54>
 8012688:	42a2      	cmp	r2, r4
 801268a:	d9fa      	bls.n	8012682 <_free_r+0x4a>
 801268c:	6819      	ldr	r1, [r3, #0]
 801268e:	1858      	adds	r0, r3, r1
 8012690:	42a0      	cmp	r0, r4
 8012692:	d10b      	bne.n	80126ac <_free_r+0x74>
 8012694:	6820      	ldr	r0, [r4, #0]
 8012696:	4401      	add	r1, r0
 8012698:	1858      	adds	r0, r3, r1
 801269a:	4282      	cmp	r2, r0
 801269c:	6019      	str	r1, [r3, #0]
 801269e:	d1dd      	bne.n	801265c <_free_r+0x24>
 80126a0:	6810      	ldr	r0, [r2, #0]
 80126a2:	6852      	ldr	r2, [r2, #4]
 80126a4:	605a      	str	r2, [r3, #4]
 80126a6:	4401      	add	r1, r0
 80126a8:	6019      	str	r1, [r3, #0]
 80126aa:	e7d7      	b.n	801265c <_free_r+0x24>
 80126ac:	d902      	bls.n	80126b4 <_free_r+0x7c>
 80126ae:	230c      	movs	r3, #12
 80126b0:	602b      	str	r3, [r5, #0]
 80126b2:	e7d3      	b.n	801265c <_free_r+0x24>
 80126b4:	6820      	ldr	r0, [r4, #0]
 80126b6:	1821      	adds	r1, r4, r0
 80126b8:	428a      	cmp	r2, r1
 80126ba:	bf04      	itt	eq
 80126bc:	6811      	ldreq	r1, [r2, #0]
 80126be:	6852      	ldreq	r2, [r2, #4]
 80126c0:	6062      	str	r2, [r4, #4]
 80126c2:	bf04      	itt	eq
 80126c4:	1809      	addeq	r1, r1, r0
 80126c6:	6021      	streq	r1, [r4, #0]
 80126c8:	605c      	str	r4, [r3, #4]
 80126ca:	e7c7      	b.n	801265c <_free_r+0x24>
 80126cc:	bd38      	pop	{r3, r4, r5, pc}
 80126ce:	bf00      	nop
 80126d0:	24000228 	.word	0x24000228

080126d4 <_malloc_r>:
 80126d4:	b570      	push	{r4, r5, r6, lr}
 80126d6:	1ccd      	adds	r5, r1, #3
 80126d8:	f025 0503 	bic.w	r5, r5, #3
 80126dc:	3508      	adds	r5, #8
 80126de:	2d0c      	cmp	r5, #12
 80126e0:	bf38      	it	cc
 80126e2:	250c      	movcc	r5, #12
 80126e4:	2d00      	cmp	r5, #0
 80126e6:	4606      	mov	r6, r0
 80126e8:	db01      	blt.n	80126ee <_malloc_r+0x1a>
 80126ea:	42a9      	cmp	r1, r5
 80126ec:	d903      	bls.n	80126f6 <_malloc_r+0x22>
 80126ee:	230c      	movs	r3, #12
 80126f0:	6033      	str	r3, [r6, #0]
 80126f2:	2000      	movs	r0, #0
 80126f4:	bd70      	pop	{r4, r5, r6, pc}
 80126f6:	f000 f857 	bl	80127a8 <__malloc_lock>
 80126fa:	4a21      	ldr	r2, [pc, #132]	; (8012780 <_malloc_r+0xac>)
 80126fc:	6814      	ldr	r4, [r2, #0]
 80126fe:	4621      	mov	r1, r4
 8012700:	b991      	cbnz	r1, 8012728 <_malloc_r+0x54>
 8012702:	4c20      	ldr	r4, [pc, #128]	; (8012784 <_malloc_r+0xb0>)
 8012704:	6823      	ldr	r3, [r4, #0]
 8012706:	b91b      	cbnz	r3, 8012710 <_malloc_r+0x3c>
 8012708:	4630      	mov	r0, r6
 801270a:	f000 f83d 	bl	8012788 <_sbrk_r>
 801270e:	6020      	str	r0, [r4, #0]
 8012710:	4629      	mov	r1, r5
 8012712:	4630      	mov	r0, r6
 8012714:	f000 f838 	bl	8012788 <_sbrk_r>
 8012718:	1c43      	adds	r3, r0, #1
 801271a:	d124      	bne.n	8012766 <_malloc_r+0x92>
 801271c:	230c      	movs	r3, #12
 801271e:	6033      	str	r3, [r6, #0]
 8012720:	4630      	mov	r0, r6
 8012722:	f000 f842 	bl	80127aa <__malloc_unlock>
 8012726:	e7e4      	b.n	80126f2 <_malloc_r+0x1e>
 8012728:	680b      	ldr	r3, [r1, #0]
 801272a:	1b5b      	subs	r3, r3, r5
 801272c:	d418      	bmi.n	8012760 <_malloc_r+0x8c>
 801272e:	2b0b      	cmp	r3, #11
 8012730:	d90f      	bls.n	8012752 <_malloc_r+0x7e>
 8012732:	600b      	str	r3, [r1, #0]
 8012734:	50cd      	str	r5, [r1, r3]
 8012736:	18cc      	adds	r4, r1, r3
 8012738:	4630      	mov	r0, r6
 801273a:	f000 f836 	bl	80127aa <__malloc_unlock>
 801273e:	f104 000b 	add.w	r0, r4, #11
 8012742:	1d23      	adds	r3, r4, #4
 8012744:	f020 0007 	bic.w	r0, r0, #7
 8012748:	1ac3      	subs	r3, r0, r3
 801274a:	d0d3      	beq.n	80126f4 <_malloc_r+0x20>
 801274c:	425a      	negs	r2, r3
 801274e:	50e2      	str	r2, [r4, r3]
 8012750:	e7d0      	b.n	80126f4 <_malloc_r+0x20>
 8012752:	428c      	cmp	r4, r1
 8012754:	684b      	ldr	r3, [r1, #4]
 8012756:	bf16      	itet	ne
 8012758:	6063      	strne	r3, [r4, #4]
 801275a:	6013      	streq	r3, [r2, #0]
 801275c:	460c      	movne	r4, r1
 801275e:	e7eb      	b.n	8012738 <_malloc_r+0x64>
 8012760:	460c      	mov	r4, r1
 8012762:	6849      	ldr	r1, [r1, #4]
 8012764:	e7cc      	b.n	8012700 <_malloc_r+0x2c>
 8012766:	1cc4      	adds	r4, r0, #3
 8012768:	f024 0403 	bic.w	r4, r4, #3
 801276c:	42a0      	cmp	r0, r4
 801276e:	d005      	beq.n	801277c <_malloc_r+0xa8>
 8012770:	1a21      	subs	r1, r4, r0
 8012772:	4630      	mov	r0, r6
 8012774:	f000 f808 	bl	8012788 <_sbrk_r>
 8012778:	3001      	adds	r0, #1
 801277a:	d0cf      	beq.n	801271c <_malloc_r+0x48>
 801277c:	6025      	str	r5, [r4, #0]
 801277e:	e7db      	b.n	8012738 <_malloc_r+0x64>
 8012780:	24000228 	.word	0x24000228
 8012784:	2400022c 	.word	0x2400022c

08012788 <_sbrk_r>:
 8012788:	b538      	push	{r3, r4, r5, lr}
 801278a:	4c06      	ldr	r4, [pc, #24]	; (80127a4 <_sbrk_r+0x1c>)
 801278c:	2300      	movs	r3, #0
 801278e:	4605      	mov	r5, r0
 8012790:	4608      	mov	r0, r1
 8012792:	6023      	str	r3, [r4, #0]
 8012794:	f7ee fd8c 	bl	80012b0 <_sbrk>
 8012798:	1c43      	adds	r3, r0, #1
 801279a:	d102      	bne.n	80127a2 <_sbrk_r+0x1a>
 801279c:	6823      	ldr	r3, [r4, #0]
 801279e:	b103      	cbz	r3, 80127a2 <_sbrk_r+0x1a>
 80127a0:	602b      	str	r3, [r5, #0]
 80127a2:	bd38      	pop	{r3, r4, r5, pc}
 80127a4:	240017b0 	.word	0x240017b0

080127a8 <__malloc_lock>:
 80127a8:	4770      	bx	lr

080127aa <__malloc_unlock>:
 80127aa:	4770      	bx	lr

080127ac <_init>:
 80127ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127ae:	bf00      	nop
 80127b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80127b2:	bc08      	pop	{r3}
 80127b4:	469e      	mov	lr, r3
 80127b6:	4770      	bx	lr

080127b8 <_fini>:
 80127b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127ba:	bf00      	nop
 80127bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80127be:	bc08      	pop	{r3}
 80127c0:	469e      	mov	lr, r3
 80127c2:	4770      	bx	lr

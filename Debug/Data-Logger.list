
Data-Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a4ac  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000994  0801a74c  0801a74c  0002a74c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b0e0  0801b0e0  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801b0e0  0801b0e0  0002b0e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b0e8  0801b0e8  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b0e8  0801b0e8  0002b0e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b0ec  0801b0ec  0002b0ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  24000000  0801b0f0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022d0  240001e0  0801b2cc  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  240024b0  0801b2cc  000324b0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004a05d  00000000  00000000  0003020a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007b2c  00000000  00000000  0007a267  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002420  00000000  00000000  00081d98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002128  00000000  00000000  000841b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000430f0  00000000  00000000  000862e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002816e  00000000  00000000  000c93d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00178689  00000000  00000000  000f153e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00269bc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f80  00000000  00000000  00269c44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801a734 	.word	0x0801a734

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0801a734 	.word	0x0801a734

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <FDCAN_Config>:
#include <myprintf.h>

int FDCAN_Flag = 0;
int CAN_Flag = 0;

void FDCAN_Config(FDCAN_HandleTypeDef *hfdcan){
 8000690:	b580      	push	{r7, lr}
 8000692:	b08c      	sub	sp, #48	; 0x30
 8000694:	af02      	add	r7, sp, #8
 8000696:	6078      	str	r0, [r7, #4]
	FDCAN_FilterTypeDef sFilterConfig;

	  /* Configure Rx filter */
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterIndex = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80006a4:	2301      	movs	r3, #1
 80006a6:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterID1 = 0x321;
 80006a8:	f240 3321 	movw	r3, #801	; 0x321
 80006ac:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterID2 = 0x7FF;
 80006ae:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006b2:	61fb      	str	r3, [r7, #28]
	  if (HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig) == HAL_OK)
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	4619      	mov	r1, r3
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f006 fb96 	bl	8006dec <HAL_FDCAN_ConfigFilter>
	  }

	  /* Configure global filter:
	     Filter all remote frames with STD and EXT ID
	     Reject non matching frames with STD ID and EXT ID */
	  if (HAL_FDCAN_ConfigGlobalFilter(hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 80006c0:	2300      	movs	r3, #0
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2300      	movs	r3, #0
 80006c6:	2202      	movs	r2, #2
 80006c8:	2102      	movs	r1, #2
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f006 fc04 	bl	8006ed8 <HAL_FDCAN_ConfigGlobalFilter>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <FDCAN_Config+0x4a>
	  {
	    Error_Handler();
 80006d6:	f003 fa9d 	bl	8003c14 <Error_Handler>
	  }
	if (HAL_FDCAN_Start(hfdcan) != HAL_OK)
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f006 fc4c 	bl	8006f78 <HAL_FDCAN_Start>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <FDCAN_Config+0x5a>
	  {
	    Error_Handler();
 80006e6:	f003 fa95 	bl	8003c14 <Error_Handler>
	  }
	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80006ea:	2200      	movs	r2, #0
 80006ec:	2101      	movs	r1, #1
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f006 fdcc 	bl	800728c <HAL_FDCAN_ActivateNotification>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <FDCAN_Config+0x6e>
	  {
	    /* Notification Error */
	    Error_Handler();
 80006fa:	f003 fa8b 	bl	8003c14 <Error_Handler>
	  }
	HAL_FDCAN_EnableTxDelayCompensation(hfdcan);
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f006 fc17 	bl	8006f32 <HAL_FDCAN_EnableTxDelayCompensation>

}
 8000704:	bf00      	nop
 8000706:	3728      	adds	r7, #40	; 0x28
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan1, uint32_t RxFifo0ITs)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
	if (HAL_FDCAN_GetRxMessage(hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000716:	4b91      	ldr	r3, [pc, #580]	; (800095c <HAL_FDCAN_RxFifo0Callback+0x250>)
 8000718:	4a91      	ldr	r2, [pc, #580]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 800071a:	2140      	movs	r1, #64	; 0x40
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f006 fc57 	bl	8006fd0 <HAL_FDCAN_GetRxMessage>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	f040 8114 	bne.w	8000952 <HAL_FDCAN_RxFifo0Callback+0x246>
			      {
					uint32_t time = HAL_GetTick();
 800072a:	f003 ff5b 	bl	80045e4 <HAL_GetTick>
 800072e:	60f8      	str	r0, [r7, #12]
					HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000730:	2101      	movs	r1, #1
 8000732:	488c      	ldr	r0, [pc, #560]	; (8000964 <HAL_FDCAN_RxFifo0Callback+0x258>)
 8000734:	f007 fc95 	bl	8008062 <HAL_GPIO_TogglePin>
					printf("Packet Acquired!\n");
 8000738:	488b      	ldr	r0, [pc, #556]	; (8000968 <HAL_FDCAN_RxFifo0Callback+0x25c>)
 800073a:	f018 ffd9 	bl	80196f0 <puts>
					if(RxHeader.FDFormat == FDCAN_CLASSIC_CAN){
 800073e:	4b88      	ldr	r3, [pc, #544]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d17f      	bne.n	8000846 <HAL_FDCAN_RxFifo0Callback+0x13a>
						CanFrame.id = RxHeader.Identifier;
 8000746:	4b86      	ldr	r3, [pc, #536]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a88      	ldr	r2, [pc, #544]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 800074c:	6013      	str	r3, [r2, #0]
						switch(RxHeader.DataLength/65536){
 800074e:	4b84      	ldr	r3, [pc, #528]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000750:	68db      	ldr	r3, [r3, #12]
 8000752:	0c1b      	lsrs	r3, r3, #16
 8000754:	3b01      	subs	r3, #1
 8000756:	2b0e      	cmp	r3, #14
 8000758:	d85c      	bhi.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
 800075a:	a201      	add	r2, pc, #4	; (adr r2, 8000760 <HAL_FDCAN_RxFifo0Callback+0x54>)
 800075c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000760:	0800079d 	.word	0x0800079d
 8000764:	080007a5 	.word	0x080007a5
 8000768:	080007ad 	.word	0x080007ad
 800076c:	080007b5 	.word	0x080007b5
 8000770:	080007bd 	.word	0x080007bd
 8000774:	080007c5 	.word	0x080007c5
 8000778:	080007cd 	.word	0x080007cd
 800077c:	080007d5 	.word	0x080007d5
 8000780:	080007dd 	.word	0x080007dd
 8000784:	080007e5 	.word	0x080007e5
 8000788:	080007ed 	.word	0x080007ed
 800078c:	080007f5 	.word	0x080007f5
 8000790:	080007fd 	.word	0x080007fd
 8000794:	08000805 	.word	0x08000805
 8000798:	0800080d 	.word	0x0800080d
							case 1:
								CanFrame.length = 1;
 800079c:	4b73      	ldr	r3, [pc, #460]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 800079e:	2201      	movs	r2, #1
 80007a0:	715a      	strb	r2, [r3, #5]
								break;
 80007a2:	e037      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 2:
								CanFrame.length = 2;
 80007a4:	4b71      	ldr	r3, [pc, #452]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007a6:	2202      	movs	r2, #2
 80007a8:	715a      	strb	r2, [r3, #5]
								break;
 80007aa:	e033      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 3:
								CanFrame.length = 3;
 80007ac:	4b6f      	ldr	r3, [pc, #444]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007ae:	2203      	movs	r2, #3
 80007b0:	715a      	strb	r2, [r3, #5]
								break;
 80007b2:	e02f      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 4:
								CanFrame.length = 4;
 80007b4:	4b6d      	ldr	r3, [pc, #436]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007b6:	2204      	movs	r2, #4
 80007b8:	715a      	strb	r2, [r3, #5]
								break;
 80007ba:	e02b      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 5:
								CanFrame.length = 5;
 80007bc:	4b6b      	ldr	r3, [pc, #428]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007be:	2205      	movs	r2, #5
 80007c0:	715a      	strb	r2, [r3, #5]
								break;
 80007c2:	e027      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 6:
								CanFrame.length = 6;
 80007c4:	4b69      	ldr	r3, [pc, #420]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007c6:	2206      	movs	r2, #6
 80007c8:	715a      	strb	r2, [r3, #5]
								break;
 80007ca:	e023      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 7:
								CanFrame.length = 7;
 80007cc:	4b67      	ldr	r3, [pc, #412]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007ce:	2207      	movs	r2, #7
 80007d0:	715a      	strb	r2, [r3, #5]
								break;
 80007d2:	e01f      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 8:
								CanFrame.length = 8;
 80007d4:	4b65      	ldr	r3, [pc, #404]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007d6:	2208      	movs	r2, #8
 80007d8:	715a      	strb	r2, [r3, #5]
								break;
 80007da:	e01b      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 9:
								CanFrame.length = 12;
 80007dc:	4b63      	ldr	r3, [pc, #396]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007de:	220c      	movs	r2, #12
 80007e0:	715a      	strb	r2, [r3, #5]
								break;
 80007e2:	e017      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 10:
								CanFrame.length = 16;
 80007e4:	4b61      	ldr	r3, [pc, #388]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007e6:	2210      	movs	r2, #16
 80007e8:	715a      	strb	r2, [r3, #5]
								break;
 80007ea:	e013      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 11:
								CanFrame.length = 20;
 80007ec:	4b5f      	ldr	r3, [pc, #380]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007ee:	2214      	movs	r2, #20
 80007f0:	715a      	strb	r2, [r3, #5]
								break;
 80007f2:	e00f      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 12:
								CanFrame.length = 24;
 80007f4:	4b5d      	ldr	r3, [pc, #372]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007f6:	2218      	movs	r2, #24
 80007f8:	715a      	strb	r2, [r3, #5]
								break;
 80007fa:	e00b      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 13:
								CanFrame.length = 32;
 80007fc:	4b5b      	ldr	r3, [pc, #364]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007fe:	2220      	movs	r2, #32
 8000800:	715a      	strb	r2, [r3, #5]
								break;
 8000802:	e007      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 14:
								CanFrame.length = 48;
 8000804:	4b59      	ldr	r3, [pc, #356]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000806:	2230      	movs	r2, #48	; 0x30
 8000808:	715a      	strb	r2, [r3, #5]
								break;
 800080a:	e003      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 15:
								CanFrame.length = 64;
 800080c:	4b57      	ldr	r3, [pc, #348]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 800080e:	2240      	movs	r2, #64	; 0x40
 8000810:	715a      	strb	r2, [r3, #5]
								break;
 8000812:	bf00      	nop
						}
						CanFrame.time = time;
 8000814:	4a55      	ldr	r2, [pc, #340]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	6093      	str	r3, [r2, #8]
						CAN_Flag = 1;
 800081a:	4b55      	ldr	r3, [pc, #340]	; (8000970 <HAL_FDCAN_RxFifo0Callback+0x264>)
 800081c:	2201      	movs	r2, #1
 800081e:	601a      	str	r2, [r3, #0]
						memcpy(CanFrame.data.bytes, RxData, CanFrame.length);
 8000820:	4b52      	ldr	r3, [pc, #328]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000822:	795b      	ldrb	r3, [r3, #5]
 8000824:	461a      	mov	r2, r3
 8000826:	494d      	ldr	r1, [pc, #308]	; (800095c <HAL_FDCAN_RxFifo0Callback+0x250>)
 8000828:	4852      	ldr	r0, [pc, #328]	; (8000974 <HAL_FDCAN_RxFifo0Callback+0x268>)
 800082a:	f018 fe31 	bl	8019490 <memcpy>
						if(RxHeader.IdType == FDCAN_EXTENDED_ID){
 800082e:	4b4c      	ldr	r3, [pc, #304]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000836:	d103      	bne.n	8000840 <HAL_FDCAN_RxFifo0Callback+0x134>
							CanFrame.extended = 1;
 8000838:	4b4c      	ldr	r3, [pc, #304]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 800083a:	2201      	movs	r2, #1
 800083c:	711a      	strb	r2, [r3, #4]
 800083e:	e002      	b.n	8000846 <HAL_FDCAN_RxFifo0Callback+0x13a>
						}
						else{
							CanFrame.extended = 0;
 8000840:	4b4a      	ldr	r3, [pc, #296]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000842:	2200      	movs	r2, #0
 8000844:	711a      	strb	r2, [r3, #4]
						}
					}
					if(RxHeader.FDFormat == FDCAN_FD_CAN){
 8000846:	4b46      	ldr	r3, [pc, #280]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800084e:	f040 8080 	bne.w	8000952 <HAL_FDCAN_RxFifo0Callback+0x246>
						CanFDFrame.id = RxHeader.Identifier;
 8000852:	4b43      	ldr	r3, [pc, #268]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a48      	ldr	r2, [pc, #288]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000858:	6013      	str	r3, [r2, #0]

						switch(RxHeader.DataLength/65536){
 800085a:	4b41      	ldr	r3, [pc, #260]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 800085c:	68db      	ldr	r3, [r3, #12]
 800085e:	0c1b      	lsrs	r3, r3, #16
 8000860:	3b01      	subs	r3, #1
 8000862:	2b0e      	cmp	r3, #14
 8000864:	d85c      	bhi.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
 8000866:	a201      	add	r2, pc, #4	; (adr r2, 800086c <HAL_FDCAN_RxFifo0Callback+0x160>)
 8000868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800086c:	080008a9 	.word	0x080008a9
 8000870:	080008b1 	.word	0x080008b1
 8000874:	080008b9 	.word	0x080008b9
 8000878:	080008c1 	.word	0x080008c1
 800087c:	080008c9 	.word	0x080008c9
 8000880:	080008d1 	.word	0x080008d1
 8000884:	080008d9 	.word	0x080008d9
 8000888:	080008e1 	.word	0x080008e1
 800088c:	080008e9 	.word	0x080008e9
 8000890:	080008f1 	.word	0x080008f1
 8000894:	080008f9 	.word	0x080008f9
 8000898:	08000901 	.word	0x08000901
 800089c:	08000909 	.word	0x08000909
 80008a0:	08000911 	.word	0x08000911
 80008a4:	08000919 	.word	0x08000919
							case 1:
								CanFDFrame.length = 1;
 80008a8:	4b33      	ldr	r3, [pc, #204]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	609a      	str	r2, [r3, #8]
								break;
 80008ae:	e037      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 2:
								CanFDFrame.length = 2;
 80008b0:	4b31      	ldr	r3, [pc, #196]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008b2:	2202      	movs	r2, #2
 80008b4:	609a      	str	r2, [r3, #8]
								break;
 80008b6:	e033      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 3:
								CanFDFrame.length = 3;
 80008b8:	4b2f      	ldr	r3, [pc, #188]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008ba:	2203      	movs	r2, #3
 80008bc:	609a      	str	r2, [r3, #8]
								break;
 80008be:	e02f      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 4:
								CanFDFrame.length = 4;
 80008c0:	4b2d      	ldr	r3, [pc, #180]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008c2:	2204      	movs	r2, #4
 80008c4:	609a      	str	r2, [r3, #8]
								break;
 80008c6:	e02b      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 5:
								CanFDFrame.length = 5;
 80008c8:	4b2b      	ldr	r3, [pc, #172]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008ca:	2205      	movs	r2, #5
 80008cc:	609a      	str	r2, [r3, #8]
								break;
 80008ce:	e027      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 6:
								CanFDFrame.length = 6;
 80008d0:	4b29      	ldr	r3, [pc, #164]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008d2:	2206      	movs	r2, #6
 80008d4:	609a      	str	r2, [r3, #8]
								break;
 80008d6:	e023      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 7:
								CanFDFrame.length = 7;
 80008d8:	4b27      	ldr	r3, [pc, #156]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008da:	2207      	movs	r2, #7
 80008dc:	609a      	str	r2, [r3, #8]
								break;
 80008de:	e01f      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 8:
								CanFDFrame.length = 8;
 80008e0:	4b25      	ldr	r3, [pc, #148]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008e2:	2208      	movs	r2, #8
 80008e4:	609a      	str	r2, [r3, #8]
								break;
 80008e6:	e01b      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 9:
								CanFDFrame.length = 12;
 80008e8:	4b23      	ldr	r3, [pc, #140]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008ea:	220c      	movs	r2, #12
 80008ec:	609a      	str	r2, [r3, #8]
								break;
 80008ee:	e017      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 10:
								CanFDFrame.length = 16;
 80008f0:	4b21      	ldr	r3, [pc, #132]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008f2:	2210      	movs	r2, #16
 80008f4:	609a      	str	r2, [r3, #8]
								break;
 80008f6:	e013      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 11:
								CanFDFrame.length = 20;
 80008f8:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008fa:	2214      	movs	r2, #20
 80008fc:	609a      	str	r2, [r3, #8]
								break;
 80008fe:	e00f      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 12:
								CanFDFrame.length = 24;
 8000900:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000902:	2218      	movs	r2, #24
 8000904:	609a      	str	r2, [r3, #8]
								break;
 8000906:	e00b      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 13:
								CanFDFrame.length = 32;
 8000908:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 800090a:	2220      	movs	r2, #32
 800090c:	609a      	str	r2, [r3, #8]
								break;
 800090e:	e007      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 14:
								CanFDFrame.length = 48;
 8000910:	4b19      	ldr	r3, [pc, #100]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000912:	2230      	movs	r2, #48	; 0x30
 8000914:	609a      	str	r2, [r3, #8]
								break;
 8000916:	e003      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 15:
								CanFDFrame.length = 64;
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 800091a:	2240      	movs	r2, #64	; 0x40
 800091c:	609a      	str	r2, [r3, #8]
								break;
 800091e:	bf00      	nop
						}

						CanFDFrame.time = time;
 8000920:	4a15      	ldr	r2, [pc, #84]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	60d3      	str	r3, [r2, #12]
						FDCAN_Flag = 1;
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <HAL_FDCAN_RxFifo0Callback+0x270>)
 8000928:	2201      	movs	r2, #1
 800092a:	601a      	str	r2, [r3, #0]
						memcpy(CanFDFrame.data.bytes, RxData, CanFDFrame.length);
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	461a      	mov	r2, r3
 8000932:	490a      	ldr	r1, [pc, #40]	; (800095c <HAL_FDCAN_RxFifo0Callback+0x250>)
 8000934:	4812      	ldr	r0, [pc, #72]	; (8000980 <HAL_FDCAN_RxFifo0Callback+0x274>)
 8000936:	f018 fdab 	bl	8019490 <memcpy>
						if(RxHeader.IdType == FDCAN_EXTENDED_ID){
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000942:	d103      	bne.n	800094c <HAL_FDCAN_RxFifo0Callback+0x240>
							CanFDFrame.extended = 1;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000946:	2201      	movs	r2, #1
 8000948:	711a      	strb	r2, [r3, #4]
				  			  printf("%c",RxData[i]);
				  	  }
				  	  printf("\n");
				  	*/
			      }
}
 800094a:	e002      	b.n	8000952 <HAL_FDCAN_RxFifo0Callback+0x246>
							CanFDFrame.extended = 0;
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 800094e:	2200      	movs	r2, #0
 8000950:	711a      	strb	r2, [r3, #4]
}
 8000952:	bf00      	nop
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	24001000 	.word	0x24001000
 8000960:	24001090 	.word	0x24001090
 8000964:	58020400 	.word	0x58020400
 8000968:	0801a74c 	.word	0x0801a74c
 800096c:	240010b8 	.word	0x240010b8
 8000970:	24000200 	.word	0x24000200
 8000974:	240010c8 	.word	0x240010c8
 8000978:	24001040 	.word	0x24001040
 800097c:	240001fc 	.word	0x240001fc
 8000980:	24001050 	.word	0x24001050

08000984 <gps_msg_config>:
#include "main.h"
#include <myprintf.h>
#include <stdbool.h>
#include <buffer.h>

int gps_msg_config(UART_HandleTypeDef *huart, const char *nema, int rus1){
 8000984:	b580      	push	{r7, lr}
 8000986:	b09e      	sub	sp, #120	; 0x78
 8000988:	af02      	add	r7, sp, #8
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
	if (strlen(nema) != 3) return 1;
 8000990:	68b8      	ldr	r0, [r7, #8]
 8000992:	f7ff fca5 	bl	80002e0 <strlen>
 8000996:	4603      	mov	r3, r0
 8000998:	2b03      	cmp	r3, #3
 800099a:	d001      	beq.n	80009a0 <gps_msg_config+0x1c>
 800099c:	2301      	movs	r3, #1
 800099e:	e052      	b.n	8000a46 <gps_msg_config+0xc2>


	char msg[32];
	snprintf(msg, sizeof(msg)-1,"PUBX,40,%s,0,%i,0,0,0,0", nema, rus1);
 80009a0:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	4a29      	ldr	r2, [pc, #164]	; (8000a50 <gps_msg_config+0xcc>)
 80009ac:	211f      	movs	r1, #31
 80009ae:	f018 feb7 	bl	8019720 <sniprintf>

	int checksum_int = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 80009b6:	2300      	movs	r3, #0
 80009b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80009ba:	e00b      	b.n	80009d4 <gps_msg_config+0x50>
		checksum_int ^= (unsigned char)msg[i];
 80009bc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80009c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009c2:	4413      	add	r3, r2
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	461a      	mov	r2, r3
 80009c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009ca:	4053      	eors	r3, r2
 80009cc:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 80009ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009d0:	3301      	adds	r3, #1
 80009d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80009d4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80009d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009da:	4413      	add	r3, r2
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d002      	beq.n	80009e8 <gps_msg_config+0x64>
 80009e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009e4:	2b1f      	cmp	r3, #31
 80009e6:	dde9      	ble.n	80009bc <gps_msg_config+0x38>

	char checksum[8];
	snprintf(checksum, sizeof(checksum)-1, "*%.2X", checksum_int);
 80009e8:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80009ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009ee:	4a19      	ldr	r2, [pc, #100]	; (8000a54 <gps_msg_config+0xd0>)
 80009f0:	2107      	movs	r1, #7
 80009f2:	f018 fe95 	bl	8019720 <sniprintf>

	char messagetosend[42];
	snprintf(messagetosend, sizeof(messagetosend)-1, "$%s%s\r\n", msg, checksum);
 80009f6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80009fa:	f107 0014 	add.w	r0, r7, #20
 80009fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	4613      	mov	r3, r2
 8000a06:	4a14      	ldr	r2, [pc, #80]	; (8000a58 <gps_msg_config+0xd4>)
 8000a08:	2129      	movs	r1, #41	; 0x29
 8000a0a:	f018 fe89 	bl	8019720 <sniprintf>
	printf("\n\rSending: ");
 8000a0e:	4813      	ldr	r0, [pc, #76]	; (8000a5c <gps_msg_config+0xd8>)
 8000a10:	f018 fdfa 	bl	8019608 <iprintf>
	printf("%s", messagetosend);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4811      	ldr	r0, [pc, #68]	; (8000a60 <gps_msg_config+0xdc>)
 8000a1c:	f018 fdf4 	bl	8019608 <iprintf>
	if (HAL_UART_Transmit(huart, messagetosend, strlen(messagetosend), 100) != HAL_OK){
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fc5b 	bl	80002e0 <strlen>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	f107 0114 	add.w	r1, r7, #20
 8000a32:	2364      	movs	r3, #100	; 0x64
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	f00f f8bc 	bl	800fbb2 <HAL_UART_Transmit>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <gps_msg_config+0xc0>
		Error_Handler();
 8000a40:	f003 f8e8 	bl	8003c14 <Error_Handler>
	}
	return 0;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3770      	adds	r7, #112	; 0x70
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	0801a760 	.word	0x0801a760
 8000a54:	0801a778 	.word	0x0801a778
 8000a58:	0801a780 	.word	0x0801a780
 8000a5c:	0801a788 	.word	0x0801a788
 8000a60:	0801a794 	.word	0x0801a794

08000a64 <gps_rate_config>:

int gps_rate_config(UART_HandleTypeDef *huart, uint16_t measRate, uint16_t navRate, uint16_t timeRef){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	; 0x28
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	4608      	mov	r0, r1
 8000a6e:	4611      	mov	r1, r2
 8000a70:	461a      	mov	r2, r3
 8000a72:	4603      	mov	r3, r0
 8000a74:	817b      	strh	r3, [r7, #10]
 8000a76:	460b      	mov	r3, r1
 8000a78:	813b      	strh	r3, [r7, #8]
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	80fb      	strh	r3, [r7, #6]
		uint16_t length = 6;
 8000a7e:	2306      	movs	r3, #6
 8000a80:	83fb      	strh	r3, [r7, #30]
		uint8_t msg[14];
		msg[0] = 0xb5;
 8000a82:	23b5      	movs	r3, #181	; 0xb5
 8000a84:	743b      	strb	r3, [r7, #16]
		msg[1] = 0x62;
 8000a86:	2362      	movs	r3, #98	; 0x62
 8000a88:	747b      	strb	r3, [r7, #17]
		msg[2] = 0x06;
 8000a8a:	2306      	movs	r3, #6
 8000a8c:	74bb      	strb	r3, [r7, #18]
		msg[3] = 0x08;
 8000a8e:	2308      	movs	r3, #8
 8000a90:	74fb      	strb	r3, [r7, #19]
		msg[4] = length;
 8000a92:	8bfb      	ldrh	r3, [r7, #30]
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	753b      	strb	r3, [r7, #20]
		msg[5] = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	757b      	strb	r3, [r7, #21]
		msg[6] = measRate;
 8000a9c:	897b      	ldrh	r3, [r7, #10]
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	75bb      	strb	r3, [r7, #22]
		msg[7] = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	75fb      	strb	r3, [r7, #23]
		msg[8] = navRate;
 8000aa6:	893b      	ldrh	r3, [r7, #8]
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	763b      	strb	r3, [r7, #24]
		msg[9] = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	767b      	strb	r3, [r7, #25]
		msg[10] = timeRef;
 8000ab0:	88fb      	ldrh	r3, [r7, #6]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	76bb      	strb	r3, [r7, #26]
		msg[11] = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	76fb      	strb	r3, [r7, #27]

		uint8_t CK_A = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t CK_B = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	623b      	str	r3, [r7, #32]
 8000aca:	e013      	b.n	8000af4 <gps_rate_config+0x90>
	        CK_A = CK_A + msg[i];
 8000acc:	f107 0210 	add.w	r2, r7, #16
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	781a      	ldrb	r2, [r3, #0]
 8000ad6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ada:	4413      	add	r3, r2
 8000adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	        CK_A &= 0xFF;
	        CK_B = CK_B + CK_A;
 8000ae0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ae8:	4413      	add	r3, r2
 8000aea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 8000aee:	6a3b      	ldr	r3, [r7, #32]
 8000af0:	3301      	adds	r3, #1
 8000af2:	623b      	str	r3, [r7, #32]
 8000af4:	6a3b      	ldr	r3, [r7, #32]
 8000af6:	2b0b      	cmp	r3, #11
 8000af8:	dde8      	ble.n	8000acc <gps_rate_config+0x68>
	        CK_B &= 0xFF;
	    }
		msg[12] = CK_A;
 8000afa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000afe:	773b      	strb	r3, [r7, #28]
		msg[13] = CK_B;
 8000b00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b04:	777b      	strb	r3, [r7, #29]

		if (HAL_UART_Transmit(huart, msg, sizeof(msg), 100) != HAL_OK){
 8000b06:	f107 0110 	add.w	r1, r7, #16
 8000b0a:	2364      	movs	r3, #100	; 0x64
 8000b0c:	220e      	movs	r2, #14
 8000b0e:	68f8      	ldr	r0, [r7, #12]
 8000b10:	f00f f84f 	bl	800fbb2 <HAL_UART_Transmit>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d003      	beq.n	8000b22 <gps_rate_config+0xbe>
				Error_Handler();
 8000b1a:	f003 f87b 	bl	8003c14 <Error_Handler>
				return 1;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e000      	b.n	8000b24 <gps_rate_config+0xc0>
			}
		return 0;
 8000b22:	2300      	movs	r3, #0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3728      	adds	r7, #40	; 0x28
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <HAL_UART_RxHalfCpltCallback>:
}

int GPS_flag = 0;

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	  }
  }*/
  //for(int i=0; i<BUFFLENGTH; i++){
  	  		  //printf("%c", rxBuf[i]);
  	  //}
  GPS_flag = 1;
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <HAL_UART_RxHalfCpltCallback+0x1c>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	601a      	str	r2, [r3, #0]
  //WriteToBuff(rxBuf+70, BUFFLENGTH/2);
  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);*/
  //printf("GPS Recieved\n");

}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	24000204 	.word	0x24000204

08000b4c <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000b58:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <NRF24_DelayMicroSeconds+0x38>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <NRF24_DelayMicroSeconds+0x3c>)
 8000b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b62:	0c9a      	lsrs	r2, r3, #18
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	fb02 f303 	mul.w	r3, r2, r3
 8000b6a:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8000b6c:	bf00      	nop
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	1e5a      	subs	r2, r3, #1
 8000b72:	60fa      	str	r2, [r7, #12]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d1fa      	bne.n	8000b6e <NRF24_DelayMicroSeconds+0x22>
}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	24000010 	.word	0x24000010
 8000b88:	165e9f81 	.word	0x165e9f81

08000b8c <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d008      	beq.n	8000bac <NRF24_csn+0x20>
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <NRF24_csn+0x38>)
 8000b9c:	6818      	ldr	r0, [r3, #0]
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <NRF24_csn+0x3c>)
 8000ba0:	881b      	ldrh	r3, [r3, #0]
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f007 fa43 	bl	8008030 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000baa:	e007      	b.n	8000bbc <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000bac:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <NRF24_csn+0x38>)
 8000bae:	6818      	ldr	r0, [r3, #0]
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <NRF24_csn+0x3c>)
 8000bb2:	881b      	ldrh	r3, [r3, #0]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	f007 fa3a 	bl	8008030 <HAL_GPIO_WritePin>
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	24000210 	.word	0x24000210
 8000bc8:	24000214 	.word	0x24000214

08000bcc <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d008      	beq.n	8000bec <NRF24_ce+0x20>
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <NRF24_ce+0x38>)
 8000bdc:	6818      	ldr	r0, [r3, #0]
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <NRF24_ce+0x3c>)
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	2201      	movs	r2, #1
 8000be4:	4619      	mov	r1, r3
 8000be6:	f007 fa23 	bl	8008030 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000bea:	e007      	b.n	8000bfc <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <NRF24_ce+0x38>)
 8000bee:	6818      	ldr	r0, [r3, #0]
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <NRF24_ce+0x3c>)
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	f007 fa1a 	bl	8008030 <HAL_GPIO_WritePin>
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	24000210 	.word	0x24000210
 8000c08:	24000216 	.word	0x24000216

08000c0c <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000c16:	2000      	movs	r0, #0
 8000c18:	f7ff ffb8 	bl	8000b8c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	f003 031f 	and.w	r3, r3, #31
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000c26:	f107 010c 	add.w	r1, r7, #12
 8000c2a:	2364      	movs	r3, #100	; 0x64
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	480a      	ldr	r0, [pc, #40]	; (8000c58 <NRF24_read_register+0x4c>)
 8000c30:	f00d ffb6 	bl	800eba0 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	1c59      	adds	r1, r3, #1
 8000c3a:	2364      	movs	r3, #100	; 0x64
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	4806      	ldr	r0, [pc, #24]	; (8000c58 <NRF24_read_register+0x4c>)
 8000c40:	f00e f9a0 	bl	800ef84 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000c44:	7b7b      	ldrb	r3, [r7, #13]
 8000c46:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000c48:	2001      	movs	r0, #1
 8000c4a:	f7ff ff9f 	bl	8000b8c <NRF24_csn>
	return retData;
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3710      	adds	r7, #16
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	24000218 	.word	0x24000218

08000c5c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	6039      	str	r1, [r7, #0]
 8000c66:	71fb      	strb	r3, [r7, #7]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f7ff ff8d 	bl	8000b8c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f003 031f 	and.w	r3, r3, #31
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000c7c:	f107 010c 	add.w	r1, r7, #12
 8000c80:	2364      	movs	r3, #100	; 0x64
 8000c82:	2201      	movs	r2, #1
 8000c84:	4808      	ldr	r0, [pc, #32]	; (8000ca8 <NRF24_read_registerN+0x4c>)
 8000c86:	f00d ff8b 	bl	800eba0 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000c8a:	79bb      	ldrb	r3, [r7, #6]
 8000c8c:	b29a      	uxth	r2, r3
 8000c8e:	2364      	movs	r3, #100	; 0x64
 8000c90:	6839      	ldr	r1, [r7, #0]
 8000c92:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <NRF24_read_registerN+0x4c>)
 8000c94:	f00e f976 	bl	800ef84 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f7ff ff77 	bl	8000b8c <NRF24_csn>
}
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	24000218 	.word	0x24000218

08000cac <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	460a      	mov	r2, r1
 8000cb6:	71fb      	strb	r3, [r7, #7]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f7ff ff65 	bl	8000b8c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	f043 0320 	orr.w	r3, r3, #32
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000ccc:	79bb      	ldrb	r3, [r7, #6]
 8000cce:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000cd0:	f107 010c 	add.w	r1, r7, #12
 8000cd4:	2364      	movs	r3, #100	; 0x64
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	4804      	ldr	r0, [pc, #16]	; (8000cec <NRF24_write_register+0x40>)
 8000cda:	f00d ff61 	bl	800eba0 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f7ff ff54 	bl	8000b8c <NRF24_csn>
}
 8000ce4:	bf00      	nop
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	24000218 	.word	0x24000218

08000cf0 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	6039      	str	r1, [r7, #0]
 8000cfa:	71fb      	strb	r3, [r7, #7]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000d00:	2000      	movs	r0, #0
 8000d02:	f7ff ff43 	bl	8000b8c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	f043 0320 	orr.w	r3, r3, #32
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000d10:	f107 010c 	add.w	r1, r7, #12
 8000d14:	2364      	movs	r3, #100	; 0x64
 8000d16:	2201      	movs	r2, #1
 8000d18:	4808      	ldr	r0, [pc, #32]	; (8000d3c <NRF24_write_registerN+0x4c>)
 8000d1a:	f00d ff41 	bl	800eba0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000d1e:	79bb      	ldrb	r3, [r7, #6]
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	2364      	movs	r3, #100	; 0x64
 8000d24:	6839      	ldr	r1, [r7, #0]
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <NRF24_write_registerN+0x4c>)
 8000d28:	f00d ff3a 	bl	800eba0 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	f7ff ff2d 	bl	8000b8c <NRF24_csn>
}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	24000218 	.word	0x24000218

08000d40 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	460b      	mov	r3, r1
 8000d4a:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f7ff ff1d 	bl	8000b8c <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8000d52:	23a0      	movs	r3, #160	; 0xa0
 8000d54:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8000d56:	f107 010f 	add.w	r1, r7, #15
 8000d5a:	2364      	movs	r3, #100	; 0x64
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	4808      	ldr	r0, [pc, #32]	; (8000d80 <NRF24_write_payload+0x40>)
 8000d60:	f00d ff1e 	bl	800eba0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8000d64:	78fb      	ldrb	r3, [r7, #3]
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	2364      	movs	r3, #100	; 0x64
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	4804      	ldr	r0, [pc, #16]	; (8000d80 <NRF24_write_payload+0x40>)
 8000d6e:	f00d ff17 	bl	800eba0 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000d72:	2001      	movs	r0, #1
 8000d74:	f7ff ff0a 	bl	8000b8c <NRF24_csn>
}
 8000d78:	bf00      	nop
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	24000218 	.word	0x24000218

08000d84 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000d88:	21ff      	movs	r1, #255	; 0xff
 8000d8a:	20e1      	movs	r0, #225	; 0xe1
 8000d8c:	f7ff ff8e 	bl	8000cac <NRF24_write_register>
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000d98:	21ff      	movs	r1, #255	; 0xff
 8000d9a:	20e2      	movs	r0, #226	; 0xe2
 8000d9c:	f7ff ff86 	bl	8000cac <NRF24_write_register>
}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000daa:	2007      	movs	r0, #7
 8000dac:	f7ff ff2e 	bl	8000c0c <NRF24_read_register>
 8000db0:	4603      	mov	r3, r0
 8000db2:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000db4:	79fb      	ldrb	r3, [r7, #7]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b084      	sub	sp, #16
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	61fb      	str	r3, [r7, #28]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	807b      	strh	r3, [r7, #2]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000dd4:	4b66      	ldr	r3, [pc, #408]	; (8000f70 <NRF24_begin+0x1b0>)
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	2288      	movs	r2, #136	; 0x88
 8000dde:	4619      	mov	r1, r3
 8000de0:	f018 fb56 	bl	8019490 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000de4:	4a63      	ldr	r2, [pc, #396]	; (8000f74 <NRF24_begin+0x1b4>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000dea:	4a63      	ldr	r2, [pc, #396]	; (8000f78 <NRF24_begin+0x1b8>)
 8000dec:	887b      	ldrh	r3, [r7, #2]
 8000dee:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000df0:	4a62      	ldr	r2, [pc, #392]	; (8000f7c <NRF24_begin+0x1bc>)
 8000df2:	883b      	ldrh	r3, [r7, #0]
 8000df4:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8000df6:	2001      	movs	r0, #1
 8000df8:	f7ff fec8 	bl	8000b8c <NRF24_csn>
	NRF24_ce(0);
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f7ff fee5 	bl	8000bcc <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000e02:	2005      	movs	r0, #5
 8000e04:	f003 fbfa 	bl	80045fc <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000e08:	2108      	movs	r1, #8
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f7ff ff4e 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000e10:	213f      	movs	r1, #63	; 0x3f
 8000e12:	2001      	movs	r0, #1
 8000e14:	f7ff ff4a 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000e18:	2103      	movs	r1, #3
 8000e1a:	2002      	movs	r0, #2
 8000e1c:	f7ff ff46 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000e20:	2103      	movs	r1, #3
 8000e22:	2003      	movs	r0, #3
 8000e24:	f7ff ff42 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000e28:	2103      	movs	r1, #3
 8000e2a:	2004      	movs	r0, #4
 8000e2c:	f7ff ff3e 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000e30:	2102      	movs	r1, #2
 8000e32:	2005      	movs	r0, #5
 8000e34:	f7ff ff3a 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000e38:	210f      	movs	r1, #15
 8000e3a:	2006      	movs	r0, #6
 8000e3c:	f7ff ff36 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000e40:	210e      	movs	r1, #14
 8000e42:	2007      	movs	r0, #7
 8000e44:	f7ff ff32 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2008      	movs	r0, #8
 8000e4c:	f7ff ff2e 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000e50:	2100      	movs	r1, #0
 8000e52:	2009      	movs	r0, #9
 8000e54:	f7ff ff2a 	bl	8000cac <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000e58:	23e7      	movs	r3, #231	; 0xe7
 8000e5a:	733b      	strb	r3, [r7, #12]
 8000e5c:	23e7      	movs	r3, #231	; 0xe7
 8000e5e:	72fb      	strb	r3, [r7, #11]
 8000e60:	23e7      	movs	r3, #231	; 0xe7
 8000e62:	72bb      	strb	r3, [r7, #10]
 8000e64:	23e7      	movs	r3, #231	; 0xe7
 8000e66:	727b      	strb	r3, [r7, #9]
 8000e68:	23e7      	movs	r3, #231	; 0xe7
 8000e6a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000e6c:	f107 0308 	add.w	r3, r7, #8
 8000e70:	2205      	movs	r2, #5
 8000e72:	4619      	mov	r1, r3
 8000e74:	200a      	movs	r0, #10
 8000e76:	f7ff ff3b 	bl	8000cf0 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8000e7a:	23c2      	movs	r3, #194	; 0xc2
 8000e7c:	733b      	strb	r3, [r7, #12]
 8000e7e:	23c2      	movs	r3, #194	; 0xc2
 8000e80:	72fb      	strb	r3, [r7, #11]
 8000e82:	23c2      	movs	r3, #194	; 0xc2
 8000e84:	72bb      	strb	r3, [r7, #10]
 8000e86:	23c2      	movs	r3, #194	; 0xc2
 8000e88:	727b      	strb	r3, [r7, #9]
 8000e8a:	23c2      	movs	r3, #194	; 0xc2
 8000e8c:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000e8e:	f107 0308 	add.w	r3, r7, #8
 8000e92:	2205      	movs	r2, #5
 8000e94:	4619      	mov	r1, r3
 8000e96:	200b      	movs	r0, #11
 8000e98:	f7ff ff2a 	bl	8000cf0 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000e9c:	21c3      	movs	r1, #195	; 0xc3
 8000e9e:	200c      	movs	r0, #12
 8000ea0:	f7ff ff04 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000ea4:	21c4      	movs	r1, #196	; 0xc4
 8000ea6:	200d      	movs	r0, #13
 8000ea8:	f7ff ff00 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000eac:	21c5      	movs	r1, #197	; 0xc5
 8000eae:	200e      	movs	r0, #14
 8000eb0:	f7ff fefc 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000eb4:	21c6      	movs	r1, #198	; 0xc6
 8000eb6:	200f      	movs	r0, #15
 8000eb8:	f7ff fef8 	bl	8000cac <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000ebc:	23e7      	movs	r3, #231	; 0xe7
 8000ebe:	733b      	strb	r3, [r7, #12]
 8000ec0:	23e7      	movs	r3, #231	; 0xe7
 8000ec2:	72fb      	strb	r3, [r7, #11]
 8000ec4:	23e7      	movs	r3, #231	; 0xe7
 8000ec6:	72bb      	strb	r3, [r7, #10]
 8000ec8:	23e7      	movs	r3, #231	; 0xe7
 8000eca:	727b      	strb	r3, [r7, #9]
 8000ecc:	23e7      	movs	r3, #231	; 0xe7
 8000ece:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000ed0:	f107 0308 	add.w	r3, r7, #8
 8000ed4:	2205      	movs	r2, #5
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	2010      	movs	r0, #16
 8000eda:	f7ff ff09 	bl	8000cf0 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000ede:	2100      	movs	r1, #0
 8000ee0:	2011      	movs	r0, #17
 8000ee2:	f7ff fee3 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	2012      	movs	r0, #18
 8000eea:	f7ff fedf 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000eee:	2100      	movs	r1, #0
 8000ef0:	2013      	movs	r0, #19
 8000ef2:	f7ff fedb 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	2014      	movs	r0, #20
 8000efa:	f7ff fed7 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000efe:	2100      	movs	r1, #0
 8000f00:	2015      	movs	r0, #21
 8000f02:	f7ff fed3 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000f06:	2100      	movs	r1, #0
 8000f08:	2016      	movs	r0, #22
 8000f0a:	f7ff fecf 	bl	8000cac <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8000f0e:	f000 fa89 	bl	8001424 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000f12:	2100      	movs	r1, #0
 8000f14:	201c      	movs	r0, #28
 8000f16:	f7ff fec9 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	201d      	movs	r0, #29
 8000f1e:	f7ff fec5 	bl	8000cac <NRF24_write_register>
	printRadioSettings();
 8000f22:	f000 fa99 	bl	8001458 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000f26:	210f      	movs	r1, #15
 8000f28:	200f      	movs	r0, #15
 8000f2a:	f000 f8ad 	bl	8001088 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000f2e:	2003      	movs	r0, #3
 8000f30:	f000 f927 	bl	8001182 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000f34:	2001      	movs	r0, #1
 8000f36:	f000 f95d 	bl	80011f4 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000f3a:	2002      	movs	r0, #2
 8000f3c:	f000 f9a0 	bl	8001280 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000f40:	f000 f8f2 	bl	8001128 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000f44:	2020      	movs	r0, #32
 8000f46:	f000 f8cf 	bl	80010e8 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8000f4a:	f000 fa62 	bl	8001412 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000f4e:	204c      	movs	r0, #76	; 0x4c
 8000f50:	f000 f8b5 	bl	80010be <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000f54:	f7ff ff16 	bl	8000d84 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000f58:	f7ff ff1c 	bl	8000d94 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8000f5c:	f000 f9b8 	bl	80012d0 <NRF24_powerDown>
	
}
 8000f60:	bf00      	nop
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f6a:	b002      	add	sp, #8
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	24000218 	.word	0x24000218
 8000f74:	24000210 	.word	0x24000210
 8000f78:	24000214 	.word	0x24000214
 8000f7c:	24000216 	.word	0x24000216

08000f80 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8000f84:	2000      	movs	r0, #0
 8000f86:	f7ff fe21 	bl	8000bcc <NRF24_ce>
	NRF24_flush_tx();
 8000f8a:	f7ff fefb 	bl	8000d84 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000f8e:	f7ff ff01 	bl	8000d94 <NRF24_flush_rx>
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8000fa4:	f000 fa35 	bl	8001412 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8000fa8:	78fb      	ldrb	r3, [r7, #3]
 8000faa:	4619      	mov	r1, r3
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f000 f9ce 	bl	800134e <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8000fb2:	f003 fb17 	bl	80045e4 <HAL_GetTick>
 8000fb6:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8000fb8:	230a      	movs	r3, #10
 8000fba:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8000fbc:	f107 030d 	add.w	r3, r7, #13
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	2008      	movs	r0, #8
 8000fc6:	f7ff fe49 	bl	8000c5c <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8000fca:	f7ff feeb 	bl	8000da4 <NRF24_get_status>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d107      	bne.n	8000fec <NRF24_write+0x54>
 8000fdc:	f003 fb02 	bl	80045e4 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d8e7      	bhi.n	8000fbc <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8000fec:	f107 010b 	add.w	r1, r7, #11
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	4a0c      	ldr	r2, [pc, #48]	; (8001028 <NRF24_write+0x90>)
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f9d8 	bl	80013ac <NRF24_whatHappened>
	retStatus = tx_ok;
 8000ffc:	7b3b      	ldrb	r3, [r7, #12]
 8000ffe:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <NRF24_write+0x90>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d005      	beq.n	8001014 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8001008:	f000 f886 	bl	8001118 <NRF24_getDynamicPayloadSize>
 800100c:	4603      	mov	r3, r0
 800100e:	461a      	mov	r2, r3
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <NRF24_write+0x94>)
 8001012:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 8001014:	f000 f80c 	bl	8001030 <NRF24_available>
	NRF24_flush_tx();
 8001018:	f7ff feb4 	bl	8000d84 <NRF24_flush_tx>
	return retStatus;
 800101c:	7bbb      	ldrb	r3, [r7, #14]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	24000208 	.word	0x24000208
 800102c:	24000209 	.word	0x24000209

08001030 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8001034:	2000      	movs	r0, #0
 8001036:	f000 f95a 	bl	80012ee <NRF24_availablePipe>
 800103a:	4603      	mov	r3, r0
}
 800103c:	4618      	mov	r0, r3
 800103e:	bd80      	pop	{r7, pc}

08001040 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 800104a:	463b      	mov	r3, r7
 800104c:	2205      	movs	r2, #5
 800104e:	4619      	mov	r1, r3
 8001050:	200a      	movs	r0, #10
 8001052:	f7ff fe4d 	bl	8000cf0 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8001056:	463b      	mov	r3, r7
 8001058:	2205      	movs	r2, #5
 800105a:	4619      	mov	r1, r3
 800105c:	2010      	movs	r0, #16
 800105e:	f7ff fe47 	bl	8000cf0 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8001062:	2320      	movs	r3, #32
 8001064:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8001066:	4b07      	ldr	r3, [pc, #28]	; (8001084 <NRF24_openWritingPipe+0x44>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	7bfa      	ldrb	r2, [r7, #15]
 800106c:	4293      	cmp	r3, r2
 800106e:	bf28      	it	cs
 8001070:	4613      	movcs	r3, r2
 8001072:	b2db      	uxtb	r3, r3
 8001074:	4619      	mov	r1, r3
 8001076:	2011      	movs	r0, #17
 8001078:	f7ff fe18 	bl	8000cac <NRF24_write_register>
}
 800107c:	bf00      	nop
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	2400020a 	.word	0x2400020a

08001088 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	460a      	mov	r2, r1
 8001092:	71fb      	strb	r3, [r7, #7]
 8001094:	4613      	mov	r3, r2
 8001096:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	011b      	lsls	r3, r3, #4
 800109c:	b25a      	sxtb	r2, r3
 800109e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80010a2:	f003 030f 	and.w	r3, r3, #15
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	4313      	orrs	r3, r2
 80010aa:	b25b      	sxtb	r3, r3
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	4619      	mov	r1, r3
 80010b0:	2004      	movs	r0, #4
 80010b2:	f7ff fdfb 	bl	8000cac <NRF24_write_register>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b084      	sub	sp, #16
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 80010c8:	237f      	movs	r3, #127	; 0x7f
 80010ca:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80010cc:	7bfa      	ldrb	r2, [r7, #15]
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	4293      	cmp	r3, r2
 80010d2:	bf28      	it	cs
 80010d4:	4613      	movcs	r3, r2
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4619      	mov	r1, r3
 80010da:	2005      	movs	r0, #5
 80010dc:	f7ff fde6 	bl	8000cac <NRF24_write_register>
}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 80010f2:	2320      	movs	r3, #32
 80010f4:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 80010f6:	7bfa      	ldrb	r2, [r7, #15]
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	4293      	cmp	r3, r2
 80010fc:	bf28      	it	cs
 80010fe:	4613      	movcs	r3, r2
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4b04      	ldr	r3, [pc, #16]	; (8001114 <NRF24_setPayloadSize+0x2c>)
 8001104:	701a      	strb	r2, [r3, #0]
}
 8001106:	bf00      	nop
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	2400020a 	.word	0x2400020a

08001118 <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 800111c:	2060      	movs	r0, #96	; 0x60
 800111e:	f7ff fd75 	bl	8000c0c <NRF24_read_register>
 8001122:	4603      	mov	r3, r0
}
 8001124:	4618      	mov	r0, r3
 8001126:	bd80      	pop	{r7, pc}

08001128 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 800112c:	201d      	movs	r0, #29
 800112e:	f7ff fd6d 	bl	8000c0c <NRF24_read_register>
 8001132:	4603      	mov	r3, r0
 8001134:	f023 0304 	bic.w	r3, r3, #4
 8001138:	b2db      	uxtb	r3, r3
 800113a:	4619      	mov	r1, r3
 800113c:	201d      	movs	r0, #29
 800113e:	f7ff fdb5 	bl	8000cac <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8001142:	2100      	movs	r1, #0
 8001144:	201c      	movs	r0, #28
 8001146:	f7ff fdb1 	bl	8000cac <NRF24_write_register>
	dynamic_payloads_enabled = false;
 800114a:	4b02      	ldr	r3, [pc, #8]	; (8001154 <NRF24_disableDynamicPayloads+0x2c>)
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	2400020b 	.word	0x2400020b

08001158 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d004      	beq.n	8001172 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8001168:	213f      	movs	r1, #63	; 0x3f
 800116a:	2001      	movs	r0, #1
 800116c:	f7ff fd9e 	bl	8000cac <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8001170:	e003      	b.n	800117a <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8001172:	2100      	movs	r1, #0
 8001174:	2001      	movs	r0, #1
 8001176:	f7ff fd99 	bl	8000cac <NRF24_write_register>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b084      	sub	sp, #16
 8001186:	af00      	add	r7, sp, #0
 8001188:	4603      	mov	r3, r0
 800118a:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800118c:	2006      	movs	r0, #6
 800118e:	f7ff fd3d 	bl	8000c0c <NRF24_read_register>
 8001192:	4603      	mov	r3, r0
 8001194:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	f023 0306 	bic.w	r3, r3, #6
 800119c:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	2b03      	cmp	r3, #3
 80011a2:	d104      	bne.n	80011ae <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
 80011a6:	f043 0306 	orr.w	r3, r3, #6
 80011aa:	73fb      	strb	r3, [r7, #15]
 80011ac:	e019      	b.n	80011e2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d104      	bne.n	80011be <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
 80011b6:	f043 0304 	orr.w	r3, r3, #4
 80011ba:	73fb      	strb	r3, [r7, #15]
 80011bc:	e011      	b.n	80011e2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d104      	bne.n	80011ce <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	f043 0302 	orr.w	r3, r3, #2
 80011ca:	73fb      	strb	r3, [r7, #15]
 80011cc:	e009      	b.n	80011e2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d006      	beq.n	80011e2 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	d103      	bne.n	80011e2 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	f043 0306 	orr.w	r3, r3, #6
 80011e0:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	4619      	mov	r1, r3
 80011e6:	2006      	movs	r0, #6
 80011e8:	f7ff fd60 	bl	8000cac <NRF24_write_register>
}
 80011ec:	bf00      	nop
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 80011fe:	2300      	movs	r3, #0
 8001200:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001202:	2006      	movs	r0, #6
 8001204:	f7ff fd02 	bl	8000c0c <NRF24_read_register>
 8001208:	4603      	mov	r3, r0
 800120a:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <NRF24_setDataRate+0x88>)
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8001212:	7bbb      	ldrb	r3, [r7, #14]
 8001214:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001218:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b02      	cmp	r3, #2
 800121e:	d107      	bne.n	8001230 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8001220:	4b16      	ldr	r3, [pc, #88]	; (800127c <NRF24_setDataRate+0x88>)
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8001226:	7bbb      	ldrb	r3, [r7, #14]
 8001228:	f043 0320 	orr.w	r3, r3, #32
 800122c:	73bb      	strb	r3, [r7, #14]
 800122e:	e00d      	b.n	800124c <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d107      	bne.n	8001246 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <NRF24_setDataRate+0x88>)
 8001238:	2201      	movs	r2, #1
 800123a:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 800123c:	7bbb      	ldrb	r3, [r7, #14]
 800123e:	f043 0308 	orr.w	r3, r3, #8
 8001242:	73bb      	strb	r3, [r7, #14]
 8001244:	e002      	b.n	800124c <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8001246:	4b0d      	ldr	r3, [pc, #52]	; (800127c <NRF24_setDataRate+0x88>)
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 800124c:	7bbb      	ldrb	r3, [r7, #14]
 800124e:	4619      	mov	r1, r3
 8001250:	2006      	movs	r0, #6
 8001252:	f7ff fd2b 	bl	8000cac <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8001256:	2006      	movs	r0, #6
 8001258:	f7ff fcd8 	bl	8000c0c <NRF24_read_register>
 800125c:	4603      	mov	r3, r0
 800125e:	461a      	mov	r2, r3
 8001260:	7bbb      	ldrb	r3, [r7, #14]
 8001262:	4293      	cmp	r3, r2
 8001264:	d102      	bne.n	800126c <NRF24_setDataRate+0x78>
  {
    result = true;
 8001266:	2301      	movs	r3, #1
 8001268:	73fb      	strb	r3, [r7, #15]
 800126a:	e002      	b.n	8001272 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <NRF24_setDataRate+0x88>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8001272:	7bfb      	ldrb	r3, [r7, #15]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	2400020c 	.word	0x2400020c

08001280 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 800128a:	2000      	movs	r0, #0
 800128c:	f7ff fcbe 	bl	8000c0c <NRF24_read_register>
 8001290:	4603      	mov	r3, r0
 8001292:	f023 030c 	bic.w	r3, r3, #12
 8001296:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d00f      	beq.n	80012be <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d104      	bne.n	80012ae <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	f043 0308 	orr.w	r3, r3, #8
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	e007      	b.n	80012be <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	f043 0308 	orr.w	r3, r3, #8
 80012b4:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	4619      	mov	r1, r3
 80012c2:	2000      	movs	r0, #0
 80012c4:	f7ff fcf2 	bl	8000cac <NRF24_write_register>
}
 80012c8:	bf00      	nop
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 80012d4:	2000      	movs	r0, #0
 80012d6:	f7ff fc99 	bl	8000c0c <NRF24_read_register>
 80012da:	4603      	mov	r3, r0
 80012dc:	f023 0302 	bic.w	r3, r3, #2
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	4619      	mov	r1, r3
 80012e4:	2000      	movs	r0, #0
 80012e6:	f7ff fce1 	bl	8000cac <NRF24_write_register>
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}

080012ee <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b084      	sub	sp, #16
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 80012f6:	f7ff fd55 	bl	8000da4 <NRF24_get_status>
 80012fa:	4603      	mov	r3, r0
 80012fc:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001304:	2b00      	cmp	r3, #0
 8001306:	bf14      	ite	ne
 8001308:	2301      	movne	r3, #1
 800130a:	2300      	moveq	r3, #0
 800130c:	73bb      	strb	r3, [r7, #14]

  if (result)
 800130e:	7bbb      	ldrb	r3, [r7, #14]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d017      	beq.n	8001344 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d007      	beq.n	800132a <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	085b      	lsrs	r3, r3, #1
 800131e:	b2db      	uxtb	r3, r3
 8001320:	f003 0307 	and.w	r3, r3, #7
 8001324:	b2da      	uxtb	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 800132a:	2140      	movs	r1, #64	; 0x40
 800132c:	2007      	movs	r0, #7
 800132e:	f7ff fcbd 	bl	8000cac <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	f003 0320 	and.w	r3, r3, #32
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 800133c:	2120      	movs	r1, #32
 800133e:	2007      	movs	r0, #7
 8001340:	f7ff fcb4 	bl	8000cac <NRF24_write_register>
    }
  }
  return result;
 8001344:	7bbb      	ldrb	r3, [r7, #14]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	460b      	mov	r3, r1
 8001358:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 800135a:	2000      	movs	r0, #0
 800135c:	f7ff fc36 	bl	8000bcc <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8001360:	2000      	movs	r0, #0
 8001362:	f7ff fc53 	bl	8000c0c <NRF24_read_register>
 8001366:	4603      	mov	r3, r0
 8001368:	f043 0302 	orr.w	r3, r3, #2
 800136c:	b2db      	uxtb	r3, r3
 800136e:	f023 0301 	bic.w	r3, r3, #1
 8001372:	b2db      	uxtb	r3, r3
 8001374:	4619      	mov	r1, r3
 8001376:	2000      	movs	r0, #0
 8001378:	f7ff fc98 	bl	8000cac <NRF24_write_register>
  NRF24_ce(1);
 800137c:	2001      	movs	r0, #1
 800137e:	f7ff fc25 	bl	8000bcc <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8001382:	2096      	movs	r0, #150	; 0x96
 8001384:	f7ff fbe2 	bl	8000b4c <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8001388:	78fb      	ldrb	r3, [r7, #3]
 800138a:	4619      	mov	r1, r3
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff fcd7 	bl	8000d40 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8001392:	2001      	movs	r0, #1
 8001394:	f7ff fc1a 	bl	8000bcc <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8001398:	200f      	movs	r0, #15
 800139a:	f7ff fbd7 	bl	8000b4c <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 800139e:	2000      	movs	r0, #0
 80013a0:	f7ff fc14 	bl	8000bcc <NRF24_ce>
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 80013b8:	f7ff fcf4 	bl	8000da4 <NRF24_get_status>
 80013bc:	4603      	mov	r3, r0
 80013be:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2200      	movs	r2, #0
 80013c4:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80013c6:	2170      	movs	r1, #112	; 0x70
 80013c8:	2007      	movs	r0, #7
 80013ca:	f7ff fc6f 	bl	8000cac <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 80013ce:	7dfb      	ldrb	r3, [r7, #23]
 80013d0:	f003 0320 	and.w	r3, r3, #32
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	bf14      	ite	ne
 80013d8:	2301      	movne	r3, #1
 80013da:	2300      	moveq	r3, #0
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 80013e2:	7dfb      	ldrb	r3, [r7, #23]
 80013e4:	f003 0310 	and.w	r3, r3, #16
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	bf14      	ite	ne
 80013ec:	2301      	movne	r3, #1
 80013ee:	2300      	moveq	r3, #0
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 80013f6:	7dfb      	ldrb	r3, [r7, #23]
 80013f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	bf14      	ite	ne
 8001400:	2301      	movne	r3, #1
 8001402:	2300      	moveq	r3, #0
 8001404:	b2da      	uxtb	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	701a      	strb	r2, [r3, #0]
}
 800140a:	bf00      	nop
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001416:	2170      	movs	r1, #112	; 0x70
 8001418:	2007      	movs	r0, #7
 800141a:	f7ff fc47 	bl	8000cac <NRF24_write_register>
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 800142a:	2000      	movs	r0, #0
 800142c:	f7ff fbae 	bl	8000b8c <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001430:	2350      	movs	r3, #80	; 0x50
 8001432:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8001434:	2373      	movs	r3, #115	; 0x73
 8001436:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8001438:	1d39      	adds	r1, r7, #4
 800143a:	2364      	movs	r3, #100	; 0x64
 800143c:	2202      	movs	r2, #2
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <NRF24_ACTIVATE_cmd+0x30>)
 8001440:	f00d fbae 	bl	800eba0 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8001444:	2001      	movs	r0, #1
 8001446:	f7ff fba1 	bl	8000b8c <NRF24_csn>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	24000218 	.word	0x24000218

08001458 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8001458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800145a:	b0a1      	sub	sp, #132	; 0x84
 800145c:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800145e:	f107 0308 	add.w	r3, r7, #8
 8001462:	4ab6      	ldr	r2, [pc, #728]	; (800173c <printRadioSettings+0x2e4>)
 8001464:	461c      	mov	r4, r3
 8001466:	4615      	mov	r5, r2
 8001468:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800146a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800146c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800146e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001470:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001472:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001474:	682b      	ldr	r3, [r5, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	8022      	strh	r2, [r4, #0]
 800147a:	3402      	adds	r4, #2
 800147c:	0c1b      	lsrs	r3, r3, #16
 800147e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001480:	f107 0308 	add.w	r3, r7, #8
 8001484:	4618      	mov	r0, r3
 8001486:	f7fe ff2b 	bl	80002e0 <strlen>
 800148a:	4603      	mov	r3, r0
 800148c:	b29a      	uxth	r2, r3
 800148e:	f107 0108 	add.w	r1, r7, #8
 8001492:	230a      	movs	r3, #10
 8001494:	48aa      	ldr	r0, [pc, #680]	; (8001740 <printRadioSettings+0x2e8>)
 8001496:	f00e fb8c 	bl	800fbb2 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 800149a:	2000      	movs	r0, #0
 800149c:	f7ff fbb6 	bl	8000c0c <NRF24_read_register>
 80014a0:	4603      	mov	r3, r0
 80014a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 80014a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d020      	beq.n	80014f4 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 80014b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00b      	beq.n	80014d6 <printRadioSettings+0x7e>
 80014be:	f107 0308 	add.w	r3, r7, #8
 80014c2:	4aa0      	ldr	r2, [pc, #640]	; (8001744 <printRadioSettings+0x2ec>)
 80014c4:	461c      	mov	r4, r3
 80014c6:	4615      	mov	r5, r2
 80014c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80014d4:	e017      	b.n	8001506 <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 80014d6:	f107 0308 	add.w	r3, r7, #8
 80014da:	4a9b      	ldr	r2, [pc, #620]	; (8001748 <printRadioSettings+0x2f0>)
 80014dc:	461c      	mov	r4, r3
 80014de:	4615      	mov	r5, r2
 80014e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014e8:	c403      	stmia	r4!, {r0, r1}
 80014ea:	8022      	strh	r2, [r4, #0]
 80014ec:	3402      	adds	r4, #2
 80014ee:	0c13      	lsrs	r3, r2, #16
 80014f0:	7023      	strb	r3, [r4, #0]
 80014f2:	e008      	b.n	8001506 <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80014f4:	f107 0308 	add.w	r3, r7, #8
 80014f8:	4a94      	ldr	r2, [pc, #592]	; (800174c <printRadioSettings+0x2f4>)
 80014fa:	461c      	mov	r4, r3
 80014fc:	4615      	mov	r5, r2
 80014fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001500:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001502:	682b      	ldr	r3, [r5, #0]
 8001504:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe fee8 	bl	80002e0 <strlen>
 8001510:	4603      	mov	r3, r0
 8001512:	b29a      	uxth	r2, r3
 8001514:	f107 0108 	add.w	r1, r7, #8
 8001518:	230a      	movs	r3, #10
 800151a:	4889      	ldr	r0, [pc, #548]	; (8001740 <printRadioSettings+0x2e8>)
 800151c:	f00e fb49 	bl	800fbb2 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001520:	2001      	movs	r0, #1
 8001522:	f7ff fb73 	bl	8000c0c <NRF24_read_register>
 8001526:	4603      	mov	r3, r0
 8001528:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800152c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001530:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001534:	2b00      	cmp	r3, #0
 8001536:	bfcc      	ite	gt
 8001538:	2301      	movgt	r3, #1
 800153a:	2300      	movle	r3, #0
 800153c:	b2db      	uxtb	r3, r3
 800153e:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001540:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001544:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001548:	2b00      	cmp	r3, #0
 800154a:	bfcc      	ite	gt
 800154c:	2301      	movgt	r3, #1
 800154e:	2300      	movle	r3, #0
 8001550:	b2db      	uxtb	r3, r3
 8001552:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001554:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001558:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800155c:	2b00      	cmp	r3, #0
 800155e:	bfcc      	ite	gt
 8001560:	2301      	movgt	r3, #1
 8001562:	2300      	movle	r3, #0
 8001564:	b2db      	uxtb	r3, r3
 8001566:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001568:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800156c:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001570:	2b00      	cmp	r3, #0
 8001572:	bfcc      	ite	gt
 8001574:	2301      	movgt	r3, #1
 8001576:	2300      	movle	r3, #0
 8001578:	b2db      	uxtb	r3, r3
 800157a:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800157c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001580:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001584:	2b00      	cmp	r3, #0
 8001586:	bfcc      	ite	gt
 8001588:	2301      	movgt	r3, #1
 800158a:	2300      	movle	r3, #0
 800158c:	b2db      	uxtb	r3, r3
 800158e:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001590:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001594:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001598:	2b00      	cmp	r3, #0
 800159a:	bfcc      	ite	gt
 800159c:	2301      	movgt	r3, #1
 800159e:	2300      	movle	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	f107 0008 	add.w	r0, r7, #8
 80015a6:	9303      	str	r3, [sp, #12]
 80015a8:	9402      	str	r4, [sp, #8]
 80015aa:	9101      	str	r1, [sp, #4]
 80015ac:	9200      	str	r2, [sp, #0]
 80015ae:	4633      	mov	r3, r6
 80015b0:	462a      	mov	r2, r5
 80015b2:	4967      	ldr	r1, [pc, #412]	; (8001750 <printRadioSettings+0x2f8>)
 80015b4:	f018 f8e8 	bl	8019788 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015b8:	f107 0308 	add.w	r3, r7, #8
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe fe8f 	bl	80002e0 <strlen>
 80015c2:	4603      	mov	r3, r0
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	f107 0108 	add.w	r1, r7, #8
 80015ca:	230a      	movs	r3, #10
 80015cc:	485c      	ldr	r0, [pc, #368]	; (8001740 <printRadioSettings+0x2e8>)
 80015ce:	f00e faf0 	bl	800fbb2 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 80015d2:	2002      	movs	r0, #2
 80015d4:	f7ff fb1a 	bl	8000c0c <NRF24_read_register>
 80015d8:	4603      	mov	r3, r0
 80015da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015de:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015e2:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	bfcc      	ite	gt
 80015ea:	2301      	movgt	r3, #1
 80015ec:	2300      	movle	r3, #0
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015f6:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	bfcc      	ite	gt
 80015fe:	2301      	movgt	r3, #1
 8001600:	2300      	movle	r3, #0
 8001602:	b2db      	uxtb	r3, r3
 8001604:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001606:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800160a:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800160e:	2b00      	cmp	r3, #0
 8001610:	bfcc      	ite	gt
 8001612:	2301      	movgt	r3, #1
 8001614:	2300      	movle	r3, #0
 8001616:	b2db      	uxtb	r3, r3
 8001618:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800161a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800161e:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001622:	2b00      	cmp	r3, #0
 8001624:	bfcc      	ite	gt
 8001626:	2301      	movgt	r3, #1
 8001628:	2300      	movle	r3, #0
 800162a:	b2db      	uxtb	r3, r3
 800162c:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800162e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001632:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001636:	2b00      	cmp	r3, #0
 8001638:	bfcc      	ite	gt
 800163a:	2301      	movgt	r3, #1
 800163c:	2300      	movle	r3, #0
 800163e:	b2db      	uxtb	r3, r3
 8001640:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001642:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001646:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800164a:	2b00      	cmp	r3, #0
 800164c:	bfcc      	ite	gt
 800164e:	2301      	movgt	r3, #1
 8001650:	2300      	movle	r3, #0
 8001652:	b2db      	uxtb	r3, r3
 8001654:	f107 0008 	add.w	r0, r7, #8
 8001658:	9303      	str	r3, [sp, #12]
 800165a:	9402      	str	r4, [sp, #8]
 800165c:	9101      	str	r1, [sp, #4]
 800165e:	9200      	str	r2, [sp, #0]
 8001660:	4633      	mov	r3, r6
 8001662:	462a      	mov	r2, r5
 8001664:	493b      	ldr	r1, [pc, #236]	; (8001754 <printRadioSettings+0x2fc>)
 8001666:	f018 f88f 	bl	8019788 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800166a:	f107 0308 	add.w	r3, r7, #8
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe fe36 	bl	80002e0 <strlen>
 8001674:	4603      	mov	r3, r0
 8001676:	b29a      	uxth	r2, r3
 8001678:	f107 0108 	add.w	r1, r7, #8
 800167c:	230a      	movs	r3, #10
 800167e:	4830      	ldr	r0, [pc, #192]	; (8001740 <printRadioSettings+0x2e8>)
 8001680:	f00e fa97 	bl	800fbb2 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8001684:	2003      	movs	r0, #3
 8001686:	f7ff fac1 	bl	8000c0c <NRF24_read_register>
 800168a:	4603      	mov	r3, r0
 800168c:	f003 0303 	and.w	r3, r3, #3
 8001690:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8001694:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001698:	3302      	adds	r3, #2
 800169a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 800169e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80016a2:	f107 0308 	add.w	r3, r7, #8
 80016a6:	492c      	ldr	r1, [pc, #176]	; (8001758 <printRadioSettings+0x300>)
 80016a8:	4618      	mov	r0, r3
 80016aa:	f018 f86d 	bl	8019788 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016ae:	f107 0308 	add.w	r3, r7, #8
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe fe14 	bl	80002e0 <strlen>
 80016b8:	4603      	mov	r3, r0
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	f107 0108 	add.w	r1, r7, #8
 80016c0:	230a      	movs	r3, #10
 80016c2:	481f      	ldr	r0, [pc, #124]	; (8001740 <printRadioSettings+0x2e8>)
 80016c4:	f00e fa75 	bl	800fbb2 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80016c8:	2005      	movs	r0, #5
 80016ca:	f7ff fa9f 	bl	8000c0c <NRF24_read_register>
 80016ce:	4603      	mov	r3, r0
 80016d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80016d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80016dc:	f107 0308 	add.w	r3, r7, #8
 80016e0:	491e      	ldr	r1, [pc, #120]	; (800175c <printRadioSettings+0x304>)
 80016e2:	4618      	mov	r0, r3
 80016e4:	f018 f850 	bl	8019788 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016e8:	f107 0308 	add.w	r3, r7, #8
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe fdf7 	bl	80002e0 <strlen>
 80016f2:	4603      	mov	r3, r0
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	f107 0108 	add.w	r1, r7, #8
 80016fa:	230a      	movs	r3, #10
 80016fc:	4810      	ldr	r0, [pc, #64]	; (8001740 <printRadioSettings+0x2e8>)
 80016fe:	f00e fa58 	bl	800fbb2 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001702:	2006      	movs	r0, #6
 8001704:	f7ff fa82 	bl	8000c0c <NRF24_read_register>
 8001708:	4603      	mov	r3, r0
 800170a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 800170e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001712:	f003 0308 	and.w	r3, r3, #8
 8001716:	2b00      	cmp	r3, #0
 8001718:	d024      	beq.n	8001764 <printRadioSettings+0x30c>
 800171a:	f107 0308 	add.w	r3, r7, #8
 800171e:	4a10      	ldr	r2, [pc, #64]	; (8001760 <printRadioSettings+0x308>)
 8001720:	461c      	mov	r4, r3
 8001722:	4615      	mov	r5, r2
 8001724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001728:	e895 0003 	ldmia.w	r5, {r0, r1}
 800172c:	6020      	str	r0, [r4, #0]
 800172e:	3404      	adds	r4, #4
 8001730:	8021      	strh	r1, [r4, #0]
 8001732:	3402      	adds	r4, #2
 8001734:	0c0b      	lsrs	r3, r1, #16
 8001736:	7023      	strb	r3, [r4, #0]
 8001738:	e023      	b.n	8001782 <printRadioSettings+0x32a>
 800173a:	bf00      	nop
 800173c:	0801a7a0 	.word	0x0801a7a0
 8001740:	240002a0 	.word	0x240002a0
 8001744:	0801a7d4 	.word	0x0801a7d4
 8001748:	0801a7f0 	.word	0x0801a7f0
 800174c:	0801a80c 	.word	0x0801a80c
 8001750:	0801a820 	.word	0x0801a820
 8001754:	0801a864 	.word	0x0801a864
 8001758:	0801a8b0 	.word	0x0801a8b0
 800175c:	0801a8cc 	.word	0x0801a8cc
 8001760:	0801a8e0 	.word	0x0801a8e0
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8001764:	f107 0308 	add.w	r3, r7, #8
 8001768:	4a29      	ldr	r2, [pc, #164]	; (8001810 <printRadioSettings+0x3b8>)
 800176a:	461c      	mov	r4, r3
 800176c:	4615      	mov	r5, r2
 800176e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001770:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001772:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001776:	6020      	str	r0, [r4, #0]
 8001778:	3404      	adds	r4, #4
 800177a:	8021      	strh	r1, [r4, #0]
 800177c:	3402      	adds	r4, #2
 800177e:	0c0b      	lsrs	r3, r1, #16
 8001780:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001782:	f107 0308 	add.w	r3, r7, #8
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fdaa 	bl	80002e0 <strlen>
 800178c:	4603      	mov	r3, r0
 800178e:	b29a      	uxth	r2, r3
 8001790:	f107 0108 	add.w	r1, r7, #8
 8001794:	230a      	movs	r3, #10
 8001796:	481f      	ldr	r0, [pc, #124]	; (8001814 <printRadioSettings+0x3bc>)
 8001798:	f00e fa0b 	bl	800fbb2 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 800179c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017a0:	f003 0306 	and.w	r3, r3, #6
 80017a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 80017a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017ac:	085b      	lsrs	r3, r3, #1
 80017ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80017b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d109      	bne.n	80017ce <printRadioSettings+0x376>
 80017ba:	f107 0308 	add.w	r3, r7, #8
 80017be:	4a16      	ldr	r2, [pc, #88]	; (8001818 <printRadioSettings+0x3c0>)
 80017c0:	461c      	mov	r4, r3
 80017c2:	4615      	mov	r5, r2
 80017c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017c8:	682b      	ldr	r3, [r5, #0]
 80017ca:	6023      	str	r3, [r4, #0]
 80017cc:	e037      	b.n	800183e <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 80017ce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d109      	bne.n	80017ea <printRadioSettings+0x392>
 80017d6:	f107 0308 	add.w	r3, r7, #8
 80017da:	4a10      	ldr	r2, [pc, #64]	; (800181c <printRadioSettings+0x3c4>)
 80017dc:	461c      	mov	r4, r3
 80017de:	4615      	mov	r5, r2
 80017e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017e4:	682b      	ldr	r3, [r5, #0]
 80017e6:	6023      	str	r3, [r4, #0]
 80017e8:	e029      	b.n	800183e <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 80017ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d118      	bne.n	8001824 <printRadioSettings+0x3cc>
 80017f2:	f107 0308 	add.w	r3, r7, #8
 80017f6:	4a0a      	ldr	r2, [pc, #40]	; (8001820 <printRadioSettings+0x3c8>)
 80017f8:	461c      	mov	r4, r3
 80017fa:	4615      	mov	r5, r2
 80017fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001800:	682b      	ldr	r3, [r5, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	8022      	strh	r2, [r4, #0]
 8001806:	3402      	adds	r4, #2
 8001808:	0c1b      	lsrs	r3, r3, #16
 800180a:	7023      	strb	r3, [r4, #0]
 800180c:	e017      	b.n	800183e <printRadioSettings+0x3e6>
 800180e:	bf00      	nop
 8001810:	0801a8f8 	.word	0x0801a8f8
 8001814:	240002a0 	.word	0x240002a0
 8001818:	0801a910 	.word	0x0801a910
 800181c:	0801a924 	.word	0x0801a924
 8001820:	0801a938 	.word	0x0801a938
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001824:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001828:	2b03      	cmp	r3, #3
 800182a:	d108      	bne.n	800183e <printRadioSettings+0x3e6>
 800182c:	f107 0308 	add.w	r3, r7, #8
 8001830:	4ad7      	ldr	r2, [pc, #860]	; (8001b90 <printRadioSettings+0x738>)
 8001832:	461c      	mov	r4, r3
 8001834:	4615      	mov	r5, r2
 8001836:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001838:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800183a:	682b      	ldr	r3, [r5, #0]
 800183c:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800183e:	f107 0308 	add.w	r3, r7, #8
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe fd4c 	bl	80002e0 <strlen>
 8001848:	4603      	mov	r3, r0
 800184a:	b29a      	uxth	r2, r3
 800184c:	f107 0108 	add.w	r1, r7, #8
 8001850:	230a      	movs	r3, #10
 8001852:	48d0      	ldr	r0, [pc, #832]	; (8001b94 <printRadioSettings+0x73c>)
 8001854:	f00e f9ad 	bl	800fbb2 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001858:	463b      	mov	r3, r7
 800185a:	2205      	movs	r2, #5
 800185c:	4619      	mov	r1, r3
 800185e:	200a      	movs	r0, #10
 8001860:	f7ff f9fc 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001864:	793b      	ldrb	r3, [r7, #4]
 8001866:	461c      	mov	r4, r3
 8001868:	78fb      	ldrb	r3, [r7, #3]
 800186a:	461d      	mov	r5, r3
 800186c:	78bb      	ldrb	r3, [r7, #2]
 800186e:	787a      	ldrb	r2, [r7, #1]
 8001870:	7839      	ldrb	r1, [r7, #0]
 8001872:	f107 0008 	add.w	r0, r7, #8
 8001876:	9102      	str	r1, [sp, #8]
 8001878:	9201      	str	r2, [sp, #4]
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	462b      	mov	r3, r5
 800187e:	4622      	mov	r2, r4
 8001880:	49c5      	ldr	r1, [pc, #788]	; (8001b98 <printRadioSettings+0x740>)
 8001882:	f017 ff81 	bl	8019788 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001886:	f107 0308 	add.w	r3, r7, #8
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fd28 	bl	80002e0 <strlen>
 8001890:	4603      	mov	r3, r0
 8001892:	b29a      	uxth	r2, r3
 8001894:	f107 0108 	add.w	r1, r7, #8
 8001898:	230a      	movs	r3, #10
 800189a:	48be      	ldr	r0, [pc, #760]	; (8001b94 <printRadioSettings+0x73c>)
 800189c:	f00e f989 	bl	800fbb2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 80018a0:	463b      	mov	r3, r7
 80018a2:	2205      	movs	r2, #5
 80018a4:	4619      	mov	r1, r3
 80018a6:	200b      	movs	r0, #11
 80018a8:	f7ff f9d8 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80018ac:	793b      	ldrb	r3, [r7, #4]
 80018ae:	461c      	mov	r4, r3
 80018b0:	78fb      	ldrb	r3, [r7, #3]
 80018b2:	461d      	mov	r5, r3
 80018b4:	78bb      	ldrb	r3, [r7, #2]
 80018b6:	787a      	ldrb	r2, [r7, #1]
 80018b8:	7839      	ldrb	r1, [r7, #0]
 80018ba:	f107 0008 	add.w	r0, r7, #8
 80018be:	9102      	str	r1, [sp, #8]
 80018c0:	9201      	str	r2, [sp, #4]
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	462b      	mov	r3, r5
 80018c6:	4622      	mov	r2, r4
 80018c8:	49b4      	ldr	r1, [pc, #720]	; (8001b9c <printRadioSettings+0x744>)
 80018ca:	f017 ff5d 	bl	8019788 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018ce:	f107 0308 	add.w	r3, r7, #8
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fd04 	bl	80002e0 <strlen>
 80018d8:	4603      	mov	r3, r0
 80018da:	b29a      	uxth	r2, r3
 80018dc:	f107 0108 	add.w	r1, r7, #8
 80018e0:	230a      	movs	r3, #10
 80018e2:	48ac      	ldr	r0, [pc, #688]	; (8001b94 <printRadioSettings+0x73c>)
 80018e4:	f00e f965 	bl	800fbb2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80018e8:	463b      	mov	r3, r7
 80018ea:	2201      	movs	r2, #1
 80018ec:	4619      	mov	r1, r3
 80018ee:	200c      	movs	r0, #12
 80018f0:	f7ff f9b4 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80018f4:	783b      	ldrb	r3, [r7, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	f107 0308 	add.w	r3, r7, #8
 80018fc:	49a8      	ldr	r1, [pc, #672]	; (8001ba0 <printRadioSettings+0x748>)
 80018fe:	4618      	mov	r0, r3
 8001900:	f017 ff42 	bl	8019788 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001904:	f107 0308 	add.w	r3, r7, #8
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fce9 	bl	80002e0 <strlen>
 800190e:	4603      	mov	r3, r0
 8001910:	b29a      	uxth	r2, r3
 8001912:	f107 0108 	add.w	r1, r7, #8
 8001916:	230a      	movs	r3, #10
 8001918:	489e      	ldr	r0, [pc, #632]	; (8001b94 <printRadioSettings+0x73c>)
 800191a:	f00e f94a 	bl	800fbb2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 800191e:	463b      	mov	r3, r7
 8001920:	2201      	movs	r2, #1
 8001922:	4619      	mov	r1, r3
 8001924:	200d      	movs	r0, #13
 8001926:	f7ff f999 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800192a:	783b      	ldrb	r3, [r7, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	f107 0308 	add.w	r3, r7, #8
 8001932:	499c      	ldr	r1, [pc, #624]	; (8001ba4 <printRadioSettings+0x74c>)
 8001934:	4618      	mov	r0, r3
 8001936:	f017 ff27 	bl	8019788 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800193a:	f107 0308 	add.w	r3, r7, #8
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fcce 	bl	80002e0 <strlen>
 8001944:	4603      	mov	r3, r0
 8001946:	b29a      	uxth	r2, r3
 8001948:	f107 0108 	add.w	r1, r7, #8
 800194c:	230a      	movs	r3, #10
 800194e:	4891      	ldr	r0, [pc, #580]	; (8001b94 <printRadioSettings+0x73c>)
 8001950:	f00e f92f 	bl	800fbb2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001954:	463b      	mov	r3, r7
 8001956:	2201      	movs	r2, #1
 8001958:	4619      	mov	r1, r3
 800195a:	200e      	movs	r0, #14
 800195c:	f7ff f97e 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001960:	783b      	ldrb	r3, [r7, #0]
 8001962:	461a      	mov	r2, r3
 8001964:	f107 0308 	add.w	r3, r7, #8
 8001968:	498f      	ldr	r1, [pc, #572]	; (8001ba8 <printRadioSettings+0x750>)
 800196a:	4618      	mov	r0, r3
 800196c:	f017 ff0c 	bl	8019788 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001970:	f107 0308 	add.w	r3, r7, #8
 8001974:	4618      	mov	r0, r3
 8001976:	f7fe fcb3 	bl	80002e0 <strlen>
 800197a:	4603      	mov	r3, r0
 800197c:	b29a      	uxth	r2, r3
 800197e:	f107 0108 	add.w	r1, r7, #8
 8001982:	230a      	movs	r3, #10
 8001984:	4883      	ldr	r0, [pc, #524]	; (8001b94 <printRadioSettings+0x73c>)
 8001986:	f00e f914 	bl	800fbb2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 800198a:	463b      	mov	r3, r7
 800198c:	2201      	movs	r2, #1
 800198e:	4619      	mov	r1, r3
 8001990:	200f      	movs	r0, #15
 8001992:	f7ff f963 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001996:	783b      	ldrb	r3, [r7, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	f107 0308 	add.w	r3, r7, #8
 800199e:	4983      	ldr	r1, [pc, #524]	; (8001bac <printRadioSettings+0x754>)
 80019a0:	4618      	mov	r0, r3
 80019a2:	f017 fef1 	bl	8019788 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019a6:	f107 0308 	add.w	r3, r7, #8
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fc98 	bl	80002e0 <strlen>
 80019b0:	4603      	mov	r3, r0
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	f107 0108 	add.w	r1, r7, #8
 80019b8:	230a      	movs	r3, #10
 80019ba:	4876      	ldr	r0, [pc, #472]	; (8001b94 <printRadioSettings+0x73c>)
 80019bc:	f00e f8f9 	bl	800fbb2 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80019c0:	463b      	mov	r3, r7
 80019c2:	2205      	movs	r2, #5
 80019c4:	4619      	mov	r1, r3
 80019c6:	2010      	movs	r0, #16
 80019c8:	f7ff f948 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80019cc:	793b      	ldrb	r3, [r7, #4]
 80019ce:	461c      	mov	r4, r3
 80019d0:	78fb      	ldrb	r3, [r7, #3]
 80019d2:	461d      	mov	r5, r3
 80019d4:	78bb      	ldrb	r3, [r7, #2]
 80019d6:	787a      	ldrb	r2, [r7, #1]
 80019d8:	7839      	ldrb	r1, [r7, #0]
 80019da:	f107 0008 	add.w	r0, r7, #8
 80019de:	9102      	str	r1, [sp, #8]
 80019e0:	9201      	str	r2, [sp, #4]
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	462b      	mov	r3, r5
 80019e6:	4622      	mov	r2, r4
 80019e8:	4971      	ldr	r1, [pc, #452]	; (8001bb0 <printRadioSettings+0x758>)
 80019ea:	f017 fecd 	bl	8019788 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019ee:	f107 0308 	add.w	r3, r7, #8
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fc74 	bl	80002e0 <strlen>
 80019f8:	4603      	mov	r3, r0
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	f107 0108 	add.w	r1, r7, #8
 8001a00:	230a      	movs	r3, #10
 8001a02:	4864      	ldr	r0, [pc, #400]	; (8001b94 <printRadioSettings+0x73c>)
 8001a04:	f00e f8d5 	bl	800fbb2 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8001a08:	2011      	movs	r0, #17
 8001a0a:	f7ff f8ff 	bl	8000c0c <NRF24_read_register>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001a14:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a18:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a1c:	f107 0308 	add.w	r3, r7, #8
 8001a20:	4964      	ldr	r1, [pc, #400]	; (8001bb4 <printRadioSettings+0x75c>)
 8001a22:	4618      	mov	r0, r3
 8001a24:	f017 feb0 	bl	8019788 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a28:	f107 0308 	add.w	r3, r7, #8
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fc57 	bl	80002e0 <strlen>
 8001a32:	4603      	mov	r3, r0
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	f107 0108 	add.w	r1, r7, #8
 8001a3a:	230a      	movs	r3, #10
 8001a3c:	4855      	ldr	r0, [pc, #340]	; (8001b94 <printRadioSettings+0x73c>)
 8001a3e:	f00e f8b8 	bl	800fbb2 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8001a42:	2012      	movs	r0, #18
 8001a44:	f7ff f8e2 	bl	8000c0c <NRF24_read_register>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001a4e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a56:	f107 0308 	add.w	r3, r7, #8
 8001a5a:	4957      	ldr	r1, [pc, #348]	; (8001bb8 <printRadioSettings+0x760>)
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f017 fe93 	bl	8019788 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a62:	f107 0308 	add.w	r3, r7, #8
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fc3a 	bl	80002e0 <strlen>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	f107 0108 	add.w	r1, r7, #8
 8001a74:	230a      	movs	r3, #10
 8001a76:	4847      	ldr	r0, [pc, #284]	; (8001b94 <printRadioSettings+0x73c>)
 8001a78:	f00e f89b 	bl	800fbb2 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8001a7c:	2013      	movs	r0, #19
 8001a7e:	f7ff f8c5 	bl	8000c0c <NRF24_read_register>
 8001a82:	4603      	mov	r3, r0
 8001a84:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001a88:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a8c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a90:	f107 0308 	add.w	r3, r7, #8
 8001a94:	4949      	ldr	r1, [pc, #292]	; (8001bbc <printRadioSettings+0x764>)
 8001a96:	4618      	mov	r0, r3
 8001a98:	f017 fe76 	bl	8019788 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a9c:	f107 0308 	add.w	r3, r7, #8
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7fe fc1d 	bl	80002e0 <strlen>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	f107 0108 	add.w	r1, r7, #8
 8001aae:	230a      	movs	r3, #10
 8001ab0:	4838      	ldr	r0, [pc, #224]	; (8001b94 <printRadioSettings+0x73c>)
 8001ab2:	f00e f87e 	bl	800fbb2 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8001ab6:	2014      	movs	r0, #20
 8001ab8:	f7ff f8a8 	bl	8000c0c <NRF24_read_register>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001ac2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ac6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001aca:	f107 0308 	add.w	r3, r7, #8
 8001ace:	493c      	ldr	r1, [pc, #240]	; (8001bc0 <printRadioSettings+0x768>)
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f017 fe59 	bl	8019788 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ad6:	f107 0308 	add.w	r3, r7, #8
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fc00 	bl	80002e0 <strlen>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	f107 0108 	add.w	r1, r7, #8
 8001ae8:	230a      	movs	r3, #10
 8001aea:	482a      	ldr	r0, [pc, #168]	; (8001b94 <printRadioSettings+0x73c>)
 8001aec:	f00e f861 	bl	800fbb2 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8001af0:	2015      	movs	r0, #21
 8001af2:	f7ff f88b 	bl	8000c0c <NRF24_read_register>
 8001af6:	4603      	mov	r3, r0
 8001af8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001afc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b00:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b04:	f107 0308 	add.w	r3, r7, #8
 8001b08:	492e      	ldr	r1, [pc, #184]	; (8001bc4 <printRadioSettings+0x76c>)
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f017 fe3c 	bl	8019788 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b10:	f107 0308 	add.w	r3, r7, #8
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7fe fbe3 	bl	80002e0 <strlen>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	f107 0108 	add.w	r1, r7, #8
 8001b22:	230a      	movs	r3, #10
 8001b24:	481b      	ldr	r0, [pc, #108]	; (8001b94 <printRadioSettings+0x73c>)
 8001b26:	f00e f844 	bl	800fbb2 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8001b2a:	2016      	movs	r0, #22
 8001b2c:	f7ff f86e 	bl	8000c0c <NRF24_read_register>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001b36:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b3e:	f107 0308 	add.w	r3, r7, #8
 8001b42:	4921      	ldr	r1, [pc, #132]	; (8001bc8 <printRadioSettings+0x770>)
 8001b44:	4618      	mov	r0, r3
 8001b46:	f017 fe1f 	bl	8019788 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b4a:	f107 0308 	add.w	r3, r7, #8
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fbc6 	bl	80002e0 <strlen>
 8001b54:	4603      	mov	r3, r0
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	f107 0108 	add.w	r1, r7, #8
 8001b5c:	230a      	movs	r3, #10
 8001b5e:	480d      	ldr	r0, [pc, #52]	; (8001b94 <printRadioSettings+0x73c>)
 8001b60:	f00e f827 	bl	800fbb2 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001b64:	201c      	movs	r0, #28
 8001b66:	f7ff f851 	bl	8000c0c <NRF24_read_register>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001b70:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b74:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	bfcc      	ite	gt
 8001b7c:	2301      	movgt	r3, #1
 8001b7e:	2300      	movle	r3, #0
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001b84:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	e01e      	b.n	8001bcc <printRadioSettings+0x774>
 8001b8e:	bf00      	nop
 8001b90:	0801a94c 	.word	0x0801a94c
 8001b94:	240002a0 	.word	0x240002a0
 8001b98:	0801a960 	.word	0x0801a960
 8001b9c:	0801a990 	.word	0x0801a990
 8001ba0:	0801a9c0 	.word	0x0801a9c0
 8001ba4:	0801a9e8 	.word	0x0801a9e8
 8001ba8:	0801aa10 	.word	0x0801aa10
 8001bac:	0801aa38 	.word	0x0801aa38
 8001bb0:	0801aa60 	.word	0x0801aa60
 8001bb4:	0801aa8c 	.word	0x0801aa8c
 8001bb8:	0801aaa8 	.word	0x0801aaa8
 8001bbc:	0801aac4 	.word	0x0801aac4
 8001bc0:	0801aae0 	.word	0x0801aae0
 8001bc4:	0801aafc 	.word	0x0801aafc
 8001bc8:	0801ab18 	.word	0x0801ab18
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	bfcc      	ite	gt
 8001bd0:	2301      	movgt	r3, #1
 8001bd2:	2300      	movle	r3, #0
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001bd8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001bdc:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	bfcc      	ite	gt
 8001be4:	2301      	movgt	r3, #1
 8001be6:	2300      	movle	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001bec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001bf0:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	bfcc      	ite	gt
 8001bf8:	2301      	movgt	r3, #1
 8001bfa:	2300      	movle	r3, #0
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001c00:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c04:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	bfcc      	ite	gt
 8001c0c:	2301      	movgt	r3, #1
 8001c0e:	2300      	movle	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001c14:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c18:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	bfcc      	ite	gt
 8001c20:	2301      	movgt	r3, #1
 8001c22:	2300      	movle	r3, #0
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	f107 0008 	add.w	r0, r7, #8
 8001c2a:	9303      	str	r3, [sp, #12]
 8001c2c:	9402      	str	r4, [sp, #8]
 8001c2e:	9101      	str	r1, [sp, #4]
 8001c30:	9200      	str	r2, [sp, #0]
 8001c32:	4633      	mov	r3, r6
 8001c34:	462a      	mov	r2, r5
 8001c36:	494a      	ldr	r1, [pc, #296]	; (8001d60 <printRadioSettings+0x908>)
 8001c38:	f017 fda6 	bl	8019788 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001c3c:	f107 0308 	add.w	r3, r7, #8
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7fe fb4d 	bl	80002e0 <strlen>
 8001c46:	4603      	mov	r3, r0
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	f107 0108 	add.w	r1, r7, #8
 8001c4e:	230a      	movs	r3, #10
 8001c50:	4844      	ldr	r0, [pc, #272]	; (8001d64 <printRadioSettings+0x90c>)
 8001c52:	f00d ffae 	bl	800fbb2 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001c56:	201d      	movs	r0, #29
 8001c58:	f7fe ffd8 	bl	8000c0c <NRF24_read_register>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001c62:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00c      	beq.n	8001c88 <printRadioSettings+0x830>
 8001c6e:	f107 0308 	add.w	r3, r7, #8
 8001c72:	4a3d      	ldr	r2, [pc, #244]	; (8001d68 <printRadioSettings+0x910>)
 8001c74:	461c      	mov	r4, r3
 8001c76:	4615      	mov	r5, r2
 8001c78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c80:	6020      	str	r0, [r4, #0]
 8001c82:	3404      	adds	r4, #4
 8001c84:	8021      	strh	r1, [r4, #0]
 8001c86:	e00e      	b.n	8001ca6 <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001c88:	f107 0308 	add.w	r3, r7, #8
 8001c8c:	4a37      	ldr	r2, [pc, #220]	; (8001d6c <printRadioSettings+0x914>)
 8001c8e:	461c      	mov	r4, r3
 8001c90:	4615      	mov	r5, r2
 8001c92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c96:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c9a:	6020      	str	r0, [r4, #0]
 8001c9c:	3404      	adds	r4, #4
 8001c9e:	8021      	strh	r1, [r4, #0]
 8001ca0:	3402      	adds	r4, #2
 8001ca2:	0c0b      	lsrs	r3, r1, #16
 8001ca4:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ca6:	f107 0308 	add.w	r3, r7, #8
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe fb18 	bl	80002e0 <strlen>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	f107 0108 	add.w	r1, r7, #8
 8001cb8:	230a      	movs	r3, #10
 8001cba:	482a      	ldr	r0, [pc, #168]	; (8001d64 <printRadioSettings+0x90c>)
 8001cbc:	f00d ff79 	bl	800fbb2 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001cc0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00b      	beq.n	8001ce4 <printRadioSettings+0x88c>
 8001ccc:	f107 0308 	add.w	r3, r7, #8
 8001cd0:	4a27      	ldr	r2, [pc, #156]	; (8001d70 <printRadioSettings+0x918>)
 8001cd2:	461c      	mov	r4, r3
 8001cd4:	4615      	mov	r5, r2
 8001cd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cda:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cde:	c403      	stmia	r4!, {r0, r1}
 8001ce0:	8022      	strh	r2, [r4, #0]
 8001ce2:	e00d      	b.n	8001d00 <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001ce4:	f107 0308 	add.w	r3, r7, #8
 8001ce8:	4a22      	ldr	r2, [pc, #136]	; (8001d74 <printRadioSettings+0x91c>)
 8001cea:	461c      	mov	r4, r3
 8001cec:	4615      	mov	r5, r2
 8001cee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cf2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cf6:	c403      	stmia	r4!, {r0, r1}
 8001cf8:	8022      	strh	r2, [r4, #0]
 8001cfa:	3402      	adds	r4, #2
 8001cfc:	0c13      	lsrs	r3, r2, #16
 8001cfe:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d00:	f107 0308 	add.w	r3, r7, #8
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe faeb 	bl	80002e0 <strlen>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	f107 0108 	add.w	r1, r7, #8
 8001d12:	230a      	movs	r3, #10
 8001d14:	4813      	ldr	r0, [pc, #76]	; (8001d64 <printRadioSettings+0x90c>)
 8001d16:	f00d ff4c 	bl	800fbb2 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001d1a:	f107 0308 	add.w	r3, r7, #8
 8001d1e:	4a16      	ldr	r2, [pc, #88]	; (8001d78 <printRadioSettings+0x920>)
 8001d20:	461c      	mov	r4, r3
 8001d22:	4615      	mov	r5, r2
 8001d24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d30:	682b      	ldr	r3, [r5, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	8022      	strh	r2, [r4, #0]
 8001d36:	3402      	adds	r4, #2
 8001d38:	0c1b      	lsrs	r3, r3, #16
 8001d3a:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d3c:	f107 0308 	add.w	r3, r7, #8
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe facd 	bl	80002e0 <strlen>
 8001d46:	4603      	mov	r3, r0
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	f107 0108 	add.w	r1, r7, #8
 8001d4e:	230a      	movs	r3, #10
 8001d50:	4804      	ldr	r0, [pc, #16]	; (8001d64 <printRadioSettings+0x90c>)
 8001d52:	f00d ff2e 	bl	800fbb2 <HAL_UART_Transmit>
}
 8001d56:	bf00      	nop
 8001d58:	3774      	adds	r7, #116	; 0x74
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	0801ab34 	.word	0x0801ab34
 8001d64:	240002a0 	.word	0x240002a0
 8001d68:	0801ab80 	.word	0x0801ab80
 8001d6c:	0801ab98 	.word	0x0801ab98
 8001d70:	0801abb0 	.word	0x0801abb0
 8001d74:	0801abcc 	.word	0x0801abcc
 8001d78:	0801a7a0 	.word	0x0801a7a0

08001d7c <WriteToBuff>:
#include <myprintf.h>


DataBuff DataBuffer = {.Data.DataBuff = 0, .counter = 0};

int WriteToBuff(char Data[], int len){
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  if(len <= 1 || len >= Bufflength){
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	dd03      	ble.n	8001d94 <WriteToBuff+0x18>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d92:	db01      	blt.n	8001d98 <WriteToBuff+0x1c>
    return 3; //Dude dont try and break it
 8001d94:	2303      	movs	r3, #3
 8001d96:	e089      	b.n	8001eac <WriteToBuff+0x130>
  }

  if(DataBuffer.counter < Bufflength && DataBuffer.counter + len >= Bufflength){
 8001d98:	4b46      	ldr	r3, [pc, #280]	; (8001eb4 <WriteToBuff+0x138>)
 8001d9a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8001d9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001da2:	d238      	bcs.n	8001e16 <WriteToBuff+0x9a>
 8001da4:	4b43      	ldr	r3, [pc, #268]	; (8001eb4 <WriteToBuff+0x138>)
 8001da6:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	4413      	add	r3, r2
 8001dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001db2:	d330      	bcc.n	8001e16 <WriteToBuff+0x9a>
    DataBuffer.counter = Bufflength;
 8001db4:	4b3f      	ldr	r3, [pc, #252]	; (8001eb4 <WriteToBuff+0x138>)
 8001db6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dba:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
    memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 8001dbe:	4b3d      	ldr	r3, [pc, #244]	; (8001eb4 <WriteToBuff+0x138>)
 8001dc0:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8001dc4:	4a3b      	ldr	r2, [pc, #236]	; (8001eb4 <WriteToBuff+0x138>)
 8001dc6:	4413      	add	r3, r2
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f017 fb5f 	bl	8019490 <memcpy>
    DataBuffer.counter += len;
 8001dd2:	4b38      	ldr	r3, [pc, #224]	; (8001eb4 <WriteToBuff+0x138>)
 8001dd4:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	4413      	add	r3, r2
 8001ddc:	4a35      	ldr	r2, [pc, #212]	; (8001eb4 <WriteToBuff+0x138>)
 8001dde:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
    if(f_write(&myFILE, DataBuffer.Data.DataBuff1, sizeof(DataBuffer.Data.DataBuff1), &testByte) == 0){
 8001de2:	4b35      	ldr	r3, [pc, #212]	; (8001eb8 <WriteToBuff+0x13c>)
 8001de4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001de8:	4932      	ldr	r1, [pc, #200]	; (8001eb4 <WriteToBuff+0x138>)
 8001dea:	4834      	ldr	r0, [pc, #208]	; (8001ebc <WriteToBuff+0x140>)
 8001dec:	f016 fb9f 	bl	801852e <f_write>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10d      	bne.n	8001e12 <WriteToBuff+0x96>

      memset(DataBuffer.Data.DataBuff2, 0, sizeof(DataBuffer.Data.DataBuff2)); //Clear next buffer after writing
 8001df6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4830      	ldr	r0, [pc, #192]	; (8001ec0 <WriteToBuff+0x144>)
 8001dfe:	f017 fb52 	bl	80194a6 <memset>
    	f_sync(&myFILE);
 8001e02:	482e      	ldr	r0, [pc, #184]	; (8001ebc <WriteToBuff+0x140>)
 8001e04:	f016 fd08 	bl	8018818 <f_sync>
      printf("Buffer 1 has been written\n");
 8001e08:	482e      	ldr	r0, [pc, #184]	; (8001ec4 <WriteToBuff+0x148>)
 8001e0a:	f017 fc71 	bl	80196f0 <puts>
      return 1; //buffer 1 has been written
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e04c      	b.n	8001eac <WriteToBuff+0x130>
    }
    return 4; //could not write :(
 8001e12:	2304      	movs	r3, #4
 8001e14:	e04a      	b.n	8001eac <WriteToBuff+0x130>
  }

  if(DataBuffer.counter + len >= 2*Bufflength){
 8001e16:	4b27      	ldr	r3, [pc, #156]	; (8001eb4 <WriteToBuff+0x138>)
 8001e18:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e24:	d32f      	bcc.n	8001e86 <WriteToBuff+0x10a>
    DataBuffer.counter = 0;
 8001e26:	4b23      	ldr	r3, [pc, #140]	; (8001eb4 <WriteToBuff+0x138>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
    memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 8001e2e:	4b21      	ldr	r3, [pc, #132]	; (8001eb4 <WriteToBuff+0x138>)
 8001e30:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8001e34:	4a1f      	ldr	r2, [pc, #124]	; (8001eb4 <WriteToBuff+0x138>)
 8001e36:	4413      	add	r3, r2
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f017 fb27 	bl	8019490 <memcpy>
    DataBuffer.counter += len;
 8001e42:	4b1c      	ldr	r3, [pc, #112]	; (8001eb4 <WriteToBuff+0x138>)
 8001e44:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	4a19      	ldr	r2, [pc, #100]	; (8001eb4 <WriteToBuff+0x138>)
 8001e4e:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
    if(f_write(&myFILE, DataBuffer.Data.DataBuff2, sizeof(DataBuffer.Data.DataBuff2), &testByte) == 0){
 8001e52:	4b19      	ldr	r3, [pc, #100]	; (8001eb8 <WriteToBuff+0x13c>)
 8001e54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e58:	4919      	ldr	r1, [pc, #100]	; (8001ec0 <WriteToBuff+0x144>)
 8001e5a:	4818      	ldr	r0, [pc, #96]	; (8001ebc <WriteToBuff+0x140>)
 8001e5c:	f016 fb67 	bl	801852e <f_write>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10d      	bne.n	8001e82 <WriteToBuff+0x106>
      memset(DataBuffer.Data.DataBuff1, 0, sizeof(DataBuffer.Data.DataBuff1)); //Clear next buffer after writing
 8001e66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	4811      	ldr	r0, [pc, #68]	; (8001eb4 <WriteToBuff+0x138>)
 8001e6e:	f017 fb1a 	bl	80194a6 <memset>
    	f_sync(&myFILE);
 8001e72:	4812      	ldr	r0, [pc, #72]	; (8001ebc <WriteToBuff+0x140>)
 8001e74:	f016 fcd0 	bl	8018818 <f_sync>
      printf("Buffer 2 has been written\n");
 8001e78:	4813      	ldr	r0, [pc, #76]	; (8001ec8 <WriteToBuff+0x14c>)
 8001e7a:	f017 fc39 	bl	80196f0 <puts>
      return 2; //buffer 2 has been written
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e014      	b.n	8001eac <WriteToBuff+0x130>
    }
    return 4; //could not write :(
 8001e82:	2304      	movs	r3, #4
 8001e84:	e012      	b.n	8001eac <WriteToBuff+0x130>
  }
/*if(DataBuffer.counter + len >= 2*Bufflength){
	f_write(&myFILE, DataBuffer.Data.DataBuff, sizeof(DataBuffer.Data.DataBuff), &testByte);
	DataBuffer.counter = 0;
}*/
  memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 8001e86:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <WriteToBuff+0x138>)
 8001e88:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8001e8c:	4a09      	ldr	r2, [pc, #36]	; (8001eb4 <WriteToBuff+0x138>)
 8001e8e:	4413      	add	r3, r2
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f017 fafb 	bl	8019490 <memcpy>
  DataBuffer.counter += len;
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <WriteToBuff+0x138>)
 8001e9c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	4a03      	ldr	r2, [pc, #12]	; (8001eb4 <WriteToBuff+0x138>)
 8001ea6:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
  return 0; //moved data to buffer
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	2400032c 	.word	0x2400032c
 8001eb8:	240010d0 	.word	0x240010d0
 8001ebc:	24000b98 	.word	0x24000b98
 8001ec0:	2400072c 	.word	0x2400072c
 8001ec4:	0801ace4 	.word	0x0801ace4
 8001ec8:	0801ad00 	.word	0x0801ad00

08001ecc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ed0:	f5ad 5def 	sub.w	sp, sp, #7648	; 0x1de0
 8001ed4:	b086      	sub	sp, #24
 8001ed6:	af22      	add	r7, sp, #136	; 0x88
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ed8:	f002 fafe 	bl	80044d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001edc:	f001 fa2a 	bl	8003334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ee0:	f001 fd8a 	bl	80039f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ee4:	f001 fd68 	bl	80039b8 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8001ee8:	f001 fc56 	bl	8003798 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8001eec:	f011 f996 	bl	801321c <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8001ef0:	f016 fd96 	bl	8018a20 <MX_USB_DEVICE_Init>
  MX_FDCAN1_Init();
 8001ef4:	f001 fb28 	bl	8003548 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8001ef8:	f001 fb8c 	bl	8003614 <MX_FDCAN2_Init>
  MX_UART8_Init();
 8001efc:	f001 fcc4 	bl	8003888 <MX_UART8_Init>
  MX_USART3_UART_Init();
 8001f00:	f001 fd0e 	bl	8003920 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001f04:	f001 fc6a 	bl	80037dc <MX_SPI1_Init>
  MX_RTC_Init();
 8001f08:	f001 fbe8 	bl	80036dc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //HAL_Delay(1000);//NEEDED FOR USB MASS STORAGE TO WORK
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	489f      	ldr	r0, [pc, #636]	; (800218c <main+0x2c0>)
 8001f10:	f006 f8a7 	bl	8008062 <HAL_GPIO_TogglePin>
  //Telemetry
  NRF24_begin(TELE_CE_GPIO_Port, TELE_CS_Pin, TELE_CE_Pin, hspi1);
 8001f14:	4c9e      	ldr	r4, [pc, #632]	; (8002190 <main+0x2c4>)
 8001f16:	4668      	mov	r0, sp
 8001f18:	1d23      	adds	r3, r4, #4
 8001f1a:	2284      	movs	r2, #132	; 0x84
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f017 fab7 	bl	8019490 <memcpy>
 8001f22:	6823      	ldr	r3, [r4, #0]
 8001f24:	2201      	movs	r2, #1
 8001f26:	2102      	movs	r1, #2
 8001f28:	489a      	ldr	r0, [pc, #616]	; (8002194 <main+0x2c8>)
 8001f2a:	f7fe ff49 	bl	8000dc0 <NRF24_begin>
    //nrf24_DebugUART_Init(huart3);



    // TRANSMIT NO ACK //
    NRF24_stopListening();
 8001f2e:	f7ff f827 	bl	8000f80 <NRF24_stopListening>
    NRF24_openWritingPipe(TxpipeAddrs);
 8001f32:	4b99      	ldr	r3, [pc, #612]	; (8002198 <main+0x2cc>)
 8001f34:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	4621      	mov	r1, r4
 8001f3c:	f7ff f880 	bl	8001040 <NRF24_openWritingPipe>
    NRF24_setAutoAck(false);
 8001f40:	2000      	movs	r0, #0
 8001f42:	f7ff f909 	bl	8001158 <NRF24_setAutoAck>
    NRF24_setChannel(42);
 8001f46:	202a      	movs	r0, #42	; 0x2a
 8001f48:	f7ff f8b9 	bl	80010be <NRF24_setChannel>
    NRF24_setPayloadSize(32);
 8001f4c:	2020      	movs	r0, #32
 8001f4e:	f7ff f8cb 	bl	80010e8 <NRF24_setPayloadSize>

    printRadioSettings();
 8001f52:	f7ff fa81 	bl	8001458 <printRadioSettings>
  //END Telemetry
  printf("Starting\n");
 8001f56:	4891      	ldr	r0, [pc, #580]	; (800219c <main+0x2d0>)
 8001f58:	f017 fbca 	bl	80196f0 <puts>
  FDCAN_Config(&hfdcan1);
 8001f5c:	4890      	ldr	r0, [pc, #576]	; (80021a0 <main+0x2d4>)
 8001f5e:	f7fe fb97 	bl	8000690 <FDCAN_Config>
  //GPS DMA
  HAL_UART_Receive_DMA(&huart3, (uint8_t *)rxBuf, BUFFLENGTH);
 8001f62:	2246      	movs	r2, #70	; 0x46
 8001f64:	498f      	ldr	r1, [pc, #572]	; (80021a4 <main+0x2d8>)
 8001f66:	4890      	ldr	r0, [pc, #576]	; (80021a8 <main+0x2dc>)
 8001f68:	f00d feba 	bl	800fce0 <HAL_UART_Receive_DMA>
  HAL_Delay(1000);//GPS required this in testing, maybe remove?
 8001f6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f70:	f002 fb44 	bl	80045fc <HAL_Delay>
  //variables required for 10Hz GPS
  uint16_t measRate = 100;
 8001f74:	2364      	movs	r3, #100	; 0x64
 8001f76:	f641 5226 	movw	r2, #7462	; 0x1d26
 8001f7a:	443a      	add	r2, r7
 8001f7c:	8013      	strh	r3, [r2, #0]
  uint16_t navRate = 1;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	f641 5224 	movw	r2, #7460	; 0x1d24
 8001f84:	443a      	add	r2, r7
 8001f86:	8013      	strh	r3, [r2, #0]
  uint16_t timeRef = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f641 5222 	movw	r2, #7458	; 0x1d22
 8001f8e:	443a      	add	r2, r7
 8001f90:	8013      	strh	r3, [r2, #0]
  gps_rate_config(&huart3, measRate, navRate, timeRef);
 8001f92:	f641 5322 	movw	r3, #7458	; 0x1d22
 8001f96:	443b      	add	r3, r7
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	f641 5224 	movw	r2, #7460	; 0x1d24
 8001f9e:	443a      	add	r2, r7
 8001fa0:	8812      	ldrh	r2, [r2, #0]
 8001fa2:	f641 5126 	movw	r1, #7462	; 0x1d26
 8001fa6:	4439      	add	r1, r7
 8001fa8:	8809      	ldrh	r1, [r1, #0]
 8001faa:	487f      	ldr	r0, [pc, #508]	; (80021a8 <main+0x2dc>)
 8001fac:	f7fe fd5a 	bl	8000a64 <gps_rate_config>

  gps_msg_config(&huart3, "DTM", 0);//ERROR
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	497e      	ldr	r1, [pc, #504]	; (80021ac <main+0x2e0>)
 8001fb4:	487c      	ldr	r0, [pc, #496]	; (80021a8 <main+0x2dc>)
 8001fb6:	f7fe fce5 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GAQ", 0);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	497c      	ldr	r1, [pc, #496]	; (80021b0 <main+0x2e4>)
 8001fbe:	487a      	ldr	r0, [pc, #488]	; (80021a8 <main+0x2dc>)
 8001fc0:	f7fe fce0 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GBQ", 0);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	497b      	ldr	r1, [pc, #492]	; (80021b4 <main+0x2e8>)
 8001fc8:	4877      	ldr	r0, [pc, #476]	; (80021a8 <main+0x2dc>)
 8001fca:	f7fe fcdb 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GBS", 0);//ERROR
 8001fce:	2200      	movs	r2, #0
 8001fd0:	4979      	ldr	r1, [pc, #484]	; (80021b8 <main+0x2ec>)
 8001fd2:	4875      	ldr	r0, [pc, #468]	; (80021a8 <main+0x2dc>)
 8001fd4:	f7fe fcd6 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GGA", 0);//ERROR
 8001fd8:	2200      	movs	r2, #0
 8001fda:	4978      	ldr	r1, [pc, #480]	; (80021bc <main+0x2f0>)
 8001fdc:	4872      	ldr	r0, [pc, #456]	; (80021a8 <main+0x2dc>)
 8001fde:	f7fe fcd1 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GLL", 0);//ERROR
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	4976      	ldr	r1, [pc, #472]	; (80021c0 <main+0x2f4>)
 8001fe6:	4870      	ldr	r0, [pc, #448]	; (80021a8 <main+0x2dc>)
 8001fe8:	f7fe fccc 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GLQ", 0);
 8001fec:	2200      	movs	r2, #0
 8001fee:	4975      	ldr	r1, [pc, #468]	; (80021c4 <main+0x2f8>)
 8001ff0:	486d      	ldr	r0, [pc, #436]	; (80021a8 <main+0x2dc>)
 8001ff2:	f7fe fcc7 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GNQ", 0);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	4973      	ldr	r1, [pc, #460]	; (80021c8 <main+0x2fc>)
 8001ffa:	486b      	ldr	r0, [pc, #428]	; (80021a8 <main+0x2dc>)
 8001ffc:	f7fe fcc2 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GNS", 0);//ERROR
 8002000:	2200      	movs	r2, #0
 8002002:	4972      	ldr	r1, [pc, #456]	; (80021cc <main+0x300>)
 8002004:	4868      	ldr	r0, [pc, #416]	; (80021a8 <main+0x2dc>)
 8002006:	f7fe fcbd 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GPQ", 0);
 800200a:	2200      	movs	r2, #0
 800200c:	4970      	ldr	r1, [pc, #448]	; (80021d0 <main+0x304>)
 800200e:	4866      	ldr	r0, [pc, #408]	; (80021a8 <main+0x2dc>)
 8002010:	f7fe fcb8 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GRS", 0);//ERROR
 8002014:	2200      	movs	r2, #0
 8002016:	496f      	ldr	r1, [pc, #444]	; (80021d4 <main+0x308>)
 8002018:	4863      	ldr	r0, [pc, #396]	; (80021a8 <main+0x2dc>)
 800201a:	f7fe fcb3 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GSA", 0);//ERROR
 800201e:	2200      	movs	r2, #0
 8002020:	496d      	ldr	r1, [pc, #436]	; (80021d8 <main+0x30c>)
 8002022:	4861      	ldr	r0, [pc, #388]	; (80021a8 <main+0x2dc>)
 8002024:	f7fe fcae 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GST", 0);//ERROR
 8002028:	2200      	movs	r2, #0
 800202a:	496c      	ldr	r1, [pc, #432]	; (80021dc <main+0x310>)
 800202c:	485e      	ldr	r0, [pc, #376]	; (80021a8 <main+0x2dc>)
 800202e:	f7fe fca9 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GSV", 0);//ERROR
 8002032:	2200      	movs	r2, #0
 8002034:	496a      	ldr	r1, [pc, #424]	; (80021e0 <main+0x314>)
 8002036:	485c      	ldr	r0, [pc, #368]	; (80021a8 <main+0x2dc>)
 8002038:	f7fe fca4 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "RLM", 0);
 800203c:	2200      	movs	r2, #0
 800203e:	4969      	ldr	r1, [pc, #420]	; (80021e4 <main+0x318>)
 8002040:	4859      	ldr	r0, [pc, #356]	; (80021a8 <main+0x2dc>)
 8002042:	f7fe fc9f 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "RMC", 1);//ERROR
 8002046:	2201      	movs	r2, #1
 8002048:	4967      	ldr	r1, [pc, #412]	; (80021e8 <main+0x31c>)
 800204a:	4857      	ldr	r0, [pc, #348]	; (80021a8 <main+0x2dc>)
 800204c:	f7fe fc9a 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "TXT", 0);
 8002050:	2200      	movs	r2, #0
 8002052:	4966      	ldr	r1, [pc, #408]	; (80021ec <main+0x320>)
 8002054:	4854      	ldr	r0, [pc, #336]	; (80021a8 <main+0x2dc>)
 8002056:	f7fe fc95 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "VLW", 0);//ERROR
 800205a:	2200      	movs	r2, #0
 800205c:	4964      	ldr	r1, [pc, #400]	; (80021f0 <main+0x324>)
 800205e:	4852      	ldr	r0, [pc, #328]	; (80021a8 <main+0x2dc>)
 8002060:	f7fe fc90 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "VTG", 0);//ERROR
 8002064:	2200      	movs	r2, #0
 8002066:	4963      	ldr	r1, [pc, #396]	; (80021f4 <main+0x328>)
 8002068:	484f      	ldr	r0, [pc, #316]	; (80021a8 <main+0x2dc>)
 800206a:	f7fe fc8b 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "ZDA", 0);//ERROR
 800206e:	2200      	movs	r2, #0
 8002070:	4961      	ldr	r1, [pc, #388]	; (80021f8 <main+0x32c>)
 8002072:	484d      	ldr	r0, [pc, #308]	; (80021a8 <main+0x2dc>)
 8002074:	f7fe fc86 	bl	8000984 <gps_msg_config>

  if(f_mount(&myFATAFS, SDPath, 1) == FR_OK){
 8002078:	2201      	movs	r2, #1
 800207a:	4960      	ldr	r1, [pc, #384]	; (80021fc <main+0x330>)
 800207c:	4860      	ldr	r0, [pc, #384]	; (8002200 <main+0x334>)
 800207e:	f015 ff13 	bl	8017ea8 <f_mount>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	f040 814d 	bne.w	8002324 <main+0x458>
  	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
  	  char Filename[20] = "test";
 800208a:	4a5e      	ldr	r2, [pc, #376]	; (8002204 <main+0x338>)
 800208c:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002090:	443b      	add	r3, r7
 8002092:	441a      	add	r2, r3
 8002094:	495c      	ldr	r1, [pc, #368]	; (8002208 <main+0x33c>)
 8002096:	4613      	mov	r3, r2
 8002098:	c903      	ldmia	r1, {r0, r1}
 800209a:	6018      	str	r0, [r3, #0]
 800209c:	3304      	adds	r3, #4
 800209e:	7019      	strb	r1, [r3, #0]
 80020a0:	1d53      	adds	r3, r2, #5
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	605a      	str	r2, [r3, #4]
 80020a8:	609a      	str	r2, [r3, #8]
 80020aa:	f8c3 200b 	str.w	r2, [r3, #11]
      char FilePath[150];
      char ConfigPath[] ="Config.csv\0";
 80020ae:	4b57      	ldr	r3, [pc, #348]	; (800220c <main+0x340>)
 80020b0:	f641 5270 	movw	r2, #7536	; 0x1d70
 80020b4:	443a      	add	r2, r7
 80020b6:	4413      	add	r3, r2
 80020b8:	4a55      	ldr	r2, [pc, #340]	; (8002210 <main+0x344>)
 80020ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80020bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      char ConfigParams[1000];

      //Tries to open config File
      if(f_open(&Config, ConfigPath, FA_READ) == FR_NO_FILE){
 80020c0:	4b52      	ldr	r3, [pc, #328]	; (800220c <main+0x340>)
 80020c2:	f641 5270 	movw	r2, #7536	; 0x1d70
 80020c6:	443a      	add	r2, r7
 80020c8:	4413      	add	r3, r2
 80020ca:	2201      	movs	r2, #1
 80020cc:	4619      	mov	r1, r3
 80020ce:	4851      	ldr	r0, [pc, #324]	; (8002214 <main+0x348>)
 80020d0:	f015 ff30 	bl	8017f34 <f_open>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	f040 80a6 	bne.w	8002228 <main+0x35c>
        //If file doesnt exist creates a file using hard coded defualts and passes those to internal config array
        f_open(&Config, ConfigPath, FA_WRITE | FA_CREATE_ALWAYS);
 80020dc:	4b4b      	ldr	r3, [pc, #300]	; (800220c <main+0x340>)
 80020de:	f641 5270 	movw	r2, #7536	; 0x1d70
 80020e2:	443a      	add	r2, r7
 80020e4:	4413      	add	r3, r2
 80020e6:	220a      	movs	r2, #10
 80020e8:	4619      	mov	r1, r3
 80020ea:	484a      	ldr	r0, [pc, #296]	; (8002214 <main+0x348>)
 80020ec:	f015 ff22 	bl	8017f34 <f_open>

        sprintf(ConfigParams, "ID,Device,Bytes,Rate(HZ),Type,Description\n");
 80020f0:	4b49      	ldr	r3, [pc, #292]	; (8002218 <main+0x34c>)
 80020f2:	f641 5270 	movw	r2, #7536	; 0x1d70
 80020f6:	443a      	add	r2, r7
 80020f8:	4413      	add	r3, r2
 80020fa:	4a48      	ldr	r2, [pc, #288]	; (800221c <main+0x350>)
 80020fc:	461c      	mov	r4, r3
 80020fe:	4615      	mov	r5, r2
 8002100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002108:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800210c:	c403      	stmia	r4!, {r0, r1}
 800210e:	8022      	strh	r2, [r4, #0]
 8002110:	3402      	adds	r4, #2
 8002112:	0c13      	lsrs	r3, r2, #16
 8002114:	7023      	strb	r3, [r4, #0]
        sprintf(ConfigParams + strlen(ConfigParams),"0x50,Datalogger,8,0.20,uint32_t,HIGH:FileNO LOW:millis,\n");
 8002116:	4b40      	ldr	r3, [pc, #256]	; (8002218 <main+0x34c>)
 8002118:	f641 5270 	movw	r2, #7536	; 0x1d70
 800211c:	443a      	add	r2, r7
 800211e:	4413      	add	r3, r2
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe f8dd 	bl	80002e0 <strlen>
 8002126:	4602      	mov	r2, r0
 8002128:	4b3b      	ldr	r3, [pc, #236]	; (8002218 <main+0x34c>)
 800212a:	f641 5170 	movw	r1, #7536	; 0x1d70
 800212e:	4439      	add	r1, r7
 8002130:	440b      	add	r3, r1
 8002132:	4413      	add	r3, r2
 8002134:	4a3a      	ldr	r2, [pc, #232]	; (8002220 <main+0x354>)
 8002136:	4614      	mov	r4, r2
 8002138:	469c      	mov	ip, r3
 800213a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800213e:	4665      	mov	r5, ip
 8002140:	4626      	mov	r6, r4
 8002142:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002144:	6028      	str	r0, [r5, #0]
 8002146:	6069      	str	r1, [r5, #4]
 8002148:	60aa      	str	r2, [r5, #8]
 800214a:	60eb      	str	r3, [r5, #12]
 800214c:	3410      	adds	r4, #16
 800214e:	f10c 0c10 	add.w	ip, ip, #16
 8002152:	4574      	cmp	r4, lr
 8002154:	d1f3      	bne.n	800213e <main+0x272>
 8002156:	4662      	mov	r2, ip
 8002158:	4623      	mov	r3, r4
 800215a:	cb03      	ldmia	r3!, {r0, r1}
 800215c:	6010      	str	r0, [r2, #0]
 800215e:	6051      	str	r1, [r2, #4]
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	7213      	strb	r3, [r2, #8]

        f_write(&Config, ConfigParams, strlen(ConfigParams), &ConfByteW);
 8002164:	4b2c      	ldr	r3, [pc, #176]	; (8002218 <main+0x34c>)
 8002166:	f641 5270 	movw	r2, #7536	; 0x1d70
 800216a:	443a      	add	r2, r7
 800216c:	4413      	add	r3, r2
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe f8b6 	bl	80002e0 <strlen>
 8002174:	4602      	mov	r2, r0
 8002176:	4928      	ldr	r1, [pc, #160]	; (8002218 <main+0x34c>)
 8002178:	f641 5370 	movw	r3, #7536	; 0x1d70
 800217c:	443b      	add	r3, r7
 800217e:	4419      	add	r1, r3
 8002180:	4b28      	ldr	r3, [pc, #160]	; (8002224 <main+0x358>)
 8002182:	4824      	ldr	r0, [pc, #144]	; (8002214 <main+0x348>)
 8002184:	f016 f9d3 	bl	801852e <f_write>
 8002188:	e060      	b.n	800224c <main+0x380>
 800218a:	bf00      	nop
 800218c:	58020400 	.word	0x58020400
 8002190:	24001640 	.word	0x24001640
 8002194:	58020000 	.word	0x58020000
 8002198:	24000000 	.word	0x24000000
 800219c:	0801ad1c 	.word	0x0801ad1c
 80021a0:	24001514 	.word	0x24001514
 80021a4:	24001304 	.word	0x24001304
 80021a8:	240013c4 	.word	0x240013c4
 80021ac:	0801ad28 	.word	0x0801ad28
 80021b0:	0801ad2c 	.word	0x0801ad2c
 80021b4:	0801ad30 	.word	0x0801ad30
 80021b8:	0801ad34 	.word	0x0801ad34
 80021bc:	0801ad38 	.word	0x0801ad38
 80021c0:	0801ad3c 	.word	0x0801ad3c
 80021c4:	0801ad40 	.word	0x0801ad40
 80021c8:	0801ad44 	.word	0x0801ad44
 80021cc:	0801ad48 	.word	0x0801ad48
 80021d0:	0801ad4c 	.word	0x0801ad4c
 80021d4:	0801ad50 	.word	0x0801ad50
 80021d8:	0801ad54 	.word	0x0801ad54
 80021dc:	0801ad58 	.word	0x0801ad58
 80021e0:	0801ad5c 	.word	0x0801ad5c
 80021e4:	0801ad60 	.word	0x0801ad60
 80021e8:	0801ad64 	.word	0x0801ad64
 80021ec:	0801ad68 	.word	0x0801ad68
 80021f0:	0801ad6c 	.word	0x0801ad6c
 80021f4:	0801ad70 	.word	0x0801ad70
 80021f8:	0801ad74 	.word	0x0801ad74
 80021fc:	24001770 	.word	0x24001770
 8002200:	24000dd0 	.word	0x24000dd0
 8002204:	ffffe744 	.word	0xffffe744
 8002208:	0801ae3c 	.word	0x0801ae3c
 800220c:	ffffe738 	.word	0xffffe738
 8002210:	0801ae50 	.word	0x0801ae50
 8002214:	240010d4 	.word	0x240010d4
 8002218:	ffffe328 	.word	0xffffe328
 800221c:	0801ad78 	.word	0x0801ad78
 8002220:	0801ada4 	.word	0x0801ada4
 8002224:	24000dcc 	.word	0x24000dcc
      }else{
        //If file does exist reads in config parameters to internal config array
        f_read(&Config, ConfigParams, strlen(ConfigParams), &ConfByteR);
 8002228:	4bb7      	ldr	r3, [pc, #732]	; (8002508 <main+0x63c>)
 800222a:	f641 5270 	movw	r2, #7536	; 0x1d70
 800222e:	443a      	add	r2, r7
 8002230:	4413      	add	r3, r2
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe f854 	bl	80002e0 <strlen>
 8002238:	4602      	mov	r2, r0
 800223a:	49b3      	ldr	r1, [pc, #716]	; (8002508 <main+0x63c>)
 800223c:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002240:	443b      	add	r3, r7
 8002242:	4419      	add	r1, r3
 8002244:	4bb1      	ldr	r3, [pc, #708]	; (800250c <main+0x640>)
 8002246:	48b2      	ldr	r0, [pc, #712]	; (8002510 <main+0x644>)
 8002248:	f016 f832 	bl	80182b0 <f_read>
      }
      f_close(&Config);
 800224c:	48b0      	ldr	r0, [pc, #704]	; (8002510 <main+0x644>)
 800224e:	f016 fb61 	bl	8018914 <f_close>
      //MAKE NEW FILE INCREMENTED BY 1
      
      strcpy(FilePath,Filename);
 8002252:	4ab0      	ldr	r2, [pc, #704]	; (8002514 <main+0x648>)
 8002254:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002258:	443b      	add	r3, r7
 800225a:	441a      	add	r2, r3
 800225c:	4bae      	ldr	r3, [pc, #696]	; (8002518 <main+0x64c>)
 800225e:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002262:	4439      	add	r1, r7
 8002264:	440b      	add	r3, r1
 8002266:	4611      	mov	r1, r2
 8002268:	4618      	mov	r0, r3
 800226a:	f017 faad 	bl	80197c8 <strcpy>
      int FilePathLen = strlen(Filename);
 800226e:	4ba9      	ldr	r3, [pc, #676]	; (8002514 <main+0x648>)
 8002270:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002274:	443a      	add	r2, r7
 8002276:	4413      	add	r3, r2
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe f831 	bl	80002e0 <strlen>
 800227e:	4603      	mov	r3, r0
 8002280:	f641 521c 	movw	r2, #7452	; 0x1d1c
 8002284:	443a      	add	r2, r7
 8002286:	6013      	str	r3, [r2, #0]
      sprintf(FilePath + FilePathLen, "%i.csv",fileNum);
 8002288:	f641 531c 	movw	r3, #7452	; 0x1d1c
 800228c:	443b      	add	r3, r7
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4ba1      	ldr	r3, [pc, #644]	; (8002518 <main+0x64c>)
 8002292:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002296:	4439      	add	r1, r7
 8002298:	440b      	add	r3, r1
 800229a:	1898      	adds	r0, r3, r2
 800229c:	4b9f      	ldr	r3, [pc, #636]	; (800251c <main+0x650>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	461a      	mov	r2, r3
 80022a2:	499f      	ldr	r1, [pc, #636]	; (8002520 <main+0x654>)
 80022a4:	f017 fa70 	bl	8019788 <siprintf>
      while(f_open(&myFILE, FilePath, FA_READ) == FR_OK){
 80022a8:	e025      	b.n	80022f6 <main+0x42a>
    	  f_close(&myFILE);
 80022aa:	489e      	ldr	r0, [pc, #632]	; (8002524 <main+0x658>)
 80022ac:	f016 fb32 	bl	8018914 <f_close>
        fileNum++;
 80022b0:	4b9a      	ldr	r3, [pc, #616]	; (800251c <main+0x650>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	3301      	adds	r3, #1
 80022b6:	4a99      	ldr	r2, [pc, #612]	; (800251c <main+0x650>)
 80022b8:	6013      	str	r3, [r2, #0]
        strcpy(FilePath,Filename);
 80022ba:	4a96      	ldr	r2, [pc, #600]	; (8002514 <main+0x648>)
 80022bc:	f641 5370 	movw	r3, #7536	; 0x1d70
 80022c0:	443b      	add	r3, r7
 80022c2:	441a      	add	r2, r3
 80022c4:	4b94      	ldr	r3, [pc, #592]	; (8002518 <main+0x64c>)
 80022c6:	f641 5170 	movw	r1, #7536	; 0x1d70
 80022ca:	4439      	add	r1, r7
 80022cc:	440b      	add	r3, r1
 80022ce:	4611      	mov	r1, r2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f017 fa79 	bl	80197c8 <strcpy>
        sprintf(FilePath + FilePathLen, "%i.csv",fileNum);
 80022d6:	f641 531c 	movw	r3, #7452	; 0x1d1c
 80022da:	443b      	add	r3, r7
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	4b8e      	ldr	r3, [pc, #568]	; (8002518 <main+0x64c>)
 80022e0:	f641 5170 	movw	r1, #7536	; 0x1d70
 80022e4:	4439      	add	r1, r7
 80022e6:	440b      	add	r3, r1
 80022e8:	1898      	adds	r0, r3, r2
 80022ea:	4b8c      	ldr	r3, [pc, #560]	; (800251c <main+0x650>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	498b      	ldr	r1, [pc, #556]	; (8002520 <main+0x654>)
 80022f2:	f017 fa49 	bl	8019788 <siprintf>
      while(f_open(&myFILE, FilePath, FA_READ) == FR_OK){
 80022f6:	4b88      	ldr	r3, [pc, #544]	; (8002518 <main+0x64c>)
 80022f8:	f641 5270 	movw	r2, #7536	; 0x1d70
 80022fc:	443a      	add	r2, r7
 80022fe:	4413      	add	r3, r2
 8002300:	2201      	movs	r2, #1
 8002302:	4619      	mov	r1, r3
 8002304:	4887      	ldr	r0, [pc, #540]	; (8002524 <main+0x658>)
 8002306:	f015 fe15 	bl	8017f34 <f_open>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0cc      	beq.n	80022aa <main+0x3de>
      }
      f_open(&myFILE, FilePath, FA_WRITE | FA_CREATE_ALWAYS);
 8002310:	4b81      	ldr	r3, [pc, #516]	; (8002518 <main+0x64c>)
 8002312:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002316:	443a      	add	r2, r7
 8002318:	4413      	add	r3, r2
 800231a:	220a      	movs	r2, #10
 800231c:	4619      	mov	r1, r3
 800231e:	4881      	ldr	r0, [pc, #516]	; (8002524 <main+0x658>)
 8002320:	f015 fe08 	bl	8017f34 <f_open>
  extern int GPS_flag;
  extern int FDCAN_Flag;
  extern int CAN_Flag;


  CAN_FD_FRAME FDBuffer[50] = {0};
 8002324:	4b80      	ldr	r3, [pc, #512]	; (8002528 <main+0x65c>)
 8002326:	f641 5270 	movw	r2, #7536	; 0x1d70
 800232a:	443a      	add	r2, r7
 800232c:	4413      	add	r3, r2
 800232e:	4618      	mov	r0, r3
 8002330:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002334:	461a      	mov	r2, r3
 8002336:	2100      	movs	r1, #0
 8002338:	f017 f8b5 	bl	80194a6 <memset>
  CAN_FRAME Buffer[50] = {0};
 800233c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8002340:	4618      	mov	r0, r3
 8002342:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8002346:	461a      	mov	r2, r3
 8002348:	2100      	movs	r1, #0
 800234a:	f017 f8ac 	bl	80194a6 <memset>
  uint32_t Tele_IDs[50] = {0};
 800234e:	4b77      	ldr	r3, [pc, #476]	; (800252c <main+0x660>)
 8002350:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002354:	443a      	add	r2, r7
 8002356:	4413      	add	r3, r2
 8002358:	4618      	mov	r0, r3
 800235a:	23c8      	movs	r3, #200	; 0xc8
 800235c:	461a      	mov	r2, r3
 800235e:	2100      	movs	r1, #0
 8002360:	f017 f8a1 	bl	80194a6 <memset>
  Tele_IDs[0] = 0x321;
 8002364:	4b71      	ldr	r3, [pc, #452]	; (800252c <main+0x660>)
 8002366:	f641 5270 	movw	r2, #7536	; 0x1d70
 800236a:	443a      	add	r2, r7
 800236c:	4413      	add	r3, r2
 800236e:	f240 3221 	movw	r2, #801	; 0x321
 8002372:	601a      	str	r2, [r3, #0]

  sTime.SecondFraction = 999;
 8002374:	4b6e      	ldr	r3, [pc, #440]	; (8002530 <main+0x664>)
 8002376:	f240 32e7 	movw	r2, #999	; 0x3e7
 800237a:	609a      	str	r2, [r3, #8]
  uint32_t LocalTime = HAL_GetTick();
 800237c:	f002 f932 	bl	80045e4 <HAL_GetTick>
 8002380:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002384:	443b      	add	r3, r7
 8002386:	6018      	str	r0, [r3, #0]
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002388:	2200      	movs	r2, #0
 800238a:	4969      	ldr	r1, [pc, #420]	; (8002530 <main+0x664>)
 800238c:	4869      	ldr	r0, [pc, #420]	; (8002534 <main+0x668>)
 800238e:	f00a f98b 	bl	800c6a8 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002392:	2200      	movs	r2, #0
 8002394:	4968      	ldr	r1, [pc, #416]	; (8002538 <main+0x66c>)
 8002396:	4867      	ldr	r0, [pc, #412]	; (8002534 <main+0x668>)
 8002398:	f00a fa6a 	bl	800c870 <HAL_RTC_GetDate>

  sTime.SubSeconds -= LocalTime % 1000;
 800239c:	4b64      	ldr	r3, [pc, #400]	; (8002530 <main+0x664>)
 800239e:	6859      	ldr	r1, [r3, #4]
 80023a0:	f641 5318 	movw	r3, #7448	; 0x1d18
 80023a4:	443b      	add	r3, r7
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4b64      	ldr	r3, [pc, #400]	; (800253c <main+0x670>)
 80023aa:	fba3 0302 	umull	r0, r3, r3, r2
 80023ae:	099b      	lsrs	r3, r3, #6
 80023b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023b4:	fb00 f303 	mul.w	r3, r0, r3
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	1acb      	subs	r3, r1, r3
 80023bc:	4a5c      	ldr	r2, [pc, #368]	; (8002530 <main+0x664>)
 80023be:	6053      	str	r3, [r2, #4]
  LocalTime = LocalTime/1000;
 80023c0:	f641 5318 	movw	r3, #7448	; 0x1d18
 80023c4:	443b      	add	r3, r7
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a5c      	ldr	r2, [pc, #368]	; (800253c <main+0x670>)
 80023ca:	fba2 2303 	umull	r2, r3, r2, r3
 80023ce:	099b      	lsrs	r3, r3, #6
 80023d0:	f641 5218 	movw	r2, #7448	; 0x1d18
 80023d4:	443a      	add	r2, r7
 80023d6:	6013      	str	r3, [r2, #0]
  sTime.Seconds -= LocalTime % 60;
 80023d8:	4b55      	ldr	r3, [pc, #340]	; (8002530 <main+0x664>)
 80023da:	7898      	ldrb	r0, [r3, #2]
 80023dc:	f641 5318 	movw	r3, #7448	; 0x1d18
 80023e0:	443b      	add	r3, r7
 80023e2:	6819      	ldr	r1, [r3, #0]
 80023e4:	4b56      	ldr	r3, [pc, #344]	; (8002540 <main+0x674>)
 80023e6:	fba3 2301 	umull	r2, r3, r3, r1
 80023ea:	095a      	lsrs	r2, r3, #5
 80023ec:	4613      	mov	r3, r2
 80023ee:	011b      	lsls	r3, r3, #4
 80023f0:	1a9b      	subs	r3, r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	1aca      	subs	r2, r1, r3
 80023f6:	b2d3      	uxtb	r3, r2
 80023f8:	1ac3      	subs	r3, r0, r3
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	4b4c      	ldr	r3, [pc, #304]	; (8002530 <main+0x664>)
 80023fe:	709a      	strb	r2, [r3, #2]
  LocalTime = LocalTime/60;
 8002400:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002404:	443b      	add	r3, r7
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a4d      	ldr	r2, [pc, #308]	; (8002540 <main+0x674>)
 800240a:	fba2 2303 	umull	r2, r3, r2, r3
 800240e:	095b      	lsrs	r3, r3, #5
 8002410:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002414:	443a      	add	r2, r7
 8002416:	6013      	str	r3, [r2, #0]
  sTime.Minutes -= LocalTime % 60;
 8002418:	4b45      	ldr	r3, [pc, #276]	; (8002530 <main+0x664>)
 800241a:	7858      	ldrb	r0, [r3, #1]
 800241c:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002420:	443b      	add	r3, r7
 8002422:	6819      	ldr	r1, [r3, #0]
 8002424:	4b46      	ldr	r3, [pc, #280]	; (8002540 <main+0x674>)
 8002426:	fba3 2301 	umull	r2, r3, r3, r1
 800242a:	095a      	lsrs	r2, r3, #5
 800242c:	4613      	mov	r3, r2
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	1a9b      	subs	r3, r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	1aca      	subs	r2, r1, r3
 8002436:	b2d3      	uxtb	r3, r2
 8002438:	1ac3      	subs	r3, r0, r3
 800243a:	b2da      	uxtb	r2, r3
 800243c:	4b3c      	ldr	r3, [pc, #240]	; (8002530 <main+0x664>)
 800243e:	705a      	strb	r2, [r3, #1]
  LocalTime = LocalTime/60;
 8002440:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002444:	443b      	add	r3, r7
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a3d      	ldr	r2, [pc, #244]	; (8002540 <main+0x674>)
 800244a:	fba2 2303 	umull	r2, r3, r2, r3
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002454:	443a      	add	r2, r7
 8002456:	6013      	str	r3, [r2, #0]
  sTime.Hours -= LocalTime % 60;
 8002458:	4b35      	ldr	r3, [pc, #212]	; (8002530 <main+0x664>)
 800245a:	7818      	ldrb	r0, [r3, #0]
 800245c:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002460:	443b      	add	r3, r7
 8002462:	6819      	ldr	r1, [r3, #0]
 8002464:	4b36      	ldr	r3, [pc, #216]	; (8002540 <main+0x674>)
 8002466:	fba3 2301 	umull	r2, r3, r3, r1
 800246a:	095a      	lsrs	r2, r3, #5
 800246c:	4613      	mov	r3, r2
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	1a9b      	subs	r3, r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	1aca      	subs	r2, r1, r3
 8002476:	b2d3      	uxtb	r3, r2
 8002478:	1ac3      	subs	r3, r0, r3
 800247a:	b2da      	uxtb	r2, r3
 800247c:	4b2c      	ldr	r3, [pc, #176]	; (8002530 <main+0x664>)
 800247e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char CanWrite[400];
  int CW = 0;
 8002480:	2300      	movs	r3, #0
 8002482:	f641 526c 	movw	r2, #7532	; 0x1d6c
 8002486:	443a      	add	r2, r7
 8002488:	6013      	str	r3, [r2, #0]
  char CanFDWrite[400];
  int CFDW = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002490:	443a      	add	r2, r7
 8002492:	6013      	str	r3, [r2, #0]
  int AllowedTele = 1;
 8002494:	2301      	movs	r3, #1
 8002496:	f641 5264 	movw	r2, #7524	; 0x1d64
 800249a:	443a      	add	r2, r7
 800249c:	6013      	str	r3, [r2, #0]
  int BuffIndex = 0;
 800249e:	2300      	movs	r3, #0
 80024a0:	f507 52eb 	add.w	r2, r7, #7520	; 0x1d60
 80024a4:	6013      	str	r3, [r2, #0]
  int Txcnt = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	f641 525c 	movw	r2, #7516	; 0x1d5c
 80024ac:	443a      	add	r2, r7
 80024ae:	6013      	str	r3, [r2, #0]
  int TxDataSpace = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	f641 5214 	movw	r2, #7444	; 0x1d14
 80024b6:	443a      	add	r2, r7
 80024b8:	6013      	str	r3, [r2, #0]
  uint32_t LoopTime = 10; //time a loop should take (this is aguess should test avg time)
 80024ba:	230a      	movs	r3, #10
 80024bc:	f641 5210 	movw	r2, #7440	; 0x1d10
 80024c0:	443a      	add	r2, r7
 80024c2:	6013      	str	r3, [r2, #0]
  uint32_t StartTime = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f641 520c 	movw	r2, #7436	; 0x1d0c
 80024ca:	443a      	add	r2, r7
 80024cc:	6013      	str	r3, [r2, #0]
  uint32_t EndTime = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	f641 5208 	movw	r2, #7432	; 0x1d08
 80024d4:	443a      	add	r2, r7
 80024d6:	6013      	str	r3, [r2, #0]
  uint32_t radiodelay = 1000;
 80024d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024dc:	f641 5204 	movw	r2, #7428	; 0x1d04
 80024e0:	443a      	add	r2, r7
 80024e2:	6013      	str	r3, [r2, #0]
  uint32_t r_start = 0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	f641 5258 	movw	r2, #7512	; 0x1d58
 80024ea:	443a      	add	r2, r7
 80024ec:	6013      	str	r3, [r2, #0]
  uint32_t r_end = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 80024f4:	6013      	str	r3, [r2, #0]
  r_start = HAL_GetTick();
 80024f6:	f002 f875 	bl	80045e4 <HAL_GetTick>
 80024fa:	f641 5358 	movw	r3, #7512	; 0x1d58
 80024fe:	443b      	add	r3, r7
 8002500:	6018      	str	r0, [r3, #0]

  while (end_flag){
 8002502:	f000 befb 	b.w	80032fc <main+0x1430>
 8002506:	bf00      	nop
 8002508:	ffffe328 	.word	0xffffe328
 800250c:	24000dc8 	.word	0x24000dc8
 8002510:	240010d4 	.word	0x240010d4
 8002514:	ffffe744 	.word	0xffffe744
 8002518:	ffffe290 	.word	0xffffe290
 800251c:	2400000c 	.word	0x2400000c
 8002520:	0801ade0 	.word	0x0801ade0
 8002524:	24000b98 	.word	0x24000b98
 8002528:	ffffeff0 	.word	0xffffeff0
 800252c:	ffffea78 	.word	0xffffea78
 8002530:	24000b30 	.word	0x24000b30
 8002534:	240014f0 	.word	0x240014f0
 8002538:	24000b44 	.word	0x24000b44
 800253c:	10624dd3 	.word	0x10624dd3
 8002540:	88888889 	.word	0x88888889
    StartTime = HAL_GetTick();
 8002544:	f002 f84e 	bl	80045e4 <HAL_GetTick>
 8002548:	f641 530c 	movw	r3, #7436	; 0x1d0c
 800254c:	443b      	add	r3, r7
 800254e:	6018      	str	r0, [r3, #0]
	  if(GPS_flag){
 8002550:	4b93      	ldr	r3, [pc, #588]	; (80027a0 <main+0x8d4>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d006      	beq.n	8002566 <main+0x69a>
		  WriteToBuff(rxBuf, sizeof(rxBuf));
 8002558:	2146      	movs	r1, #70	; 0x46
 800255a:	4892      	ldr	r0, [pc, #584]	; (80027a4 <main+0x8d8>)
 800255c:	f7ff fc0e 	bl	8001d7c <WriteToBuff>
		  GPS_flag=0;
 8002560:	4b8f      	ldr	r3, [pc, #572]	; (80027a0 <main+0x8d4>)
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
	  }
	  
    r_end = HAL_GetTick();
 8002566:	f002 f83d 	bl	80045e4 <HAL_GetTick>
 800256a:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 800256e:	6018      	str	r0, [r3, #0]
    if(r_start - r_end > radiodelay){
 8002570:	f641 5358 	movw	r3, #7512	; 0x1d58
 8002574:	443b      	add	r3, r7
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	f641 5204 	movw	r2, #7428	; 0x1d04
 8002584:	443a      	add	r2, r7
 8002586:	6812      	ldr	r2, [r2, #0]
 8002588:	429a      	cmp	r2, r3
 800258a:	f080 829d 	bcs.w	8002ac8 <main+0xbfc>
      r_start = HAL_GetTick();
 800258e:	f002 f829 	bl	80045e4 <HAL_GetTick>
 8002592:	f641 5358 	movw	r3, #7512	; 0x1d58
 8002596:	443b      	add	r3, r7
 8002598:	6018      	str	r0, [r3, #0]
      for(int i = 0; i < AllowedTele; i++){
 800259a:	2300      	movs	r3, #0
 800259c:	f641 5254 	movw	r2, #7508	; 0x1d54
 80025a0:	443a      	add	r2, r7
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	e285      	b.n	8002ab2 <main+0xbe6>
        //make packet (Time ID data)
        Txcnt = sprintf(myTxData,"%u %x",FDBuffer[BuffIndex].time, FDBuffer[BuffIndex].id);
 80025a6:	4a80      	ldr	r2, [pc, #512]	; (80027a8 <main+0x8dc>)
 80025a8:	f641 5370 	movw	r3, #7536	; 0x1d70
 80025ac:	443b      	add	r3, r7
 80025ae:	441a      	add	r2, r3
 80025b0:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 80025b4:	6819      	ldr	r1, [r3, #0]
 80025b6:	460b      	mov	r3, r1
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	440b      	add	r3, r1
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	4413      	add	r3, r2
 80025c0:	330c      	adds	r3, #12
 80025c2:	6818      	ldr	r0, [r3, #0]
 80025c4:	4a78      	ldr	r2, [pc, #480]	; (80027a8 <main+0x8dc>)
 80025c6:	f641 5370 	movw	r3, #7536	; 0x1d70
 80025ca:	443b      	add	r3, r7
 80025cc:	441a      	add	r2, r3
 80025ce:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 80025d2:	6819      	ldr	r1, [r3, #0]
 80025d4:	460b      	mov	r3, r1
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	011b      	lsls	r3, r3, #4
 80025dc:	4413      	add	r3, r2
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4602      	mov	r2, r0
 80025e2:	4972      	ldr	r1, [pc, #456]	; (80027ac <main+0x8e0>)
 80025e4:	4872      	ldr	r0, [pc, #456]	; (80027b0 <main+0x8e4>)
 80025e6:	f017 f8cf 	bl	8019788 <siprintf>
 80025ea:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80025ee:	443b      	add	r3, r7
 80025f0:	6018      	str	r0, [r3, #0]
        TxDataSpace = 32 - Txcnt;
 80025f2:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80025f6:	443b      	add	r3, r7
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f1c3 0320 	rsb	r3, r3, #32
 80025fe:	f641 5214 	movw	r2, #7444	; 0x1d14
 8002602:	443a      	add	r2, r7
 8002604:	6013      	str	r3, [r2, #0]
        if(FDBuffer[BuffIndex].length > TxDataSpace){
 8002606:	4a68      	ldr	r2, [pc, #416]	; (80027a8 <main+0x8dc>)
 8002608:	f641 5370 	movw	r3, #7536	; 0x1d70
 800260c:	443b      	add	r3, r7
 800260e:	441a      	add	r2, r3
 8002610:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002614:	6819      	ldr	r1, [r3, #0]
 8002616:	460b      	mov	r3, r1
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	440b      	add	r3, r1
 800261c:	011b      	lsls	r3, r3, #4
 800261e:	4413      	add	r3, r2
 8002620:	3308      	adds	r3, #8
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002628:	443b      	add	r3, r7
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	f240 81b2 	bls.w	8002996 <main+0xaca>
          for(int i = 0; i < TxDataSpace; i++){
 8002632:	2300      	movs	r3, #0
 8002634:	f641 5250 	movw	r2, #7504	; 0x1d50
 8002638:	443a      	add	r2, r7
 800263a:	6013      	str	r3, [r2, #0]
 800263c:	e030      	b.n	80026a0 <main+0x7d4>
            Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i]);
 800263e:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8002642:	443b      	add	r3, r7
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a5a      	ldr	r2, [pc, #360]	; (80027b0 <main+0x8e4>)
 8002648:	1898      	adds	r0, r3, r2
 800264a:	4a57      	ldr	r2, [pc, #348]	; (80027a8 <main+0x8dc>)
 800264c:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002650:	443b      	add	r3, r7
 8002652:	441a      	add	r2, r3
 8002654:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002658:	6819      	ldr	r1, [r3, #0]
 800265a:	460b      	mov	r3, r1
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	440b      	add	r3, r1
 8002660:	011b      	lsls	r3, r3, #4
 8002662:	441a      	add	r2, r3
 8002664:	f641 5350 	movw	r3, #7504	; 0x1d50
 8002668:	443b      	add	r3, r7
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4413      	add	r3, r2
 800266e:	3310      	adds	r3, #16
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	494f      	ldr	r1, [pc, #316]	; (80027b4 <main+0x8e8>)
 8002676:	f017 f887 	bl	8019788 <siprintf>
 800267a:	4602      	mov	r2, r0
 800267c:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8002680:	443b      	add	r3, r7
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4413      	add	r3, r2
 8002686:	f641 525c 	movw	r2, #7516	; 0x1d5c
 800268a:	443a      	add	r2, r7
 800268c:	6013      	str	r3, [r2, #0]
          for(int i = 0; i < TxDataSpace; i++){
 800268e:	f641 5350 	movw	r3, #7504	; 0x1d50
 8002692:	443b      	add	r3, r7
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	3301      	adds	r3, #1
 8002698:	f641 5250 	movw	r2, #7504	; 0x1d50
 800269c:	443a      	add	r2, r7
 800269e:	6013      	str	r3, [r2, #0]
 80026a0:	f641 5350 	movw	r3, #7504	; 0x1d50
 80026a4:	443b      	add	r3, r7
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	f641 5314 	movw	r3, #7444	; 0x1d14
 80026ac:	443b      	add	r3, r7
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	dbc4      	blt.n	800263e <main+0x772>
          }
          NRF24_write(myTxData, 32);
 80026b4:	2120      	movs	r1, #32
 80026b6:	483e      	ldr	r0, [pc, #248]	; (80027b0 <main+0x8e4>)
 80026b8:	f7fe fc6e 	bl	8000f98 <NRF24_write>
          Txcnt = 0;
 80026bc:	2300      	movs	r3, #0
 80026be:	f641 525c 	movw	r2, #7516	; 0x1d5c
 80026c2:	443a      	add	r2, r7
 80026c4:	6013      	str	r3, [r2, #0]
          if(FDBuffer[BuffIndex].length - TxDataSpace > 32){
 80026c6:	4a38      	ldr	r2, [pc, #224]	; (80027a8 <main+0x8dc>)
 80026c8:	f641 5370 	movw	r3, #7536	; 0x1d70
 80026cc:	443b      	add	r3, r7
 80026ce:	441a      	add	r2, r3
 80026d0:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 80026d4:	6819      	ldr	r1, [r3, #0]
 80026d6:	460b      	mov	r3, r1
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	011b      	lsls	r3, r3, #4
 80026de:	4413      	add	r3, r2
 80026e0:	3308      	adds	r3, #8
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	f641 5314 	movw	r3, #7444	; 0x1d14
 80026e8:	443b      	add	r3, r7
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b20      	cmp	r3, #32
 80026f0:	f240 80d6 	bls.w	80028a0 <main+0x9d4>
            for(int i = 0; i < 32; i++){
 80026f4:	2300      	movs	r3, #0
 80026f6:	f641 524c 	movw	r2, #7500	; 0x1d4c
 80026fa:	443a      	add	r2, r7
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	e030      	b.n	8002762 <main+0x896>
              Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i]);
 8002700:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8002704:	443b      	add	r3, r7
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a29      	ldr	r2, [pc, #164]	; (80027b0 <main+0x8e4>)
 800270a:	1898      	adds	r0, r3, r2
 800270c:	4a26      	ldr	r2, [pc, #152]	; (80027a8 <main+0x8dc>)
 800270e:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002712:	443b      	add	r3, r7
 8002714:	441a      	add	r2, r3
 8002716:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 800271a:	6819      	ldr	r1, [r3, #0]
 800271c:	460b      	mov	r3, r1
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	011b      	lsls	r3, r3, #4
 8002724:	441a      	add	r2, r3
 8002726:	f641 534c 	movw	r3, #7500	; 0x1d4c
 800272a:	443b      	add	r3, r7
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4413      	add	r3, r2
 8002730:	3310      	adds	r3, #16
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	461a      	mov	r2, r3
 8002736:	491f      	ldr	r1, [pc, #124]	; (80027b4 <main+0x8e8>)
 8002738:	f017 f826 	bl	8019788 <siprintf>
 800273c:	4602      	mov	r2, r0
 800273e:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8002742:	443b      	add	r3, r7
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4413      	add	r3, r2
 8002748:	f641 525c 	movw	r2, #7516	; 0x1d5c
 800274c:	443a      	add	r2, r7
 800274e:	6013      	str	r3, [r2, #0]
            for(int i = 0; i < 32; i++){
 8002750:	f641 534c 	movw	r3, #7500	; 0x1d4c
 8002754:	443b      	add	r3, r7
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	3301      	adds	r3, #1
 800275a:	f641 524c 	movw	r2, #7500	; 0x1d4c
 800275e:	443a      	add	r2, r7
 8002760:	6013      	str	r3, [r2, #0]
 8002762:	f641 534c 	movw	r3, #7500	; 0x1d4c
 8002766:	443b      	add	r3, r7
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2b1f      	cmp	r3, #31
 800276c:	ddc8      	ble.n	8002700 <main+0x834>
            }
            Txcnt = 0;
 800276e:	2300      	movs	r3, #0
 8002770:	f641 525c 	movw	r2, #7516	; 0x1d5c
 8002774:	443a      	add	r2, r7
 8002776:	6013      	str	r3, [r2, #0]
            i++;
 8002778:	f641 5354 	movw	r3, #7508	; 0x1d54
 800277c:	443b      	add	r3, r7
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	3301      	adds	r3, #1
 8002782:	f641 5254 	movw	r2, #7508	; 0x1d54
 8002786:	443a      	add	r2, r7
 8002788:	6013      	str	r3, [r2, #0]
            NRF24_write(myTxData, 32);
 800278a:	2120      	movs	r1, #32
 800278c:	4808      	ldr	r0, [pc, #32]	; (80027b0 <main+0x8e4>)
 800278e:	f7fe fc03 	bl	8000f98 <NRF24_write>
            for(int i = 0; i < FDBuffer[BuffIndex].length - TxDataSpace+32; i++){
 8002792:	2300      	movs	r3, #0
 8002794:	f641 5248 	movw	r2, #7496	; 0x1d48
 8002798:	443a      	add	r2, r7
 800279a:	6013      	str	r3, [r2, #0]
 800279c:	e03d      	b.n	800281a <main+0x94e>
 800279e:	bf00      	nop
 80027a0:	24000204 	.word	0x24000204
 80027a4:	24001304 	.word	0x24001304
 80027a8:	ffffeff0 	.word	0xffffeff0
 80027ac:	0801ade8 	.word	0x0801ade8
 80027b0:	24001450 	.word	0x24001450
 80027b4:	0801adf0 	.word	0x0801adf0
              Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i]);
 80027b8:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80027bc:	443b      	add	r3, r7
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a77      	ldr	r2, [pc, #476]	; (80029a0 <main+0xad4>)
 80027c2:	1898      	adds	r0, r3, r2
 80027c4:	4a77      	ldr	r2, [pc, #476]	; (80029a4 <main+0xad8>)
 80027c6:	f641 5370 	movw	r3, #7536	; 0x1d70
 80027ca:	443b      	add	r3, r7
 80027cc:	441a      	add	r2, r3
 80027ce:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 80027d2:	6819      	ldr	r1, [r3, #0]
 80027d4:	460b      	mov	r3, r1
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	011b      	lsls	r3, r3, #4
 80027dc:	441a      	add	r2, r3
 80027de:	f641 5348 	movw	r3, #7496	; 0x1d48
 80027e2:	443b      	add	r3, r7
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4413      	add	r3, r2
 80027e8:	3310      	adds	r3, #16
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	461a      	mov	r2, r3
 80027ee:	496e      	ldr	r1, [pc, #440]	; (80029a8 <main+0xadc>)
 80027f0:	f016 ffca 	bl	8019788 <siprintf>
 80027f4:	4602      	mov	r2, r0
 80027f6:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80027fa:	443b      	add	r3, r7
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4413      	add	r3, r2
 8002800:	f641 525c 	movw	r2, #7516	; 0x1d5c
 8002804:	443a      	add	r2, r7
 8002806:	6013      	str	r3, [r2, #0]
            for(int i = 0; i < FDBuffer[BuffIndex].length - TxDataSpace+32; i++){
 8002808:	f641 5348 	movw	r3, #7496	; 0x1d48
 800280c:	443b      	add	r3, r7
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	3301      	adds	r3, #1
 8002812:	f641 5248 	movw	r2, #7496	; 0x1d48
 8002816:	443a      	add	r2, r7
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	4a62      	ldr	r2, [pc, #392]	; (80029a4 <main+0xad8>)
 800281c:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002820:	443b      	add	r3, r7
 8002822:	441a      	add	r2, r3
 8002824:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002828:	6819      	ldr	r1, [r3, #0]
 800282a:	460b      	mov	r3, r1
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	440b      	add	r3, r1
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	4413      	add	r3, r2
 8002834:	3308      	adds	r3, #8
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	f641 5314 	movw	r3, #7444	; 0x1d14
 800283c:	443b      	add	r3, r7
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	f103 0220 	add.w	r2, r3, #32
 8002846:	f641 5348 	movw	r3, #7496	; 0x1d48
 800284a:	443b      	add	r3, r7
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	429a      	cmp	r2, r3
 8002850:	d8b2      	bhi.n	80027b8 <main+0x8ec>
            }
            i++;
 8002852:	f641 5354 	movw	r3, #7508	; 0x1d54
 8002856:	443b      	add	r3, r7
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	3301      	adds	r3, #1
 800285c:	f641 5254 	movw	r2, #7508	; 0x1d54
 8002860:	443a      	add	r2, r7
 8002862:	6013      	str	r3, [r2, #0]
            NRF24_write(myTxData, FDBuffer[BuffIndex].length - TxDataSpace+32);
 8002864:	4a4f      	ldr	r2, [pc, #316]	; (80029a4 <main+0xad8>)
 8002866:	f641 5370 	movw	r3, #7536	; 0x1d70
 800286a:	443b      	add	r3, r7
 800286c:	441a      	add	r2, r3
 800286e:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002872:	6819      	ldr	r1, [r3, #0]
 8002874:	460b      	mov	r3, r1
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	440b      	add	r3, r1
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	4413      	add	r3, r2
 800287e:	3308      	adds	r3, #8
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	b2da      	uxtb	r2, r3
 8002884:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002888:	443b      	add	r3, r7
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	b2db      	uxtb	r3, r3
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	b2db      	uxtb	r3, r3
 8002892:	3320      	adds	r3, #32
 8002894:	b2db      	uxtb	r3, r3
 8002896:	4619      	mov	r1, r3
 8002898:	4841      	ldr	r0, [pc, #260]	; (80029a0 <main+0xad4>)
 800289a:	f7fe fb7d 	bl	8000f98 <NRF24_write>
 800289e:	e0e4      	b.n	8002a6a <main+0xb9e>
          }else{
            Txcnt = 0;
 80028a0:	2300      	movs	r3, #0
 80028a2:	f641 525c 	movw	r2, #7516	; 0x1d5c
 80028a6:	443a      	add	r2, r7
 80028a8:	6013      	str	r3, [r2, #0]
            for(int i = 0; i < FDBuffer[BuffIndex].length - TxDataSpace; i++){
 80028aa:	2300      	movs	r3, #0
 80028ac:	f641 5244 	movw	r2, #7492	; 0x1d44
 80028b0:	443a      	add	r2, r7
 80028b2:	6013      	str	r3, [r2, #0]
 80028b4:	e030      	b.n	8002918 <main+0xa4c>
              Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i]);
 80028b6:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80028ba:	443b      	add	r3, r7
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a38      	ldr	r2, [pc, #224]	; (80029a0 <main+0xad4>)
 80028c0:	1898      	adds	r0, r3, r2
 80028c2:	4a38      	ldr	r2, [pc, #224]	; (80029a4 <main+0xad8>)
 80028c4:	f641 5370 	movw	r3, #7536	; 0x1d70
 80028c8:	443b      	add	r3, r7
 80028ca:	441a      	add	r2, r3
 80028cc:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 80028d0:	6819      	ldr	r1, [r3, #0]
 80028d2:	460b      	mov	r3, r1
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	440b      	add	r3, r1
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	441a      	add	r2, r3
 80028dc:	f641 5344 	movw	r3, #7492	; 0x1d44
 80028e0:	443b      	add	r3, r7
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4413      	add	r3, r2
 80028e6:	3310      	adds	r3, #16
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	461a      	mov	r2, r3
 80028ec:	492e      	ldr	r1, [pc, #184]	; (80029a8 <main+0xadc>)
 80028ee:	f016 ff4b 	bl	8019788 <siprintf>
 80028f2:	4602      	mov	r2, r0
 80028f4:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80028f8:	443b      	add	r3, r7
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4413      	add	r3, r2
 80028fe:	f641 525c 	movw	r2, #7516	; 0x1d5c
 8002902:	443a      	add	r2, r7
 8002904:	6013      	str	r3, [r2, #0]
            for(int i = 0; i < FDBuffer[BuffIndex].length - TxDataSpace; i++){
 8002906:	f641 5344 	movw	r3, #7492	; 0x1d44
 800290a:	443b      	add	r3, r7
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	3301      	adds	r3, #1
 8002910:	f641 5244 	movw	r2, #7492	; 0x1d44
 8002914:	443a      	add	r2, r7
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	4a22      	ldr	r2, [pc, #136]	; (80029a4 <main+0xad8>)
 800291a:	f641 5370 	movw	r3, #7536	; 0x1d70
 800291e:	443b      	add	r3, r7
 8002920:	441a      	add	r2, r3
 8002922:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002926:	6819      	ldr	r1, [r3, #0]
 8002928:	460b      	mov	r3, r1
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	4413      	add	r3, r2
 8002932:	3308      	adds	r3, #8
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	f641 5314 	movw	r3, #7444	; 0x1d14
 800293a:	443b      	add	r3, r7
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	1ad2      	subs	r2, r2, r3
 8002940:	f641 5344 	movw	r3, #7492	; 0x1d44
 8002944:	443b      	add	r3, r7
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d8b4      	bhi.n	80028b6 <main+0x9ea>
            }
            i++;
 800294c:	f641 5354 	movw	r3, #7508	; 0x1d54
 8002950:	443b      	add	r3, r7
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	3301      	adds	r3, #1
 8002956:	f641 5254 	movw	r2, #7508	; 0x1d54
 800295a:	443a      	add	r2, r7
 800295c:	6013      	str	r3, [r2, #0]
            NRF24_write(myTxData, FDBuffer[BuffIndex].length - TxDataSpace);
 800295e:	4a11      	ldr	r2, [pc, #68]	; (80029a4 <main+0xad8>)
 8002960:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002964:	443b      	add	r3, r7
 8002966:	441a      	add	r2, r3
 8002968:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 800296c:	6819      	ldr	r1, [r3, #0]
 800296e:	460b      	mov	r3, r1
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	440b      	add	r3, r1
 8002974:	011b      	lsls	r3, r3, #4
 8002976:	4413      	add	r3, r2
 8002978:	3308      	adds	r3, #8
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	b2da      	uxtb	r2, r3
 800297e:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002982:	443b      	add	r3, r7
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	b2db      	uxtb	r3, r3
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	b2db      	uxtb	r3, r3
 800298c:	4619      	mov	r1, r3
 800298e:	4804      	ldr	r0, [pc, #16]	; (80029a0 <main+0xad4>)
 8002990:	f7fe fb02 	bl	8000f98 <NRF24_write>
 8002994:	e069      	b.n	8002a6a <main+0xb9e>
          }
        }
        else{
          for(int i = 0; i < FDBuffer[BuffIndex].length; i++){
 8002996:	2300      	movs	r3, #0
 8002998:	f507 52ea 	add.w	r2, r7, #7488	; 0x1d40
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	e033      	b.n	8002a08 <main+0xb3c>
 80029a0:	24001450 	.word	0x24001450
 80029a4:	ffffeff0 	.word	0xffffeff0
 80029a8:	0801adf0 	.word	0x0801adf0
            Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i]);
 80029ac:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80029b0:	443b      	add	r3, r7
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4ab6      	ldr	r2, [pc, #728]	; (8002c90 <main+0xdc4>)
 80029b6:	1898      	adds	r0, r3, r2
 80029b8:	4ab6      	ldr	r2, [pc, #728]	; (8002c94 <main+0xdc8>)
 80029ba:	f641 5370 	movw	r3, #7536	; 0x1d70
 80029be:	443b      	add	r3, r7
 80029c0:	441a      	add	r2, r3
 80029c2:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 80029c6:	6819      	ldr	r1, [r3, #0]
 80029c8:	460b      	mov	r3, r1
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	440b      	add	r3, r1
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	441a      	add	r2, r3
 80029d2:	f507 53ea 	add.w	r3, r7, #7488	; 0x1d40
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4413      	add	r3, r2
 80029da:	3310      	adds	r3, #16
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	461a      	mov	r2, r3
 80029e0:	49ad      	ldr	r1, [pc, #692]	; (8002c98 <main+0xdcc>)
 80029e2:	f016 fed1 	bl	8019788 <siprintf>
 80029e6:	4602      	mov	r2, r0
 80029e8:	f641 535c 	movw	r3, #7516	; 0x1d5c
 80029ec:	443b      	add	r3, r7
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4413      	add	r3, r2
 80029f2:	f641 525c 	movw	r2, #7516	; 0x1d5c
 80029f6:	443a      	add	r2, r7
 80029f8:	6013      	str	r3, [r2, #0]
          for(int i = 0; i < FDBuffer[BuffIndex].length; i++){
 80029fa:	f507 53ea 	add.w	r3, r7, #7488	; 0x1d40
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	3301      	adds	r3, #1
 8002a02:	f507 52ea 	add.w	r2, r7, #7488	; 0x1d40
 8002a06:	6013      	str	r3, [r2, #0]
 8002a08:	4aa2      	ldr	r2, [pc, #648]	; (8002c94 <main+0xdc8>)
 8002a0a:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002a0e:	443b      	add	r3, r7
 8002a10:	441a      	add	r2, r3
 8002a12:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002a16:	6819      	ldr	r1, [r3, #0]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	4413      	add	r3, r2
 8002a22:	3308      	adds	r3, #8
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	f507 53ea 	add.w	r3, r7, #7488	; 0x1d40
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d8bd      	bhi.n	80029ac <main+0xae0>
          }
          NRF24_write(myTxData, FDBuffer[BuffIndex].length + (32 - TxDataSpace));
 8002a30:	4a98      	ldr	r2, [pc, #608]	; (8002c94 <main+0xdc8>)
 8002a32:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002a36:	443b      	add	r3, r7
 8002a38:	441a      	add	r2, r3
 8002a3a:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002a3e:	6819      	ldr	r1, [r3, #0]
 8002a40:	460b      	mov	r3, r1
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	011b      	lsls	r3, r3, #4
 8002a48:	4413      	add	r3, r2
 8002a4a:	3308      	adds	r3, #8
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002a54:	443b      	add	r3, r7
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	3320      	adds	r3, #32
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	4619      	mov	r1, r3
 8002a64:	488a      	ldr	r0, [pc, #552]	; (8002c90 <main+0xdc4>)
 8002a66:	f7fe fa97 	bl	8000f98 <NRF24_write>
        }
        BuffIndex++;
 8002a6a:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	3301      	adds	r3, #1
 8002a72:	f507 52eb 	add.w	r2, r7, #7520	; 0x1d60
 8002a76:	6013      	str	r3, [r2, #0]
        if(FDBuffer[BuffIndex].id == 0){
 8002a78:	4a86      	ldr	r2, [pc, #536]	; (8002c94 <main+0xdc8>)
 8002a7a:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002a7e:	443b      	add	r3, r7
 8002a80:	441a      	add	r2, r3
 8002a82:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002a86:	6819      	ldr	r1, [r3, #0]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	011b      	lsls	r3, r3, #4
 8002a90:	4413      	add	r3, r2
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d103      	bne.n	8002aa0 <main+0xbd4>
          BuffIndex = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f507 52eb 	add.w	r2, r7, #7520	; 0x1d60
 8002a9e:	6013      	str	r3, [r2, #0]
      for(int i = 0; i < AllowedTele; i++){
 8002aa0:	f641 5354 	movw	r3, #7508	; 0x1d54
 8002aa4:	443b      	add	r3, r7
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	f641 5254 	movw	r2, #7508	; 0x1d54
 8002aae:	443a      	add	r2, r7
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	f641 5354 	movw	r3, #7508	; 0x1d54
 8002ab6:	443b      	add	r3, r7
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	f641 5364 	movw	r3, #7524	; 0x1d64
 8002abe:	443b      	add	r3, r7
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	f6ff ad6f 	blt.w	80025a6 <main+0x6da>


	  printf("Date:%u Month:%u Year:%u\n", sDate.Date, sDate.Month, sDate.Year);
	  printf("Hours:%u Minutes:%u Seconds:%u\n", sTime.Hours, sTime.Minutes, sTime.Seconds);*/

	  if(FDCAN_Flag){
 8002ac8:	4b74      	ldr	r3, [pc, #464]	; (8002c9c <main+0xdd0>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 81ee 	beq.w	8002eae <main+0xfe2>

		  RTC_TimeTypeDef lTime = sTime;
 8002ad2:	4b73      	ldr	r3, [pc, #460]	; (8002ca0 <main+0xdd4>)
 8002ad4:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002ad8:	443a      	add	r2, r7
 8002ada:	4413      	add	r3, r2
 8002adc:	4a71      	ldr	r2, [pc, #452]	; (8002ca4 <main+0xdd8>)
 8002ade:	461c      	mov	r4, r3
 8002ae0:	4615      	mov	r5, r2
 8002ae2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ae4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ae6:	682b      	ldr	r3, [r5, #0]
 8002ae8:	6023      	str	r3, [r4, #0]
		  LocalTime = CanFDFrame.time;
 8002aea:	4b6f      	ldr	r3, [pc, #444]	; (8002ca8 <main+0xddc>)
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002af2:	443a      	add	r2, r7
 8002af4:	6013      	str	r3, [r2, #0]
		  lTime.SubSeconds += LocalTime % 1000;
 8002af6:	4b6a      	ldr	r3, [pc, #424]	; (8002ca0 <main+0xdd4>)
 8002af8:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002afc:	443a      	add	r2, r7
 8002afe:	4413      	add	r3, r2
 8002b00:	6859      	ldr	r1, [r3, #4]
 8002b02:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002b06:	443b      	add	r3, r7
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	4b68      	ldr	r3, [pc, #416]	; (8002cac <main+0xde0>)
 8002b0c:	fba3 0302 	umull	r0, r3, r3, r2
 8002b10:	099b      	lsrs	r3, r3, #6
 8002b12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b16:	fb00 f303 	mul.w	r3, r0, r3
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	18ca      	adds	r2, r1, r3
 8002b1e:	4b60      	ldr	r3, [pc, #384]	; (8002ca0 <main+0xdd4>)
 8002b20:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002b24:	4439      	add	r1, r7
 8002b26:	440b      	add	r3, r1
 8002b28:	605a      	str	r2, [r3, #4]
		  LocalTime = LocalTime/1000;
 8002b2a:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002b2e:	443b      	add	r3, r7
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a5e      	ldr	r2, [pc, #376]	; (8002cac <main+0xde0>)
 8002b34:	fba2 2303 	umull	r2, r3, r2, r3
 8002b38:	099b      	lsrs	r3, r3, #6
 8002b3a:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002b3e:	443a      	add	r2, r7
 8002b40:	6013      	str	r3, [r2, #0]
		  lTime.Seconds += LocalTime % 60;
 8002b42:	4b57      	ldr	r3, [pc, #348]	; (8002ca0 <main+0xdd4>)
 8002b44:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002b48:	443a      	add	r2, r7
 8002b4a:	4413      	add	r3, r2
 8002b4c:	7898      	ldrb	r0, [r3, #2]
 8002b4e:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002b52:	443b      	add	r3, r7
 8002b54:	6819      	ldr	r1, [r3, #0]
 8002b56:	4b56      	ldr	r3, [pc, #344]	; (8002cb0 <main+0xde4>)
 8002b58:	fba3 2301 	umull	r2, r3, r3, r1
 8002b5c:	095a      	lsrs	r2, r3, #5
 8002b5e:	4613      	mov	r3, r2
 8002b60:	011b      	lsls	r3, r3, #4
 8002b62:	1a9b      	subs	r3, r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	1aca      	subs	r2, r1, r3
 8002b68:	b2d3      	uxtb	r3, r2
 8002b6a:	4403      	add	r3, r0
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	4b4c      	ldr	r3, [pc, #304]	; (8002ca0 <main+0xdd4>)
 8002b70:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002b74:	4439      	add	r1, r7
 8002b76:	440b      	add	r3, r1
 8002b78:	709a      	strb	r2, [r3, #2]
		  LocalTime = LocalTime/60;
 8002b7a:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002b7e:	443b      	add	r3, r7
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a4b      	ldr	r2, [pc, #300]	; (8002cb0 <main+0xde4>)
 8002b84:	fba2 2303 	umull	r2, r3, r2, r3
 8002b88:	095b      	lsrs	r3, r3, #5
 8002b8a:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002b8e:	443a      	add	r2, r7
 8002b90:	6013      	str	r3, [r2, #0]
		  lTime.Minutes += LocalTime % 60;
 8002b92:	4b43      	ldr	r3, [pc, #268]	; (8002ca0 <main+0xdd4>)
 8002b94:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002b98:	443a      	add	r2, r7
 8002b9a:	4413      	add	r3, r2
 8002b9c:	7858      	ldrb	r0, [r3, #1]
 8002b9e:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002ba2:	443b      	add	r3, r7
 8002ba4:	6819      	ldr	r1, [r3, #0]
 8002ba6:	4b42      	ldr	r3, [pc, #264]	; (8002cb0 <main+0xde4>)
 8002ba8:	fba3 2301 	umull	r2, r3, r3, r1
 8002bac:	095a      	lsrs	r2, r3, #5
 8002bae:	4613      	mov	r3, r2
 8002bb0:	011b      	lsls	r3, r3, #4
 8002bb2:	1a9b      	subs	r3, r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	1aca      	subs	r2, r1, r3
 8002bb8:	b2d3      	uxtb	r3, r2
 8002bba:	4403      	add	r3, r0
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	4b38      	ldr	r3, [pc, #224]	; (8002ca0 <main+0xdd4>)
 8002bc0:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002bc4:	4439      	add	r1, r7
 8002bc6:	440b      	add	r3, r1
 8002bc8:	705a      	strb	r2, [r3, #1]
		  LocalTime = LocalTime/60;
 8002bca:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002bce:	443b      	add	r3, r7
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a37      	ldr	r2, [pc, #220]	; (8002cb0 <main+0xde4>)
 8002bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd8:	095b      	lsrs	r3, r3, #5
 8002bda:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002bde:	443a      	add	r2, r7
 8002be0:	6013      	str	r3, [r2, #0]
		  lTime.Hours += LocalTime % 60;
 8002be2:	4b2f      	ldr	r3, [pc, #188]	; (8002ca0 <main+0xdd4>)
 8002be4:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002be8:	443a      	add	r2, r7
 8002bea:	4413      	add	r3, r2
 8002bec:	7818      	ldrb	r0, [r3, #0]
 8002bee:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002bf2:	443b      	add	r3, r7
 8002bf4:	6819      	ldr	r1, [r3, #0]
 8002bf6:	4b2e      	ldr	r3, [pc, #184]	; (8002cb0 <main+0xde4>)
 8002bf8:	fba3 2301 	umull	r2, r3, r3, r1
 8002bfc:	095a      	lsrs	r2, r3, #5
 8002bfe:	4613      	mov	r3, r2
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	1a9b      	subs	r3, r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	1aca      	subs	r2, r1, r3
 8002c08:	b2d3      	uxtb	r3, r2
 8002c0a:	4403      	add	r3, r0
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	4b24      	ldr	r3, [pc, #144]	; (8002ca0 <main+0xdd4>)
 8002c10:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002c14:	4439      	add	r1, r7
 8002c16:	440b      	add	r3, r1
 8002c18:	701a      	strb	r2, [r3, #0]
      //Write to SD Card
		  //date/time, CANID, Data
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002c1a:	4b26      	ldr	r3, [pc, #152]	; (8002cb4 <main+0xde8>)
 8002c1c:	789b      	ldrb	r3, [r3, #2]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002c1e:	469c      	mov	ip, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002c20:	4b24      	ldr	r3, [pc, #144]	; (8002cb4 <main+0xde8>)
 8002c22:	785b      	ldrb	r3, [r3, #1]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002c24:	469e      	mov	lr, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002c26:	4b23      	ldr	r3, [pc, #140]	; (8002cb4 <main+0xde8>)
 8002c28:	78db      	ldrb	r3, [r3, #3]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002c2a:	4619      	mov	r1, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002c2c:	4b1c      	ldr	r3, [pc, #112]	; (8002ca0 <main+0xdd4>)
 8002c2e:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002c32:	443a      	add	r2, r7
 8002c34:	4413      	add	r3, r2
 8002c36:	781b      	ldrb	r3, [r3, #0]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002c38:	461c      	mov	r4, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002c3a:	4b19      	ldr	r3, [pc, #100]	; (8002ca0 <main+0xdd4>)
 8002c3c:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002c40:	443a      	add	r2, r7
 8002c42:	4413      	add	r3, r2
 8002c44:	785b      	ldrb	r3, [r3, #1]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002c46:	461d      	mov	r5, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002c48:	4b15      	ldr	r3, [pc, #84]	; (8002ca0 <main+0xdd4>)
 8002c4a:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002c4e:	443a      	add	r2, r7
 8002c50:	4413      	add	r3, r2
 8002c52:	789b      	ldrb	r3, [r3, #2]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002c54:	461e      	mov	r6, r3
 8002c56:	4b12      	ldr	r3, [pc, #72]	; (8002ca0 <main+0xdd4>)
 8002c58:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002c5c:	443a      	add	r2, r7
 8002c5e:	4413      	add	r3, r2
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	4a11      	ldr	r2, [pc, #68]	; (8002ca8 <main+0xddc>)
 8002c64:	6812      	ldr	r2, [r2, #0]
 8002c66:	4814      	ldr	r0, [pc, #80]	; (8002cb8 <main+0xdec>)
 8002c68:	f641 5870 	movw	r8, #7536	; 0x1d70
 8002c6c:	44b8      	add	r8, r7
 8002c6e:	4440      	add	r0, r8
 8002c70:	9205      	str	r2, [sp, #20]
 8002c72:	9304      	str	r3, [sp, #16]
 8002c74:	9603      	str	r6, [sp, #12]
 8002c76:	9502      	str	r5, [sp, #8]
 8002c78:	9401      	str	r4, [sp, #4]
 8002c7a:	9100      	str	r1, [sp, #0]
 8002c7c:	4673      	mov	r3, lr
 8002c7e:	4662      	mov	r2, ip
 8002c80:	490e      	ldr	r1, [pc, #56]	; (8002cbc <main+0xdf0>)
 8002c82:	f016 fd81 	bl	8019788 <siprintf>
 8002c86:	f641 5368 	movw	r3, #7528	; 0x1d68
 8002c8a:	443b      	add	r3, r7
 8002c8c:	e018      	b.n	8002cc0 <main+0xdf4>
 8002c8e:	bf00      	nop
 8002c90:	24001450 	.word	0x24001450
 8002c94:	ffffeff0 	.word	0xffffeff0
 8002c98:	0801adf0 	.word	0x0801adf0
 8002c9c:	240001fc 	.word	0x240001fc
 8002ca0:	ffffe724 	.word	0xffffe724
 8002ca4:	24000b30 	.word	0x24000b30
 8002ca8:	24001040 	.word	0x24001040
 8002cac:	10624dd3 	.word	0x10624dd3
 8002cb0:	88888889 	.word	0x88888889
 8002cb4:	24000b44 	.word	0x24000b44
 8002cb8:	ffffe758 	.word	0xffffe758
 8002cbc:	0801adf4 	.word	0x0801adf4
 8002cc0:	6018      	str	r0, [r3, #0]
				  CanFDFrame.id);
		  for(int i = 0; i < CanFDFrame.length; i++){
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	f641 523c 	movw	r2, #7484	; 0x1d3c
 8002cc8:	443a      	add	r2, r7
 8002cca:	6013      	str	r3, [r2, #0]
 8002ccc:	e028      	b.n	8002d20 <main+0xe54>
			  CFDW += sprintf(CanFDWrite + CFDW, "%c", CanFDFrame.data.bytes[i]);
 8002cce:	f641 5368 	movw	r3, #7528	; 0x1d68
 8002cd2:	443b      	add	r3, r7
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	4b5e      	ldr	r3, [pc, #376]	; (8002e50 <main+0xf84>)
 8002cd8:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002cdc:	4439      	add	r1, r7
 8002cde:	440b      	add	r3, r1
 8002ce0:	1898      	adds	r0, r3, r2
 8002ce2:	4a5c      	ldr	r2, [pc, #368]	; (8002e54 <main+0xf88>)
 8002ce4:	f641 533c 	movw	r3, #7484	; 0x1d3c
 8002ce8:	443b      	add	r3, r7
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4413      	add	r3, r2
 8002cee:	3310      	adds	r3, #16
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	4958      	ldr	r1, [pc, #352]	; (8002e58 <main+0xf8c>)
 8002cf6:	f016 fd47 	bl	8019788 <siprintf>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	f641 5368 	movw	r3, #7528	; 0x1d68
 8002d00:	443b      	add	r3, r7
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4413      	add	r3, r2
 8002d06:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002d0a:	443a      	add	r2, r7
 8002d0c:	6013      	str	r3, [r2, #0]
		  for(int i = 0; i < CanFDFrame.length; i++){
 8002d0e:	f641 533c 	movw	r3, #7484	; 0x1d3c
 8002d12:	443b      	add	r3, r7
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	3301      	adds	r3, #1
 8002d18:	f641 523c 	movw	r2, #7484	; 0x1d3c
 8002d1c:	443a      	add	r2, r7
 8002d1e:	6013      	str	r3, [r2, #0]
 8002d20:	4b4c      	ldr	r3, [pc, #304]	; (8002e54 <main+0xf88>)
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	f641 533c 	movw	r3, #7484	; 0x1d3c
 8002d28:	443b      	add	r3, r7
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d8ce      	bhi.n	8002cce <main+0xe02>
		  }
		  CFDW += sprintf(CanFDWrite + CFDW, "\n\r");
 8002d30:	f641 5368 	movw	r3, #7528	; 0x1d68
 8002d34:	443b      	add	r3, r7
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	4b45      	ldr	r3, [pc, #276]	; (8002e50 <main+0xf84>)
 8002d3a:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002d3e:	4439      	add	r1, r7
 8002d40:	440b      	add	r3, r1
 8002d42:	4413      	add	r3, r2
 8002d44:	4a45      	ldr	r2, [pc, #276]	; (8002e5c <main+0xf90>)
 8002d46:	8811      	ldrh	r1, [r2, #0]
 8002d48:	7892      	ldrb	r2, [r2, #2]
 8002d4a:	8019      	strh	r1, [r3, #0]
 8002d4c:	709a      	strb	r2, [r3, #2]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	f641 5368 	movw	r3, #7528	; 0x1d68
 8002d54:	443b      	add	r3, r7
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4413      	add	r3, r2
 8002d5a:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002d5e:	443a      	add	r2, r7
 8002d60:	6013      	str	r3, [r2, #0]
		  WriteToBuff(CanFDWrite, CFDW);
 8002d62:	4b3b      	ldr	r3, [pc, #236]	; (8002e50 <main+0xf84>)
 8002d64:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002d68:	443a      	add	r2, r7
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002d70:	443a      	add	r2, r7
 8002d72:	6811      	ldr	r1, [r2, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff f801 	bl	8001d7c <WriteToBuff>

      //Write to telemetry buffer
      
      for(int i = 0; i <50; i++){
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	f641 5238 	movw	r2, #7480	; 0x1d38
 8002d80:	443a      	add	r2, r7
 8002d82:	6013      	str	r3, [r2, #0]
 8002d84:	e088      	b.n	8002e98 <main+0xfcc>
        if(CanFDFrame.id == Tele_IDs[i]){ //check if frame should be checked
 8002d86:	4b33      	ldr	r3, [pc, #204]	; (8002e54 <main+0xf88>)
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	4b35      	ldr	r3, [pc, #212]	; (8002e60 <main+0xf94>)
 8002d8c:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002d90:	4439      	add	r1, r7
 8002d92:	440b      	add	r3, r1
 8002d94:	f641 5138 	movw	r1, #7480	; 0x1d38
 8002d98:	4439      	add	r1, r7
 8002d9a:	6809      	ldr	r1, [r1, #0]
 8002d9c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d170      	bne.n	8002e86 <main+0xfba>
          for(int j = 0; j < 50; j++){
 8002da4:	2300      	movs	r3, #0
 8002da6:	f641 5234 	movw	r2, #7476	; 0x1d34
 8002daa:	443a      	add	r2, r7
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	e064      	b.n	8002e7a <main+0xfae>
            if(FDBuffer[j].id == CanFDFrame.id){
 8002db0:	4a2c      	ldr	r2, [pc, #176]	; (8002e64 <main+0xf98>)
 8002db2:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002db6:	443b      	add	r3, r7
 8002db8:	441a      	add	r2, r3
 8002dba:	f641 5334 	movw	r3, #7476	; 0x1d34
 8002dbe:	443b      	add	r3, r7
 8002dc0:	6819      	ldr	r1, [r3, #0]
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	440b      	add	r3, r1
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	4413      	add	r3, r2
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	4b21      	ldr	r3, [pc, #132]	; (8002e54 <main+0xf88>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d115      	bne.n	8002e02 <main+0xf36>
              FDBuffer[j] = CanFDFrame;
 8002dd6:	4a23      	ldr	r2, [pc, #140]	; (8002e64 <main+0xf98>)
 8002dd8:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002ddc:	443b      	add	r3, r7
 8002dde:	441a      	add	r2, r3
 8002de0:	f641 5334 	movw	r3, #7476	; 0x1d34
 8002de4:	443b      	add	r3, r7
 8002de6:	6819      	ldr	r1, [r3, #0]
 8002de8:	460b      	mov	r3, r1
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	011b      	lsls	r3, r3, #4
 8002df0:	4413      	add	r3, r2
 8002df2:	4a18      	ldr	r2, [pc, #96]	; (8002e54 <main+0xf88>)
 8002df4:	4618      	mov	r0, r3
 8002df6:	4611      	mov	r1, r2
 8002df8:	2350      	movs	r3, #80	; 0x50
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	f016 fb48 	bl	8019490 <memcpy>
              goto TeleDoneFD;
 8002e00:	e052      	b.n	8002ea8 <main+0xfdc>
            }
            if(FDBuffer[j].id == 0){
 8002e02:	4a18      	ldr	r2, [pc, #96]	; (8002e64 <main+0xf98>)
 8002e04:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002e08:	443b      	add	r3, r7
 8002e0a:	441a      	add	r2, r3
 8002e0c:	f641 5334 	movw	r3, #7476	; 0x1d34
 8002e10:	443b      	add	r3, r7
 8002e12:	6819      	ldr	r1, [r3, #0]
 8002e14:	460b      	mov	r3, r1
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	011b      	lsls	r3, r3, #4
 8002e1c:	4413      	add	r3, r2
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d121      	bne.n	8002e68 <main+0xf9c>
              FDBuffer[j] = CanFDFrame;
 8002e24:	4a0f      	ldr	r2, [pc, #60]	; (8002e64 <main+0xf98>)
 8002e26:	f641 5370 	movw	r3, #7536	; 0x1d70
 8002e2a:	443b      	add	r3, r7
 8002e2c:	441a      	add	r2, r3
 8002e2e:	f641 5334 	movw	r3, #7476	; 0x1d34
 8002e32:	443b      	add	r3, r7
 8002e34:	6819      	ldr	r1, [r3, #0]
 8002e36:	460b      	mov	r3, r1
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	4413      	add	r3, r2
 8002e40:	4a04      	ldr	r2, [pc, #16]	; (8002e54 <main+0xf88>)
 8002e42:	4618      	mov	r0, r3
 8002e44:	4611      	mov	r1, r2
 8002e46:	2350      	movs	r3, #80	; 0x50
 8002e48:	461a      	mov	r2, r3
 8002e4a:	f016 fb21 	bl	8019490 <memcpy>
              goto TeleDoneFD;
 8002e4e:	e02b      	b.n	8002ea8 <main+0xfdc>
 8002e50:	ffffe758 	.word	0xffffe758
 8002e54:	24001040 	.word	0x24001040
 8002e58:	0801adf0 	.word	0x0801adf0
 8002e5c:	0801ae10 	.word	0x0801ae10
 8002e60:	ffffea78 	.word	0xffffea78
 8002e64:	ffffeff0 	.word	0xffffeff0
          for(int j = 0; j < 50; j++){
 8002e68:	f641 5334 	movw	r3, #7476	; 0x1d34
 8002e6c:	443b      	add	r3, r7
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	3301      	adds	r3, #1
 8002e72:	f641 5234 	movw	r2, #7476	; 0x1d34
 8002e76:	443a      	add	r2, r7
 8002e78:	6013      	str	r3, [r2, #0]
 8002e7a:	f641 5334 	movw	r3, #7476	; 0x1d34
 8002e7e:	443b      	add	r3, r7
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2b31      	cmp	r3, #49	; 0x31
 8002e84:	dd94      	ble.n	8002db0 <main+0xee4>
      for(int i = 0; i <50; i++){
 8002e86:	f641 5338 	movw	r3, #7480	; 0x1d38
 8002e8a:	443b      	add	r3, r7
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	f641 5238 	movw	r2, #7480	; 0x1d38
 8002e94:	443a      	add	r2, r7
 8002e96:	6013      	str	r3, [r2, #0]
 8002e98:	f641 5338 	movw	r3, #7480	; 0x1d38
 8002e9c:	443b      	add	r3, r7
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2b31      	cmp	r3, #49	; 0x31
 8002ea2:	f77f af70 	ble.w	8002d86 <main+0xeba>
            }
          }
        }
      }
TeleDoneFD:
 8002ea6:	bf00      	nop
		  FDCAN_Flag = 0;
 8002ea8:	4bae      	ldr	r3, [pc, #696]	; (8003164 <main+0x1298>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]
	  }
	  if(CAN_Flag){
 8002eae:	4bae      	ldr	r3, [pc, #696]	; (8003168 <main+0x129c>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f000 81df 	beq.w	8003276 <main+0x13aa>

		  RTC_TimeTypeDef lTime = sTime;
 8002eb8:	4bac      	ldr	r3, [pc, #688]	; (800316c <main+0x12a0>)
 8002eba:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002ebe:	443a      	add	r2, r7
 8002ec0:	4413      	add	r3, r2
 8002ec2:	4aab      	ldr	r2, [pc, #684]	; (8003170 <main+0x12a4>)
 8002ec4:	461c      	mov	r4, r3
 8002ec6:	4615      	mov	r5, r2
 8002ec8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002eca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ecc:	682b      	ldr	r3, [r5, #0]
 8002ece:	6023      	str	r3, [r4, #0]
		  LocalTime = CanFrame.time;
 8002ed0:	4ba8      	ldr	r3, [pc, #672]	; (8003174 <main+0x12a8>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002ed8:	443a      	add	r2, r7
 8002eda:	6013      	str	r3, [r2, #0]
		  lTime.SubSeconds += LocalTime % 1000;
 8002edc:	4ba3      	ldr	r3, [pc, #652]	; (800316c <main+0x12a0>)
 8002ede:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002ee2:	443a      	add	r2, r7
 8002ee4:	4413      	add	r3, r2
 8002ee6:	6859      	ldr	r1, [r3, #4]
 8002ee8:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002eec:	443b      	add	r3, r7
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	4ba1      	ldr	r3, [pc, #644]	; (8003178 <main+0x12ac>)
 8002ef2:	fba3 0302 	umull	r0, r3, r3, r2
 8002ef6:	099b      	lsrs	r3, r3, #6
 8002ef8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002efc:	fb00 f303 	mul.w	r3, r0, r3
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	18ca      	adds	r2, r1, r3
 8002f04:	4b99      	ldr	r3, [pc, #612]	; (800316c <main+0x12a0>)
 8002f06:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002f0a:	4439      	add	r1, r7
 8002f0c:	440b      	add	r3, r1
 8002f0e:	605a      	str	r2, [r3, #4]
		  LocalTime = LocalTime/1000;
 8002f10:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002f14:	443b      	add	r3, r7
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a97      	ldr	r2, [pc, #604]	; (8003178 <main+0x12ac>)
 8002f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1e:	099b      	lsrs	r3, r3, #6
 8002f20:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002f24:	443a      	add	r2, r7
 8002f26:	6013      	str	r3, [r2, #0]
		  lTime.Seconds += LocalTime % 60;
 8002f28:	4b90      	ldr	r3, [pc, #576]	; (800316c <main+0x12a0>)
 8002f2a:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002f2e:	443a      	add	r2, r7
 8002f30:	4413      	add	r3, r2
 8002f32:	7898      	ldrb	r0, [r3, #2]
 8002f34:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002f38:	443b      	add	r3, r7
 8002f3a:	6819      	ldr	r1, [r3, #0]
 8002f3c:	4b8f      	ldr	r3, [pc, #572]	; (800317c <main+0x12b0>)
 8002f3e:	fba3 2301 	umull	r2, r3, r3, r1
 8002f42:	095a      	lsrs	r2, r3, #5
 8002f44:	4613      	mov	r3, r2
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	1a9b      	subs	r3, r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	1aca      	subs	r2, r1, r3
 8002f4e:	b2d3      	uxtb	r3, r2
 8002f50:	4403      	add	r3, r0
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	4b85      	ldr	r3, [pc, #532]	; (800316c <main+0x12a0>)
 8002f56:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002f5a:	4439      	add	r1, r7
 8002f5c:	440b      	add	r3, r1
 8002f5e:	709a      	strb	r2, [r3, #2]
		  LocalTime = LocalTime/60;
 8002f60:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002f64:	443b      	add	r3, r7
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a84      	ldr	r2, [pc, #528]	; (800317c <main+0x12b0>)
 8002f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6e:	095b      	lsrs	r3, r3, #5
 8002f70:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002f74:	443a      	add	r2, r7
 8002f76:	6013      	str	r3, [r2, #0]
		  lTime.Minutes += LocalTime % 60;
 8002f78:	4b7c      	ldr	r3, [pc, #496]	; (800316c <main+0x12a0>)
 8002f7a:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002f7e:	443a      	add	r2, r7
 8002f80:	4413      	add	r3, r2
 8002f82:	7858      	ldrb	r0, [r3, #1]
 8002f84:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002f88:	443b      	add	r3, r7
 8002f8a:	6819      	ldr	r1, [r3, #0]
 8002f8c:	4b7b      	ldr	r3, [pc, #492]	; (800317c <main+0x12b0>)
 8002f8e:	fba3 2301 	umull	r2, r3, r3, r1
 8002f92:	095a      	lsrs	r2, r3, #5
 8002f94:	4613      	mov	r3, r2
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	1a9b      	subs	r3, r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	1aca      	subs	r2, r1, r3
 8002f9e:	b2d3      	uxtb	r3, r2
 8002fa0:	4403      	add	r3, r0
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	4b71      	ldr	r3, [pc, #452]	; (800316c <main+0x12a0>)
 8002fa6:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002faa:	4439      	add	r1, r7
 8002fac:	440b      	add	r3, r1
 8002fae:	705a      	strb	r2, [r3, #1]
		  LocalTime = LocalTime/60;
 8002fb0:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002fb4:	443b      	add	r3, r7
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a70      	ldr	r2, [pc, #448]	; (800317c <main+0x12b0>)
 8002fba:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbe:	095b      	lsrs	r3, r3, #5
 8002fc0:	f641 5218 	movw	r2, #7448	; 0x1d18
 8002fc4:	443a      	add	r2, r7
 8002fc6:	6013      	str	r3, [r2, #0]
		  lTime.Hours += LocalTime % 60;
 8002fc8:	4b68      	ldr	r3, [pc, #416]	; (800316c <main+0x12a0>)
 8002fca:	f641 5270 	movw	r2, #7536	; 0x1d70
 8002fce:	443a      	add	r2, r7
 8002fd0:	4413      	add	r3, r2
 8002fd2:	7818      	ldrb	r0, [r3, #0]
 8002fd4:	f641 5318 	movw	r3, #7448	; 0x1d18
 8002fd8:	443b      	add	r3, r7
 8002fda:	6819      	ldr	r1, [r3, #0]
 8002fdc:	4b67      	ldr	r3, [pc, #412]	; (800317c <main+0x12b0>)
 8002fde:	fba3 2301 	umull	r2, r3, r3, r1
 8002fe2:	095a      	lsrs	r2, r3, #5
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	1a9b      	subs	r3, r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	1aca      	subs	r2, r1, r3
 8002fee:	b2d3      	uxtb	r3, r2
 8002ff0:	4403      	add	r3, r0
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	4b5d      	ldr	r3, [pc, #372]	; (800316c <main+0x12a0>)
 8002ff6:	f641 5170 	movw	r1, #7536	; 0x1d70
 8002ffa:	4439      	add	r1, r7
 8002ffc:	440b      	add	r3, r1
 8002ffe:	701a      	strb	r2, [r3, #0]

		  //date/time, CANID, Data
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8003000:	4b5f      	ldr	r3, [pc, #380]	; (8003180 <main+0x12b4>)
 8003002:	789b      	ldrb	r3, [r3, #2]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8003004:	469c      	mov	ip, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8003006:	4b5e      	ldr	r3, [pc, #376]	; (8003180 <main+0x12b4>)
 8003008:	785b      	ldrb	r3, [r3, #1]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 800300a:	469e      	mov	lr, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 800300c:	4b5c      	ldr	r3, [pc, #368]	; (8003180 <main+0x12b4>)
 800300e:	78db      	ldrb	r3, [r3, #3]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8003010:	4619      	mov	r1, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8003012:	4b56      	ldr	r3, [pc, #344]	; (800316c <main+0x12a0>)
 8003014:	f641 5270 	movw	r2, #7536	; 0x1d70
 8003018:	443a      	add	r2, r7
 800301a:	4413      	add	r3, r2
 800301c:	781b      	ldrb	r3, [r3, #0]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 800301e:	461c      	mov	r4, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8003020:	4b52      	ldr	r3, [pc, #328]	; (800316c <main+0x12a0>)
 8003022:	f641 5270 	movw	r2, #7536	; 0x1d70
 8003026:	443a      	add	r2, r7
 8003028:	4413      	add	r3, r2
 800302a:	785b      	ldrb	r3, [r3, #1]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 800302c:	461d      	mov	r5, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 800302e:	4b4f      	ldr	r3, [pc, #316]	; (800316c <main+0x12a0>)
 8003030:	f641 5270 	movw	r2, #7536	; 0x1d70
 8003034:	443a      	add	r2, r7
 8003036:	4413      	add	r3, r2
 8003038:	789b      	ldrb	r3, [r3, #2]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 800303a:	461e      	mov	r6, r3
 800303c:	4b4b      	ldr	r3, [pc, #300]	; (800316c <main+0x12a0>)
 800303e:	f641 5270 	movw	r2, #7536	; 0x1d70
 8003042:	443a      	add	r2, r7
 8003044:	4413      	add	r3, r2
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	4a4a      	ldr	r2, [pc, #296]	; (8003174 <main+0x12a8>)
 800304a:	6812      	ldr	r2, [r2, #0]
 800304c:	484d      	ldr	r0, [pc, #308]	; (8003184 <main+0x12b8>)
 800304e:	f641 5870 	movw	r8, #7536	; 0x1d70
 8003052:	44b8      	add	r8, r7
 8003054:	4440      	add	r0, r8
 8003056:	9205      	str	r2, [sp, #20]
 8003058:	9304      	str	r3, [sp, #16]
 800305a:	9603      	str	r6, [sp, #12]
 800305c:	9502      	str	r5, [sp, #8]
 800305e:	9401      	str	r4, [sp, #4]
 8003060:	9100      	str	r1, [sp, #0]
 8003062:	4673      	mov	r3, lr
 8003064:	4662      	mov	r2, ip
 8003066:	4948      	ldr	r1, [pc, #288]	; (8003188 <main+0x12bc>)
 8003068:	f016 fb8e 	bl	8019788 <siprintf>
 800306c:	f641 536c 	movw	r3, #7532	; 0x1d6c
 8003070:	443b      	add	r3, r7
 8003072:	6018      	str	r0, [r3, #0]
				  CanFrame.id);
		  for(int i = 0; i < CanFDFrame.length; i++){
 8003074:	2300      	movs	r3, #0
 8003076:	f641 5230 	movw	r2, #7472	; 0x1d30
 800307a:	443a      	add	r2, r7
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	e028      	b.n	80030d2 <main+0x1206>
			  CW += sprintf(CanWrite + CW, "%c", CanFrame.data.bytes[i]);
 8003080:	f641 536c 	movw	r3, #7532	; 0x1d6c
 8003084:	443b      	add	r3, r7
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	4b3e      	ldr	r3, [pc, #248]	; (8003184 <main+0x12b8>)
 800308a:	f641 5170 	movw	r1, #7536	; 0x1d70
 800308e:	4439      	add	r1, r7
 8003090:	440b      	add	r3, r1
 8003092:	1898      	adds	r0, r3, r2
 8003094:	4a37      	ldr	r2, [pc, #220]	; (8003174 <main+0x12a8>)
 8003096:	f641 5330 	movw	r3, #7472	; 0x1d30
 800309a:	443b      	add	r3, r7
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4413      	add	r3, r2
 80030a0:	3310      	adds	r3, #16
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	461a      	mov	r2, r3
 80030a6:	4939      	ldr	r1, [pc, #228]	; (800318c <main+0x12c0>)
 80030a8:	f016 fb6e 	bl	8019788 <siprintf>
 80030ac:	4602      	mov	r2, r0
 80030ae:	f641 536c 	movw	r3, #7532	; 0x1d6c
 80030b2:	443b      	add	r3, r7
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4413      	add	r3, r2
 80030b8:	f641 526c 	movw	r2, #7532	; 0x1d6c
 80030bc:	443a      	add	r2, r7
 80030be:	6013      	str	r3, [r2, #0]
		  for(int i = 0; i < CanFDFrame.length; i++){
 80030c0:	f641 5330 	movw	r3, #7472	; 0x1d30
 80030c4:	443b      	add	r3, r7
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	3301      	adds	r3, #1
 80030ca:	f641 5230 	movw	r2, #7472	; 0x1d30
 80030ce:	443a      	add	r2, r7
 80030d0:	6013      	str	r3, [r2, #0]
 80030d2:	4b2f      	ldr	r3, [pc, #188]	; (8003190 <main+0x12c4>)
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	f641 5330 	movw	r3, #7472	; 0x1d30
 80030da:	443b      	add	r3, r7
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d8ce      	bhi.n	8003080 <main+0x11b4>
		  }
		  CW += sprintf(CanWrite + CW, "\n\r");
 80030e2:	f641 536c 	movw	r3, #7532	; 0x1d6c
 80030e6:	443b      	add	r3, r7
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	4b26      	ldr	r3, [pc, #152]	; (8003184 <main+0x12b8>)
 80030ec:	f641 5170 	movw	r1, #7536	; 0x1d70
 80030f0:	4439      	add	r1, r7
 80030f2:	440b      	add	r3, r1
 80030f4:	4413      	add	r3, r2
 80030f6:	4a27      	ldr	r2, [pc, #156]	; (8003194 <main+0x12c8>)
 80030f8:	8811      	ldrh	r1, [r2, #0]
 80030fa:	7892      	ldrb	r2, [r2, #2]
 80030fc:	8019      	strh	r1, [r3, #0]
 80030fe:	709a      	strb	r2, [r3, #2]
 8003100:	2202      	movs	r2, #2
 8003102:	f641 536c 	movw	r3, #7532	; 0x1d6c
 8003106:	443b      	add	r3, r7
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4413      	add	r3, r2
 800310c:	f641 526c 	movw	r2, #7532	; 0x1d6c
 8003110:	443a      	add	r2, r7
 8003112:	6013      	str	r3, [r2, #0]
		  WriteToBuff(CanWrite, CW);
 8003114:	4b1b      	ldr	r3, [pc, #108]	; (8003184 <main+0x12b8>)
 8003116:	f641 5270 	movw	r2, #7536	; 0x1d70
 800311a:	443a      	add	r2, r7
 800311c:	4413      	add	r3, r2
 800311e:	f641 526c 	movw	r2, #7532	; 0x1d6c
 8003122:	443a      	add	r2, r7
 8003124:	6811      	ldr	r1, [r2, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f7fe fe28 	bl	8001d7c <WriteToBuff>

      for(int i = 0; i <50; i++){
 800312c:	2300      	movs	r3, #0
 800312e:	f641 522c 	movw	r2, #7468	; 0x1d2c
 8003132:	443a      	add	r2, r7
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	e091      	b.n	800325c <main+0x1390>
        if(CanFrame.id == Tele_IDs[i]){ //check if frame should be checked
 8003138:	4b0e      	ldr	r3, [pc, #56]	; (8003174 <main+0x12a8>)
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	4b16      	ldr	r3, [pc, #88]	; (8003198 <main+0x12cc>)
 800313e:	f641 5170 	movw	r1, #7536	; 0x1d70
 8003142:	4439      	add	r1, r7
 8003144:	440b      	add	r3, r1
 8003146:	f641 512c 	movw	r1, #7468	; 0x1d2c
 800314a:	4439      	add	r1, r7
 800314c:	6809      	ldr	r1, [r1, #0]
 800314e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003152:	429a      	cmp	r2, r3
 8003154:	d179      	bne.n	800324a <main+0x137e>
          for(int j = 0; j < 50; j++){
 8003156:	2300      	movs	r3, #0
 8003158:	f641 5228 	movw	r2, #7464	; 0x1d28
 800315c:	443a      	add	r2, r7
 800315e:	6013      	str	r3, [r2, #0]
 8003160:	e06d      	b.n	800323e <main+0x1372>
 8003162:	bf00      	nop
 8003164:	240001fc 	.word	0x240001fc
 8003168:	24000200 	.word	0x24000200
 800316c:	ffffe710 	.word	0xffffe710
 8003170:	24000b30 	.word	0x24000b30
 8003174:	240010b8 	.word	0x240010b8
 8003178:	10624dd3 	.word	0x10624dd3
 800317c:	88888889 	.word	0x88888889
 8003180:	24000b44 	.word	0x24000b44
 8003184:	ffffe8e8 	.word	0xffffe8e8
 8003188:	0801adf4 	.word	0x0801adf4
 800318c:	0801adf0 	.word	0x0801adf0
 8003190:	24001040 	.word	0x24001040
 8003194:	0801ae10 	.word	0x0801ae10
 8003198:	ffffea78 	.word	0xffffea78
            if(Buffer[j].id == CanFrame.id){
 800319c:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 80031a0:	f641 5328 	movw	r3, #7464	; 0x1d28
 80031a4:	443b      	add	r3, r7
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	4613      	mov	r3, r2
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	4413      	add	r3, r2
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	440b      	add	r3, r1
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	4b5a      	ldr	r3, [pc, #360]	; (8003320 <main+0x1454>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d114      	bne.n	80031e6 <main+0x131a>
              Buffer[j] = CanFrame;     //if its already in the buffer replace it
 80031bc:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 80031c0:	f641 5328 	movw	r3, #7464	; 0x1d28
 80031c4:	443b      	add	r3, r7
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	4613      	mov	r3, r2
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	4413      	add	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	440b      	add	r3, r1
 80031d2:	4a53      	ldr	r2, [pc, #332]	; (8003320 <main+0x1454>)
 80031d4:	461c      	mov	r4, r3
 80031d6:	4615      	mov	r5, r2
 80031d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80031e0:	e884 0003 	stmia.w	r4, {r0, r1}
              goto TeleDone;
 80031e4:	e044      	b.n	8003270 <main+0x13a4>
            }
            if(Buffer[j].id == 0){
 80031e6:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 80031ea:	f641 5328 	movw	r3, #7464	; 0x1d28
 80031ee:	443b      	add	r3, r7
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	4613      	mov	r3, r2
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	4413      	add	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	440b      	add	r3, r1
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d114      	bne.n	800322c <main+0x1360>
              Buffer[j] = CanFrame;     //if you get to the end of the defined packets withoout finding anything add the packet on the end
 8003202:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8003206:	f641 5328 	movw	r3, #7464	; 0x1d28
 800320a:	443b      	add	r3, r7
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	4613      	mov	r3, r2
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	4413      	add	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	440b      	add	r3, r1
 8003218:	4a41      	ldr	r2, [pc, #260]	; (8003320 <main+0x1454>)
 800321a:	461c      	mov	r4, r3
 800321c:	4615      	mov	r5, r2
 800321e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003220:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003222:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003226:	e884 0003 	stmia.w	r4, {r0, r1}
              goto TeleDone;
 800322a:	e021      	b.n	8003270 <main+0x13a4>
          for(int j = 0; j < 50; j++){
 800322c:	f641 5328 	movw	r3, #7464	; 0x1d28
 8003230:	443b      	add	r3, r7
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	3301      	adds	r3, #1
 8003236:	f641 5228 	movw	r2, #7464	; 0x1d28
 800323a:	443a      	add	r2, r7
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	f641 5328 	movw	r3, #7464	; 0x1d28
 8003242:	443b      	add	r3, r7
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2b31      	cmp	r3, #49	; 0x31
 8003248:	dda8      	ble.n	800319c <main+0x12d0>
      for(int i = 0; i <50; i++){
 800324a:	f641 532c 	movw	r3, #7468	; 0x1d2c
 800324e:	443b      	add	r3, r7
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	3301      	adds	r3, #1
 8003254:	f641 522c 	movw	r2, #7468	; 0x1d2c
 8003258:	443a      	add	r2, r7
 800325a:	6013      	str	r3, [r2, #0]
 800325c:	f641 532c 	movw	r3, #7468	; 0x1d2c
 8003260:	443b      	add	r3, r7
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b31      	cmp	r3, #49	; 0x31
 8003266:	f77f af67 	ble.w	8003138 <main+0x126c>
            }
          }
        }
      }
      printf("couldnt track, id buffer too full :(");
 800326a:	482e      	ldr	r0, [pc, #184]	; (8003324 <main+0x1458>)
 800326c:	f016 f9cc 	bl	8019608 <iprintf>
TeleDone:
		  CAN_Flag = 0;
 8003270:	4b2d      	ldr	r3, [pc, #180]	; (8003328 <main+0x145c>)
 8003272:	2200      	movs	r2, #0
 8003274:	601a      	str	r2, [r3, #0]
	  }
	  //WriteToBuff(A, 2);
	  //HAL_Delay(1000);
	  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
    /* USER CODE END WHILE */
    EndTime = HAL_GetTick();
 8003276:	f001 f9b5 	bl	80045e4 <HAL_GetTick>
 800327a:	f641 5308 	movw	r3, #7432	; 0x1d08
 800327e:	443b      	add	r3, r7
 8003280:	6018      	str	r0, [r3, #0]
    if(StartTime - EndTime > LoopTime + 5){
 8003282:	f641 530c 	movw	r3, #7436	; 0x1d0c
 8003286:	443b      	add	r3, r7
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	f641 5308 	movw	r3, #7432	; 0x1d08
 800328e:	443b      	add	r3, r7
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	1ad2      	subs	r2, r2, r3
 8003294:	f641 5310 	movw	r3, #7440	; 0x1d10
 8003298:	443b      	add	r3, r7
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	3305      	adds	r3, #5
 800329e:	429a      	cmp	r2, r3
 80032a0:	d909      	bls.n	80032b6 <main+0x13ea>
      AllowedTele--;
 80032a2:	f641 5364 	movw	r3, #7524	; 0x1d64
 80032a6:	443b      	add	r3, r7
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	f641 5264 	movw	r2, #7524	; 0x1d64
 80032b0:	443a      	add	r2, r7
 80032b2:	6013      	str	r3, [r2, #0]
 80032b4:	e017      	b.n	80032e6 <main+0x141a>
    }else if(StartTime - EndTime < LoopTime){
 80032b6:	f641 530c 	movw	r3, #7436	; 0x1d0c
 80032ba:	443b      	add	r3, r7
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	f641 5308 	movw	r3, #7432	; 0x1d08
 80032c2:	443b      	add	r3, r7
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	f641 5210 	movw	r2, #7440	; 0x1d10
 80032cc:	443a      	add	r2, r7
 80032ce:	6812      	ldr	r2, [r2, #0]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d908      	bls.n	80032e6 <main+0x141a>
      AllowedTele++;
 80032d4:	f641 5364 	movw	r3, #7524	; 0x1d64
 80032d8:	443b      	add	r3, r7
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	3301      	adds	r3, #1
 80032de:	f641 5264 	movw	r2, #7524	; 0x1d64
 80032e2:	443a      	add	r2, r7
 80032e4:	6013      	str	r3, [r2, #0]
    }if (AllowedTele<1){
 80032e6:	f641 5364 	movw	r3, #7524	; 0x1d64
 80032ea:	443b      	add	r3, r7
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	dc04      	bgt.n	80032fc <main+0x1430>
    	AllowedTele = 1;
 80032f2:	2301      	movs	r3, #1
 80032f4:	f641 5264 	movw	r2, #7524	; 0x1d64
 80032f8:	443a      	add	r2, r7
 80032fa:	6013      	str	r3, [r2, #0]
  while (end_flag){
 80032fc:	4b0b      	ldr	r3, [pc, #44]	; (800332c <main+0x1460>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	f47f a91f 	bne.w	8002544 <main+0x678>
    /* USER CODE BEGIN 3 */
}

    //f_write(&myFILE, close_msg, strlen(close_msg), &testByte);
    //f_close(&myFILE);
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8003306:	2101      	movs	r1, #1
 8003308:	4809      	ldr	r0, [pc, #36]	; (8003330 <main+0x1464>)
 800330a:	f004 feaa 	bl	8008062 <HAL_GPIO_TogglePin>
 800330e:	2300      	movs	r3, #0
    //printf("File closed\n");

  /* USER CODE END 3 */
}
 8003310:	4618      	mov	r0, r3
 8003312:	f507 57eb 	add.w	r7, r7, #7520	; 0x1d60
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800331e:	bf00      	nop
 8003320:	240010b8 	.word	0x240010b8
 8003324:	0801ae14 	.word	0x0801ae14
 8003328:	24000200 	.word	0x24000200
 800332c:	24000008 	.word	0x24000008
 8003330:	58020400 	.word	0x58020400

08003334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b0cc      	sub	sp, #304	; 0x130
 8003338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800333a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800333e:	224c      	movs	r2, #76	; 0x4c
 8003340:	2100      	movs	r1, #0
 8003342:	4618      	mov	r0, r3
 8003344:	f016 f8af 	bl	80194a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003348:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800334c:	2220      	movs	r2, #32
 800334e:	2100      	movs	r1, #0
 8003350:	4618      	mov	r0, r3
 8003352:	f016 f8a8 	bl	80194a6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003356:	f107 0308 	add.w	r3, r7, #8
 800335a:	4618      	mov	r0, r3
 800335c:	23bc      	movs	r3, #188	; 0xbc
 800335e:	461a      	mov	r2, r3
 8003360:	2100      	movs	r1, #0
 8003362:	f016 f8a0 	bl	80194a6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003366:	2002      	movs	r0, #2
 8003368:	f006 f976 	bl	8009658 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800336c:	1d3b      	adds	r3, r7, #4
 800336e:	2200      	movs	r2, #0
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	4b71      	ldr	r3, [pc, #452]	; (8003538 <SystemClock_Config+0x204>)
 8003374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003376:	4a70      	ldr	r2, [pc, #448]	; (8003538 <SystemClock_Config+0x204>)
 8003378:	f023 0301 	bic.w	r3, r3, #1
 800337c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800337e:	4b6e      	ldr	r3, [pc, #440]	; (8003538 <SystemClock_Config+0x204>)
 8003380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003382:	f003 0201 	and.w	r2, r3, #1
 8003386:	1d3b      	adds	r3, r7, #4
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	4b6c      	ldr	r3, [pc, #432]	; (800353c <SystemClock_Config+0x208>)
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	4a6b      	ldr	r2, [pc, #428]	; (800353c <SystemClock_Config+0x208>)
 8003390:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003394:	6193      	str	r3, [r2, #24]
 8003396:	4b69      	ldr	r3, [pc, #420]	; (800353c <SystemClock_Config+0x208>)
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800339e:	1d3b      	adds	r3, r7, #4
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	1d3b      	adds	r3, r7, #4
 80033a4:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80033a6:	bf00      	nop
 80033a8:	4b64      	ldr	r3, [pc, #400]	; (800353c <SystemClock_Config+0x208>)
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033b4:	d1f8      	bne.n	80033a8 <SystemClock_Config+0x74>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80033b6:	f006 f8b5 	bl	8009524 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 80033ba:	f001 f941 	bl	8004640 <HAL_GetREVID>
 80033be:	4b60      	ldr	r3, [pc, #384]	; (8003540 <SystemClock_Config+0x20c>)
 80033c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c2:	4a5f      	ldr	r2, [pc, #380]	; (8003540 <SystemClock_Config+0x20c>)
 80033c4:	f043 0318 	orr.w	r3, r3, #24
 80033c8:	6713      	str	r3, [r2, #112]	; 0x70
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80033ca:	4b5d      	ldr	r3, [pc, #372]	; (8003540 <SystemClock_Config+0x20c>)
 80033cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ce:	f023 0303 	bic.w	r3, r3, #3
 80033d2:	4a5b      	ldr	r2, [pc, #364]	; (8003540 <SystemClock_Config+0x20c>)
 80033d4:	f043 0302 	orr.w	r3, r3, #2
 80033d8:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 80033da:	2325      	movs	r3, #37	; 0x25
 80033dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80033e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80033e8:	2301      	movs	r3, #1
 80033ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80033ee:	2301      	movs	r3, #1
 80033f0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033f4:	2302      	movs	r3, #2
 80033f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80033fa:	2302      	movs	r3, #2
 80033fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8003400:	2302      	movs	r3, #2
 8003402:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 64;
 8003406:	2340      	movs	r3, #64	; 0x40
 8003408:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800340c:	2302      	movs	r3, #2
 800340e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8003412:	230a      	movs	r3, #10
 8003414:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003418:	2302      	movs	r3, #2
 800341a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800341e:	230c      	movs	r3, #12
 8003420:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003424:	2300      	movs	r3, #0
 8003426:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800342a:	2300      	movs	r3, #0
 800342c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003430:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003434:	4618      	mov	r0, r3
 8003436:	f006 f99d 	bl	8009774 <HAL_RCC_OscConfig>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8003440:	f000 fbe8 	bl	8003c14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003444:	233f      	movs	r3, #63	; 0x3f
 8003446:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800344a:	2303      	movs	r3, #3
 800344c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003450:	2300      	movs	r3, #0
 8003452:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003456:	2308      	movs	r3, #8
 8003458:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800345c:	2340      	movs	r3, #64	; 0x40
 800345e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003462:	2340      	movs	r3, #64	; 0x40
 8003464:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003468:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800346c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003470:	2340      	movs	r3, #64	; 0x40
 8003472:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003476:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800347a:	2102      	movs	r1, #2
 800347c:	4618      	mov	r0, r3
 800347e:	f006 fd89 	bl	8009f94 <HAL_RCC_ClockConfig>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <SystemClock_Config+0x158>
  {
    Error_Handler();
 8003488:	f000 fbc4 	bl	8003c14 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 800348c:	f107 0308 	add.w	r3, r7, #8
 8003490:	4a2c      	ldr	r2, [pc, #176]	; (8003544 <SystemClock_Config+0x210>)
 8003492:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_FDCAN|RCC_PERIPHCLK_UART8
                              |RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8003494:	f107 0308 	add.w	r3, r7, #8
 8003498:	2202      	movs	r2, #2
 800349a:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 800349c:	f107 0308 	add.w	r3, r7, #8
 80034a0:	220c      	movs	r2, #12
 80034a2:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 80034a4:	f107 0308 	add.w	r3, r7, #8
 80034a8:	2203      	movs	r2, #3
 80034aa:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80034ac:	f107 0308 	add.w	r3, r7, #8
 80034b0:	2202      	movs	r2, #2
 80034b2:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 3;
 80034b4:	f107 0308 	add.w	r3, r7, #8
 80034b8:	2203      	movs	r2, #3
 80034ba:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80034bc:	f107 0308 	add.w	r3, r7, #8
 80034c0:	22c0      	movs	r2, #192	; 0xc0
 80034c2:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80034c4:	f107 0308 	add.w	r3, r7, #8
 80034c8:	2220      	movs	r2, #32
 80034ca:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80034cc:	f107 0308 	add.w	r3, r7, #8
 80034d0:	2200      	movs	r2, #0
 80034d2:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80034d4:	f107 0308 	add.w	r3, r7, #8
 80034d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80034dc:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80034de:	f107 0308 	add.w	r3, r7, #8
 80034e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034e6:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80034e8:	f107 0308 	add.w	r3, r7, #8
 80034ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034f0:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80034f2:	f107 0308 	add.w	r3, r7, #8
 80034f6:	2200      	movs	r2, #0
 80034f8:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80034fa:	f107 0308 	add.w	r3, r7, #8
 80034fe:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8003502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003506:	f107 0308 	add.w	r3, r7, #8
 800350a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800350e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003512:	f107 0308 	add.w	r3, r7, #8
 8003516:	4618      	mov	r0, r3
 8003518:	f007 f8ec 	bl	800a6f4 <HAL_RCCEx_PeriphCLKConfig>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <SystemClock_Config+0x1f2>
  {
    Error_Handler();
 8003522:	f000 fb77 	bl	8003c14 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8003526:	f006 feeb 	bl	800a300 <HAL_RCC_EnableCSS>
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 800352a:	f006 f8cf 	bl	80096cc <HAL_PWREx_EnableUSBVoltageDetector>
}
 800352e:	bf00      	nop
 8003530:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	58000400 	.word	0x58000400
 800353c:	58024800 	.word	0x58024800
 8003540:	58024400 	.word	0x58024400
 8003544:	00459002 	.word	0x00459002

08003548 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800354c:	4b2f      	ldr	r3, [pc, #188]	; (800360c <MX_FDCAN1_Init+0xc4>)
 800354e:	4a30      	ldr	r2, [pc, #192]	; (8003610 <MX_FDCAN1_Init+0xc8>)
 8003550:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8003552:	4b2e      	ldr	r3, [pc, #184]	; (800360c <MX_FDCAN1_Init+0xc4>)
 8003554:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003558:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800355a:	4b2c      	ldr	r3, [pc, #176]	; (800360c <MX_FDCAN1_Init+0xc4>)
 800355c:	2200      	movs	r2, #0
 800355e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8003560:	4b2a      	ldr	r3, [pc, #168]	; (800360c <MX_FDCAN1_Init+0xc4>)
 8003562:	2200      	movs	r2, #0
 8003564:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8003566:	4b29      	ldr	r3, [pc, #164]	; (800360c <MX_FDCAN1_Init+0xc4>)
 8003568:	2200      	movs	r2, #0
 800356a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800356c:	4b27      	ldr	r3, [pc, #156]	; (800360c <MX_FDCAN1_Init+0xc4>)
 800356e:	2200      	movs	r2, #0
 8003570:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8003572:	4b26      	ldr	r3, [pc, #152]	; (800360c <MX_FDCAN1_Init+0xc4>)
 8003574:	2201      	movs	r2, #1
 8003576:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 23;
 8003578:	4b24      	ldr	r3, [pc, #144]	; (800360c <MX_FDCAN1_Init+0xc4>)
 800357a:	2217      	movs	r2, #23
 800357c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 56;
 800357e:	4b23      	ldr	r3, [pc, #140]	; (800360c <MX_FDCAN1_Init+0xc4>)
 8003580:	2238      	movs	r2, #56	; 0x38
 8003582:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 23;
 8003584:	4b21      	ldr	r3, [pc, #132]	; (800360c <MX_FDCAN1_Init+0xc4>)
 8003586:	2217      	movs	r2, #23
 8003588:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800358a:	4b20      	ldr	r3, [pc, #128]	; (800360c <MX_FDCAN1_Init+0xc4>)
 800358c:	2201      	movs	r2, #1
 800358e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 5;
 8003590:	4b1e      	ldr	r3, [pc, #120]	; (800360c <MX_FDCAN1_Init+0xc4>)
 8003592:	2205      	movs	r2, #5
 8003594:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 8003596:	4b1d      	ldr	r3, [pc, #116]	; (800360c <MX_FDCAN1_Init+0xc4>)
 8003598:	220a      	movs	r2, #10
 800359a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 800359c:	4b1b      	ldr	r3, [pc, #108]	; (800360c <MX_FDCAN1_Init+0xc4>)
 800359e:	2205      	movs	r2, #5
 80035a0:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80035a2:	4b1a      	ldr	r3, [pc, #104]	; (800360c <MX_FDCAN1_Init+0xc4>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 2;
 80035a8:	4b18      	ldr	r3, [pc, #96]	; (800360c <MX_FDCAN1_Init+0xc4>)
 80035aa:	2202      	movs	r2, #2
 80035ac:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 2;
 80035ae:	4b17      	ldr	r3, [pc, #92]	; (800360c <MX_FDCAN1_Init+0xc4>)
 80035b0:	2202      	movs	r2, #2
 80035b2:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 80035b4:	4b15      	ldr	r3, [pc, #84]	; (800360c <MX_FDCAN1_Init+0xc4>)
 80035b6:	2240      	movs	r2, #64	; 0x40
 80035b8:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 80035ba:	4b14      	ldr	r3, [pc, #80]	; (800360c <MX_FDCAN1_Init+0xc4>)
 80035bc:	2212      	movs	r2, #18
 80035be:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80035c0:	4b12      	ldr	r3, [pc, #72]	; (800360c <MX_FDCAN1_Init+0xc4>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80035c6:	4b11      	ldr	r3, [pc, #68]	; (800360c <MX_FDCAN1_Init+0xc4>)
 80035c8:	2204      	movs	r2, #4
 80035ca:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80035cc:	4b0f      	ldr	r3, [pc, #60]	; (800360c <MX_FDCAN1_Init+0xc4>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80035d2:	4b0e      	ldr	r3, [pc, #56]	; (800360c <MX_FDCAN1_Init+0xc4>)
 80035d4:	2204      	movs	r2, #4
 80035d6:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80035d8:	4b0c      	ldr	r3, [pc, #48]	; (800360c <MX_FDCAN1_Init+0xc4>)
 80035da:	2200      	movs	r2, #0
 80035dc:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80035de:	4b0b      	ldr	r3, [pc, #44]	; (800360c <MX_FDCAN1_Init+0xc4>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80035e4:	4b09      	ldr	r3, [pc, #36]	; (800360c <MX_FDCAN1_Init+0xc4>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80035ea:	4b08      	ldr	r3, [pc, #32]	; (800360c <MX_FDCAN1_Init+0xc4>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80035f0:	4b06      	ldr	r3, [pc, #24]	; (800360c <MX_FDCAN1_Init+0xc4>)
 80035f2:	2204      	movs	r2, #4
 80035f4:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80035f6:	4805      	ldr	r0, [pc, #20]	; (800360c <MX_FDCAN1_Init+0xc4>)
 80035f8:	f003 fa16 	bl	8006a28 <HAL_FDCAN_Init>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8003602:	f000 fb07 	bl	8003c14 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8003606:	bf00      	nop
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	24001514 	.word	0x24001514
 8003610:	4000a000 	.word	0x4000a000

08003614 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8003618:	4b2e      	ldr	r3, [pc, #184]	; (80036d4 <MX_FDCAN2_Init+0xc0>)
 800361a:	4a2f      	ldr	r2, [pc, #188]	; (80036d8 <MX_FDCAN2_Init+0xc4>)
 800361c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800361e:	4b2d      	ldr	r3, [pc, #180]	; (80036d4 <MX_FDCAN2_Init+0xc0>)
 8003620:	2200      	movs	r2, #0
 8003622:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8003624:	4b2b      	ldr	r3, [pc, #172]	; (80036d4 <MX_FDCAN2_Init+0xc0>)
 8003626:	2200      	movs	r2, #0
 8003628:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800362a:	4b2a      	ldr	r3, [pc, #168]	; (80036d4 <MX_FDCAN2_Init+0xc0>)
 800362c:	2200      	movs	r2, #0
 800362e:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8003630:	4b28      	ldr	r3, [pc, #160]	; (80036d4 <MX_FDCAN2_Init+0xc0>)
 8003632:	2200      	movs	r2, #0
 8003634:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8003636:	4b27      	ldr	r3, [pc, #156]	; (80036d4 <MX_FDCAN2_Init+0xc0>)
 8003638:	2200      	movs	r2, #0
 800363a:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 800363c:	4b25      	ldr	r3, [pc, #148]	; (80036d4 <MX_FDCAN2_Init+0xc0>)
 800363e:	2201      	movs	r2, #1
 8003640:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8003642:	4b24      	ldr	r3, [pc, #144]	; (80036d4 <MX_FDCAN2_Init+0xc0>)
 8003644:	2201      	movs	r2, #1
 8003646:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8003648:	4b22      	ldr	r3, [pc, #136]	; (80036d4 <MX_FDCAN2_Init+0xc0>)
 800364a:	2202      	movs	r2, #2
 800364c:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 800364e:	4b21      	ldr	r3, [pc, #132]	; (80036d4 <MX_FDCAN2_Init+0xc0>)
 8003650:	2202      	movs	r2, #2
 8003652:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8003654:	4b1f      	ldr	r3, [pc, #124]	; (80036d4 <MX_FDCAN2_Init+0xc0>)
 8003656:	2201      	movs	r2, #1
 8003658:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800365a:	4b1e      	ldr	r3, [pc, #120]	; (80036d4 <MX_FDCAN2_Init+0xc0>)
 800365c:	2201      	movs	r2, #1
 800365e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8003660:	4b1c      	ldr	r3, [pc, #112]	; (80036d4 <MX_FDCAN2_Init+0xc0>)
 8003662:	2201      	movs	r2, #1
 8003664:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8003666:	4b1b      	ldr	r3, [pc, #108]	; (80036d4 <MX_FDCAN2_Init+0xc0>)
 8003668:	2201      	movs	r2, #1
 800366a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 800366c:	4b19      	ldr	r3, [pc, #100]	; (80036d4 <MX_FDCAN2_Init+0xc0>)
 800366e:	2200      	movs	r2, #0
 8003670:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8003672:	4b18      	ldr	r3, [pc, #96]	; (80036d4 <MX_FDCAN2_Init+0xc0>)
 8003674:	2200      	movs	r2, #0
 8003676:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8003678:	4b16      	ldr	r3, [pc, #88]	; (80036d4 <MX_FDCAN2_Init+0xc0>)
 800367a:	2200      	movs	r2, #0
 800367c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 800367e:	4b15      	ldr	r3, [pc, #84]	; (80036d4 <MX_FDCAN2_Init+0xc0>)
 8003680:	2200      	movs	r2, #0
 8003682:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8003684:	4b13      	ldr	r3, [pc, #76]	; (80036d4 <MX_FDCAN2_Init+0xc0>)
 8003686:	2204      	movs	r2, #4
 8003688:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 800368a:	4b12      	ldr	r3, [pc, #72]	; (80036d4 <MX_FDCAN2_Init+0xc0>)
 800368c:	2200      	movs	r2, #0
 800368e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8003690:	4b10      	ldr	r3, [pc, #64]	; (80036d4 <MX_FDCAN2_Init+0xc0>)
 8003692:	2204      	movs	r2, #4
 8003694:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8003696:	4b0f      	ldr	r3, [pc, #60]	; (80036d4 <MX_FDCAN2_Init+0xc0>)
 8003698:	2200      	movs	r2, #0
 800369a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800369c:	4b0d      	ldr	r3, [pc, #52]	; (80036d4 <MX_FDCAN2_Init+0xc0>)
 800369e:	2204      	movs	r2, #4
 80036a0:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 80036a2:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <MX_FDCAN2_Init+0xc0>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 80036a8:	4b0a      	ldr	r3, [pc, #40]	; (80036d4 <MX_FDCAN2_Init+0xc0>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 80036ae:	4b09      	ldr	r3, [pc, #36]	; (80036d4 <MX_FDCAN2_Init+0xc0>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80036b4:	4b07      	ldr	r3, [pc, #28]	; (80036d4 <MX_FDCAN2_Init+0xc0>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80036ba:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <MX_FDCAN2_Init+0xc0>)
 80036bc:	2204      	movs	r2, #4
 80036be:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80036c0:	4804      	ldr	r0, [pc, #16]	; (80036d4 <MX_FDCAN2_Init+0xc0>)
 80036c2:	f003 f9b1 	bl	8006a28 <HAL_FDCAN_Init>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 80036cc:	f000 faa2 	bl	8003c14 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80036d0:	bf00      	nop
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	240016c8 	.word	0x240016c8
 80036d8:	4000a400 	.word	0x4000a400

080036dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80036e2:	1d3b      	adds	r3, r7, #4
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	605a      	str	r2, [r3, #4]
 80036ea:	609a      	str	r2, [r3, #8]
 80036ec:	60da      	str	r2, [r3, #12]
 80036ee:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80036f0:	2300      	movs	r3, #0
 80036f2:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80036f4:	4b26      	ldr	r3, [pc, #152]	; (8003790 <MX_RTC_Init+0xb4>)
 80036f6:	4a27      	ldr	r2, [pc, #156]	; (8003794 <MX_RTC_Init+0xb8>)
 80036f8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80036fa:	4b25      	ldr	r3, [pc, #148]	; (8003790 <MX_RTC_Init+0xb4>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 1;
 8003700:	4b23      	ldr	r3, [pc, #140]	; (8003790 <MX_RTC_Init+0xb4>)
 8003702:	2201      	movs	r2, #1
 8003704:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 16388;
 8003706:	4b22      	ldr	r3, [pc, #136]	; (8003790 <MX_RTC_Init+0xb4>)
 8003708:	f244 0204 	movw	r2, #16388	; 0x4004
 800370c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800370e:	4b20      	ldr	r3, [pc, #128]	; (8003790 <MX_RTC_Init+0xb4>)
 8003710:	2200      	movs	r2, #0
 8003712:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003714:	4b1e      	ldr	r3, [pc, #120]	; (8003790 <MX_RTC_Init+0xb4>)
 8003716:	2200      	movs	r2, #0
 8003718:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800371a:	4b1d      	ldr	r3, [pc, #116]	; (8003790 <MX_RTC_Init+0xb4>)
 800371c:	2200      	movs	r2, #0
 800371e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003720:	4b1b      	ldr	r3, [pc, #108]	; (8003790 <MX_RTC_Init+0xb4>)
 8003722:	2200      	movs	r2, #0
 8003724:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003726:	481a      	ldr	r0, [pc, #104]	; (8003790 <MX_RTC_Init+0xb4>)
 8003728:	f008 fea8 	bl	800c47c <HAL_RTC_Init>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8003732:	f000 fa6f 	bl	8003c14 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8003736:	2300      	movs	r3, #0
 8003738:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 800373a:	2300      	movs	r3, #0
 800373c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800373e:	2300      	movs	r3, #0
 8003740:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003742:	2300      	movs	r3, #0
 8003744:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003746:	2300      	movs	r3, #0
 8003748:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800374a:	1d3b      	adds	r3, r7, #4
 800374c:	2200      	movs	r2, #0
 800374e:	4619      	mov	r1, r3
 8003750:	480f      	ldr	r0, [pc, #60]	; (8003790 <MX_RTC_Init+0xb4>)
 8003752:	f008 ff0b 	bl	800c56c <HAL_RTC_SetTime>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 800375c:	f000 fa5a 	bl	8003c14 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003760:	2301      	movs	r3, #1
 8003762:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003764:	2301      	movs	r3, #1
 8003766:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8003768:	2301      	movs	r3, #1
 800376a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 800376c:	2300      	movs	r3, #0
 800376e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003770:	463b      	mov	r3, r7
 8003772:	2200      	movs	r2, #0
 8003774:	4619      	mov	r1, r3
 8003776:	4806      	ldr	r0, [pc, #24]	; (8003790 <MX_RTC_Init+0xb4>)
 8003778:	f008 fff2 	bl	800c760 <HAL_RTC_SetDate>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8003782:	f000 fa47 	bl	8003c14 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003786:	bf00      	nop
 8003788:	3718      	adds	r7, #24
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	240014f0 	.word	0x240014f0
 8003794:	58004000 	.word	0x58004000

08003798 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800379c:	4b0d      	ldr	r3, [pc, #52]	; (80037d4 <MX_SDMMC1_SD_Init+0x3c>)
 800379e:	4a0e      	ldr	r2, [pc, #56]	; (80037d8 <MX_SDMMC1_SD_Init+0x40>)
 80037a0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80037a2:	4b0c      	ldr	r3, [pc, #48]	; (80037d4 <MX_SDMMC1_SD_Init+0x3c>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80037a8:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <MX_SDMMC1_SD_Init+0x3c>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80037ae:	4b09      	ldr	r3, [pc, #36]	; (80037d4 <MX_SDMMC1_SD_Init+0x3c>)
 80037b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037b4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 80037b6:	4b07      	ldr	r3, [pc, #28]	; (80037d4 <MX_SDMMC1_SD_Init+0x3c>)
 80037b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037bc:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80037be:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <MX_SDMMC1_SD_Init+0x3c>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 80037c4:	4b03      	ldr	r3, [pc, #12]	; (80037d4 <MX_SDMMC1_SD_Init+0x3c>)
 80037c6:	2201      	movs	r2, #1
 80037c8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80037ca:	bf00      	nop
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	24001470 	.word	0x24001470
 80037d8:	52007000 	.word	0x52007000

080037dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80037e0:	4b27      	ldr	r3, [pc, #156]	; (8003880 <MX_SPI1_Init+0xa4>)
 80037e2:	4a28      	ldr	r2, [pc, #160]	; (8003884 <MX_SPI1_Init+0xa8>)
 80037e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80037e6:	4b26      	ldr	r3, [pc, #152]	; (8003880 <MX_SPI1_Init+0xa4>)
 80037e8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80037ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80037ee:	4b24      	ldr	r3, [pc, #144]	; (8003880 <MX_SPI1_Init+0xa4>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80037f4:	4b22      	ldr	r3, [pc, #136]	; (8003880 <MX_SPI1_Init+0xa4>)
 80037f6:	2207      	movs	r2, #7
 80037f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80037fa:	4b21      	ldr	r3, [pc, #132]	; (8003880 <MX_SPI1_Init+0xa4>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003800:	4b1f      	ldr	r3, [pc, #124]	; (8003880 <MX_SPI1_Init+0xa4>)
 8003802:	2200      	movs	r2, #0
 8003804:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003806:	4b1e      	ldr	r3, [pc, #120]	; (8003880 <MX_SPI1_Init+0xa4>)
 8003808:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800380c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800380e:	4b1c      	ldr	r3, [pc, #112]	; (8003880 <MX_SPI1_Init+0xa4>)
 8003810:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8003814:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003816:	4b1a      	ldr	r3, [pc, #104]	; (8003880 <MX_SPI1_Init+0xa4>)
 8003818:	2200      	movs	r2, #0
 800381a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800381c:	4b18      	ldr	r3, [pc, #96]	; (8003880 <MX_SPI1_Init+0xa4>)
 800381e:	2200      	movs	r2, #0
 8003820:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003822:	4b17      	ldr	r3, [pc, #92]	; (8003880 <MX_SPI1_Init+0xa4>)
 8003824:	2200      	movs	r2, #0
 8003826:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8003828:	4b15      	ldr	r3, [pc, #84]	; (8003880 <MX_SPI1_Init+0xa4>)
 800382a:	2200      	movs	r2, #0
 800382c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800382e:	4b14      	ldr	r3, [pc, #80]	; (8003880 <MX_SPI1_Init+0xa4>)
 8003830:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003834:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003836:	4b12      	ldr	r3, [pc, #72]	; (8003880 <MX_SPI1_Init+0xa4>)
 8003838:	2200      	movs	r2, #0
 800383a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800383c:	4b10      	ldr	r3, [pc, #64]	; (8003880 <MX_SPI1_Init+0xa4>)
 800383e:	2200      	movs	r2, #0
 8003840:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003842:	4b0f      	ldr	r3, [pc, #60]	; (8003880 <MX_SPI1_Init+0xa4>)
 8003844:	2200      	movs	r2, #0
 8003846:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003848:	4b0d      	ldr	r3, [pc, #52]	; (8003880 <MX_SPI1_Init+0xa4>)
 800384a:	2200      	movs	r2, #0
 800384c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800384e:	4b0c      	ldr	r3, [pc, #48]	; (8003880 <MX_SPI1_Init+0xa4>)
 8003850:	2200      	movs	r2, #0
 8003852:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003854:	4b0a      	ldr	r3, [pc, #40]	; (8003880 <MX_SPI1_Init+0xa4>)
 8003856:	2200      	movs	r2, #0
 8003858:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800385a:	4b09      	ldr	r3, [pc, #36]	; (8003880 <MX_SPI1_Init+0xa4>)
 800385c:	2200      	movs	r2, #0
 800385e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003860:	4b07      	ldr	r3, [pc, #28]	; (8003880 <MX_SPI1_Init+0xa4>)
 8003862:	2200      	movs	r2, #0
 8003864:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003866:	4b06      	ldr	r3, [pc, #24]	; (8003880 <MX_SPI1_Init+0xa4>)
 8003868:	2200      	movs	r2, #0
 800386a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800386c:	4804      	ldr	r0, [pc, #16]	; (8003880 <MX_SPI1_Init+0xa4>)
 800386e:	f00b f89f 	bl	800e9b0 <HAL_SPI_Init>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8003878:	f000 f9cc 	bl	8003c14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800387c:	bf00      	nop
 800387e:	bd80      	pop	{r7, pc}
 8003880:	24001640 	.word	0x24001640
 8003884:	40013000 	.word	0x40013000

08003888 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800388c:	4b22      	ldr	r3, [pc, #136]	; (8003918 <MX_UART8_Init+0x90>)
 800388e:	4a23      	ldr	r2, [pc, #140]	; (800391c <MX_UART8_Init+0x94>)
 8003890:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8003892:	4b21      	ldr	r3, [pc, #132]	; (8003918 <MX_UART8_Init+0x90>)
 8003894:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003898:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800389a:	4b1f      	ldr	r3, [pc, #124]	; (8003918 <MX_UART8_Init+0x90>)
 800389c:	2200      	movs	r2, #0
 800389e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80038a0:	4b1d      	ldr	r3, [pc, #116]	; (8003918 <MX_UART8_Init+0x90>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80038a6:	4b1c      	ldr	r3, [pc, #112]	; (8003918 <MX_UART8_Init+0x90>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80038ac:	4b1a      	ldr	r3, [pc, #104]	; (8003918 <MX_UART8_Init+0x90>)
 80038ae:	220c      	movs	r2, #12
 80038b0:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038b2:	4b19      	ldr	r3, [pc, #100]	; (8003918 <MX_UART8_Init+0x90>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80038b8:	4b17      	ldr	r3, [pc, #92]	; (8003918 <MX_UART8_Init+0x90>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80038be:	4b16      	ldr	r3, [pc, #88]	; (8003918 <MX_UART8_Init+0x90>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80038c4:	4b14      	ldr	r3, [pc, #80]	; (8003918 <MX_UART8_Init+0x90>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038ca:	4b13      	ldr	r3, [pc, #76]	; (8003918 <MX_UART8_Init+0x90>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80038d0:	4811      	ldr	r0, [pc, #68]	; (8003918 <MX_UART8_Init+0x90>)
 80038d2:	f00c f91e 	bl	800fb12 <HAL_UART_Init>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80038dc:	f000 f99a 	bl	8003c14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80038e0:	2100      	movs	r1, #0
 80038e2:	480d      	ldr	r0, [pc, #52]	; (8003918 <MX_UART8_Init+0x90>)
 80038e4:	f00d faae 	bl	8010e44 <HAL_UARTEx_SetTxFifoThreshold>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 80038ee:	f000 f991 	bl	8003c14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80038f2:	2100      	movs	r1, #0
 80038f4:	4808      	ldr	r0, [pc, #32]	; (8003918 <MX_UART8_Init+0x90>)
 80038f6:	f00d fae3 	bl	8010ec0 <HAL_UARTEx_SetRxFifoThreshold>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8003900:	f000 f988 	bl	8003c14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8003904:	4804      	ldr	r0, [pc, #16]	; (8003918 <MX_UART8_Init+0x90>)
 8003906:	f00d fa64 	bl	8010dd2 <HAL_UARTEx_DisableFifoMode>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8003910:	f000 f980 	bl	8003c14 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8003914:	bf00      	nop
 8003916:	bd80      	pop	{r7, pc}
 8003918:	240015b4 	.word	0x240015b4
 800391c:	40007c00 	.word	0x40007c00

08003920 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003924:	4b22      	ldr	r3, [pc, #136]	; (80039b0 <MX_USART3_UART_Init+0x90>)
 8003926:	4a23      	ldr	r2, [pc, #140]	; (80039b4 <MX_USART3_UART_Init+0x94>)
 8003928:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800392a:	4b21      	ldr	r3, [pc, #132]	; (80039b0 <MX_USART3_UART_Init+0x90>)
 800392c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8003930:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003932:	4b1f      	ldr	r3, [pc, #124]	; (80039b0 <MX_USART3_UART_Init+0x90>)
 8003934:	2200      	movs	r2, #0
 8003936:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003938:	4b1d      	ldr	r3, [pc, #116]	; (80039b0 <MX_USART3_UART_Init+0x90>)
 800393a:	2200      	movs	r2, #0
 800393c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800393e:	4b1c      	ldr	r3, [pc, #112]	; (80039b0 <MX_USART3_UART_Init+0x90>)
 8003940:	2200      	movs	r2, #0
 8003942:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003944:	4b1a      	ldr	r3, [pc, #104]	; (80039b0 <MX_USART3_UART_Init+0x90>)
 8003946:	220c      	movs	r2, #12
 8003948:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800394a:	4b19      	ldr	r3, [pc, #100]	; (80039b0 <MX_USART3_UART_Init+0x90>)
 800394c:	2200      	movs	r2, #0
 800394e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003950:	4b17      	ldr	r3, [pc, #92]	; (80039b0 <MX_USART3_UART_Init+0x90>)
 8003952:	2200      	movs	r2, #0
 8003954:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003956:	4b16      	ldr	r3, [pc, #88]	; (80039b0 <MX_USART3_UART_Init+0x90>)
 8003958:	2200      	movs	r2, #0
 800395a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800395c:	4b14      	ldr	r3, [pc, #80]	; (80039b0 <MX_USART3_UART_Init+0x90>)
 800395e:	2200      	movs	r2, #0
 8003960:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003962:	4b13      	ldr	r3, [pc, #76]	; (80039b0 <MX_USART3_UART_Init+0x90>)
 8003964:	2200      	movs	r2, #0
 8003966:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003968:	4811      	ldr	r0, [pc, #68]	; (80039b0 <MX_USART3_UART_Init+0x90>)
 800396a:	f00c f8d2 	bl	800fb12 <HAL_UART_Init>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003974:	f000 f94e 	bl	8003c14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003978:	2100      	movs	r1, #0
 800397a:	480d      	ldr	r0, [pc, #52]	; (80039b0 <MX_USART3_UART_Init+0x90>)
 800397c:	f00d fa62 	bl	8010e44 <HAL_UARTEx_SetTxFifoThreshold>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8003986:	f000 f945 	bl	8003c14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800398a:	2100      	movs	r1, #0
 800398c:	4808      	ldr	r0, [pc, #32]	; (80039b0 <MX_USART3_UART_Init+0x90>)
 800398e:	f00d fa97 	bl	8010ec0 <HAL_UARTEx_SetRxFifoThreshold>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003998:	f000 f93c 	bl	8003c14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800399c:	4804      	ldr	r0, [pc, #16]	; (80039b0 <MX_USART3_UART_Init+0x90>)
 800399e:	f00d fa18 	bl	8010dd2 <HAL_UARTEx_DisableFifoMode>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80039a8:	f000 f934 	bl	8003c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80039ac:	bf00      	nop
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	240013c4 	.word	0x240013c4
 80039b4:	40004800 	.word	0x40004800

080039b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80039be:	4b0d      	ldr	r3, [pc, #52]	; (80039f4 <MX_DMA_Init+0x3c>)
 80039c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80039c4:	4a0b      	ldr	r2, [pc, #44]	; (80039f4 <MX_DMA_Init+0x3c>)
 80039c6:	f043 0301 	orr.w	r3, r3, #1
 80039ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80039ce:	4b09      	ldr	r3, [pc, #36]	; (80039f4 <MX_DMA_Init+0x3c>)
 80039d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	607b      	str	r3, [r7, #4]
 80039da:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80039dc:	2200      	movs	r2, #0
 80039de:	2100      	movs	r1, #0
 80039e0:	200c      	movs	r0, #12
 80039e2:	f000 ff14 	bl	800480e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80039e6:	200c      	movs	r0, #12
 80039e8:	f000 ff2b 	bl	8004842 <HAL_NVIC_EnableIRQ>

}
 80039ec:	bf00      	nop
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	58024400 	.word	0x58024400

080039f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b08c      	sub	sp, #48	; 0x30
 80039fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039fe:	f107 031c 	add.w	r3, r7, #28
 8003a02:	2200      	movs	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	605a      	str	r2, [r3, #4]
 8003a08:	609a      	str	r2, [r3, #8]
 8003a0a:	60da      	str	r2, [r3, #12]
 8003a0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a0e:	4b6d      	ldr	r3, [pc, #436]	; (8003bc4 <MX_GPIO_Init+0x1cc>)
 8003a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a14:	4a6b      	ldr	r2, [pc, #428]	; (8003bc4 <MX_GPIO_Init+0x1cc>)
 8003a16:	f043 0310 	orr.w	r3, r3, #16
 8003a1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a1e:	4b69      	ldr	r3, [pc, #420]	; (8003bc4 <MX_GPIO_Init+0x1cc>)
 8003a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a24:	f003 0310 	and.w	r3, r3, #16
 8003a28:	61bb      	str	r3, [r7, #24]
 8003a2a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a2c:	4b65      	ldr	r3, [pc, #404]	; (8003bc4 <MX_GPIO_Init+0x1cc>)
 8003a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a32:	4a64      	ldr	r2, [pc, #400]	; (8003bc4 <MX_GPIO_Init+0x1cc>)
 8003a34:	f043 0304 	orr.w	r3, r3, #4
 8003a38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a3c:	4b61      	ldr	r3, [pc, #388]	; (8003bc4 <MX_GPIO_Init+0x1cc>)
 8003a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	617b      	str	r3, [r7, #20]
 8003a48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a4a:	4b5e      	ldr	r3, [pc, #376]	; (8003bc4 <MX_GPIO_Init+0x1cc>)
 8003a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a50:	4a5c      	ldr	r2, [pc, #368]	; (8003bc4 <MX_GPIO_Init+0x1cc>)
 8003a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a5a:	4b5a      	ldr	r3, [pc, #360]	; (8003bc4 <MX_GPIO_Init+0x1cc>)
 8003a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a64:	613b      	str	r3, [r7, #16]
 8003a66:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a68:	4b56      	ldr	r3, [pc, #344]	; (8003bc4 <MX_GPIO_Init+0x1cc>)
 8003a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a6e:	4a55      	ldr	r2, [pc, #340]	; (8003bc4 <MX_GPIO_Init+0x1cc>)
 8003a70:	f043 0301 	orr.w	r3, r3, #1
 8003a74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a78:	4b52      	ldr	r3, [pc, #328]	; (8003bc4 <MX_GPIO_Init+0x1cc>)
 8003a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a86:	4b4f      	ldr	r3, [pc, #316]	; (8003bc4 <MX_GPIO_Init+0x1cc>)
 8003a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a8c:	4a4d      	ldr	r2, [pc, #308]	; (8003bc4 <MX_GPIO_Init+0x1cc>)
 8003a8e:	f043 0302 	orr.w	r3, r3, #2
 8003a92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a96:	4b4b      	ldr	r3, [pc, #300]	; (8003bc4 <MX_GPIO_Init+0x1cc>)
 8003a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	60bb      	str	r3, [r7, #8]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003aa4:	4b47      	ldr	r3, [pc, #284]	; (8003bc4 <MX_GPIO_Init+0x1cc>)
 8003aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003aaa:	4a46      	ldr	r2, [pc, #280]	; (8003bc4 <MX_GPIO_Init+0x1cc>)
 8003aac:	f043 0308 	orr.w	r3, r3, #8
 8003ab0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ab4:	4b43      	ldr	r3, [pc, #268]	; (8003bc4 <MX_GPIO_Init+0x1cc>)
 8003ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003aba:	f003 0308 	and.w	r3, r3, #8
 8003abe:	607b      	str	r3, [r7, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_485_TX_EN_Pin|RS_485_RX_EN_Pin, GPIO_PIN_RESET);
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	210c      	movs	r1, #12
 8003ac6:	4840      	ldr	r0, [pc, #256]	; (8003bc8 <MX_GPIO_Init+0x1d0>)
 8003ac8:	f004 fab2 	bl	8008030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TELE_CE_Pin|TELE_CS_Pin, GPIO_PIN_RESET);
 8003acc:	2200      	movs	r2, #0
 8003ace:	2103      	movs	r1, #3
 8003ad0:	483e      	ldr	r0, [pc, #248]	; (8003bcc <MX_GPIO_Init+0x1d4>)
 8003ad2:	f004 faad 	bl	8008030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	2101      	movs	r1, #1
 8003ada:	483d      	ldr	r0, [pc, #244]	; (8003bd0 <MX_GPIO_Init+0x1d8>)
 8003adc:	f004 faa8 	bl	8008030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_SET);
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ae6:	483b      	ldr	r0, [pc, #236]	; (8003bd4 <MX_GPIO_Init+0x1dc>)
 8003ae8:	f004 faa2 	bl	8008030 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_485_TX_EN_Pin RS_485_RX_EN_Pin */
  GPIO_InitStruct.Pin = RS_485_TX_EN_Pin|RS_485_RX_EN_Pin;
 8003aec:	230c      	movs	r3, #12
 8003aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003af0:	2301      	movs	r3, #1
 8003af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af4:	2300      	movs	r3, #0
 8003af6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af8:	2300      	movs	r3, #0
 8003afa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003afc:	f107 031c 	add.w	r3, r7, #28
 8003b00:	4619      	mov	r1, r3
 8003b02:	4831      	ldr	r0, [pc, #196]	; (8003bc8 <MX_GPIO_Init+0x1d0>)
 8003b04:	f004 f8cc 	bl	8007ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TELE_CE_Pin TELE_CS_Pin */
  GPIO_InitStruct.Pin = TELE_CE_Pin|TELE_CS_Pin;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b10:	2300      	movs	r3, #0
 8003b12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b14:	2300      	movs	r3, #0
 8003b16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b18:	f107 031c 	add.w	r3, r7, #28
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	482b      	ldr	r0, [pc, #172]	; (8003bcc <MX_GPIO_Init+0x1d4>)
 8003b20:	f004 f8be 	bl	8007ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TELE_IRQ_Pin */
  GPIO_InitStruct.Pin = TELE_IRQ_Pin;
 8003b24:	2304      	movs	r3, #4
 8003b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b28:	4b2b      	ldr	r3, [pc, #172]	; (8003bd8 <MX_GPIO_Init+0x1e0>)
 8003b2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TELE_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003b30:	f107 031c 	add.w	r3, r7, #28
 8003b34:	4619      	mov	r1, r3
 8003b36:	4825      	ldr	r0, [pc, #148]	; (8003bcc <MX_GPIO_Init+0x1d4>)
 8003b38:	f004 f8b2 	bl	8007ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b40:	2301      	movs	r3, #1
 8003b42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b44:	2300      	movs	r3, #0
 8003b46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003b4c:	f107 031c 	add.w	r3, r7, #28
 8003b50:	4619      	mov	r1, r3
 8003b52:	481f      	ldr	r0, [pc, #124]	; (8003bd0 <MX_GPIO_Init+0x1d8>)
 8003b54:	f004 f8a4 	bl	8007ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 8003b58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b5e:	4b1e      	ldr	r3, [pc, #120]	; (8003bd8 <MX_GPIO_Init+0x1e0>)
 8003b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b62:	2300      	movs	r3, #0
 8003b64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8003b66:	f107 031c 	add.w	r3, r7, #28
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	4816      	ldr	r0, [pc, #88]	; (8003bc8 <MX_GPIO_Init+0x1d0>)
 8003b6e:	f004 f897 	bl	8007ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 8003b72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b80:	2300      	movs	r3, #0
 8003b82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 8003b84:	f107 031c 	add.w	r3, r7, #28
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4812      	ldr	r0, [pc, #72]	; (8003bd4 <MX_GPIO_Init+0x1dc>)
 8003b8c:	f004 f888 	bl	8007ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DET_Pin */
  GPIO_InitStruct.Pin = CARD_DET_Pin;
 8003b90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b96:	2300      	movs	r3, #0
 8003b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DET_GPIO_Port, &GPIO_InitStruct);
 8003b9e:	f107 031c 	add.w	r3, r7, #28
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	4809      	ldr	r0, [pc, #36]	; (8003bcc <MX_GPIO_Init+0x1d4>)
 8003ba6:	f004 f87b 	bl	8007ca0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003baa:	2200      	movs	r2, #0
 8003bac:	2100      	movs	r1, #0
 8003bae:	2017      	movs	r0, #23
 8003bb0:	f000 fe2d 	bl	800480e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003bb4:	2017      	movs	r0, #23
 8003bb6:	f000 fe44 	bl	8004842 <HAL_NVIC_EnableIRQ>

}
 8003bba:	bf00      	nop
 8003bbc:	3730      	adds	r7, #48	; 0x30
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	58024400 	.word	0x58024400
 8003bc8:	58021000 	.word	0x58021000
 8003bcc:	58020000 	.word	0x58020000
 8003bd0:	58020400 	.word	0x58020400
 8003bd4:	58020c00 	.word	0x58020c00
 8003bd8:	11110000 	.word	0x11110000

08003bdc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	4603      	mov	r3, r0
 8003be4:	80fb      	strh	r3, [r7, #6]

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */

  end_flag = 0;
 8003be6:	4b04      	ldr	r3, [pc, #16]	; (8003bf8 <HAL_GPIO_EXTI_Callback+0x1c>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]

}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	24000008 	.word	0x24000008

08003bfc <HAL_PWR_PVDCallback>:
void HAL_PWR_PVDCallback (void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
	end_flag = 0;
 8003c00:	4b03      	ldr	r3, [pc, #12]	; (8003c10 <HAL_PWR_PVDCallback+0x14>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]
}
 8003c06:	bf00      	nop
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr
 8003c10:	24000008 	.word	0x24000008

08003c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c18:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error Handler\n");
 8003c1a:	4802      	ldr	r0, [pc, #8]	; (8003c24 <Error_Handler+0x10>)
 8003c1c:	f015 fd68 	bl	80196f0 <puts>
 8003c20:	e7fb      	b.n	8003c1a <Error_Handler+0x6>
 8003c22:	bf00      	nop
 8003c24:	0801ae5c 	.word	0x0801ae5c

08003c28 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003c30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c34:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d013      	beq.n	8003c68 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003c40:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c44:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003c48:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00b      	beq.n	8003c68 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003c50:	e000      	b.n	8003c54 <ITM_SendChar+0x2c>
    {
      __NOP();
 8003c52:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003c54:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d0f9      	beq.n	8003c52 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003c5e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	b2d2      	uxtb	r2, r2
 8003c66:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003c68:	687b      	ldr	r3, [r7, #4]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <_write>:

#include <myprintf.h>
#include "main.h"

int _write(int file, char *ptr, int len)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b086      	sub	sp, #24
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	60f8      	str	r0, [r7, #12]
 8003c7e:	60b9      	str	r1, [r7, #8]
 8003c80:	607a      	str	r2, [r7, #4]
  int i=0;
 8003c82:	2300      	movs	r3, #0
 8003c84:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8003c86:	2300      	movs	r3, #0
 8003c88:	617b      	str	r3, [r7, #20]
 8003c8a:	e009      	b.n	8003ca0 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	1c5a      	adds	r2, r3, #1
 8003c90:	60ba      	str	r2, [r7, #8]
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7ff ffc7 	bl	8003c28 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	dbf1      	blt.n	8003c8c <_write+0x16>
  return len;
 8003ca8:	687b      	ldr	r3, [r7, #4]
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3718      	adds	r7, #24
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
	...

08003cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8003cba:	f107 0308 	add.w	r3, r7, #8
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	601a      	str	r2, [r3, #0]
 8003cc2:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cc4:	4b13      	ldr	r3, [pc, #76]	; (8003d14 <HAL_MspInit+0x60>)
 8003cc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003cca:	4a12      	ldr	r2, [pc, #72]	; (8003d14 <HAL_MspInit+0x60>)
 8003ccc:	f043 0302 	orr.w	r3, r3, #2
 8003cd0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003cd4:	4b0f      	ldr	r3, [pc, #60]	; (8003d14 <HAL_MspInit+0x60>)
 8003cd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	607b      	str	r3, [r7, #4]
 8003ce0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_AVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_AVD_IRQn, 0, 0);
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	2001      	movs	r0, #1
 8003ce8:	f000 fd91 	bl	800480e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_AVD_IRQn);
 8003cec:	2001      	movs	r0, #1
 8003cee:	f000 fda8 	bl	8004842 <HAL_NVIC_EnableIRQ>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;
 8003cf2:	23c0      	movs	r3, #192	; 0xc0
 8003cf4:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_IT_RISING;
 8003cf6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8003cfa:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8003cfc:	f107 0308 	add.w	r3, r7, #8
 8003d00:	4618      	mov	r0, r3
 8003d02:	f005 fc1f 	bl	8009544 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8003d06:	f005 fc97 	bl	8009638 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d0a:	bf00      	nop
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	58024400 	.word	0x58024400

08003d18 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b08c      	sub	sp, #48	; 0x30
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d20:	f107 031c 	add.w	r3, r7, #28
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	605a      	str	r2, [r3, #4]
 8003d2a:	609a      	str	r2, [r3, #8]
 8003d2c:	60da      	str	r2, [r3, #12]
 8003d2e:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a48      	ldr	r2, [pc, #288]	; (8003e58 <HAL_FDCAN_MspInit+0x140>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d14e      	bne.n	8003dd8 <HAL_FDCAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8003d3a:	4b48      	ldr	r3, [pc, #288]	; (8003e5c <HAL_FDCAN_MspInit+0x144>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	4a46      	ldr	r2, [pc, #280]	; (8003e5c <HAL_FDCAN_MspInit+0x144>)
 8003d42:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8003d44:	4b45      	ldr	r3, [pc, #276]	; (8003e5c <HAL_FDCAN_MspInit+0x144>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d10e      	bne.n	8003d6a <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8003d4c:	4b44      	ldr	r3, [pc, #272]	; (8003e60 <HAL_FDCAN_MspInit+0x148>)
 8003d4e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003d52:	4a43      	ldr	r2, [pc, #268]	; (8003e60 <HAL_FDCAN_MspInit+0x148>)
 8003d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d58:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003d5c:	4b40      	ldr	r3, [pc, #256]	; (8003e60 <HAL_FDCAN_MspInit+0x148>)
 8003d5e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d66:	61bb      	str	r3, [r7, #24]
 8003d68:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d6a:	4b3d      	ldr	r3, [pc, #244]	; (8003e60 <HAL_FDCAN_MspInit+0x148>)
 8003d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d70:	4a3b      	ldr	r2, [pc, #236]	; (8003e60 <HAL_FDCAN_MspInit+0x148>)
 8003d72:	f043 0302 	orr.w	r3, r3, #2
 8003d76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d7a:	4b39      	ldr	r3, [pc, #228]	; (8003e60 <HAL_FDCAN_MspInit+0x148>)
 8003d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	617b      	str	r3, [r7, #20]
 8003d86:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003d88:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d8e:	2302      	movs	r3, #2
 8003d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d92:	2300      	movs	r3, #0
 8003d94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d96:	2303      	movs	r3, #3
 8003d98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003d9a:	2309      	movs	r3, #9
 8003d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d9e:	f107 031c 	add.w	r3, r7, #28
 8003da2:	4619      	mov	r1, r3
 8003da4:	482f      	ldr	r0, [pc, #188]	; (8003e64 <HAL_FDCAN_MspInit+0x14c>)
 8003da6:	f003 ff7b 	bl	8007ca0 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB8_FMP);
 8003daa:	2040      	movs	r0, #64	; 0x40
 8003dac:	f004 f98e 	bl	80080cc <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB9_FMP);
 8003db0:	2080      	movs	r0, #128	; 0x80
 8003db2:	f004 f98b 	bl	80080cc <HAL_I2CEx_EnableFastModePlus>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8003db6:	2200      	movs	r2, #0
 8003db8:	2100      	movs	r1, #0
 8003dba:	2013      	movs	r0, #19
 8003dbc:	f000 fd27 	bl	800480e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8003dc0:	2013      	movs	r0, #19
 8003dc2:	f000 fd3e 	bl	8004842 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	2100      	movs	r1, #0
 8003dca:	2015      	movs	r0, #21
 8003dcc:	f000 fd1f 	bl	800480e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8003dd0:	2015      	movs	r0, #21
 8003dd2:	f000 fd36 	bl	8004842 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8003dd6:	e03b      	b.n	8003e50 <HAL_FDCAN_MspInit+0x138>
  else if(hfdcan->Instance==FDCAN2)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a22      	ldr	r2, [pc, #136]	; (8003e68 <HAL_FDCAN_MspInit+0x150>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d136      	bne.n	8003e50 <HAL_FDCAN_MspInit+0x138>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8003de2:	4b1e      	ldr	r3, [pc, #120]	; (8003e5c <HAL_FDCAN_MspInit+0x144>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	3301      	adds	r3, #1
 8003de8:	4a1c      	ldr	r2, [pc, #112]	; (8003e5c <HAL_FDCAN_MspInit+0x144>)
 8003dea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8003dec:	4b1b      	ldr	r3, [pc, #108]	; (8003e5c <HAL_FDCAN_MspInit+0x144>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d10e      	bne.n	8003e12 <HAL_FDCAN_MspInit+0xfa>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8003df4:	4b1a      	ldr	r3, [pc, #104]	; (8003e60 <HAL_FDCAN_MspInit+0x148>)
 8003df6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003dfa:	4a19      	ldr	r2, [pc, #100]	; (8003e60 <HAL_FDCAN_MspInit+0x148>)
 8003dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e00:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003e04:	4b16      	ldr	r3, [pc, #88]	; (8003e60 <HAL_FDCAN_MspInit+0x148>)
 8003e06:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0e:	613b      	str	r3, [r7, #16]
 8003e10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e12:	4b13      	ldr	r3, [pc, #76]	; (8003e60 <HAL_FDCAN_MspInit+0x148>)
 8003e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e18:	4a11      	ldr	r2, [pc, #68]	; (8003e60 <HAL_FDCAN_MspInit+0x148>)
 8003e1a:	f043 0302 	orr.w	r3, r3, #2
 8003e1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e22:	4b0f      	ldr	r3, [pc, #60]	; (8003e60 <HAL_FDCAN_MspInit+0x148>)
 8003e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003e30:	2360      	movs	r3, #96	; 0x60
 8003e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e34:	2302      	movs	r3, #2
 8003e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8003e40:	2309      	movs	r3, #9
 8003e42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e44:	f107 031c 	add.w	r3, r7, #28
 8003e48:	4619      	mov	r1, r3
 8003e4a:	4806      	ldr	r0, [pc, #24]	; (8003e64 <HAL_FDCAN_MspInit+0x14c>)
 8003e4c:	f003 ff28 	bl	8007ca0 <HAL_GPIO_Init>
}
 8003e50:	bf00      	nop
 8003e52:	3730      	adds	r7, #48	; 0x30
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	4000a000 	.word	0x4000a000
 8003e5c:	24000b48 	.word	0x24000b48
 8003e60:	58024400 	.word	0x58024400
 8003e64:	58020400 	.word	0x58020400
 8003e68:	4000a400 	.word	0x4000a400

08003e6c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a07      	ldr	r2, [pc, #28]	; (8003e98 <HAL_RTC_MspInit+0x2c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d105      	bne.n	8003e8a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003e7e:	4b07      	ldr	r3, [pc, #28]	; (8003e9c <HAL_RTC_MspInit+0x30>)
 8003e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e82:	4a06      	ldr	r2, [pc, #24]	; (8003e9c <HAL_RTC_MspInit+0x30>)
 8003e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e88:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	58004000 	.word	0x58004000
 8003e9c:	58024400 	.word	0x58024400

08003ea0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b08a      	sub	sp, #40	; 0x28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ea8:	f107 0314 	add.w	r3, r7, #20
 8003eac:	2200      	movs	r2, #0
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	605a      	str	r2, [r3, #4]
 8003eb2:	609a      	str	r2, [r3, #8]
 8003eb4:	60da      	str	r2, [r3, #12]
 8003eb6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a2e      	ldr	r2, [pc, #184]	; (8003f78 <HAL_SD_MspInit+0xd8>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d155      	bne.n	8003f6e <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003ec2:	4b2e      	ldr	r3, [pc, #184]	; (8003f7c <HAL_SD_MspInit+0xdc>)
 8003ec4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003ec8:	4a2c      	ldr	r2, [pc, #176]	; (8003f7c <HAL_SD_MspInit+0xdc>)
 8003eca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ece:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8003ed2:	4b2a      	ldr	r3, [pc, #168]	; (8003f7c <HAL_SD_MspInit+0xdc>)
 8003ed4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003edc:	613b      	str	r3, [r7, #16]
 8003ede:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ee0:	4b26      	ldr	r3, [pc, #152]	; (8003f7c <HAL_SD_MspInit+0xdc>)
 8003ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ee6:	4a25      	ldr	r2, [pc, #148]	; (8003f7c <HAL_SD_MspInit+0xdc>)
 8003ee8:	f043 0304 	orr.w	r3, r3, #4
 8003eec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ef0:	4b22      	ldr	r3, [pc, #136]	; (8003f7c <HAL_SD_MspInit+0xdc>)
 8003ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ef6:	f003 0304 	and.w	r3, r3, #4
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003efe:	4b1f      	ldr	r3, [pc, #124]	; (8003f7c <HAL_SD_MspInit+0xdc>)
 8003f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f04:	4a1d      	ldr	r2, [pc, #116]	; (8003f7c <HAL_SD_MspInit+0xdc>)
 8003f06:	f043 0308 	orr.w	r3, r3, #8
 8003f0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f0e:	4b1b      	ldr	r3, [pc, #108]	; (8003f7c <HAL_SD_MspInit+0xdc>)
 8003f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f14:	f003 0308 	and.w	r3, r3, #8
 8003f18:	60bb      	str	r3, [r7, #8]
 8003f1a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003f1c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003f20:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f22:	2302      	movs	r3, #2
 8003f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f26:	2300      	movs	r3, #0
 8003f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003f2e:	230c      	movs	r3, #12
 8003f30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f32:	f107 0314 	add.w	r3, r7, #20
 8003f36:	4619      	mov	r1, r3
 8003f38:	4811      	ldr	r0, [pc, #68]	; (8003f80 <HAL_SD_MspInit+0xe0>)
 8003f3a:	f003 feb1 	bl	8007ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003f3e:	2304      	movs	r3, #4
 8003f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f42:	2302      	movs	r3, #2
 8003f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f46:	2300      	movs	r3, #0
 8003f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003f4e:	230c      	movs	r3, #12
 8003f50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f52:	f107 0314 	add.w	r3, r7, #20
 8003f56:	4619      	mov	r1, r3
 8003f58:	480a      	ldr	r0, [pc, #40]	; (8003f84 <HAL_SD_MspInit+0xe4>)
 8003f5a:	f003 fea1 	bl	8007ca0 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8003f5e:	2200      	movs	r2, #0
 8003f60:	2100      	movs	r1, #0
 8003f62:	2031      	movs	r0, #49	; 0x31
 8003f64:	f000 fc53 	bl	800480e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8003f68:	2031      	movs	r0, #49	; 0x31
 8003f6a:	f000 fc6a 	bl	8004842 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8003f6e:	bf00      	nop
 8003f70:	3728      	adds	r7, #40	; 0x28
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	52007000 	.word	0x52007000
 8003f7c:	58024400 	.word	0x58024400
 8003f80:	58020800 	.word	0x58020800
 8003f84:	58020c00 	.word	0x58020c00

08003f88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b08a      	sub	sp, #40	; 0x28
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f90:	f107 0314 	add.w	r3, r7, #20
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	605a      	str	r2, [r3, #4]
 8003f9a:	609a      	str	r2, [r3, #8]
 8003f9c:	60da      	str	r2, [r3, #12]
 8003f9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a1a      	ldr	r2, [pc, #104]	; (8004010 <HAL_SPI_MspInit+0x88>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d12d      	bne.n	8004006 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003faa:	4b1a      	ldr	r3, [pc, #104]	; (8004014 <HAL_SPI_MspInit+0x8c>)
 8003fac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003fb0:	4a18      	ldr	r2, [pc, #96]	; (8004014 <HAL_SPI_MspInit+0x8c>)
 8003fb2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003fb6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003fba:	4b16      	ldr	r3, [pc, #88]	; (8004014 <HAL_SPI_MspInit+0x8c>)
 8003fbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003fc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fc4:	613b      	str	r3, [r7, #16]
 8003fc6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fc8:	4b12      	ldr	r3, [pc, #72]	; (8004014 <HAL_SPI_MspInit+0x8c>)
 8003fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fce:	4a11      	ldr	r2, [pc, #68]	; (8004014 <HAL_SPI_MspInit+0x8c>)
 8003fd0:	f043 0301 	orr.w	r3, r3, #1
 8003fd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003fd8:	4b0e      	ldr	r3, [pc, #56]	; (8004014 <HAL_SPI_MspInit+0x8c>)
 8003fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003fe6:	23e0      	movs	r3, #224	; 0xe0
 8003fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fea:	2302      	movs	r3, #2
 8003fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003ff6:	2305      	movs	r3, #5
 8003ff8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ffa:	f107 0314 	add.w	r3, r7, #20
 8003ffe:	4619      	mov	r1, r3
 8004000:	4805      	ldr	r0, [pc, #20]	; (8004018 <HAL_SPI_MspInit+0x90>)
 8004002:	f003 fe4d 	bl	8007ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004006:	bf00      	nop
 8004008:	3728      	adds	r7, #40	; 0x28
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	40013000 	.word	0x40013000
 8004014:	58024400 	.word	0x58024400
 8004018:	58020000 	.word	0x58020000

0800401c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b08c      	sub	sp, #48	; 0x30
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004024:	f107 031c 	add.w	r3, r7, #28
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	605a      	str	r2, [r3, #4]
 800402e:	609a      	str	r2, [r3, #8]
 8004030:	60da      	str	r2, [r3, #12]
 8004032:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a4b      	ldr	r2, [pc, #300]	; (8004168 <HAL_UART_MspInit+0x14c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d12e      	bne.n	800409c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 800403e:	4b4b      	ldr	r3, [pc, #300]	; (800416c <HAL_UART_MspInit+0x150>)
 8004040:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004044:	4a49      	ldr	r2, [pc, #292]	; (800416c <HAL_UART_MspInit+0x150>)
 8004046:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800404a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800404e:	4b47      	ldr	r3, [pc, #284]	; (800416c <HAL_UART_MspInit+0x150>)
 8004050:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004054:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004058:	61bb      	str	r3, [r7, #24]
 800405a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800405c:	4b43      	ldr	r3, [pc, #268]	; (800416c <HAL_UART_MspInit+0x150>)
 800405e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004062:	4a42      	ldr	r2, [pc, #264]	; (800416c <HAL_UART_MspInit+0x150>)
 8004064:	f043 0310 	orr.w	r3, r3, #16
 8004068:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800406c:	4b3f      	ldr	r3, [pc, #252]	; (800416c <HAL_UART_MspInit+0x150>)
 800406e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004072:	f003 0310 	and.w	r3, r3, #16
 8004076:	617b      	str	r3, [r7, #20]
 8004078:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800407a:	2303      	movs	r3, #3
 800407c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800407e:	2302      	movs	r3, #2
 8004080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004082:	2300      	movs	r3, #0
 8004084:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004086:	2300      	movs	r3, #0
 8004088:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800408a:	2308      	movs	r3, #8
 800408c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800408e:	f107 031c 	add.w	r3, r7, #28
 8004092:	4619      	mov	r1, r3
 8004094:	4836      	ldr	r0, [pc, #216]	; (8004170 <HAL_UART_MspInit+0x154>)
 8004096:	f003 fe03 	bl	8007ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800409a:	e061      	b.n	8004160 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a34      	ldr	r2, [pc, #208]	; (8004174 <HAL_UART_MspInit+0x158>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d15c      	bne.n	8004160 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART3_CLK_ENABLE();
 80040a6:	4b31      	ldr	r3, [pc, #196]	; (800416c <HAL_UART_MspInit+0x150>)
 80040a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040ac:	4a2f      	ldr	r2, [pc, #188]	; (800416c <HAL_UART_MspInit+0x150>)
 80040ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80040b6:	4b2d      	ldr	r3, [pc, #180]	; (800416c <HAL_UART_MspInit+0x150>)
 80040b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040c0:	613b      	str	r3, [r7, #16]
 80040c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80040c4:	4b29      	ldr	r3, [pc, #164]	; (800416c <HAL_UART_MspInit+0x150>)
 80040c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040ca:	4a28      	ldr	r2, [pc, #160]	; (800416c <HAL_UART_MspInit+0x150>)
 80040cc:	f043 0308 	orr.w	r3, r3, #8
 80040d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80040d4:	4b25      	ldr	r3, [pc, #148]	; (800416c <HAL_UART_MspInit+0x150>)
 80040d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040da:	f003 0308 	and.w	r3, r3, #8
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80040e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80040e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040e8:	2302      	movs	r3, #2
 80040ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ec:	2300      	movs	r3, #0
 80040ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040f0:	2300      	movs	r3, #0
 80040f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80040f4:	2307      	movs	r3, #7
 80040f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040f8:	f107 031c 	add.w	r3, r7, #28
 80040fc:	4619      	mov	r1, r3
 80040fe:	481e      	ldr	r0, [pc, #120]	; (8004178 <HAL_UART_MspInit+0x15c>)
 8004100:	f003 fdce 	bl	8007ca0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004104:	4b1d      	ldr	r3, [pc, #116]	; (800417c <HAL_UART_MspInit+0x160>)
 8004106:	4a1e      	ldr	r2, [pc, #120]	; (8004180 <HAL_UART_MspInit+0x164>)
 8004108:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800410a:	4b1c      	ldr	r3, [pc, #112]	; (800417c <HAL_UART_MspInit+0x160>)
 800410c:	222d      	movs	r2, #45	; 0x2d
 800410e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004110:	4b1a      	ldr	r3, [pc, #104]	; (800417c <HAL_UART_MspInit+0x160>)
 8004112:	2200      	movs	r2, #0
 8004114:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004116:	4b19      	ldr	r3, [pc, #100]	; (800417c <HAL_UART_MspInit+0x160>)
 8004118:	2200      	movs	r2, #0
 800411a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800411c:	4b17      	ldr	r3, [pc, #92]	; (800417c <HAL_UART_MspInit+0x160>)
 800411e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004122:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004124:	4b15      	ldr	r3, [pc, #84]	; (800417c <HAL_UART_MspInit+0x160>)
 8004126:	2200      	movs	r2, #0
 8004128:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800412a:	4b14      	ldr	r3, [pc, #80]	; (800417c <HAL_UART_MspInit+0x160>)
 800412c:	2200      	movs	r2, #0
 800412e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004130:	4b12      	ldr	r3, [pc, #72]	; (800417c <HAL_UART_MspInit+0x160>)
 8004132:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004136:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004138:	4b10      	ldr	r3, [pc, #64]	; (800417c <HAL_UART_MspInit+0x160>)
 800413a:	2200      	movs	r2, #0
 800413c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800413e:	4b0f      	ldr	r3, [pc, #60]	; (800417c <HAL_UART_MspInit+0x160>)
 8004140:	2200      	movs	r2, #0
 8004142:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004144:	480d      	ldr	r0, [pc, #52]	; (800417c <HAL_UART_MspInit+0x160>)
 8004146:	f000 fb97 	bl	8004878 <HAL_DMA_Init>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <HAL_UART_MspInit+0x138>
      Error_Handler();
 8004150:	f7ff fd60 	bl	8003c14 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a09      	ldr	r2, [pc, #36]	; (800417c <HAL_UART_MspInit+0x160>)
 8004158:	679a      	str	r2, [r3, #120]	; 0x78
 800415a:	4a08      	ldr	r2, [pc, #32]	; (800417c <HAL_UART_MspInit+0x160>)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004160:	bf00      	nop
 8004162:	3730      	adds	r7, #48	; 0x30
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40007c00 	.word	0x40007c00
 800416c:	58024400 	.word	0x58024400
 8004170:	58021000 	.word	0x58021000
 8004174:	40004800 	.word	0x40004800
 8004178:	58020c00 	.word	0x58020c00
 800417c:	2400134c 	.word	0x2400134c
 8004180:	40020028 	.word	0x40020028

08004184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8004188:	f006 fa98 	bl	800a6bc <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800418c:	e7fe      	b.n	800418c <NMI_Handler+0x8>

0800418e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800418e:	b480      	push	{r7}
 8004190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004192:	e7fe      	b.n	8004192 <HardFault_Handler+0x4>

08004194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004198:	e7fe      	b.n	8004198 <MemManage_Handler+0x4>

0800419a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800419a:	b480      	push	{r7}
 800419c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800419e:	e7fe      	b.n	800419e <BusFault_Handler+0x4>

080041a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041a4:	e7fe      	b.n	80041a4 <UsageFault_Handler+0x4>

080041a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041a6:	b480      	push	{r7}
 80041a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041aa:	bf00      	nop
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041b8:	bf00      	nop
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041c2:	b480      	push	{r7}
 80041c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041c6:	bf00      	nop
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041d4:	f000 f9f2 	bl	80045bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80041d8:	bf00      	nop
 80041da:	bd80      	pop	{r7, pc}

080041dc <PVD_AVD_IRQHandler>:

/**
  * @brief This function handles PVD and AVD interrupts through EXTI line 16.
  */
void PVD_AVD_IRQHandler(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_AVD_IRQn 0 */

  /* USER CODE END PVD_AVD_IRQn 0 */
  HAL_PWREx_PVD_AVD_IRQHandler();
 80041e0:	f005 fa84 	bl	80096ec <HAL_PWREx_PVD_AVD_IRQHandler>
  /* USER CODE BEGIN PVD_AVD_IRQn 1 */

  /* USER CODE END PVD_AVD_IRQn 1 */
}
 80041e4:	bf00      	nop
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80041ec:	4802      	ldr	r0, [pc, #8]	; (80041f8 <DMA1_Stream1_IRQHandler+0x10>)
 80041ee:	f001 f909 	bl	8005404 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80041f2:	bf00      	nop
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	2400134c 	.word	0x2400134c

080041fc <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004200:	4802      	ldr	r0, [pc, #8]	; (800420c <FDCAN1_IT0_IRQHandler+0x10>)
 8004202:	f003 f8bd 	bl	8007380 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8004206:	bf00      	nop
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	24001514 	.word	0x24001514

08004210 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004214:	4802      	ldr	r0, [pc, #8]	; (8004220 <FDCAN1_IT1_IRQHandler+0x10>)
 8004216:	f003 f8b3 	bl	8007380 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 800421a:	bf00      	nop
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	24001514 	.word	0x24001514

08004224 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004228:	f44f 7000 	mov.w	r0, #512	; 0x200
 800422c:	f003 ff34 	bl	8008098 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004230:	bf00      	nop
 8004232:	bd80      	pop	{r7, pc}

08004234 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8004238:	4802      	ldr	r0, [pc, #8]	; (8004244 <SDMMC1_IRQHandler+0x10>)
 800423a:	f009 f9c1 	bl	800d5c0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800423e:	bf00      	nop
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	24001470 	.word	0x24001470

08004248 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800424c:	4802      	ldr	r0, [pc, #8]	; (8004258 <OTG_FS_IRQHandler+0x10>)
 800424e:	f004 f8b8 	bl	80083c2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004252:	bf00      	nop
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	240020a4 	.word	0x240020a4

0800425c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004268:	2300      	movs	r3, #0
 800426a:	617b      	str	r3, [r7, #20]
 800426c:	e00a      	b.n	8004284 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800426e:	f3af 8000 	nop.w
 8004272:	4601      	mov	r1, r0
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	1c5a      	adds	r2, r3, #1
 8004278:	60ba      	str	r2, [r7, #8]
 800427a:	b2ca      	uxtb	r2, r1
 800427c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	3301      	adds	r3, #1
 8004282:	617b      	str	r3, [r7, #20]
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	429a      	cmp	r2, r3
 800428a:	dbf0      	blt.n	800426e <_read+0x12>
	}

return len;
 800428c:	687b      	ldr	r3, [r7, #4]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3718      	adds	r7, #24
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <_close>:
	}
	return len;
}

int _close(int file)
{
 8004296:	b480      	push	{r7}
 8004298:	b083      	sub	sp, #12
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
	return -1;
 800429e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b083      	sub	sp, #12
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
 80042b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042be:	605a      	str	r2, [r3, #4]
	return 0;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <_isatty>:

int _isatty(int file)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b083      	sub	sp, #12
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
	return 1;
 80042d6:	2301      	movs	r3, #1
}
 80042d8:	4618      	mov	r0, r3
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
	return 0;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
	...

08004300 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004308:	4a14      	ldr	r2, [pc, #80]	; (800435c <_sbrk+0x5c>)
 800430a:	4b15      	ldr	r3, [pc, #84]	; (8004360 <_sbrk+0x60>)
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004314:	4b13      	ldr	r3, [pc, #76]	; (8004364 <_sbrk+0x64>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d102      	bne.n	8004322 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800431c:	4b11      	ldr	r3, [pc, #68]	; (8004364 <_sbrk+0x64>)
 800431e:	4a12      	ldr	r2, [pc, #72]	; (8004368 <_sbrk+0x68>)
 8004320:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004322:	4b10      	ldr	r3, [pc, #64]	; (8004364 <_sbrk+0x64>)
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4413      	add	r3, r2
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	429a      	cmp	r2, r3
 800432e:	d207      	bcs.n	8004340 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004330:	f015 f874 	bl	801941c <__errno>
 8004334:	4602      	mov	r2, r0
 8004336:	230c      	movs	r3, #12
 8004338:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800433a:	f04f 33ff 	mov.w	r3, #4294967295
 800433e:	e009      	b.n	8004354 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004340:	4b08      	ldr	r3, [pc, #32]	; (8004364 <_sbrk+0x64>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004346:	4b07      	ldr	r3, [pc, #28]	; (8004364 <_sbrk+0x64>)
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4413      	add	r3, r2
 800434e:	4a05      	ldr	r2, [pc, #20]	; (8004364 <_sbrk+0x64>)
 8004350:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004352:	68fb      	ldr	r3, [r7, #12]
}
 8004354:	4618      	mov	r0, r3
 8004356:	3718      	adds	r7, #24
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	24080000 	.word	0x24080000
 8004360:	00000400 	.word	0x00000400
 8004364:	24000b4c 	.word	0x24000b4c
 8004368:	240024b0 	.word	0x240024b0

0800436c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004370:	4b39      	ldr	r3, [pc, #228]	; (8004458 <SystemInit+0xec>)
 8004372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004376:	4a38      	ldr	r2, [pc, #224]	; (8004458 <SystemInit+0xec>)
 8004378:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800437c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004380:	4b36      	ldr	r3, [pc, #216]	; (800445c <SystemInit+0xf0>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 030f 	and.w	r3, r3, #15
 8004388:	2b06      	cmp	r3, #6
 800438a:	d807      	bhi.n	800439c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800438c:	4b33      	ldr	r3, [pc, #204]	; (800445c <SystemInit+0xf0>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f023 030f 	bic.w	r3, r3, #15
 8004394:	4a31      	ldr	r2, [pc, #196]	; (800445c <SystemInit+0xf0>)
 8004396:	f043 0307 	orr.w	r3, r3, #7
 800439a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800439c:	4b30      	ldr	r3, [pc, #192]	; (8004460 <SystemInit+0xf4>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a2f      	ldr	r2, [pc, #188]	; (8004460 <SystemInit+0xf4>)
 80043a2:	f043 0301 	orr.w	r3, r3, #1
 80043a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80043a8:	4b2d      	ldr	r3, [pc, #180]	; (8004460 <SystemInit+0xf4>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80043ae:	4b2c      	ldr	r3, [pc, #176]	; (8004460 <SystemInit+0xf4>)
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	492b      	ldr	r1, [pc, #172]	; (8004460 <SystemInit+0xf4>)
 80043b4:	4b2b      	ldr	r3, [pc, #172]	; (8004464 <SystemInit+0xf8>)
 80043b6:	4013      	ands	r3, r2
 80043b8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80043ba:	4b28      	ldr	r3, [pc, #160]	; (800445c <SystemInit+0xf0>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 030f 	and.w	r3, r3, #15
 80043c2:	2b07      	cmp	r3, #7
 80043c4:	d907      	bls.n	80043d6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80043c6:	4b25      	ldr	r3, [pc, #148]	; (800445c <SystemInit+0xf0>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f023 030f 	bic.w	r3, r3, #15
 80043ce:	4a23      	ldr	r2, [pc, #140]	; (800445c <SystemInit+0xf0>)
 80043d0:	f043 0307 	orr.w	r3, r3, #7
 80043d4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80043d6:	4b22      	ldr	r3, [pc, #136]	; (8004460 <SystemInit+0xf4>)
 80043d8:	2200      	movs	r2, #0
 80043da:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80043dc:	4b20      	ldr	r3, [pc, #128]	; (8004460 <SystemInit+0xf4>)
 80043de:	2200      	movs	r2, #0
 80043e0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80043e2:	4b1f      	ldr	r3, [pc, #124]	; (8004460 <SystemInit+0xf4>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80043e8:	4b1d      	ldr	r3, [pc, #116]	; (8004460 <SystemInit+0xf4>)
 80043ea:	4a1f      	ldr	r2, [pc, #124]	; (8004468 <SystemInit+0xfc>)
 80043ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80043ee:	4b1c      	ldr	r3, [pc, #112]	; (8004460 <SystemInit+0xf4>)
 80043f0:	4a1e      	ldr	r2, [pc, #120]	; (800446c <SystemInit+0x100>)
 80043f2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80043f4:	4b1a      	ldr	r3, [pc, #104]	; (8004460 <SystemInit+0xf4>)
 80043f6:	4a1e      	ldr	r2, [pc, #120]	; (8004470 <SystemInit+0x104>)
 80043f8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80043fa:	4b19      	ldr	r3, [pc, #100]	; (8004460 <SystemInit+0xf4>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004400:	4b17      	ldr	r3, [pc, #92]	; (8004460 <SystemInit+0xf4>)
 8004402:	4a1b      	ldr	r2, [pc, #108]	; (8004470 <SystemInit+0x104>)
 8004404:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004406:	4b16      	ldr	r3, [pc, #88]	; (8004460 <SystemInit+0xf4>)
 8004408:	2200      	movs	r2, #0
 800440a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800440c:	4b14      	ldr	r3, [pc, #80]	; (8004460 <SystemInit+0xf4>)
 800440e:	4a18      	ldr	r2, [pc, #96]	; (8004470 <SystemInit+0x104>)
 8004410:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004412:	4b13      	ldr	r3, [pc, #76]	; (8004460 <SystemInit+0xf4>)
 8004414:	2200      	movs	r2, #0
 8004416:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004418:	4b11      	ldr	r3, [pc, #68]	; (8004460 <SystemInit+0xf4>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a10      	ldr	r2, [pc, #64]	; (8004460 <SystemInit+0xf4>)
 800441e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004422:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004424:	4b0e      	ldr	r3, [pc, #56]	; (8004460 <SystemInit+0xf4>)
 8004426:	2200      	movs	r2, #0
 8004428:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800442a:	4b12      	ldr	r3, [pc, #72]	; (8004474 <SystemInit+0x108>)
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	4b12      	ldr	r3, [pc, #72]	; (8004478 <SystemInit+0x10c>)
 8004430:	4013      	ands	r3, r2
 8004432:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004436:	d202      	bcs.n	800443e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004438:	4b10      	ldr	r3, [pc, #64]	; (800447c <SystemInit+0x110>)
 800443a:	2201      	movs	r2, #1
 800443c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800443e:	4b10      	ldr	r3, [pc, #64]	; (8004480 <SystemInit+0x114>)
 8004440:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004444:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004446:	4b04      	ldr	r3, [pc, #16]	; (8004458 <SystemInit+0xec>)
 8004448:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800444c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800444e:	bf00      	nop
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	e000ed00 	.word	0xe000ed00
 800445c:	52002000 	.word	0x52002000
 8004460:	58024400 	.word	0x58024400
 8004464:	eaf6ed7f 	.word	0xeaf6ed7f
 8004468:	02020200 	.word	0x02020200
 800446c:	01ff0000 	.word	0x01ff0000
 8004470:	01010280 	.word	0x01010280
 8004474:	5c001000 	.word	0x5c001000
 8004478:	ffff0000 	.word	0xffff0000
 800447c:	51008108 	.word	0x51008108
 8004480:	52004000 	.word	0x52004000

08004484 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004484:	f8df d034 	ldr.w	sp, [pc, #52]	; 80044bc <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004488:	f7ff ff70 	bl	800436c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800448c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800448e:	e003      	b.n	8004498 <LoopCopyDataInit>

08004490 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004490:	4b0b      	ldr	r3, [pc, #44]	; (80044c0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8004492:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004494:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004496:	3104      	adds	r1, #4

08004498 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004498:	480a      	ldr	r0, [pc, #40]	; (80044c4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800449a:	4b0b      	ldr	r3, [pc, #44]	; (80044c8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 800449c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800449e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80044a0:	d3f6      	bcc.n	8004490 <CopyDataInit>
  ldr  r2, =_sbss
 80044a2:	4a0a      	ldr	r2, [pc, #40]	; (80044cc <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80044a4:	e002      	b.n	80044ac <LoopFillZerobss>

080044a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80044a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80044a8:	f842 3b04 	str.w	r3, [r2], #4

080044ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80044ac:	4b08      	ldr	r3, [pc, #32]	; (80044d0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80044ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80044b0:	d3f9      	bcc.n	80044a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80044b2:	f014 ffb9 	bl	8019428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044b6:	f7fd fd09 	bl	8001ecc <main>
  bx  lr    
 80044ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80044bc:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80044c0:	0801b0f0 	.word	0x0801b0f0
  ldr  r0, =_sdata
 80044c4:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80044c8:	240001dc 	.word	0x240001dc
  ldr  r2, =_sbss
 80044cc:	240001e0 	.word	0x240001e0
  ldr  r3, = _ebss
 80044d0:	240024b0 	.word	0x240024b0

080044d4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80044d4:	e7fe      	b.n	80044d4 <ADC3_IRQHandler>
	...

080044d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044de:	2003      	movs	r0, #3
 80044e0:	f000 f98a 	bl	80047f8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80044e4:	f005 ff1c 	bl	800a320 <HAL_RCC_GetSysClockFreq>
 80044e8:	4601      	mov	r1, r0
 80044ea:	4b15      	ldr	r3, [pc, #84]	; (8004540 <HAL_Init+0x68>)
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	0a1b      	lsrs	r3, r3, #8
 80044f0:	f003 030f 	and.w	r3, r3, #15
 80044f4:	4a13      	ldr	r2, [pc, #76]	; (8004544 <HAL_Init+0x6c>)
 80044f6:	5cd3      	ldrb	r3, [r2, r3]
 80044f8:	f003 031f 	and.w	r3, r3, #31
 80044fc:	fa21 f303 	lsr.w	r3, r1, r3
 8004500:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004502:	4b0f      	ldr	r3, [pc, #60]	; (8004540 <HAL_Init+0x68>)
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	f003 030f 	and.w	r3, r3, #15
 800450a:	4a0e      	ldr	r2, [pc, #56]	; (8004544 <HAL_Init+0x6c>)
 800450c:	5cd3      	ldrb	r3, [r2, r3]
 800450e:	f003 031f 	and.w	r3, r3, #31
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	fa22 f303 	lsr.w	r3, r2, r3
 8004518:	4a0b      	ldr	r2, [pc, #44]	; (8004548 <HAL_Init+0x70>)
 800451a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800451c:	4a0b      	ldr	r2, [pc, #44]	; (800454c <HAL_Init+0x74>)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004522:	2000      	movs	r0, #0
 8004524:	f000 f814 	bl	8004550 <HAL_InitTick>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e002      	b.n	8004538 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004532:	f7ff fbbf 	bl	8003cb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	58024400 	.word	0x58024400
 8004544:	0801af50 	.word	0x0801af50
 8004548:	24000014 	.word	0x24000014
 800454c:	24000010 	.word	0x24000010

08004550 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004558:	4b15      	ldr	r3, [pc, #84]	; (80045b0 <HAL_InitTick+0x60>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e021      	b.n	80045a8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004564:	4b13      	ldr	r3, [pc, #76]	; (80045b4 <HAL_InitTick+0x64>)
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	4b11      	ldr	r3, [pc, #68]	; (80045b0 <HAL_InitTick+0x60>)
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	4619      	mov	r1, r3
 800456e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004572:	fbb3 f3f1 	udiv	r3, r3, r1
 8004576:	fbb2 f3f3 	udiv	r3, r2, r3
 800457a:	4618      	mov	r0, r3
 800457c:	f000 f96f 	bl	800485e <HAL_SYSTICK_Config>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e00e      	b.n	80045a8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b0f      	cmp	r3, #15
 800458e:	d80a      	bhi.n	80045a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004590:	2200      	movs	r2, #0
 8004592:	6879      	ldr	r1, [r7, #4]
 8004594:	f04f 30ff 	mov.w	r0, #4294967295
 8004598:	f000 f939 	bl	800480e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800459c:	4a06      	ldr	r2, [pc, #24]	; (80045b8 <HAL_InitTick+0x68>)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	e000      	b.n	80045a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3708      	adds	r7, #8
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	2400001c 	.word	0x2400001c
 80045b4:	24000010 	.word	0x24000010
 80045b8:	24000018 	.word	0x24000018

080045bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80045c0:	4b06      	ldr	r3, [pc, #24]	; (80045dc <HAL_IncTick+0x20>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	461a      	mov	r2, r3
 80045c6:	4b06      	ldr	r3, [pc, #24]	; (80045e0 <HAL_IncTick+0x24>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4413      	add	r3, r2
 80045cc:	4a04      	ldr	r2, [pc, #16]	; (80045e0 <HAL_IncTick+0x24>)
 80045ce:	6013      	str	r3, [r2, #0]
}
 80045d0:	bf00      	nop
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	2400001c 	.word	0x2400001c
 80045e0:	24001768 	.word	0x24001768

080045e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
  return uwTick;
 80045e8:	4b03      	ldr	r3, [pc, #12]	; (80045f8 <HAL_GetTick+0x14>)
 80045ea:	681b      	ldr	r3, [r3, #0]
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	24001768 	.word	0x24001768

080045fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004604:	f7ff ffee 	bl	80045e4 <HAL_GetTick>
 8004608:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004614:	d005      	beq.n	8004622 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004616:	4b09      	ldr	r3, [pc, #36]	; (800463c <HAL_Delay+0x40>)
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	461a      	mov	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	4413      	add	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004622:	bf00      	nop
 8004624:	f7ff ffde 	bl	80045e4 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	429a      	cmp	r2, r3
 8004632:	d8f7      	bhi.n	8004624 <HAL_Delay+0x28>
  {
  }
}
 8004634:	bf00      	nop
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	2400001c 	.word	0x2400001c

08004640 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004644:	4b03      	ldr	r3, [pc, #12]	; (8004654 <HAL_GetREVID+0x14>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	0c1b      	lsrs	r3, r3, #16
}
 800464a:	4618      	mov	r0, r3
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr
 8004654:	5c001000 	.word	0x5c001000

08004658 <__NVIC_SetPriorityGrouping>:
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f003 0307 	and.w	r3, r3, #7
 8004666:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004668:	4b0b      	ldr	r3, [pc, #44]	; (8004698 <__NVIC_SetPriorityGrouping+0x40>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004674:	4013      	ands	r3, r2
 8004676:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004680:	4b06      	ldr	r3, [pc, #24]	; (800469c <__NVIC_SetPriorityGrouping+0x44>)
 8004682:	4313      	orrs	r3, r2
 8004684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004686:	4a04      	ldr	r2, [pc, #16]	; (8004698 <__NVIC_SetPriorityGrouping+0x40>)
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	60d3      	str	r3, [r2, #12]
}
 800468c:	bf00      	nop
 800468e:	3714      	adds	r7, #20
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr
 8004698:	e000ed00 	.word	0xe000ed00
 800469c:	05fa0000 	.word	0x05fa0000

080046a0 <__NVIC_GetPriorityGrouping>:
{
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046a4:	4b04      	ldr	r3, [pc, #16]	; (80046b8 <__NVIC_GetPriorityGrouping+0x18>)
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	0a1b      	lsrs	r3, r3, #8
 80046aa:	f003 0307 	and.w	r3, r3, #7
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	e000ed00 	.word	0xe000ed00

080046bc <__NVIC_EnableIRQ>:
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	4603      	mov	r3, r0
 80046c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80046c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	db0b      	blt.n	80046e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046ce:	88fb      	ldrh	r3, [r7, #6]
 80046d0:	f003 021f 	and.w	r2, r3, #31
 80046d4:	4907      	ldr	r1, [pc, #28]	; (80046f4 <__NVIC_EnableIRQ+0x38>)
 80046d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046da:	095b      	lsrs	r3, r3, #5
 80046dc:	2001      	movs	r0, #1
 80046de:	fa00 f202 	lsl.w	r2, r0, r2
 80046e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80046e6:	bf00      	nop
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	e000e100 	.word	0xe000e100

080046f8 <__NVIC_SetPriority>:
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	4603      	mov	r3, r0
 8004700:	6039      	str	r1, [r7, #0]
 8004702:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004704:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004708:	2b00      	cmp	r3, #0
 800470a:	db0a      	blt.n	8004722 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	b2da      	uxtb	r2, r3
 8004710:	490c      	ldr	r1, [pc, #48]	; (8004744 <__NVIC_SetPriority+0x4c>)
 8004712:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004716:	0112      	lsls	r2, r2, #4
 8004718:	b2d2      	uxtb	r2, r2
 800471a:	440b      	add	r3, r1
 800471c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004720:	e00a      	b.n	8004738 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	b2da      	uxtb	r2, r3
 8004726:	4908      	ldr	r1, [pc, #32]	; (8004748 <__NVIC_SetPriority+0x50>)
 8004728:	88fb      	ldrh	r3, [r7, #6]
 800472a:	f003 030f 	and.w	r3, r3, #15
 800472e:	3b04      	subs	r3, #4
 8004730:	0112      	lsls	r2, r2, #4
 8004732:	b2d2      	uxtb	r2, r2
 8004734:	440b      	add	r3, r1
 8004736:	761a      	strb	r2, [r3, #24]
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	e000e100 	.word	0xe000e100
 8004748:	e000ed00 	.word	0xe000ed00

0800474c <NVIC_EncodePriority>:
{
 800474c:	b480      	push	{r7}
 800474e:	b089      	sub	sp, #36	; 0x24
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f003 0307 	and.w	r3, r3, #7
 800475e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	f1c3 0307 	rsb	r3, r3, #7
 8004766:	2b04      	cmp	r3, #4
 8004768:	bf28      	it	cs
 800476a:	2304      	movcs	r3, #4
 800476c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	3304      	adds	r3, #4
 8004772:	2b06      	cmp	r3, #6
 8004774:	d902      	bls.n	800477c <NVIC_EncodePriority+0x30>
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	3b03      	subs	r3, #3
 800477a:	e000      	b.n	800477e <NVIC_EncodePriority+0x32>
 800477c:	2300      	movs	r3, #0
 800477e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004780:	f04f 32ff 	mov.w	r2, #4294967295
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	fa02 f303 	lsl.w	r3, r2, r3
 800478a:	43da      	mvns	r2, r3
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	401a      	ands	r2, r3
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004794:	f04f 31ff 	mov.w	r1, #4294967295
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	fa01 f303 	lsl.w	r3, r1, r3
 800479e:	43d9      	mvns	r1, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047a4:	4313      	orrs	r3, r2
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3724      	adds	r7, #36	; 0x24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
	...

080047b4 <SysTick_Config>:
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	3b01      	subs	r3, #1
 80047c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047c4:	d301      	bcc.n	80047ca <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80047c6:	2301      	movs	r3, #1
 80047c8:	e00f      	b.n	80047ea <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047ca:	4a0a      	ldr	r2, [pc, #40]	; (80047f4 <SysTick_Config+0x40>)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	3b01      	subs	r3, #1
 80047d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047d2:	210f      	movs	r1, #15
 80047d4:	f04f 30ff 	mov.w	r0, #4294967295
 80047d8:	f7ff ff8e 	bl	80046f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047dc:	4b05      	ldr	r3, [pc, #20]	; (80047f4 <SysTick_Config+0x40>)
 80047de:	2200      	movs	r2, #0
 80047e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047e2:	4b04      	ldr	r3, [pc, #16]	; (80047f4 <SysTick_Config+0x40>)
 80047e4:	2207      	movs	r2, #7
 80047e6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	e000e010 	.word	0xe000e010

080047f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f7ff ff29 	bl	8004658 <__NVIC_SetPriorityGrouping>
}
 8004806:	bf00      	nop
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b086      	sub	sp, #24
 8004812:	af00      	add	r7, sp, #0
 8004814:	4603      	mov	r3, r0
 8004816:	60b9      	str	r1, [r7, #8]
 8004818:	607a      	str	r2, [r7, #4]
 800481a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800481c:	f7ff ff40 	bl	80046a0 <__NVIC_GetPriorityGrouping>
 8004820:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	68b9      	ldr	r1, [r7, #8]
 8004826:	6978      	ldr	r0, [r7, #20]
 8004828:	f7ff ff90 	bl	800474c <NVIC_EncodePriority>
 800482c:	4602      	mov	r2, r0
 800482e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004832:	4611      	mov	r1, r2
 8004834:	4618      	mov	r0, r3
 8004836:	f7ff ff5f 	bl	80046f8 <__NVIC_SetPriority>
}
 800483a:	bf00      	nop
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b082      	sub	sp, #8
 8004846:	af00      	add	r7, sp, #0
 8004848:	4603      	mov	r3, r0
 800484a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800484c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004850:	4618      	mov	r0, r3
 8004852:	f7ff ff33 	bl	80046bc <__NVIC_EnableIRQ>
}
 8004856:	bf00      	nop
 8004858:	3708      	adds	r7, #8
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b082      	sub	sp, #8
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7ff ffa4 	bl	80047b4 <SysTick_Config>
 800486c:	4603      	mov	r3, r0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
	...

08004878 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004880:	f7ff feb0 	bl	80045e4 <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e316      	b.n	8004ebe <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a66      	ldr	r2, [pc, #408]	; (8004a30 <HAL_DMA_Init+0x1b8>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d04a      	beq.n	8004930 <HAL_DMA_Init+0xb8>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a65      	ldr	r2, [pc, #404]	; (8004a34 <HAL_DMA_Init+0x1bc>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d045      	beq.n	8004930 <HAL_DMA_Init+0xb8>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a63      	ldr	r2, [pc, #396]	; (8004a38 <HAL_DMA_Init+0x1c0>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d040      	beq.n	8004930 <HAL_DMA_Init+0xb8>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a62      	ldr	r2, [pc, #392]	; (8004a3c <HAL_DMA_Init+0x1c4>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d03b      	beq.n	8004930 <HAL_DMA_Init+0xb8>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a60      	ldr	r2, [pc, #384]	; (8004a40 <HAL_DMA_Init+0x1c8>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d036      	beq.n	8004930 <HAL_DMA_Init+0xb8>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a5f      	ldr	r2, [pc, #380]	; (8004a44 <HAL_DMA_Init+0x1cc>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d031      	beq.n	8004930 <HAL_DMA_Init+0xb8>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a5d      	ldr	r2, [pc, #372]	; (8004a48 <HAL_DMA_Init+0x1d0>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d02c      	beq.n	8004930 <HAL_DMA_Init+0xb8>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a5c      	ldr	r2, [pc, #368]	; (8004a4c <HAL_DMA_Init+0x1d4>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d027      	beq.n	8004930 <HAL_DMA_Init+0xb8>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a5a      	ldr	r2, [pc, #360]	; (8004a50 <HAL_DMA_Init+0x1d8>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d022      	beq.n	8004930 <HAL_DMA_Init+0xb8>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a59      	ldr	r2, [pc, #356]	; (8004a54 <HAL_DMA_Init+0x1dc>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d01d      	beq.n	8004930 <HAL_DMA_Init+0xb8>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a57      	ldr	r2, [pc, #348]	; (8004a58 <HAL_DMA_Init+0x1e0>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d018      	beq.n	8004930 <HAL_DMA_Init+0xb8>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a56      	ldr	r2, [pc, #344]	; (8004a5c <HAL_DMA_Init+0x1e4>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d013      	beq.n	8004930 <HAL_DMA_Init+0xb8>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a54      	ldr	r2, [pc, #336]	; (8004a60 <HAL_DMA_Init+0x1e8>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d00e      	beq.n	8004930 <HAL_DMA_Init+0xb8>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a53      	ldr	r2, [pc, #332]	; (8004a64 <HAL_DMA_Init+0x1ec>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d009      	beq.n	8004930 <HAL_DMA_Init+0xb8>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a51      	ldr	r2, [pc, #324]	; (8004a68 <HAL_DMA_Init+0x1f0>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d004      	beq.n	8004930 <HAL_DMA_Init+0xb8>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a50      	ldr	r2, [pc, #320]	; (8004a6c <HAL_DMA_Init+0x1f4>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d101      	bne.n	8004934 <HAL_DMA_Init+0xbc>
 8004930:	2301      	movs	r3, #1
 8004932:	e000      	b.n	8004936 <HAL_DMA_Init+0xbe>
 8004934:	2300      	movs	r3, #0
 8004936:	2b00      	cmp	r3, #0
 8004938:	f000 813b 	beq.w	8004bb2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2202      	movs	r2, #2
 8004948:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a37      	ldr	r2, [pc, #220]	; (8004a30 <HAL_DMA_Init+0x1b8>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d04a      	beq.n	80049ec <HAL_DMA_Init+0x174>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a36      	ldr	r2, [pc, #216]	; (8004a34 <HAL_DMA_Init+0x1bc>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d045      	beq.n	80049ec <HAL_DMA_Init+0x174>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a34      	ldr	r2, [pc, #208]	; (8004a38 <HAL_DMA_Init+0x1c0>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d040      	beq.n	80049ec <HAL_DMA_Init+0x174>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a33      	ldr	r2, [pc, #204]	; (8004a3c <HAL_DMA_Init+0x1c4>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d03b      	beq.n	80049ec <HAL_DMA_Init+0x174>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a31      	ldr	r2, [pc, #196]	; (8004a40 <HAL_DMA_Init+0x1c8>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d036      	beq.n	80049ec <HAL_DMA_Init+0x174>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a30      	ldr	r2, [pc, #192]	; (8004a44 <HAL_DMA_Init+0x1cc>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d031      	beq.n	80049ec <HAL_DMA_Init+0x174>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a2e      	ldr	r2, [pc, #184]	; (8004a48 <HAL_DMA_Init+0x1d0>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d02c      	beq.n	80049ec <HAL_DMA_Init+0x174>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a2d      	ldr	r2, [pc, #180]	; (8004a4c <HAL_DMA_Init+0x1d4>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d027      	beq.n	80049ec <HAL_DMA_Init+0x174>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a2b      	ldr	r2, [pc, #172]	; (8004a50 <HAL_DMA_Init+0x1d8>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d022      	beq.n	80049ec <HAL_DMA_Init+0x174>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a2a      	ldr	r2, [pc, #168]	; (8004a54 <HAL_DMA_Init+0x1dc>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d01d      	beq.n	80049ec <HAL_DMA_Init+0x174>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a28      	ldr	r2, [pc, #160]	; (8004a58 <HAL_DMA_Init+0x1e0>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d018      	beq.n	80049ec <HAL_DMA_Init+0x174>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a27      	ldr	r2, [pc, #156]	; (8004a5c <HAL_DMA_Init+0x1e4>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d013      	beq.n	80049ec <HAL_DMA_Init+0x174>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a25      	ldr	r2, [pc, #148]	; (8004a60 <HAL_DMA_Init+0x1e8>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d00e      	beq.n	80049ec <HAL_DMA_Init+0x174>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a24      	ldr	r2, [pc, #144]	; (8004a64 <HAL_DMA_Init+0x1ec>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d009      	beq.n	80049ec <HAL_DMA_Init+0x174>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a22      	ldr	r2, [pc, #136]	; (8004a68 <HAL_DMA_Init+0x1f0>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d004      	beq.n	80049ec <HAL_DMA_Init+0x174>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a21      	ldr	r2, [pc, #132]	; (8004a6c <HAL_DMA_Init+0x1f4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d108      	bne.n	80049fe <HAL_DMA_Init+0x186>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 0201 	bic.w	r2, r2, #1
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	e007      	b.n	8004a0e <HAL_DMA_Init+0x196>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f022 0201 	bic.w	r2, r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004a0e:	e02f      	b.n	8004a70 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a10:	f7ff fde8 	bl	80045e4 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b05      	cmp	r3, #5
 8004a1c:	d928      	bls.n	8004a70 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2220      	movs	r2, #32
 8004a22:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2203      	movs	r2, #3
 8004a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e246      	b.n	8004ebe <HAL_DMA_Init+0x646>
 8004a30:	40020010 	.word	0x40020010
 8004a34:	40020028 	.word	0x40020028
 8004a38:	40020040 	.word	0x40020040
 8004a3c:	40020058 	.word	0x40020058
 8004a40:	40020070 	.word	0x40020070
 8004a44:	40020088 	.word	0x40020088
 8004a48:	400200a0 	.word	0x400200a0
 8004a4c:	400200b8 	.word	0x400200b8
 8004a50:	40020410 	.word	0x40020410
 8004a54:	40020428 	.word	0x40020428
 8004a58:	40020440 	.word	0x40020440
 8004a5c:	40020458 	.word	0x40020458
 8004a60:	40020470 	.word	0x40020470
 8004a64:	40020488 	.word	0x40020488
 8004a68:	400204a0 	.word	0x400204a0
 8004a6c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1c8      	bne.n	8004a10 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	4b83      	ldr	r3, [pc, #524]	; (8004c98 <HAL_DMA_Init+0x420>)
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004a96:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004aa2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aae:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	d107      	bne.n	8004ad4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004acc:	4313      	orrs	r3, r2
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004ad4:	4b71      	ldr	r3, [pc, #452]	; (8004c9c <HAL_DMA_Init+0x424>)
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	4b71      	ldr	r3, [pc, #452]	; (8004ca0 <HAL_DMA_Init+0x428>)
 8004ada:	4013      	ands	r3, r2
 8004adc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ae0:	d328      	bcc.n	8004b34 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	2b28      	cmp	r3, #40	; 0x28
 8004ae8:	d903      	bls.n	8004af2 <HAL_DMA_Init+0x27a>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2b2e      	cmp	r3, #46	; 0x2e
 8004af0:	d917      	bls.n	8004b22 <HAL_DMA_Init+0x2aa>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2b3e      	cmp	r3, #62	; 0x3e
 8004af8:	d903      	bls.n	8004b02 <HAL_DMA_Init+0x28a>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	2b42      	cmp	r3, #66	; 0x42
 8004b00:	d90f      	bls.n	8004b22 <HAL_DMA_Init+0x2aa>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	2b46      	cmp	r3, #70	; 0x46
 8004b08:	d903      	bls.n	8004b12 <HAL_DMA_Init+0x29a>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	2b48      	cmp	r3, #72	; 0x48
 8004b10:	d907      	bls.n	8004b22 <HAL_DMA_Init+0x2aa>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	2b4e      	cmp	r3, #78	; 0x4e
 8004b18:	d905      	bls.n	8004b26 <HAL_DMA_Init+0x2ae>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2b52      	cmp	r3, #82	; 0x52
 8004b20:	d801      	bhi.n	8004b26 <HAL_DMA_Init+0x2ae>
 8004b22:	2301      	movs	r3, #1
 8004b24:	e000      	b.n	8004b28 <HAL_DMA_Init+0x2b0>
 8004b26:	2300      	movs	r3, #0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d003      	beq.n	8004b34 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b32:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	f023 0307 	bic.w	r3, r3, #7
 8004b4a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	2b04      	cmp	r3, #4
 8004b5c:	d117      	bne.n	8004b8e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00e      	beq.n	8004b8e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f001 fdcf 	bl	8006714 <DMA_CheckFifoParam>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d008      	beq.n	8004b8e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2240      	movs	r2, #64	; 0x40
 8004b80:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e197      	b.n	8004ebe <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f001 fd0a 	bl	80065b0 <DMA_CalcBaseAndBitshift>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ba4:	f003 031f 	and.w	r3, r3, #31
 8004ba8:	223f      	movs	r2, #63	; 0x3f
 8004baa:	409a      	lsls	r2, r3
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	609a      	str	r2, [r3, #8]
 8004bb0:	e0cd      	b.n	8004d4e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a3b      	ldr	r2, [pc, #236]	; (8004ca4 <HAL_DMA_Init+0x42c>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d022      	beq.n	8004c02 <HAL_DMA_Init+0x38a>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a39      	ldr	r2, [pc, #228]	; (8004ca8 <HAL_DMA_Init+0x430>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d01d      	beq.n	8004c02 <HAL_DMA_Init+0x38a>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a38      	ldr	r2, [pc, #224]	; (8004cac <HAL_DMA_Init+0x434>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d018      	beq.n	8004c02 <HAL_DMA_Init+0x38a>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a36      	ldr	r2, [pc, #216]	; (8004cb0 <HAL_DMA_Init+0x438>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d013      	beq.n	8004c02 <HAL_DMA_Init+0x38a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a35      	ldr	r2, [pc, #212]	; (8004cb4 <HAL_DMA_Init+0x43c>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d00e      	beq.n	8004c02 <HAL_DMA_Init+0x38a>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a33      	ldr	r2, [pc, #204]	; (8004cb8 <HAL_DMA_Init+0x440>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d009      	beq.n	8004c02 <HAL_DMA_Init+0x38a>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a32      	ldr	r2, [pc, #200]	; (8004cbc <HAL_DMA_Init+0x444>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d004      	beq.n	8004c02 <HAL_DMA_Init+0x38a>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a30      	ldr	r2, [pc, #192]	; (8004cc0 <HAL_DMA_Init+0x448>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d101      	bne.n	8004c06 <HAL_DMA_Init+0x38e>
 8004c02:	2301      	movs	r3, #1
 8004c04:	e000      	b.n	8004c08 <HAL_DMA_Init+0x390>
 8004c06:	2300      	movs	r3, #0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 8097 	beq.w	8004d3c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a24      	ldr	r2, [pc, #144]	; (8004ca4 <HAL_DMA_Init+0x42c>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d021      	beq.n	8004c5c <HAL_DMA_Init+0x3e4>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a22      	ldr	r2, [pc, #136]	; (8004ca8 <HAL_DMA_Init+0x430>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d01c      	beq.n	8004c5c <HAL_DMA_Init+0x3e4>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a21      	ldr	r2, [pc, #132]	; (8004cac <HAL_DMA_Init+0x434>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d017      	beq.n	8004c5c <HAL_DMA_Init+0x3e4>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a1f      	ldr	r2, [pc, #124]	; (8004cb0 <HAL_DMA_Init+0x438>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d012      	beq.n	8004c5c <HAL_DMA_Init+0x3e4>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a1e      	ldr	r2, [pc, #120]	; (8004cb4 <HAL_DMA_Init+0x43c>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d00d      	beq.n	8004c5c <HAL_DMA_Init+0x3e4>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a1c      	ldr	r2, [pc, #112]	; (8004cb8 <HAL_DMA_Init+0x440>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d008      	beq.n	8004c5c <HAL_DMA_Init+0x3e4>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a1b      	ldr	r2, [pc, #108]	; (8004cbc <HAL_DMA_Init+0x444>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d003      	beq.n	8004c5c <HAL_DMA_Init+0x3e4>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a19      	ldr	r2, [pc, #100]	; (8004cc0 <HAL_DMA_Init+0x448>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2202      	movs	r2, #2
 8004c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	4b12      	ldr	r3, [pc, #72]	; (8004cc4 <HAL_DMA_Init+0x44c>)
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	2b40      	cmp	r3, #64	; 0x40
 8004c84:	d020      	beq.n	8004cc8 <HAL_DMA_Init+0x450>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	2b80      	cmp	r3, #128	; 0x80
 8004c8c:	d102      	bne.n	8004c94 <HAL_DMA_Init+0x41c>
 8004c8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c92:	e01a      	b.n	8004cca <HAL_DMA_Init+0x452>
 8004c94:	2300      	movs	r3, #0
 8004c96:	e018      	b.n	8004cca <HAL_DMA_Init+0x452>
 8004c98:	fe10803f 	.word	0xfe10803f
 8004c9c:	5c001000 	.word	0x5c001000
 8004ca0:	ffff0000 	.word	0xffff0000
 8004ca4:	58025408 	.word	0x58025408
 8004ca8:	5802541c 	.word	0x5802541c
 8004cac:	58025430 	.word	0x58025430
 8004cb0:	58025444 	.word	0x58025444
 8004cb4:	58025458 	.word	0x58025458
 8004cb8:	5802546c 	.word	0x5802546c
 8004cbc:	58025480 	.word	0x58025480
 8004cc0:	58025494 	.word	0x58025494
 8004cc4:	fffe000f 	.word	0xfffe000f
 8004cc8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	68d2      	ldr	r2, [r2, #12]
 8004cce:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004cd0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004cd8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004ce0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004ce8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004cf0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004cf8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	4b6e      	ldr	r3, [pc, #440]	; (8004ec8 <HAL_DMA_Init+0x650>)
 8004d10:	4413      	add	r3, r2
 8004d12:	4a6e      	ldr	r2, [pc, #440]	; (8004ecc <HAL_DMA_Init+0x654>)
 8004d14:	fba2 2303 	umull	r2, r3, r2, r3
 8004d18:	091b      	lsrs	r3, r3, #4
 8004d1a:	009a      	lsls	r2, r3, #2
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f001 fc45 	bl	80065b0 <DMA_CalcBaseAndBitshift>
 8004d26:	4603      	mov	r3, r0
 8004d28:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d2e:	f003 031f 	and.w	r3, r3, #31
 8004d32:	2201      	movs	r2, #1
 8004d34:	409a      	lsls	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	605a      	str	r2, [r3, #4]
 8004d3a:	e008      	b.n	8004d4e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2240      	movs	r2, #64	; 0x40
 8004d40:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2203      	movs	r2, #3
 8004d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e0b7      	b.n	8004ebe <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a5f      	ldr	r2, [pc, #380]	; (8004ed0 <HAL_DMA_Init+0x658>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d072      	beq.n	8004e3e <HAL_DMA_Init+0x5c6>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a5d      	ldr	r2, [pc, #372]	; (8004ed4 <HAL_DMA_Init+0x65c>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d06d      	beq.n	8004e3e <HAL_DMA_Init+0x5c6>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a5c      	ldr	r2, [pc, #368]	; (8004ed8 <HAL_DMA_Init+0x660>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d068      	beq.n	8004e3e <HAL_DMA_Init+0x5c6>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a5a      	ldr	r2, [pc, #360]	; (8004edc <HAL_DMA_Init+0x664>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d063      	beq.n	8004e3e <HAL_DMA_Init+0x5c6>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a59      	ldr	r2, [pc, #356]	; (8004ee0 <HAL_DMA_Init+0x668>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d05e      	beq.n	8004e3e <HAL_DMA_Init+0x5c6>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a57      	ldr	r2, [pc, #348]	; (8004ee4 <HAL_DMA_Init+0x66c>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d059      	beq.n	8004e3e <HAL_DMA_Init+0x5c6>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a56      	ldr	r2, [pc, #344]	; (8004ee8 <HAL_DMA_Init+0x670>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d054      	beq.n	8004e3e <HAL_DMA_Init+0x5c6>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a54      	ldr	r2, [pc, #336]	; (8004eec <HAL_DMA_Init+0x674>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d04f      	beq.n	8004e3e <HAL_DMA_Init+0x5c6>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a53      	ldr	r2, [pc, #332]	; (8004ef0 <HAL_DMA_Init+0x678>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d04a      	beq.n	8004e3e <HAL_DMA_Init+0x5c6>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a51      	ldr	r2, [pc, #324]	; (8004ef4 <HAL_DMA_Init+0x67c>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d045      	beq.n	8004e3e <HAL_DMA_Init+0x5c6>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a50      	ldr	r2, [pc, #320]	; (8004ef8 <HAL_DMA_Init+0x680>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d040      	beq.n	8004e3e <HAL_DMA_Init+0x5c6>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a4e      	ldr	r2, [pc, #312]	; (8004efc <HAL_DMA_Init+0x684>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d03b      	beq.n	8004e3e <HAL_DMA_Init+0x5c6>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a4d      	ldr	r2, [pc, #308]	; (8004f00 <HAL_DMA_Init+0x688>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d036      	beq.n	8004e3e <HAL_DMA_Init+0x5c6>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a4b      	ldr	r2, [pc, #300]	; (8004f04 <HAL_DMA_Init+0x68c>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d031      	beq.n	8004e3e <HAL_DMA_Init+0x5c6>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a4a      	ldr	r2, [pc, #296]	; (8004f08 <HAL_DMA_Init+0x690>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d02c      	beq.n	8004e3e <HAL_DMA_Init+0x5c6>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a48      	ldr	r2, [pc, #288]	; (8004f0c <HAL_DMA_Init+0x694>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d027      	beq.n	8004e3e <HAL_DMA_Init+0x5c6>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a47      	ldr	r2, [pc, #284]	; (8004f10 <HAL_DMA_Init+0x698>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d022      	beq.n	8004e3e <HAL_DMA_Init+0x5c6>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a45      	ldr	r2, [pc, #276]	; (8004f14 <HAL_DMA_Init+0x69c>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d01d      	beq.n	8004e3e <HAL_DMA_Init+0x5c6>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a44      	ldr	r2, [pc, #272]	; (8004f18 <HAL_DMA_Init+0x6a0>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d018      	beq.n	8004e3e <HAL_DMA_Init+0x5c6>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a42      	ldr	r2, [pc, #264]	; (8004f1c <HAL_DMA_Init+0x6a4>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d013      	beq.n	8004e3e <HAL_DMA_Init+0x5c6>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a41      	ldr	r2, [pc, #260]	; (8004f20 <HAL_DMA_Init+0x6a8>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d00e      	beq.n	8004e3e <HAL_DMA_Init+0x5c6>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a3f      	ldr	r2, [pc, #252]	; (8004f24 <HAL_DMA_Init+0x6ac>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d009      	beq.n	8004e3e <HAL_DMA_Init+0x5c6>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a3e      	ldr	r2, [pc, #248]	; (8004f28 <HAL_DMA_Init+0x6b0>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d004      	beq.n	8004e3e <HAL_DMA_Init+0x5c6>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a3c      	ldr	r2, [pc, #240]	; (8004f2c <HAL_DMA_Init+0x6b4>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d101      	bne.n	8004e42 <HAL_DMA_Init+0x5ca>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e000      	b.n	8004e44 <HAL_DMA_Init+0x5cc>
 8004e42:	2300      	movs	r3, #0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d032      	beq.n	8004eae <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f001 fcdf 	bl	800680c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	2b80      	cmp	r3, #128	; 0x80
 8004e54:	d102      	bne.n	8004e5c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e64:	b2d2      	uxtb	r2, r2
 8004e66:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004e70:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d010      	beq.n	8004e9c <HAL_DMA_Init+0x624>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	2b08      	cmp	r3, #8
 8004e80:	d80c      	bhi.n	8004e9c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f001 fd5c 	bl	8006940 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004e98:	605a      	str	r2, [r3, #4]
 8004e9a:	e008      	b.n	8004eae <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3718      	adds	r7, #24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	a7fdabf8 	.word	0xa7fdabf8
 8004ecc:	cccccccd 	.word	0xcccccccd
 8004ed0:	40020010 	.word	0x40020010
 8004ed4:	40020028 	.word	0x40020028
 8004ed8:	40020040 	.word	0x40020040
 8004edc:	40020058 	.word	0x40020058
 8004ee0:	40020070 	.word	0x40020070
 8004ee4:	40020088 	.word	0x40020088
 8004ee8:	400200a0 	.word	0x400200a0
 8004eec:	400200b8 	.word	0x400200b8
 8004ef0:	40020410 	.word	0x40020410
 8004ef4:	40020428 	.word	0x40020428
 8004ef8:	40020440 	.word	0x40020440
 8004efc:	40020458 	.word	0x40020458
 8004f00:	40020470 	.word	0x40020470
 8004f04:	40020488 	.word	0x40020488
 8004f08:	400204a0 	.word	0x400204a0
 8004f0c:	400204b8 	.word	0x400204b8
 8004f10:	58025408 	.word	0x58025408
 8004f14:	5802541c 	.word	0x5802541c
 8004f18:	58025430 	.word	0x58025430
 8004f1c:	58025444 	.word	0x58025444
 8004f20:	58025458 	.word	0x58025458
 8004f24:	5802546c 	.word	0x5802546c
 8004f28:	58025480 	.word	0x58025480
 8004f2c:	58025494 	.word	0x58025494

08004f30 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
 8004f3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d101      	bne.n	8004f4c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e226      	b.n	800539a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d101      	bne.n	8004f5a <HAL_DMA_Start_IT+0x2a>
 8004f56:	2302      	movs	r3, #2
 8004f58:	e21f      	b.n	800539a <HAL_DMA_Start_IT+0x46a>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	f040 820a 	bne.w	8005384 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2202      	movs	r2, #2
 8004f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a68      	ldr	r2, [pc, #416]	; (8005124 <HAL_DMA_Start_IT+0x1f4>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d04a      	beq.n	800501e <HAL_DMA_Start_IT+0xee>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a66      	ldr	r2, [pc, #408]	; (8005128 <HAL_DMA_Start_IT+0x1f8>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d045      	beq.n	800501e <HAL_DMA_Start_IT+0xee>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a65      	ldr	r2, [pc, #404]	; (800512c <HAL_DMA_Start_IT+0x1fc>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d040      	beq.n	800501e <HAL_DMA_Start_IT+0xee>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a63      	ldr	r2, [pc, #396]	; (8005130 <HAL_DMA_Start_IT+0x200>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d03b      	beq.n	800501e <HAL_DMA_Start_IT+0xee>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a62      	ldr	r2, [pc, #392]	; (8005134 <HAL_DMA_Start_IT+0x204>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d036      	beq.n	800501e <HAL_DMA_Start_IT+0xee>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a60      	ldr	r2, [pc, #384]	; (8005138 <HAL_DMA_Start_IT+0x208>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d031      	beq.n	800501e <HAL_DMA_Start_IT+0xee>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a5f      	ldr	r2, [pc, #380]	; (800513c <HAL_DMA_Start_IT+0x20c>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d02c      	beq.n	800501e <HAL_DMA_Start_IT+0xee>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a5d      	ldr	r2, [pc, #372]	; (8005140 <HAL_DMA_Start_IT+0x210>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d027      	beq.n	800501e <HAL_DMA_Start_IT+0xee>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a5c      	ldr	r2, [pc, #368]	; (8005144 <HAL_DMA_Start_IT+0x214>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d022      	beq.n	800501e <HAL_DMA_Start_IT+0xee>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a5a      	ldr	r2, [pc, #360]	; (8005148 <HAL_DMA_Start_IT+0x218>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d01d      	beq.n	800501e <HAL_DMA_Start_IT+0xee>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a59      	ldr	r2, [pc, #356]	; (800514c <HAL_DMA_Start_IT+0x21c>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d018      	beq.n	800501e <HAL_DMA_Start_IT+0xee>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a57      	ldr	r2, [pc, #348]	; (8005150 <HAL_DMA_Start_IT+0x220>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d013      	beq.n	800501e <HAL_DMA_Start_IT+0xee>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a56      	ldr	r2, [pc, #344]	; (8005154 <HAL_DMA_Start_IT+0x224>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d00e      	beq.n	800501e <HAL_DMA_Start_IT+0xee>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a54      	ldr	r2, [pc, #336]	; (8005158 <HAL_DMA_Start_IT+0x228>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d009      	beq.n	800501e <HAL_DMA_Start_IT+0xee>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a53      	ldr	r2, [pc, #332]	; (800515c <HAL_DMA_Start_IT+0x22c>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d004      	beq.n	800501e <HAL_DMA_Start_IT+0xee>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a51      	ldr	r2, [pc, #324]	; (8005160 <HAL_DMA_Start_IT+0x230>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d108      	bne.n	8005030 <HAL_DMA_Start_IT+0x100>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 0201 	bic.w	r2, r2, #1
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	e007      	b.n	8005040 <HAL_DMA_Start_IT+0x110>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f022 0201 	bic.w	r2, r2, #1
 800503e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	68b9      	ldr	r1, [r7, #8]
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f001 f906 	bl	8006258 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a34      	ldr	r2, [pc, #208]	; (8005124 <HAL_DMA_Start_IT+0x1f4>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d04a      	beq.n	80050ec <HAL_DMA_Start_IT+0x1bc>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a33      	ldr	r2, [pc, #204]	; (8005128 <HAL_DMA_Start_IT+0x1f8>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d045      	beq.n	80050ec <HAL_DMA_Start_IT+0x1bc>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a31      	ldr	r2, [pc, #196]	; (800512c <HAL_DMA_Start_IT+0x1fc>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d040      	beq.n	80050ec <HAL_DMA_Start_IT+0x1bc>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a30      	ldr	r2, [pc, #192]	; (8005130 <HAL_DMA_Start_IT+0x200>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d03b      	beq.n	80050ec <HAL_DMA_Start_IT+0x1bc>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a2e      	ldr	r2, [pc, #184]	; (8005134 <HAL_DMA_Start_IT+0x204>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d036      	beq.n	80050ec <HAL_DMA_Start_IT+0x1bc>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a2d      	ldr	r2, [pc, #180]	; (8005138 <HAL_DMA_Start_IT+0x208>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d031      	beq.n	80050ec <HAL_DMA_Start_IT+0x1bc>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a2b      	ldr	r2, [pc, #172]	; (800513c <HAL_DMA_Start_IT+0x20c>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d02c      	beq.n	80050ec <HAL_DMA_Start_IT+0x1bc>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a2a      	ldr	r2, [pc, #168]	; (8005140 <HAL_DMA_Start_IT+0x210>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d027      	beq.n	80050ec <HAL_DMA_Start_IT+0x1bc>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a28      	ldr	r2, [pc, #160]	; (8005144 <HAL_DMA_Start_IT+0x214>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d022      	beq.n	80050ec <HAL_DMA_Start_IT+0x1bc>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a27      	ldr	r2, [pc, #156]	; (8005148 <HAL_DMA_Start_IT+0x218>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d01d      	beq.n	80050ec <HAL_DMA_Start_IT+0x1bc>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a25      	ldr	r2, [pc, #148]	; (800514c <HAL_DMA_Start_IT+0x21c>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d018      	beq.n	80050ec <HAL_DMA_Start_IT+0x1bc>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a24      	ldr	r2, [pc, #144]	; (8005150 <HAL_DMA_Start_IT+0x220>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d013      	beq.n	80050ec <HAL_DMA_Start_IT+0x1bc>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a22      	ldr	r2, [pc, #136]	; (8005154 <HAL_DMA_Start_IT+0x224>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d00e      	beq.n	80050ec <HAL_DMA_Start_IT+0x1bc>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a21      	ldr	r2, [pc, #132]	; (8005158 <HAL_DMA_Start_IT+0x228>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d009      	beq.n	80050ec <HAL_DMA_Start_IT+0x1bc>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a1f      	ldr	r2, [pc, #124]	; (800515c <HAL_DMA_Start_IT+0x22c>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d004      	beq.n	80050ec <HAL_DMA_Start_IT+0x1bc>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a1e      	ldr	r2, [pc, #120]	; (8005160 <HAL_DMA_Start_IT+0x230>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d101      	bne.n	80050f0 <HAL_DMA_Start_IT+0x1c0>
 80050ec:	2301      	movs	r3, #1
 80050ee:	e000      	b.n	80050f2 <HAL_DMA_Start_IT+0x1c2>
 80050f0:	2300      	movs	r3, #0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d036      	beq.n	8005164 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f023 021e 	bic.w	r2, r3, #30
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f042 0216 	orr.w	r2, r2, #22
 8005108:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510e:	2b00      	cmp	r3, #0
 8005110:	d03e      	beq.n	8005190 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f042 0208 	orr.w	r2, r2, #8
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	e035      	b.n	8005190 <HAL_DMA_Start_IT+0x260>
 8005124:	40020010 	.word	0x40020010
 8005128:	40020028 	.word	0x40020028
 800512c:	40020040 	.word	0x40020040
 8005130:	40020058 	.word	0x40020058
 8005134:	40020070 	.word	0x40020070
 8005138:	40020088 	.word	0x40020088
 800513c:	400200a0 	.word	0x400200a0
 8005140:	400200b8 	.word	0x400200b8
 8005144:	40020410 	.word	0x40020410
 8005148:	40020428 	.word	0x40020428
 800514c:	40020440 	.word	0x40020440
 8005150:	40020458 	.word	0x40020458
 8005154:	40020470 	.word	0x40020470
 8005158:	40020488 	.word	0x40020488
 800515c:	400204a0 	.word	0x400204a0
 8005160:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f023 020e 	bic.w	r2, r3, #14
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f042 020a 	orr.w	r2, r2, #10
 8005176:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517c:	2b00      	cmp	r3, #0
 800517e:	d007      	beq.n	8005190 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f042 0204 	orr.w	r2, r2, #4
 800518e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a83      	ldr	r2, [pc, #524]	; (80053a4 <HAL_DMA_Start_IT+0x474>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d072      	beq.n	8005280 <HAL_DMA_Start_IT+0x350>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a82      	ldr	r2, [pc, #520]	; (80053a8 <HAL_DMA_Start_IT+0x478>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d06d      	beq.n	8005280 <HAL_DMA_Start_IT+0x350>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a80      	ldr	r2, [pc, #512]	; (80053ac <HAL_DMA_Start_IT+0x47c>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d068      	beq.n	8005280 <HAL_DMA_Start_IT+0x350>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a7f      	ldr	r2, [pc, #508]	; (80053b0 <HAL_DMA_Start_IT+0x480>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d063      	beq.n	8005280 <HAL_DMA_Start_IT+0x350>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a7d      	ldr	r2, [pc, #500]	; (80053b4 <HAL_DMA_Start_IT+0x484>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d05e      	beq.n	8005280 <HAL_DMA_Start_IT+0x350>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a7c      	ldr	r2, [pc, #496]	; (80053b8 <HAL_DMA_Start_IT+0x488>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d059      	beq.n	8005280 <HAL_DMA_Start_IT+0x350>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a7a      	ldr	r2, [pc, #488]	; (80053bc <HAL_DMA_Start_IT+0x48c>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d054      	beq.n	8005280 <HAL_DMA_Start_IT+0x350>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a79      	ldr	r2, [pc, #484]	; (80053c0 <HAL_DMA_Start_IT+0x490>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d04f      	beq.n	8005280 <HAL_DMA_Start_IT+0x350>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a77      	ldr	r2, [pc, #476]	; (80053c4 <HAL_DMA_Start_IT+0x494>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d04a      	beq.n	8005280 <HAL_DMA_Start_IT+0x350>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a76      	ldr	r2, [pc, #472]	; (80053c8 <HAL_DMA_Start_IT+0x498>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d045      	beq.n	8005280 <HAL_DMA_Start_IT+0x350>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a74      	ldr	r2, [pc, #464]	; (80053cc <HAL_DMA_Start_IT+0x49c>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d040      	beq.n	8005280 <HAL_DMA_Start_IT+0x350>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a73      	ldr	r2, [pc, #460]	; (80053d0 <HAL_DMA_Start_IT+0x4a0>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d03b      	beq.n	8005280 <HAL_DMA_Start_IT+0x350>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a71      	ldr	r2, [pc, #452]	; (80053d4 <HAL_DMA_Start_IT+0x4a4>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d036      	beq.n	8005280 <HAL_DMA_Start_IT+0x350>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a70      	ldr	r2, [pc, #448]	; (80053d8 <HAL_DMA_Start_IT+0x4a8>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d031      	beq.n	8005280 <HAL_DMA_Start_IT+0x350>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a6e      	ldr	r2, [pc, #440]	; (80053dc <HAL_DMA_Start_IT+0x4ac>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d02c      	beq.n	8005280 <HAL_DMA_Start_IT+0x350>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a6d      	ldr	r2, [pc, #436]	; (80053e0 <HAL_DMA_Start_IT+0x4b0>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d027      	beq.n	8005280 <HAL_DMA_Start_IT+0x350>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a6b      	ldr	r2, [pc, #428]	; (80053e4 <HAL_DMA_Start_IT+0x4b4>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d022      	beq.n	8005280 <HAL_DMA_Start_IT+0x350>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a6a      	ldr	r2, [pc, #424]	; (80053e8 <HAL_DMA_Start_IT+0x4b8>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d01d      	beq.n	8005280 <HAL_DMA_Start_IT+0x350>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a68      	ldr	r2, [pc, #416]	; (80053ec <HAL_DMA_Start_IT+0x4bc>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d018      	beq.n	8005280 <HAL_DMA_Start_IT+0x350>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a67      	ldr	r2, [pc, #412]	; (80053f0 <HAL_DMA_Start_IT+0x4c0>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d013      	beq.n	8005280 <HAL_DMA_Start_IT+0x350>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a65      	ldr	r2, [pc, #404]	; (80053f4 <HAL_DMA_Start_IT+0x4c4>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d00e      	beq.n	8005280 <HAL_DMA_Start_IT+0x350>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a64      	ldr	r2, [pc, #400]	; (80053f8 <HAL_DMA_Start_IT+0x4c8>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d009      	beq.n	8005280 <HAL_DMA_Start_IT+0x350>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a62      	ldr	r2, [pc, #392]	; (80053fc <HAL_DMA_Start_IT+0x4cc>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d004      	beq.n	8005280 <HAL_DMA_Start_IT+0x350>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a61      	ldr	r2, [pc, #388]	; (8005400 <HAL_DMA_Start_IT+0x4d0>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d101      	bne.n	8005284 <HAL_DMA_Start_IT+0x354>
 8005280:	2301      	movs	r3, #1
 8005282:	e000      	b.n	8005286 <HAL_DMA_Start_IT+0x356>
 8005284:	2300      	movs	r3, #0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d01a      	beq.n	80052c0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d007      	beq.n	80052a8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052a6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d007      	beq.n	80052c0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052be:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a37      	ldr	r2, [pc, #220]	; (80053a4 <HAL_DMA_Start_IT+0x474>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d04a      	beq.n	8005360 <HAL_DMA_Start_IT+0x430>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a36      	ldr	r2, [pc, #216]	; (80053a8 <HAL_DMA_Start_IT+0x478>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d045      	beq.n	8005360 <HAL_DMA_Start_IT+0x430>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a34      	ldr	r2, [pc, #208]	; (80053ac <HAL_DMA_Start_IT+0x47c>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d040      	beq.n	8005360 <HAL_DMA_Start_IT+0x430>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a33      	ldr	r2, [pc, #204]	; (80053b0 <HAL_DMA_Start_IT+0x480>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d03b      	beq.n	8005360 <HAL_DMA_Start_IT+0x430>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a31      	ldr	r2, [pc, #196]	; (80053b4 <HAL_DMA_Start_IT+0x484>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d036      	beq.n	8005360 <HAL_DMA_Start_IT+0x430>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a30      	ldr	r2, [pc, #192]	; (80053b8 <HAL_DMA_Start_IT+0x488>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d031      	beq.n	8005360 <HAL_DMA_Start_IT+0x430>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a2e      	ldr	r2, [pc, #184]	; (80053bc <HAL_DMA_Start_IT+0x48c>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d02c      	beq.n	8005360 <HAL_DMA_Start_IT+0x430>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a2d      	ldr	r2, [pc, #180]	; (80053c0 <HAL_DMA_Start_IT+0x490>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d027      	beq.n	8005360 <HAL_DMA_Start_IT+0x430>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a2b      	ldr	r2, [pc, #172]	; (80053c4 <HAL_DMA_Start_IT+0x494>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d022      	beq.n	8005360 <HAL_DMA_Start_IT+0x430>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a2a      	ldr	r2, [pc, #168]	; (80053c8 <HAL_DMA_Start_IT+0x498>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d01d      	beq.n	8005360 <HAL_DMA_Start_IT+0x430>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a28      	ldr	r2, [pc, #160]	; (80053cc <HAL_DMA_Start_IT+0x49c>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d018      	beq.n	8005360 <HAL_DMA_Start_IT+0x430>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a27      	ldr	r2, [pc, #156]	; (80053d0 <HAL_DMA_Start_IT+0x4a0>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d013      	beq.n	8005360 <HAL_DMA_Start_IT+0x430>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a25      	ldr	r2, [pc, #148]	; (80053d4 <HAL_DMA_Start_IT+0x4a4>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d00e      	beq.n	8005360 <HAL_DMA_Start_IT+0x430>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a24      	ldr	r2, [pc, #144]	; (80053d8 <HAL_DMA_Start_IT+0x4a8>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d009      	beq.n	8005360 <HAL_DMA_Start_IT+0x430>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a22      	ldr	r2, [pc, #136]	; (80053dc <HAL_DMA_Start_IT+0x4ac>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d004      	beq.n	8005360 <HAL_DMA_Start_IT+0x430>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a21      	ldr	r2, [pc, #132]	; (80053e0 <HAL_DMA_Start_IT+0x4b0>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d108      	bne.n	8005372 <HAL_DMA_Start_IT+0x442>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f042 0201 	orr.w	r2, r2, #1
 800536e:	601a      	str	r2, [r3, #0]
 8005370:	e012      	b.n	8005398 <HAL_DMA_Start_IT+0x468>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f042 0201 	orr.w	r2, r2, #1
 8005380:	601a      	str	r2, [r3, #0]
 8005382:	e009      	b.n	8005398 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005392:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005398:	7dfb      	ldrb	r3, [r7, #23]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3718      	adds	r7, #24
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	40020010 	.word	0x40020010
 80053a8:	40020028 	.word	0x40020028
 80053ac:	40020040 	.word	0x40020040
 80053b0:	40020058 	.word	0x40020058
 80053b4:	40020070 	.word	0x40020070
 80053b8:	40020088 	.word	0x40020088
 80053bc:	400200a0 	.word	0x400200a0
 80053c0:	400200b8 	.word	0x400200b8
 80053c4:	40020410 	.word	0x40020410
 80053c8:	40020428 	.word	0x40020428
 80053cc:	40020440 	.word	0x40020440
 80053d0:	40020458 	.word	0x40020458
 80053d4:	40020470 	.word	0x40020470
 80053d8:	40020488 	.word	0x40020488
 80053dc:	400204a0 	.word	0x400204a0
 80053e0:	400204b8 	.word	0x400204b8
 80053e4:	58025408 	.word	0x58025408
 80053e8:	5802541c 	.word	0x5802541c
 80053ec:	58025430 	.word	0x58025430
 80053f0:	58025444 	.word	0x58025444
 80053f4:	58025458 	.word	0x58025458
 80053f8:	5802546c 	.word	0x5802546c
 80053fc:	58025480 	.word	0x58025480
 8005400:	58025494 	.word	0x58025494

08005404 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b08a      	sub	sp, #40	; 0x28
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800540c:	2300      	movs	r3, #0
 800540e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005410:	4b67      	ldr	r3, [pc, #412]	; (80055b0 <HAL_DMA_IRQHandler+0x1ac>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a67      	ldr	r2, [pc, #412]	; (80055b4 <HAL_DMA_IRQHandler+0x1b0>)
 8005416:	fba2 2303 	umull	r2, r3, r2, r3
 800541a:	0a9b      	lsrs	r3, r3, #10
 800541c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005422:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005428:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800542a:	6a3b      	ldr	r3, [r7, #32]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a5f      	ldr	r2, [pc, #380]	; (80055b8 <HAL_DMA_IRQHandler+0x1b4>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d04a      	beq.n	80054d6 <HAL_DMA_IRQHandler+0xd2>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a5d      	ldr	r2, [pc, #372]	; (80055bc <HAL_DMA_IRQHandler+0x1b8>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d045      	beq.n	80054d6 <HAL_DMA_IRQHandler+0xd2>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a5c      	ldr	r2, [pc, #368]	; (80055c0 <HAL_DMA_IRQHandler+0x1bc>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d040      	beq.n	80054d6 <HAL_DMA_IRQHandler+0xd2>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a5a      	ldr	r2, [pc, #360]	; (80055c4 <HAL_DMA_IRQHandler+0x1c0>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d03b      	beq.n	80054d6 <HAL_DMA_IRQHandler+0xd2>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a59      	ldr	r2, [pc, #356]	; (80055c8 <HAL_DMA_IRQHandler+0x1c4>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d036      	beq.n	80054d6 <HAL_DMA_IRQHandler+0xd2>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a57      	ldr	r2, [pc, #348]	; (80055cc <HAL_DMA_IRQHandler+0x1c8>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d031      	beq.n	80054d6 <HAL_DMA_IRQHandler+0xd2>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a56      	ldr	r2, [pc, #344]	; (80055d0 <HAL_DMA_IRQHandler+0x1cc>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d02c      	beq.n	80054d6 <HAL_DMA_IRQHandler+0xd2>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a54      	ldr	r2, [pc, #336]	; (80055d4 <HAL_DMA_IRQHandler+0x1d0>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d027      	beq.n	80054d6 <HAL_DMA_IRQHandler+0xd2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a53      	ldr	r2, [pc, #332]	; (80055d8 <HAL_DMA_IRQHandler+0x1d4>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d022      	beq.n	80054d6 <HAL_DMA_IRQHandler+0xd2>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a51      	ldr	r2, [pc, #324]	; (80055dc <HAL_DMA_IRQHandler+0x1d8>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d01d      	beq.n	80054d6 <HAL_DMA_IRQHandler+0xd2>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a50      	ldr	r2, [pc, #320]	; (80055e0 <HAL_DMA_IRQHandler+0x1dc>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d018      	beq.n	80054d6 <HAL_DMA_IRQHandler+0xd2>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a4e      	ldr	r2, [pc, #312]	; (80055e4 <HAL_DMA_IRQHandler+0x1e0>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d013      	beq.n	80054d6 <HAL_DMA_IRQHandler+0xd2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a4d      	ldr	r2, [pc, #308]	; (80055e8 <HAL_DMA_IRQHandler+0x1e4>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d00e      	beq.n	80054d6 <HAL_DMA_IRQHandler+0xd2>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a4b      	ldr	r2, [pc, #300]	; (80055ec <HAL_DMA_IRQHandler+0x1e8>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d009      	beq.n	80054d6 <HAL_DMA_IRQHandler+0xd2>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a4a      	ldr	r2, [pc, #296]	; (80055f0 <HAL_DMA_IRQHandler+0x1ec>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d004      	beq.n	80054d6 <HAL_DMA_IRQHandler+0xd2>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a48      	ldr	r2, [pc, #288]	; (80055f4 <HAL_DMA_IRQHandler+0x1f0>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d101      	bne.n	80054da <HAL_DMA_IRQHandler+0xd6>
 80054d6:	2301      	movs	r3, #1
 80054d8:	e000      	b.n	80054dc <HAL_DMA_IRQHandler+0xd8>
 80054da:	2300      	movs	r3, #0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f000 842b 	beq.w	8005d38 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054e6:	f003 031f 	and.w	r3, r3, #31
 80054ea:	2208      	movs	r2, #8
 80054ec:	409a      	lsls	r2, r3
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	4013      	ands	r3, r2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 80a2 	beq.w	800563c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a2e      	ldr	r2, [pc, #184]	; (80055b8 <HAL_DMA_IRQHandler+0x1b4>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d04a      	beq.n	8005598 <HAL_DMA_IRQHandler+0x194>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a2d      	ldr	r2, [pc, #180]	; (80055bc <HAL_DMA_IRQHandler+0x1b8>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d045      	beq.n	8005598 <HAL_DMA_IRQHandler+0x194>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a2b      	ldr	r2, [pc, #172]	; (80055c0 <HAL_DMA_IRQHandler+0x1bc>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d040      	beq.n	8005598 <HAL_DMA_IRQHandler+0x194>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a2a      	ldr	r2, [pc, #168]	; (80055c4 <HAL_DMA_IRQHandler+0x1c0>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d03b      	beq.n	8005598 <HAL_DMA_IRQHandler+0x194>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a28      	ldr	r2, [pc, #160]	; (80055c8 <HAL_DMA_IRQHandler+0x1c4>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d036      	beq.n	8005598 <HAL_DMA_IRQHandler+0x194>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a27      	ldr	r2, [pc, #156]	; (80055cc <HAL_DMA_IRQHandler+0x1c8>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d031      	beq.n	8005598 <HAL_DMA_IRQHandler+0x194>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a25      	ldr	r2, [pc, #148]	; (80055d0 <HAL_DMA_IRQHandler+0x1cc>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d02c      	beq.n	8005598 <HAL_DMA_IRQHandler+0x194>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a24      	ldr	r2, [pc, #144]	; (80055d4 <HAL_DMA_IRQHandler+0x1d0>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d027      	beq.n	8005598 <HAL_DMA_IRQHandler+0x194>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a22      	ldr	r2, [pc, #136]	; (80055d8 <HAL_DMA_IRQHandler+0x1d4>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d022      	beq.n	8005598 <HAL_DMA_IRQHandler+0x194>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a21      	ldr	r2, [pc, #132]	; (80055dc <HAL_DMA_IRQHandler+0x1d8>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d01d      	beq.n	8005598 <HAL_DMA_IRQHandler+0x194>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a1f      	ldr	r2, [pc, #124]	; (80055e0 <HAL_DMA_IRQHandler+0x1dc>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d018      	beq.n	8005598 <HAL_DMA_IRQHandler+0x194>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a1e      	ldr	r2, [pc, #120]	; (80055e4 <HAL_DMA_IRQHandler+0x1e0>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d013      	beq.n	8005598 <HAL_DMA_IRQHandler+0x194>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a1c      	ldr	r2, [pc, #112]	; (80055e8 <HAL_DMA_IRQHandler+0x1e4>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d00e      	beq.n	8005598 <HAL_DMA_IRQHandler+0x194>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a1b      	ldr	r2, [pc, #108]	; (80055ec <HAL_DMA_IRQHandler+0x1e8>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d009      	beq.n	8005598 <HAL_DMA_IRQHandler+0x194>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a19      	ldr	r2, [pc, #100]	; (80055f0 <HAL_DMA_IRQHandler+0x1ec>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d004      	beq.n	8005598 <HAL_DMA_IRQHandler+0x194>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a18      	ldr	r2, [pc, #96]	; (80055f4 <HAL_DMA_IRQHandler+0x1f0>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d12f      	bne.n	80055f8 <HAL_DMA_IRQHandler+0x1f4>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0304 	and.w	r3, r3, #4
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	bf14      	ite	ne
 80055a6:	2301      	movne	r3, #1
 80055a8:	2300      	moveq	r3, #0
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	e02e      	b.n	800560c <HAL_DMA_IRQHandler+0x208>
 80055ae:	bf00      	nop
 80055b0:	24000010 	.word	0x24000010
 80055b4:	1b4e81b5 	.word	0x1b4e81b5
 80055b8:	40020010 	.word	0x40020010
 80055bc:	40020028 	.word	0x40020028
 80055c0:	40020040 	.word	0x40020040
 80055c4:	40020058 	.word	0x40020058
 80055c8:	40020070 	.word	0x40020070
 80055cc:	40020088 	.word	0x40020088
 80055d0:	400200a0 	.word	0x400200a0
 80055d4:	400200b8 	.word	0x400200b8
 80055d8:	40020410 	.word	0x40020410
 80055dc:	40020428 	.word	0x40020428
 80055e0:	40020440 	.word	0x40020440
 80055e4:	40020458 	.word	0x40020458
 80055e8:	40020470 	.word	0x40020470
 80055ec:	40020488 	.word	0x40020488
 80055f0:	400204a0 	.word	0x400204a0
 80055f4:	400204b8 	.word	0x400204b8
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0308 	and.w	r3, r3, #8
 8005602:	2b00      	cmp	r3, #0
 8005604:	bf14      	ite	ne
 8005606:	2301      	movne	r3, #1
 8005608:	2300      	moveq	r3, #0
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b00      	cmp	r3, #0
 800560e:	d015      	beq.n	800563c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f022 0204 	bic.w	r2, r2, #4
 800561e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005624:	f003 031f 	and.w	r3, r3, #31
 8005628:	2208      	movs	r2, #8
 800562a:	409a      	lsls	r2, r3
 800562c:	6a3b      	ldr	r3, [r7, #32]
 800562e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005634:	f043 0201 	orr.w	r2, r3, #1
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005640:	f003 031f 	and.w	r3, r3, #31
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	fa22 f303 	lsr.w	r3, r2, r3
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b00      	cmp	r3, #0
 8005650:	d06e      	beq.n	8005730 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a69      	ldr	r2, [pc, #420]	; (80057fc <HAL_DMA_IRQHandler+0x3f8>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d04a      	beq.n	80056f2 <HAL_DMA_IRQHandler+0x2ee>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a67      	ldr	r2, [pc, #412]	; (8005800 <HAL_DMA_IRQHandler+0x3fc>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d045      	beq.n	80056f2 <HAL_DMA_IRQHandler+0x2ee>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a66      	ldr	r2, [pc, #408]	; (8005804 <HAL_DMA_IRQHandler+0x400>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d040      	beq.n	80056f2 <HAL_DMA_IRQHandler+0x2ee>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a64      	ldr	r2, [pc, #400]	; (8005808 <HAL_DMA_IRQHandler+0x404>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d03b      	beq.n	80056f2 <HAL_DMA_IRQHandler+0x2ee>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a63      	ldr	r2, [pc, #396]	; (800580c <HAL_DMA_IRQHandler+0x408>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d036      	beq.n	80056f2 <HAL_DMA_IRQHandler+0x2ee>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a61      	ldr	r2, [pc, #388]	; (8005810 <HAL_DMA_IRQHandler+0x40c>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d031      	beq.n	80056f2 <HAL_DMA_IRQHandler+0x2ee>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a60      	ldr	r2, [pc, #384]	; (8005814 <HAL_DMA_IRQHandler+0x410>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d02c      	beq.n	80056f2 <HAL_DMA_IRQHandler+0x2ee>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a5e      	ldr	r2, [pc, #376]	; (8005818 <HAL_DMA_IRQHandler+0x414>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d027      	beq.n	80056f2 <HAL_DMA_IRQHandler+0x2ee>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a5d      	ldr	r2, [pc, #372]	; (800581c <HAL_DMA_IRQHandler+0x418>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d022      	beq.n	80056f2 <HAL_DMA_IRQHandler+0x2ee>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a5b      	ldr	r2, [pc, #364]	; (8005820 <HAL_DMA_IRQHandler+0x41c>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d01d      	beq.n	80056f2 <HAL_DMA_IRQHandler+0x2ee>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a5a      	ldr	r2, [pc, #360]	; (8005824 <HAL_DMA_IRQHandler+0x420>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d018      	beq.n	80056f2 <HAL_DMA_IRQHandler+0x2ee>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a58      	ldr	r2, [pc, #352]	; (8005828 <HAL_DMA_IRQHandler+0x424>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d013      	beq.n	80056f2 <HAL_DMA_IRQHandler+0x2ee>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a57      	ldr	r2, [pc, #348]	; (800582c <HAL_DMA_IRQHandler+0x428>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d00e      	beq.n	80056f2 <HAL_DMA_IRQHandler+0x2ee>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a55      	ldr	r2, [pc, #340]	; (8005830 <HAL_DMA_IRQHandler+0x42c>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d009      	beq.n	80056f2 <HAL_DMA_IRQHandler+0x2ee>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a54      	ldr	r2, [pc, #336]	; (8005834 <HAL_DMA_IRQHandler+0x430>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d004      	beq.n	80056f2 <HAL_DMA_IRQHandler+0x2ee>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a52      	ldr	r2, [pc, #328]	; (8005838 <HAL_DMA_IRQHandler+0x434>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d10a      	bne.n	8005708 <HAL_DMA_IRQHandler+0x304>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	695b      	ldr	r3, [r3, #20]
 80056f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	bf14      	ite	ne
 8005700:	2301      	movne	r3, #1
 8005702:	2300      	moveq	r3, #0
 8005704:	b2db      	uxtb	r3, r3
 8005706:	e003      	b.n	8005710 <HAL_DMA_IRQHandler+0x30c>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2300      	movs	r3, #0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00d      	beq.n	8005730 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005718:	f003 031f 	and.w	r3, r3, #31
 800571c:	2201      	movs	r2, #1
 800571e:	409a      	lsls	r2, r3
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005728:	f043 0202 	orr.w	r2, r3, #2
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005734:	f003 031f 	and.w	r3, r3, #31
 8005738:	2204      	movs	r2, #4
 800573a:	409a      	lsls	r2, r3
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	4013      	ands	r3, r2
 8005740:	2b00      	cmp	r3, #0
 8005742:	f000 808f 	beq.w	8005864 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a2c      	ldr	r2, [pc, #176]	; (80057fc <HAL_DMA_IRQHandler+0x3f8>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d04a      	beq.n	80057e6 <HAL_DMA_IRQHandler+0x3e2>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a2a      	ldr	r2, [pc, #168]	; (8005800 <HAL_DMA_IRQHandler+0x3fc>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d045      	beq.n	80057e6 <HAL_DMA_IRQHandler+0x3e2>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a29      	ldr	r2, [pc, #164]	; (8005804 <HAL_DMA_IRQHandler+0x400>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d040      	beq.n	80057e6 <HAL_DMA_IRQHandler+0x3e2>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a27      	ldr	r2, [pc, #156]	; (8005808 <HAL_DMA_IRQHandler+0x404>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d03b      	beq.n	80057e6 <HAL_DMA_IRQHandler+0x3e2>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a26      	ldr	r2, [pc, #152]	; (800580c <HAL_DMA_IRQHandler+0x408>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d036      	beq.n	80057e6 <HAL_DMA_IRQHandler+0x3e2>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a24      	ldr	r2, [pc, #144]	; (8005810 <HAL_DMA_IRQHandler+0x40c>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d031      	beq.n	80057e6 <HAL_DMA_IRQHandler+0x3e2>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a23      	ldr	r2, [pc, #140]	; (8005814 <HAL_DMA_IRQHandler+0x410>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d02c      	beq.n	80057e6 <HAL_DMA_IRQHandler+0x3e2>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a21      	ldr	r2, [pc, #132]	; (8005818 <HAL_DMA_IRQHandler+0x414>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d027      	beq.n	80057e6 <HAL_DMA_IRQHandler+0x3e2>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a20      	ldr	r2, [pc, #128]	; (800581c <HAL_DMA_IRQHandler+0x418>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d022      	beq.n	80057e6 <HAL_DMA_IRQHandler+0x3e2>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a1e      	ldr	r2, [pc, #120]	; (8005820 <HAL_DMA_IRQHandler+0x41c>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d01d      	beq.n	80057e6 <HAL_DMA_IRQHandler+0x3e2>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a1d      	ldr	r2, [pc, #116]	; (8005824 <HAL_DMA_IRQHandler+0x420>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d018      	beq.n	80057e6 <HAL_DMA_IRQHandler+0x3e2>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a1b      	ldr	r2, [pc, #108]	; (8005828 <HAL_DMA_IRQHandler+0x424>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d013      	beq.n	80057e6 <HAL_DMA_IRQHandler+0x3e2>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a1a      	ldr	r2, [pc, #104]	; (800582c <HAL_DMA_IRQHandler+0x428>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d00e      	beq.n	80057e6 <HAL_DMA_IRQHandler+0x3e2>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a18      	ldr	r2, [pc, #96]	; (8005830 <HAL_DMA_IRQHandler+0x42c>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d009      	beq.n	80057e6 <HAL_DMA_IRQHandler+0x3e2>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a17      	ldr	r2, [pc, #92]	; (8005834 <HAL_DMA_IRQHandler+0x430>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d004      	beq.n	80057e6 <HAL_DMA_IRQHandler+0x3e2>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a15      	ldr	r2, [pc, #84]	; (8005838 <HAL_DMA_IRQHandler+0x434>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d12a      	bne.n	800583c <HAL_DMA_IRQHandler+0x438>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0302 	and.w	r3, r3, #2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	bf14      	ite	ne
 80057f4:	2301      	movne	r3, #1
 80057f6:	2300      	moveq	r3, #0
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	e023      	b.n	8005844 <HAL_DMA_IRQHandler+0x440>
 80057fc:	40020010 	.word	0x40020010
 8005800:	40020028 	.word	0x40020028
 8005804:	40020040 	.word	0x40020040
 8005808:	40020058 	.word	0x40020058
 800580c:	40020070 	.word	0x40020070
 8005810:	40020088 	.word	0x40020088
 8005814:	400200a0 	.word	0x400200a0
 8005818:	400200b8 	.word	0x400200b8
 800581c:	40020410 	.word	0x40020410
 8005820:	40020428 	.word	0x40020428
 8005824:	40020440 	.word	0x40020440
 8005828:	40020458 	.word	0x40020458
 800582c:	40020470 	.word	0x40020470
 8005830:	40020488 	.word	0x40020488
 8005834:	400204a0 	.word	0x400204a0
 8005838:	400204b8 	.word	0x400204b8
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2300      	movs	r3, #0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00d      	beq.n	8005864 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800584c:	f003 031f 	and.w	r3, r3, #31
 8005850:	2204      	movs	r2, #4
 8005852:	409a      	lsls	r2, r3
 8005854:	6a3b      	ldr	r3, [r7, #32]
 8005856:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800585c:	f043 0204 	orr.w	r2, r3, #4
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005868:	f003 031f 	and.w	r3, r3, #31
 800586c:	2210      	movs	r2, #16
 800586e:	409a      	lsls	r2, r3
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	4013      	ands	r3, r2
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 80a6 	beq.w	80059c6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a85      	ldr	r2, [pc, #532]	; (8005a94 <HAL_DMA_IRQHandler+0x690>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d04a      	beq.n	800591a <HAL_DMA_IRQHandler+0x516>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a83      	ldr	r2, [pc, #524]	; (8005a98 <HAL_DMA_IRQHandler+0x694>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d045      	beq.n	800591a <HAL_DMA_IRQHandler+0x516>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a82      	ldr	r2, [pc, #520]	; (8005a9c <HAL_DMA_IRQHandler+0x698>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d040      	beq.n	800591a <HAL_DMA_IRQHandler+0x516>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a80      	ldr	r2, [pc, #512]	; (8005aa0 <HAL_DMA_IRQHandler+0x69c>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d03b      	beq.n	800591a <HAL_DMA_IRQHandler+0x516>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a7f      	ldr	r2, [pc, #508]	; (8005aa4 <HAL_DMA_IRQHandler+0x6a0>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d036      	beq.n	800591a <HAL_DMA_IRQHandler+0x516>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a7d      	ldr	r2, [pc, #500]	; (8005aa8 <HAL_DMA_IRQHandler+0x6a4>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d031      	beq.n	800591a <HAL_DMA_IRQHandler+0x516>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a7c      	ldr	r2, [pc, #496]	; (8005aac <HAL_DMA_IRQHandler+0x6a8>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d02c      	beq.n	800591a <HAL_DMA_IRQHandler+0x516>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a7a      	ldr	r2, [pc, #488]	; (8005ab0 <HAL_DMA_IRQHandler+0x6ac>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d027      	beq.n	800591a <HAL_DMA_IRQHandler+0x516>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a79      	ldr	r2, [pc, #484]	; (8005ab4 <HAL_DMA_IRQHandler+0x6b0>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d022      	beq.n	800591a <HAL_DMA_IRQHandler+0x516>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a77      	ldr	r2, [pc, #476]	; (8005ab8 <HAL_DMA_IRQHandler+0x6b4>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d01d      	beq.n	800591a <HAL_DMA_IRQHandler+0x516>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a76      	ldr	r2, [pc, #472]	; (8005abc <HAL_DMA_IRQHandler+0x6b8>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d018      	beq.n	800591a <HAL_DMA_IRQHandler+0x516>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a74      	ldr	r2, [pc, #464]	; (8005ac0 <HAL_DMA_IRQHandler+0x6bc>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d013      	beq.n	800591a <HAL_DMA_IRQHandler+0x516>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a73      	ldr	r2, [pc, #460]	; (8005ac4 <HAL_DMA_IRQHandler+0x6c0>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d00e      	beq.n	800591a <HAL_DMA_IRQHandler+0x516>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a71      	ldr	r2, [pc, #452]	; (8005ac8 <HAL_DMA_IRQHandler+0x6c4>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d009      	beq.n	800591a <HAL_DMA_IRQHandler+0x516>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a70      	ldr	r2, [pc, #448]	; (8005acc <HAL_DMA_IRQHandler+0x6c8>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d004      	beq.n	800591a <HAL_DMA_IRQHandler+0x516>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a6e      	ldr	r2, [pc, #440]	; (8005ad0 <HAL_DMA_IRQHandler+0x6cc>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d10a      	bne.n	8005930 <HAL_DMA_IRQHandler+0x52c>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0308 	and.w	r3, r3, #8
 8005924:	2b00      	cmp	r3, #0
 8005926:	bf14      	ite	ne
 8005928:	2301      	movne	r3, #1
 800592a:	2300      	moveq	r3, #0
 800592c:	b2db      	uxtb	r3, r3
 800592e:	e009      	b.n	8005944 <HAL_DMA_IRQHandler+0x540>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0304 	and.w	r3, r3, #4
 800593a:	2b00      	cmp	r3, #0
 800593c:	bf14      	ite	ne
 800593e:	2301      	movne	r3, #1
 8005940:	2300      	moveq	r3, #0
 8005942:	b2db      	uxtb	r3, r3
 8005944:	2b00      	cmp	r3, #0
 8005946:	d03e      	beq.n	80059c6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800594c:	f003 031f 	and.w	r3, r3, #31
 8005950:	2210      	movs	r2, #16
 8005952:	409a      	lsls	r2, r3
 8005954:	6a3b      	ldr	r3, [r7, #32]
 8005956:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d018      	beq.n	8005998 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d108      	bne.n	8005986 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005978:	2b00      	cmp	r3, #0
 800597a:	d024      	beq.n	80059c6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	4798      	blx	r3
 8005984:	e01f      	b.n	80059c6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800598a:	2b00      	cmp	r3, #0
 800598c:	d01b      	beq.n	80059c6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	4798      	blx	r3
 8005996:	e016      	b.n	80059c6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d107      	bne.n	80059b6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 0208 	bic.w	r2, r2, #8
 80059b4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ca:	f003 031f 	and.w	r3, r3, #31
 80059ce:	2220      	movs	r2, #32
 80059d0:	409a      	lsls	r2, r3
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	4013      	ands	r3, r2
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f000 8110 	beq.w	8005bfc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a2c      	ldr	r2, [pc, #176]	; (8005a94 <HAL_DMA_IRQHandler+0x690>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d04a      	beq.n	8005a7c <HAL_DMA_IRQHandler+0x678>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a2b      	ldr	r2, [pc, #172]	; (8005a98 <HAL_DMA_IRQHandler+0x694>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d045      	beq.n	8005a7c <HAL_DMA_IRQHandler+0x678>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a29      	ldr	r2, [pc, #164]	; (8005a9c <HAL_DMA_IRQHandler+0x698>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d040      	beq.n	8005a7c <HAL_DMA_IRQHandler+0x678>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a28      	ldr	r2, [pc, #160]	; (8005aa0 <HAL_DMA_IRQHandler+0x69c>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d03b      	beq.n	8005a7c <HAL_DMA_IRQHandler+0x678>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a26      	ldr	r2, [pc, #152]	; (8005aa4 <HAL_DMA_IRQHandler+0x6a0>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d036      	beq.n	8005a7c <HAL_DMA_IRQHandler+0x678>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a25      	ldr	r2, [pc, #148]	; (8005aa8 <HAL_DMA_IRQHandler+0x6a4>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d031      	beq.n	8005a7c <HAL_DMA_IRQHandler+0x678>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a23      	ldr	r2, [pc, #140]	; (8005aac <HAL_DMA_IRQHandler+0x6a8>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d02c      	beq.n	8005a7c <HAL_DMA_IRQHandler+0x678>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a22      	ldr	r2, [pc, #136]	; (8005ab0 <HAL_DMA_IRQHandler+0x6ac>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d027      	beq.n	8005a7c <HAL_DMA_IRQHandler+0x678>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a20      	ldr	r2, [pc, #128]	; (8005ab4 <HAL_DMA_IRQHandler+0x6b0>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d022      	beq.n	8005a7c <HAL_DMA_IRQHandler+0x678>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a1f      	ldr	r2, [pc, #124]	; (8005ab8 <HAL_DMA_IRQHandler+0x6b4>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d01d      	beq.n	8005a7c <HAL_DMA_IRQHandler+0x678>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a1d      	ldr	r2, [pc, #116]	; (8005abc <HAL_DMA_IRQHandler+0x6b8>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d018      	beq.n	8005a7c <HAL_DMA_IRQHandler+0x678>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a1c      	ldr	r2, [pc, #112]	; (8005ac0 <HAL_DMA_IRQHandler+0x6bc>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d013      	beq.n	8005a7c <HAL_DMA_IRQHandler+0x678>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a1a      	ldr	r2, [pc, #104]	; (8005ac4 <HAL_DMA_IRQHandler+0x6c0>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d00e      	beq.n	8005a7c <HAL_DMA_IRQHandler+0x678>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a19      	ldr	r2, [pc, #100]	; (8005ac8 <HAL_DMA_IRQHandler+0x6c4>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d009      	beq.n	8005a7c <HAL_DMA_IRQHandler+0x678>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a17      	ldr	r2, [pc, #92]	; (8005acc <HAL_DMA_IRQHandler+0x6c8>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d004      	beq.n	8005a7c <HAL_DMA_IRQHandler+0x678>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a16      	ldr	r2, [pc, #88]	; (8005ad0 <HAL_DMA_IRQHandler+0x6cc>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d12b      	bne.n	8005ad4 <HAL_DMA_IRQHandler+0x6d0>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0310 	and.w	r3, r3, #16
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	bf14      	ite	ne
 8005a8a:	2301      	movne	r3, #1
 8005a8c:	2300      	moveq	r3, #0
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	e02a      	b.n	8005ae8 <HAL_DMA_IRQHandler+0x6e4>
 8005a92:	bf00      	nop
 8005a94:	40020010 	.word	0x40020010
 8005a98:	40020028 	.word	0x40020028
 8005a9c:	40020040 	.word	0x40020040
 8005aa0:	40020058 	.word	0x40020058
 8005aa4:	40020070 	.word	0x40020070
 8005aa8:	40020088 	.word	0x40020088
 8005aac:	400200a0 	.word	0x400200a0
 8005ab0:	400200b8 	.word	0x400200b8
 8005ab4:	40020410 	.word	0x40020410
 8005ab8:	40020428 	.word	0x40020428
 8005abc:	40020440 	.word	0x40020440
 8005ac0:	40020458 	.word	0x40020458
 8005ac4:	40020470 	.word	0x40020470
 8005ac8:	40020488 	.word	0x40020488
 8005acc:	400204a0 	.word	0x400204a0
 8005ad0:	400204b8 	.word	0x400204b8
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	bf14      	ite	ne
 8005ae2:	2301      	movne	r3, #1
 8005ae4:	2300      	moveq	r3, #0
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f000 8087 	beq.w	8005bfc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005af2:	f003 031f 	and.w	r3, r3, #31
 8005af6:	2220      	movs	r2, #32
 8005af8:	409a      	lsls	r2, r3
 8005afa:	6a3b      	ldr	r3, [r7, #32]
 8005afc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b04      	cmp	r3, #4
 8005b08:	d139      	bne.n	8005b7e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f022 0216 	bic.w	r2, r2, #22
 8005b18:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	695a      	ldr	r2, [r3, #20]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b28:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d103      	bne.n	8005b3a <HAL_DMA_IRQHandler+0x736>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d007      	beq.n	8005b4a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f022 0208 	bic.w	r2, r2, #8
 8005b48:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b4e:	f003 031f 	and.w	r3, r3, #31
 8005b52:	223f      	movs	r2, #63	; 0x3f
 8005b54:	409a      	lsls	r2, r3
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f000 834a 	beq.w	8006208 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	4798      	blx	r3
          }
          return;
 8005b7c:	e344      	b.n	8006208 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d018      	beq.n	8005bbe <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d108      	bne.n	8005bac <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d02c      	beq.n	8005bfc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	4798      	blx	r3
 8005baa:	e027      	b.n	8005bfc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d023      	beq.n	8005bfc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	4798      	blx	r3
 8005bbc:	e01e      	b.n	8005bfc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d10f      	bne.n	8005bec <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f022 0210 	bic.w	r2, r2, #16
 8005bda:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d003      	beq.n	8005bfc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 8306 	beq.w	8006212 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f000 8088 	beq.w	8005d24 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2204      	movs	r2, #4
 8005c18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a7a      	ldr	r2, [pc, #488]	; (8005e0c <HAL_DMA_IRQHandler+0xa08>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d04a      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x8b8>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a79      	ldr	r2, [pc, #484]	; (8005e10 <HAL_DMA_IRQHandler+0xa0c>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d045      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x8b8>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a77      	ldr	r2, [pc, #476]	; (8005e14 <HAL_DMA_IRQHandler+0xa10>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d040      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x8b8>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a76      	ldr	r2, [pc, #472]	; (8005e18 <HAL_DMA_IRQHandler+0xa14>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d03b      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x8b8>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a74      	ldr	r2, [pc, #464]	; (8005e1c <HAL_DMA_IRQHandler+0xa18>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d036      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x8b8>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a73      	ldr	r2, [pc, #460]	; (8005e20 <HAL_DMA_IRQHandler+0xa1c>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d031      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x8b8>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a71      	ldr	r2, [pc, #452]	; (8005e24 <HAL_DMA_IRQHandler+0xa20>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d02c      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x8b8>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a70      	ldr	r2, [pc, #448]	; (8005e28 <HAL_DMA_IRQHandler+0xa24>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d027      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x8b8>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a6e      	ldr	r2, [pc, #440]	; (8005e2c <HAL_DMA_IRQHandler+0xa28>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d022      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x8b8>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a6d      	ldr	r2, [pc, #436]	; (8005e30 <HAL_DMA_IRQHandler+0xa2c>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d01d      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x8b8>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a6b      	ldr	r2, [pc, #428]	; (8005e34 <HAL_DMA_IRQHandler+0xa30>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d018      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x8b8>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a6a      	ldr	r2, [pc, #424]	; (8005e38 <HAL_DMA_IRQHandler+0xa34>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d013      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x8b8>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a68      	ldr	r2, [pc, #416]	; (8005e3c <HAL_DMA_IRQHandler+0xa38>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d00e      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x8b8>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a67      	ldr	r2, [pc, #412]	; (8005e40 <HAL_DMA_IRQHandler+0xa3c>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d009      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x8b8>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a65      	ldr	r2, [pc, #404]	; (8005e44 <HAL_DMA_IRQHandler+0xa40>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d004      	beq.n	8005cbc <HAL_DMA_IRQHandler+0x8b8>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a64      	ldr	r2, [pc, #400]	; (8005e48 <HAL_DMA_IRQHandler+0xa44>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d108      	bne.n	8005cce <HAL_DMA_IRQHandler+0x8ca>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f022 0201 	bic.w	r2, r2, #1
 8005cca:	601a      	str	r2, [r3, #0]
 8005ccc:	e007      	b.n	8005cde <HAL_DMA_IRQHandler+0x8da>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 0201 	bic.w	r2, r2, #1
 8005cdc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	60fb      	str	r3, [r7, #12]
 8005ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d307      	bcc.n	8005cfa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1f2      	bne.n	8005cde <HAL_DMA_IRQHandler+0x8da>
 8005cf8:	e000      	b.n	8005cfc <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005cfa:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d004      	beq.n	8005d1c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2203      	movs	r2, #3
 8005d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005d1a:	e003      	b.n	8005d24 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f000 8272 	beq.w	8006212 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	4798      	blx	r3
 8005d36:	e26c      	b.n	8006212 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a43      	ldr	r2, [pc, #268]	; (8005e4c <HAL_DMA_IRQHandler+0xa48>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d022      	beq.n	8005d88 <HAL_DMA_IRQHandler+0x984>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a42      	ldr	r2, [pc, #264]	; (8005e50 <HAL_DMA_IRQHandler+0xa4c>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d01d      	beq.n	8005d88 <HAL_DMA_IRQHandler+0x984>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a40      	ldr	r2, [pc, #256]	; (8005e54 <HAL_DMA_IRQHandler+0xa50>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d018      	beq.n	8005d88 <HAL_DMA_IRQHandler+0x984>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a3f      	ldr	r2, [pc, #252]	; (8005e58 <HAL_DMA_IRQHandler+0xa54>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d013      	beq.n	8005d88 <HAL_DMA_IRQHandler+0x984>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a3d      	ldr	r2, [pc, #244]	; (8005e5c <HAL_DMA_IRQHandler+0xa58>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d00e      	beq.n	8005d88 <HAL_DMA_IRQHandler+0x984>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a3c      	ldr	r2, [pc, #240]	; (8005e60 <HAL_DMA_IRQHandler+0xa5c>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d009      	beq.n	8005d88 <HAL_DMA_IRQHandler+0x984>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a3a      	ldr	r2, [pc, #232]	; (8005e64 <HAL_DMA_IRQHandler+0xa60>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d004      	beq.n	8005d88 <HAL_DMA_IRQHandler+0x984>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a39      	ldr	r2, [pc, #228]	; (8005e68 <HAL_DMA_IRQHandler+0xa64>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d101      	bne.n	8005d8c <HAL_DMA_IRQHandler+0x988>
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e000      	b.n	8005d8e <HAL_DMA_IRQHandler+0x98a>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	f000 823f 	beq.w	8006212 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005da0:	f003 031f 	and.w	r3, r3, #31
 8005da4:	2204      	movs	r2, #4
 8005da6:	409a      	lsls	r2, r3
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	4013      	ands	r3, r2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 80cd 	beq.w	8005f4c <HAL_DMA_IRQHandler+0xb48>
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f003 0304 	and.w	r3, r3, #4
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f000 80c7 	beq.w	8005f4c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dc2:	f003 031f 	and.w	r3, r3, #31
 8005dc6:	2204      	movs	r2, #4
 8005dc8:	409a      	lsls	r2, r3
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d049      	beq.n	8005e6c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d109      	bne.n	8005df6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f000 8210 	beq.w	800620c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005df4:	e20a      	b.n	800620c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f000 8206 	beq.w	800620c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e08:	e200      	b.n	800620c <HAL_DMA_IRQHandler+0xe08>
 8005e0a:	bf00      	nop
 8005e0c:	40020010 	.word	0x40020010
 8005e10:	40020028 	.word	0x40020028
 8005e14:	40020040 	.word	0x40020040
 8005e18:	40020058 	.word	0x40020058
 8005e1c:	40020070 	.word	0x40020070
 8005e20:	40020088 	.word	0x40020088
 8005e24:	400200a0 	.word	0x400200a0
 8005e28:	400200b8 	.word	0x400200b8
 8005e2c:	40020410 	.word	0x40020410
 8005e30:	40020428 	.word	0x40020428
 8005e34:	40020440 	.word	0x40020440
 8005e38:	40020458 	.word	0x40020458
 8005e3c:	40020470 	.word	0x40020470
 8005e40:	40020488 	.word	0x40020488
 8005e44:	400204a0 	.word	0x400204a0
 8005e48:	400204b8 	.word	0x400204b8
 8005e4c:	58025408 	.word	0x58025408
 8005e50:	5802541c 	.word	0x5802541c
 8005e54:	58025430 	.word	0x58025430
 8005e58:	58025444 	.word	0x58025444
 8005e5c:	58025458 	.word	0x58025458
 8005e60:	5802546c 	.word	0x5802546c
 8005e64:	58025480 	.word	0x58025480
 8005e68:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	f003 0320 	and.w	r3, r3, #32
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d160      	bne.n	8005f38 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a8c      	ldr	r2, [pc, #560]	; (80060ac <HAL_DMA_IRQHandler+0xca8>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d04a      	beq.n	8005f16 <HAL_DMA_IRQHandler+0xb12>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a8a      	ldr	r2, [pc, #552]	; (80060b0 <HAL_DMA_IRQHandler+0xcac>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d045      	beq.n	8005f16 <HAL_DMA_IRQHandler+0xb12>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a89      	ldr	r2, [pc, #548]	; (80060b4 <HAL_DMA_IRQHandler+0xcb0>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d040      	beq.n	8005f16 <HAL_DMA_IRQHandler+0xb12>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a87      	ldr	r2, [pc, #540]	; (80060b8 <HAL_DMA_IRQHandler+0xcb4>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d03b      	beq.n	8005f16 <HAL_DMA_IRQHandler+0xb12>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a86      	ldr	r2, [pc, #536]	; (80060bc <HAL_DMA_IRQHandler+0xcb8>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d036      	beq.n	8005f16 <HAL_DMA_IRQHandler+0xb12>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a84      	ldr	r2, [pc, #528]	; (80060c0 <HAL_DMA_IRQHandler+0xcbc>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d031      	beq.n	8005f16 <HAL_DMA_IRQHandler+0xb12>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a83      	ldr	r2, [pc, #524]	; (80060c4 <HAL_DMA_IRQHandler+0xcc0>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d02c      	beq.n	8005f16 <HAL_DMA_IRQHandler+0xb12>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a81      	ldr	r2, [pc, #516]	; (80060c8 <HAL_DMA_IRQHandler+0xcc4>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d027      	beq.n	8005f16 <HAL_DMA_IRQHandler+0xb12>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a80      	ldr	r2, [pc, #512]	; (80060cc <HAL_DMA_IRQHandler+0xcc8>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d022      	beq.n	8005f16 <HAL_DMA_IRQHandler+0xb12>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a7e      	ldr	r2, [pc, #504]	; (80060d0 <HAL_DMA_IRQHandler+0xccc>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d01d      	beq.n	8005f16 <HAL_DMA_IRQHandler+0xb12>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a7d      	ldr	r2, [pc, #500]	; (80060d4 <HAL_DMA_IRQHandler+0xcd0>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d018      	beq.n	8005f16 <HAL_DMA_IRQHandler+0xb12>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a7b      	ldr	r2, [pc, #492]	; (80060d8 <HAL_DMA_IRQHandler+0xcd4>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d013      	beq.n	8005f16 <HAL_DMA_IRQHandler+0xb12>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a7a      	ldr	r2, [pc, #488]	; (80060dc <HAL_DMA_IRQHandler+0xcd8>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d00e      	beq.n	8005f16 <HAL_DMA_IRQHandler+0xb12>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a78      	ldr	r2, [pc, #480]	; (80060e0 <HAL_DMA_IRQHandler+0xcdc>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d009      	beq.n	8005f16 <HAL_DMA_IRQHandler+0xb12>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a77      	ldr	r2, [pc, #476]	; (80060e4 <HAL_DMA_IRQHandler+0xce0>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d004      	beq.n	8005f16 <HAL_DMA_IRQHandler+0xb12>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a75      	ldr	r2, [pc, #468]	; (80060e8 <HAL_DMA_IRQHandler+0xce4>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d108      	bne.n	8005f28 <HAL_DMA_IRQHandler+0xb24>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f022 0208 	bic.w	r2, r2, #8
 8005f24:	601a      	str	r2, [r3, #0]
 8005f26:	e007      	b.n	8005f38 <HAL_DMA_IRQHandler+0xb34>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f022 0204 	bic.w	r2, r2, #4
 8005f36:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f000 8165 	beq.w	800620c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f4a:	e15f      	b.n	800620c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f50:	f003 031f 	and.w	r3, r3, #31
 8005f54:	2202      	movs	r2, #2
 8005f56:	409a      	lsls	r2, r3
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f000 80c5 	beq.w	80060ec <HAL_DMA_IRQHandler+0xce8>
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	f003 0302 	and.w	r3, r3, #2
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 80bf 	beq.w	80060ec <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f72:	f003 031f 	and.w	r3, r3, #31
 8005f76:	2202      	movs	r2, #2
 8005f78:	409a      	lsls	r2, r3
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d018      	beq.n	8005fba <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d109      	bne.n	8005fa6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f000 813a 	beq.w	8006210 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fa4:	e134      	b.n	8006210 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f000 8130 	beq.w	8006210 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fb8:	e12a      	b.n	8006210 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	f003 0320 	and.w	r3, r3, #32
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d168      	bne.n	8006096 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a38      	ldr	r2, [pc, #224]	; (80060ac <HAL_DMA_IRQHandler+0xca8>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d04a      	beq.n	8006064 <HAL_DMA_IRQHandler+0xc60>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a37      	ldr	r2, [pc, #220]	; (80060b0 <HAL_DMA_IRQHandler+0xcac>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d045      	beq.n	8006064 <HAL_DMA_IRQHandler+0xc60>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a35      	ldr	r2, [pc, #212]	; (80060b4 <HAL_DMA_IRQHandler+0xcb0>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d040      	beq.n	8006064 <HAL_DMA_IRQHandler+0xc60>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a34      	ldr	r2, [pc, #208]	; (80060b8 <HAL_DMA_IRQHandler+0xcb4>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d03b      	beq.n	8006064 <HAL_DMA_IRQHandler+0xc60>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a32      	ldr	r2, [pc, #200]	; (80060bc <HAL_DMA_IRQHandler+0xcb8>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d036      	beq.n	8006064 <HAL_DMA_IRQHandler+0xc60>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a31      	ldr	r2, [pc, #196]	; (80060c0 <HAL_DMA_IRQHandler+0xcbc>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d031      	beq.n	8006064 <HAL_DMA_IRQHandler+0xc60>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a2f      	ldr	r2, [pc, #188]	; (80060c4 <HAL_DMA_IRQHandler+0xcc0>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d02c      	beq.n	8006064 <HAL_DMA_IRQHandler+0xc60>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a2e      	ldr	r2, [pc, #184]	; (80060c8 <HAL_DMA_IRQHandler+0xcc4>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d027      	beq.n	8006064 <HAL_DMA_IRQHandler+0xc60>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a2c      	ldr	r2, [pc, #176]	; (80060cc <HAL_DMA_IRQHandler+0xcc8>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d022      	beq.n	8006064 <HAL_DMA_IRQHandler+0xc60>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a2b      	ldr	r2, [pc, #172]	; (80060d0 <HAL_DMA_IRQHandler+0xccc>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d01d      	beq.n	8006064 <HAL_DMA_IRQHandler+0xc60>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a29      	ldr	r2, [pc, #164]	; (80060d4 <HAL_DMA_IRQHandler+0xcd0>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d018      	beq.n	8006064 <HAL_DMA_IRQHandler+0xc60>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a28      	ldr	r2, [pc, #160]	; (80060d8 <HAL_DMA_IRQHandler+0xcd4>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d013      	beq.n	8006064 <HAL_DMA_IRQHandler+0xc60>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a26      	ldr	r2, [pc, #152]	; (80060dc <HAL_DMA_IRQHandler+0xcd8>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d00e      	beq.n	8006064 <HAL_DMA_IRQHandler+0xc60>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a25      	ldr	r2, [pc, #148]	; (80060e0 <HAL_DMA_IRQHandler+0xcdc>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d009      	beq.n	8006064 <HAL_DMA_IRQHandler+0xc60>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a23      	ldr	r2, [pc, #140]	; (80060e4 <HAL_DMA_IRQHandler+0xce0>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d004      	beq.n	8006064 <HAL_DMA_IRQHandler+0xc60>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a22      	ldr	r2, [pc, #136]	; (80060e8 <HAL_DMA_IRQHandler+0xce4>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d108      	bne.n	8006076 <HAL_DMA_IRQHandler+0xc72>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 0214 	bic.w	r2, r2, #20
 8006072:	601a      	str	r2, [r3, #0]
 8006074:	e007      	b.n	8006086 <HAL_DMA_IRQHandler+0xc82>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 020a 	bic.w	r2, r2, #10
 8006084:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800609a:	2b00      	cmp	r3, #0
 800609c:	f000 80b8 	beq.w	8006210 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060a8:	e0b2      	b.n	8006210 <HAL_DMA_IRQHandler+0xe0c>
 80060aa:	bf00      	nop
 80060ac:	40020010 	.word	0x40020010
 80060b0:	40020028 	.word	0x40020028
 80060b4:	40020040 	.word	0x40020040
 80060b8:	40020058 	.word	0x40020058
 80060bc:	40020070 	.word	0x40020070
 80060c0:	40020088 	.word	0x40020088
 80060c4:	400200a0 	.word	0x400200a0
 80060c8:	400200b8 	.word	0x400200b8
 80060cc:	40020410 	.word	0x40020410
 80060d0:	40020428 	.word	0x40020428
 80060d4:	40020440 	.word	0x40020440
 80060d8:	40020458 	.word	0x40020458
 80060dc:	40020470 	.word	0x40020470
 80060e0:	40020488 	.word	0x40020488
 80060e4:	400204a0 	.word	0x400204a0
 80060e8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060f0:	f003 031f 	and.w	r3, r3, #31
 80060f4:	2208      	movs	r2, #8
 80060f6:	409a      	lsls	r2, r3
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	4013      	ands	r3, r2
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f000 8088 	beq.w	8006212 <HAL_DMA_IRQHandler+0xe0e>
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	f003 0308 	and.w	r3, r3, #8
 8006108:	2b00      	cmp	r3, #0
 800610a:	f000 8082 	beq.w	8006212 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a41      	ldr	r2, [pc, #260]	; (8006218 <HAL_DMA_IRQHandler+0xe14>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d04a      	beq.n	80061ae <HAL_DMA_IRQHandler+0xdaa>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a3f      	ldr	r2, [pc, #252]	; (800621c <HAL_DMA_IRQHandler+0xe18>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d045      	beq.n	80061ae <HAL_DMA_IRQHandler+0xdaa>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a3e      	ldr	r2, [pc, #248]	; (8006220 <HAL_DMA_IRQHandler+0xe1c>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d040      	beq.n	80061ae <HAL_DMA_IRQHandler+0xdaa>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a3c      	ldr	r2, [pc, #240]	; (8006224 <HAL_DMA_IRQHandler+0xe20>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d03b      	beq.n	80061ae <HAL_DMA_IRQHandler+0xdaa>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a3b      	ldr	r2, [pc, #236]	; (8006228 <HAL_DMA_IRQHandler+0xe24>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d036      	beq.n	80061ae <HAL_DMA_IRQHandler+0xdaa>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a39      	ldr	r2, [pc, #228]	; (800622c <HAL_DMA_IRQHandler+0xe28>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d031      	beq.n	80061ae <HAL_DMA_IRQHandler+0xdaa>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a38      	ldr	r2, [pc, #224]	; (8006230 <HAL_DMA_IRQHandler+0xe2c>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d02c      	beq.n	80061ae <HAL_DMA_IRQHandler+0xdaa>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a36      	ldr	r2, [pc, #216]	; (8006234 <HAL_DMA_IRQHandler+0xe30>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d027      	beq.n	80061ae <HAL_DMA_IRQHandler+0xdaa>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a35      	ldr	r2, [pc, #212]	; (8006238 <HAL_DMA_IRQHandler+0xe34>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d022      	beq.n	80061ae <HAL_DMA_IRQHandler+0xdaa>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a33      	ldr	r2, [pc, #204]	; (800623c <HAL_DMA_IRQHandler+0xe38>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d01d      	beq.n	80061ae <HAL_DMA_IRQHandler+0xdaa>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a32      	ldr	r2, [pc, #200]	; (8006240 <HAL_DMA_IRQHandler+0xe3c>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d018      	beq.n	80061ae <HAL_DMA_IRQHandler+0xdaa>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a30      	ldr	r2, [pc, #192]	; (8006244 <HAL_DMA_IRQHandler+0xe40>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d013      	beq.n	80061ae <HAL_DMA_IRQHandler+0xdaa>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a2f      	ldr	r2, [pc, #188]	; (8006248 <HAL_DMA_IRQHandler+0xe44>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d00e      	beq.n	80061ae <HAL_DMA_IRQHandler+0xdaa>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a2d      	ldr	r2, [pc, #180]	; (800624c <HAL_DMA_IRQHandler+0xe48>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d009      	beq.n	80061ae <HAL_DMA_IRQHandler+0xdaa>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a2c      	ldr	r2, [pc, #176]	; (8006250 <HAL_DMA_IRQHandler+0xe4c>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d004      	beq.n	80061ae <HAL_DMA_IRQHandler+0xdaa>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a2a      	ldr	r2, [pc, #168]	; (8006254 <HAL_DMA_IRQHandler+0xe50>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d108      	bne.n	80061c0 <HAL_DMA_IRQHandler+0xdbc>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f022 021c 	bic.w	r2, r2, #28
 80061bc:	601a      	str	r2, [r3, #0]
 80061be:	e007      	b.n	80061d0 <HAL_DMA_IRQHandler+0xdcc>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f022 020e 	bic.w	r2, r2, #14
 80061ce:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061d4:	f003 031f 	and.w	r3, r3, #31
 80061d8:	2201      	movs	r2, #1
 80061da:	409a      	lsls	r2, r3
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d009      	beq.n	8006212 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	4798      	blx	r3
 8006206:	e004      	b.n	8006212 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006208:	bf00      	nop
 800620a:	e002      	b.n	8006212 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800620c:	bf00      	nop
 800620e:	e000      	b.n	8006212 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006210:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006212:	3728      	adds	r7, #40	; 0x28
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	40020010 	.word	0x40020010
 800621c:	40020028 	.word	0x40020028
 8006220:	40020040 	.word	0x40020040
 8006224:	40020058 	.word	0x40020058
 8006228:	40020070 	.word	0x40020070
 800622c:	40020088 	.word	0x40020088
 8006230:	400200a0 	.word	0x400200a0
 8006234:	400200b8 	.word	0x400200b8
 8006238:	40020410 	.word	0x40020410
 800623c:	40020428 	.word	0x40020428
 8006240:	40020440 	.word	0x40020440
 8006244:	40020458 	.word	0x40020458
 8006248:	40020470 	.word	0x40020470
 800624c:	40020488 	.word	0x40020488
 8006250:	400204a0 	.word	0x400204a0
 8006254:	400204b8 	.word	0x400204b8

08006258 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006258:	b480      	push	{r7}
 800625a:	b087      	sub	sp, #28
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
 8006264:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800626a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006270:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a84      	ldr	r2, [pc, #528]	; (8006488 <DMA_SetConfig+0x230>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d072      	beq.n	8006362 <DMA_SetConfig+0x10a>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a82      	ldr	r2, [pc, #520]	; (800648c <DMA_SetConfig+0x234>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d06d      	beq.n	8006362 <DMA_SetConfig+0x10a>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a81      	ldr	r2, [pc, #516]	; (8006490 <DMA_SetConfig+0x238>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d068      	beq.n	8006362 <DMA_SetConfig+0x10a>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a7f      	ldr	r2, [pc, #508]	; (8006494 <DMA_SetConfig+0x23c>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d063      	beq.n	8006362 <DMA_SetConfig+0x10a>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a7e      	ldr	r2, [pc, #504]	; (8006498 <DMA_SetConfig+0x240>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d05e      	beq.n	8006362 <DMA_SetConfig+0x10a>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a7c      	ldr	r2, [pc, #496]	; (800649c <DMA_SetConfig+0x244>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d059      	beq.n	8006362 <DMA_SetConfig+0x10a>
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a7b      	ldr	r2, [pc, #492]	; (80064a0 <DMA_SetConfig+0x248>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d054      	beq.n	8006362 <DMA_SetConfig+0x10a>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a79      	ldr	r2, [pc, #484]	; (80064a4 <DMA_SetConfig+0x24c>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d04f      	beq.n	8006362 <DMA_SetConfig+0x10a>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a78      	ldr	r2, [pc, #480]	; (80064a8 <DMA_SetConfig+0x250>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d04a      	beq.n	8006362 <DMA_SetConfig+0x10a>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a76      	ldr	r2, [pc, #472]	; (80064ac <DMA_SetConfig+0x254>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d045      	beq.n	8006362 <DMA_SetConfig+0x10a>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a75      	ldr	r2, [pc, #468]	; (80064b0 <DMA_SetConfig+0x258>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d040      	beq.n	8006362 <DMA_SetConfig+0x10a>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a73      	ldr	r2, [pc, #460]	; (80064b4 <DMA_SetConfig+0x25c>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d03b      	beq.n	8006362 <DMA_SetConfig+0x10a>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a72      	ldr	r2, [pc, #456]	; (80064b8 <DMA_SetConfig+0x260>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d036      	beq.n	8006362 <DMA_SetConfig+0x10a>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a70      	ldr	r2, [pc, #448]	; (80064bc <DMA_SetConfig+0x264>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d031      	beq.n	8006362 <DMA_SetConfig+0x10a>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a6f      	ldr	r2, [pc, #444]	; (80064c0 <DMA_SetConfig+0x268>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d02c      	beq.n	8006362 <DMA_SetConfig+0x10a>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a6d      	ldr	r2, [pc, #436]	; (80064c4 <DMA_SetConfig+0x26c>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d027      	beq.n	8006362 <DMA_SetConfig+0x10a>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a6c      	ldr	r2, [pc, #432]	; (80064c8 <DMA_SetConfig+0x270>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d022      	beq.n	8006362 <DMA_SetConfig+0x10a>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a6a      	ldr	r2, [pc, #424]	; (80064cc <DMA_SetConfig+0x274>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d01d      	beq.n	8006362 <DMA_SetConfig+0x10a>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a69      	ldr	r2, [pc, #420]	; (80064d0 <DMA_SetConfig+0x278>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d018      	beq.n	8006362 <DMA_SetConfig+0x10a>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a67      	ldr	r2, [pc, #412]	; (80064d4 <DMA_SetConfig+0x27c>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d013      	beq.n	8006362 <DMA_SetConfig+0x10a>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a66      	ldr	r2, [pc, #408]	; (80064d8 <DMA_SetConfig+0x280>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d00e      	beq.n	8006362 <DMA_SetConfig+0x10a>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a64      	ldr	r2, [pc, #400]	; (80064dc <DMA_SetConfig+0x284>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d009      	beq.n	8006362 <DMA_SetConfig+0x10a>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a63      	ldr	r2, [pc, #396]	; (80064e0 <DMA_SetConfig+0x288>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d004      	beq.n	8006362 <DMA_SetConfig+0x10a>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a61      	ldr	r2, [pc, #388]	; (80064e4 <DMA_SetConfig+0x28c>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d101      	bne.n	8006366 <DMA_SetConfig+0x10e>
 8006362:	2301      	movs	r3, #1
 8006364:	e000      	b.n	8006368 <DMA_SetConfig+0x110>
 8006366:	2300      	movs	r3, #0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00d      	beq.n	8006388 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006374:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800637a:	2b00      	cmp	r3, #0
 800637c:	d004      	beq.n	8006388 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006386:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a3e      	ldr	r2, [pc, #248]	; (8006488 <DMA_SetConfig+0x230>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d04a      	beq.n	8006428 <DMA_SetConfig+0x1d0>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a3d      	ldr	r2, [pc, #244]	; (800648c <DMA_SetConfig+0x234>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d045      	beq.n	8006428 <DMA_SetConfig+0x1d0>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a3b      	ldr	r2, [pc, #236]	; (8006490 <DMA_SetConfig+0x238>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d040      	beq.n	8006428 <DMA_SetConfig+0x1d0>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a3a      	ldr	r2, [pc, #232]	; (8006494 <DMA_SetConfig+0x23c>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d03b      	beq.n	8006428 <DMA_SetConfig+0x1d0>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a38      	ldr	r2, [pc, #224]	; (8006498 <DMA_SetConfig+0x240>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d036      	beq.n	8006428 <DMA_SetConfig+0x1d0>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a37      	ldr	r2, [pc, #220]	; (800649c <DMA_SetConfig+0x244>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d031      	beq.n	8006428 <DMA_SetConfig+0x1d0>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a35      	ldr	r2, [pc, #212]	; (80064a0 <DMA_SetConfig+0x248>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d02c      	beq.n	8006428 <DMA_SetConfig+0x1d0>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a34      	ldr	r2, [pc, #208]	; (80064a4 <DMA_SetConfig+0x24c>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d027      	beq.n	8006428 <DMA_SetConfig+0x1d0>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a32      	ldr	r2, [pc, #200]	; (80064a8 <DMA_SetConfig+0x250>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d022      	beq.n	8006428 <DMA_SetConfig+0x1d0>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a31      	ldr	r2, [pc, #196]	; (80064ac <DMA_SetConfig+0x254>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d01d      	beq.n	8006428 <DMA_SetConfig+0x1d0>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a2f      	ldr	r2, [pc, #188]	; (80064b0 <DMA_SetConfig+0x258>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d018      	beq.n	8006428 <DMA_SetConfig+0x1d0>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a2e      	ldr	r2, [pc, #184]	; (80064b4 <DMA_SetConfig+0x25c>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d013      	beq.n	8006428 <DMA_SetConfig+0x1d0>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a2c      	ldr	r2, [pc, #176]	; (80064b8 <DMA_SetConfig+0x260>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d00e      	beq.n	8006428 <DMA_SetConfig+0x1d0>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a2b      	ldr	r2, [pc, #172]	; (80064bc <DMA_SetConfig+0x264>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d009      	beq.n	8006428 <DMA_SetConfig+0x1d0>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a29      	ldr	r2, [pc, #164]	; (80064c0 <DMA_SetConfig+0x268>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d004      	beq.n	8006428 <DMA_SetConfig+0x1d0>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a28      	ldr	r2, [pc, #160]	; (80064c4 <DMA_SetConfig+0x26c>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d101      	bne.n	800642c <DMA_SetConfig+0x1d4>
 8006428:	2301      	movs	r3, #1
 800642a:	e000      	b.n	800642e <DMA_SetConfig+0x1d6>
 800642c:	2300      	movs	r3, #0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d05a      	beq.n	80064e8 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006436:	f003 031f 	and.w	r3, r3, #31
 800643a:	223f      	movs	r2, #63	; 0x3f
 800643c:	409a      	lsls	r2, r3
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006450:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	683a      	ldr	r2, [r7, #0]
 8006458:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	2b40      	cmp	r3, #64	; 0x40
 8006460:	d108      	bne.n	8006474 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006472:	e087      	b.n	8006584 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68ba      	ldr	r2, [r7, #8]
 800647a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	60da      	str	r2, [r3, #12]
}
 8006484:	e07e      	b.n	8006584 <DMA_SetConfig+0x32c>
 8006486:	bf00      	nop
 8006488:	40020010 	.word	0x40020010
 800648c:	40020028 	.word	0x40020028
 8006490:	40020040 	.word	0x40020040
 8006494:	40020058 	.word	0x40020058
 8006498:	40020070 	.word	0x40020070
 800649c:	40020088 	.word	0x40020088
 80064a0:	400200a0 	.word	0x400200a0
 80064a4:	400200b8 	.word	0x400200b8
 80064a8:	40020410 	.word	0x40020410
 80064ac:	40020428 	.word	0x40020428
 80064b0:	40020440 	.word	0x40020440
 80064b4:	40020458 	.word	0x40020458
 80064b8:	40020470 	.word	0x40020470
 80064bc:	40020488 	.word	0x40020488
 80064c0:	400204a0 	.word	0x400204a0
 80064c4:	400204b8 	.word	0x400204b8
 80064c8:	58025408 	.word	0x58025408
 80064cc:	5802541c 	.word	0x5802541c
 80064d0:	58025430 	.word	0x58025430
 80064d4:	58025444 	.word	0x58025444
 80064d8:	58025458 	.word	0x58025458
 80064dc:	5802546c 	.word	0x5802546c
 80064e0:	58025480 	.word	0x58025480
 80064e4:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a28      	ldr	r2, [pc, #160]	; (8006590 <DMA_SetConfig+0x338>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d022      	beq.n	8006538 <DMA_SetConfig+0x2e0>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a27      	ldr	r2, [pc, #156]	; (8006594 <DMA_SetConfig+0x33c>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d01d      	beq.n	8006538 <DMA_SetConfig+0x2e0>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a25      	ldr	r2, [pc, #148]	; (8006598 <DMA_SetConfig+0x340>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d018      	beq.n	8006538 <DMA_SetConfig+0x2e0>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a24      	ldr	r2, [pc, #144]	; (800659c <DMA_SetConfig+0x344>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d013      	beq.n	8006538 <DMA_SetConfig+0x2e0>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a22      	ldr	r2, [pc, #136]	; (80065a0 <DMA_SetConfig+0x348>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d00e      	beq.n	8006538 <DMA_SetConfig+0x2e0>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a21      	ldr	r2, [pc, #132]	; (80065a4 <DMA_SetConfig+0x34c>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d009      	beq.n	8006538 <DMA_SetConfig+0x2e0>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a1f      	ldr	r2, [pc, #124]	; (80065a8 <DMA_SetConfig+0x350>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d004      	beq.n	8006538 <DMA_SetConfig+0x2e0>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a1e      	ldr	r2, [pc, #120]	; (80065ac <DMA_SetConfig+0x354>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d101      	bne.n	800653c <DMA_SetConfig+0x2e4>
 8006538:	2301      	movs	r3, #1
 800653a:	e000      	b.n	800653e <DMA_SetConfig+0x2e6>
 800653c:	2300      	movs	r3, #0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d020      	beq.n	8006584 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006546:	f003 031f 	and.w	r3, r3, #31
 800654a:	2201      	movs	r2, #1
 800654c:	409a      	lsls	r2, r3
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	683a      	ldr	r2, [r7, #0]
 8006558:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	2b40      	cmp	r3, #64	; 0x40
 8006560:	d108      	bne.n	8006574 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	60da      	str	r2, [r3, #12]
}
 8006572:	e007      	b.n	8006584 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68ba      	ldr	r2, [r7, #8]
 800657a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	60da      	str	r2, [r3, #12]
}
 8006584:	bf00      	nop
 8006586:	371c      	adds	r7, #28
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr
 8006590:	58025408 	.word	0x58025408
 8006594:	5802541c 	.word	0x5802541c
 8006598:	58025430 	.word	0x58025430
 800659c:	58025444 	.word	0x58025444
 80065a0:	58025458 	.word	0x58025458
 80065a4:	5802546c 	.word	0x5802546c
 80065a8:	58025480 	.word	0x58025480
 80065ac:	58025494 	.word	0x58025494

080065b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a42      	ldr	r2, [pc, #264]	; (80066c8 <DMA_CalcBaseAndBitshift+0x118>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d04a      	beq.n	8006658 <DMA_CalcBaseAndBitshift+0xa8>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a41      	ldr	r2, [pc, #260]	; (80066cc <DMA_CalcBaseAndBitshift+0x11c>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d045      	beq.n	8006658 <DMA_CalcBaseAndBitshift+0xa8>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a3f      	ldr	r2, [pc, #252]	; (80066d0 <DMA_CalcBaseAndBitshift+0x120>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d040      	beq.n	8006658 <DMA_CalcBaseAndBitshift+0xa8>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a3e      	ldr	r2, [pc, #248]	; (80066d4 <DMA_CalcBaseAndBitshift+0x124>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d03b      	beq.n	8006658 <DMA_CalcBaseAndBitshift+0xa8>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a3c      	ldr	r2, [pc, #240]	; (80066d8 <DMA_CalcBaseAndBitshift+0x128>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d036      	beq.n	8006658 <DMA_CalcBaseAndBitshift+0xa8>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a3b      	ldr	r2, [pc, #236]	; (80066dc <DMA_CalcBaseAndBitshift+0x12c>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d031      	beq.n	8006658 <DMA_CalcBaseAndBitshift+0xa8>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a39      	ldr	r2, [pc, #228]	; (80066e0 <DMA_CalcBaseAndBitshift+0x130>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d02c      	beq.n	8006658 <DMA_CalcBaseAndBitshift+0xa8>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a38      	ldr	r2, [pc, #224]	; (80066e4 <DMA_CalcBaseAndBitshift+0x134>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d027      	beq.n	8006658 <DMA_CalcBaseAndBitshift+0xa8>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a36      	ldr	r2, [pc, #216]	; (80066e8 <DMA_CalcBaseAndBitshift+0x138>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d022      	beq.n	8006658 <DMA_CalcBaseAndBitshift+0xa8>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a35      	ldr	r2, [pc, #212]	; (80066ec <DMA_CalcBaseAndBitshift+0x13c>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d01d      	beq.n	8006658 <DMA_CalcBaseAndBitshift+0xa8>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a33      	ldr	r2, [pc, #204]	; (80066f0 <DMA_CalcBaseAndBitshift+0x140>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d018      	beq.n	8006658 <DMA_CalcBaseAndBitshift+0xa8>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a32      	ldr	r2, [pc, #200]	; (80066f4 <DMA_CalcBaseAndBitshift+0x144>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d013      	beq.n	8006658 <DMA_CalcBaseAndBitshift+0xa8>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a30      	ldr	r2, [pc, #192]	; (80066f8 <DMA_CalcBaseAndBitshift+0x148>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d00e      	beq.n	8006658 <DMA_CalcBaseAndBitshift+0xa8>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a2f      	ldr	r2, [pc, #188]	; (80066fc <DMA_CalcBaseAndBitshift+0x14c>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d009      	beq.n	8006658 <DMA_CalcBaseAndBitshift+0xa8>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a2d      	ldr	r2, [pc, #180]	; (8006700 <DMA_CalcBaseAndBitshift+0x150>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d004      	beq.n	8006658 <DMA_CalcBaseAndBitshift+0xa8>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a2c      	ldr	r2, [pc, #176]	; (8006704 <DMA_CalcBaseAndBitshift+0x154>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d101      	bne.n	800665c <DMA_CalcBaseAndBitshift+0xac>
 8006658:	2301      	movs	r3, #1
 800665a:	e000      	b.n	800665e <DMA_CalcBaseAndBitshift+0xae>
 800665c:	2300      	movs	r3, #0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d024      	beq.n	80066ac <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	b2db      	uxtb	r3, r3
 8006668:	3b10      	subs	r3, #16
 800666a:	4a27      	ldr	r2, [pc, #156]	; (8006708 <DMA_CalcBaseAndBitshift+0x158>)
 800666c:	fba2 2303 	umull	r2, r3, r2, r3
 8006670:	091b      	lsrs	r3, r3, #4
 8006672:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f003 0307 	and.w	r3, r3, #7
 800667a:	4a24      	ldr	r2, [pc, #144]	; (800670c <DMA_CalcBaseAndBitshift+0x15c>)
 800667c:	5cd3      	ldrb	r3, [r2, r3]
 800667e:	461a      	mov	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2b03      	cmp	r3, #3
 8006688:	d908      	bls.n	800669c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	461a      	mov	r2, r3
 8006690:	4b1f      	ldr	r3, [pc, #124]	; (8006710 <DMA_CalcBaseAndBitshift+0x160>)
 8006692:	4013      	ands	r3, r2
 8006694:	1d1a      	adds	r2, r3, #4
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	659a      	str	r2, [r3, #88]	; 0x58
 800669a:	e00d      	b.n	80066b8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	461a      	mov	r2, r3
 80066a2:	4b1b      	ldr	r3, [pc, #108]	; (8006710 <DMA_CalcBaseAndBitshift+0x160>)
 80066a4:	4013      	ands	r3, r2
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	6593      	str	r3, [r2, #88]	; 0x58
 80066aa:	e005      	b.n	80066b8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3714      	adds	r7, #20
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr
 80066c8:	40020010 	.word	0x40020010
 80066cc:	40020028 	.word	0x40020028
 80066d0:	40020040 	.word	0x40020040
 80066d4:	40020058 	.word	0x40020058
 80066d8:	40020070 	.word	0x40020070
 80066dc:	40020088 	.word	0x40020088
 80066e0:	400200a0 	.word	0x400200a0
 80066e4:	400200b8 	.word	0x400200b8
 80066e8:	40020410 	.word	0x40020410
 80066ec:	40020428 	.word	0x40020428
 80066f0:	40020440 	.word	0x40020440
 80066f4:	40020458 	.word	0x40020458
 80066f8:	40020470 	.word	0x40020470
 80066fc:	40020488 	.word	0x40020488
 8006700:	400204a0 	.word	0x400204a0
 8006704:	400204b8 	.word	0x400204b8
 8006708:	aaaaaaab 	.word	0xaaaaaaab
 800670c:	0801af60 	.word	0x0801af60
 8006710:	fffffc00 	.word	0xfffffc00

08006714 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800671c:	2300      	movs	r3, #0
 800671e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d120      	bne.n	800676a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672c:	2b03      	cmp	r3, #3
 800672e:	d858      	bhi.n	80067e2 <DMA_CheckFifoParam+0xce>
 8006730:	a201      	add	r2, pc, #4	; (adr r2, 8006738 <DMA_CheckFifoParam+0x24>)
 8006732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006736:	bf00      	nop
 8006738:	08006749 	.word	0x08006749
 800673c:	0800675b 	.word	0x0800675b
 8006740:	08006749 	.word	0x08006749
 8006744:	080067e3 	.word	0x080067e3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d048      	beq.n	80067e6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006758:	e045      	b.n	80067e6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006762:	d142      	bne.n	80067ea <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006768:	e03f      	b.n	80067ea <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006772:	d123      	bne.n	80067bc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006778:	2b03      	cmp	r3, #3
 800677a:	d838      	bhi.n	80067ee <DMA_CheckFifoParam+0xda>
 800677c:	a201      	add	r2, pc, #4	; (adr r2, 8006784 <DMA_CheckFifoParam+0x70>)
 800677e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006782:	bf00      	nop
 8006784:	08006795 	.word	0x08006795
 8006788:	0800679b 	.word	0x0800679b
 800678c:	08006795 	.word	0x08006795
 8006790:	080067ad 	.word	0x080067ad
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	73fb      	strb	r3, [r7, #15]
        break;
 8006798:	e030      	b.n	80067fc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d025      	beq.n	80067f2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067aa:	e022      	b.n	80067f2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80067b4:	d11f      	bne.n	80067f6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067ba:	e01c      	b.n	80067f6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d902      	bls.n	80067ca <DMA_CheckFifoParam+0xb6>
 80067c4:	2b03      	cmp	r3, #3
 80067c6:	d003      	beq.n	80067d0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80067c8:	e018      	b.n	80067fc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	73fb      	strb	r3, [r7, #15]
        break;
 80067ce:	e015      	b.n	80067fc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00e      	beq.n	80067fa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	73fb      	strb	r3, [r7, #15]
    break;
 80067e0:	e00b      	b.n	80067fa <DMA_CheckFifoParam+0xe6>
        break;
 80067e2:	bf00      	nop
 80067e4:	e00a      	b.n	80067fc <DMA_CheckFifoParam+0xe8>
        break;
 80067e6:	bf00      	nop
 80067e8:	e008      	b.n	80067fc <DMA_CheckFifoParam+0xe8>
        break;
 80067ea:	bf00      	nop
 80067ec:	e006      	b.n	80067fc <DMA_CheckFifoParam+0xe8>
        break;
 80067ee:	bf00      	nop
 80067f0:	e004      	b.n	80067fc <DMA_CheckFifoParam+0xe8>
        break;
 80067f2:	bf00      	nop
 80067f4:	e002      	b.n	80067fc <DMA_CheckFifoParam+0xe8>
        break;
 80067f6:	bf00      	nop
 80067f8:	e000      	b.n	80067fc <DMA_CheckFifoParam+0xe8>
    break;
 80067fa:	bf00      	nop
    }
  }

  return status;
 80067fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop

0800680c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a38      	ldr	r2, [pc, #224]	; (8006900 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d022      	beq.n	800686a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a36      	ldr	r2, [pc, #216]	; (8006904 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d01d      	beq.n	800686a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a35      	ldr	r2, [pc, #212]	; (8006908 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d018      	beq.n	800686a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a33      	ldr	r2, [pc, #204]	; (800690c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d013      	beq.n	800686a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a32      	ldr	r2, [pc, #200]	; (8006910 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d00e      	beq.n	800686a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a30      	ldr	r2, [pc, #192]	; (8006914 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d009      	beq.n	800686a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a2f      	ldr	r2, [pc, #188]	; (8006918 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d004      	beq.n	800686a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a2d      	ldr	r2, [pc, #180]	; (800691c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d101      	bne.n	800686e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800686a:	2301      	movs	r3, #1
 800686c:	e000      	b.n	8006870 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800686e:	2300      	movs	r3, #0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d01a      	beq.n	80068aa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	b2db      	uxtb	r3, r3
 800687a:	3b08      	subs	r3, #8
 800687c:	4a28      	ldr	r2, [pc, #160]	; (8006920 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800687e:	fba2 2303 	umull	r2, r3, r2, r3
 8006882:	091b      	lsrs	r3, r3, #4
 8006884:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	4b26      	ldr	r3, [pc, #152]	; (8006924 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800688a:	4413      	add	r3, r2
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	461a      	mov	r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a24      	ldr	r2, [pc, #144]	; (8006928 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006898:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f003 031f 	and.w	r3, r3, #31
 80068a0:	2201      	movs	r2, #1
 80068a2:	409a      	lsls	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80068a8:	e024      	b.n	80068f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	3b10      	subs	r3, #16
 80068b2:	4a1e      	ldr	r2, [pc, #120]	; (800692c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80068b4:	fba2 2303 	umull	r2, r3, r2, r3
 80068b8:	091b      	lsrs	r3, r3, #4
 80068ba:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	4a1c      	ldr	r2, [pc, #112]	; (8006930 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d806      	bhi.n	80068d2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	4a1b      	ldr	r2, [pc, #108]	; (8006934 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d902      	bls.n	80068d2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	3308      	adds	r3, #8
 80068d0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	4b18      	ldr	r3, [pc, #96]	; (8006938 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80068d6:	4413      	add	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	461a      	mov	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	4a16      	ldr	r2, [pc, #88]	; (800693c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80068e4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f003 031f 	and.w	r3, r3, #31
 80068ec:	2201      	movs	r2, #1
 80068ee:	409a      	lsls	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80068f4:	bf00      	nop
 80068f6:	3714      	adds	r7, #20
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr
 8006900:	58025408 	.word	0x58025408
 8006904:	5802541c 	.word	0x5802541c
 8006908:	58025430 	.word	0x58025430
 800690c:	58025444 	.word	0x58025444
 8006910:	58025458 	.word	0x58025458
 8006914:	5802546c 	.word	0x5802546c
 8006918:	58025480 	.word	0x58025480
 800691c:	58025494 	.word	0x58025494
 8006920:	cccccccd 	.word	0xcccccccd
 8006924:	16009600 	.word	0x16009600
 8006928:	58025880 	.word	0x58025880
 800692c:	aaaaaaab 	.word	0xaaaaaaab
 8006930:	400204b8 	.word	0x400204b8
 8006934:	4002040f 	.word	0x4002040f
 8006938:	10008200 	.word	0x10008200
 800693c:	40020880 	.word	0x40020880

08006940 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	b2db      	uxtb	r3, r3
 800694e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d04a      	beq.n	80069ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2b08      	cmp	r3, #8
 800695a:	d847      	bhi.n	80069ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a25      	ldr	r2, [pc, #148]	; (80069f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d022      	beq.n	80069ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a24      	ldr	r2, [pc, #144]	; (80069fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d01d      	beq.n	80069ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a22      	ldr	r2, [pc, #136]	; (8006a00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d018      	beq.n	80069ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a21      	ldr	r2, [pc, #132]	; (8006a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d013      	beq.n	80069ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a1f      	ldr	r2, [pc, #124]	; (8006a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d00e      	beq.n	80069ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a1e      	ldr	r2, [pc, #120]	; (8006a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d009      	beq.n	80069ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a1c      	ldr	r2, [pc, #112]	; (8006a10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d004      	beq.n	80069ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a1b      	ldr	r2, [pc, #108]	; (8006a14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d101      	bne.n	80069b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80069ac:	2301      	movs	r3, #1
 80069ae:	e000      	b.n	80069b2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80069b0:	2300      	movs	r3, #0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00a      	beq.n	80069cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	4b17      	ldr	r3, [pc, #92]	; (8006a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80069ba:	4413      	add	r3, r2
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	461a      	mov	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a15      	ldr	r2, [pc, #84]	; (8006a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80069c8:	671a      	str	r2, [r3, #112]	; 0x70
 80069ca:	e009      	b.n	80069e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	4b14      	ldr	r3, [pc, #80]	; (8006a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80069d0:	4413      	add	r3, r2
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	461a      	mov	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a11      	ldr	r2, [pc, #68]	; (8006a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80069de:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	3b01      	subs	r3, #1
 80069e4:	2201      	movs	r2, #1
 80069e6:	409a      	lsls	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80069ec:	bf00      	nop
 80069ee:	3714      	adds	r7, #20
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr
 80069f8:	58025408 	.word	0x58025408
 80069fc:	5802541c 	.word	0x5802541c
 8006a00:	58025430 	.word	0x58025430
 8006a04:	58025444 	.word	0x58025444
 8006a08:	58025458 	.word	0x58025458
 8006a0c:	5802546c 	.word	0x5802546c
 8006a10:	58025480 	.word	0x58025480
 8006a14:	58025494 	.word	0x58025494
 8006a18:	1600963f 	.word	0x1600963f
 8006a1c:	58025940 	.word	0x58025940
 8006a20:	1000823f 	.word	0x1000823f
 8006a24:	40020940 	.word	0x40020940

08006a28 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b098      	sub	sp, #96	; 0x60
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006a30:	4a84      	ldr	r2, [pc, #528]	; (8006c44 <HAL_FDCAN_Init+0x21c>)
 8006a32:	f107 030c 	add.w	r3, r7, #12
 8006a36:	4611      	mov	r1, r2
 8006a38:	224c      	movs	r2, #76	; 0x4c
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f012 fd28 	bl	8019490 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d101      	bne.n	8006a4a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e1ca      	b.n	8006de0 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a7e      	ldr	r2, [pc, #504]	; (8006c48 <HAL_FDCAN_Init+0x220>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d106      	bne.n	8006a62 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d106      	bne.n	8006a7c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7fd f94e 	bl	8003d18 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	699a      	ldr	r2, [r3, #24]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f022 0210 	bic.w	r2, r2, #16
 8006a8a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a8c:	f7fd fdaa 	bl	80045e4 <HAL_GetTick>
 8006a90:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006a92:	e014      	b.n	8006abe <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006a94:	f7fd fda6 	bl	80045e4 <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	2b0a      	cmp	r3, #10
 8006aa0:	d90d      	bls.n	8006abe <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006aa8:	f043 0201 	orr.w	r2, r3, #1
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2203      	movs	r2, #3
 8006ab6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e190      	b.n	8006de0 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	f003 0308 	and.w	r3, r3, #8
 8006ac8:	2b08      	cmp	r3, #8
 8006aca:	d0e3      	beq.n	8006a94 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	699a      	ldr	r2, [r3, #24]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f042 0201 	orr.w	r2, r2, #1
 8006ada:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006adc:	f7fd fd82 	bl	80045e4 <HAL_GetTick>
 8006ae0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006ae2:	e014      	b.n	8006b0e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006ae4:	f7fd fd7e 	bl	80045e4 <HAL_GetTick>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	2b0a      	cmp	r3, #10
 8006af0:	d90d      	bls.n	8006b0e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006af8:	f043 0201 	orr.w	r2, r3, #1
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2203      	movs	r2, #3
 8006b06:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e168      	b.n	8006de0 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	f003 0301 	and.w	r3, r3, #1
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d0e3      	beq.n	8006ae4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	699a      	ldr	r2, [r3, #24]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f042 0202 	orr.w	r2, r2, #2
 8006b2a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	7c1b      	ldrb	r3, [r3, #16]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d108      	bne.n	8006b46 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	699a      	ldr	r2, [r3, #24]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b42:	619a      	str	r2, [r3, #24]
 8006b44:	e007      	b.n	8006b56 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	699a      	ldr	r2, [r3, #24]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b54:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	7c5b      	ldrb	r3, [r3, #17]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d108      	bne.n	8006b70 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	699a      	ldr	r2, [r3, #24]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b6c:	619a      	str	r2, [r3, #24]
 8006b6e:	e007      	b.n	8006b80 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	699a      	ldr	r2, [r3, #24]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006b7e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	7c9b      	ldrb	r3, [r3, #18]
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d108      	bne.n	8006b9a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	699a      	ldr	r2, [r3, #24]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b96:	619a      	str	r2, [r3, #24]
 8006b98:	e007      	b.n	8006baa <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	699a      	ldr	r2, [r3, #24]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ba8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	689a      	ldr	r2, [r3, #8]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	430a      	orrs	r2, r1
 8006bbe:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	699a      	ldr	r2, [r3, #24]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006bce:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	691a      	ldr	r2, [r3, #16]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f022 0210 	bic.w	r2, r2, #16
 8006bde:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d108      	bne.n	8006bfa <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	699a      	ldr	r2, [r3, #24]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f042 0204 	orr.w	r2, r2, #4
 8006bf6:	619a      	str	r2, [r3, #24]
 8006bf8:	e030      	b.n	8006c5c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d02c      	beq.n	8006c5c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d020      	beq.n	8006c4c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	699a      	ldr	r2, [r3, #24]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c18:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	691a      	ldr	r2, [r3, #16]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f042 0210 	orr.w	r2, r2, #16
 8006c28:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	2b03      	cmp	r3, #3
 8006c30:	d114      	bne.n	8006c5c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	699a      	ldr	r2, [r3, #24]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f042 0220 	orr.w	r2, r2, #32
 8006c40:	619a      	str	r2, [r3, #24]
 8006c42:	e00b      	b.n	8006c5c <HAL_FDCAN_Init+0x234>
 8006c44:	0801ae6c 	.word	0x0801ae6c
 8006c48:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	699a      	ldr	r2, [r3, #24]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f042 0220 	orr.w	r2, r2, #32
 8006c5a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	699b      	ldr	r3, [r3, #24]
 8006c60:	3b01      	subs	r3, #1
 8006c62:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	69db      	ldr	r3, [r3, #28]
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c6c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006c74:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	695b      	ldr	r3, [r3, #20]
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006c84:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c86:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c90:	d115      	bne.n	8006cbe <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c96:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006ca0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006caa:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006cba:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006cbc:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00a      	beq.n	8006cdc <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	430a      	orrs	r2, r1
 8006cd8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ce4:	4413      	add	r3, r2
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d012      	beq.n	8006d10 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006cf2:	f023 0107 	bic.w	r1, r3, #7
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006d00:	4413      	add	r3, r2
 8006d02:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	430a      	orrs	r2, r1
 8006d0c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d012      	beq.n	8006d3e <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006d20:	f023 0107 	bic.w	r1, r3, #7
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006d2e:	4413      	add	r3, r2
 8006d30:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d013      	beq.n	8006d6e <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006d4e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006d5c:	4413      	add	r3, r2
 8006d5e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006d62:	011a      	lsls	r2, r3, #4
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	430a      	orrs	r2, r1
 8006d6a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d013      	beq.n	8006d9e <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006d7e:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006d92:	021a      	lsls	r2, r3, #8
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	430a      	orrs	r2, r1
 8006d9a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a11      	ldr	r2, [pc, #68]	; (8006de8 <HAL_FDCAN_Init+0x3c0>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d107      	bne.n	8006db8 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	689a      	ldr	r2, [r3, #8]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	f022 0203 	bic.w	r2, r2, #3
 8006db6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 fddf 	bl	8007994 <FDCAN_CalcultateRamBlockAddresses>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8006ddc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3760      	adds	r7, #96	; 0x60
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	4000a000 	.word	0x4000a000

08006dec <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b087      	sub	sp, #28
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006dfc:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006dfe:	7bfb      	ldrb	r3, [r7, #15]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d002      	beq.n	8006e0a <HAL_FDCAN_ConfigFilter+0x1e>
 8006e04:	7bfb      	ldrb	r3, [r7, #15]
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d157      	bne.n	8006eba <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d12b      	bne.n	8006e6a <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	2b07      	cmp	r3, #7
 8006e18:	d10d      	bne.n	8006e36 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	69db      	ldr	r3, [r3, #28]
 8006e24:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8006e26:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8006e2c:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8006e2e:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8006e32:	617b      	str	r3, [r7, #20]
 8006e34:	e00e      	b.n	8006e54 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006e42:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8006e4a:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006e50:	4313      	orrs	r3, r2
 8006e52:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	4413      	add	r3, r2
 8006e60:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	697a      	ldr	r2, [r7, #20]
 8006e66:	601a      	str	r2, [r3, #0]
 8006e68:	e025      	b.n	8006eb6 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	075a      	lsls	r2, r3, #29
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	2b07      	cmp	r3, #7
 8006e7e:	d103      	bne.n	8006e88 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	613b      	str	r3, [r7, #16]
 8006e86:	e006      	b.n	8006e96 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	079a      	lsls	r2, r3, #30
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	695b      	ldr	r3, [r3, #20]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	00db      	lsls	r3, r3, #3
 8006ea0:	4413      	add	r3, r2
 8006ea2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	697a      	ldr	r2, [r7, #20]
 8006ea8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	3304      	adds	r3, #4
 8006eae:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	e008      	b.n	8006ecc <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ec0:	f043 0202 	orr.w	r2, r3, #2
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
  }
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	371c      	adds	r7, #28
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]
 8006ee4:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d110      	bne.n	8006f14 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8006efa:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8006f00:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8006f08:	69ba      	ldr	r2, [r7, #24]
 8006f0a:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8006f0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8006f10:	2300      	movs	r3, #0
 8006f12:	e008      	b.n	8006f26 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f1a:	f043 0204 	orr.w	r2, r3, #4
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
  }
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3714      	adds	r7, #20
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr

08006f32 <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 8006f32:	b480      	push	{r7}
 8006f34:	b083      	sub	sp, #12
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d109      	bne.n	8006f5a <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68da      	ldr	r2, [r3, #12]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006f54:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8006f56:	2300      	movs	r3, #0
 8006f58:	e008      	b.n	8006f6c <HAL_FDCAN_EnableTxDelayCompensation+0x3a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f60:	f043 0204 	orr.w	r2, r3, #4
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
  }
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d111      	bne.n	8006fb0 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2202      	movs	r2, #2
 8006f90:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	699a      	ldr	r2, [r3, #24]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f022 0201 	bic.w	r2, r2, #1
 8006fa2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8006fac:	2300      	movs	r3, #0
 8006fae:	e008      	b.n	8006fc2 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006fb6:	f043 0204 	orr.w	r2, r3, #4
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
  }
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	370c      	adds	r7, #12
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
	...

08006fd0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b08b      	sub	sp, #44	; 0x2c
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]
 8006fdc:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006fe8:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8006fea:	7efb      	ldrb	r3, [r7, #27]
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	f040 813b 	bne.w	8007268 <HAL_FDCAN_GetRxMessage+0x298>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	2b40      	cmp	r3, #64	; 0x40
 8006ff6:	d145      	bne.n	8007084 <HAL_FDCAN_GetRxMessage+0xb4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007000:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d109      	bne.n	800701c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800700e:	f043 0220 	orr.w	r2, r3, #32
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e12e      	b.n	800727a <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007028:	2b00      	cmp	r3, #0
 800702a:	d109      	bne.n	8007040 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007032:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e11c      	b.n	800727a <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007048:	0e1b      	lsrs	r3, r3, #24
 800704a:	f003 0301 	and.w	r3, r3, #1
 800704e:	2b01      	cmp	r3, #1
 8007050:	d103      	bne.n	800705a <HAL_FDCAN_GetRxMessage+0x8a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007062:	0a1b      	lsrs	r3, r3, #8
 8007064:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007068:	69fa      	ldr	r2, [r7, #28]
 800706a:	4413      	add	r3, r2
 800706c:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007076:	69f9      	ldr	r1, [r7, #28]
 8007078:	fb01 f303 	mul.w	r3, r1, r3
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4413      	add	r3, r2
 8007080:	627b      	str	r3, [r7, #36]	; 0x24
 8007082:	e061      	b.n	8007148 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	2b41      	cmp	r3, #65	; 0x41
 8007088:	d145      	bne.n	8007116 <HAL_FDCAN_GetRxMessage+0x146>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007092:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d109      	bne.n	80070ae <HAL_FDCAN_GetRxMessage+0xde>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070a0:	f043 0220 	orr.w	r2, r3, #32
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e0e5      	b.n	800727a <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80070b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d109      	bne.n	80070d2 <HAL_FDCAN_GetRxMessage+0x102>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e0d3      	b.n	800727a <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80070da:	0e1b      	lsrs	r3, r3, #24
 80070dc:	f003 0301 	and.w	r3, r3, #1
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d103      	bne.n	80070ec <HAL_FDCAN_GetRxMessage+0x11c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80070f4:	0a1b      	lsrs	r3, r3, #8
 80070f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070fa:	69fa      	ldr	r2, [r7, #28]
 80070fc:	4413      	add	r3, r2
 80070fe:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007108:	69f9      	ldr	r1, [r7, #28]
 800710a:	fb01 f303 	mul.w	r3, r1, r3
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	4413      	add	r3, r2
 8007112:	627b      	str	r3, [r7, #36]	; 0x24
 8007114:	e018      	b.n	8007148 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	429a      	cmp	r2, r3
 800711e:	d309      	bcc.n	8007134 <HAL_FDCAN_GetRxMessage+0x164>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007126:	f043 0220 	orr.w	r2, r3, #32
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e0a2      	b.n	800727a <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800713c:	68b9      	ldr	r1, [r7, #8]
 800713e:	fb01 f303 	mul.w	r3, r1, r3
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	4413      	add	r3, r2
 8007146:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8007148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d107      	bne.n	800716c <HAL_FDCAN_GetRxMessage+0x19c>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 800715c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	0c9b      	lsrs	r3, r3, #18
 8007162:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	601a      	str	r2, [r3, #0]
 800716a:	e005      	b.n	8007178 <HAL_FDCAN_GetRxMessage+0x1a8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800716c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8007178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8007190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007192:	3304      	adds	r3, #4
 8007194:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8007196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	b29a      	uxth	r2, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80071a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80071ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80071b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80071c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	0e1b      	lsrs	r3, r3, #24
 80071ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80071d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	0fda      	lsrs	r2, r3, #31
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80071dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071de:	3304      	adds	r3, #4
 80071e0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80071e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e4:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80071e6:	2300      	movs	r3, #0
 80071e8:	623b      	str	r3, [r7, #32]
 80071ea:	e00a      	b.n	8007202 <HAL_FDCAN_GetRxMessage+0x232>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80071ec:	697a      	ldr	r2, [r7, #20]
 80071ee:	6a3b      	ldr	r3, [r7, #32]
 80071f0:	441a      	add	r2, r3
 80071f2:	6839      	ldr	r1, [r7, #0]
 80071f4:	6a3b      	ldr	r3, [r7, #32]
 80071f6:	440b      	add	r3, r1
 80071f8:	7812      	ldrb	r2, [r2, #0]
 80071fa:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80071fc:	6a3b      	ldr	r3, [r7, #32]
 80071fe:	3301      	adds	r3, #1
 8007200:	623b      	str	r3, [r7, #32]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	0c1b      	lsrs	r3, r3, #16
 8007208:	4a1f      	ldr	r2, [pc, #124]	; (8007288 <HAL_FDCAN_GetRxMessage+0x2b8>)
 800720a:	5cd3      	ldrb	r3, [r2, r3]
 800720c:	461a      	mov	r2, r3
 800720e:	6a3b      	ldr	r3, [r7, #32]
 8007210:	4293      	cmp	r3, r2
 8007212:	d3eb      	bcc.n	80071ec <HAL_FDCAN_GetRxMessage+0x21c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	2b40      	cmp	r3, #64	; 0x40
 8007218:	d105      	bne.n	8007226 <HAL_FDCAN_GetRxMessage+0x256>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	69fa      	ldr	r2, [r7, #28]
 8007220:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8007224:	e01e      	b.n	8007264 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	2b41      	cmp	r3, #65	; 0x41
 800722a:	d105      	bne.n	8007238 <HAL_FDCAN_GetRxMessage+0x268>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	69fa      	ldr	r2, [r7, #28]
 8007232:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8007236:	e015      	b.n	8007264 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	2b1f      	cmp	r3, #31
 800723c:	d808      	bhi.n	8007250 <HAL_FDCAN_GetRxMessage+0x280>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2101      	movs	r1, #1
 8007244:	68ba      	ldr	r2, [r7, #8]
 8007246:	fa01 f202 	lsl.w	r2, r1, r2
 800724a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800724e:	e009      	b.n	8007264 <HAL_FDCAN_GetRxMessage+0x294>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	f003 021f 	and.w	r2, r3, #31
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2101      	movs	r1, #1
 800725c:	fa01 f202 	lsl.w	r2, r1, r2
 8007260:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8007264:	2300      	movs	r3, #0
 8007266:	e008      	b.n	800727a <HAL_FDCAN_GetRxMessage+0x2aa>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800726e:	f043 0208 	orr.w	r2, r3, #8
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8007278:	2301      	movs	r3, #1
  }
}
 800727a:	4618      	mov	r0, r3
 800727c:	372c      	adds	r7, #44	; 0x2c
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop
 8007288:	0801af68 	.word	0x0801af68

0800728c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 800728c:	b480      	push	{r7}
 800728e:	b087      	sub	sp, #28
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800729e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80072a0:	7dfb      	ldrb	r3, [r7, #23]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d002      	beq.n	80072ac <HAL_FDCAN_ActivateNotification+0x20>
 80072a6:	7dfb      	ldrb	r3, [r7, #23]
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d155      	bne.n	8007358 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	4013      	ands	r3, r2
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d108      	bne.n	80072cc <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f042 0201 	orr.w	r2, r2, #1
 80072c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80072ca:	e014      	b.n	80072f6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	4013      	ands	r3, r2
 80072d6:	68ba      	ldr	r2, [r7, #8]
 80072d8:	429a      	cmp	r2, r3
 80072da:	d108      	bne.n	80072ee <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f042 0202 	orr.w	r2, r2, #2
 80072ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80072ec:	e003      	b.n	80072f6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2203      	movs	r2, #3
 80072f4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d009      	beq.n	8007314 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	430a      	orrs	r2, r1
 8007310:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800731a:	2b00      	cmp	r3, #0
 800731c:	d009      	beq.n	8007332 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	430a      	orrs	r2, r1
 800732e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007338:	68ba      	ldr	r2, [r7, #8]
 800733a:	4b0f      	ldr	r3, [pc, #60]	; (8007378 <HAL_FDCAN_ActivateNotification+0xec>)
 800733c:	4013      	ands	r3, r2
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	6812      	ldr	r2, [r2, #0]
 8007342:	430b      	orrs	r3, r1
 8007344:	6553      	str	r3, [r2, #84]	; 0x54
 8007346:	4b0d      	ldr	r3, [pc, #52]	; (800737c <HAL_FDCAN_ActivateNotification+0xf0>)
 8007348:	695a      	ldr	r2, [r3, #20]
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	0f9b      	lsrs	r3, r3, #30
 800734e:	490b      	ldr	r1, [pc, #44]	; (800737c <HAL_FDCAN_ActivateNotification+0xf0>)
 8007350:	4313      	orrs	r3, r2
 8007352:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8007354:	2300      	movs	r3, #0
 8007356:	e008      	b.n	800736a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800735e:	f043 0202 	orr.w	r2, r3, #2
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
  }
}
 800736a:	4618      	mov	r0, r3
 800736c:	371c      	adds	r7, #28
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop
 8007378:	3fcfffff 	.word	0x3fcfffff
 800737c:	4000a800 	.word	0x4000a800

08007380 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b092      	sub	sp, #72	; 0x48
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8007388:	4b90      	ldr	r3, [pc, #576]	; (80075cc <HAL_FDCAN_IRQHandler+0x24c>)
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	079b      	lsls	r3, r3, #30
 800738e:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8007390:	4b8e      	ldr	r3, [pc, #568]	; (80075cc <HAL_FDCAN_IRQHandler+0x24c>)
 8007392:	695b      	ldr	r3, [r3, #20]
 8007394:	079b      	lsls	r3, r3, #30
 8007396:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007398:	4013      	ands	r3, r2
 800739a:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073a2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80073a6:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073b0:	4013      	ands	r3, r2
 80073b2:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ba:	f003 030f 	and.w	r3, r3, #15
 80073be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80073c8:	4013      	ands	r3, r2
 80073ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073e0:	4013      	ands	r3, r2
 80073e2:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ea:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 80073ee:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073f8:	4013      	ands	r3, r2
 80073fa:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007402:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8007406:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800740e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007410:	4013      	ands	r3, r2
 8007412:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800741a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800741e:	2b00      	cmp	r3, #0
 8007420:	d011      	beq.n	8007446 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00a      	beq.n	8007446 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007438:	651a      	str	r2, [r3, #80]	; 0x50
 800743a:	4b64      	ldr	r3, [pc, #400]	; (80075cc <HAL_FDCAN_IRQHandler+0x24c>)
 800743c:	2200      	movs	r2, #0
 800743e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 fa5a 	bl	80078fa <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800744c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007450:	2b00      	cmp	r3, #0
 8007452:	d01e      	beq.n	8007492 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800745a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800745e:	2b00      	cmp	r3, #0
 8007460:	d017      	beq.n	8007492 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800746a:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007476:	4013      	ands	r3, r2
 8007478:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007482:	651a      	str	r2, [r3, #80]	; 0x50
 8007484:	4b51      	ldr	r3, [pc, #324]	; (80075cc <HAL_FDCAN_IRQHandler+0x24c>)
 8007486:	2200      	movs	r2, #0
 8007488:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800748a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 fa0b 	bl	80078a8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8007492:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00d      	beq.n	80074b4 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800749e:	4b4c      	ldr	r3, [pc, #304]	; (80075d0 <HAL_FDCAN_IRQHandler+0x250>)
 80074a0:	400b      	ands	r3, r1
 80074a2:	6513      	str	r3, [r2, #80]	; 0x50
 80074a4:	4a49      	ldr	r2, [pc, #292]	; (80075cc <HAL_FDCAN_IRQHandler+0x24c>)
 80074a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074a8:	0f9b      	lsrs	r3, r3, #30
 80074aa:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80074ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f9c4 	bl	800783c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80074b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00d      	beq.n	80074d6 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074c0:	4b43      	ldr	r3, [pc, #268]	; (80075d0 <HAL_FDCAN_IRQHandler+0x250>)
 80074c2:	400b      	ands	r3, r1
 80074c4:	6513      	str	r3, [r2, #80]	; 0x50
 80074c6:	4a41      	ldr	r2, [pc, #260]	; (80075cc <HAL_FDCAN_IRQHandler+0x24c>)
 80074c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074ca:	0f9b      	lsrs	r3, r3, #30
 80074cc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80074ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f9be 	bl	8007852 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80074d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d00d      	beq.n	80074f8 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80074e2:	4b3b      	ldr	r3, [pc, #236]	; (80075d0 <HAL_FDCAN_IRQHandler+0x250>)
 80074e4:	400b      	ands	r3, r1
 80074e6:	6513      	str	r3, [r2, #80]	; 0x50
 80074e8:	4a38      	ldr	r2, [pc, #224]	; (80075cc <HAL_FDCAN_IRQHandler+0x24c>)
 80074ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074ec:	0f9b      	lsrs	r3, r3, #30
 80074ee:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80074f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f7f9 f90a 	bl	800070c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80074f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00d      	beq.n	800751a <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007504:	4b32      	ldr	r3, [pc, #200]	; (80075d0 <HAL_FDCAN_IRQHandler+0x250>)
 8007506:	400b      	ands	r3, r1
 8007508:	6513      	str	r3, [r2, #80]	; 0x50
 800750a:	4a30      	ldr	r2, [pc, #192]	; (80075cc <HAL_FDCAN_IRQHandler+0x24c>)
 800750c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800750e:	0f9b      	lsrs	r3, r3, #30
 8007510:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8007512:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 f9a7 	bl	8007868 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007524:	2b00      	cmp	r3, #0
 8007526:	d011      	beq.n	800754c <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800752e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00a      	beq.n	800754c <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800753e:	651a      	str	r2, [r3, #80]	; 0x50
 8007540:	4b22      	ldr	r3, [pc, #136]	; (80075cc <HAL_FDCAN_IRQHandler+0x24c>)
 8007542:	2200      	movs	r2, #0
 8007544:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f999 	bl	800787e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007552:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007556:	2b00      	cmp	r3, #0
 8007558:	d01e      	beq.n	8007598 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007560:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007564:	2b00      	cmp	r3, #0
 8007566:	d017      	beq.n	8007598 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007570:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800757a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800757c:	4013      	ands	r3, r2
 800757e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007588:	651a      	str	r2, [r3, #80]	; 0x50
 800758a:	4b10      	ldr	r3, [pc, #64]	; (80075cc <HAL_FDCAN_IRQHandler+0x24c>)
 800758c:	2200      	movs	r2, #0
 800758e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007590:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 f97d 	bl	8007892 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800759e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d016      	beq.n	80075d4 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00f      	beq.n	80075d4 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80075bc:	651a      	str	r2, [r3, #80]	; 0x50
 80075be:	4b03      	ldr	r3, [pc, #12]	; (80075cc <HAL_FDCAN_IRQHandler+0x24c>)
 80075c0:	2200      	movs	r2, #0
 80075c2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 f97a 	bl	80078be <HAL_FDCAN_RxBufferNewMessageCallback>
 80075ca:	e003      	b.n	80075d4 <HAL_FDCAN_IRQHandler+0x254>
 80075cc:	4000a800 	.word	0x4000a800
 80075d0:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d011      	beq.n	8007606 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00a      	beq.n	8007606 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80075f8:	651a      	str	r2, [r3, #80]	; 0x50
 80075fa:	4b8d      	ldr	r3, [pc, #564]	; (8007830 <HAL_FDCAN_IRQHandler+0x4b0>)
 80075fc:	2200      	movs	r2, #0
 80075fe:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 f966 	bl	80078d2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800760c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007610:	2b00      	cmp	r3, #0
 8007612:	d011      	beq.n	8007638 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800761a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00a      	beq.n	8007638 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800762a:	651a      	str	r2, [r3, #80]	; 0x50
 800762c:	4b80      	ldr	r3, [pc, #512]	; (8007830 <HAL_FDCAN_IRQHandler+0x4b0>)
 800762e:	2200      	movs	r2, #0
 8007630:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 f957 	bl	80078e6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800763e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007642:	2b00      	cmp	r3, #0
 8007644:	d016      	beq.n	8007674 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800764c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00f      	beq.n	8007674 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800765c:	651a      	str	r2, [r3, #80]	; 0x50
 800765e:	4b74      	ldr	r3, [pc, #464]	; (8007830 <HAL_FDCAN_IRQHandler+0x4b0>)
 8007660:	2200      	movs	r2, #0
 8007662:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800766a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8007674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00d      	beq.n	8007696 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007680:	4b6c      	ldr	r3, [pc, #432]	; (8007834 <HAL_FDCAN_IRQHandler+0x4b4>)
 8007682:	400b      	ands	r3, r1
 8007684:	6513      	str	r3, [r2, #80]	; 0x50
 8007686:	4a6a      	ldr	r2, [pc, #424]	; (8007830 <HAL_FDCAN_IRQHandler+0x4b0>)
 8007688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768a:	0f9b      	lsrs	r3, r3, #30
 800768c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800768e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 f946 	bl	8007922 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8007696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007698:	2b00      	cmp	r3, #0
 800769a:	d011      	beq.n	80076c0 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80076a2:	4b64      	ldr	r3, [pc, #400]	; (8007834 <HAL_FDCAN_IRQHandler+0x4b4>)
 80076a4:	400b      	ands	r3, r1
 80076a6:	6513      	str	r3, [r2, #80]	; 0x50
 80076a8:	4a61      	ldr	r2, [pc, #388]	; (8007830 <HAL_FDCAN_IRQHandler+0x4b0>)
 80076aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076ac:	0f9b      	lsrs	r3, r3, #30
 80076ae:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80076b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b8:	431a      	orrs	r2, r3
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a5c      	ldr	r2, [pc, #368]	; (8007838 <HAL_FDCAN_IRQHandler+0x4b8>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	f040 80a6 	bne.w	8007818 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	f003 0303 	and.w	r3, r3, #3
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	f000 809e 	beq.w	8007818 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	6a1b      	ldr	r3, [r3, #32]
 80076e2:	f003 030f 	and.w	r3, r3, #15
 80076e6:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076f0:	4013      	ands	r3, r2
 80076f2:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	6a1b      	ldr	r3, [r3, #32]
 80076fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80076fe:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007706:	6a3a      	ldr	r2, [r7, #32]
 8007708:	4013      	ands	r3, r2
 800770a:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	6a1b      	ldr	r3, [r3, #32]
 8007712:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8007716:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771e:	69fa      	ldr	r2, [r7, #28]
 8007720:	4013      	ands	r3, r2
 8007722:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	6a1b      	ldr	r3, [r3, #32]
 800772a:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 800772e:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007736:	69ba      	ldr	r2, [r7, #24]
 8007738:	4013      	ands	r3, r2
 800773a:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	6a1b      	ldr	r3, [r3, #32]
 8007742:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8007746:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	4013      	ands	r3, r2
 8007752:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8007754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007756:	2b00      	cmp	r3, #0
 8007758:	d007      	beq.n	800776a <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007760:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8007762:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 f8e7 	bl	8007938 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800776a:	6a3b      	ldr	r3, [r7, #32]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d007      	beq.n	8007780 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	6a3a      	ldr	r2, [r7, #32]
 8007776:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8007778:	6a39      	ldr	r1, [r7, #32]
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f8e7 	bl	800794e <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800778a:	2b00      	cmp	r3, #0
 800778c:	d01b      	beq.n	80077c6 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	6a1b      	ldr	r3, [r3, #32]
 8007794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007798:	2b00      	cmp	r3, #0
 800779a:	d014      	beq.n	80077c6 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077a2:	0c1b      	lsrs	r3, r3, #16
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077b2:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	2240      	movs	r2, #64	; 0x40
 80077ba:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	6939      	ldr	r1, [r7, #16]
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 f8cf 	bl	8007964 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d007      	beq.n	80077dc <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	69fa      	ldr	r2, [r7, #28]
 80077d2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80077d4:	69f9      	ldr	r1, [r7, #28]
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f8d0 	bl	800797c <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00b      	beq.n	80077fa <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	69ba      	ldr	r2, [r7, #24]
 80077e8:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	431a      	orrs	r2, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00b      	beq.n	8007818 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	697a      	ldr	r2, [r7, #20]
 8007806:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	431a      	orrs	r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800781e:	2b00      	cmp	r3, #0
 8007820:	d002      	beq.n	8007828 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f873 	bl	800790e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8007828:	bf00      	nop
 800782a:	3748      	adds	r7, #72	; 0x48
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}
 8007830:	4000a800 	.word	0x4000a800
 8007834:	3fcfffff 	.word	0x3fcfffff
 8007838:	4000a000 	.word	0x4000a000

0800783c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8007846:	bf00      	nop
 8007848:	370c      	adds	r7, #12
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr

08007852 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8007852:	b480      	push	{r7}
 8007854:	b083      	sub	sp, #12
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
 800785a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800785c:	bf00      	nop
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8007872:	bf00      	nop
 8007874:	370c      	adds	r7, #12
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800787e:	b480      	push	{r7}
 8007880:	b083      	sub	sp, #12
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8007886:	bf00      	nop
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007892:	b480      	push	{r7}
 8007894:	b083      	sub	sp, #12
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
 800789a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800789c:	bf00      	nop
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80078b2:	bf00      	nop
 80078b4:	370c      	adds	r7, #12
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr

080078be <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80078be:	b480      	push	{r7}
 80078c0:	b083      	sub	sp, #12
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80078c6:	bf00      	nop
 80078c8:	370c      	adds	r7, #12
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr

080078d2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80078d2:	b480      	push	{r7}
 80078d4:	b083      	sub	sp, #12
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80078da:	bf00      	nop
 80078dc:	370c      	adds	r7, #12
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr

080078e6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80078e6:	b480      	push	{r7}
 80078e8:	b083      	sub	sp, #12
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80078ee:	bf00      	nop
 80078f0:	370c      	adds	r7, #12
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr

080078fa <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80078fa:	b480      	push	{r7}
 80078fc:	b083      	sub	sp, #12
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8007902:	bf00      	nop
 8007904:	370c      	adds	r7, #12
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr

0800790e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800790e:	b480      	push	{r7}
 8007910:	b083      	sub	sp, #12
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8007916:	bf00      	nop
 8007918:	370c      	adds	r7, #12
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr

08007922 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8007922:	b480      	push	{r7}
 8007924:	b083      	sub	sp, #12
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
 800792a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800792c:	bf00      	nop
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8007942:	bf00      	nop
 8007944:	370c      	adds	r7, #12
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800794e:	b480      	push	{r7}
 8007950:	b083      	sub	sp, #12
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8007958:	bf00      	nop
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8007970:	bf00      	nop
 8007972:	3714      	adds	r7, #20
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8007986:	bf00      	nop
 8007988:	370c      	adds	r7, #12
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
	...

08007994 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079a0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80079aa:	4ba7      	ldr	r3, [pc, #668]	; (8007c48 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80079ac:	4013      	ands	r3, r2
 80079ae:	68ba      	ldr	r2, [r7, #8]
 80079b0:	0091      	lsls	r1, r2, #2
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	6812      	ldr	r2, [r2, #0]
 80079b6:	430b      	orrs	r3, r1
 80079b8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079c4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079cc:	041a      	lsls	r2, r3, #16
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	430a      	orrs	r2, r1
 80079d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079dc:	68ba      	ldr	r2, [r7, #8]
 80079de:	4413      	add	r3, r2
 80079e0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80079ea:	4b97      	ldr	r3, [pc, #604]	; (8007c48 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80079ec:	4013      	ands	r3, r2
 80079ee:	68ba      	ldr	r2, [r7, #8]
 80079f0:	0091      	lsls	r1, r2, #2
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	6812      	ldr	r2, [r2, #0]
 80079f6:	430b      	orrs	r3, r1
 80079f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a04:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a0c:	041a      	lsls	r2, r3, #16
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	430a      	orrs	r2, r1
 8007a14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a1c:	005b      	lsls	r3, r3, #1
 8007a1e:	68ba      	ldr	r2, [r7, #8]
 8007a20:	4413      	add	r3, r2
 8007a22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007a2c:	4b86      	ldr	r3, [pc, #536]	; (8007c48 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a2e:	4013      	ands	r3, r2
 8007a30:	68ba      	ldr	r2, [r7, #8]
 8007a32:	0091      	lsls	r1, r2, #2
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	6812      	ldr	r2, [r2, #0]
 8007a38:	430b      	orrs	r3, r1
 8007a3a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007a46:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4e:	041a      	lsls	r2, r3, #16
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	430a      	orrs	r2, r1
 8007a56:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007a62:	fb02 f303 	mul.w	r3, r2, r3
 8007a66:	68ba      	ldr	r2, [r7, #8]
 8007a68:	4413      	add	r3, r2
 8007a6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007a74:	4b74      	ldr	r3, [pc, #464]	; (8007c48 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a76:	4013      	ands	r3, r2
 8007a78:	68ba      	ldr	r2, [r7, #8]
 8007a7a:	0091      	lsls	r1, r2, #2
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	6812      	ldr	r2, [r2, #0]
 8007a80:	430b      	orrs	r3, r1
 8007a82:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a8e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a96:	041a      	lsls	r2, r3, #16
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	430a      	orrs	r2, r1
 8007a9e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007aaa:	fb02 f303 	mul.w	r3, r2, r3
 8007aae:	68ba      	ldr	r2, [r7, #8]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007abc:	4b62      	ldr	r3, [pc, #392]	; (8007c48 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007abe:	4013      	ands	r3, r2
 8007ac0:	68ba      	ldr	r2, [r7, #8]
 8007ac2:	0091      	lsls	r1, r2, #2
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	6812      	ldr	r2, [r2, #0]
 8007ac8:	430b      	orrs	r3, r1
 8007aca:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007ad6:	fb02 f303 	mul.w	r3, r2, r3
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	4413      	add	r3, r2
 8007ade:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007ae8:	4b57      	ldr	r3, [pc, #348]	; (8007c48 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007aea:	4013      	ands	r3, r2
 8007aec:	68ba      	ldr	r2, [r7, #8]
 8007aee:	0091      	lsls	r1, r2, #2
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	6812      	ldr	r2, [r2, #0]
 8007af4:	430b      	orrs	r3, r1
 8007af6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b02:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b0a:	041a      	lsls	r2, r3, #16
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	430a      	orrs	r2, r1
 8007b12:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b1a:	005b      	lsls	r3, r3, #1
 8007b1c:	68ba      	ldr	r2, [r7, #8]
 8007b1e:	4413      	add	r3, r2
 8007b20:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007b2a:	4b47      	ldr	r3, [pc, #284]	; (8007c48 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	68ba      	ldr	r2, [r7, #8]
 8007b30:	0091      	lsls	r1, r2, #2
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	6812      	ldr	r2, [r2, #0]
 8007b36:	430b      	orrs	r3, r1
 8007b38:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007b44:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b4c:	041a      	lsls	r2, r3, #16
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	430a      	orrs	r2, r1
 8007b54:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007b60:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b68:	061a      	lsls	r2, r3, #24
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	430a      	orrs	r2, r1
 8007b70:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b78:	4b34      	ldr	r3, [pc, #208]	; (8007c4c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007b7a:	4413      	add	r3, r2
 8007b7c:	009a      	lsls	r2, r3, #2
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	441a      	add	r2, r3
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b9a:	00db      	lsls	r3, r3, #3
 8007b9c:	441a      	add	r2, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007baa:	6879      	ldr	r1, [r7, #4]
 8007bac:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007bae:	fb01 f303 	mul.w	r3, r1, r3
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	441a      	add	r2, r3
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bc2:	6879      	ldr	r1, [r7, #4]
 8007bc4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007bc6:	fb01 f303 	mul.w	r3, r1, r3
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	441a      	add	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bda:	6879      	ldr	r1, [r7, #4]
 8007bdc:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007bde:	fb01 f303 	mul.w	r3, r1, r3
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	441a      	add	r2, r3
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bf6:	00db      	lsls	r3, r3, #3
 8007bf8:	441a      	add	r2, r3
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c0a:	6879      	ldr	r1, [r7, #4]
 8007c0c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007c0e:	fb01 f303 	mul.w	r3, r1, r3
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	441a      	add	r2, r3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c26:	6879      	ldr	r1, [r7, #4]
 8007c28:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007c2a:	fb01 f303 	mul.w	r3, r1, r3
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	441a      	add	r2, r3
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c3e:	4a04      	ldr	r2, [pc, #16]	; (8007c50 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d915      	bls.n	8007c70 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007c44:	e006      	b.n	8007c54 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007c46:	bf00      	nop
 8007c48:	ffff0003 	.word	0xffff0003
 8007c4c:	10002b00 	.word	0x10002b00
 8007c50:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c5a:	f043 0220 	orr.w	r2, r3, #32
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2203      	movs	r2, #3
 8007c68:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e010      	b.n	8007c92 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c74:	60fb      	str	r3, [r7, #12]
 8007c76:	e005      	b.n	8007c84 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	3304      	adds	r3, #4
 8007c82:	60fb      	str	r3, [r7, #12]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d3f3      	bcc.n	8007c78 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3714      	adds	r7, #20
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop

08007ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b089      	sub	sp, #36	; 0x24
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007caa:	2300      	movs	r3, #0
 8007cac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007cae:	4b89      	ldr	r3, [pc, #548]	; (8007ed4 <HAL_GPIO_Init+0x234>)
 8007cb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007cb2:	e194      	b.n	8007fde <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	2101      	movs	r1, #1
 8007cba:	69fb      	ldr	r3, [r7, #28]
 8007cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	f000 8186 	beq.w	8007fd8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d00b      	beq.n	8007cec <HAL_GPIO_Init+0x4c>
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	d007      	beq.n	8007cec <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007ce0:	2b11      	cmp	r3, #17
 8007ce2:	d003      	beq.n	8007cec <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	2b12      	cmp	r3, #18
 8007cea:	d130      	bne.n	8007d4e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007cf2:	69fb      	ldr	r3, [r7, #28]
 8007cf4:	005b      	lsls	r3, r3, #1
 8007cf6:	2203      	movs	r2, #3
 8007cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8007cfc:	43db      	mvns	r3, r3
 8007cfe:	69ba      	ldr	r2, [r7, #24]
 8007d00:	4013      	ands	r3, r2
 8007d02:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	68da      	ldr	r2, [r3, #12]
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	005b      	lsls	r3, r3, #1
 8007d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d10:	69ba      	ldr	r2, [r7, #24]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	69ba      	ldr	r2, [r7, #24]
 8007d1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007d22:	2201      	movs	r2, #1
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	fa02 f303 	lsl.w	r3, r2, r3
 8007d2a:	43db      	mvns	r3, r3
 8007d2c:	69ba      	ldr	r2, [r7, #24]
 8007d2e:	4013      	ands	r3, r2
 8007d30:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	091b      	lsrs	r3, r3, #4
 8007d38:	f003 0201 	and.w	r2, r3, #1
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d42:	69ba      	ldr	r2, [r7, #24]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	69ba      	ldr	r2, [r7, #24]
 8007d4c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	005b      	lsls	r3, r3, #1
 8007d58:	2203      	movs	r2, #3
 8007d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d5e:	43db      	mvns	r3, r3
 8007d60:	69ba      	ldr	r2, [r7, #24]
 8007d62:	4013      	ands	r3, r2
 8007d64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	689a      	ldr	r2, [r3, #8]
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	005b      	lsls	r3, r3, #1
 8007d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d72:	69ba      	ldr	r2, [r7, #24]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	69ba      	ldr	r2, [r7, #24]
 8007d7c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	2b02      	cmp	r3, #2
 8007d84:	d003      	beq.n	8007d8e <HAL_GPIO_Init+0xee>
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	2b12      	cmp	r3, #18
 8007d8c:	d123      	bne.n	8007dd6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	08da      	lsrs	r2, r3, #3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	3208      	adds	r2, #8
 8007d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	f003 0307 	and.w	r3, r3, #7
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	220f      	movs	r2, #15
 8007da6:	fa02 f303 	lsl.w	r3, r2, r3
 8007daa:	43db      	mvns	r3, r3
 8007dac:	69ba      	ldr	r2, [r7, #24]
 8007dae:	4013      	ands	r3, r2
 8007db0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	691a      	ldr	r2, [r3, #16]
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	f003 0307 	and.w	r3, r3, #7
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc2:	69ba      	ldr	r2, [r7, #24]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	08da      	lsrs	r2, r3, #3
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	3208      	adds	r2, #8
 8007dd0:	69b9      	ldr	r1, [r7, #24]
 8007dd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	005b      	lsls	r3, r3, #1
 8007de0:	2203      	movs	r2, #3
 8007de2:	fa02 f303 	lsl.w	r3, r2, r3
 8007de6:	43db      	mvns	r3, r3
 8007de8:	69ba      	ldr	r2, [r7, #24]
 8007dea:	4013      	ands	r3, r2
 8007dec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	f003 0203 	and.w	r2, r3, #3
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	005b      	lsls	r3, r3, #1
 8007dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8007dfe:	69ba      	ldr	r2, [r7, #24]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	69ba      	ldr	r2, [r7, #24]
 8007e08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f000 80e0 	beq.w	8007fd8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e18:	4b2f      	ldr	r3, [pc, #188]	; (8007ed8 <HAL_GPIO_Init+0x238>)
 8007e1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e1e:	4a2e      	ldr	r2, [pc, #184]	; (8007ed8 <HAL_GPIO_Init+0x238>)
 8007e20:	f043 0302 	orr.w	r3, r3, #2
 8007e24:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007e28:	4b2b      	ldr	r3, [pc, #172]	; (8007ed8 <HAL_GPIO_Init+0x238>)
 8007e2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e2e:	f003 0302 	and.w	r3, r3, #2
 8007e32:	60fb      	str	r3, [r7, #12]
 8007e34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007e36:	4a29      	ldr	r2, [pc, #164]	; (8007edc <HAL_GPIO_Init+0x23c>)
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	089b      	lsrs	r3, r3, #2
 8007e3c:	3302      	adds	r3, #2
 8007e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007e44:	69fb      	ldr	r3, [r7, #28]
 8007e46:	f003 0303 	and.w	r3, r3, #3
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	220f      	movs	r2, #15
 8007e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e52:	43db      	mvns	r3, r3
 8007e54:	69ba      	ldr	r2, [r7, #24]
 8007e56:	4013      	ands	r3, r2
 8007e58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a20      	ldr	r2, [pc, #128]	; (8007ee0 <HAL_GPIO_Init+0x240>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d052      	beq.n	8007f08 <HAL_GPIO_Init+0x268>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a1f      	ldr	r2, [pc, #124]	; (8007ee4 <HAL_GPIO_Init+0x244>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d031      	beq.n	8007ece <HAL_GPIO_Init+0x22e>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a1e      	ldr	r2, [pc, #120]	; (8007ee8 <HAL_GPIO_Init+0x248>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d02b      	beq.n	8007eca <HAL_GPIO_Init+0x22a>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a1d      	ldr	r2, [pc, #116]	; (8007eec <HAL_GPIO_Init+0x24c>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d025      	beq.n	8007ec6 <HAL_GPIO_Init+0x226>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a1c      	ldr	r2, [pc, #112]	; (8007ef0 <HAL_GPIO_Init+0x250>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d01f      	beq.n	8007ec2 <HAL_GPIO_Init+0x222>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a1b      	ldr	r2, [pc, #108]	; (8007ef4 <HAL_GPIO_Init+0x254>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d019      	beq.n	8007ebe <HAL_GPIO_Init+0x21e>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a1a      	ldr	r2, [pc, #104]	; (8007ef8 <HAL_GPIO_Init+0x258>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d013      	beq.n	8007eba <HAL_GPIO_Init+0x21a>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a19      	ldr	r2, [pc, #100]	; (8007efc <HAL_GPIO_Init+0x25c>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d00d      	beq.n	8007eb6 <HAL_GPIO_Init+0x216>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a18      	ldr	r2, [pc, #96]	; (8007f00 <HAL_GPIO_Init+0x260>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d007      	beq.n	8007eb2 <HAL_GPIO_Init+0x212>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a17      	ldr	r2, [pc, #92]	; (8007f04 <HAL_GPIO_Init+0x264>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d101      	bne.n	8007eae <HAL_GPIO_Init+0x20e>
 8007eaa:	2309      	movs	r3, #9
 8007eac:	e02d      	b.n	8007f0a <HAL_GPIO_Init+0x26a>
 8007eae:	230a      	movs	r3, #10
 8007eb0:	e02b      	b.n	8007f0a <HAL_GPIO_Init+0x26a>
 8007eb2:	2308      	movs	r3, #8
 8007eb4:	e029      	b.n	8007f0a <HAL_GPIO_Init+0x26a>
 8007eb6:	2307      	movs	r3, #7
 8007eb8:	e027      	b.n	8007f0a <HAL_GPIO_Init+0x26a>
 8007eba:	2306      	movs	r3, #6
 8007ebc:	e025      	b.n	8007f0a <HAL_GPIO_Init+0x26a>
 8007ebe:	2305      	movs	r3, #5
 8007ec0:	e023      	b.n	8007f0a <HAL_GPIO_Init+0x26a>
 8007ec2:	2304      	movs	r3, #4
 8007ec4:	e021      	b.n	8007f0a <HAL_GPIO_Init+0x26a>
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	e01f      	b.n	8007f0a <HAL_GPIO_Init+0x26a>
 8007eca:	2302      	movs	r3, #2
 8007ecc:	e01d      	b.n	8007f0a <HAL_GPIO_Init+0x26a>
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e01b      	b.n	8007f0a <HAL_GPIO_Init+0x26a>
 8007ed2:	bf00      	nop
 8007ed4:	58000080 	.word	0x58000080
 8007ed8:	58024400 	.word	0x58024400
 8007edc:	58000400 	.word	0x58000400
 8007ee0:	58020000 	.word	0x58020000
 8007ee4:	58020400 	.word	0x58020400
 8007ee8:	58020800 	.word	0x58020800
 8007eec:	58020c00 	.word	0x58020c00
 8007ef0:	58021000 	.word	0x58021000
 8007ef4:	58021400 	.word	0x58021400
 8007ef8:	58021800 	.word	0x58021800
 8007efc:	58021c00 	.word	0x58021c00
 8007f00:	58022000 	.word	0x58022000
 8007f04:	58022400 	.word	0x58022400
 8007f08:	2300      	movs	r3, #0
 8007f0a:	69fa      	ldr	r2, [r7, #28]
 8007f0c:	f002 0203 	and.w	r2, r2, #3
 8007f10:	0092      	lsls	r2, r2, #2
 8007f12:	4093      	lsls	r3, r2
 8007f14:	69ba      	ldr	r2, [r7, #24]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007f1a:	4938      	ldr	r1, [pc, #224]	; (8007ffc <HAL_GPIO_Init+0x35c>)
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	089b      	lsrs	r3, r3, #2
 8007f20:	3302      	adds	r3, #2
 8007f22:	69ba      	ldr	r2, [r7, #24]
 8007f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	43db      	mvns	r3, r3
 8007f32:	69ba      	ldr	r2, [r7, #24]
 8007f34:	4013      	ands	r3, r2
 8007f36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d003      	beq.n	8007f4c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007f44:	69ba      	ldr	r2, [r7, #24]
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	69ba      	ldr	r2, [r7, #24]
 8007f50:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	43db      	mvns	r3, r3
 8007f5c:	69ba      	ldr	r2, [r7, #24]
 8007f5e:	4013      	ands	r3, r2
 8007f60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d003      	beq.n	8007f76 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007f6e:	69ba      	ldr	r2, [r7, #24]
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	69ba      	ldr	r2, [r7, #24]
 8007f7a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	43db      	mvns	r3, r3
 8007f88:	69ba      	ldr	r2, [r7, #24]
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d003      	beq.n	8007fa2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8007f9a:	69ba      	ldr	r2, [r7, #24]
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007fa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	43db      	mvns	r3, r3
 8007fb6:	69ba      	ldr	r2, [r7, #24]
 8007fb8:	4013      	ands	r3, r2
 8007fba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d003      	beq.n	8007fd0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8007fc8:	69ba      	ldr	r2, [r7, #24]
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007fd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	3301      	adds	r3, #1
 8007fdc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f47f ae63 	bne.w	8007cb4 <HAL_GPIO_Init+0x14>
  }
}
 8007fee:	bf00      	nop
 8007ff0:	3724      	adds	r7, #36	; 0x24
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
 8007ffa:	bf00      	nop
 8007ffc:	58000400 	.word	0x58000400

08008000 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008000:	b480      	push	{r7}
 8008002:	b085      	sub	sp, #20
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	460b      	mov	r3, r1
 800800a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	691a      	ldr	r2, [r3, #16]
 8008010:	887b      	ldrh	r3, [r7, #2]
 8008012:	4013      	ands	r3, r2
 8008014:	2b00      	cmp	r3, #0
 8008016:	d002      	beq.n	800801e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008018:	2301      	movs	r3, #1
 800801a:	73fb      	strb	r3, [r7, #15]
 800801c:	e001      	b.n	8008022 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800801e:	2300      	movs	r3, #0
 8008020:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008022:	7bfb      	ldrb	r3, [r7, #15]
}
 8008024:	4618      	mov	r0, r3
 8008026:	3714      	adds	r7, #20
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	460b      	mov	r3, r1
 800803a:	807b      	strh	r3, [r7, #2]
 800803c:	4613      	mov	r3, r2
 800803e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008040:	787b      	ldrb	r3, [r7, #1]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d003      	beq.n	800804e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008046:	887a      	ldrh	r2, [r7, #2]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800804c:	e003      	b.n	8008056 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800804e:	887b      	ldrh	r3, [r7, #2]
 8008050:	041a      	lsls	r2, r3, #16
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	619a      	str	r2, [r3, #24]
}
 8008056:	bf00      	nop
 8008058:	370c      	adds	r7, #12
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr

08008062 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008062:	b480      	push	{r7}
 8008064:	b083      	sub	sp, #12
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	460b      	mov	r3, r1
 800806c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	695a      	ldr	r2, [r3, #20]
 8008072:	887b      	ldrh	r3, [r7, #2]
 8008074:	401a      	ands	r2, r3
 8008076:	887b      	ldrh	r3, [r7, #2]
 8008078:	429a      	cmp	r2, r3
 800807a:	d104      	bne.n	8008086 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800807c:	887b      	ldrh	r3, [r7, #2]
 800807e:	041a      	lsls	r2, r3, #16
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8008084:	e002      	b.n	800808c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8008086:	887a      	ldrh	r2, [r7, #2]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	619a      	str	r2, [r3, #24]
}
 800808c:	bf00      	nop
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	4603      	mov	r3, r0
 80080a0:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80080a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80080aa:	88fb      	ldrh	r3, [r7, #6]
 80080ac:	4013      	ands	r3, r2
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d008      	beq.n	80080c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80080b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080b6:	88fb      	ldrh	r3, [r7, #6]
 80080b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80080bc:	88fb      	ldrh	r3, [r7, #6]
 80080be:	4618      	mov	r0, r3
 80080c0:	f7fb fd8c 	bl	8003bdc <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80080c4:	bf00      	nop
 80080c6:	3708      	adds	r7, #8
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b085      	sub	sp, #20
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80080d4:	4b0d      	ldr	r3, [pc, #52]	; (800810c <HAL_I2CEx_EnableFastModePlus+0x40>)
 80080d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80080da:	4a0c      	ldr	r2, [pc, #48]	; (800810c <HAL_I2CEx_EnableFastModePlus+0x40>)
 80080dc:	f043 0302 	orr.w	r3, r3, #2
 80080e0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80080e4:	4b09      	ldr	r3, [pc, #36]	; (800810c <HAL_I2CEx_EnableFastModePlus+0x40>)
 80080e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80080ea:	f003 0302 	and.w	r3, r3, #2
 80080ee:	60fb      	str	r3, [r7, #12]
 80080f0:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 80080f2:	4b07      	ldr	r3, [pc, #28]	; (8008110 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80080f4:	685a      	ldr	r2, [r3, #4]
 80080f6:	4906      	ldr	r1, [pc, #24]	; (8008110 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	604b      	str	r3, [r1, #4]
}
 80080fe:	bf00      	nop
 8008100:	3714      	adds	r7, #20
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	58024400 	.word	0x58024400
 8008110:	58000400 	.word	0x58000400

08008114 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008116:	b08f      	sub	sp, #60	; 0x3c
 8008118:	af0a      	add	r7, sp, #40	; 0x28
 800811a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d101      	bne.n	8008126 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e116      	b.n	8008354 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8008132:	b2db      	uxtb	r3, r3
 8008134:	2b00      	cmp	r3, #0
 8008136:	d106      	bne.n	8008146 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f010 fe4d 	bl	8018de0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2203      	movs	r2, #3
 800814a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008156:	2b00      	cmp	r3, #0
 8008158:	d102      	bne.n	8008160 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4618      	mov	r0, r3
 8008166:	f009 fe52 	bl	8011e0e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	603b      	str	r3, [r7, #0]
 8008170:	687e      	ldr	r6, [r7, #4]
 8008172:	466d      	mov	r5, sp
 8008174:	f106 0410 	add.w	r4, r6, #16
 8008178:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800817a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800817c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800817e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008180:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008184:	e885 0003 	stmia.w	r5, {r0, r1}
 8008188:	1d33      	adds	r3, r6, #4
 800818a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800818c:	6838      	ldr	r0, [r7, #0]
 800818e:	f009 fd29 	bl	8011be4 <USB_CoreInit>
 8008192:	4603      	mov	r3, r0
 8008194:	2b00      	cmp	r3, #0
 8008196:	d005      	beq.n	80081a4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2202      	movs	r2, #2
 800819c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	e0d7      	b.n	8008354 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2100      	movs	r1, #0
 80081aa:	4618      	mov	r0, r3
 80081ac:	f009 fe40 	bl	8011e30 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80081b0:	2300      	movs	r3, #0
 80081b2:	73fb      	strb	r3, [r7, #15]
 80081b4:	e04a      	b.n	800824c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80081b6:	7bfa      	ldrb	r2, [r7, #15]
 80081b8:	6879      	ldr	r1, [r7, #4]
 80081ba:	4613      	mov	r3, r2
 80081bc:	00db      	lsls	r3, r3, #3
 80081be:	1a9b      	subs	r3, r3, r2
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	440b      	add	r3, r1
 80081c4:	333d      	adds	r3, #61	; 0x3d
 80081c6:	2201      	movs	r2, #1
 80081c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80081ca:	7bfa      	ldrb	r2, [r7, #15]
 80081cc:	6879      	ldr	r1, [r7, #4]
 80081ce:	4613      	mov	r3, r2
 80081d0:	00db      	lsls	r3, r3, #3
 80081d2:	1a9b      	subs	r3, r3, r2
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	440b      	add	r3, r1
 80081d8:	333c      	adds	r3, #60	; 0x3c
 80081da:	7bfa      	ldrb	r2, [r7, #15]
 80081dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80081de:	7bfa      	ldrb	r2, [r7, #15]
 80081e0:	7bfb      	ldrb	r3, [r7, #15]
 80081e2:	b298      	uxth	r0, r3
 80081e4:	6879      	ldr	r1, [r7, #4]
 80081e6:	4613      	mov	r3, r2
 80081e8:	00db      	lsls	r3, r3, #3
 80081ea:	1a9b      	subs	r3, r3, r2
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	440b      	add	r3, r1
 80081f0:	3342      	adds	r3, #66	; 0x42
 80081f2:	4602      	mov	r2, r0
 80081f4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80081f6:	7bfa      	ldrb	r2, [r7, #15]
 80081f8:	6879      	ldr	r1, [r7, #4]
 80081fa:	4613      	mov	r3, r2
 80081fc:	00db      	lsls	r3, r3, #3
 80081fe:	1a9b      	subs	r3, r3, r2
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	440b      	add	r3, r1
 8008204:	333f      	adds	r3, #63	; 0x3f
 8008206:	2200      	movs	r2, #0
 8008208:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800820a:	7bfa      	ldrb	r2, [r7, #15]
 800820c:	6879      	ldr	r1, [r7, #4]
 800820e:	4613      	mov	r3, r2
 8008210:	00db      	lsls	r3, r3, #3
 8008212:	1a9b      	subs	r3, r3, r2
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	440b      	add	r3, r1
 8008218:	3344      	adds	r3, #68	; 0x44
 800821a:	2200      	movs	r2, #0
 800821c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800821e:	7bfa      	ldrb	r2, [r7, #15]
 8008220:	6879      	ldr	r1, [r7, #4]
 8008222:	4613      	mov	r3, r2
 8008224:	00db      	lsls	r3, r3, #3
 8008226:	1a9b      	subs	r3, r3, r2
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	440b      	add	r3, r1
 800822c:	3348      	adds	r3, #72	; 0x48
 800822e:	2200      	movs	r2, #0
 8008230:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008232:	7bfa      	ldrb	r2, [r7, #15]
 8008234:	6879      	ldr	r1, [r7, #4]
 8008236:	4613      	mov	r3, r2
 8008238:	00db      	lsls	r3, r3, #3
 800823a:	1a9b      	subs	r3, r3, r2
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	440b      	add	r3, r1
 8008240:	3350      	adds	r3, #80	; 0x50
 8008242:	2200      	movs	r2, #0
 8008244:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008246:	7bfb      	ldrb	r3, [r7, #15]
 8008248:	3301      	adds	r3, #1
 800824a:	73fb      	strb	r3, [r7, #15]
 800824c:	7bfa      	ldrb	r2, [r7, #15]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	429a      	cmp	r2, r3
 8008254:	d3af      	bcc.n	80081b6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008256:	2300      	movs	r3, #0
 8008258:	73fb      	strb	r3, [r7, #15]
 800825a:	e044      	b.n	80082e6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800825c:	7bfa      	ldrb	r2, [r7, #15]
 800825e:	6879      	ldr	r1, [r7, #4]
 8008260:	4613      	mov	r3, r2
 8008262:	00db      	lsls	r3, r3, #3
 8008264:	1a9b      	subs	r3, r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	440b      	add	r3, r1
 800826a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800826e:	2200      	movs	r2, #0
 8008270:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008272:	7bfa      	ldrb	r2, [r7, #15]
 8008274:	6879      	ldr	r1, [r7, #4]
 8008276:	4613      	mov	r3, r2
 8008278:	00db      	lsls	r3, r3, #3
 800827a:	1a9b      	subs	r3, r3, r2
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	440b      	add	r3, r1
 8008280:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8008284:	7bfa      	ldrb	r2, [r7, #15]
 8008286:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008288:	7bfa      	ldrb	r2, [r7, #15]
 800828a:	6879      	ldr	r1, [r7, #4]
 800828c:	4613      	mov	r3, r2
 800828e:	00db      	lsls	r3, r3, #3
 8008290:	1a9b      	subs	r3, r3, r2
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	440b      	add	r3, r1
 8008296:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800829a:	2200      	movs	r2, #0
 800829c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800829e:	7bfa      	ldrb	r2, [r7, #15]
 80082a0:	6879      	ldr	r1, [r7, #4]
 80082a2:	4613      	mov	r3, r2
 80082a4:	00db      	lsls	r3, r3, #3
 80082a6:	1a9b      	subs	r3, r3, r2
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	440b      	add	r3, r1
 80082ac:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80082b0:	2200      	movs	r2, #0
 80082b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80082b4:	7bfa      	ldrb	r2, [r7, #15]
 80082b6:	6879      	ldr	r1, [r7, #4]
 80082b8:	4613      	mov	r3, r2
 80082ba:	00db      	lsls	r3, r3, #3
 80082bc:	1a9b      	subs	r3, r3, r2
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	440b      	add	r3, r1
 80082c2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80082c6:	2200      	movs	r2, #0
 80082c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80082ca:	7bfa      	ldrb	r2, [r7, #15]
 80082cc:	6879      	ldr	r1, [r7, #4]
 80082ce:	4613      	mov	r3, r2
 80082d0:	00db      	lsls	r3, r3, #3
 80082d2:	1a9b      	subs	r3, r3, r2
 80082d4:	009b      	lsls	r3, r3, #2
 80082d6:	440b      	add	r3, r1
 80082d8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80082dc:	2200      	movs	r2, #0
 80082de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80082e0:	7bfb      	ldrb	r3, [r7, #15]
 80082e2:	3301      	adds	r3, #1
 80082e4:	73fb      	strb	r3, [r7, #15]
 80082e6:	7bfa      	ldrb	r2, [r7, #15]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d3b5      	bcc.n	800825c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	603b      	str	r3, [r7, #0]
 80082f6:	687e      	ldr	r6, [r7, #4]
 80082f8:	466d      	mov	r5, sp
 80082fa:	f106 0410 	add.w	r4, r6, #16
 80082fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008300:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008302:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008304:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008306:	e894 0003 	ldmia.w	r4, {r0, r1}
 800830a:	e885 0003 	stmia.w	r5, {r0, r1}
 800830e:	1d33      	adds	r3, r6, #4
 8008310:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008312:	6838      	ldr	r0, [r7, #0]
 8008314:	f009 fdb6 	bl	8011e84 <USB_DevInit>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d005      	beq.n	800832a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2202      	movs	r2, #2
 8008322:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008326:	2301      	movs	r3, #1
 8008328:	e014      	b.n	8008354 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2201      	movs	r2, #1
 8008336:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833e:	2b01      	cmp	r3, #1
 8008340:	d102      	bne.n	8008348 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f001 f8be 	bl	80094c4 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4618      	mov	r0, r3
 800834e:	f00a fdf5 	bl	8012f3c <USB_DevDisconnect>

  return HAL_OK;
 8008352:	2300      	movs	r3, #0
}
 8008354:	4618      	mov	r0, r3
 8008356:	3714      	adds	r7, #20
 8008358:	46bd      	mov	sp, r7
 800835a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800835c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008370:	2b01      	cmp	r3, #1
 8008372:	d101      	bne.n	8008378 <HAL_PCD_Start+0x1c>
 8008374:	2302      	movs	r3, #2
 8008376:	e020      	b.n	80083ba <HAL_PCD_Start+0x5e>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008384:	2b01      	cmp	r3, #1
 8008386:	d109      	bne.n	800839c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800838c:	2b01      	cmp	r3, #1
 800838e:	d005      	beq.n	800839c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008394:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4618      	mov	r0, r3
 80083a2:	f00a fdb3 	bl	8012f0c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4618      	mov	r0, r3
 80083ac:	f009 fd1e 	bl	8011dec <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3710      	adds	r7, #16
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80083c2:	b590      	push	{r4, r7, lr}
 80083c4:	b08d      	sub	sp, #52	; 0x34
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083d0:	6a3b      	ldr	r3, [r7, #32]
 80083d2:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4618      	mov	r0, r3
 80083da:	f00a fe5a 	bl	8013092 <USB_GetMode>
 80083de:	4603      	mov	r3, r0
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f040 83ca 	bne.w	8008b7a <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4618      	mov	r0, r3
 80083ec:	f00a fdbe 	bl	8012f6c <USB_ReadInterrupts>
 80083f0:	4603      	mov	r3, r0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f000 83c0 	beq.w	8008b78 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4618      	mov	r0, r3
 80083fe:	f00a fdb5 	bl	8012f6c <USB_ReadInterrupts>
 8008402:	4603      	mov	r3, r0
 8008404:	f003 0302 	and.w	r3, r3, #2
 8008408:	2b02      	cmp	r3, #2
 800840a:	d107      	bne.n	800841c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	695a      	ldr	r2, [r3, #20]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f002 0202 	and.w	r2, r2, #2
 800841a:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4618      	mov	r0, r3
 8008422:	f00a fda3 	bl	8012f6c <USB_ReadInterrupts>
 8008426:	4603      	mov	r3, r0
 8008428:	f003 0310 	and.w	r3, r3, #16
 800842c:	2b10      	cmp	r3, #16
 800842e:	d161      	bne.n	80084f4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	699a      	ldr	r2, [r3, #24]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f022 0210 	bic.w	r2, r2, #16
 800843e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8008440:	6a3b      	ldr	r3, [r7, #32]
 8008442:	6a1b      	ldr	r3, [r3, #32]
 8008444:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	f003 020f 	and.w	r2, r3, #15
 800844c:	4613      	mov	r3, r2
 800844e:	00db      	lsls	r3, r3, #3
 8008450:	1a9b      	subs	r3, r3, r2
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	4413      	add	r3, r2
 800845c:	3304      	adds	r3, #4
 800845e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	0c5b      	lsrs	r3, r3, #17
 8008464:	f003 030f 	and.w	r3, r3, #15
 8008468:	2b02      	cmp	r3, #2
 800846a:	d124      	bne.n	80084b6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800846c:	69ba      	ldr	r2, [r7, #24]
 800846e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008472:	4013      	ands	r3, r2
 8008474:	2b00      	cmp	r3, #0
 8008476:	d035      	beq.n	80084e4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	091b      	lsrs	r3, r3, #4
 8008480:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008482:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008486:	b29b      	uxth	r3, r3
 8008488:	461a      	mov	r2, r3
 800848a:	6a38      	ldr	r0, [r7, #32]
 800848c:	f00a fc1b 	bl	8012cc6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	68da      	ldr	r2, [r3, #12]
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	091b      	lsrs	r3, r3, #4
 8008498:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800849c:	441a      	add	r2, r3
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	699a      	ldr	r2, [r3, #24]
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	091b      	lsrs	r3, r3, #4
 80084aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80084ae:	441a      	add	r2, r3
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	619a      	str	r2, [r3, #24]
 80084b4:	e016      	b.n	80084e4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	0c5b      	lsrs	r3, r3, #17
 80084ba:	f003 030f 	and.w	r3, r3, #15
 80084be:	2b06      	cmp	r3, #6
 80084c0:	d110      	bne.n	80084e4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80084c8:	2208      	movs	r2, #8
 80084ca:	4619      	mov	r1, r3
 80084cc:	6a38      	ldr	r0, [r7, #32]
 80084ce:	f00a fbfa 	bl	8012cc6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	699a      	ldr	r2, [r3, #24]
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	091b      	lsrs	r3, r3, #4
 80084da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80084de:	441a      	add	r2, r3
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	699a      	ldr	r2, [r3, #24]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f042 0210 	orr.w	r2, r2, #16
 80084f2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4618      	mov	r0, r3
 80084fa:	f00a fd37 	bl	8012f6c <USB_ReadInterrupts>
 80084fe:	4603      	mov	r3, r0
 8008500:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008504:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008508:	d16e      	bne.n	80085e8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800850a:	2300      	movs	r3, #0
 800850c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4618      	mov	r0, r3
 8008514:	f00a fd3d 	bl	8012f92 <USB_ReadDevAllOutEpInterrupt>
 8008518:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800851a:	e062      	b.n	80085e2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800851c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851e:	f003 0301 	and.w	r3, r3, #1
 8008522:	2b00      	cmp	r3, #0
 8008524:	d057      	beq.n	80085d6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800852c:	b2d2      	uxtb	r2, r2
 800852e:	4611      	mov	r1, r2
 8008530:	4618      	mov	r0, r3
 8008532:	f00a fd62 	bl	8012ffa <USB_ReadDevOutEPInterrupt>
 8008536:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	f003 0301 	and.w	r3, r3, #1
 800853e:	2b00      	cmp	r3, #0
 8008540:	d00c      	beq.n	800855c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008544:	015a      	lsls	r2, r3, #5
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	4413      	add	r3, r2
 800854a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800854e:	461a      	mov	r2, r3
 8008550:	2301      	movs	r3, #1
 8008552:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008554:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 fe0a 	bl	8009170 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	f003 0308 	and.w	r3, r3, #8
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00c      	beq.n	8008580 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008568:	015a      	lsls	r2, r3, #5
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	4413      	add	r3, r2
 800856e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008572:	461a      	mov	r2, r3
 8008574:	2308      	movs	r3, #8
 8008576:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008578:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f000 ff04 	bl	8009388 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	f003 0310 	and.w	r3, r3, #16
 8008586:	2b00      	cmp	r3, #0
 8008588:	d008      	beq.n	800859c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800858a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858c:	015a      	lsls	r2, r3, #5
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	4413      	add	r3, r2
 8008592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008596:	461a      	mov	r2, r3
 8008598:	2310      	movs	r3, #16
 800859a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	f003 0320 	and.w	r3, r3, #32
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d008      	beq.n	80085b8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80085a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a8:	015a      	lsls	r2, r3, #5
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	4413      	add	r3, r2
 80085ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085b2:	461a      	mov	r2, r3
 80085b4:	2320      	movs	r3, #32
 80085b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d009      	beq.n	80085d6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80085c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c4:	015a      	lsls	r2, r3, #5
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	4413      	add	r3, r2
 80085ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ce:	461a      	mov	r2, r3
 80085d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80085d4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80085d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d8:	3301      	adds	r3, #1
 80085da:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80085dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085de:	085b      	lsrs	r3, r3, #1
 80085e0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80085e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d199      	bne.n	800851c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4618      	mov	r0, r3
 80085ee:	f00a fcbd 	bl	8012f6c <USB_ReadInterrupts>
 80085f2:	4603      	mov	r3, r0
 80085f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80085fc:	f040 80c0 	bne.w	8008780 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4618      	mov	r0, r3
 8008606:	f00a fcde 	bl	8012fc6 <USB_ReadDevAllInEpInterrupt>
 800860a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800860c:	2300      	movs	r3, #0
 800860e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008610:	e0b2      	b.n	8008778 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008614:	f003 0301 	and.w	r3, r3, #1
 8008618:	2b00      	cmp	r3, #0
 800861a:	f000 80a7 	beq.w	800876c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008624:	b2d2      	uxtb	r2, r2
 8008626:	4611      	mov	r1, r2
 8008628:	4618      	mov	r0, r3
 800862a:	f00a fd04 	bl	8013036 <USB_ReadDevInEPInterrupt>
 800862e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	f003 0301 	and.w	r3, r3, #1
 8008636:	2b00      	cmp	r3, #0
 8008638:	d057      	beq.n	80086ea <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800863a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863c:	f003 030f 	and.w	r3, r3, #15
 8008640:	2201      	movs	r2, #1
 8008642:	fa02 f303 	lsl.w	r3, r2, r3
 8008646:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800864e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	43db      	mvns	r3, r3
 8008654:	69f9      	ldr	r1, [r7, #28]
 8008656:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800865a:	4013      	ands	r3, r2
 800865c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800865e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008660:	015a      	lsls	r2, r3, #5
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	4413      	add	r3, r2
 8008666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800866a:	461a      	mov	r2, r3
 800866c:	2301      	movs	r3, #1
 800866e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	691b      	ldr	r3, [r3, #16]
 8008674:	2b01      	cmp	r3, #1
 8008676:	d132      	bne.n	80086de <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008678:	6879      	ldr	r1, [r7, #4]
 800867a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800867c:	4613      	mov	r3, r2
 800867e:	00db      	lsls	r3, r3, #3
 8008680:	1a9b      	subs	r3, r3, r2
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	440b      	add	r3, r1
 8008686:	3348      	adds	r3, #72	; 0x48
 8008688:	6819      	ldr	r1, [r3, #0]
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800868e:	4613      	mov	r3, r2
 8008690:	00db      	lsls	r3, r3, #3
 8008692:	1a9b      	subs	r3, r3, r2
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	4403      	add	r3, r0
 8008698:	3344      	adds	r3, #68	; 0x44
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4419      	add	r1, r3
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086a2:	4613      	mov	r3, r2
 80086a4:	00db      	lsls	r3, r3, #3
 80086a6:	1a9b      	subs	r3, r3, r2
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	4403      	add	r3, r0
 80086ac:	3348      	adds	r3, #72	; 0x48
 80086ae:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80086b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d113      	bne.n	80086de <HAL_PCD_IRQHandler+0x31c>
 80086b6:	6879      	ldr	r1, [r7, #4]
 80086b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086ba:	4613      	mov	r3, r2
 80086bc:	00db      	lsls	r3, r3, #3
 80086be:	1a9b      	subs	r3, r3, r2
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	440b      	add	r3, r1
 80086c4:	3350      	adds	r3, #80	; 0x50
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d108      	bne.n	80086de <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6818      	ldr	r0, [r3, #0]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80086d6:	461a      	mov	r2, r3
 80086d8:	2101      	movs	r1, #1
 80086da:	f00a fd0d 	bl	80130f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80086de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	4619      	mov	r1, r3
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f010 fbfa 	bl	8018ede <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	f003 0308 	and.w	r3, r3, #8
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d008      	beq.n	8008706 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80086f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f6:	015a      	lsls	r2, r3, #5
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	4413      	add	r3, r2
 80086fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008700:	461a      	mov	r2, r3
 8008702:	2308      	movs	r3, #8
 8008704:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	f003 0310 	and.w	r3, r3, #16
 800870c:	2b00      	cmp	r3, #0
 800870e:	d008      	beq.n	8008722 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008712:	015a      	lsls	r2, r3, #5
 8008714:	69fb      	ldr	r3, [r7, #28]
 8008716:	4413      	add	r3, r2
 8008718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800871c:	461a      	mov	r2, r3
 800871e:	2310      	movs	r3, #16
 8008720:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008728:	2b00      	cmp	r3, #0
 800872a:	d008      	beq.n	800873e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800872c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872e:	015a      	lsls	r2, r3, #5
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	4413      	add	r3, r2
 8008734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008738:	461a      	mov	r2, r3
 800873a:	2340      	movs	r3, #64	; 0x40
 800873c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	f003 0302 	and.w	r3, r3, #2
 8008744:	2b00      	cmp	r3, #0
 8008746:	d008      	beq.n	800875a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874a:	015a      	lsls	r2, r3, #5
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	4413      	add	r3, r2
 8008750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008754:	461a      	mov	r2, r3
 8008756:	2302      	movs	r3, #2
 8008758:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008760:	2b00      	cmp	r3, #0
 8008762:	d003      	beq.n	800876c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008764:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 fc75 	bl	8009056 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800876c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876e:	3301      	adds	r3, #1
 8008770:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008774:	085b      	lsrs	r3, r3, #1
 8008776:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877a:	2b00      	cmp	r3, #0
 800877c:	f47f af49 	bne.w	8008612 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4618      	mov	r0, r3
 8008786:	f00a fbf1 	bl	8012f6c <USB_ReadInterrupts>
 800878a:	4603      	mov	r3, r0
 800878c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008790:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008794:	d122      	bne.n	80087dc <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008796:	69fb      	ldr	r3, [r7, #28]
 8008798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	69fa      	ldr	r2, [r7, #28]
 80087a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087a4:	f023 0301 	bic.w	r3, r3, #1
 80087a8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d108      	bne.n	80087c6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80087bc:	2100      	movs	r1, #0
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 fea4 	bl	800950c <HAL_PCDEx_LPM_Callback>
 80087c4:	e002      	b.n	80087cc <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f010 fc00 	bl	8018fcc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	695a      	ldr	r2, [r3, #20]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80087da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4618      	mov	r0, r3
 80087e2:	f00a fbc3 	bl	8012f6c <USB_ReadInterrupts>
 80087e6:	4603      	mov	r3, r0
 80087e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087f0:	d112      	bne.n	8008818 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	f003 0301 	and.w	r3, r3, #1
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d102      	bne.n	8008808 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f010 fbbc 	bl	8018f80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	695a      	ldr	r2, [r3, #20]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008816:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4618      	mov	r0, r3
 800881e:	f00a fba5 	bl	8012f6c <USB_ReadInterrupts>
 8008822:	4603      	mov	r3, r0
 8008824:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008828:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800882c:	d121      	bne.n	8008872 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	695a      	ldr	r2, [r3, #20]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800883c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8008844:	2b00      	cmp	r3, #0
 8008846:	d111      	bne.n	800886c <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008856:	089b      	lsrs	r3, r3, #2
 8008858:	f003 020f 	and.w	r2, r3, #15
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008862:	2101      	movs	r1, #1
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 fe51 	bl	800950c <HAL_PCDEx_LPM_Callback>
 800886a:	e002      	b.n	8008872 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f010 fb87 	bl	8018f80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4618      	mov	r0, r3
 8008878:	f00a fb78 	bl	8012f6c <USB_ReadInterrupts>
 800887c:	4603      	mov	r3, r0
 800887e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008886:	f040 80c7 	bne.w	8008a18 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800888a:	69fb      	ldr	r3, [r7, #28]
 800888c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	69fa      	ldr	r2, [r7, #28]
 8008894:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008898:	f023 0301 	bic.w	r3, r3, #1
 800889c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	2110      	movs	r1, #16
 80088a4:	4618      	mov	r0, r3
 80088a6:	f009 fc4b 	bl	8012140 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088aa:	2300      	movs	r3, #0
 80088ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088ae:	e056      	b.n	800895e <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80088b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b2:	015a      	lsls	r2, r3, #5
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	4413      	add	r3, r2
 80088b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088bc:	461a      	mov	r2, r3
 80088be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80088c2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80088c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c6:	015a      	lsls	r2, r3, #5
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	4413      	add	r3, r2
 80088cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088d4:	0151      	lsls	r1, r2, #5
 80088d6:	69fa      	ldr	r2, [r7, #28]
 80088d8:	440a      	add	r2, r1
 80088da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80088e2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80088e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088e6:	015a      	lsls	r2, r3, #5
 80088e8:	69fb      	ldr	r3, [r7, #28]
 80088ea:	4413      	add	r3, r2
 80088ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088f4:	0151      	lsls	r1, r2, #5
 80088f6:	69fa      	ldr	r2, [r7, #28]
 80088f8:	440a      	add	r2, r1
 80088fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008902:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008906:	015a      	lsls	r2, r3, #5
 8008908:	69fb      	ldr	r3, [r7, #28]
 800890a:	4413      	add	r3, r2
 800890c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008910:	461a      	mov	r2, r3
 8008912:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008916:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800891a:	015a      	lsls	r2, r3, #5
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	4413      	add	r3, r2
 8008920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008928:	0151      	lsls	r1, r2, #5
 800892a:	69fa      	ldr	r2, [r7, #28]
 800892c:	440a      	add	r2, r1
 800892e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008932:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008936:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800893a:	015a      	lsls	r2, r3, #5
 800893c:	69fb      	ldr	r3, [r7, #28]
 800893e:	4413      	add	r3, r2
 8008940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008948:	0151      	lsls	r1, r2, #5
 800894a:	69fa      	ldr	r2, [r7, #28]
 800894c:	440a      	add	r2, r1
 800894e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008952:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008956:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800895a:	3301      	adds	r3, #1
 800895c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008964:	429a      	cmp	r2, r3
 8008966:	d3a3      	bcc.n	80088b0 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800896e:	69db      	ldr	r3, [r3, #28]
 8008970:	69fa      	ldr	r2, [r7, #28]
 8008972:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008976:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800897a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008980:	2b00      	cmp	r3, #0
 8008982:	d016      	beq.n	80089b2 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008984:	69fb      	ldr	r3, [r7, #28]
 8008986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800898a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800898e:	69fa      	ldr	r2, [r7, #28]
 8008990:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008994:	f043 030b 	orr.w	r3, r3, #11
 8008998:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800899c:	69fb      	ldr	r3, [r7, #28]
 800899e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089a4:	69fa      	ldr	r2, [r7, #28]
 80089a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089aa:	f043 030b 	orr.w	r3, r3, #11
 80089ae:	6453      	str	r3, [r2, #68]	; 0x44
 80089b0:	e015      	b.n	80089de <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089b8:	695a      	ldr	r2, [r3, #20]
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089c0:	4619      	mov	r1, r3
 80089c2:	f242 032b 	movw	r3, #8235	; 0x202b
 80089c6:	4313      	orrs	r3, r2
 80089c8:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80089ca:	69fb      	ldr	r3, [r7, #28]
 80089cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089d0:	691b      	ldr	r3, [r3, #16]
 80089d2:	69fa      	ldr	r2, [r7, #28]
 80089d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089d8:	f043 030b 	orr.w	r3, r3, #11
 80089dc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80089de:	69fb      	ldr	r3, [r7, #28]
 80089e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	69fa      	ldr	r2, [r7, #28]
 80089e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089ec:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80089f0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6818      	ldr	r0, [r3, #0]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	691b      	ldr	r3, [r3, #16]
 80089fa:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008a02:	461a      	mov	r2, r3
 8008a04:	f00a fb78 	bl	80130f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	695a      	ldr	r2, [r3, #20]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008a16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f00a faa5 	bl	8012f6c <USB_ReadInterrupts>
 8008a22:	4603      	mov	r3, r0
 8008a24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a2c:	d124      	bne.n	8008a78 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4618      	mov	r0, r3
 8008a34:	f00a fb3c 	bl	80130b0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f009 fbe0 	bl	8012202 <USB_GetDevSpeed>
 8008a42:	4603      	mov	r3, r0
 8008a44:	461a      	mov	r2, r3
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681c      	ldr	r4, [r3, #0]
 8008a4e:	f001 fdd9 	bl	800a604 <HAL_RCC_GetHCLKFreq>
 8008a52:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	f009 f923 	bl	8011ca8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f010 fa63 	bl	8018f2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	695a      	ldr	r2, [r3, #20]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008a76:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f00a fa75 	bl	8012f6c <USB_ReadInterrupts>
 8008a82:	4603      	mov	r3, r0
 8008a84:	f003 0308 	and.w	r3, r3, #8
 8008a88:	2b08      	cmp	r3, #8
 8008a8a:	d10a      	bne.n	8008aa2 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f010 fa40 	bl	8018f12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	695a      	ldr	r2, [r3, #20]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f002 0208 	and.w	r2, r2, #8
 8008aa0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f00a fa60 	bl	8012f6c <USB_ReadInterrupts>
 8008aac:	4603      	mov	r3, r0
 8008aae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ab2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ab6:	d10f      	bne.n	8008ad8 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f010 faa2 	bl	801900c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	695a      	ldr	r2, [r3, #20]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008ad6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4618      	mov	r0, r3
 8008ade:	f00a fa45 	bl	8012f6c <USB_ReadInterrupts>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ae8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008aec:	d10f      	bne.n	8008b0e <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008aee:	2300      	movs	r3, #0
 8008af0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	4619      	mov	r1, r3
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f010 fa75 	bl	8018fe8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	695a      	ldr	r2, [r3, #20]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008b0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4618      	mov	r0, r3
 8008b14:	f00a fa2a 	bl	8012f6c <USB_ReadInterrupts>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b22:	d10a      	bne.n	8008b3a <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f010 fa83 	bl	8019030 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	695a      	ldr	r2, [r3, #20]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008b38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f00a fa14 	bl	8012f6c <USB_ReadInterrupts>
 8008b44:	4603      	mov	r3, r0
 8008b46:	f003 0304 	and.w	r3, r3, #4
 8008b4a:	2b04      	cmp	r3, #4
 8008b4c:	d115      	bne.n	8008b7a <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	f003 0304 	and.w	r3, r3, #4
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d002      	beq.n	8008b66 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f010 fa73 	bl	801904c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	6859      	ldr	r1, [r3, #4]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	69ba      	ldr	r2, [r7, #24]
 8008b72:	430a      	orrs	r2, r1
 8008b74:	605a      	str	r2, [r3, #4]
 8008b76:	e000      	b.n	8008b7a <HAL_PCD_IRQHandler+0x7b8>
      return;
 8008b78:	bf00      	nop
    }
  }
}
 8008b7a:	3734      	adds	r7, #52	; 0x34
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd90      	pop	{r4, r7, pc}

08008b80 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	460b      	mov	r3, r1
 8008b8a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d101      	bne.n	8008b9a <HAL_PCD_SetAddress+0x1a>
 8008b96:	2302      	movs	r3, #2
 8008b98:	e013      	b.n	8008bc2 <HAL_PCD_SetAddress+0x42>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	78fa      	ldrb	r2, [r7, #3]
 8008ba6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	78fa      	ldrb	r2, [r7, #3]
 8008bb0:	4611      	mov	r1, r2
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f00a f984 	bl	8012ec0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008bc0:	2300      	movs	r3, #0
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3708      	adds	r7, #8
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b084      	sub	sp, #16
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
 8008bd2:	4608      	mov	r0, r1
 8008bd4:	4611      	mov	r1, r2
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	4603      	mov	r3, r0
 8008bda:	70fb      	strb	r3, [r7, #3]
 8008bdc:	460b      	mov	r3, r1
 8008bde:	803b      	strh	r3, [r7, #0]
 8008be0:	4613      	mov	r3, r2
 8008be2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008be4:	2300      	movs	r3, #0
 8008be6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008be8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	da0f      	bge.n	8008c10 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008bf0:	78fb      	ldrb	r3, [r7, #3]
 8008bf2:	f003 020f 	and.w	r2, r3, #15
 8008bf6:	4613      	mov	r3, r2
 8008bf8:	00db      	lsls	r3, r3, #3
 8008bfa:	1a9b      	subs	r3, r3, r2
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	3338      	adds	r3, #56	; 0x38
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	4413      	add	r3, r2
 8008c04:	3304      	adds	r3, #4
 8008c06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	705a      	strb	r2, [r3, #1]
 8008c0e:	e00f      	b.n	8008c30 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c10:	78fb      	ldrb	r3, [r7, #3]
 8008c12:	f003 020f 	and.w	r2, r3, #15
 8008c16:	4613      	mov	r3, r2
 8008c18:	00db      	lsls	r3, r3, #3
 8008c1a:	1a9b      	subs	r3, r3, r2
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	4413      	add	r3, r2
 8008c26:	3304      	adds	r3, #4
 8008c28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008c30:	78fb      	ldrb	r3, [r7, #3]
 8008c32:	f003 030f 	and.w	r3, r3, #15
 8008c36:	b2da      	uxtb	r2, r3
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008c3c:	883a      	ldrh	r2, [r7, #0]
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	78ba      	ldrb	r2, [r7, #2]
 8008c46:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	785b      	ldrb	r3, [r3, #1]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d004      	beq.n	8008c5a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	b29a      	uxth	r2, r3
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008c5a:	78bb      	ldrb	r3, [r7, #2]
 8008c5c:	2b02      	cmp	r3, #2
 8008c5e:	d102      	bne.n	8008c66 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2200      	movs	r2, #0
 8008c64:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d101      	bne.n	8008c74 <HAL_PCD_EP_Open+0xaa>
 8008c70:	2302      	movs	r3, #2
 8008c72:	e00e      	b.n	8008c92 <HAL_PCD_EP_Open+0xc8>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2201      	movs	r2, #1
 8008c78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	68f9      	ldr	r1, [r7, #12]
 8008c82:	4618      	mov	r0, r3
 8008c84:	f009 fae2 	bl	801224c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8008c90:	7afb      	ldrb	r3, [r7, #11]
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3710      	adds	r7, #16
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b084      	sub	sp, #16
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008ca6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	da0f      	bge.n	8008cce <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008cae:	78fb      	ldrb	r3, [r7, #3]
 8008cb0:	f003 020f 	and.w	r2, r3, #15
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	00db      	lsls	r3, r3, #3
 8008cb8:	1a9b      	subs	r3, r3, r2
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	3338      	adds	r3, #56	; 0x38
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	3304      	adds	r3, #4
 8008cc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2201      	movs	r2, #1
 8008cca:	705a      	strb	r2, [r3, #1]
 8008ccc:	e00f      	b.n	8008cee <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008cce:	78fb      	ldrb	r3, [r7, #3]
 8008cd0:	f003 020f 	and.w	r2, r3, #15
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	00db      	lsls	r3, r3, #3
 8008cd8:	1a9b      	subs	r3, r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	4413      	add	r3, r2
 8008ce4:	3304      	adds	r3, #4
 8008ce6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2200      	movs	r2, #0
 8008cec:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008cee:	78fb      	ldrb	r3, [r7, #3]
 8008cf0:	f003 030f 	and.w	r3, r3, #15
 8008cf4:	b2da      	uxtb	r2, r3
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d101      	bne.n	8008d08 <HAL_PCD_EP_Close+0x6e>
 8008d04:	2302      	movs	r3, #2
 8008d06:	e00e      	b.n	8008d26 <HAL_PCD_EP_Close+0x8c>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	68f9      	ldr	r1, [r7, #12]
 8008d16:	4618      	mov	r0, r3
 8008d18:	f009 fb20 	bl	801235c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b086      	sub	sp, #24
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	60f8      	str	r0, [r7, #12]
 8008d36:	607a      	str	r2, [r7, #4]
 8008d38:	603b      	str	r3, [r7, #0]
 8008d3a:	460b      	mov	r3, r1
 8008d3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008d3e:	7afb      	ldrb	r3, [r7, #11]
 8008d40:	f003 020f 	and.w	r2, r3, #15
 8008d44:	4613      	mov	r3, r2
 8008d46:	00db      	lsls	r3, r3, #3
 8008d48:	1a9b      	subs	r3, r3, r2
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	4413      	add	r3, r2
 8008d54:	3304      	adds	r3, #4
 8008d56:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	683a      	ldr	r2, [r7, #0]
 8008d62:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	2200      	movs	r2, #0
 8008d68:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008d70:	7afb      	ldrb	r3, [r7, #11]
 8008d72:	f003 030f 	and.w	r3, r3, #15
 8008d76:	b2da      	uxtb	r2, r3
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	691b      	ldr	r3, [r3, #16]
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d102      	bne.n	8008d8a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008d8a:	7afb      	ldrb	r3, [r7, #11]
 8008d8c:	f003 030f 	and.w	r3, r3, #15
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d109      	bne.n	8008da8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6818      	ldr	r0, [r3, #0]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	691b      	ldr	r3, [r3, #16]
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	461a      	mov	r2, r3
 8008da0:	6979      	ldr	r1, [r7, #20]
 8008da2:	f009 fe03 	bl	80129ac <USB_EP0StartXfer>
 8008da6:	e008      	b.n	8008dba <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6818      	ldr	r0, [r3, #0]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	691b      	ldr	r3, [r3, #16]
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	461a      	mov	r2, r3
 8008db4:	6979      	ldr	r1, [r7, #20]
 8008db6:	f009 fbad 	bl	8012514 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008dba:	2300      	movs	r3, #0
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3718      	adds	r7, #24
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	460b      	mov	r3, r1
 8008dce:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008dd0:	78fb      	ldrb	r3, [r7, #3]
 8008dd2:	f003 020f 	and.w	r2, r3, #15
 8008dd6:	6879      	ldr	r1, [r7, #4]
 8008dd8:	4613      	mov	r3, r2
 8008dda:	00db      	lsls	r3, r3, #3
 8008ddc:	1a9b      	subs	r3, r3, r2
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	440b      	add	r3, r1
 8008de2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008de6:	681b      	ldr	r3, [r3, #0]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b086      	sub	sp, #24
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	607a      	str	r2, [r7, #4]
 8008dfe:	603b      	str	r3, [r7, #0]
 8008e00:	460b      	mov	r3, r1
 8008e02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e04:	7afb      	ldrb	r3, [r7, #11]
 8008e06:	f003 020f 	and.w	r2, r3, #15
 8008e0a:	4613      	mov	r3, r2
 8008e0c:	00db      	lsls	r3, r3, #3
 8008e0e:	1a9b      	subs	r3, r3, r2
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	3338      	adds	r3, #56	; 0x38
 8008e14:	68fa      	ldr	r2, [r7, #12]
 8008e16:	4413      	add	r3, r2
 8008e18:	3304      	adds	r3, #4
 8008e1a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	683a      	ldr	r2, [r7, #0]
 8008e26:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	2201      	movs	r2, #1
 8008e32:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008e34:	7afb      	ldrb	r3, [r7, #11]
 8008e36:	f003 030f 	and.w	r3, r3, #15
 8008e3a:	b2da      	uxtb	r2, r3
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	691b      	ldr	r3, [r3, #16]
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d102      	bne.n	8008e4e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008e4e:	7afb      	ldrb	r3, [r7, #11]
 8008e50:	f003 030f 	and.w	r3, r3, #15
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d109      	bne.n	8008e6c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6818      	ldr	r0, [r3, #0]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	691b      	ldr	r3, [r3, #16]
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	461a      	mov	r2, r3
 8008e64:	6979      	ldr	r1, [r7, #20]
 8008e66:	f009 fda1 	bl	80129ac <USB_EP0StartXfer>
 8008e6a:	e008      	b.n	8008e7e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6818      	ldr	r0, [r3, #0]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	691b      	ldr	r3, [r3, #16]
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	461a      	mov	r2, r3
 8008e78:	6979      	ldr	r1, [r7, #20]
 8008e7a:	f009 fb4b 	bl	8012514 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008e7e:	2300      	movs	r3, #0
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3718      	adds	r7, #24
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	460b      	mov	r3, r1
 8008e92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008e94:	78fb      	ldrb	r3, [r7, #3]
 8008e96:	f003 020f 	and.w	r2, r3, #15
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d901      	bls.n	8008ea6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e050      	b.n	8008f48 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008ea6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	da0f      	bge.n	8008ece <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008eae:	78fb      	ldrb	r3, [r7, #3]
 8008eb0:	f003 020f 	and.w	r2, r3, #15
 8008eb4:	4613      	mov	r3, r2
 8008eb6:	00db      	lsls	r3, r3, #3
 8008eb8:	1a9b      	subs	r3, r3, r2
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	3338      	adds	r3, #56	; 0x38
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	3304      	adds	r3, #4
 8008ec4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	705a      	strb	r2, [r3, #1]
 8008ecc:	e00d      	b.n	8008eea <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008ece:	78fa      	ldrb	r2, [r7, #3]
 8008ed0:	4613      	mov	r3, r2
 8008ed2:	00db      	lsls	r3, r3, #3
 8008ed4:	1a9b      	subs	r3, r3, r2
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	4413      	add	r3, r2
 8008ee0:	3304      	adds	r3, #4
 8008ee2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2201      	movs	r2, #1
 8008eee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008ef0:	78fb      	ldrb	r3, [r7, #3]
 8008ef2:	f003 030f 	and.w	r3, r3, #15
 8008ef6:	b2da      	uxtb	r2, r3
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d101      	bne.n	8008f0a <HAL_PCD_EP_SetStall+0x82>
 8008f06:	2302      	movs	r3, #2
 8008f08:	e01e      	b.n	8008f48 <HAL_PCD_EP_SetStall+0xc0>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	68f9      	ldr	r1, [r7, #12]
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f009 fefd 	bl	8012d18 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008f1e:	78fb      	ldrb	r3, [r7, #3]
 8008f20:	f003 030f 	and.w	r3, r3, #15
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d10a      	bne.n	8008f3e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6818      	ldr	r0, [r3, #0]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	691b      	ldr	r3, [r3, #16]
 8008f30:	b2d9      	uxtb	r1, r3
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008f38:	461a      	mov	r2, r3
 8008f3a:	f00a f8dd 	bl	80130f8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2200      	movs	r2, #0
 8008f42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008f46:	2300      	movs	r3, #0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3710      	adds	r7, #16
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	460b      	mov	r3, r1
 8008f5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008f5c:	78fb      	ldrb	r3, [r7, #3]
 8008f5e:	f003 020f 	and.w	r2, r3, #15
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d901      	bls.n	8008f6e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e042      	b.n	8008ff4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008f6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	da0f      	bge.n	8008f96 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f76:	78fb      	ldrb	r3, [r7, #3]
 8008f78:	f003 020f 	and.w	r2, r3, #15
 8008f7c:	4613      	mov	r3, r2
 8008f7e:	00db      	lsls	r3, r3, #3
 8008f80:	1a9b      	subs	r3, r3, r2
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	3338      	adds	r3, #56	; 0x38
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	4413      	add	r3, r2
 8008f8a:	3304      	adds	r3, #4
 8008f8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2201      	movs	r2, #1
 8008f92:	705a      	strb	r2, [r3, #1]
 8008f94:	e00f      	b.n	8008fb6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f96:	78fb      	ldrb	r3, [r7, #3]
 8008f98:	f003 020f 	and.w	r2, r3, #15
 8008f9c:	4613      	mov	r3, r2
 8008f9e:	00db      	lsls	r3, r3, #3
 8008fa0:	1a9b      	subs	r3, r3, r2
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	4413      	add	r3, r2
 8008fac:	3304      	adds	r3, #4
 8008fae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008fbc:	78fb      	ldrb	r3, [r7, #3]
 8008fbe:	f003 030f 	and.w	r3, r3, #15
 8008fc2:	b2da      	uxtb	r2, r3
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d101      	bne.n	8008fd6 <HAL_PCD_EP_ClrStall+0x86>
 8008fd2:	2302      	movs	r3, #2
 8008fd4:	e00e      	b.n	8008ff4 <HAL_PCD_EP_ClrStall+0xa4>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2201      	movs	r2, #1
 8008fda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	68f9      	ldr	r1, [r7, #12]
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f009 ff05 	bl	8012df4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008ff2:	2300      	movs	r3, #0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3710      	adds	r7, #16
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	460b      	mov	r3, r1
 8009006:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800900e:	2b01      	cmp	r3, #1
 8009010:	d101      	bne.n	8009016 <HAL_PCD_EP_Flush+0x1a>
 8009012:	2302      	movs	r3, #2
 8009014:	e01b      	b.n	800904e <HAL_PCD_EP_Flush+0x52>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2201      	movs	r2, #1
 800901a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 800901e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009022:	2b00      	cmp	r3, #0
 8009024:	da09      	bge.n	800903a <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	78fb      	ldrb	r3, [r7, #3]
 800902c:	f003 030f 	and.w	r3, r3, #15
 8009030:	4619      	mov	r1, r3
 8009032:	4610      	mov	r0, r2
 8009034:	f009 f884 	bl	8012140 <USB_FlushTxFifo>
 8009038:	e004      	b.n	8009044 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4618      	mov	r0, r3
 8009040:	f009 f8a4 	bl	801218c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800904c:	2300      	movs	r3, #0
}
 800904e:	4618      	mov	r0, r3
 8009050:	3708      	adds	r7, #8
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}

08009056 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009056:	b580      	push	{r7, lr}
 8009058:	b08a      	sub	sp, #40	; 0x28
 800905a:	af02      	add	r7, sp, #8
 800905c:	6078      	str	r0, [r7, #4]
 800905e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800906a:	683a      	ldr	r2, [r7, #0]
 800906c:	4613      	mov	r3, r2
 800906e:	00db      	lsls	r3, r3, #3
 8009070:	1a9b      	subs	r3, r3, r2
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	3338      	adds	r3, #56	; 0x38
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	4413      	add	r3, r2
 800907a:	3304      	adds	r3, #4
 800907c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	699a      	ldr	r2, [r3, #24]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	695b      	ldr	r3, [r3, #20]
 8009086:	429a      	cmp	r2, r3
 8009088:	d901      	bls.n	800908e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800908a:	2301      	movs	r3, #1
 800908c:	e06c      	b.n	8009168 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	695a      	ldr	r2, [r3, #20]
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	699b      	ldr	r3, [r3, #24]
 8009096:	1ad3      	subs	r3, r2, r3
 8009098:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	69fa      	ldr	r2, [r7, #28]
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d902      	bls.n	80090aa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80090aa:	69fb      	ldr	r3, [r7, #28]
 80090ac:	3303      	adds	r3, #3
 80090ae:	089b      	lsrs	r3, r3, #2
 80090b0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80090b2:	e02b      	b.n	800910c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	695a      	ldr	r2, [r3, #20]
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	699b      	ldr	r3, [r3, #24]
 80090bc:	1ad3      	subs	r3, r2, r3
 80090be:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	69fa      	ldr	r2, [r7, #28]
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d902      	bls.n	80090d0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80090d0:	69fb      	ldr	r3, [r7, #28]
 80090d2:	3303      	adds	r3, #3
 80090d4:	089b      	lsrs	r3, r3, #2
 80090d6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	68d9      	ldr	r1, [r3, #12]
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	b2da      	uxtb	r2, r3
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	9300      	str	r3, [sp, #0]
 80090ec:	4603      	mov	r3, r0
 80090ee:	6978      	ldr	r0, [r7, #20]
 80090f0:	f009 fdb4 	bl	8012c5c <USB_WritePacket>

    ep->xfer_buff  += len;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	68da      	ldr	r2, [r3, #12]
 80090f8:	69fb      	ldr	r3, [r7, #28]
 80090fa:	441a      	add	r2, r3
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	699a      	ldr	r2, [r3, #24]
 8009104:	69fb      	ldr	r3, [r7, #28]
 8009106:	441a      	add	r2, r3
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	015a      	lsls	r2, r3, #5
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	4413      	add	r3, r2
 8009114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009118:	699b      	ldr	r3, [r3, #24]
 800911a:	b29b      	uxth	r3, r3
 800911c:	69ba      	ldr	r2, [r7, #24]
 800911e:	429a      	cmp	r2, r3
 8009120:	d809      	bhi.n	8009136 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	699a      	ldr	r2, [r3, #24]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800912a:	429a      	cmp	r2, r3
 800912c:	d203      	bcs.n	8009136 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	695b      	ldr	r3, [r3, #20]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d1be      	bne.n	80090b4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	695a      	ldr	r2, [r3, #20]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	699b      	ldr	r3, [r3, #24]
 800913e:	429a      	cmp	r2, r3
 8009140:	d811      	bhi.n	8009166 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	f003 030f 	and.w	r3, r3, #15
 8009148:	2201      	movs	r2, #1
 800914a:	fa02 f303 	lsl.w	r3, r2, r3
 800914e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009156:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	43db      	mvns	r3, r3
 800915c:	6939      	ldr	r1, [r7, #16]
 800915e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009162:	4013      	ands	r3, r2
 8009164:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8009166:	2300      	movs	r3, #0
}
 8009168:	4618      	mov	r0, r3
 800916a:	3720      	adds	r7, #32
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b086      	sub	sp, #24
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	333c      	adds	r3, #60	; 0x3c
 8009188:	3304      	adds	r3, #4
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	015a      	lsls	r2, r3, #5
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	4413      	add	r3, r2
 8009196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	691b      	ldr	r3, [r3, #16]
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	f040 80a0 	bne.w	80092e8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	f003 0308 	and.w	r3, r3, #8
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d015      	beq.n	80091de <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	4a72      	ldr	r2, [pc, #456]	; (8009380 <PCD_EP_OutXfrComplete_int+0x210>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	f240 80dd 	bls.w	8009376 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f000 80d7 	beq.w	8009376 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	015a      	lsls	r2, r3, #5
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	4413      	add	r3, r2
 80091d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091d4:	461a      	mov	r2, r3
 80091d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091da:	6093      	str	r3, [r2, #8]
 80091dc:	e0cb      	b.n	8009376 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	f003 0320 	and.w	r3, r3, #32
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d009      	beq.n	80091fc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	015a      	lsls	r2, r3, #5
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	4413      	add	r3, r2
 80091f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091f4:	461a      	mov	r2, r3
 80091f6:	2320      	movs	r3, #32
 80091f8:	6093      	str	r3, [r2, #8]
 80091fa:	e0bc      	b.n	8009376 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009202:	2b00      	cmp	r3, #0
 8009204:	f040 80b7 	bne.w	8009376 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	4a5d      	ldr	r2, [pc, #372]	; (8009380 <PCD_EP_OutXfrComplete_int+0x210>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d90f      	bls.n	8009230 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009216:	2b00      	cmp	r3, #0
 8009218:	d00a      	beq.n	8009230 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	015a      	lsls	r2, r3, #5
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	4413      	add	r3, r2
 8009222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009226:	461a      	mov	r2, r3
 8009228:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800922c:	6093      	str	r3, [r2, #8]
 800922e:	e0a2      	b.n	8009376 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8009230:	6879      	ldr	r1, [r7, #4]
 8009232:	683a      	ldr	r2, [r7, #0]
 8009234:	4613      	mov	r3, r2
 8009236:	00db      	lsls	r3, r3, #3
 8009238:	1a9b      	subs	r3, r3, r2
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	440b      	add	r3, r1
 800923e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009242:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	0159      	lsls	r1, r3, #5
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	440b      	add	r3, r1
 800924c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009250:	691b      	ldr	r3, [r3, #16]
 8009252:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8009256:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	683a      	ldr	r2, [r7, #0]
 800925c:	4613      	mov	r3, r2
 800925e:	00db      	lsls	r3, r3, #3
 8009260:	1a9b      	subs	r3, r3, r2
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	4403      	add	r3, r0
 8009266:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800926a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800926c:	6879      	ldr	r1, [r7, #4]
 800926e:	683a      	ldr	r2, [r7, #0]
 8009270:	4613      	mov	r3, r2
 8009272:	00db      	lsls	r3, r3, #3
 8009274:	1a9b      	subs	r3, r3, r2
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	440b      	add	r3, r1
 800927a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800927e:	6819      	ldr	r1, [r3, #0]
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	683a      	ldr	r2, [r7, #0]
 8009284:	4613      	mov	r3, r2
 8009286:	00db      	lsls	r3, r3, #3
 8009288:	1a9b      	subs	r3, r3, r2
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	4403      	add	r3, r0
 800928e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4419      	add	r1, r3
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	683a      	ldr	r2, [r7, #0]
 800929a:	4613      	mov	r3, r2
 800929c:	00db      	lsls	r3, r3, #3
 800929e:	1a9b      	subs	r3, r3, r2
 80092a0:	009b      	lsls	r3, r3, #2
 80092a2:	4403      	add	r3, r0
 80092a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80092a8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d114      	bne.n	80092da <PCD_EP_OutXfrComplete_int+0x16a>
 80092b0:	6879      	ldr	r1, [r7, #4]
 80092b2:	683a      	ldr	r2, [r7, #0]
 80092b4:	4613      	mov	r3, r2
 80092b6:	00db      	lsls	r3, r3, #3
 80092b8:	1a9b      	subs	r3, r3, r2
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	440b      	add	r3, r1
 80092be:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d108      	bne.n	80092da <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6818      	ldr	r0, [r3, #0]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80092d2:	461a      	mov	r2, r3
 80092d4:	2101      	movs	r1, #1
 80092d6:	f009 ff0f 	bl	80130f8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	4619      	mov	r1, r3
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f00f fde1 	bl	8018ea8 <HAL_PCD_DataOutStageCallback>
 80092e6:	e046      	b.n	8009376 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	4a26      	ldr	r2, [pc, #152]	; (8009384 <PCD_EP_OutXfrComplete_int+0x214>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d124      	bne.n	800933a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00a      	beq.n	8009310 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	015a      	lsls	r2, r3, #5
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	4413      	add	r3, r2
 8009302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009306:	461a      	mov	r2, r3
 8009308:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800930c:	6093      	str	r3, [r2, #8]
 800930e:	e032      	b.n	8009376 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	f003 0320 	and.w	r3, r3, #32
 8009316:	2b00      	cmp	r3, #0
 8009318:	d008      	beq.n	800932c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	015a      	lsls	r2, r3, #5
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	4413      	add	r3, r2
 8009322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009326:	461a      	mov	r2, r3
 8009328:	2320      	movs	r3, #32
 800932a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	b2db      	uxtb	r3, r3
 8009330:	4619      	mov	r1, r3
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f00f fdb8 	bl	8018ea8 <HAL_PCD_DataOutStageCallback>
 8009338:	e01d      	b.n	8009376 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d114      	bne.n	800936a <PCD_EP_OutXfrComplete_int+0x1fa>
 8009340:	6879      	ldr	r1, [r7, #4]
 8009342:	683a      	ldr	r2, [r7, #0]
 8009344:	4613      	mov	r3, r2
 8009346:	00db      	lsls	r3, r3, #3
 8009348:	1a9b      	subs	r3, r3, r2
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	440b      	add	r3, r1
 800934e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d108      	bne.n	800936a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6818      	ldr	r0, [r3, #0]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009362:	461a      	mov	r2, r3
 8009364:	2100      	movs	r1, #0
 8009366:	f009 fec7 	bl	80130f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	b2db      	uxtb	r3, r3
 800936e:	4619      	mov	r1, r3
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f00f fd99 	bl	8018ea8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009376:	2300      	movs	r3, #0
}
 8009378:	4618      	mov	r0, r3
 800937a:	3718      	adds	r7, #24
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}
 8009380:	4f54300a 	.word	0x4f54300a
 8009384:	4f54310a 	.word	0x4f54310a

08009388 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b086      	sub	sp, #24
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	333c      	adds	r3, #60	; 0x3c
 80093a0:	3304      	adds	r3, #4
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	015a      	lsls	r2, r3, #5
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	4413      	add	r3, r2
 80093ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	4a15      	ldr	r2, [pc, #84]	; (8009410 <PCD_EP_OutSetupPacket_int+0x88>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d90e      	bls.n	80093dc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d009      	beq.n	80093dc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	015a      	lsls	r2, r3, #5
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	4413      	add	r3, r2
 80093d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093d4:	461a      	mov	r2, r3
 80093d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093da:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f00f fd51 	bl	8018e84 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	4a0a      	ldr	r2, [pc, #40]	; (8009410 <PCD_EP_OutSetupPacket_int+0x88>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d90c      	bls.n	8009404 <PCD_EP_OutSetupPacket_int+0x7c>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	691b      	ldr	r3, [r3, #16]
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d108      	bne.n	8009404 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6818      	ldr	r0, [r3, #0]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80093fc:	461a      	mov	r2, r3
 80093fe:	2101      	movs	r1, #1
 8009400:	f009 fe7a 	bl	80130f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009404:	2300      	movs	r3, #0
}
 8009406:	4618      	mov	r0, r3
 8009408:	3718      	adds	r7, #24
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	4f54300a 	.word	0x4f54300a

08009414 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009414:	b480      	push	{r7}
 8009416:	b085      	sub	sp, #20
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	460b      	mov	r3, r1
 800941e:	70fb      	strb	r3, [r7, #3]
 8009420:	4613      	mov	r3, r2
 8009422:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800942a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800942c:	78fb      	ldrb	r3, [r7, #3]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d107      	bne.n	8009442 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009432:	883b      	ldrh	r3, [r7, #0]
 8009434:	0419      	lsls	r1, r3, #16
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	68ba      	ldr	r2, [r7, #8]
 800943c:	430a      	orrs	r2, r1
 800943e:	629a      	str	r2, [r3, #40]	; 0x28
 8009440:	e028      	b.n	8009494 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009448:	0c1b      	lsrs	r3, r3, #16
 800944a:	68ba      	ldr	r2, [r7, #8]
 800944c:	4413      	add	r3, r2
 800944e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009450:	2300      	movs	r3, #0
 8009452:	73fb      	strb	r3, [r7, #15]
 8009454:	e00d      	b.n	8009472 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	7bfb      	ldrb	r3, [r7, #15]
 800945c:	3340      	adds	r3, #64	; 0x40
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	4413      	add	r3, r2
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	0c1b      	lsrs	r3, r3, #16
 8009466:	68ba      	ldr	r2, [r7, #8]
 8009468:	4413      	add	r3, r2
 800946a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800946c:	7bfb      	ldrb	r3, [r7, #15]
 800946e:	3301      	adds	r3, #1
 8009470:	73fb      	strb	r3, [r7, #15]
 8009472:	7bfa      	ldrb	r2, [r7, #15]
 8009474:	78fb      	ldrb	r3, [r7, #3]
 8009476:	3b01      	subs	r3, #1
 8009478:	429a      	cmp	r2, r3
 800947a:	d3ec      	bcc.n	8009456 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800947c:	883b      	ldrh	r3, [r7, #0]
 800947e:	0418      	lsls	r0, r3, #16
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6819      	ldr	r1, [r3, #0]
 8009484:	78fb      	ldrb	r3, [r7, #3]
 8009486:	3b01      	subs	r3, #1
 8009488:	68ba      	ldr	r2, [r7, #8]
 800948a:	4302      	orrs	r2, r0
 800948c:	3340      	adds	r3, #64	; 0x40
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	440b      	add	r3, r1
 8009492:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009494:	2300      	movs	r3, #0
}
 8009496:	4618      	mov	r0, r3
 8009498:	3714      	adds	r7, #20
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr

080094a2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80094a2:	b480      	push	{r7}
 80094a4:	b083      	sub	sp, #12
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
 80094aa:	460b      	mov	r3, r1
 80094ac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	887a      	ldrh	r2, [r7, #2]
 80094b4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80094b6:	2300      	movs	r3, #0
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	370c      	adds	r7, #12
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b085      	sub	sp, #20
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2201      	movs	r2, #1
 80094d6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	699b      	ldr	r3, [r3, #24]
 80094e6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80094f2:	4b05      	ldr	r3, [pc, #20]	; (8009508 <HAL_PCDEx_ActivateLPM+0x44>)
 80094f4:	4313      	orrs	r3, r2
 80094f6:	68fa      	ldr	r2, [r7, #12]
 80094f8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80094fa:	2300      	movs	r3, #0
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3714      	adds	r7, #20
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr
 8009508:	10000003 	.word	0x10000003

0800950c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	460b      	mov	r3, r1
 8009516:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009518:	bf00      	nop
 800951a:	370c      	adds	r7, #12
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8009524:	b480      	push	{r7}
 8009526:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8009528:	4b05      	ldr	r3, [pc, #20]	; (8009540 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a04      	ldr	r2, [pc, #16]	; (8009540 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800952e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009532:	6013      	str	r3, [r2, #0]
}
 8009534:	bf00      	nop
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr
 800953e:	bf00      	nop
 8009540:	58024800 	.word	0x58024800

08009544 <HAL_PWR_ConfigPVD>:
  *         driver. All combination are allowed: wake up only Cortex-M7, wake up
  *         only Cortex-M4 or wake up Cortex-M7 and Cortex-M4.
  * @retval None.
  */
void HAL_PWR_ConfigPVD (PWR_PVDTypeDef *sConfigPVD)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  /* Check the PVD configuration parameter */
  if (sConfigPVD == NULL)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d069      	beq.n	8009626 <HAL_PWR_ConfigPVD+0xe2>
  /* Check the parameters */
  assert_param (IS_PWR_PVD_LEVEL (sConfigPVD->PVDLevel));
  assert_param (IS_PWR_PVD_MODE (sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG (PWR->CR1, PWR_CR1_PLS, sConfigPVD->PVDLevel);
 8009552:	4b38      	ldr	r3, [pc, #224]	; (8009634 <HAL_PWR_ConfigPVD+0xf0>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4935      	ldr	r1, [pc, #212]	; (8009634 <HAL_PWR_ConfigPVD+0xf0>)
 8009560:	4313      	orrs	r3, r2
 8009562:	600b      	str	r3, [r1, #0]

  /* Clear previous config */
#if !defined (DUAL_CORE)
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT ();
 8009564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800956c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009574:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT ();
 8009578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800957c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009580:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009584:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009588:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* !defined (DUAL_CORE) */

  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE ();
 800958c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800959a:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE ();
 800959c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80095a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095aa:	6053      	str	r3, [r2, #4]

#if !defined (DUAL_CORE)
  /* Interrupt mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d009      	beq.n	80095cc <HAL_PWR_ConfigPVD+0x88>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT ();
 80095b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80095c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Event mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d009      	beq.n	80095ec <HAL_PWR_ConfigPVD+0xa8>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT ();
 80095d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80095e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095e8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }
#endif /* !defined (DUAL_CORE) */

  /* Rising edge configuration */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	f003 0301 	and.w	r3, r3, #1
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d007      	beq.n	8009608 <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE ();
 80095f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009606:	6013      	str	r3, [r2, #0]
  }

  /* Falling edge configuration */
  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	f003 0302 	and.w	r3, r3, #2
 8009610:	2b00      	cmp	r3, #0
 8009612:	d009      	beq.n	8009628 <HAL_PWR_ConfigPVD+0xe4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE ();
 8009614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800961e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009622:	6053      	str	r3, [r2, #4]
 8009624:	e000      	b.n	8009628 <HAL_PWR_ConfigPVD+0xe4>
    return;
 8009626:	bf00      	nop
  }
}
 8009628:	370c      	adds	r7, #12
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr
 8009632:	bf00      	nop
 8009634:	58024800 	.word	0x58024800

08009638 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Programmable Voltage Detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD (void)
{
 8009638:	b480      	push	{r7}
 800963a:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT (PWR->CR1, PWR_CR1_PVDEN);
 800963c:	4b05      	ldr	r3, [pc, #20]	; (8009654 <HAL_PWR_EnablePVD+0x1c>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a04      	ldr	r2, [pc, #16]	; (8009654 <HAL_PWR_EnablePVD+0x1c>)
 8009642:	f043 0310 	orr.w	r3, r3, #16
 8009646:	6013      	str	r3, [r2, #0]
}
 8009648:	bf00      	nop
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr
 8009652:	bf00      	nop
 8009654:	58024800 	.word	0x58024800

08009658 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009660:	4b19      	ldr	r3, [pc, #100]	; (80096c8 <HAL_PWREx_ConfigSupply+0x70>)
 8009662:	68db      	ldr	r3, [r3, #12]
 8009664:	f003 0304 	and.w	r3, r3, #4
 8009668:	2b04      	cmp	r3, #4
 800966a:	d00a      	beq.n	8009682 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800966c:	4b16      	ldr	r3, [pc, #88]	; (80096c8 <HAL_PWREx_ConfigSupply+0x70>)
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	f003 0307 	and.w	r3, r3, #7
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	429a      	cmp	r2, r3
 8009678:	d001      	beq.n	800967e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800967a:	2301      	movs	r3, #1
 800967c:	e01f      	b.n	80096be <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800967e:	2300      	movs	r3, #0
 8009680:	e01d      	b.n	80096be <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009682:	4b11      	ldr	r3, [pc, #68]	; (80096c8 <HAL_PWREx_ConfigSupply+0x70>)
 8009684:	68db      	ldr	r3, [r3, #12]
 8009686:	f023 0207 	bic.w	r2, r3, #7
 800968a:	490f      	ldr	r1, [pc, #60]	; (80096c8 <HAL_PWREx_ConfigSupply+0x70>)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	4313      	orrs	r3, r2
 8009690:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009692:	f7fa ffa7 	bl	80045e4 <HAL_GetTick>
 8009696:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009698:	e009      	b.n	80096ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800969a:	f7fa ffa3 	bl	80045e4 <HAL_GetTick>
 800969e:	4602      	mov	r2, r0
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	1ad3      	subs	r3, r2, r3
 80096a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80096a8:	d901      	bls.n	80096ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80096aa:	2301      	movs	r3, #1
 80096ac:	e007      	b.n	80096be <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80096ae:	4b06      	ldr	r3, [pc, #24]	; (80096c8 <HAL_PWREx_ConfigSupply+0x70>)
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80096b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096ba:	d1ee      	bne.n	800969a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80096bc:	2300      	movs	r3, #0
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3710      	adds	r7, #16
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	bf00      	nop
 80096c8:	58024800 	.word	0x58024800

080096cc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80096cc:	b480      	push	{r7}
 80096ce:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80096d0:	4b05      	ldr	r3, [pc, #20]	; (80096e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80096d2:	68db      	ldr	r3, [r3, #12]
 80096d4:	4a04      	ldr	r2, [pc, #16]	; (80096e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80096d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80096da:	60d3      	str	r3, [r2, #12]
}
 80096dc:	bf00      	nop
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop
 80096e8:	58024800 	.word	0x58024800

080096ec <HAL_PWREx_PVD_AVD_IRQHandler>:
  * @brief  This function handles the PWR PVD/AVD interrupt request.
  * @note   This API should be called under the PVD_AVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_AVD_IRQHandler (void)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	af00      	add	r7, sp, #0
  /* Check if the Programmable Voltage Detector is enabled (PVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_PVDEN) != 0U)
 80096f0:	4b1b      	ldr	r3, [pc, #108]	; (8009760 <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f003 0310 	and.w	r3, r3, #16
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d014      	beq.n	8009726 <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR D1/CD EXTI flag */
      if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
 80096fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009704:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800970c:	d10b      	bne.n	8009726 <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
      {
        /* PWR PVD interrupt user callback */
        HAL_PWR_PVDCallback ();
 800970e:	f7fa fa75 	bl	8003bfc <HAL_PWR_PVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
 8009712:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800971a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800971e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009722:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }
#endif /* defined (DUAL_CORE) */
  }

  /* Check if the Analog Voltage Detector is enabled (AVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_AVDEN) != 0U)
 8009726:	4b0e      	ldr	r3, [pc, #56]	; (8009760 <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800972e:	2b00      	cmp	r3, #0
 8009730:	d014      	beq.n	800975c <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR EXTI D1/CD flag */
      if (__HAL_PWR_AVD_EXTI_GET_FLAG () != 0U)
 8009732:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800973a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800973e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009742:	d10b      	bne.n	800975c <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
      {
        /* PWR AVD interrupt user callback */
        HAL_PWREx_AVDCallback ();
 8009744:	f000 f80e 	bl	8009764 <HAL_PWREx_AVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_AVD_EXTI_CLEAR_FLAG ();
 8009748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800974c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009750:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009758:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        __HAL_PWR_AVD_EXTID2_CLEAR_FLAG ();
      }
    }
#endif /* defined (DUAL_CORE) */
  }
}
 800975c:	bf00      	nop
 800975e:	bd80      	pop	{r7, pc}
 8009760:	58024800 	.word	0x58024800

08009764 <HAL_PWREx_AVDCallback>:
/**
  * @brief PWR AVD interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_AVDCallback (void)
{
 8009764:	b480      	push	{r7}
 8009766:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_AVDCallback can be implemented in the user file
  */
}
 8009768:	bf00      	nop
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr
	...

08009774 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b08c      	sub	sp, #48	; 0x30
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d101      	bne.n	8009786 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009782:	2301      	movs	r3, #1
 8009784:	e3ff      	b.n	8009f86 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f003 0301 	and.w	r3, r3, #1
 800978e:	2b00      	cmp	r3, #0
 8009790:	f000 8087 	beq.w	80098a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009794:	4b99      	ldr	r3, [pc, #612]	; (80099fc <HAL_RCC_OscConfig+0x288>)
 8009796:	691b      	ldr	r3, [r3, #16]
 8009798:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800979c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800979e:	4b97      	ldr	r3, [pc, #604]	; (80099fc <HAL_RCC_OscConfig+0x288>)
 80097a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097a2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80097a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a6:	2b10      	cmp	r3, #16
 80097a8:	d007      	beq.n	80097ba <HAL_RCC_OscConfig+0x46>
 80097aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ac:	2b18      	cmp	r3, #24
 80097ae:	d110      	bne.n	80097d2 <HAL_RCC_OscConfig+0x5e>
 80097b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b2:	f003 0303 	and.w	r3, r3, #3
 80097b6:	2b02      	cmp	r3, #2
 80097b8:	d10b      	bne.n	80097d2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80097ba:	4b90      	ldr	r3, [pc, #576]	; (80099fc <HAL_RCC_OscConfig+0x288>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d06c      	beq.n	80098a0 <HAL_RCC_OscConfig+0x12c>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d168      	bne.n	80098a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	e3d9      	b.n	8009f86 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097da:	d106      	bne.n	80097ea <HAL_RCC_OscConfig+0x76>
 80097dc:	4b87      	ldr	r3, [pc, #540]	; (80099fc <HAL_RCC_OscConfig+0x288>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a86      	ldr	r2, [pc, #536]	; (80099fc <HAL_RCC_OscConfig+0x288>)
 80097e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097e6:	6013      	str	r3, [r2, #0]
 80097e8:	e02e      	b.n	8009848 <HAL_RCC_OscConfig+0xd4>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d10c      	bne.n	800980c <HAL_RCC_OscConfig+0x98>
 80097f2:	4b82      	ldr	r3, [pc, #520]	; (80099fc <HAL_RCC_OscConfig+0x288>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a81      	ldr	r2, [pc, #516]	; (80099fc <HAL_RCC_OscConfig+0x288>)
 80097f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097fc:	6013      	str	r3, [r2, #0]
 80097fe:	4b7f      	ldr	r3, [pc, #508]	; (80099fc <HAL_RCC_OscConfig+0x288>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a7e      	ldr	r2, [pc, #504]	; (80099fc <HAL_RCC_OscConfig+0x288>)
 8009804:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009808:	6013      	str	r3, [r2, #0]
 800980a:	e01d      	b.n	8009848 <HAL_RCC_OscConfig+0xd4>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009814:	d10c      	bne.n	8009830 <HAL_RCC_OscConfig+0xbc>
 8009816:	4b79      	ldr	r3, [pc, #484]	; (80099fc <HAL_RCC_OscConfig+0x288>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4a78      	ldr	r2, [pc, #480]	; (80099fc <HAL_RCC_OscConfig+0x288>)
 800981c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009820:	6013      	str	r3, [r2, #0]
 8009822:	4b76      	ldr	r3, [pc, #472]	; (80099fc <HAL_RCC_OscConfig+0x288>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a75      	ldr	r2, [pc, #468]	; (80099fc <HAL_RCC_OscConfig+0x288>)
 8009828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800982c:	6013      	str	r3, [r2, #0]
 800982e:	e00b      	b.n	8009848 <HAL_RCC_OscConfig+0xd4>
 8009830:	4b72      	ldr	r3, [pc, #456]	; (80099fc <HAL_RCC_OscConfig+0x288>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a71      	ldr	r2, [pc, #452]	; (80099fc <HAL_RCC_OscConfig+0x288>)
 8009836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800983a:	6013      	str	r3, [r2, #0]
 800983c:	4b6f      	ldr	r3, [pc, #444]	; (80099fc <HAL_RCC_OscConfig+0x288>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a6e      	ldr	r2, [pc, #440]	; (80099fc <HAL_RCC_OscConfig+0x288>)
 8009842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009846:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	685b      	ldr	r3, [r3, #4]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d013      	beq.n	8009878 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009850:	f7fa fec8 	bl	80045e4 <HAL_GetTick>
 8009854:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009856:	e008      	b.n	800986a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009858:	f7fa fec4 	bl	80045e4 <HAL_GetTick>
 800985c:	4602      	mov	r2, r0
 800985e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009860:	1ad3      	subs	r3, r2, r3
 8009862:	2b64      	cmp	r3, #100	; 0x64
 8009864:	d901      	bls.n	800986a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009866:	2303      	movs	r3, #3
 8009868:	e38d      	b.n	8009f86 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800986a:	4b64      	ldr	r3, [pc, #400]	; (80099fc <HAL_RCC_OscConfig+0x288>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009872:	2b00      	cmp	r3, #0
 8009874:	d0f0      	beq.n	8009858 <HAL_RCC_OscConfig+0xe4>
 8009876:	e014      	b.n	80098a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009878:	f7fa feb4 	bl	80045e4 <HAL_GetTick>
 800987c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800987e:	e008      	b.n	8009892 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009880:	f7fa feb0 	bl	80045e4 <HAL_GetTick>
 8009884:	4602      	mov	r2, r0
 8009886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009888:	1ad3      	subs	r3, r2, r3
 800988a:	2b64      	cmp	r3, #100	; 0x64
 800988c:	d901      	bls.n	8009892 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800988e:	2303      	movs	r3, #3
 8009890:	e379      	b.n	8009f86 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009892:	4b5a      	ldr	r3, [pc, #360]	; (80099fc <HAL_RCC_OscConfig+0x288>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800989a:	2b00      	cmp	r3, #0
 800989c:	d1f0      	bne.n	8009880 <HAL_RCC_OscConfig+0x10c>
 800989e:	e000      	b.n	80098a2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f003 0302 	and.w	r3, r3, #2
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	f000 80ae 	beq.w	8009a0c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80098b0:	4b52      	ldr	r3, [pc, #328]	; (80099fc <HAL_RCC_OscConfig+0x288>)
 80098b2:	691b      	ldr	r3, [r3, #16]
 80098b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098b8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80098ba:	4b50      	ldr	r3, [pc, #320]	; (80099fc <HAL_RCC_OscConfig+0x288>)
 80098bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098be:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80098c0:	6a3b      	ldr	r3, [r7, #32]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d007      	beq.n	80098d6 <HAL_RCC_OscConfig+0x162>
 80098c6:	6a3b      	ldr	r3, [r7, #32]
 80098c8:	2b18      	cmp	r3, #24
 80098ca:	d13a      	bne.n	8009942 <HAL_RCC_OscConfig+0x1ce>
 80098cc:	69fb      	ldr	r3, [r7, #28]
 80098ce:	f003 0303 	and.w	r3, r3, #3
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d135      	bne.n	8009942 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80098d6:	4b49      	ldr	r3, [pc, #292]	; (80099fc <HAL_RCC_OscConfig+0x288>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f003 0304 	and.w	r3, r3, #4
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d005      	beq.n	80098ee <HAL_RCC_OscConfig+0x17a>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	68db      	ldr	r3, [r3, #12]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d101      	bne.n	80098ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80098ea:	2301      	movs	r3, #1
 80098ec:	e34b      	b.n	8009f86 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098ee:	f7fa fea7 	bl	8004640 <HAL_GetREVID>
 80098f2:	4602      	mov	r2, r0
 80098f4:	f241 0303 	movw	r3, #4099	; 0x1003
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d817      	bhi.n	800992c <HAL_RCC_OscConfig+0x1b8>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	691b      	ldr	r3, [r3, #16]
 8009900:	2b40      	cmp	r3, #64	; 0x40
 8009902:	d108      	bne.n	8009916 <HAL_RCC_OscConfig+0x1a2>
 8009904:	4b3d      	ldr	r3, [pc, #244]	; (80099fc <HAL_RCC_OscConfig+0x288>)
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800990c:	4a3b      	ldr	r2, [pc, #236]	; (80099fc <HAL_RCC_OscConfig+0x288>)
 800990e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009912:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009914:	e07a      	b.n	8009a0c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009916:	4b39      	ldr	r3, [pc, #228]	; (80099fc <HAL_RCC_OscConfig+0x288>)
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	691b      	ldr	r3, [r3, #16]
 8009922:	031b      	lsls	r3, r3, #12
 8009924:	4935      	ldr	r1, [pc, #212]	; (80099fc <HAL_RCC_OscConfig+0x288>)
 8009926:	4313      	orrs	r3, r2
 8009928:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800992a:	e06f      	b.n	8009a0c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800992c:	4b33      	ldr	r3, [pc, #204]	; (80099fc <HAL_RCC_OscConfig+0x288>)
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	691b      	ldr	r3, [r3, #16]
 8009938:	061b      	lsls	r3, r3, #24
 800993a:	4930      	ldr	r1, [pc, #192]	; (80099fc <HAL_RCC_OscConfig+0x288>)
 800993c:	4313      	orrs	r3, r2
 800993e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009940:	e064      	b.n	8009a0c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	68db      	ldr	r3, [r3, #12]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d045      	beq.n	80099d6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800994a:	4b2c      	ldr	r3, [pc, #176]	; (80099fc <HAL_RCC_OscConfig+0x288>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f023 0219 	bic.w	r2, r3, #25
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	68db      	ldr	r3, [r3, #12]
 8009956:	4929      	ldr	r1, [pc, #164]	; (80099fc <HAL_RCC_OscConfig+0x288>)
 8009958:	4313      	orrs	r3, r2
 800995a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800995c:	f7fa fe42 	bl	80045e4 <HAL_GetTick>
 8009960:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009962:	e008      	b.n	8009976 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009964:	f7fa fe3e 	bl	80045e4 <HAL_GetTick>
 8009968:	4602      	mov	r2, r0
 800996a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996c:	1ad3      	subs	r3, r2, r3
 800996e:	2b02      	cmp	r3, #2
 8009970:	d901      	bls.n	8009976 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8009972:	2303      	movs	r3, #3
 8009974:	e307      	b.n	8009f86 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009976:	4b21      	ldr	r3, [pc, #132]	; (80099fc <HAL_RCC_OscConfig+0x288>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f003 0304 	and.w	r3, r3, #4
 800997e:	2b00      	cmp	r3, #0
 8009980:	d0f0      	beq.n	8009964 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009982:	f7fa fe5d 	bl	8004640 <HAL_GetREVID>
 8009986:	4602      	mov	r2, r0
 8009988:	f241 0303 	movw	r3, #4099	; 0x1003
 800998c:	429a      	cmp	r2, r3
 800998e:	d817      	bhi.n	80099c0 <HAL_RCC_OscConfig+0x24c>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	691b      	ldr	r3, [r3, #16]
 8009994:	2b40      	cmp	r3, #64	; 0x40
 8009996:	d108      	bne.n	80099aa <HAL_RCC_OscConfig+0x236>
 8009998:	4b18      	ldr	r3, [pc, #96]	; (80099fc <HAL_RCC_OscConfig+0x288>)
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80099a0:	4a16      	ldr	r2, [pc, #88]	; (80099fc <HAL_RCC_OscConfig+0x288>)
 80099a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099a6:	6053      	str	r3, [r2, #4]
 80099a8:	e030      	b.n	8009a0c <HAL_RCC_OscConfig+0x298>
 80099aa:	4b14      	ldr	r3, [pc, #80]	; (80099fc <HAL_RCC_OscConfig+0x288>)
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	691b      	ldr	r3, [r3, #16]
 80099b6:	031b      	lsls	r3, r3, #12
 80099b8:	4910      	ldr	r1, [pc, #64]	; (80099fc <HAL_RCC_OscConfig+0x288>)
 80099ba:	4313      	orrs	r3, r2
 80099bc:	604b      	str	r3, [r1, #4]
 80099be:	e025      	b.n	8009a0c <HAL_RCC_OscConfig+0x298>
 80099c0:	4b0e      	ldr	r3, [pc, #56]	; (80099fc <HAL_RCC_OscConfig+0x288>)
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	691b      	ldr	r3, [r3, #16]
 80099cc:	061b      	lsls	r3, r3, #24
 80099ce:	490b      	ldr	r1, [pc, #44]	; (80099fc <HAL_RCC_OscConfig+0x288>)
 80099d0:	4313      	orrs	r3, r2
 80099d2:	604b      	str	r3, [r1, #4]
 80099d4:	e01a      	b.n	8009a0c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80099d6:	4b09      	ldr	r3, [pc, #36]	; (80099fc <HAL_RCC_OscConfig+0x288>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a08      	ldr	r2, [pc, #32]	; (80099fc <HAL_RCC_OscConfig+0x288>)
 80099dc:	f023 0301 	bic.w	r3, r3, #1
 80099e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099e2:	f7fa fdff 	bl	80045e4 <HAL_GetTick>
 80099e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80099e8:	e00a      	b.n	8009a00 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80099ea:	f7fa fdfb 	bl	80045e4 <HAL_GetTick>
 80099ee:	4602      	mov	r2, r0
 80099f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f2:	1ad3      	subs	r3, r2, r3
 80099f4:	2b02      	cmp	r3, #2
 80099f6:	d903      	bls.n	8009a00 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80099f8:	2303      	movs	r3, #3
 80099fa:	e2c4      	b.n	8009f86 <HAL_RCC_OscConfig+0x812>
 80099fc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009a00:	4ba4      	ldr	r3, [pc, #656]	; (8009c94 <HAL_RCC_OscConfig+0x520>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f003 0304 	and.w	r3, r3, #4
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d1ee      	bne.n	80099ea <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f003 0310 	and.w	r3, r3, #16
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	f000 80a9 	beq.w	8009b6c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a1a:	4b9e      	ldr	r3, [pc, #632]	; (8009c94 <HAL_RCC_OscConfig+0x520>)
 8009a1c:	691b      	ldr	r3, [r3, #16]
 8009a1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a22:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009a24:	4b9b      	ldr	r3, [pc, #620]	; (8009c94 <HAL_RCC_OscConfig+0x520>)
 8009a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a28:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009a2a:	69bb      	ldr	r3, [r7, #24]
 8009a2c:	2b08      	cmp	r3, #8
 8009a2e:	d007      	beq.n	8009a40 <HAL_RCC_OscConfig+0x2cc>
 8009a30:	69bb      	ldr	r3, [r7, #24]
 8009a32:	2b18      	cmp	r3, #24
 8009a34:	d13a      	bne.n	8009aac <HAL_RCC_OscConfig+0x338>
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	f003 0303 	and.w	r3, r3, #3
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d135      	bne.n	8009aac <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a40:	4b94      	ldr	r3, [pc, #592]	; (8009c94 <HAL_RCC_OscConfig+0x520>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d005      	beq.n	8009a58 <HAL_RCC_OscConfig+0x2e4>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	69db      	ldr	r3, [r3, #28]
 8009a50:	2b80      	cmp	r3, #128	; 0x80
 8009a52:	d001      	beq.n	8009a58 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8009a54:	2301      	movs	r3, #1
 8009a56:	e296      	b.n	8009f86 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a58:	f7fa fdf2 	bl	8004640 <HAL_GetREVID>
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	f241 0303 	movw	r3, #4099	; 0x1003
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d817      	bhi.n	8009a96 <HAL_RCC_OscConfig+0x322>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6a1b      	ldr	r3, [r3, #32]
 8009a6a:	2b20      	cmp	r3, #32
 8009a6c:	d108      	bne.n	8009a80 <HAL_RCC_OscConfig+0x30c>
 8009a6e:	4b89      	ldr	r3, [pc, #548]	; (8009c94 <HAL_RCC_OscConfig+0x520>)
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009a76:	4a87      	ldr	r2, [pc, #540]	; (8009c94 <HAL_RCC_OscConfig+0x520>)
 8009a78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a7c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a7e:	e075      	b.n	8009b6c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a80:	4b84      	ldr	r3, [pc, #528]	; (8009c94 <HAL_RCC_OscConfig+0x520>)
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6a1b      	ldr	r3, [r3, #32]
 8009a8c:	069b      	lsls	r3, r3, #26
 8009a8e:	4981      	ldr	r1, [pc, #516]	; (8009c94 <HAL_RCC_OscConfig+0x520>)
 8009a90:	4313      	orrs	r3, r2
 8009a92:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a94:	e06a      	b.n	8009b6c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a96:	4b7f      	ldr	r3, [pc, #508]	; (8009c94 <HAL_RCC_OscConfig+0x520>)
 8009a98:	68db      	ldr	r3, [r3, #12]
 8009a9a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a1b      	ldr	r3, [r3, #32]
 8009aa2:	061b      	lsls	r3, r3, #24
 8009aa4:	497b      	ldr	r1, [pc, #492]	; (8009c94 <HAL_RCC_OscConfig+0x520>)
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009aaa:	e05f      	b.n	8009b6c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	69db      	ldr	r3, [r3, #28]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d042      	beq.n	8009b3a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009ab4:	4b77      	ldr	r3, [pc, #476]	; (8009c94 <HAL_RCC_OscConfig+0x520>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a76      	ldr	r2, [pc, #472]	; (8009c94 <HAL_RCC_OscConfig+0x520>)
 8009aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009abe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ac0:	f7fa fd90 	bl	80045e4 <HAL_GetTick>
 8009ac4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009ac6:	e008      	b.n	8009ada <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009ac8:	f7fa fd8c 	bl	80045e4 <HAL_GetTick>
 8009acc:	4602      	mov	r2, r0
 8009ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad0:	1ad3      	subs	r3, r2, r3
 8009ad2:	2b02      	cmp	r3, #2
 8009ad4:	d901      	bls.n	8009ada <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8009ad6:	2303      	movs	r3, #3
 8009ad8:	e255      	b.n	8009f86 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009ada:	4b6e      	ldr	r3, [pc, #440]	; (8009c94 <HAL_RCC_OscConfig+0x520>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d0f0      	beq.n	8009ac8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009ae6:	f7fa fdab 	bl	8004640 <HAL_GetREVID>
 8009aea:	4602      	mov	r2, r0
 8009aec:	f241 0303 	movw	r3, #4099	; 0x1003
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d817      	bhi.n	8009b24 <HAL_RCC_OscConfig+0x3b0>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6a1b      	ldr	r3, [r3, #32]
 8009af8:	2b20      	cmp	r3, #32
 8009afa:	d108      	bne.n	8009b0e <HAL_RCC_OscConfig+0x39a>
 8009afc:	4b65      	ldr	r3, [pc, #404]	; (8009c94 <HAL_RCC_OscConfig+0x520>)
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009b04:	4a63      	ldr	r2, [pc, #396]	; (8009c94 <HAL_RCC_OscConfig+0x520>)
 8009b06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b0a:	6053      	str	r3, [r2, #4]
 8009b0c:	e02e      	b.n	8009b6c <HAL_RCC_OscConfig+0x3f8>
 8009b0e:	4b61      	ldr	r3, [pc, #388]	; (8009c94 <HAL_RCC_OscConfig+0x520>)
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a1b      	ldr	r3, [r3, #32]
 8009b1a:	069b      	lsls	r3, r3, #26
 8009b1c:	495d      	ldr	r1, [pc, #372]	; (8009c94 <HAL_RCC_OscConfig+0x520>)
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	604b      	str	r3, [r1, #4]
 8009b22:	e023      	b.n	8009b6c <HAL_RCC_OscConfig+0x3f8>
 8009b24:	4b5b      	ldr	r3, [pc, #364]	; (8009c94 <HAL_RCC_OscConfig+0x520>)
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6a1b      	ldr	r3, [r3, #32]
 8009b30:	061b      	lsls	r3, r3, #24
 8009b32:	4958      	ldr	r1, [pc, #352]	; (8009c94 <HAL_RCC_OscConfig+0x520>)
 8009b34:	4313      	orrs	r3, r2
 8009b36:	60cb      	str	r3, [r1, #12]
 8009b38:	e018      	b.n	8009b6c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009b3a:	4b56      	ldr	r3, [pc, #344]	; (8009c94 <HAL_RCC_OscConfig+0x520>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a55      	ldr	r2, [pc, #340]	; (8009c94 <HAL_RCC_OscConfig+0x520>)
 8009b40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b46:	f7fa fd4d 	bl	80045e4 <HAL_GetTick>
 8009b4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009b4c:	e008      	b.n	8009b60 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009b4e:	f7fa fd49 	bl	80045e4 <HAL_GetTick>
 8009b52:	4602      	mov	r2, r0
 8009b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b56:	1ad3      	subs	r3, r2, r3
 8009b58:	2b02      	cmp	r3, #2
 8009b5a:	d901      	bls.n	8009b60 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8009b5c:	2303      	movs	r3, #3
 8009b5e:	e212      	b.n	8009f86 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009b60:	4b4c      	ldr	r3, [pc, #304]	; (8009c94 <HAL_RCC_OscConfig+0x520>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d1f0      	bne.n	8009b4e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f003 0308 	and.w	r3, r3, #8
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d036      	beq.n	8009be6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	695b      	ldr	r3, [r3, #20]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d019      	beq.n	8009bb4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009b80:	4b44      	ldr	r3, [pc, #272]	; (8009c94 <HAL_RCC_OscConfig+0x520>)
 8009b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b84:	4a43      	ldr	r2, [pc, #268]	; (8009c94 <HAL_RCC_OscConfig+0x520>)
 8009b86:	f043 0301 	orr.w	r3, r3, #1
 8009b8a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b8c:	f7fa fd2a 	bl	80045e4 <HAL_GetTick>
 8009b90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009b92:	e008      	b.n	8009ba6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b94:	f7fa fd26 	bl	80045e4 <HAL_GetTick>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9c:	1ad3      	subs	r3, r2, r3
 8009b9e:	2b02      	cmp	r3, #2
 8009ba0:	d901      	bls.n	8009ba6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8009ba2:	2303      	movs	r3, #3
 8009ba4:	e1ef      	b.n	8009f86 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009ba6:	4b3b      	ldr	r3, [pc, #236]	; (8009c94 <HAL_RCC_OscConfig+0x520>)
 8009ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009baa:	f003 0302 	and.w	r3, r3, #2
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d0f0      	beq.n	8009b94 <HAL_RCC_OscConfig+0x420>
 8009bb2:	e018      	b.n	8009be6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009bb4:	4b37      	ldr	r3, [pc, #220]	; (8009c94 <HAL_RCC_OscConfig+0x520>)
 8009bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bb8:	4a36      	ldr	r2, [pc, #216]	; (8009c94 <HAL_RCC_OscConfig+0x520>)
 8009bba:	f023 0301 	bic.w	r3, r3, #1
 8009bbe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bc0:	f7fa fd10 	bl	80045e4 <HAL_GetTick>
 8009bc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009bc6:	e008      	b.n	8009bda <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009bc8:	f7fa fd0c 	bl	80045e4 <HAL_GetTick>
 8009bcc:	4602      	mov	r2, r0
 8009bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd0:	1ad3      	subs	r3, r2, r3
 8009bd2:	2b02      	cmp	r3, #2
 8009bd4:	d901      	bls.n	8009bda <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8009bd6:	2303      	movs	r3, #3
 8009bd8:	e1d5      	b.n	8009f86 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009bda:	4b2e      	ldr	r3, [pc, #184]	; (8009c94 <HAL_RCC_OscConfig+0x520>)
 8009bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bde:	f003 0302 	and.w	r3, r3, #2
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d1f0      	bne.n	8009bc8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f003 0320 	and.w	r3, r3, #32
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d036      	beq.n	8009c60 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	699b      	ldr	r3, [r3, #24]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d019      	beq.n	8009c2e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009bfa:	4b26      	ldr	r3, [pc, #152]	; (8009c94 <HAL_RCC_OscConfig+0x520>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4a25      	ldr	r2, [pc, #148]	; (8009c94 <HAL_RCC_OscConfig+0x520>)
 8009c00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009c04:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009c06:	f7fa fced 	bl	80045e4 <HAL_GetTick>
 8009c0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009c0c:	e008      	b.n	8009c20 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009c0e:	f7fa fce9 	bl	80045e4 <HAL_GetTick>
 8009c12:	4602      	mov	r2, r0
 8009c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c16:	1ad3      	subs	r3, r2, r3
 8009c18:	2b02      	cmp	r3, #2
 8009c1a:	d901      	bls.n	8009c20 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8009c1c:	2303      	movs	r3, #3
 8009c1e:	e1b2      	b.n	8009f86 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009c20:	4b1c      	ldr	r3, [pc, #112]	; (8009c94 <HAL_RCC_OscConfig+0x520>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d0f0      	beq.n	8009c0e <HAL_RCC_OscConfig+0x49a>
 8009c2c:	e018      	b.n	8009c60 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009c2e:	4b19      	ldr	r3, [pc, #100]	; (8009c94 <HAL_RCC_OscConfig+0x520>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4a18      	ldr	r2, [pc, #96]	; (8009c94 <HAL_RCC_OscConfig+0x520>)
 8009c34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c38:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009c3a:	f7fa fcd3 	bl	80045e4 <HAL_GetTick>
 8009c3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009c40:	e008      	b.n	8009c54 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009c42:	f7fa fccf 	bl	80045e4 <HAL_GetTick>
 8009c46:	4602      	mov	r2, r0
 8009c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4a:	1ad3      	subs	r3, r2, r3
 8009c4c:	2b02      	cmp	r3, #2
 8009c4e:	d901      	bls.n	8009c54 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8009c50:	2303      	movs	r3, #3
 8009c52:	e198      	b.n	8009f86 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009c54:	4b0f      	ldr	r3, [pc, #60]	; (8009c94 <HAL_RCC_OscConfig+0x520>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d1f0      	bne.n	8009c42 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f003 0304 	and.w	r3, r3, #4
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	f000 8085 	beq.w	8009d78 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009c6e:	4b0a      	ldr	r3, [pc, #40]	; (8009c98 <HAL_RCC_OscConfig+0x524>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	4a09      	ldr	r2, [pc, #36]	; (8009c98 <HAL_RCC_OscConfig+0x524>)
 8009c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009c7a:	f7fa fcb3 	bl	80045e4 <HAL_GetTick>
 8009c7e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c80:	e00c      	b.n	8009c9c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009c82:	f7fa fcaf 	bl	80045e4 <HAL_GetTick>
 8009c86:	4602      	mov	r2, r0
 8009c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8a:	1ad3      	subs	r3, r2, r3
 8009c8c:	2b64      	cmp	r3, #100	; 0x64
 8009c8e:	d905      	bls.n	8009c9c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8009c90:	2303      	movs	r3, #3
 8009c92:	e178      	b.n	8009f86 <HAL_RCC_OscConfig+0x812>
 8009c94:	58024400 	.word	0x58024400
 8009c98:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c9c:	4b96      	ldr	r3, [pc, #600]	; (8009ef8 <HAL_RCC_OscConfig+0x784>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d0ec      	beq.n	8009c82 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d106      	bne.n	8009cbe <HAL_RCC_OscConfig+0x54a>
 8009cb0:	4b92      	ldr	r3, [pc, #584]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cb4:	4a91      	ldr	r2, [pc, #580]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009cb6:	f043 0301 	orr.w	r3, r3, #1
 8009cba:	6713      	str	r3, [r2, #112]	; 0x70
 8009cbc:	e02d      	b.n	8009d1a <HAL_RCC_OscConfig+0x5a6>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	689b      	ldr	r3, [r3, #8]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d10c      	bne.n	8009ce0 <HAL_RCC_OscConfig+0x56c>
 8009cc6:	4b8d      	ldr	r3, [pc, #564]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cca:	4a8c      	ldr	r2, [pc, #560]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009ccc:	f023 0301 	bic.w	r3, r3, #1
 8009cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8009cd2:	4b8a      	ldr	r3, [pc, #552]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cd6:	4a89      	ldr	r2, [pc, #548]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009cd8:	f023 0304 	bic.w	r3, r3, #4
 8009cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8009cde:	e01c      	b.n	8009d1a <HAL_RCC_OscConfig+0x5a6>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	689b      	ldr	r3, [r3, #8]
 8009ce4:	2b05      	cmp	r3, #5
 8009ce6:	d10c      	bne.n	8009d02 <HAL_RCC_OscConfig+0x58e>
 8009ce8:	4b84      	ldr	r3, [pc, #528]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cec:	4a83      	ldr	r2, [pc, #524]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009cee:	f043 0304 	orr.w	r3, r3, #4
 8009cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8009cf4:	4b81      	ldr	r3, [pc, #516]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cf8:	4a80      	ldr	r2, [pc, #512]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009cfa:	f043 0301 	orr.w	r3, r3, #1
 8009cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8009d00:	e00b      	b.n	8009d1a <HAL_RCC_OscConfig+0x5a6>
 8009d02:	4b7e      	ldr	r3, [pc, #504]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d06:	4a7d      	ldr	r2, [pc, #500]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009d08:	f023 0301 	bic.w	r3, r3, #1
 8009d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8009d0e:	4b7b      	ldr	r3, [pc, #492]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d12:	4a7a      	ldr	r2, [pc, #488]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009d14:	f023 0304 	bic.w	r3, r3, #4
 8009d18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d015      	beq.n	8009d4e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d22:	f7fa fc5f 	bl	80045e4 <HAL_GetTick>
 8009d26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d28:	e00a      	b.n	8009d40 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009d2a:	f7fa fc5b 	bl	80045e4 <HAL_GetTick>
 8009d2e:	4602      	mov	r2, r0
 8009d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d32:	1ad3      	subs	r3, r2, r3
 8009d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d901      	bls.n	8009d40 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8009d3c:	2303      	movs	r3, #3
 8009d3e:	e122      	b.n	8009f86 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d40:	4b6e      	ldr	r3, [pc, #440]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d44:	f003 0302 	and.w	r3, r3, #2
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d0ee      	beq.n	8009d2a <HAL_RCC_OscConfig+0x5b6>
 8009d4c:	e014      	b.n	8009d78 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d4e:	f7fa fc49 	bl	80045e4 <HAL_GetTick>
 8009d52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009d54:	e00a      	b.n	8009d6c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009d56:	f7fa fc45 	bl	80045e4 <HAL_GetTick>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5e:	1ad3      	subs	r3, r2, r3
 8009d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d901      	bls.n	8009d6c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8009d68:	2303      	movs	r3, #3
 8009d6a:	e10c      	b.n	8009f86 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009d6c:	4b63      	ldr	r3, [pc, #396]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d70:	f003 0302 	and.w	r3, r3, #2
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d1ee      	bne.n	8009d56 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	f000 8101 	beq.w	8009f84 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009d82:	4b5e      	ldr	r3, [pc, #376]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009d84:	691b      	ldr	r3, [r3, #16]
 8009d86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d8a:	2b18      	cmp	r3, #24
 8009d8c:	f000 80bc 	beq.w	8009f08 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d94:	2b02      	cmp	r3, #2
 8009d96:	f040 8095 	bne.w	8009ec4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d9a:	4b58      	ldr	r3, [pc, #352]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a57      	ldr	r2, [pc, #348]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009da0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009da4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009da6:	f7fa fc1d 	bl	80045e4 <HAL_GetTick>
 8009daa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009dac:	e008      	b.n	8009dc0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009dae:	f7fa fc19 	bl	80045e4 <HAL_GetTick>
 8009db2:	4602      	mov	r2, r0
 8009db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db6:	1ad3      	subs	r3, r2, r3
 8009db8:	2b02      	cmp	r3, #2
 8009dba:	d901      	bls.n	8009dc0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8009dbc:	2303      	movs	r3, #3
 8009dbe:	e0e2      	b.n	8009f86 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009dc0:	4b4e      	ldr	r3, [pc, #312]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d1f0      	bne.n	8009dae <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009dcc:	4b4b      	ldr	r3, [pc, #300]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009dce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009dd0:	4b4b      	ldr	r3, [pc, #300]	; (8009f00 <HAL_RCC_OscConfig+0x78c>)
 8009dd2:	4013      	ands	r3, r2
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009ddc:	0112      	lsls	r2, r2, #4
 8009dde:	430a      	orrs	r2, r1
 8009de0:	4946      	ldr	r1, [pc, #280]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009de2:	4313      	orrs	r3, r2
 8009de4:	628b      	str	r3, [r1, #40]	; 0x28
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dea:	3b01      	subs	r3, #1
 8009dec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009df4:	3b01      	subs	r3, #1
 8009df6:	025b      	lsls	r3, r3, #9
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	431a      	orrs	r2, r3
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e00:	3b01      	subs	r3, #1
 8009e02:	041b      	lsls	r3, r3, #16
 8009e04:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009e08:	431a      	orrs	r2, r3
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e0e:	3b01      	subs	r3, #1
 8009e10:	061b      	lsls	r3, r3, #24
 8009e12:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009e16:	4939      	ldr	r1, [pc, #228]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009e1c:	4b37      	ldr	r3, [pc, #220]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e20:	4a36      	ldr	r2, [pc, #216]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009e22:	f023 0301 	bic.w	r3, r3, #1
 8009e26:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009e28:	4b34      	ldr	r3, [pc, #208]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009e2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e2c:	4b35      	ldr	r3, [pc, #212]	; (8009f04 <HAL_RCC_OscConfig+0x790>)
 8009e2e:	4013      	ands	r3, r2
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009e34:	00d2      	lsls	r2, r2, #3
 8009e36:	4931      	ldr	r1, [pc, #196]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009e3c:	4b2f      	ldr	r3, [pc, #188]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e40:	f023 020c 	bic.w	r2, r3, #12
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e48:	492c      	ldr	r1, [pc, #176]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009e4e:	4b2b      	ldr	r3, [pc, #172]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e52:	f023 0202 	bic.w	r2, r3, #2
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e5a:	4928      	ldr	r1, [pc, #160]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009e60:	4b26      	ldr	r3, [pc, #152]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e64:	4a25      	ldr	r2, [pc, #148]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e6c:	4b23      	ldr	r3, [pc, #140]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e70:	4a22      	ldr	r2, [pc, #136]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009e78:	4b20      	ldr	r3, [pc, #128]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e7c:	4a1f      	ldr	r2, [pc, #124]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009e7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009e84:	4b1d      	ldr	r3, [pc, #116]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e88:	4a1c      	ldr	r2, [pc, #112]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009e8a:	f043 0301 	orr.w	r3, r3, #1
 8009e8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009e90:	4b1a      	ldr	r3, [pc, #104]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a19      	ldr	r2, [pc, #100]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009e96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009e9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e9c:	f7fa fba2 	bl	80045e4 <HAL_GetTick>
 8009ea0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009ea2:	e008      	b.n	8009eb6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009ea4:	f7fa fb9e 	bl	80045e4 <HAL_GetTick>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eac:	1ad3      	subs	r3, r2, r3
 8009eae:	2b02      	cmp	r3, #2
 8009eb0:	d901      	bls.n	8009eb6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8009eb2:	2303      	movs	r3, #3
 8009eb4:	e067      	b.n	8009f86 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009eb6:	4b11      	ldr	r3, [pc, #68]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d0f0      	beq.n	8009ea4 <HAL_RCC_OscConfig+0x730>
 8009ec2:	e05f      	b.n	8009f84 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ec4:	4b0d      	ldr	r3, [pc, #52]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a0c      	ldr	r2, [pc, #48]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009eca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009ece:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ed0:	f7fa fb88 	bl	80045e4 <HAL_GetTick>
 8009ed4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009ed6:	e008      	b.n	8009eea <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009ed8:	f7fa fb84 	bl	80045e4 <HAL_GetTick>
 8009edc:	4602      	mov	r2, r0
 8009ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee0:	1ad3      	subs	r3, r2, r3
 8009ee2:	2b02      	cmp	r3, #2
 8009ee4:	d901      	bls.n	8009eea <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8009ee6:	2303      	movs	r3, #3
 8009ee8:	e04d      	b.n	8009f86 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009eea:	4b04      	ldr	r3, [pc, #16]	; (8009efc <HAL_RCC_OscConfig+0x788>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d1f0      	bne.n	8009ed8 <HAL_RCC_OscConfig+0x764>
 8009ef6:	e045      	b.n	8009f84 <HAL_RCC_OscConfig+0x810>
 8009ef8:	58024800 	.word	0x58024800
 8009efc:	58024400 	.word	0x58024400
 8009f00:	fffffc0c 	.word	0xfffffc0c
 8009f04:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009f08:	4b21      	ldr	r3, [pc, #132]	; (8009f90 <HAL_RCC_OscConfig+0x81c>)
 8009f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f0c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009f0e:	4b20      	ldr	r3, [pc, #128]	; (8009f90 <HAL_RCC_OscConfig+0x81c>)
 8009f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f12:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	d031      	beq.n	8009f80 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	f003 0203 	and.w	r2, r3, #3
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d12a      	bne.n	8009f80 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	091b      	lsrs	r3, r3, #4
 8009f2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d122      	bne.n	8009f80 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f44:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d11a      	bne.n	8009f80 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	0a5b      	lsrs	r3, r3, #9
 8009f4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f56:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d111      	bne.n	8009f80 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	0c1b      	lsrs	r3, r3, #16
 8009f60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f68:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d108      	bne.n	8009f80 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	0e1b      	lsrs	r3, r3, #24
 8009f72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f7a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d001      	beq.n	8009f84 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8009f80:	2301      	movs	r3, #1
 8009f82:	e000      	b.n	8009f86 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8009f84:	2300      	movs	r3, #0
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3730      	adds	r7, #48	; 0x30
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop
 8009f90:	58024400 	.word	0x58024400

08009f94 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b086      	sub	sp, #24
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d101      	bne.n	8009fa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	e19c      	b.n	800a2e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009fa8:	4b8a      	ldr	r3, [pc, #552]	; (800a1d4 <HAL_RCC_ClockConfig+0x240>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f003 030f 	and.w	r3, r3, #15
 8009fb0:	683a      	ldr	r2, [r7, #0]
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d910      	bls.n	8009fd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009fb6:	4b87      	ldr	r3, [pc, #540]	; (800a1d4 <HAL_RCC_ClockConfig+0x240>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f023 020f 	bic.w	r2, r3, #15
 8009fbe:	4985      	ldr	r1, [pc, #532]	; (800a1d4 <HAL_RCC_ClockConfig+0x240>)
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009fc6:	4b83      	ldr	r3, [pc, #524]	; (800a1d4 <HAL_RCC_ClockConfig+0x240>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f003 030f 	and.w	r3, r3, #15
 8009fce:	683a      	ldr	r2, [r7, #0]
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d001      	beq.n	8009fd8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	e184      	b.n	800a2e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f003 0304 	and.w	r3, r3, #4
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d010      	beq.n	800a006 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	691a      	ldr	r2, [r3, #16]
 8009fe8:	4b7b      	ldr	r3, [pc, #492]	; (800a1d8 <HAL_RCC_ClockConfig+0x244>)
 8009fea:	699b      	ldr	r3, [r3, #24]
 8009fec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d908      	bls.n	800a006 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009ff4:	4b78      	ldr	r3, [pc, #480]	; (800a1d8 <HAL_RCC_ClockConfig+0x244>)
 8009ff6:	699b      	ldr	r3, [r3, #24]
 8009ff8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	691b      	ldr	r3, [r3, #16]
 800a000:	4975      	ldr	r1, [pc, #468]	; (800a1d8 <HAL_RCC_ClockConfig+0x244>)
 800a002:	4313      	orrs	r3, r2
 800a004:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f003 0308 	and.w	r3, r3, #8
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d010      	beq.n	800a034 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	695a      	ldr	r2, [r3, #20]
 800a016:	4b70      	ldr	r3, [pc, #448]	; (800a1d8 <HAL_RCC_ClockConfig+0x244>)
 800a018:	69db      	ldr	r3, [r3, #28]
 800a01a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a01e:	429a      	cmp	r2, r3
 800a020:	d908      	bls.n	800a034 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a022:	4b6d      	ldr	r3, [pc, #436]	; (800a1d8 <HAL_RCC_ClockConfig+0x244>)
 800a024:	69db      	ldr	r3, [r3, #28]
 800a026:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	695b      	ldr	r3, [r3, #20]
 800a02e:	496a      	ldr	r1, [pc, #424]	; (800a1d8 <HAL_RCC_ClockConfig+0x244>)
 800a030:	4313      	orrs	r3, r2
 800a032:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f003 0310 	and.w	r3, r3, #16
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d010      	beq.n	800a062 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	699a      	ldr	r2, [r3, #24]
 800a044:	4b64      	ldr	r3, [pc, #400]	; (800a1d8 <HAL_RCC_ClockConfig+0x244>)
 800a046:	69db      	ldr	r3, [r3, #28]
 800a048:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d908      	bls.n	800a062 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a050:	4b61      	ldr	r3, [pc, #388]	; (800a1d8 <HAL_RCC_ClockConfig+0x244>)
 800a052:	69db      	ldr	r3, [r3, #28]
 800a054:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	699b      	ldr	r3, [r3, #24]
 800a05c:	495e      	ldr	r1, [pc, #376]	; (800a1d8 <HAL_RCC_ClockConfig+0x244>)
 800a05e:	4313      	orrs	r3, r2
 800a060:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f003 0320 	and.w	r3, r3, #32
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d010      	beq.n	800a090 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	69da      	ldr	r2, [r3, #28]
 800a072:	4b59      	ldr	r3, [pc, #356]	; (800a1d8 <HAL_RCC_ClockConfig+0x244>)
 800a074:	6a1b      	ldr	r3, [r3, #32]
 800a076:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d908      	bls.n	800a090 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a07e:	4b56      	ldr	r3, [pc, #344]	; (800a1d8 <HAL_RCC_ClockConfig+0x244>)
 800a080:	6a1b      	ldr	r3, [r3, #32]
 800a082:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	69db      	ldr	r3, [r3, #28]
 800a08a:	4953      	ldr	r1, [pc, #332]	; (800a1d8 <HAL_RCC_ClockConfig+0x244>)
 800a08c:	4313      	orrs	r3, r2
 800a08e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f003 0302 	and.w	r3, r3, #2
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d010      	beq.n	800a0be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	68da      	ldr	r2, [r3, #12]
 800a0a0:	4b4d      	ldr	r3, [pc, #308]	; (800a1d8 <HAL_RCC_ClockConfig+0x244>)
 800a0a2:	699b      	ldr	r3, [r3, #24]
 800a0a4:	f003 030f 	and.w	r3, r3, #15
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d908      	bls.n	800a0be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a0ac:	4b4a      	ldr	r3, [pc, #296]	; (800a1d8 <HAL_RCC_ClockConfig+0x244>)
 800a0ae:	699b      	ldr	r3, [r3, #24]
 800a0b0:	f023 020f 	bic.w	r2, r3, #15
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	68db      	ldr	r3, [r3, #12]
 800a0b8:	4947      	ldr	r1, [pc, #284]	; (800a1d8 <HAL_RCC_ClockConfig+0x244>)
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f003 0301 	and.w	r3, r3, #1
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d055      	beq.n	800a176 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a0ca:	4b43      	ldr	r3, [pc, #268]	; (800a1d8 <HAL_RCC_ClockConfig+0x244>)
 800a0cc:	699b      	ldr	r3, [r3, #24]
 800a0ce:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	689b      	ldr	r3, [r3, #8]
 800a0d6:	4940      	ldr	r1, [pc, #256]	; (800a1d8 <HAL_RCC_ClockConfig+0x244>)
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	2b02      	cmp	r3, #2
 800a0e2:	d107      	bne.n	800a0f4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a0e4:	4b3c      	ldr	r3, [pc, #240]	; (800a1d8 <HAL_RCC_ClockConfig+0x244>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d121      	bne.n	800a134 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	e0f6      	b.n	800a2e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	2b03      	cmp	r3, #3
 800a0fa:	d107      	bne.n	800a10c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a0fc:	4b36      	ldr	r3, [pc, #216]	; (800a1d8 <HAL_RCC_ClockConfig+0x244>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a104:	2b00      	cmp	r3, #0
 800a106:	d115      	bne.n	800a134 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a108:	2301      	movs	r3, #1
 800a10a:	e0ea      	b.n	800a2e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	2b01      	cmp	r3, #1
 800a112:	d107      	bne.n	800a124 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a114:	4b30      	ldr	r3, [pc, #192]	; (800a1d8 <HAL_RCC_ClockConfig+0x244>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d109      	bne.n	800a134 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a120:	2301      	movs	r3, #1
 800a122:	e0de      	b.n	800a2e2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a124:	4b2c      	ldr	r3, [pc, #176]	; (800a1d8 <HAL_RCC_ClockConfig+0x244>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f003 0304 	and.w	r3, r3, #4
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d101      	bne.n	800a134 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a130:	2301      	movs	r3, #1
 800a132:	e0d6      	b.n	800a2e2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a134:	4b28      	ldr	r3, [pc, #160]	; (800a1d8 <HAL_RCC_ClockConfig+0x244>)
 800a136:	691b      	ldr	r3, [r3, #16]
 800a138:	f023 0207 	bic.w	r2, r3, #7
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	4925      	ldr	r1, [pc, #148]	; (800a1d8 <HAL_RCC_ClockConfig+0x244>)
 800a142:	4313      	orrs	r3, r2
 800a144:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a146:	f7fa fa4d 	bl	80045e4 <HAL_GetTick>
 800a14a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a14c:	e00a      	b.n	800a164 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a14e:	f7fa fa49 	bl	80045e4 <HAL_GetTick>
 800a152:	4602      	mov	r2, r0
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	1ad3      	subs	r3, r2, r3
 800a158:	f241 3288 	movw	r2, #5000	; 0x1388
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d901      	bls.n	800a164 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a160:	2303      	movs	r3, #3
 800a162:	e0be      	b.n	800a2e2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a164:	4b1c      	ldr	r3, [pc, #112]	; (800a1d8 <HAL_RCC_ClockConfig+0x244>)
 800a166:	691b      	ldr	r3, [r3, #16]
 800a168:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	00db      	lsls	r3, r3, #3
 800a172:	429a      	cmp	r2, r3
 800a174:	d1eb      	bne.n	800a14e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f003 0302 	and.w	r3, r3, #2
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d010      	beq.n	800a1a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	68da      	ldr	r2, [r3, #12]
 800a186:	4b14      	ldr	r3, [pc, #80]	; (800a1d8 <HAL_RCC_ClockConfig+0x244>)
 800a188:	699b      	ldr	r3, [r3, #24]
 800a18a:	f003 030f 	and.w	r3, r3, #15
 800a18e:	429a      	cmp	r2, r3
 800a190:	d208      	bcs.n	800a1a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a192:	4b11      	ldr	r3, [pc, #68]	; (800a1d8 <HAL_RCC_ClockConfig+0x244>)
 800a194:	699b      	ldr	r3, [r3, #24]
 800a196:	f023 020f 	bic.w	r2, r3, #15
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	490e      	ldr	r1, [pc, #56]	; (800a1d8 <HAL_RCC_ClockConfig+0x244>)
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a1a4:	4b0b      	ldr	r3, [pc, #44]	; (800a1d4 <HAL_RCC_ClockConfig+0x240>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f003 030f 	and.w	r3, r3, #15
 800a1ac:	683a      	ldr	r2, [r7, #0]
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d214      	bcs.n	800a1dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a1b2:	4b08      	ldr	r3, [pc, #32]	; (800a1d4 <HAL_RCC_ClockConfig+0x240>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f023 020f 	bic.w	r2, r3, #15
 800a1ba:	4906      	ldr	r1, [pc, #24]	; (800a1d4 <HAL_RCC_ClockConfig+0x240>)
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1c2:	4b04      	ldr	r3, [pc, #16]	; (800a1d4 <HAL_RCC_ClockConfig+0x240>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f003 030f 	and.w	r3, r3, #15
 800a1ca:	683a      	ldr	r2, [r7, #0]
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d005      	beq.n	800a1dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	e086      	b.n	800a2e2 <HAL_RCC_ClockConfig+0x34e>
 800a1d4:	52002000 	.word	0x52002000
 800a1d8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f003 0304 	and.w	r3, r3, #4
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d010      	beq.n	800a20a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	691a      	ldr	r2, [r3, #16]
 800a1ec:	4b3f      	ldr	r3, [pc, #252]	; (800a2ec <HAL_RCC_ClockConfig+0x358>)
 800a1ee:	699b      	ldr	r3, [r3, #24]
 800a1f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d208      	bcs.n	800a20a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a1f8:	4b3c      	ldr	r3, [pc, #240]	; (800a2ec <HAL_RCC_ClockConfig+0x358>)
 800a1fa:	699b      	ldr	r3, [r3, #24]
 800a1fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	691b      	ldr	r3, [r3, #16]
 800a204:	4939      	ldr	r1, [pc, #228]	; (800a2ec <HAL_RCC_ClockConfig+0x358>)
 800a206:	4313      	orrs	r3, r2
 800a208:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f003 0308 	and.w	r3, r3, #8
 800a212:	2b00      	cmp	r3, #0
 800a214:	d010      	beq.n	800a238 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	695a      	ldr	r2, [r3, #20]
 800a21a:	4b34      	ldr	r3, [pc, #208]	; (800a2ec <HAL_RCC_ClockConfig+0x358>)
 800a21c:	69db      	ldr	r3, [r3, #28]
 800a21e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a222:	429a      	cmp	r2, r3
 800a224:	d208      	bcs.n	800a238 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a226:	4b31      	ldr	r3, [pc, #196]	; (800a2ec <HAL_RCC_ClockConfig+0x358>)
 800a228:	69db      	ldr	r3, [r3, #28]
 800a22a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	695b      	ldr	r3, [r3, #20]
 800a232:	492e      	ldr	r1, [pc, #184]	; (800a2ec <HAL_RCC_ClockConfig+0x358>)
 800a234:	4313      	orrs	r3, r2
 800a236:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f003 0310 	and.w	r3, r3, #16
 800a240:	2b00      	cmp	r3, #0
 800a242:	d010      	beq.n	800a266 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	699a      	ldr	r2, [r3, #24]
 800a248:	4b28      	ldr	r3, [pc, #160]	; (800a2ec <HAL_RCC_ClockConfig+0x358>)
 800a24a:	69db      	ldr	r3, [r3, #28]
 800a24c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a250:	429a      	cmp	r2, r3
 800a252:	d208      	bcs.n	800a266 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a254:	4b25      	ldr	r3, [pc, #148]	; (800a2ec <HAL_RCC_ClockConfig+0x358>)
 800a256:	69db      	ldr	r3, [r3, #28]
 800a258:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	699b      	ldr	r3, [r3, #24]
 800a260:	4922      	ldr	r1, [pc, #136]	; (800a2ec <HAL_RCC_ClockConfig+0x358>)
 800a262:	4313      	orrs	r3, r2
 800a264:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f003 0320 	and.w	r3, r3, #32
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d010      	beq.n	800a294 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	69da      	ldr	r2, [r3, #28]
 800a276:	4b1d      	ldr	r3, [pc, #116]	; (800a2ec <HAL_RCC_ClockConfig+0x358>)
 800a278:	6a1b      	ldr	r3, [r3, #32]
 800a27a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a27e:	429a      	cmp	r2, r3
 800a280:	d208      	bcs.n	800a294 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a282:	4b1a      	ldr	r3, [pc, #104]	; (800a2ec <HAL_RCC_ClockConfig+0x358>)
 800a284:	6a1b      	ldr	r3, [r3, #32]
 800a286:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	69db      	ldr	r3, [r3, #28]
 800a28e:	4917      	ldr	r1, [pc, #92]	; (800a2ec <HAL_RCC_ClockConfig+0x358>)
 800a290:	4313      	orrs	r3, r2
 800a292:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a294:	f000 f844 	bl	800a320 <HAL_RCC_GetSysClockFreq>
 800a298:	4601      	mov	r1, r0
 800a29a:	4b14      	ldr	r3, [pc, #80]	; (800a2ec <HAL_RCC_ClockConfig+0x358>)
 800a29c:	699b      	ldr	r3, [r3, #24]
 800a29e:	0a1b      	lsrs	r3, r3, #8
 800a2a0:	f003 030f 	and.w	r3, r3, #15
 800a2a4:	4a12      	ldr	r2, [pc, #72]	; (800a2f0 <HAL_RCC_ClockConfig+0x35c>)
 800a2a6:	5cd3      	ldrb	r3, [r2, r3]
 800a2a8:	f003 031f 	and.w	r3, r3, #31
 800a2ac:	fa21 f303 	lsr.w	r3, r1, r3
 800a2b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a2b2:	4b0e      	ldr	r3, [pc, #56]	; (800a2ec <HAL_RCC_ClockConfig+0x358>)
 800a2b4:	699b      	ldr	r3, [r3, #24]
 800a2b6:	f003 030f 	and.w	r3, r3, #15
 800a2ba:	4a0d      	ldr	r2, [pc, #52]	; (800a2f0 <HAL_RCC_ClockConfig+0x35c>)
 800a2bc:	5cd3      	ldrb	r3, [r2, r3]
 800a2be:	f003 031f 	and.w	r3, r3, #31
 800a2c2:	693a      	ldr	r2, [r7, #16]
 800a2c4:	fa22 f303 	lsr.w	r3, r2, r3
 800a2c8:	4a0a      	ldr	r2, [pc, #40]	; (800a2f4 <HAL_RCC_ClockConfig+0x360>)
 800a2ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a2cc:	4a0a      	ldr	r2, [pc, #40]	; (800a2f8 <HAL_RCC_ClockConfig+0x364>)
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800a2d2:	4b0a      	ldr	r3, [pc, #40]	; (800a2fc <HAL_RCC_ClockConfig+0x368>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f7fa f93a 	bl	8004550 <HAL_InitTick>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a2e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3718      	adds	r7, #24
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	58024400 	.word	0x58024400
 800a2f0:	0801af50 	.word	0x0801af50
 800a2f4:	24000014 	.word	0x24000014
 800a2f8:	24000010 	.word	0x24000010
 800a2fc:	24000018 	.word	0x24000018

0800a300 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800a300:	b480      	push	{r7}
 800a302:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 800a304:	4b05      	ldr	r3, [pc, #20]	; (800a31c <HAL_RCC_EnableCSS+0x1c>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	4a04      	ldr	r2, [pc, #16]	; (800a31c <HAL_RCC_EnableCSS+0x1c>)
 800a30a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a30e:	6013      	str	r3, [r2, #0]
}
 800a310:	bf00      	nop
 800a312:	46bd      	mov	sp, r7
 800a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a318:	4770      	bx	lr
 800a31a:	bf00      	nop
 800a31c:	58024400 	.word	0x58024400

0800a320 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a320:	b480      	push	{r7}
 800a322:	b089      	sub	sp, #36	; 0x24
 800a324:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a326:	4baf      	ldr	r3, [pc, #700]	; (800a5e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a328:	691b      	ldr	r3, [r3, #16]
 800a32a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a32e:	2b18      	cmp	r3, #24
 800a330:	f200 814e 	bhi.w	800a5d0 <HAL_RCC_GetSysClockFreq+0x2b0>
 800a334:	a201      	add	r2, pc, #4	; (adr r2, 800a33c <HAL_RCC_GetSysClockFreq+0x1c>)
 800a336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a33a:	bf00      	nop
 800a33c:	0800a3a1 	.word	0x0800a3a1
 800a340:	0800a5d1 	.word	0x0800a5d1
 800a344:	0800a5d1 	.word	0x0800a5d1
 800a348:	0800a5d1 	.word	0x0800a5d1
 800a34c:	0800a5d1 	.word	0x0800a5d1
 800a350:	0800a5d1 	.word	0x0800a5d1
 800a354:	0800a5d1 	.word	0x0800a5d1
 800a358:	0800a5d1 	.word	0x0800a5d1
 800a35c:	0800a3c7 	.word	0x0800a3c7
 800a360:	0800a5d1 	.word	0x0800a5d1
 800a364:	0800a5d1 	.word	0x0800a5d1
 800a368:	0800a5d1 	.word	0x0800a5d1
 800a36c:	0800a5d1 	.word	0x0800a5d1
 800a370:	0800a5d1 	.word	0x0800a5d1
 800a374:	0800a5d1 	.word	0x0800a5d1
 800a378:	0800a5d1 	.word	0x0800a5d1
 800a37c:	0800a3cd 	.word	0x0800a3cd
 800a380:	0800a5d1 	.word	0x0800a5d1
 800a384:	0800a5d1 	.word	0x0800a5d1
 800a388:	0800a5d1 	.word	0x0800a5d1
 800a38c:	0800a5d1 	.word	0x0800a5d1
 800a390:	0800a5d1 	.word	0x0800a5d1
 800a394:	0800a5d1 	.word	0x0800a5d1
 800a398:	0800a5d1 	.word	0x0800a5d1
 800a39c:	0800a3d3 	.word	0x0800a3d3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3a0:	4b90      	ldr	r3, [pc, #576]	; (800a5e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f003 0320 	and.w	r3, r3, #32
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d009      	beq.n	800a3c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a3ac:	4b8d      	ldr	r3, [pc, #564]	; (800a5e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	08db      	lsrs	r3, r3, #3
 800a3b2:	f003 0303 	and.w	r3, r3, #3
 800a3b6:	4a8c      	ldr	r2, [pc, #560]	; (800a5e8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800a3b8:	fa22 f303 	lsr.w	r3, r2, r3
 800a3bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800a3be:	e10a      	b.n	800a5d6 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a3c0:	4b89      	ldr	r3, [pc, #548]	; (800a5e8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800a3c2:	61bb      	str	r3, [r7, #24]
    break;
 800a3c4:	e107      	b.n	800a5d6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800a3c6:	4b89      	ldr	r3, [pc, #548]	; (800a5ec <HAL_RCC_GetSysClockFreq+0x2cc>)
 800a3c8:	61bb      	str	r3, [r7, #24]
    break;
 800a3ca:	e104      	b.n	800a5d6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800a3cc:	4b88      	ldr	r3, [pc, #544]	; (800a5f0 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800a3ce:	61bb      	str	r3, [r7, #24]
    break;
 800a3d0:	e101      	b.n	800a5d6 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a3d2:	4b84      	ldr	r3, [pc, #528]	; (800a5e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a3d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3d6:	f003 0303 	and.w	r3, r3, #3
 800a3da:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800a3dc:	4b81      	ldr	r3, [pc, #516]	; (800a5e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a3de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3e0:	091b      	lsrs	r3, r3, #4
 800a3e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a3e6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a3e8:	4b7e      	ldr	r3, [pc, #504]	; (800a5e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ec:	f003 0301 	and.w	r3, r3, #1
 800a3f0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a3f2:	4b7c      	ldr	r3, [pc, #496]	; (800a5e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a3f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3f6:	08db      	lsrs	r3, r3, #3
 800a3f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a3fc:	68fa      	ldr	r2, [r7, #12]
 800a3fe:	fb02 f303 	mul.w	r3, r2, r3
 800a402:	ee07 3a90 	vmov	s15, r3
 800a406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a40a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	2b00      	cmp	r3, #0
 800a412:	f000 80da 	beq.w	800a5ca <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d05a      	beq.n	800a4d2 <HAL_RCC_GetSysClockFreq+0x1b2>
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d302      	bcc.n	800a426 <HAL_RCC_GetSysClockFreq+0x106>
 800a420:	2b02      	cmp	r3, #2
 800a422:	d078      	beq.n	800a516 <HAL_RCC_GetSysClockFreq+0x1f6>
 800a424:	e099      	b.n	800a55a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a426:	4b6f      	ldr	r3, [pc, #444]	; (800a5e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f003 0320 	and.w	r3, r3, #32
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d02d      	beq.n	800a48e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a432:	4b6c      	ldr	r3, [pc, #432]	; (800a5e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	08db      	lsrs	r3, r3, #3
 800a438:	f003 0303 	and.w	r3, r3, #3
 800a43c:	4a6a      	ldr	r2, [pc, #424]	; (800a5e8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800a43e:	fa22 f303 	lsr.w	r3, r2, r3
 800a442:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	ee07 3a90 	vmov	s15, r3
 800a44a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	ee07 3a90 	vmov	s15, r3
 800a454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a458:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a45c:	4b61      	ldr	r3, [pc, #388]	; (800a5e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a45e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a464:	ee07 3a90 	vmov	s15, r3
 800a468:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a46c:	ed97 6a02 	vldr	s12, [r7, #8]
 800a470:	eddf 5a60 	vldr	s11, [pc, #384]	; 800a5f4 <HAL_RCC_GetSysClockFreq+0x2d4>
 800a474:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a478:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a47c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a480:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a484:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a488:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800a48c:	e087      	b.n	800a59e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	ee07 3a90 	vmov	s15, r3
 800a494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a498:	eddf 6a57 	vldr	s13, [pc, #348]	; 800a5f8 <HAL_RCC_GetSysClockFreq+0x2d8>
 800a49c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4a0:	4b50      	ldr	r3, [pc, #320]	; (800a5e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a4a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4a8:	ee07 3a90 	vmov	s15, r3
 800a4ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4b0:	ed97 6a02 	vldr	s12, [r7, #8]
 800a4b4:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800a5f4 <HAL_RCC_GetSysClockFreq+0x2d4>
 800a4b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a4d0:	e065      	b.n	800a59e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	ee07 3a90 	vmov	s15, r3
 800a4d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4dc:	eddf 6a47 	vldr	s13, [pc, #284]	; 800a5fc <HAL_RCC_GetSysClockFreq+0x2dc>
 800a4e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4e4:	4b3f      	ldr	r3, [pc, #252]	; (800a5e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a4e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4ec:	ee07 3a90 	vmov	s15, r3
 800a4f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4f4:	ed97 6a02 	vldr	s12, [r7, #8]
 800a4f8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800a5f4 <HAL_RCC_GetSysClockFreq+0x2d4>
 800a4fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a500:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a504:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a508:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a50c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a510:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a514:	e043      	b.n	800a59e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	ee07 3a90 	vmov	s15, r3
 800a51c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a520:	eddf 6a37 	vldr	s13, [pc, #220]	; 800a600 <HAL_RCC_GetSysClockFreq+0x2e0>
 800a524:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a528:	4b2e      	ldr	r3, [pc, #184]	; (800a5e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a52a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a52c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a530:	ee07 3a90 	vmov	s15, r3
 800a534:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a538:	ed97 6a02 	vldr	s12, [r7, #8]
 800a53c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800a5f4 <HAL_RCC_GetSysClockFreq+0x2d4>
 800a540:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a544:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a548:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a54c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a550:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a554:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a558:	e021      	b.n	800a59e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	ee07 3a90 	vmov	s15, r3
 800a560:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a564:	eddf 6a25 	vldr	s13, [pc, #148]	; 800a5fc <HAL_RCC_GetSysClockFreq+0x2dc>
 800a568:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a56c:	4b1d      	ldr	r3, [pc, #116]	; (800a5e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a56e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a574:	ee07 3a90 	vmov	s15, r3
 800a578:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a57c:	ed97 6a02 	vldr	s12, [r7, #8]
 800a580:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800a5f4 <HAL_RCC_GetSysClockFreq+0x2d4>
 800a584:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a588:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a58c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a590:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a594:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a598:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a59c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800a59e:	4b11      	ldr	r3, [pc, #68]	; (800a5e4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a5a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5a2:	0a5b      	lsrs	r3, r3, #9
 800a5a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	ee07 3a90 	vmov	s15, r3
 800a5b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a5b6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a5ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a5c2:	ee17 3a90 	vmov	r3, s15
 800a5c6:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800a5c8:	e005      	b.n	800a5d6 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	61bb      	str	r3, [r7, #24]
    break;
 800a5ce:	e002      	b.n	800a5d6 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800a5d0:	4b06      	ldr	r3, [pc, #24]	; (800a5ec <HAL_RCC_GetSysClockFreq+0x2cc>)
 800a5d2:	61bb      	str	r3, [r7, #24]
    break;
 800a5d4:	bf00      	nop
  }

  return sysclockfreq;
 800a5d6:	69bb      	ldr	r3, [r7, #24]
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3724      	adds	r7, #36	; 0x24
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr
 800a5e4:	58024400 	.word	0x58024400
 800a5e8:	03d09000 	.word	0x03d09000
 800a5ec:	003d0900 	.word	0x003d0900
 800a5f0:	017d7840 	.word	0x017d7840
 800a5f4:	46000000 	.word	0x46000000
 800a5f8:	4c742400 	.word	0x4c742400
 800a5fc:	4a742400 	.word	0x4a742400
 800a600:	4bbebc20 	.word	0x4bbebc20

0800a604 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a60a:	f7ff fe89 	bl	800a320 <HAL_RCC_GetSysClockFreq>
 800a60e:	4601      	mov	r1, r0
 800a610:	4b10      	ldr	r3, [pc, #64]	; (800a654 <HAL_RCC_GetHCLKFreq+0x50>)
 800a612:	699b      	ldr	r3, [r3, #24]
 800a614:	0a1b      	lsrs	r3, r3, #8
 800a616:	f003 030f 	and.w	r3, r3, #15
 800a61a:	4a0f      	ldr	r2, [pc, #60]	; (800a658 <HAL_RCC_GetHCLKFreq+0x54>)
 800a61c:	5cd3      	ldrb	r3, [r2, r3]
 800a61e:	f003 031f 	and.w	r3, r3, #31
 800a622:	fa21 f303 	lsr.w	r3, r1, r3
 800a626:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a628:	4b0a      	ldr	r3, [pc, #40]	; (800a654 <HAL_RCC_GetHCLKFreq+0x50>)
 800a62a:	699b      	ldr	r3, [r3, #24]
 800a62c:	f003 030f 	and.w	r3, r3, #15
 800a630:	4a09      	ldr	r2, [pc, #36]	; (800a658 <HAL_RCC_GetHCLKFreq+0x54>)
 800a632:	5cd3      	ldrb	r3, [r2, r3]
 800a634:	f003 031f 	and.w	r3, r3, #31
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	fa22 f303 	lsr.w	r3, r2, r3
 800a63e:	4a07      	ldr	r2, [pc, #28]	; (800a65c <HAL_RCC_GetHCLKFreq+0x58>)
 800a640:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a642:	4a07      	ldr	r2, [pc, #28]	; (800a660 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a648:	4b04      	ldr	r3, [pc, #16]	; (800a65c <HAL_RCC_GetHCLKFreq+0x58>)
 800a64a:	681b      	ldr	r3, [r3, #0]
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3708      	adds	r7, #8
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}
 800a654:	58024400 	.word	0x58024400
 800a658:	0801af50 	.word	0x0801af50
 800a65c:	24000014 	.word	0x24000014
 800a660:	24000010 	.word	0x24000010

0800a664 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a668:	f7ff ffcc 	bl	800a604 <HAL_RCC_GetHCLKFreq>
 800a66c:	4601      	mov	r1, r0
 800a66e:	4b06      	ldr	r3, [pc, #24]	; (800a688 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a670:	69db      	ldr	r3, [r3, #28]
 800a672:	091b      	lsrs	r3, r3, #4
 800a674:	f003 0307 	and.w	r3, r3, #7
 800a678:	4a04      	ldr	r2, [pc, #16]	; (800a68c <HAL_RCC_GetPCLK1Freq+0x28>)
 800a67a:	5cd3      	ldrb	r3, [r2, r3]
 800a67c:	f003 031f 	and.w	r3, r3, #31
 800a680:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a684:	4618      	mov	r0, r3
 800a686:	bd80      	pop	{r7, pc}
 800a688:	58024400 	.word	0x58024400
 800a68c:	0801af50 	.word	0x0801af50

0800a690 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a694:	f7ff ffb6 	bl	800a604 <HAL_RCC_GetHCLKFreq>
 800a698:	4601      	mov	r1, r0
 800a69a:	4b06      	ldr	r3, [pc, #24]	; (800a6b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a69c:	69db      	ldr	r3, [r3, #28]
 800a69e:	0a1b      	lsrs	r3, r3, #8
 800a6a0:	f003 0307 	and.w	r3, r3, #7
 800a6a4:	4a04      	ldr	r2, [pc, #16]	; (800a6b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a6a6:	5cd3      	ldrb	r3, [r2, r3]
 800a6a8:	f003 031f 	and.w	r3, r3, #31
 800a6ac:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	bd80      	pop	{r7, pc}
 800a6b4:	58024400 	.word	0x58024400
 800a6b8:	0801af50 	.word	0x0801af50

0800a6bc <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800a6c0:	4b07      	ldr	r3, [pc, #28]	; (800a6e0 <HAL_RCC_NMI_IRQHandler+0x24>)
 800a6c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a6c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6cc:	d105      	bne.n	800a6da <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 800a6ce:	f000 f809 	bl	800a6e4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800a6d2:	4b03      	ldr	r3, [pc, #12]	; (800a6e0 <HAL_RCC_NMI_IRQHandler+0x24>)
 800a6d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a6d8:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800a6da:	bf00      	nop
 800a6dc:	bd80      	pop	{r7, pc}
 800a6de:	bf00      	nop
 800a6e0:	58024400 	.word	0x58024400

0800a6e4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 800a6e8:	bf00      	nop
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f0:	4770      	bx	lr
	...

0800a6f4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b086      	sub	sp, #24
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a700:	2300      	movs	r3, #0
 800a702:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d03d      	beq.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a714:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a718:	d013      	beq.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800a71a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a71e:	d802      	bhi.n	800a726 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800a720:	2b00      	cmp	r3, #0
 800a722:	d007      	beq.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800a724:	e01f      	b.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0x72>
 800a726:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a72a:	d013      	beq.n	800a754 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800a72c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a730:	d01c      	beq.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0x78>
 800a732:	e018      	b.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a734:	4baf      	ldr	r3, [pc, #700]	; (800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a738:	4aae      	ldr	r2, [pc, #696]	; (800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a73a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a73e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a740:	e015      	b.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	3304      	adds	r3, #4
 800a746:	2102      	movs	r1, #2
 800a748:	4618      	mov	r0, r3
 800a74a:	f001 fd33 	bl	800c1b4 <RCCEx_PLL2_Config>
 800a74e:	4603      	mov	r3, r0
 800a750:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a752:	e00c      	b.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	3324      	adds	r3, #36	; 0x24
 800a758:	2102      	movs	r1, #2
 800a75a:	4618      	mov	r0, r3
 800a75c:	f001 fddc 	bl	800c318 <RCCEx_PLL3_Config>
 800a760:	4603      	mov	r3, r0
 800a762:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a764:	e003      	b.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a766:	2301      	movs	r3, #1
 800a768:	75fb      	strb	r3, [r7, #23]
      break;
 800a76a:	e000      	b.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800a76c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a76e:	7dfb      	ldrb	r3, [r7, #23]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d109      	bne.n	800a788 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a774:	4b9f      	ldr	r3, [pc, #636]	; (800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a778:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a780:	499c      	ldr	r1, [pc, #624]	; (800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a782:	4313      	orrs	r3, r2
 800a784:	650b      	str	r3, [r1, #80]	; 0x50
 800a786:	e001      	b.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a788:	7dfb      	ldrb	r3, [r7, #23]
 800a78a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a794:	2b00      	cmp	r3, #0
 800a796:	d03d      	beq.n	800a814 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a79c:	2b04      	cmp	r3, #4
 800a79e:	d826      	bhi.n	800a7ee <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800a7a0:	a201      	add	r2, pc, #4	; (adr r2, 800a7a8 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800a7a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7a6:	bf00      	nop
 800a7a8:	0800a7bd 	.word	0x0800a7bd
 800a7ac:	0800a7cb 	.word	0x0800a7cb
 800a7b0:	0800a7dd 	.word	0x0800a7dd
 800a7b4:	0800a7f5 	.word	0x0800a7f5
 800a7b8:	0800a7f5 	.word	0x0800a7f5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7bc:	4b8d      	ldr	r3, [pc, #564]	; (800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c0:	4a8c      	ldr	r2, [pc, #560]	; (800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a7c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a7c8:	e015      	b.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	3304      	adds	r3, #4
 800a7ce:	2100      	movs	r1, #0
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f001 fcef 	bl	800c1b4 <RCCEx_PLL2_Config>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a7da:	e00c      	b.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	3324      	adds	r3, #36	; 0x24
 800a7e0:	2100      	movs	r1, #0
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f001 fd98 	bl	800c318 <RCCEx_PLL3_Config>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a7ec:	e003      	b.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	75fb      	strb	r3, [r7, #23]
      break;
 800a7f2:	e000      	b.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800a7f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a7f6:	7dfb      	ldrb	r3, [r7, #23]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d109      	bne.n	800a810 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a7fc:	4b7d      	ldr	r3, [pc, #500]	; (800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a7fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a800:	f023 0207 	bic.w	r2, r3, #7
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a808:	497a      	ldr	r1, [pc, #488]	; (800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a80a:	4313      	orrs	r3, r2
 800a80c:	650b      	str	r3, [r1, #80]	; 0x50
 800a80e:	e001      	b.n	800a814 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a810:	7dfb      	ldrb	r3, [r7, #23]
 800a812:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d03e      	beq.n	800a89e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a824:	2b80      	cmp	r3, #128	; 0x80
 800a826:	d01c      	beq.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800a828:	2b80      	cmp	r3, #128	; 0x80
 800a82a:	d804      	bhi.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d008      	beq.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800a830:	2b40      	cmp	r3, #64	; 0x40
 800a832:	d00d      	beq.n	800a850 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800a834:	e01e      	b.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800a836:	2bc0      	cmp	r3, #192	; 0xc0
 800a838:	d01f      	beq.n	800a87a <HAL_RCCEx_PeriphCLKConfig+0x186>
 800a83a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a83e:	d01e      	beq.n	800a87e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800a840:	e018      	b.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a842:	4b6c      	ldr	r3, [pc, #432]	; (800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a846:	4a6b      	ldr	r2, [pc, #428]	; (800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a84c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a84e:	e017      	b.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	3304      	adds	r3, #4
 800a854:	2100      	movs	r1, #0
 800a856:	4618      	mov	r0, r3
 800a858:	f001 fcac 	bl	800c1b4 <RCCEx_PLL2_Config>
 800a85c:	4603      	mov	r3, r0
 800a85e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a860:	e00e      	b.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	3324      	adds	r3, #36	; 0x24
 800a866:	2100      	movs	r1, #0
 800a868:	4618      	mov	r0, r3
 800a86a:	f001 fd55 	bl	800c318 <RCCEx_PLL3_Config>
 800a86e:	4603      	mov	r3, r0
 800a870:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a872:	e005      	b.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a874:	2301      	movs	r3, #1
 800a876:	75fb      	strb	r3, [r7, #23]
      break;
 800a878:	e002      	b.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800a87a:	bf00      	nop
 800a87c:	e000      	b.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800a87e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a880:	7dfb      	ldrb	r3, [r7, #23]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d109      	bne.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a886:	4b5b      	ldr	r3, [pc, #364]	; (800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a88a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a892:	4958      	ldr	r1, [pc, #352]	; (800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a894:	4313      	orrs	r3, r2
 800a896:	650b      	str	r3, [r1, #80]	; 0x50
 800a898:	e001      	b.n	800a89e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a89a:	7dfb      	ldrb	r3, [r7, #23]
 800a89c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d044      	beq.n	800a934 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a8b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a8b4:	d01f      	beq.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a8b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a8ba:	d805      	bhi.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d00a      	beq.n	800a8d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a8c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a8c4:	d00e      	beq.n	800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800a8c6:	e01f      	b.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0x214>
 800a8c8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a8cc:	d01f      	beq.n	800a90e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800a8ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a8d2:	d01e      	beq.n	800a912 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800a8d4:	e018      	b.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8d6:	4b47      	ldr	r3, [pc, #284]	; (800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a8d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8da:	4a46      	ldr	r2, [pc, #280]	; (800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a8dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a8e2:	e017      	b.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	3304      	adds	r3, #4
 800a8e8:	2100      	movs	r1, #0
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f001 fc62 	bl	800c1b4 <RCCEx_PLL2_Config>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a8f4:	e00e      	b.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	3324      	adds	r3, #36	; 0x24
 800a8fa:	2100      	movs	r1, #0
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f001 fd0b 	bl	800c318 <RCCEx_PLL3_Config>
 800a902:	4603      	mov	r3, r0
 800a904:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a906:	e005      	b.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a908:	2301      	movs	r3, #1
 800a90a:	75fb      	strb	r3, [r7, #23]
      break;
 800a90c:	e002      	b.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800a90e:	bf00      	nop
 800a910:	e000      	b.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800a912:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a914:	7dfb      	ldrb	r3, [r7, #23]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d10a      	bne.n	800a930 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a91a:	4b36      	ldr	r3, [pc, #216]	; (800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a91c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a91e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a928:	4932      	ldr	r1, [pc, #200]	; (800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a92a:	4313      	orrs	r3, r2
 800a92c:	658b      	str	r3, [r1, #88]	; 0x58
 800a92e:	e001      	b.n	800a934 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a930:	7dfb      	ldrb	r3, [r7, #23]
 800a932:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d044      	beq.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a946:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a94a:	d01f      	beq.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a94c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a950:	d805      	bhi.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800a952:	2b00      	cmp	r3, #0
 800a954:	d00a      	beq.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0x278>
 800a956:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a95a:	d00e      	beq.n	800a97a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800a95c:	e01f      	b.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800a95e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a962:	d01f      	beq.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800a964:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a968:	d01e      	beq.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800a96a:	e018      	b.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a96c:	4b21      	ldr	r3, [pc, #132]	; (800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a970:	4a20      	ldr	r2, [pc, #128]	; (800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a972:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a976:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a978:	e017      	b.n	800a9aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	3304      	adds	r3, #4
 800a97e:	2100      	movs	r1, #0
 800a980:	4618      	mov	r0, r3
 800a982:	f001 fc17 	bl	800c1b4 <RCCEx_PLL2_Config>
 800a986:	4603      	mov	r3, r0
 800a988:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a98a:	e00e      	b.n	800a9aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	3324      	adds	r3, #36	; 0x24
 800a990:	2100      	movs	r1, #0
 800a992:	4618      	mov	r0, r3
 800a994:	f001 fcc0 	bl	800c318 <RCCEx_PLL3_Config>
 800a998:	4603      	mov	r3, r0
 800a99a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a99c:	e005      	b.n	800a9aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	75fb      	strb	r3, [r7, #23]
      break;
 800a9a2:	e002      	b.n	800a9aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800a9a4:	bf00      	nop
 800a9a6:	e000      	b.n	800a9aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800a9a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a9aa:	7dfb      	ldrb	r3, [r7, #23]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d10a      	bne.n	800a9c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a9b0:	4b10      	ldr	r3, [pc, #64]	; (800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a9b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9b4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a9be:	490d      	ldr	r1, [pc, #52]	; (800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a9c0:	4313      	orrs	r3, r2
 800a9c2:	658b      	str	r3, [r1, #88]	; 0x58
 800a9c4:	e001      	b.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9c6:	7dfb      	ldrb	r3, [r7, #23]
 800a9c8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d035      	beq.n	800aa42 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9da:	2b10      	cmp	r3, #16
 800a9dc:	d00c      	beq.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800a9de:	2b10      	cmp	r3, #16
 800a9e0:	d802      	bhi.n	800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d01b      	beq.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800a9e6:	e017      	b.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800a9e8:	2b20      	cmp	r3, #32
 800a9ea:	d00c      	beq.n	800aa06 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800a9ec:	2b30      	cmp	r3, #48	; 0x30
 800a9ee:	d018      	beq.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800a9f0:	e012      	b.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800a9f2:	bf00      	nop
 800a9f4:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9f8:	4baf      	ldr	r3, [pc, #700]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a9fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9fc:	4aae      	ldr	r2, [pc, #696]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a9fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800aa04:	e00e      	b.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	3304      	adds	r3, #4
 800aa0a:	2102      	movs	r1, #2
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f001 fbd1 	bl	800c1b4 <RCCEx_PLL2_Config>
 800aa12:	4603      	mov	r3, r0
 800aa14:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800aa16:	e005      	b.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800aa18:	2301      	movs	r3, #1
 800aa1a:	75fb      	strb	r3, [r7, #23]
      break;
 800aa1c:	e002      	b.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800aa1e:	bf00      	nop
 800aa20:	e000      	b.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800aa22:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa24:	7dfb      	ldrb	r3, [r7, #23]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d109      	bne.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800aa2a:	4ba3      	ldr	r3, [pc, #652]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800aa2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa2e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa36:	49a0      	ldr	r1, [pc, #640]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800aa3c:	e001      	b.n	800aa42 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa3e:	7dfb      	ldrb	r3, [r7, #23]
 800aa40:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d042      	beq.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa56:	d01f      	beq.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800aa58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa5c:	d805      	bhi.n	800aa6a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d00a      	beq.n	800aa78 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800aa62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa66:	d00e      	beq.n	800aa86 <HAL_RCCEx_PeriphCLKConfig+0x392>
 800aa68:	e01f      	b.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800aa6a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aa6e:	d01f      	beq.n	800aab0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800aa70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa74:	d01e      	beq.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800aa76:	e018      	b.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa78:	4b8f      	ldr	r3, [pc, #572]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800aa7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa7c:	4a8e      	ldr	r2, [pc, #568]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800aa7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800aa84:	e017      	b.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	3304      	adds	r3, #4
 800aa8a:	2100      	movs	r1, #0
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f001 fb91 	bl	800c1b4 <RCCEx_PLL2_Config>
 800aa92:	4603      	mov	r3, r0
 800aa94:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800aa96:	e00e      	b.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	3324      	adds	r3, #36	; 0x24
 800aa9c:	2100      	movs	r1, #0
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f001 fc3a 	bl	800c318 <RCCEx_PLL3_Config>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800aaa8:	e005      	b.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	75fb      	strb	r3, [r7, #23]
      break;
 800aaae:	e002      	b.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800aab0:	bf00      	nop
 800aab2:	e000      	b.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800aab4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aab6:	7dfb      	ldrb	r3, [r7, #23]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d109      	bne.n	800aad0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800aabc:	4b7e      	ldr	r3, [pc, #504]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800aabe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aac0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aac8:	497b      	ldr	r1, [pc, #492]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800aaca:	4313      	orrs	r3, r2
 800aacc:	650b      	str	r3, [r1, #80]	; 0x50
 800aace:	e001      	b.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aad0:	7dfb      	ldrb	r3, [r7, #23]
 800aad2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d042      	beq.n	800ab66 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aae4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aae8:	d01b      	beq.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800aaea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aaee:	d805      	bhi.n	800aafc <HAL_RCCEx_PeriphCLKConfig+0x408>
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d022      	beq.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x446>
 800aaf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aaf8:	d00a      	beq.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800aafa:	e01b      	b.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800aafc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ab00:	d01d      	beq.n	800ab3e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800ab02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ab06:	d01c      	beq.n	800ab42 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800ab08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ab0c:	d01b      	beq.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800ab0e:	e011      	b.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	3304      	adds	r3, #4
 800ab14:	2101      	movs	r1, #1
 800ab16:	4618      	mov	r0, r3
 800ab18:	f001 fb4c 	bl	800c1b4 <RCCEx_PLL2_Config>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800ab20:	e012      	b.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	3324      	adds	r3, #36	; 0x24
 800ab26:	2101      	movs	r1, #1
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f001 fbf5 	bl	800c318 <RCCEx_PLL3_Config>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800ab32:	e009      	b.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ab34:	2301      	movs	r3, #1
 800ab36:	75fb      	strb	r3, [r7, #23]
      break;
 800ab38:	e006      	b.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800ab3a:	bf00      	nop
 800ab3c:	e004      	b.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800ab3e:	bf00      	nop
 800ab40:	e002      	b.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800ab42:	bf00      	nop
 800ab44:	e000      	b.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800ab46:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab48:	7dfb      	ldrb	r3, [r7, #23]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d109      	bne.n	800ab62 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ab4e:	4b5a      	ldr	r3, [pc, #360]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ab50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab52:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab5a:	4957      	ldr	r1, [pc, #348]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	650b      	str	r3, [r1, #80]	; 0x50
 800ab60:	e001      	b.n	800ab66 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab62:	7dfb      	ldrb	r3, [r7, #23]
 800ab64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d044      	beq.n	800abfc <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ab78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab7c:	d01b      	beq.n	800abb6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800ab7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab82:	d805      	bhi.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d022      	beq.n	800abce <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800ab88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab8c:	d00a      	beq.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800ab8e:	e01b      	b.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800ab90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab94:	d01d      	beq.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800ab96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ab9a:	d01c      	beq.n	800abd6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800ab9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aba0:	d01b      	beq.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800aba2:	e011      	b.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	3304      	adds	r3, #4
 800aba8:	2101      	movs	r1, #1
 800abaa:	4618      	mov	r0, r3
 800abac:	f001 fb02 	bl	800c1b4 <RCCEx_PLL2_Config>
 800abb0:	4603      	mov	r3, r0
 800abb2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800abb4:	e012      	b.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	3324      	adds	r3, #36	; 0x24
 800abba:	2101      	movs	r1, #1
 800abbc:	4618      	mov	r0, r3
 800abbe:	f001 fbab 	bl	800c318 <RCCEx_PLL3_Config>
 800abc2:	4603      	mov	r3, r0
 800abc4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800abc6:	e009      	b.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800abc8:	2301      	movs	r3, #1
 800abca:	75fb      	strb	r3, [r7, #23]
      break;
 800abcc:	e006      	b.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800abce:	bf00      	nop
 800abd0:	e004      	b.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800abd2:	bf00      	nop
 800abd4:	e002      	b.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800abd6:	bf00      	nop
 800abd8:	e000      	b.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800abda:	bf00      	nop
    }

    if(ret == HAL_OK)
 800abdc:	7dfb      	ldrb	r3, [r7, #23]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d10a      	bne.n	800abf8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800abe2:	4b35      	ldr	r3, [pc, #212]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800abe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abe6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800abf0:	4931      	ldr	r1, [pc, #196]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800abf2:	4313      	orrs	r3, r2
 800abf4:	658b      	str	r3, [r1, #88]	; 0x58
 800abf6:	e001      	b.n	800abfc <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abf8:	7dfb      	ldrb	r3, [r7, #23]
 800abfa:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d02d      	beq.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac10:	d005      	beq.n	800ac1e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800ac12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac16:	d009      	beq.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0x538>
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d013      	beq.n	800ac44 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800ac1c:	e00f      	b.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac1e:	4b26      	ldr	r3, [pc, #152]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ac20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac22:	4a25      	ldr	r2, [pc, #148]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ac24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800ac2a:	e00c      	b.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	3304      	adds	r3, #4
 800ac30:	2101      	movs	r1, #1
 800ac32:	4618      	mov	r0, r3
 800ac34:	f001 fabe 	bl	800c1b4 <RCCEx_PLL2_Config>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800ac3c:	e003      	b.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ac3e:	2301      	movs	r3, #1
 800ac40:	75fb      	strb	r3, [r7, #23]
      break;
 800ac42:	e000      	b.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800ac44:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac46:	7dfb      	ldrb	r3, [r7, #23]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d109      	bne.n	800ac60 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ac4c:	4b1a      	ldr	r3, [pc, #104]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ac4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac50:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac58:	4917      	ldr	r1, [pc, #92]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	650b      	str	r3, [r1, #80]	; 0x50
 800ac5e:	e001      	b.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac60:	7dfb      	ldrb	r3, [r7, #23]
 800ac62:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d035      	beq.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac74:	2b03      	cmp	r3, #3
 800ac76:	d81b      	bhi.n	800acb0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800ac78:	a201      	add	r2, pc, #4	; (adr r2, 800ac80 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800ac7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac7e:	bf00      	nop
 800ac80:	0800acbd 	.word	0x0800acbd
 800ac84:	0800ac91 	.word	0x0800ac91
 800ac88:	0800ac9f 	.word	0x0800ac9f
 800ac8c:	0800acbd 	.word	0x0800acbd
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac90:	4b09      	ldr	r3, [pc, #36]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ac92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac94:	4a08      	ldr	r2, [pc, #32]	; (800acb8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ac96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800ac9c:	e00f      	b.n	800acbe <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	3304      	adds	r3, #4
 800aca2:	2102      	movs	r1, #2
 800aca4:	4618      	mov	r0, r3
 800aca6:	f001 fa85 	bl	800c1b4 <RCCEx_PLL2_Config>
 800acaa:	4603      	mov	r3, r0
 800acac:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800acae:	e006      	b.n	800acbe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800acb0:	2301      	movs	r3, #1
 800acb2:	75fb      	strb	r3, [r7, #23]
      break;
 800acb4:	e003      	b.n	800acbe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800acb6:	bf00      	nop
 800acb8:	58024400 	.word	0x58024400
      break;
 800acbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800acbe:	7dfb      	ldrb	r3, [r7, #23]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d109      	bne.n	800acd8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800acc4:	4bba      	ldr	r3, [pc, #744]	; (800afb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800acc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acc8:	f023 0203 	bic.w	r2, r3, #3
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acd0:	49b7      	ldr	r1, [pc, #732]	; (800afb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800acd2:	4313      	orrs	r3, r2
 800acd4:	64cb      	str	r3, [r1, #76]	; 0x4c
 800acd6:	e001      	b.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acd8:	7dfb      	ldrb	r3, [r7, #23]
 800acda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	f000 8086 	beq.w	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800acea:	4bb2      	ldr	r3, [pc, #712]	; (800afb4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4ab1      	ldr	r2, [pc, #708]	; (800afb4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800acf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acf4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800acf6:	f7f9 fc75 	bl	80045e4 <HAL_GetTick>
 800acfa:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800acfc:	e009      	b.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800acfe:	f7f9 fc71 	bl	80045e4 <HAL_GetTick>
 800ad02:	4602      	mov	r2, r0
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	1ad3      	subs	r3, r2, r3
 800ad08:	2b64      	cmp	r3, #100	; 0x64
 800ad0a:	d902      	bls.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 800ad0c:	2303      	movs	r3, #3
 800ad0e:	75fb      	strb	r3, [r7, #23]
        break;
 800ad10:	e005      	b.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ad12:	4ba8      	ldr	r3, [pc, #672]	; (800afb4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d0ef      	beq.n	800acfe <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800ad1e:	7dfb      	ldrb	r3, [r7, #23]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d166      	bne.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ad24:	4ba2      	ldr	r3, [pc, #648]	; (800afb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ad2e:	4053      	eors	r3, r2
 800ad30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d013      	beq.n	800ad60 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ad38:	4b9d      	ldr	r3, [pc, #628]	; (800afb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad40:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ad42:	4b9b      	ldr	r3, [pc, #620]	; (800afb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad46:	4a9a      	ldr	r2, [pc, #616]	; (800afb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad4c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ad4e:	4b98      	ldr	r3, [pc, #608]	; (800afb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad52:	4a97      	ldr	r2, [pc, #604]	; (800afb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad58:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ad5a:	4a95      	ldr	r2, [pc, #596]	; (800afb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ad66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad6a:	d115      	bne.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad6c:	f7f9 fc3a 	bl	80045e4 <HAL_GetTick>
 800ad70:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ad72:	e00b      	b.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad74:	f7f9 fc36 	bl	80045e4 <HAL_GetTick>
 800ad78:	4602      	mov	r2, r0
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	1ad3      	subs	r3, r2, r3
 800ad7e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d902      	bls.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800ad86:	2303      	movs	r3, #3
 800ad88:	75fb      	strb	r3, [r7, #23]
            break;
 800ad8a:	e005      	b.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ad8c:	4b88      	ldr	r3, [pc, #544]	; (800afb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad90:	f003 0302 	and.w	r3, r3, #2
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d0ed      	beq.n	800ad74 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 800ad98:	7dfb      	ldrb	r3, [r7, #23]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d126      	bne.n	800adec <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ada4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ada8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800adac:	d10d      	bne.n	800adca <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800adae:	4b80      	ldr	r3, [pc, #512]	; (800afb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800adb0:	691b      	ldr	r3, [r3, #16]
 800adb2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800adbc:	0919      	lsrs	r1, r3, #4
 800adbe:	4b7e      	ldr	r3, [pc, #504]	; (800afb8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800adc0:	400b      	ands	r3, r1
 800adc2:	497b      	ldr	r1, [pc, #492]	; (800afb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800adc4:	4313      	orrs	r3, r2
 800adc6:	610b      	str	r3, [r1, #16]
 800adc8:	e005      	b.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800adca:	4b79      	ldr	r3, [pc, #484]	; (800afb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800adcc:	691b      	ldr	r3, [r3, #16]
 800adce:	4a78      	ldr	r2, [pc, #480]	; (800afb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800add0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800add4:	6113      	str	r3, [r2, #16]
 800add6:	4b76      	ldr	r3, [pc, #472]	; (800afb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800add8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ade0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ade4:	4972      	ldr	r1, [pc, #456]	; (800afb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ade6:	4313      	orrs	r3, r2
 800ade8:	670b      	str	r3, [r1, #112]	; 0x70
 800adea:	e004      	b.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800adec:	7dfb      	ldrb	r3, [r7, #23]
 800adee:	75bb      	strb	r3, [r7, #22]
 800adf0:	e001      	b.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adf2:	7dfb      	ldrb	r3, [r7, #23]
 800adf4:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f003 0301 	and.w	r3, r3, #1
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d07d      	beq.n	800aefe <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae06:	2b28      	cmp	r3, #40	; 0x28
 800ae08:	d866      	bhi.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800ae0a:	a201      	add	r2, pc, #4	; (adr r2, 800ae10 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800ae0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae10:	0800aedf 	.word	0x0800aedf
 800ae14:	0800aed9 	.word	0x0800aed9
 800ae18:	0800aed9 	.word	0x0800aed9
 800ae1c:	0800aed9 	.word	0x0800aed9
 800ae20:	0800aed9 	.word	0x0800aed9
 800ae24:	0800aed9 	.word	0x0800aed9
 800ae28:	0800aed9 	.word	0x0800aed9
 800ae2c:	0800aed9 	.word	0x0800aed9
 800ae30:	0800aeb5 	.word	0x0800aeb5
 800ae34:	0800aed9 	.word	0x0800aed9
 800ae38:	0800aed9 	.word	0x0800aed9
 800ae3c:	0800aed9 	.word	0x0800aed9
 800ae40:	0800aed9 	.word	0x0800aed9
 800ae44:	0800aed9 	.word	0x0800aed9
 800ae48:	0800aed9 	.word	0x0800aed9
 800ae4c:	0800aed9 	.word	0x0800aed9
 800ae50:	0800aec7 	.word	0x0800aec7
 800ae54:	0800aed9 	.word	0x0800aed9
 800ae58:	0800aed9 	.word	0x0800aed9
 800ae5c:	0800aed9 	.word	0x0800aed9
 800ae60:	0800aed9 	.word	0x0800aed9
 800ae64:	0800aed9 	.word	0x0800aed9
 800ae68:	0800aed9 	.word	0x0800aed9
 800ae6c:	0800aed9 	.word	0x0800aed9
 800ae70:	0800aedf 	.word	0x0800aedf
 800ae74:	0800aed9 	.word	0x0800aed9
 800ae78:	0800aed9 	.word	0x0800aed9
 800ae7c:	0800aed9 	.word	0x0800aed9
 800ae80:	0800aed9 	.word	0x0800aed9
 800ae84:	0800aed9 	.word	0x0800aed9
 800ae88:	0800aed9 	.word	0x0800aed9
 800ae8c:	0800aed9 	.word	0x0800aed9
 800ae90:	0800aedf 	.word	0x0800aedf
 800ae94:	0800aed9 	.word	0x0800aed9
 800ae98:	0800aed9 	.word	0x0800aed9
 800ae9c:	0800aed9 	.word	0x0800aed9
 800aea0:	0800aed9 	.word	0x0800aed9
 800aea4:	0800aed9 	.word	0x0800aed9
 800aea8:	0800aed9 	.word	0x0800aed9
 800aeac:	0800aed9 	.word	0x0800aed9
 800aeb0:	0800aedf 	.word	0x0800aedf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	3304      	adds	r3, #4
 800aeb8:	2101      	movs	r1, #1
 800aeba:	4618      	mov	r0, r3
 800aebc:	f001 f97a 	bl	800c1b4 <RCCEx_PLL2_Config>
 800aec0:	4603      	mov	r3, r0
 800aec2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800aec4:	e00c      	b.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	3324      	adds	r3, #36	; 0x24
 800aeca:	2101      	movs	r1, #1
 800aecc:	4618      	mov	r0, r3
 800aece:	f001 fa23 	bl	800c318 <RCCEx_PLL3_Config>
 800aed2:	4603      	mov	r3, r0
 800aed4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800aed6:	e003      	b.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aed8:	2301      	movs	r3, #1
 800aeda:	75fb      	strb	r3, [r7, #23]
      break;
 800aedc:	e000      	b.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800aede:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aee0:	7dfb      	ldrb	r3, [r7, #23]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d109      	bne.n	800aefa <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800aee6:	4b32      	ldr	r3, [pc, #200]	; (800afb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800aee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeea:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aef2:	492f      	ldr	r1, [pc, #188]	; (800afb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800aef4:	4313      	orrs	r3, r2
 800aef6:	654b      	str	r3, [r1, #84]	; 0x54
 800aef8:	e001      	b.n	800aefe <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aefa:	7dfb      	ldrb	r3, [r7, #23]
 800aefc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f003 0302 	and.w	r3, r3, #2
 800af06:	2b00      	cmp	r3, #0
 800af08:	d037      	beq.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af0e:	2b05      	cmp	r3, #5
 800af10:	d820      	bhi.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800af12:	a201      	add	r2, pc, #4	; (adr r2, 800af18 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800af14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af18:	0800af5b 	.word	0x0800af5b
 800af1c:	0800af31 	.word	0x0800af31
 800af20:	0800af43 	.word	0x0800af43
 800af24:	0800af5b 	.word	0x0800af5b
 800af28:	0800af5b 	.word	0x0800af5b
 800af2c:	0800af5b 	.word	0x0800af5b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	3304      	adds	r3, #4
 800af34:	2101      	movs	r1, #1
 800af36:	4618      	mov	r0, r3
 800af38:	f001 f93c 	bl	800c1b4 <RCCEx_PLL2_Config>
 800af3c:	4603      	mov	r3, r0
 800af3e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800af40:	e00c      	b.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	3324      	adds	r3, #36	; 0x24
 800af46:	2101      	movs	r1, #1
 800af48:	4618      	mov	r0, r3
 800af4a:	f001 f9e5 	bl	800c318 <RCCEx_PLL3_Config>
 800af4e:	4603      	mov	r3, r0
 800af50:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800af52:	e003      	b.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800af54:	2301      	movs	r3, #1
 800af56:	75fb      	strb	r3, [r7, #23]
      break;
 800af58:	e000      	b.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800af5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af5c:	7dfb      	ldrb	r3, [r7, #23]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d109      	bne.n	800af76 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800af62:	4b13      	ldr	r3, [pc, #76]	; (800afb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800af64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af66:	f023 0207 	bic.w	r2, r3, #7
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af6e:	4910      	ldr	r1, [pc, #64]	; (800afb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800af70:	4313      	orrs	r3, r2
 800af72:	654b      	str	r3, [r1, #84]	; 0x54
 800af74:	e001      	b.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af76:	7dfb      	ldrb	r3, [r7, #23]
 800af78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f003 0304 	and.w	r3, r3, #4
 800af82:	2b00      	cmp	r3, #0
 800af84:	d040      	beq.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af8c:	2b05      	cmp	r3, #5
 800af8e:	d827      	bhi.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800af90:	a201      	add	r2, pc, #4	; (adr r2, 800af98 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800af92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af96:	bf00      	nop
 800af98:	0800afe7 	.word	0x0800afe7
 800af9c:	0800afbd 	.word	0x0800afbd
 800afa0:	0800afcf 	.word	0x0800afcf
 800afa4:	0800afe7 	.word	0x0800afe7
 800afa8:	0800afe7 	.word	0x0800afe7
 800afac:	0800afe7 	.word	0x0800afe7
 800afb0:	58024400 	.word	0x58024400
 800afb4:	58024800 	.word	0x58024800
 800afb8:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	3304      	adds	r3, #4
 800afc0:	2101      	movs	r1, #1
 800afc2:	4618      	mov	r0, r3
 800afc4:	f001 f8f6 	bl	800c1b4 <RCCEx_PLL2_Config>
 800afc8:	4603      	mov	r3, r0
 800afca:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800afcc:	e00c      	b.n	800afe8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	3324      	adds	r3, #36	; 0x24
 800afd2:	2101      	movs	r1, #1
 800afd4:	4618      	mov	r0, r3
 800afd6:	f001 f99f 	bl	800c318 <RCCEx_PLL3_Config>
 800afda:	4603      	mov	r3, r0
 800afdc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800afde:	e003      	b.n	800afe8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800afe0:	2301      	movs	r3, #1
 800afe2:	75fb      	strb	r3, [r7, #23]
      break;
 800afe4:	e000      	b.n	800afe8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800afe6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800afe8:	7dfb      	ldrb	r3, [r7, #23]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d10a      	bne.n	800b004 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800afee:	4bb2      	ldr	r3, [pc, #712]	; (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800aff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aff2:	f023 0207 	bic.w	r2, r3, #7
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800affc:	49ae      	ldr	r1, [pc, #696]	; (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800affe:	4313      	orrs	r3, r2
 800b000:	658b      	str	r3, [r1, #88]	; 0x58
 800b002:	e001      	b.n	800b008 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b004:	7dfb      	ldrb	r3, [r7, #23]
 800b006:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f003 0320 	and.w	r3, r3, #32
 800b010:	2b00      	cmp	r3, #0
 800b012:	d044      	beq.n	800b09e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b01a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b01e:	d01b      	beq.n	800b058 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800b020:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b024:	d805      	bhi.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800b026:	2b00      	cmp	r3, #0
 800b028:	d022      	beq.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800b02a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b02e:	d00a      	beq.n	800b046 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800b030:	e01b      	b.n	800b06a <HAL_RCCEx_PeriphCLKConfig+0x976>
 800b032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b036:	d01d      	beq.n	800b074 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800b038:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b03c:	d01c      	beq.n	800b078 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800b03e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b042:	d01b      	beq.n	800b07c <HAL_RCCEx_PeriphCLKConfig+0x988>
 800b044:	e011      	b.n	800b06a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	3304      	adds	r3, #4
 800b04a:	2100      	movs	r1, #0
 800b04c:	4618      	mov	r0, r3
 800b04e:	f001 f8b1 	bl	800c1b4 <RCCEx_PLL2_Config>
 800b052:	4603      	mov	r3, r0
 800b054:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b056:	e012      	b.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	3324      	adds	r3, #36	; 0x24
 800b05c:	2102      	movs	r1, #2
 800b05e:	4618      	mov	r0, r3
 800b060:	f001 f95a 	bl	800c318 <RCCEx_PLL3_Config>
 800b064:	4603      	mov	r3, r0
 800b066:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b068:	e009      	b.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b06a:	2301      	movs	r3, #1
 800b06c:	75fb      	strb	r3, [r7, #23]
      break;
 800b06e:	e006      	b.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800b070:	bf00      	nop
 800b072:	e004      	b.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800b074:	bf00      	nop
 800b076:	e002      	b.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800b078:	bf00      	nop
 800b07a:	e000      	b.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800b07c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b07e:	7dfb      	ldrb	r3, [r7, #23]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d10a      	bne.n	800b09a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b084:	4b8c      	ldr	r3, [pc, #560]	; (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b088:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b092:	4989      	ldr	r1, [pc, #548]	; (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b094:	4313      	orrs	r3, r2
 800b096:	654b      	str	r3, [r1, #84]	; 0x54
 800b098:	e001      	b.n	800b09e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b09a:	7dfb      	ldrb	r3, [r7, #23]
 800b09c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d044      	beq.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b0b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b0b4:	d01b      	beq.n	800b0ee <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800b0b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b0ba:	d805      	bhi.n	800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d022      	beq.n	800b106 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800b0c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0c4:	d00a      	beq.n	800b0dc <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800b0c6:	e01b      	b.n	800b100 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 800b0c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0cc:	d01d      	beq.n	800b10a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800b0ce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b0d2:	d01c      	beq.n	800b10e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800b0d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b0d8:	d01b      	beq.n	800b112 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800b0da:	e011      	b.n	800b100 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	3304      	adds	r3, #4
 800b0e0:	2100      	movs	r1, #0
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f001 f866 	bl	800c1b4 <RCCEx_PLL2_Config>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b0ec:	e012      	b.n	800b114 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	3324      	adds	r3, #36	; 0x24
 800b0f2:	2102      	movs	r1, #2
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f001 f90f 	bl	800c318 <RCCEx_PLL3_Config>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b0fe:	e009      	b.n	800b114 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b100:	2301      	movs	r3, #1
 800b102:	75fb      	strb	r3, [r7, #23]
      break;
 800b104:	e006      	b.n	800b114 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800b106:	bf00      	nop
 800b108:	e004      	b.n	800b114 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800b10a:	bf00      	nop
 800b10c:	e002      	b.n	800b114 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800b10e:	bf00      	nop
 800b110:	e000      	b.n	800b114 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800b112:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b114:	7dfb      	ldrb	r3, [r7, #23]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d10a      	bne.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b11a:	4b67      	ldr	r3, [pc, #412]	; (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b11c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b11e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b128:	4963      	ldr	r1, [pc, #396]	; (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b12a:	4313      	orrs	r3, r2
 800b12c:	658b      	str	r3, [r1, #88]	; 0x58
 800b12e:	e001      	b.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b130:	7dfb      	ldrb	r3, [r7, #23]
 800b132:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d044      	beq.n	800b1ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b146:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b14a:	d01b      	beq.n	800b184 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800b14c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b150:	d805      	bhi.n	800b15e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800b152:	2b00      	cmp	r3, #0
 800b154:	d022      	beq.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800b156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b15a:	d00a      	beq.n	800b172 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800b15c:	e01b      	b.n	800b196 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800b15e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b162:	d01d      	beq.n	800b1a0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800b164:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b168:	d01c      	beq.n	800b1a4 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800b16a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b16e:	d01b      	beq.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800b170:	e011      	b.n	800b196 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	3304      	adds	r3, #4
 800b176:	2100      	movs	r1, #0
 800b178:	4618      	mov	r0, r3
 800b17a:	f001 f81b 	bl	800c1b4 <RCCEx_PLL2_Config>
 800b17e:	4603      	mov	r3, r0
 800b180:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b182:	e012      	b.n	800b1aa <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	3324      	adds	r3, #36	; 0x24
 800b188:	2102      	movs	r1, #2
 800b18a:	4618      	mov	r0, r3
 800b18c:	f001 f8c4 	bl	800c318 <RCCEx_PLL3_Config>
 800b190:	4603      	mov	r3, r0
 800b192:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b194:	e009      	b.n	800b1aa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b196:	2301      	movs	r3, #1
 800b198:	75fb      	strb	r3, [r7, #23]
      break;
 800b19a:	e006      	b.n	800b1aa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800b19c:	bf00      	nop
 800b19e:	e004      	b.n	800b1aa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800b1a0:	bf00      	nop
 800b1a2:	e002      	b.n	800b1aa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800b1a4:	bf00      	nop
 800b1a6:	e000      	b.n	800b1aa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800b1a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b1aa:	7dfb      	ldrb	r3, [r7, #23]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d10a      	bne.n	800b1c6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b1b0:	4b41      	ldr	r3, [pc, #260]	; (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b1b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1b4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b1be:	493e      	ldr	r1, [pc, #248]	; (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b1c0:	4313      	orrs	r3, r2
 800b1c2:	658b      	str	r3, [r1, #88]	; 0x58
 800b1c4:	e001      	b.n	800b1ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1c6:	7dfb      	ldrb	r3, [r7, #23]
 800b1c8:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f003 0308 	and.w	r3, r3, #8
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d01a      	beq.n	800b20c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1e0:	d10a      	bne.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	3324      	adds	r3, #36	; 0x24
 800b1e6:	2102      	movs	r1, #2
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f001 f895 	bl	800c318 <RCCEx_PLL3_Config>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d001      	beq.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b1f8:	4b2f      	ldr	r3, [pc, #188]	; (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b1fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b206:	492c      	ldr	r1, [pc, #176]	; (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b208:	4313      	orrs	r3, r2
 800b20a:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f003 0310 	and.w	r3, r3, #16
 800b214:	2b00      	cmp	r3, #0
 800b216:	d01a      	beq.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b21e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b222:	d10a      	bne.n	800b23a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	3324      	adds	r3, #36	; 0x24
 800b228:	2102      	movs	r1, #2
 800b22a:	4618      	mov	r0, r3
 800b22c:	f001 f874 	bl	800c318 <RCCEx_PLL3_Config>
 800b230:	4603      	mov	r3, r0
 800b232:	2b00      	cmp	r3, #0
 800b234:	d001      	beq.n	800b23a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800b236:	2301      	movs	r3, #1
 800b238:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b23a:	4b1f      	ldr	r3, [pc, #124]	; (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b23c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b23e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b248:	491b      	ldr	r1, [pc, #108]	; (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b24a:	4313      	orrs	r3, r2
 800b24c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b256:	2b00      	cmp	r3, #0
 800b258:	d032      	beq.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b264:	d00d      	beq.n	800b282 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800b266:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b26a:	d016      	beq.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0xba6>
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d111      	bne.n	800b294 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	3304      	adds	r3, #4
 800b274:	2100      	movs	r1, #0
 800b276:	4618      	mov	r0, r3
 800b278:	f000 ff9c 	bl	800c1b4 <RCCEx_PLL2_Config>
 800b27c:	4603      	mov	r3, r0
 800b27e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b280:	e00c      	b.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	3324      	adds	r3, #36	; 0x24
 800b286:	2102      	movs	r1, #2
 800b288:	4618      	mov	r0, r3
 800b28a:	f001 f845 	bl	800c318 <RCCEx_PLL3_Config>
 800b28e:	4603      	mov	r3, r0
 800b290:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b292:	e003      	b.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b294:	2301      	movs	r3, #1
 800b296:	75fb      	strb	r3, [r7, #23]
      break;
 800b298:	e000      	b.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800b29a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b29c:	7dfb      	ldrb	r3, [r7, #23]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d10c      	bne.n	800b2bc <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b2a2:	4b05      	ldr	r3, [pc, #20]	; (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b2a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b2b0:	4901      	ldr	r1, [pc, #4]	; (800b2b8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	658b      	str	r3, [r1, #88]	; 0x58
 800b2b6:	e003      	b.n	800b2c0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 800b2b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2bc:	7dfb      	ldrb	r3, [r7, #23]
 800b2be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d02f      	beq.n	800b32c <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b2d6:	d00c      	beq.n	800b2f2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800b2d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b2dc:	d015      	beq.n	800b30a <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800b2de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b2e2:	d10f      	bne.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2e4:	4b79      	ldr	r3, [pc, #484]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b2e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e8:	4a78      	ldr	r2, [pc, #480]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b2ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800b2f0:	e00c      	b.n	800b30c <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	3324      	adds	r3, #36	; 0x24
 800b2f6:	2101      	movs	r1, #1
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f001 f80d 	bl	800c318 <RCCEx_PLL3_Config>
 800b2fe:	4603      	mov	r3, r0
 800b300:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800b302:	e003      	b.n	800b30c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b304:	2301      	movs	r3, #1
 800b306:	75fb      	strb	r3, [r7, #23]
      break;
 800b308:	e000      	b.n	800b30c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800b30a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b30c:	7dfb      	ldrb	r3, [r7, #23]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d10a      	bne.n	800b328 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b312:	4b6e      	ldr	r3, [pc, #440]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b316:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b320:	496a      	ldr	r1, [pc, #424]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b322:	4313      	orrs	r3, r2
 800b324:	654b      	str	r3, [r1, #84]	; 0x54
 800b326:	e001      	b.n	800b32c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b328:	7dfb      	ldrb	r3, [r7, #23]
 800b32a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b334:	2b00      	cmp	r3, #0
 800b336:	d029      	beq.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d003      	beq.n	800b348 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800b340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b344:	d007      	beq.n	800b356 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800b346:	e00f      	b.n	800b368 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b348:	4b60      	ldr	r3, [pc, #384]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b34c:	4a5f      	ldr	r2, [pc, #380]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b34e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b352:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b354:	e00b      	b.n	800b36e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	3304      	adds	r3, #4
 800b35a:	2102      	movs	r1, #2
 800b35c:	4618      	mov	r0, r3
 800b35e:	f000 ff29 	bl	800c1b4 <RCCEx_PLL2_Config>
 800b362:	4603      	mov	r3, r0
 800b364:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b366:	e002      	b.n	800b36e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 800b368:	2301      	movs	r3, #1
 800b36a:	75fb      	strb	r3, [r7, #23]
      break;
 800b36c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b36e:	7dfb      	ldrb	r3, [r7, #23]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d109      	bne.n	800b388 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b374:	4b55      	ldr	r3, [pc, #340]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b378:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b380:	4952      	ldr	r1, [pc, #328]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b382:	4313      	orrs	r3, r2
 800b384:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b386:	e001      	b.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b388:	7dfb      	ldrb	r3, [r7, #23]
 800b38a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b394:	2b00      	cmp	r3, #0
 800b396:	d00a      	beq.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	3324      	adds	r3, #36	; 0x24
 800b39c:	2102      	movs	r1, #2
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f000 ffba 	bl	800c318 <RCCEx_PLL3_Config>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d001      	beq.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d02f      	beq.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3c2:	d00c      	beq.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b3c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3c8:	d802      	bhi.n	800b3d0 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d011      	beq.n	800b3f2 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800b3ce:	e00d      	b.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800b3d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3d4:	d00f      	beq.n	800b3f6 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800b3d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b3da:	d00e      	beq.n	800b3fa <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800b3dc:	e006      	b.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3de:	4b3b      	ldr	r3, [pc, #236]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b3e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e2:	4a3a      	ldr	r2, [pc, #232]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b3e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800b3ea:	e007      	b.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	75fb      	strb	r3, [r7, #23]
      break;
 800b3f0:	e004      	b.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800b3f2:	bf00      	nop
 800b3f4:	e002      	b.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800b3f6:	bf00      	nop
 800b3f8:	e000      	b.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800b3fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b3fc:	7dfb      	ldrb	r3, [r7, #23]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d109      	bne.n	800b416 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b402:	4b32      	ldr	r3, [pc, #200]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b406:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b40e:	492f      	ldr	r1, [pc, #188]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b410:	4313      	orrs	r3, r2
 800b412:	654b      	str	r3, [r1, #84]	; 0x54
 800b414:	e001      	b.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b416:	7dfb      	ldrb	r3, [r7, #23]
 800b418:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b422:	2b00      	cmp	r3, #0
 800b424:	d008      	beq.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b426:	4b29      	ldr	r3, [pc, #164]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b42a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b432:	4926      	ldr	r1, [pc, #152]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b434:	4313      	orrs	r3, r2
 800b436:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b440:	2b00      	cmp	r3, #0
 800b442:	d009      	beq.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b444:	4b21      	ldr	r3, [pc, #132]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b446:	691b      	ldr	r3, [r3, #16]
 800b448:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b452:	491e      	ldr	r1, [pc, #120]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b454:	4313      	orrs	r3, r2
 800b456:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b460:	2b00      	cmp	r3, #0
 800b462:	d008      	beq.n	800b476 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b464:	4b19      	ldr	r3, [pc, #100]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b468:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b470:	4916      	ldr	r1, [pc, #88]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b472:	4313      	orrs	r3, r2
 800b474:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d00d      	beq.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b482:	4b12      	ldr	r3, [pc, #72]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b484:	691b      	ldr	r3, [r3, #16]
 800b486:	4a11      	ldr	r2, [pc, #68]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b488:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b48c:	6113      	str	r3, [r2, #16]
 800b48e:	4b0f      	ldr	r3, [pc, #60]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b490:	691a      	ldr	r2, [r3, #16]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b498:	490c      	ldr	r1, [pc, #48]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b49a:	4313      	orrs	r3, r2
 800b49c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	da08      	bge.n	800b4b8 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b4a6:	4b09      	ldr	r3, [pc, #36]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b4a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4b2:	4906      	ldr	r1, [pc, #24]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b4b4:	4313      	orrs	r3, r2
 800b4b6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800b4b8:	7dbb      	ldrb	r3, [r7, #22]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d101      	bne.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	e000      	b.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800b4c2:	2301      	movs	r3, #1
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3718      	adds	r7, #24
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}
 800b4cc:	58024400 	.word	0x58024400

0800b4d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b090      	sub	sp, #64	; 0x40
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4de:	d150      	bne.n	800b582 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800b4e0:	4ba1      	ldr	r3, [pc, #644]	; (800b768 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b4e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4e4:	f003 0307 	and.w	r3, r3, #7
 800b4e8:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ec:	2b04      	cmp	r3, #4
 800b4ee:	d844      	bhi.n	800b57a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800b4f0:	a201      	add	r2, pc, #4	; (adr r2, 800b4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800b4f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4f6:	bf00      	nop
 800b4f8:	0800b50d 	.word	0x0800b50d
 800b4fc:	0800b51d 	.word	0x0800b51d
 800b500:	0800b52d 	.word	0x0800b52d
 800b504:	0800b575 	.word	0x0800b575
 800b508:	0800b53d 	.word	0x0800b53d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b50c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b510:	4618      	mov	r0, r3
 800b512:	f000 fd03 	bl	800bf1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b518:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b51a:	e241      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b51c:	f107 0318 	add.w	r3, r7, #24
 800b520:	4618      	mov	r0, r3
 800b522:	f000 fa63 	bl	800b9ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b526:	69bb      	ldr	r3, [r7, #24]
 800b528:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b52a:	e239      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b52c:	f107 030c 	add.w	r3, r7, #12
 800b530:	4618      	mov	r0, r3
 800b532:	f000 fba7 	bl	800bc84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b53a:	e231      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b53c:	4b8a      	ldr	r3, [pc, #552]	; (800b768 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b53e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b540:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b544:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d102      	bne.n	800b552 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b54c:	4b87      	ldr	r3, [pc, #540]	; (800b76c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b54e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b550:	e226      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b554:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b558:	d102      	bne.n	800b560 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800b55a:	4b85      	ldr	r3, [pc, #532]	; (800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b55c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b55e:	e21f      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b562:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b566:	d102      	bne.n	800b56e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 800b568:	4b82      	ldr	r3, [pc, #520]	; (800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b56a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b56c:	e218      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b56e:	2300      	movs	r3, #0
 800b570:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b572:	e215      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b574:	4b80      	ldr	r3, [pc, #512]	; (800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b576:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b578:	e212      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800b57a:	2300      	movs	r3, #0
 800b57c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b57e:	bf00      	nop
 800b580:	e20e      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b588:	d14f      	bne.n	800b62a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800b58a:	4b77      	ldr	r3, [pc, #476]	; (800b768 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b58c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b58e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800b592:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b596:	2b80      	cmp	r3, #128	; 0x80
 800b598:	d01c      	beq.n	800b5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800b59a:	2b80      	cmp	r3, #128	; 0x80
 800b59c:	d804      	bhi.n	800b5a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d008      	beq.n	800b5b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800b5a2:	2b40      	cmp	r3, #64	; 0x40
 800b5a4:	d00e      	beq.n	800b5c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800b5a6:	e03c      	b.n	800b622 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800b5a8:	2bc0      	cmp	r3, #192	; 0xc0
 800b5aa:	d037      	beq.n	800b61c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800b5ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5b0:	d018      	beq.n	800b5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800b5b2:	e036      	b.n	800b622 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b5b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f000 fcaf 	bl	800bf1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5c2:	e1ed      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5c4:	f107 0318 	add.w	r3, r7, #24
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f000 fa0f 	bl	800b9ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b5ce:	69bb      	ldr	r3, [r7, #24]
 800b5d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5d2:	e1e5      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5d4:	f107 030c 	add.w	r3, r7, #12
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f000 fb53 	bl	800bc84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5e2:	e1dd      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b5e4:	4b60      	ldr	r3, [pc, #384]	; (800b768 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b5e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b5ec:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b5ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d102      	bne.n	800b5fa <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b5f4:	4b5d      	ldr	r3, [pc, #372]	; (800b76c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b5f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b5f8:	e1d2      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b5fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b600:	d102      	bne.n	800b608 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800b602:	4b5b      	ldr	r3, [pc, #364]	; (800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b604:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b606:	e1cb      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b60a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b60e:	d102      	bne.n	800b616 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800b610:	4b58      	ldr	r3, [pc, #352]	; (800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b612:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b614:	e1c4      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b616:	2300      	movs	r3, #0
 800b618:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b61a:	e1c1      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b61c:	4b56      	ldr	r3, [pc, #344]	; (800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b61e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b620:	e1be      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800b622:	2300      	movs	r3, #0
 800b624:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b626:	bf00      	nop
 800b628:	e1ba      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b630:	d153      	bne.n	800b6da <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800b632:	4b4d      	ldr	r3, [pc, #308]	; (800b768 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b636:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b63a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b63e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b642:	d01f      	beq.n	800b684 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800b644:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b648:	d805      	bhi.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d00a      	beq.n	800b664 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800b64e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b652:	d00f      	beq.n	800b674 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800b654:	e03d      	b.n	800b6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800b656:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b65a:	d037      	beq.n	800b6cc <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800b65c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b660:	d018      	beq.n	800b694 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800b662:	e036      	b.n	800b6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b668:	4618      	mov	r0, r3
 800b66a:	f000 fc57 	bl	800bf1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b670:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b672:	e195      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b674:	f107 0318 	add.w	r3, r7, #24
 800b678:	4618      	mov	r0, r3
 800b67a:	f000 f9b7 	bl	800b9ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b67e:	69bb      	ldr	r3, [r7, #24]
 800b680:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b682:	e18d      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b684:	f107 030c 	add.w	r3, r7, #12
 800b688:	4618      	mov	r0, r3
 800b68a:	f000 fafb 	bl	800bc84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b692:	e185      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b694:	4b34      	ldr	r3, [pc, #208]	; (800b768 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b698:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b69c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b69e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d102      	bne.n	800b6aa <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b6a4:	4b31      	ldr	r3, [pc, #196]	; (800b76c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b6a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b6a8:	e17a      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b6aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6b0:	d102      	bne.n	800b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800b6b2:	4b2f      	ldr	r3, [pc, #188]	; (800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b6b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6b6:	e173      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b6b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6be:	d102      	bne.n	800b6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 800b6c0:	4b2c      	ldr	r3, [pc, #176]	; (800b774 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b6c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6c4:	e16c      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6ca:	e169      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b6cc:	4b2a      	ldr	r3, [pc, #168]	; (800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b6ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6d0:	e166      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6d6:	bf00      	nop
 800b6d8:	e162      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b6e0:	d15d      	bne.n	800b79e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800b6e2:	4b21      	ldr	r3, [pc, #132]	; (800b768 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b6e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6e6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b6ea:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b6f2:	d01f      	beq.n	800b734 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800b6f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b6f8:	d805      	bhi.n	800b706 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d00a      	beq.n	800b714 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800b6fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b702:	d00f      	beq.n	800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800b704:	e047      	b.n	800b796 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800b706:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b70a:	d041      	beq.n	800b790 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800b70c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b710:	d018      	beq.n	800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800b712:	e040      	b.n	800b796 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b718:	4618      	mov	r0, r3
 800b71a:	f000 fbff 	bl	800bf1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b720:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b722:	e13d      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b724:	f107 0318 	add.w	r3, r7, #24
 800b728:	4618      	mov	r0, r3
 800b72a:	f000 f95f 	bl	800b9ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b72e:	69bb      	ldr	r3, [r7, #24]
 800b730:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b732:	e135      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b734:	f107 030c 	add.w	r3, r7, #12
 800b738:	4618      	mov	r0, r3
 800b73a:	f000 faa3 	bl	800bc84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b742:	e12d      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b744:	4b08      	ldr	r3, [pc, #32]	; (800b768 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b748:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b74c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b74e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b750:	2b00      	cmp	r3, #0
 800b752:	d102      	bne.n	800b75a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b754:	4b05      	ldr	r3, [pc, #20]	; (800b76c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b756:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b758:	e122      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b75a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b75c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b760:	d10c      	bne.n	800b77c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800b762:	4b03      	ldr	r3, [pc, #12]	; (800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b764:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b766:	e11b      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800b768:	58024400 	.word	0x58024400
 800b76c:	03d09000 	.word	0x03d09000
 800b770:	003d0900 	.word	0x003d0900
 800b774:	017d7840 	.word	0x017d7840
 800b778:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b77c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b77e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b782:	d102      	bne.n	800b78a <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 800b784:	4b89      	ldr	r3, [pc, #548]	; (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800b786:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b788:	e10a      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b78a:	2300      	movs	r3, #0
 800b78c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b78e:	e107      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b790:	4b87      	ldr	r3, [pc, #540]	; (800b9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800b792:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b794:	e104      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800b796:	2300      	movs	r3, #0
 800b798:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b79a:	bf00      	nop
 800b79c:	e100      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7a4:	d153      	bne.n	800b84e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800b7a6:	4b83      	ldr	r3, [pc, #524]	; (800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b7a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7aa:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b7ae:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7b6:	d01f      	beq.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800b7b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7bc:	d805      	bhi.n	800b7ca <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d00a      	beq.n	800b7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800b7c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7c6:	d00f      	beq.n	800b7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800b7c8:	e03d      	b.n	800b846 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800b7ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b7ce:	d037      	beq.n	800b840 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800b7d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7d4:	d018      	beq.n	800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800b7d6:	e036      	b.n	800b846 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b7d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f000 fb9d 	bl	800bf1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7e6:	e0db      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7e8:	f107 0318 	add.w	r3, r7, #24
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f000 f8fd 	bl	800b9ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b7f2:	69bb      	ldr	r3, [r7, #24]
 800b7f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7f6:	e0d3      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7f8:	f107 030c 	add.w	r3, r7, #12
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f000 fa41 	bl	800bc84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b806:	e0cb      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b808:	4b6a      	ldr	r3, [pc, #424]	; (800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b80a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b80c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b810:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b814:	2b00      	cmp	r3, #0
 800b816:	d102      	bne.n	800b81e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b818:	4b67      	ldr	r3, [pc, #412]	; (800b9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800b81a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b81c:	e0c0      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b81e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b820:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b824:	d102      	bne.n	800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800b826:	4b65      	ldr	r3, [pc, #404]	; (800b9bc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800b828:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b82a:	e0b9      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b82c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b82e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b832:	d102      	bne.n	800b83a <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 800b834:	4b5d      	ldr	r3, [pc, #372]	; (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800b836:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b838:	e0b2      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b83a:	2300      	movs	r3, #0
 800b83c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b83e:	e0af      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b840:	4b5b      	ldr	r3, [pc, #364]	; (800b9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800b842:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b844:	e0ac      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800b846:	2300      	movs	r3, #0
 800b848:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b84a:	bf00      	nop
 800b84c:	e0a8      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b854:	d13d      	bne.n	800b8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800b856:	4b57      	ldr	r3, [pc, #348]	; (800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b85a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b85e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b866:	d00c      	beq.n	800b882 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b868:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b86c:	d011      	beq.n	800b892 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d12b      	bne.n	800b8ca <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b872:	f107 0318 	add.w	r3, r7, #24
 800b876:	4618      	mov	r0, r3
 800b878:	f000 f8b8 	bl	800b9ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b87c:	69bb      	ldr	r3, [r7, #24]
 800b87e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b880:	e08e      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b882:	f107 030c 	add.w	r3, r7, #12
 800b886:	4618      	mov	r0, r3
 800b888:	f000 f9fc 	bl	800bc84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b890:	e086      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b892:	4b48      	ldr	r3, [pc, #288]	; (800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b896:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b89a:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b89c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d102      	bne.n	800b8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b8a2:	4b45      	ldr	r3, [pc, #276]	; (800b9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800b8a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b8a6:	e07b      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b8a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8ae:	d102      	bne.n	800b8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 800b8b0:	4b42      	ldr	r3, [pc, #264]	; (800b9bc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800b8b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8b4:	e074      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b8b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8bc:	d102      	bne.n	800b8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800b8be:	4b3b      	ldr	r3, [pc, #236]	; (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800b8c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8c2:	e06d      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8c8:	e06a      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8ce:	bf00      	nop
 800b8d0:	e066      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8d8:	d11f      	bne.n	800b91a <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800b8da:	4b36      	ldr	r3, [pc, #216]	; (800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b8dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b8e2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d003      	beq.n	800b8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800b8ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8ee:	d008      	beq.n	800b902 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800b8f0:	e00f      	b.n	800b912 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b8f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f000 fb10 	bl	800bf1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b900:	e04e      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b902:	f107 0318 	add.w	r3, r7, #24
 800b906:	4618      	mov	r0, r3
 800b908:	f000 f870 	bl	800b9ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b90c:	6a3b      	ldr	r3, [r7, #32]
 800b90e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b910:	e046      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800b912:	2300      	movs	r3, #0
 800b914:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b916:	bf00      	nop
 800b918:	e042      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b920:	d13c      	bne.n	800b99c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800b922:	4b24      	ldr	r3, [pc, #144]	; (800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b926:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b92a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b92e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b932:	d01e      	beq.n	800b972 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 800b934:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b938:	d805      	bhi.n	800b946 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d00d      	beq.n	800b95a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800b93e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b942:	d00e      	beq.n	800b962 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 800b944:	e026      	b.n	800b994 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800b946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b94a:	d01d      	beq.n	800b988 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800b94c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b950:	d01d      	beq.n	800b98e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800b952:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b956:	d014      	beq.n	800b982 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800b958:	e01c      	b.n	800b994 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b95a:	f000 f831 	bl	800b9c0 <HAL_RCCEx_GetD3PCLK1Freq>
 800b95e:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800b960:	e01e      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b962:	f107 0318 	add.w	r3, r7, #24
 800b966:	4618      	mov	r0, r3
 800b968:	f000 f840 	bl	800b9ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b96c:	69fb      	ldr	r3, [r7, #28]
 800b96e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b970:	e016      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b972:	f107 030c 	add.w	r3, r7, #12
 800b976:	4618      	mov	r0, r3
 800b978:	f000 f984 	bl	800bc84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b980:	e00e      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800b982:	4b0d      	ldr	r3, [pc, #52]	; (800b9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800b984:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b986:	e00b      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 800b988:	4b0c      	ldr	r3, [pc, #48]	; (800b9bc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800b98a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b98c:	e008      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800b98e:	4b07      	ldr	r3, [pc, #28]	; (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800b990:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b992:	e005      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800b994:	2300      	movs	r3, #0
 800b996:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b998:	bf00      	nop
 800b99a:	e001      	b.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 800b99c:	2300      	movs	r3, #0
 800b99e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800b9a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3740      	adds	r7, #64	; 0x40
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}
 800b9aa:	bf00      	nop
 800b9ac:	017d7840 	.word	0x017d7840
 800b9b0:	00bb8000 	.word	0x00bb8000
 800b9b4:	58024400 	.word	0x58024400
 800b9b8:	03d09000 	.word	0x03d09000
 800b9bc:	003d0900 	.word	0x003d0900

0800b9c0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b9c4:	f7fe fe1e 	bl	800a604 <HAL_RCC_GetHCLKFreq>
 800b9c8:	4601      	mov	r1, r0
 800b9ca:	4b06      	ldr	r3, [pc, #24]	; (800b9e4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b9cc:	6a1b      	ldr	r3, [r3, #32]
 800b9ce:	091b      	lsrs	r3, r3, #4
 800b9d0:	f003 0307 	and.w	r3, r3, #7
 800b9d4:	4a04      	ldr	r2, [pc, #16]	; (800b9e8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b9d6:	5cd3      	ldrb	r3, [r2, r3]
 800b9d8:	f003 031f 	and.w	r3, r3, #31
 800b9dc:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	bd80      	pop	{r7, pc}
 800b9e4:	58024400 	.word	0x58024400
 800b9e8:	0801af50 	.word	0x0801af50

0800b9ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b089      	sub	sp, #36	; 0x24
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b9f4:	4b9d      	ldr	r3, [pc, #628]	; (800bc6c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800b9f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9f8:	f003 0303 	and.w	r3, r3, #3
 800b9fc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800b9fe:	4b9b      	ldr	r3, [pc, #620]	; (800bc6c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ba00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba02:	0b1b      	lsrs	r3, r3, #12
 800ba04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba08:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ba0a:	4b98      	ldr	r3, [pc, #608]	; (800bc6c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ba0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba0e:	091b      	lsrs	r3, r3, #4
 800ba10:	f003 0301 	and.w	r3, r3, #1
 800ba14:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800ba16:	4b95      	ldr	r3, [pc, #596]	; (800bc6c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ba18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba1a:	08db      	lsrs	r3, r3, #3
 800ba1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ba20:	693a      	ldr	r2, [r7, #16]
 800ba22:	fb02 f303 	mul.w	r3, r2, r3
 800ba26:	ee07 3a90 	vmov	s15, r3
 800ba2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	f000 810a 	beq.w	800bc4e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800ba3a:	69bb      	ldr	r3, [r7, #24]
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d05a      	beq.n	800baf6 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	d302      	bcc.n	800ba4a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800ba44:	2b02      	cmp	r3, #2
 800ba46:	d078      	beq.n	800bb3a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800ba48:	e099      	b.n	800bb7e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba4a:	4b88      	ldr	r3, [pc, #544]	; (800bc6c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f003 0320 	and.w	r3, r3, #32
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d02d      	beq.n	800bab2 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ba56:	4b85      	ldr	r3, [pc, #532]	; (800bc6c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	08db      	lsrs	r3, r3, #3
 800ba5c:	f003 0303 	and.w	r3, r3, #3
 800ba60:	4a83      	ldr	r2, [pc, #524]	; (800bc70 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800ba62:	fa22 f303 	lsr.w	r3, r2, r3
 800ba66:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	ee07 3a90 	vmov	s15, r3
 800ba6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	ee07 3a90 	vmov	s15, r3
 800ba78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba80:	4b7a      	ldr	r3, [pc, #488]	; (800bc6c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ba82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba88:	ee07 3a90 	vmov	s15, r3
 800ba8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba90:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba94:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bc74 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800ba98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800baa0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800baa4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baac:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bab0:	e087      	b.n	800bbc2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	ee07 3a90 	vmov	s15, r3
 800bab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800babc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800bc78 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800bac0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bac4:	4b69      	ldr	r3, [pc, #420]	; (800bc6c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bacc:	ee07 3a90 	vmov	s15, r3
 800bad0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bad4:	ed97 6a03 	vldr	s12, [r7, #12]
 800bad8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bc74 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800badc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bae0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bae4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bae8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baf0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800baf4:	e065      	b.n	800bbc2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	ee07 3a90 	vmov	s15, r3
 800bafc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb00:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800bc7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800bb04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb08:	4b58      	ldr	r3, [pc, #352]	; (800bc6c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bb0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb10:	ee07 3a90 	vmov	s15, r3
 800bb14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb18:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb1c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bc74 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800bb20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb30:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb34:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb38:	e043      	b.n	800bbc2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	ee07 3a90 	vmov	s15, r3
 800bb40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb44:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bc80 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800bb48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb4c:	4b47      	ldr	r3, [pc, #284]	; (800bc6c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bb4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb54:	ee07 3a90 	vmov	s15, r3
 800bb58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb5c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb60:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bc74 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800bb64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb78:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb7c:	e021      	b.n	800bbc2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	ee07 3a90 	vmov	s15, r3
 800bb84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb88:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800bc7c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800bb8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb90:	4b36      	ldr	r3, [pc, #216]	; (800bc6c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bb92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb98:	ee07 3a90 	vmov	s15, r3
 800bb9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bba0:	ed97 6a03 	vldr	s12, [r7, #12]
 800bba4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bc74 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800bba8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbbc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bbc0:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800bbc2:	4b2a      	ldr	r3, [pc, #168]	; (800bc6c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bbc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbc6:	0a5b      	lsrs	r3, r3, #9
 800bbc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbcc:	ee07 3a90 	vmov	s15, r3
 800bbd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bbd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bbdc:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbe0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbe4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbe8:	ee17 2a90 	vmov	r2, s15
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800bbf0:	4b1e      	ldr	r3, [pc, #120]	; (800bc6c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bbf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbf4:	0c1b      	lsrs	r3, r3, #16
 800bbf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbfa:	ee07 3a90 	vmov	s15, r3
 800bbfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc06:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc0a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc16:	ee17 2a90 	vmov	r2, s15
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800bc1e:	4b13      	ldr	r3, [pc, #76]	; (800bc6c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bc20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc22:	0e1b      	lsrs	r3, r3, #24
 800bc24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc28:	ee07 3a90 	vmov	s15, r3
 800bc2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc34:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc38:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc44:	ee17 2a90 	vmov	r2, s15
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bc4c:	e008      	b.n	800bc60 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2200      	movs	r2, #0
 800bc52:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2200      	movs	r2, #0
 800bc58:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	609a      	str	r2, [r3, #8]
}
 800bc60:	bf00      	nop
 800bc62:	3724      	adds	r7, #36	; 0x24
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr
 800bc6c:	58024400 	.word	0x58024400
 800bc70:	03d09000 	.word	0x03d09000
 800bc74:	46000000 	.word	0x46000000
 800bc78:	4c742400 	.word	0x4c742400
 800bc7c:	4a742400 	.word	0x4a742400
 800bc80:	4bbebc20 	.word	0x4bbebc20

0800bc84 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b089      	sub	sp, #36	; 0x24
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bc8c:	4b9d      	ldr	r3, [pc, #628]	; (800bf04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bc8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc90:	f003 0303 	and.w	r3, r3, #3
 800bc94:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800bc96:	4b9b      	ldr	r3, [pc, #620]	; (800bf04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bc98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc9a:	0d1b      	lsrs	r3, r3, #20
 800bc9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bca0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bca2:	4b98      	ldr	r3, [pc, #608]	; (800bf04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca6:	0a1b      	lsrs	r3, r3, #8
 800bca8:	f003 0301 	and.w	r3, r3, #1
 800bcac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800bcae:	4b95      	ldr	r3, [pc, #596]	; (800bf04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bcb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcb2:	08db      	lsrs	r3, r3, #3
 800bcb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bcb8:	693a      	ldr	r2, [r7, #16]
 800bcba:	fb02 f303 	mul.w	r3, r2, r3
 800bcbe:	ee07 3a90 	vmov	s15, r3
 800bcc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcc6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	f000 810a 	beq.w	800bee6 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800bcd2:	69bb      	ldr	r3, [r7, #24]
 800bcd4:	2b01      	cmp	r3, #1
 800bcd6:	d05a      	beq.n	800bd8e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800bcd8:	2b01      	cmp	r3, #1
 800bcda:	d302      	bcc.n	800bce2 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800bcdc:	2b02      	cmp	r3, #2
 800bcde:	d078      	beq.n	800bdd2 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800bce0:	e099      	b.n	800be16 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bce2:	4b88      	ldr	r3, [pc, #544]	; (800bf04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	f003 0320 	and.w	r3, r3, #32
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d02d      	beq.n	800bd4a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bcee:	4b85      	ldr	r3, [pc, #532]	; (800bf04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	08db      	lsrs	r3, r3, #3
 800bcf4:	f003 0303 	and.w	r3, r3, #3
 800bcf8:	4a83      	ldr	r2, [pc, #524]	; (800bf08 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800bcfa:	fa22 f303 	lsr.w	r3, r2, r3
 800bcfe:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	ee07 3a90 	vmov	s15, r3
 800bd06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	ee07 3a90 	vmov	s15, r3
 800bd10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd18:	4b7a      	ldr	r3, [pc, #488]	; (800bf04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bd1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd20:	ee07 3a90 	vmov	s15, r3
 800bd24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd28:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd2c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bf0c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800bd30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd40:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd44:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bd48:	e087      	b.n	800be5a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	ee07 3a90 	vmov	s15, r3
 800bd50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd54:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800bf10 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800bd58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd5c:	4b69      	ldr	r3, [pc, #420]	; (800bf04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bd5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd64:	ee07 3a90 	vmov	s15, r3
 800bd68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd6c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd70:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bf0c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800bd74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd88:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd8c:	e065      	b.n	800be5a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	ee07 3a90 	vmov	s15, r3
 800bd94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd98:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800bf14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800bd9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bda0:	4b58      	ldr	r3, [pc, #352]	; (800bf04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bda2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bda4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bda8:	ee07 3a90 	vmov	s15, r3
 800bdac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdb0:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdb4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bf0c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800bdb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bdc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdcc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bdd0:	e043      	b.n	800be5a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	ee07 3a90 	vmov	s15, r3
 800bdd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bddc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bf18 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800bde0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bde4:	4b47      	ldr	r3, [pc, #284]	; (800bf04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bde6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bde8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdec:	ee07 3a90 	vmov	s15, r3
 800bdf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdf4:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdf8:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bf0c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800bdfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be10:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be14:	e021      	b.n	800be5a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	ee07 3a90 	vmov	s15, r3
 800be1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be20:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800bf14 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800be24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be28:	4b36      	ldr	r3, [pc, #216]	; (800bf04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800be2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be30:	ee07 3a90 	vmov	s15, r3
 800be34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be38:	ed97 6a03 	vldr	s12, [r7, #12]
 800be3c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bf0c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800be40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be54:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800be58:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800be5a:	4b2a      	ldr	r3, [pc, #168]	; (800bf04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800be5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be5e:	0a5b      	lsrs	r3, r3, #9
 800be60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be64:	ee07 3a90 	vmov	s15, r3
 800be68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be70:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be74:	edd7 6a07 	vldr	s13, [r7, #28]
 800be78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be80:	ee17 2a90 	vmov	r2, s15
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800be88:	4b1e      	ldr	r3, [pc, #120]	; (800bf04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800be8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be8c:	0c1b      	lsrs	r3, r3, #16
 800be8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be92:	ee07 3a90 	vmov	s15, r3
 800be96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bea2:	edd7 6a07 	vldr	s13, [r7, #28]
 800bea6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800beaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800beae:	ee17 2a90 	vmov	r2, s15
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800beb6:	4b13      	ldr	r3, [pc, #76]	; (800bf04 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800beb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beba:	0e1b      	lsrs	r3, r3, #24
 800bebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bec0:	ee07 3a90 	vmov	s15, r3
 800bec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bec8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800becc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bed0:	edd7 6a07 	vldr	s13, [r7, #28]
 800bed4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bed8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bedc:	ee17 2a90 	vmov	r2, s15
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bee4:	e008      	b.n	800bef8 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2200      	movs	r2, #0
 800beea:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2200      	movs	r2, #0
 800bef0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2200      	movs	r2, #0
 800bef6:	609a      	str	r2, [r3, #8]
}
 800bef8:	bf00      	nop
 800befa:	3724      	adds	r7, #36	; 0x24
 800befc:	46bd      	mov	sp, r7
 800befe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf02:	4770      	bx	lr
 800bf04:	58024400 	.word	0x58024400
 800bf08:	03d09000 	.word	0x03d09000
 800bf0c:	46000000 	.word	0x46000000
 800bf10:	4c742400 	.word	0x4c742400
 800bf14:	4a742400 	.word	0x4a742400
 800bf18:	4bbebc20 	.word	0x4bbebc20

0800bf1c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b089      	sub	sp, #36	; 0x24
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bf24:	4b9d      	ldr	r3, [pc, #628]	; (800c19c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bf26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf28:	f003 0303 	and.w	r3, r3, #3
 800bf2c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800bf2e:	4b9b      	ldr	r3, [pc, #620]	; (800c19c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bf30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf32:	091b      	lsrs	r3, r3, #4
 800bf34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf38:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bf3a:	4b98      	ldr	r3, [pc, #608]	; (800c19c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bf3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf3e:	f003 0301 	and.w	r3, r3, #1
 800bf42:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800bf44:	4b95      	ldr	r3, [pc, #596]	; (800c19c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bf46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf48:	08db      	lsrs	r3, r3, #3
 800bf4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bf4e:	693a      	ldr	r2, [r7, #16]
 800bf50:	fb02 f303 	mul.w	r3, r2, r3
 800bf54:	ee07 3a90 	vmov	s15, r3
 800bf58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf5c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bf60:	697b      	ldr	r3, [r7, #20]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	f000 810a 	beq.w	800c17c <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 800bf68:	69bb      	ldr	r3, [r7, #24]
 800bf6a:	2b01      	cmp	r3, #1
 800bf6c:	d05a      	beq.n	800c024 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800bf6e:	2b01      	cmp	r3, #1
 800bf70:	d302      	bcc.n	800bf78 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800bf72:	2b02      	cmp	r3, #2
 800bf74:	d078      	beq.n	800c068 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800bf76:	e099      	b.n	800c0ac <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf78:	4b88      	ldr	r3, [pc, #544]	; (800c19c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f003 0320 	and.w	r3, r3, #32
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d02d      	beq.n	800bfe0 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bf84:	4b85      	ldr	r3, [pc, #532]	; (800c19c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	08db      	lsrs	r3, r3, #3
 800bf8a:	f003 0303 	and.w	r3, r3, #3
 800bf8e:	4a84      	ldr	r2, [pc, #528]	; (800c1a0 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800bf90:	fa22 f303 	lsr.w	r3, r2, r3
 800bf94:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	ee07 3a90 	vmov	s15, r3
 800bf9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	ee07 3a90 	vmov	s15, r3
 800bfa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfae:	4b7b      	ldr	r3, [pc, #492]	; (800c19c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bfb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfb6:	ee07 3a90 	vmov	s15, r3
 800bfba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfbe:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfc2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800bfc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfda:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bfde:	e087      	b.n	800c0f0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	ee07 3a90 	vmov	s15, r3
 800bfe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c1a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800bfee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bff2:	4b6a      	ldr	r3, [pc, #424]	; (800c19c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bffa:	ee07 3a90 	vmov	s15, r3
 800bffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c002:	ed97 6a03 	vldr	s12, [r7, #12]
 800c006:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800c00a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c00e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c012:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c01a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c01e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c022:	e065      	b.n	800c0f0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c024:	697b      	ldr	r3, [r7, #20]
 800c026:	ee07 3a90 	vmov	s15, r3
 800c02a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c02e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c1ac <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800c032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c036:	4b59      	ldr	r3, [pc, #356]	; (800c19c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c03a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c03e:	ee07 3a90 	vmov	s15, r3
 800c042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c046:	ed97 6a03 	vldr	s12, [r7, #12]
 800c04a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800c04e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c056:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c05a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c05e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c062:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c066:	e043      	b.n	800c0f0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	ee07 3a90 	vmov	s15, r3
 800c06e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c072:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c1b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c07a:	4b48      	ldr	r3, [pc, #288]	; (800c19c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c07c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c07e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c082:	ee07 3a90 	vmov	s15, r3
 800c086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c08a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c08e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800c092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c09a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c09e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c0aa:	e021      	b.n	800c0f0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c0ac:	697b      	ldr	r3, [r7, #20]
 800c0ae:	ee07 3a90 	vmov	s15, r3
 800c0b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0b6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c1ac <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800c0ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0be:	4b37      	ldr	r3, [pc, #220]	; (800c19c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c0c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0c6:	ee07 3a90 	vmov	s15, r3
 800c0ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0d2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c1a4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800c0d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c0ee:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800c0f0:	4b2a      	ldr	r3, [pc, #168]	; (800c19c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c0f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0f4:	0a5b      	lsrs	r3, r3, #9
 800c0f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0fa:	ee07 3a90 	vmov	s15, r3
 800c0fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c102:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c106:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c10a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c10e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c112:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c116:	ee17 2a90 	vmov	r2, s15
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800c11e:	4b1f      	ldr	r3, [pc, #124]	; (800c19c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c122:	0c1b      	lsrs	r3, r3, #16
 800c124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c128:	ee07 3a90 	vmov	s15, r3
 800c12c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c130:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c134:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c138:	edd7 6a07 	vldr	s13, [r7, #28]
 800c13c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c144:	ee17 2a90 	vmov	r2, s15
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800c14c:	4b13      	ldr	r3, [pc, #76]	; (800c19c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c14e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c150:	0e1b      	lsrs	r3, r3, #24
 800c152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c156:	ee07 3a90 	vmov	s15, r3
 800c15a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c15e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c162:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c166:	edd7 6a07 	vldr	s13, [r7, #28]
 800c16a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c16e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c172:	ee17 2a90 	vmov	r2, s15
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c17a:	e008      	b.n	800c18e <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2200      	movs	r2, #0
 800c180:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2200      	movs	r2, #0
 800c186:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2200      	movs	r2, #0
 800c18c:	609a      	str	r2, [r3, #8]
}
 800c18e:	bf00      	nop
 800c190:	3724      	adds	r7, #36	; 0x24
 800c192:	46bd      	mov	sp, r7
 800c194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c198:	4770      	bx	lr
 800c19a:	bf00      	nop
 800c19c:	58024400 	.word	0x58024400
 800c1a0:	03d09000 	.word	0x03d09000
 800c1a4:	46000000 	.word	0x46000000
 800c1a8:	4c742400 	.word	0x4c742400
 800c1ac:	4a742400 	.word	0x4a742400
 800c1b0:	4bbebc20 	.word	0x4bbebc20

0800c1b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b084      	sub	sp, #16
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
 800c1bc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c1c2:	4b53      	ldr	r3, [pc, #332]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1c6:	f003 0303 	and.w	r3, r3, #3
 800c1ca:	2b03      	cmp	r3, #3
 800c1cc:	d101      	bne.n	800c1d2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	e099      	b.n	800c306 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c1d2:	4b4f      	ldr	r3, [pc, #316]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	4a4e      	ldr	r2, [pc, #312]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c1d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c1dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c1de:	f7f8 fa01 	bl	80045e4 <HAL_GetTick>
 800c1e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c1e4:	e008      	b.n	800c1f8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c1e6:	f7f8 f9fd 	bl	80045e4 <HAL_GetTick>
 800c1ea:	4602      	mov	r2, r0
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	1ad3      	subs	r3, r2, r3
 800c1f0:	2b02      	cmp	r3, #2
 800c1f2:	d901      	bls.n	800c1f8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c1f4:	2303      	movs	r3, #3
 800c1f6:	e086      	b.n	800c306 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c1f8:	4b45      	ldr	r3, [pc, #276]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c200:	2b00      	cmp	r3, #0
 800c202:	d1f0      	bne.n	800c1e6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c204:	4b42      	ldr	r3, [pc, #264]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c208:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	031b      	lsls	r3, r3, #12
 800c212:	493f      	ldr	r1, [pc, #252]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c214:	4313      	orrs	r3, r2
 800c216:	628b      	str	r3, [r1, #40]	; 0x28
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	685b      	ldr	r3, [r3, #4]
 800c21c:	3b01      	subs	r3, #1
 800c21e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	689b      	ldr	r3, [r3, #8]
 800c226:	3b01      	subs	r3, #1
 800c228:	025b      	lsls	r3, r3, #9
 800c22a:	b29b      	uxth	r3, r3
 800c22c:	431a      	orrs	r2, r3
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	68db      	ldr	r3, [r3, #12]
 800c232:	3b01      	subs	r3, #1
 800c234:	041b      	lsls	r3, r3, #16
 800c236:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c23a:	431a      	orrs	r2, r3
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	691b      	ldr	r3, [r3, #16]
 800c240:	3b01      	subs	r3, #1
 800c242:	061b      	lsls	r3, r3, #24
 800c244:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c248:	4931      	ldr	r1, [pc, #196]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c24a:	4313      	orrs	r3, r2
 800c24c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c24e:	4b30      	ldr	r3, [pc, #192]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c252:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	695b      	ldr	r3, [r3, #20]
 800c25a:	492d      	ldr	r1, [pc, #180]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c25c:	4313      	orrs	r3, r2
 800c25e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c260:	4b2b      	ldr	r3, [pc, #172]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c264:	f023 0220 	bic.w	r2, r3, #32
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	699b      	ldr	r3, [r3, #24]
 800c26c:	4928      	ldr	r1, [pc, #160]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c26e:	4313      	orrs	r3, r2
 800c270:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c272:	4b27      	ldr	r3, [pc, #156]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c276:	4a26      	ldr	r2, [pc, #152]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c278:	f023 0310 	bic.w	r3, r3, #16
 800c27c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c27e:	4b24      	ldr	r3, [pc, #144]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c280:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c282:	4b24      	ldr	r3, [pc, #144]	; (800c314 <RCCEx_PLL2_Config+0x160>)
 800c284:	4013      	ands	r3, r2
 800c286:	687a      	ldr	r2, [r7, #4]
 800c288:	69d2      	ldr	r2, [r2, #28]
 800c28a:	00d2      	lsls	r2, r2, #3
 800c28c:	4920      	ldr	r1, [pc, #128]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c28e:	4313      	orrs	r3, r2
 800c290:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c292:	4b1f      	ldr	r3, [pc, #124]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c296:	4a1e      	ldr	r2, [pc, #120]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c298:	f043 0310 	orr.w	r3, r3, #16
 800c29c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d106      	bne.n	800c2b2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c2a4:	4b1a      	ldr	r3, [pc, #104]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c2a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2a8:	4a19      	ldr	r2, [pc, #100]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c2aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c2ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c2b0:	e00f      	b.n	800c2d2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	d106      	bne.n	800c2c6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c2b8:	4b15      	ldr	r3, [pc, #84]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2bc:	4a14      	ldr	r2, [pc, #80]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c2be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c2c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c2c4:	e005      	b.n	800c2d2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c2c6:	4b12      	ldr	r3, [pc, #72]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c2c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ca:	4a11      	ldr	r2, [pc, #68]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c2cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c2d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c2d2:	4b0f      	ldr	r3, [pc, #60]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	4a0e      	ldr	r2, [pc, #56]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c2d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c2dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c2de:	f7f8 f981 	bl	80045e4 <HAL_GetTick>
 800c2e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c2e4:	e008      	b.n	800c2f8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c2e6:	f7f8 f97d 	bl	80045e4 <HAL_GetTick>
 800c2ea:	4602      	mov	r2, r0
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	1ad3      	subs	r3, r2, r3
 800c2f0:	2b02      	cmp	r3, #2
 800c2f2:	d901      	bls.n	800c2f8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c2f4:	2303      	movs	r3, #3
 800c2f6:	e006      	b.n	800c306 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c2f8:	4b05      	ldr	r3, [pc, #20]	; (800c310 <RCCEx_PLL2_Config+0x15c>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c300:	2b00      	cmp	r3, #0
 800c302:	d0f0      	beq.n	800c2e6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c304:	7bfb      	ldrb	r3, [r7, #15]
}
 800c306:	4618      	mov	r0, r3
 800c308:	3710      	adds	r7, #16
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}
 800c30e:	bf00      	nop
 800c310:	58024400 	.word	0x58024400
 800c314:	ffff0007 	.word	0xffff0007

0800c318 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b084      	sub	sp, #16
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c322:	2300      	movs	r3, #0
 800c324:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c326:	4b53      	ldr	r3, [pc, #332]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c32a:	f003 0303 	and.w	r3, r3, #3
 800c32e:	2b03      	cmp	r3, #3
 800c330:	d101      	bne.n	800c336 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c332:	2301      	movs	r3, #1
 800c334:	e099      	b.n	800c46a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c336:	4b4f      	ldr	r3, [pc, #316]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	4a4e      	ldr	r2, [pc, #312]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c33c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c340:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c342:	f7f8 f94f 	bl	80045e4 <HAL_GetTick>
 800c346:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c348:	e008      	b.n	800c35c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c34a:	f7f8 f94b 	bl	80045e4 <HAL_GetTick>
 800c34e:	4602      	mov	r2, r0
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	1ad3      	subs	r3, r2, r3
 800c354:	2b02      	cmp	r3, #2
 800c356:	d901      	bls.n	800c35c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c358:	2303      	movs	r3, #3
 800c35a:	e086      	b.n	800c46a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c35c:	4b45      	ldr	r3, [pc, #276]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c364:	2b00      	cmp	r3, #0
 800c366:	d1f0      	bne.n	800c34a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c368:	4b42      	ldr	r3, [pc, #264]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c36a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c36c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	051b      	lsls	r3, r3, #20
 800c376:	493f      	ldr	r1, [pc, #252]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c378:	4313      	orrs	r3, r2
 800c37a:	628b      	str	r3, [r1, #40]	; 0x28
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	685b      	ldr	r3, [r3, #4]
 800c380:	3b01      	subs	r3, #1
 800c382:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	689b      	ldr	r3, [r3, #8]
 800c38a:	3b01      	subs	r3, #1
 800c38c:	025b      	lsls	r3, r3, #9
 800c38e:	b29b      	uxth	r3, r3
 800c390:	431a      	orrs	r2, r3
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	68db      	ldr	r3, [r3, #12]
 800c396:	3b01      	subs	r3, #1
 800c398:	041b      	lsls	r3, r3, #16
 800c39a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c39e:	431a      	orrs	r2, r3
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	691b      	ldr	r3, [r3, #16]
 800c3a4:	3b01      	subs	r3, #1
 800c3a6:	061b      	lsls	r3, r3, #24
 800c3a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c3ac:	4931      	ldr	r1, [pc, #196]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c3b2:	4b30      	ldr	r3, [pc, #192]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	695b      	ldr	r3, [r3, #20]
 800c3be:	492d      	ldr	r1, [pc, #180]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c3c0:	4313      	orrs	r3, r2
 800c3c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c3c4:	4b2b      	ldr	r3, [pc, #172]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3c8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	699b      	ldr	r3, [r3, #24]
 800c3d0:	4928      	ldr	r1, [pc, #160]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c3d2:	4313      	orrs	r3, r2
 800c3d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c3d6:	4b27      	ldr	r3, [pc, #156]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c3d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3da:	4a26      	ldr	r2, [pc, #152]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c3dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c3e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c3e2:	4b24      	ldr	r3, [pc, #144]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c3e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c3e6:	4b24      	ldr	r3, [pc, #144]	; (800c478 <RCCEx_PLL3_Config+0x160>)
 800c3e8:	4013      	ands	r3, r2
 800c3ea:	687a      	ldr	r2, [r7, #4]
 800c3ec:	69d2      	ldr	r2, [r2, #28]
 800c3ee:	00d2      	lsls	r2, r2, #3
 800c3f0:	4920      	ldr	r1, [pc, #128]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c3f2:	4313      	orrs	r3, r2
 800c3f4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c3f6:	4b1f      	ldr	r3, [pc, #124]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c3f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3fa:	4a1e      	ldr	r2, [pc, #120]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c3fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c400:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d106      	bne.n	800c416 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c408:	4b1a      	ldr	r3, [pc, #104]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c40c:	4a19      	ldr	r2, [pc, #100]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c40e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c412:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c414:	e00f      	b.n	800c436 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	2b01      	cmp	r3, #1
 800c41a:	d106      	bne.n	800c42a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c41c:	4b15      	ldr	r3, [pc, #84]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c41e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c420:	4a14      	ldr	r2, [pc, #80]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c422:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c426:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c428:	e005      	b.n	800c436 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c42a:	4b12      	ldr	r3, [pc, #72]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c42c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c42e:	4a11      	ldr	r2, [pc, #68]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c430:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c434:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c436:	4b0f      	ldr	r3, [pc, #60]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4a0e      	ldr	r2, [pc, #56]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c43c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c440:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c442:	f7f8 f8cf 	bl	80045e4 <HAL_GetTick>
 800c446:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c448:	e008      	b.n	800c45c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c44a:	f7f8 f8cb 	bl	80045e4 <HAL_GetTick>
 800c44e:	4602      	mov	r2, r0
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	1ad3      	subs	r3, r2, r3
 800c454:	2b02      	cmp	r3, #2
 800c456:	d901      	bls.n	800c45c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c458:	2303      	movs	r3, #3
 800c45a:	e006      	b.n	800c46a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c45c:	4b05      	ldr	r3, [pc, #20]	; (800c474 <RCCEx_PLL3_Config+0x15c>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c464:	2b00      	cmp	r3, #0
 800c466:	d0f0      	beq.n	800c44a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c468:	7bfb      	ldrb	r3, [r7, #15]
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3710      	adds	r7, #16
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop
 800c474:	58024400 	.word	0x58024400
 800c478:	ffff0007 	.word	0xffff0007

0800c47c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b084      	sub	sp, #16
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c484:	2301      	movs	r3, #1
 800c486:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d067      	beq.n	800c55e <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c494:	b2db      	uxtb	r3, r3
 800c496:	2b00      	cmp	r3, #0
 800c498:	d106      	bne.n	800c4a8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	2200      	movs	r2, #0
 800c49e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f7f7 fce2 	bl	8003e6c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2202      	movs	r2, #2
 800c4ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	22ca      	movs	r2, #202	; 0xca
 800c4b6:	625a      	str	r2, [r3, #36]	; 0x24
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	2253      	movs	r2, #83	; 0x53
 800c4be:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	f000 fa49 	bl	800c958 <RTC_EnterInitMode>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800c4ca:	7bfb      	ldrb	r3, [r7, #15]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d13b      	bne.n	800c548 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	6899      	ldr	r1, [r3, #8]
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681a      	ldr	r2, [r3, #0]
 800c4da:	4b23      	ldr	r3, [pc, #140]	; (800c568 <HAL_RTC_Init+0xec>)
 800c4dc:	400b      	ands	r3, r1
 800c4de:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	6899      	ldr	r1, [r3, #8]
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	685a      	ldr	r2, [r3, #4]
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	691b      	ldr	r3, [r3, #16]
 800c4ee:	431a      	orrs	r2, r3
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	699b      	ldr	r3, [r3, #24]
 800c4f4:	431a      	orrs	r2, r3
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	430a      	orrs	r2, r1
 800c4fc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	689b      	ldr	r3, [r3, #8]
 800c502:	0419      	lsls	r1, r3, #16
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	68da      	ldr	r2, [r3, #12]
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	430a      	orrs	r2, r1
 800c50e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f000 fa51 	bl	800c9b8 <RTC_ExitInitMode>
 800c516:	4603      	mov	r3, r0
 800c518:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800c51a:	7bfb      	ldrb	r3, [r7, #15]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d113      	bne.n	800c548 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f022 0203 	bic.w	r2, r2, #3
 800c52e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	69da      	ldr	r2, [r3, #28]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	695b      	ldr	r3, [r3, #20]
 800c53e:	431a      	orrs	r2, r3
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	430a      	orrs	r2, r1
 800c546:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	22ff      	movs	r2, #255	; 0xff
 800c54e:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800c550:	7bfb      	ldrb	r3, [r7, #15]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d103      	bne.n	800c55e <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2201      	movs	r2, #1
 800c55a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800c55e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c560:	4618      	mov	r0, r3
 800c562:	3710      	adds	r7, #16
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}
 800c568:	ff8fffbf 	.word	0xff8fffbf

0800c56c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c56c:	b590      	push	{r4, r7, lr}
 800c56e:	b087      	sub	sp, #28
 800c570:	af00      	add	r7, sp, #0
 800c572:	60f8      	str	r0, [r7, #12]
 800c574:	60b9      	str	r1, [r7, #8]
 800c576:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c57e:	2b01      	cmp	r3, #1
 800c580:	d101      	bne.n	800c586 <HAL_RTC_SetTime+0x1a>
 800c582:	2302      	movs	r3, #2
 800c584:	e089      	b.n	800c69a <HAL_RTC_SetTime+0x12e>
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	2201      	movs	r2, #1
 800c58a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	2202      	movs	r2, #2
 800c592:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	22ca      	movs	r2, #202	; 0xca
 800c59c:	625a      	str	r2, [r3, #36]	; 0x24
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	2253      	movs	r2, #83	; 0x53
 800c5a4:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c5a6:	68f8      	ldr	r0, [r7, #12]
 800c5a8:	f000 f9d6 	bl	800c958 <RTC_EnterInitMode>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c5b0:	7cfb      	ldrb	r3, [r7, #19]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d161      	bne.n	800c67a <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d126      	bne.n	800c60a <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	689b      	ldr	r3, [r3, #8]
 800c5c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d102      	bne.n	800c5d0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f000 fa2d 	bl	800ca34 <RTC_ByteToBcd2>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	785b      	ldrb	r3, [r3, #1]
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f000 fa26 	bl	800ca34 <RTC_ByteToBcd2>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c5ec:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c5ee:	68bb      	ldr	r3, [r7, #8]
 800c5f0:	789b      	ldrb	r3, [r3, #2]
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f000 fa1e 	bl	800ca34 <RTC_ByteToBcd2>
 800c5f8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c5fa:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	78db      	ldrb	r3, [r3, #3]
 800c602:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c604:	4313      	orrs	r3, r2
 800c606:	617b      	str	r3, [r7, #20]
 800c608:	e018      	b.n	800c63c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	689b      	ldr	r3, [r3, #8]
 800c610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c614:	2b00      	cmp	r3, #0
 800c616:	d102      	bne.n	800c61e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	2200      	movs	r2, #0
 800c61c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	781b      	ldrb	r3, [r3, #0]
 800c622:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	785b      	ldrb	r3, [r3, #1]
 800c628:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c62a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c62c:	68ba      	ldr	r2, [r7, #8]
 800c62e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c630:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	78db      	ldrb	r3, [r3, #3]
 800c636:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c638:	4313      	orrs	r3, r2
 800c63a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681a      	ldr	r2, [r3, #0]
 800c640:	6979      	ldr	r1, [r7, #20]
 800c642:	4b18      	ldr	r3, [pc, #96]	; (800c6a4 <HAL_RTC_SetTime+0x138>)
 800c644:	400b      	ands	r3, r1
 800c646:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	689a      	ldr	r2, [r3, #8]
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c656:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	6899      	ldr	r1, [r3, #8]
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	68da      	ldr	r2, [r3, #12]
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	691b      	ldr	r3, [r3, #16]
 800c666:	431a      	orrs	r2, r3
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	430a      	orrs	r2, r1
 800c66e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c670:	68f8      	ldr	r0, [r7, #12]
 800c672:	f000 f9a1 	bl	800c9b8 <RTC_ExitInitMode>
 800c676:	4603      	mov	r3, r0
 800c678:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	22ff      	movs	r2, #255	; 0xff
 800c680:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c682:	7cfb      	ldrb	r3, [r7, #19]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d103      	bne.n	800c690 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	2201      	movs	r2, #1
 800c68c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	2200      	movs	r2, #0
 800c694:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c698:	7cfb      	ldrb	r3, [r7, #19]
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	371c      	adds	r7, #28
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd90      	pop	{r4, r7, pc}
 800c6a2:	bf00      	nop
 800c6a4:	007f7f7f 	.word	0x007f7f7f

0800c6a8 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b086      	sub	sp, #24
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	60f8      	str	r0, [r7, #12]
 800c6b0:	60b9      	str	r1, [r7, #8]
 800c6b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	691b      	ldr	r3, [r3, #16]
 800c6c4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	681a      	ldr	r2, [r3, #0]
 800c6d2:	4b22      	ldr	r3, [pc, #136]	; (800c75c <HAL_RTC_GetTime+0xb4>)
 800c6d4:	4013      	ands	r3, r2
 800c6d6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	0c1b      	lsrs	r3, r3, #16
 800c6dc:	b2db      	uxtb	r3, r3
 800c6de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c6e2:	b2da      	uxtb	r2, r3
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800c6e8:	697b      	ldr	r3, [r7, #20]
 800c6ea:	0a1b      	lsrs	r3, r3, #8
 800c6ec:	b2db      	uxtb	r3, r3
 800c6ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6f2:	b2da      	uxtb	r2, r3
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	b2db      	uxtb	r3, r3
 800c6fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c700:	b2da      	uxtb	r2, r3
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	0d9b      	lsrs	r3, r3, #22
 800c70a:	b2db      	uxtb	r3, r3
 800c70c:	f003 0301 	and.w	r3, r3, #1
 800c710:	b2da      	uxtb	r2, r3
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d11a      	bne.n	800c752 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	781b      	ldrb	r3, [r3, #0]
 800c720:	4618      	mov	r0, r3
 800c722:	f000 f9a7 	bl	800ca74 <RTC_Bcd2ToByte>
 800c726:	4603      	mov	r3, r0
 800c728:	461a      	mov	r2, r3
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	785b      	ldrb	r3, [r3, #1]
 800c732:	4618      	mov	r0, r3
 800c734:	f000 f99e 	bl	800ca74 <RTC_Bcd2ToByte>
 800c738:	4603      	mov	r3, r0
 800c73a:	461a      	mov	r2, r3
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	789b      	ldrb	r3, [r3, #2]
 800c744:	4618      	mov	r0, r3
 800c746:	f000 f995 	bl	800ca74 <RTC_Bcd2ToByte>
 800c74a:	4603      	mov	r3, r0
 800c74c:	461a      	mov	r2, r3
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c752:	2300      	movs	r3, #0
}
 800c754:	4618      	mov	r0, r3
 800c756:	3718      	adds	r7, #24
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}
 800c75c:	007f7f7f 	.word	0x007f7f7f

0800c760 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c760:	b590      	push	{r4, r7, lr}
 800c762:	b087      	sub	sp, #28
 800c764:	af00      	add	r7, sp, #0
 800c766:	60f8      	str	r0, [r7, #12]
 800c768:	60b9      	str	r1, [r7, #8]
 800c76a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c772:	2b01      	cmp	r3, #1
 800c774:	d101      	bne.n	800c77a <HAL_RTC_SetDate+0x1a>
 800c776:	2302      	movs	r3, #2
 800c778:	e073      	b.n	800c862 <HAL_RTC_SetDate+0x102>
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	2201      	movs	r2, #1
 800c77e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	2202      	movs	r2, #2
 800c786:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d10e      	bne.n	800c7ae <HAL_RTC_SetDate+0x4e>
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	785b      	ldrb	r3, [r3, #1]
 800c794:	f003 0310 	and.w	r3, r3, #16
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d008      	beq.n	800c7ae <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	785b      	ldrb	r3, [r3, #1]
 800c7a0:	f023 0310 	bic.w	r3, r3, #16
 800c7a4:	b2db      	uxtb	r3, r3
 800c7a6:	330a      	adds	r3, #10
 800c7a8:	b2da      	uxtb	r2, r3
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d11c      	bne.n	800c7ee <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	78db      	ldrb	r3, [r3, #3]
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f000 f93b 	bl	800ca34 <RTC_ByteToBcd2>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	785b      	ldrb	r3, [r3, #1]
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f000 f934 	bl	800ca34 <RTC_ByteToBcd2>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c7d0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	789b      	ldrb	r3, [r3, #2]
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f000 f92c 	bl	800ca34 <RTC_ByteToBcd2>
 800c7dc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c7de:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	781b      	ldrb	r3, [r3, #0]
 800c7e6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c7e8:	4313      	orrs	r3, r2
 800c7ea:	617b      	str	r3, [r7, #20]
 800c7ec:	e00e      	b.n	800c80c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	78db      	ldrb	r3, [r3, #3]
 800c7f2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	785b      	ldrb	r3, [r3, #1]
 800c7f8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c7fa:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800c7fc:	68ba      	ldr	r2, [r7, #8]
 800c7fe:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c800:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	781b      	ldrb	r3, [r3, #0]
 800c806:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c808:	4313      	orrs	r3, r2
 800c80a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	22ca      	movs	r2, #202	; 0xca
 800c812:	625a      	str	r2, [r3, #36]	; 0x24
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	2253      	movs	r2, #83	; 0x53
 800c81a:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c81c:	68f8      	ldr	r0, [r7, #12]
 800c81e:	f000 f89b 	bl	800c958 <RTC_EnterInitMode>
 800c822:	4603      	mov	r3, r0
 800c824:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c826:	7cfb      	ldrb	r3, [r7, #19]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d10a      	bne.n	800c842 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	681a      	ldr	r2, [r3, #0]
 800c830:	6979      	ldr	r1, [r7, #20]
 800c832:	4b0e      	ldr	r3, [pc, #56]	; (800c86c <HAL_RTC_SetDate+0x10c>)
 800c834:	400b      	ands	r3, r1
 800c836:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c838:	68f8      	ldr	r0, [r7, #12]
 800c83a:	f000 f8bd 	bl	800c9b8 <RTC_ExitInitMode>
 800c83e:	4603      	mov	r3, r0
 800c840:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	22ff      	movs	r2, #255	; 0xff
 800c848:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c84a:	7cfb      	ldrb	r3, [r7, #19]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d103      	bne.n	800c858 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	2201      	movs	r2, #1
 800c854:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	2200      	movs	r2, #0
 800c85c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c860:	7cfb      	ldrb	r3, [r7, #19]


}
 800c862:	4618      	mov	r0, r3
 800c864:	371c      	adds	r7, #28
 800c866:	46bd      	mov	sp, r7
 800c868:	bd90      	pop	{r4, r7, pc}
 800c86a:	bf00      	nop
 800c86c:	00ffff3f 	.word	0x00ffff3f

0800c870 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b086      	sub	sp, #24
 800c874:	af00      	add	r7, sp, #0
 800c876:	60f8      	str	r0, [r7, #12]
 800c878:	60b9      	str	r1, [r7, #8]
 800c87a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	685a      	ldr	r2, [r3, #4]
 800c882:	4b21      	ldr	r3, [pc, #132]	; (800c908 <HAL_RTC_GetDate+0x98>)
 800c884:	4013      	ands	r3, r2
 800c886:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	0c1b      	lsrs	r3, r3, #16
 800c88c:	b2da      	uxtb	r2, r3
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	0a1b      	lsrs	r3, r3, #8
 800c896:	b2db      	uxtb	r3, r3
 800c898:	f003 031f 	and.w	r3, r3, #31
 800c89c:	b2da      	uxtb	r2, r3
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	b2db      	uxtb	r3, r3
 800c8a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8aa:	b2da      	uxtb	r2, r3
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	0b5b      	lsrs	r3, r3, #13
 800c8b4:	b2db      	uxtb	r3, r3
 800c8b6:	f003 0307 	and.w	r3, r3, #7
 800c8ba:	b2da      	uxtb	r2, r3
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d11a      	bne.n	800c8fc <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	78db      	ldrb	r3, [r3, #3]
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f000 f8d2 	bl	800ca74 <RTC_Bcd2ToByte>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	461a      	mov	r2, r3
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	785b      	ldrb	r3, [r3, #1]
 800c8dc:	4618      	mov	r0, r3
 800c8de:	f000 f8c9 	bl	800ca74 <RTC_Bcd2ToByte>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	461a      	mov	r2, r3
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	789b      	ldrb	r3, [r3, #2]
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	f000 f8c0 	bl	800ca74 <RTC_Bcd2ToByte>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	461a      	mov	r2, r3
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c8fc:	2300      	movs	r3, #0
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3718      	adds	r7, #24
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}
 800c906:	bf00      	nop
 800c908:	00ffff3f 	.word	0x00ffff3f

0800c90c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b084      	sub	sp, #16
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	68da      	ldr	r2, [r3, #12]
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c922:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800c924:	f7f7 fe5e 	bl	80045e4 <HAL_GetTick>
 800c928:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c92a:	e009      	b.n	800c940 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c92c:	f7f7 fe5a 	bl	80045e4 <HAL_GetTick>
 800c930:	4602      	mov	r2, r0
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	1ad3      	subs	r3, r2, r3
 800c936:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c93a:	d901      	bls.n	800c940 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800c93c:	2303      	movs	r3, #3
 800c93e:	e007      	b.n	800c950 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	68db      	ldr	r3, [r3, #12]
 800c946:	f003 0320 	and.w	r3, r3, #32
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d0ee      	beq.n	800c92c <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800c94e:	2300      	movs	r3, #0
}
 800c950:	4618      	mov	r0, r3
 800c952:	3710      	adds	r7, #16
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}

0800c958 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b084      	sub	sp, #16
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c960:	2300      	movs	r3, #0
 800c962:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	68db      	ldr	r3, [r3, #12]
 800c96a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d11d      	bne.n	800c9ae <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	f04f 32ff 	mov.w	r2, #4294967295
 800c97a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c97c:	f7f7 fe32 	bl	80045e4 <HAL_GetTick>
 800c980:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c982:	e00d      	b.n	800c9a0 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c984:	f7f7 fe2e 	bl	80045e4 <HAL_GetTick>
 800c988:	4602      	mov	r2, r0
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	1ad3      	subs	r3, r2, r3
 800c98e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c992:	d905      	bls.n	800c9a0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800c994:	2303      	movs	r3, #3
 800c996:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2203      	movs	r2, #3
 800c99c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	68db      	ldr	r3, [r3, #12]
 800c9a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d0ea      	beq.n	800c984 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800c9ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3710      	adds	r7, #16
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}

0800c9b8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b084      	sub	sp, #16
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800c9c4:	4b1a      	ldr	r3, [pc, #104]	; (800ca30 <RTC_ExitInitMode+0x78>)
 800c9c6:	68db      	ldr	r3, [r3, #12]
 800c9c8:	4a19      	ldr	r2, [pc, #100]	; (800ca30 <RTC_ExitInitMode+0x78>)
 800c9ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c9ce:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c9d0:	4b17      	ldr	r3, [pc, #92]	; (800ca30 <RTC_ExitInitMode+0x78>)
 800c9d2:	689b      	ldr	r3, [r3, #8]
 800c9d4:	f003 0320 	and.w	r3, r3, #32
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d10c      	bne.n	800c9f6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f7ff ff95 	bl	800c90c <HAL_RTC_WaitForSynchro>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d01e      	beq.n	800ca26 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2203      	movs	r2, #3
 800c9ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c9f0:	2303      	movs	r3, #3
 800c9f2:	73fb      	strb	r3, [r7, #15]
 800c9f4:	e017      	b.n	800ca26 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c9f6:	4b0e      	ldr	r3, [pc, #56]	; (800ca30 <RTC_ExitInitMode+0x78>)
 800c9f8:	689b      	ldr	r3, [r3, #8]
 800c9fa:	4a0d      	ldr	r2, [pc, #52]	; (800ca30 <RTC_ExitInitMode+0x78>)
 800c9fc:	f023 0320 	bic.w	r3, r3, #32
 800ca00:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ca02:	6878      	ldr	r0, [r7, #4]
 800ca04:	f7ff ff82 	bl	800c90c <HAL_RTC_WaitForSynchro>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d005      	beq.n	800ca1a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2203      	movs	r2, #3
 800ca12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800ca16:	2303      	movs	r3, #3
 800ca18:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ca1a:	4b05      	ldr	r3, [pc, #20]	; (800ca30 <RTC_ExitInitMode+0x78>)
 800ca1c:	689b      	ldr	r3, [r3, #8]
 800ca1e:	4a04      	ldr	r2, [pc, #16]	; (800ca30 <RTC_ExitInitMode+0x78>)
 800ca20:	f043 0320 	orr.w	r3, r3, #32
 800ca24:	6093      	str	r3, [r2, #8]
  }

  return status;
 800ca26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	3710      	adds	r7, #16
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}
 800ca30:	58004000 	.word	0x58004000

0800ca34 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800ca34:	b480      	push	{r7}
 800ca36:	b085      	sub	sp, #20
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800ca42:	79fb      	ldrb	r3, [r7, #7]
 800ca44:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800ca46:	e005      	b.n	800ca54 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	3301      	adds	r3, #1
 800ca4c:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800ca4e:	7afb      	ldrb	r3, [r7, #11]
 800ca50:	3b0a      	subs	r3, #10
 800ca52:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800ca54:	7afb      	ldrb	r3, [r7, #11]
 800ca56:	2b09      	cmp	r3, #9
 800ca58:	d8f6      	bhi.n	800ca48 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	b2db      	uxtb	r3, r3
 800ca5e:	011b      	lsls	r3, r3, #4
 800ca60:	b2da      	uxtb	r2, r3
 800ca62:	7afb      	ldrb	r3, [r7, #11]
 800ca64:	4313      	orrs	r3, r2
 800ca66:	b2db      	uxtb	r3, r3
}
 800ca68:	4618      	mov	r0, r3
 800ca6a:	3714      	adds	r7, #20
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca72:	4770      	bx	lr

0800ca74 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800ca74:	b480      	push	{r7}
 800ca76:	b085      	sub	sp, #20
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800ca7e:	79fb      	ldrb	r3, [r7, #7]
 800ca80:	091b      	lsrs	r3, r3, #4
 800ca82:	b2db      	uxtb	r3, r3
 800ca84:	461a      	mov	r2, r3
 800ca86:	0092      	lsls	r2, r2, #2
 800ca88:	4413      	add	r3, r2
 800ca8a:	005b      	lsls	r3, r3, #1
 800ca8c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800ca8e:	79fb      	ldrb	r3, [r7, #7]
 800ca90:	f003 030f 	and.w	r3, r3, #15
 800ca94:	b2da      	uxtb	r2, r3
 800ca96:	7bfb      	ldrb	r3, [r7, #15]
 800ca98:	4413      	add	r3, r2
 800ca9a:	b2db      	uxtb	r3, r3
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3714      	adds	r7, #20
 800caa0:	46bd      	mov	sp, r7
 800caa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa6:	4770      	bx	lr

0800caa8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b08a      	sub	sp, #40	; 0x28
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d101      	bne.n	800caba <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cab6:	2301      	movs	r3, #1
 800cab8:	e07c      	b.n	800cbb4 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cac0:	b2db      	uxtb	r3, r3
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d10c      	bne.n	800cae0 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2200      	movs	r2, #0
 800caca:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	699b      	ldr	r3, [r3, #24]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d102      	bne.n	800cada <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2202      	movs	r2, #2
 800cad8:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f7f7 f9e0 	bl	8003ea0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2203      	movs	r2, #3
 800cae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f000 f867 	bl	800cbbc <HAL_SD_InitCard>
 800caee:	4603      	mov	r3, r0
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d001      	beq.n	800caf8 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 800caf4:	2301      	movs	r3, #1
 800caf6:	e05d      	b.n	800cbb4 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800caf8:	f107 0308 	add.w	r3, r7, #8
 800cafc:	4619      	mov	r1, r3
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f001 f8ce 	bl	800dca0 <HAL_SD_GetCardStatus>
 800cb04:	4603      	mov	r3, r0
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d001      	beq.n	800cb0e <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	e052      	b.n	800cbb4 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800cb0e:	7e3b      	ldrb	r3, [r7, #24]
 800cb10:	b2db      	uxtb	r3, r3
 800cb12:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800cb14:	7e7b      	ldrb	r3, [r7, #25]
 800cb16:	b2db      	uxtb	r3, r3
 800cb18:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb1e:	2b01      	cmp	r3, #1
 800cb20:	d10a      	bne.n	800cb38 <HAL_SD_Init+0x90>
 800cb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d102      	bne.n	800cb2e <HAL_SD_Init+0x86>
 800cb28:	6a3b      	ldr	r3, [r7, #32]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d004      	beq.n	800cb38 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cb34:	65da      	str	r2, [r3, #92]	; 0x5c
 800cb36:	e00b      	b.n	800cb50 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb3c:	2b01      	cmp	r3, #1
 800cb3e:	d104      	bne.n	800cb4a <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cb46:	65da      	str	r2, [r3, #92]	; 0x5c
 800cb48:	e002      	b.n	800cb50 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	68db      	ldr	r3, [r3, #12]
 800cb54:	4619      	mov	r1, r3
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f001 f984 	bl	800de64 <HAL_SD_ConfigWideBusOperation>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d001      	beq.n	800cb66 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800cb62:	2301      	movs	r3, #1
 800cb64:	e026      	b.n	800cbb4 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800cb66:	f7f7 fd3d 	bl	80045e4 <HAL_GetTick>
 800cb6a:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cb6c:	e011      	b.n	800cb92 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800cb6e:	f7f7 fd39 	bl	80045e4 <HAL_GetTick>
 800cb72:	4602      	mov	r2, r0
 800cb74:	69fb      	ldr	r3, [r7, #28]
 800cb76:	1ad3      	subs	r3, r2, r3
 800cb78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb7c:	d109      	bne.n	800cb92 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cb84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2201      	movs	r2, #1
 800cb8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800cb8e:	2303      	movs	r3, #3
 800cb90:	e010      	b.n	800cbb4 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f001 fa10 	bl	800dfb8 <HAL_SD_GetCardState>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	2b04      	cmp	r3, #4
 800cb9c:	d1e7      	bne.n	800cb6e <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	2200      	movs	r2, #0
 800cba2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	2200      	movs	r2, #0
 800cba8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2201      	movs	r2, #1
 800cbae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800cbb2:	2300      	movs	r3, #0
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3728      	adds	r7, #40	; 0x28
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cbbc:	b5b0      	push	{r4, r5, r7, lr}
 800cbbe:	b08e      	sub	sp, #56	; 0x38
 800cbc0:	af04      	add	r7, sp, #16
 800cbc2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800cbd4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800cbd8:	f7fe fc7a 	bl	800b4d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800cbdc:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800cbde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe0:	0a1b      	lsrs	r3, r3, #8
 800cbe2:	4a40      	ldr	r2, [pc, #256]	; (800cce4 <HAL_SD_InitCard+0x128>)
 800cbe4:	fba2 2303 	umull	r2, r3, r2, r3
 800cbe8:	091b      	lsrs	r3, r3, #4
 800cbea:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	699b      	ldr	r3, [r3, #24]
 800cbf0:	2b02      	cmp	r3, #2
 800cbf2:	d107      	bne.n	800cc04 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	681a      	ldr	r2, [r3, #0]
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	f042 0210 	orr.w	r2, r2, #16
 800cc02:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681d      	ldr	r5, [r3, #0]
 800cc08:	466c      	mov	r4, sp
 800cc0a:	f107 0314 	add.w	r3, r7, #20
 800cc0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cc12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cc16:	f107 0308 	add.w	r3, r7, #8
 800cc1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cc1c:	4628      	mov	r0, r5
 800cc1e:	f004 f9f5 	bl	801100c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	4618      	mov	r0, r3
 800cc28:	f004 fa38 	bl	801109c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800cc2c:	69bb      	ldr	r3, [r7, #24]
 800cc2e:	005b      	lsls	r3, r3, #1
 800cc30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc32:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc36:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 800cc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d008      	beq.n	800cc50 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800cc3e:	4a2a      	ldr	r2, [pc, #168]	; (800cce8 <HAL_SD_InitCard+0x12c>)
 800cc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc42:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc46:	3301      	adds	r3, #1
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f7f7 fcd7 	bl	80045fc <HAL_Delay>
 800cc4e:	e002      	b.n	800cc56 <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 800cc50:	2002      	movs	r0, #2
 800cc52:	f7f7 fcd3 	bl	80045fc <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	f001 fa8c 	bl	800e174 <SD_PowerON>
 800cc5c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc5e:	6a3b      	ldr	r3, [r7, #32]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d00b      	beq.n	800cc7c <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2201      	movs	r2, #1
 800cc68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc70:	6a3b      	ldr	r3, [r7, #32]
 800cc72:	431a      	orrs	r2, r3
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cc78:	2301      	movs	r3, #1
 800cc7a:	e02e      	b.n	800ccda <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f001 f9bb 	bl	800dff8 <SD_InitCard>
 800cc82:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc84:	6a3b      	ldr	r3, [r7, #32]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d00b      	beq.n	800cca2 <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	2201      	movs	r2, #1
 800cc8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc96:	6a3b      	ldr	r3, [r7, #32]
 800cc98:	431a      	orrs	r2, r3
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cc9e:	2301      	movs	r3, #1
 800cca0:	e01b      	b.n	800ccda <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ccaa:	4618      	mov	r0, r3
 800ccac:	f004 fa8c 	bl	80111c8 <SDMMC_CmdBlockLength>
 800ccb0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ccb2:	6a3b      	ldr	r3, [r7, #32]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d00f      	beq.n	800ccd8 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	4a0b      	ldr	r2, [pc, #44]	; (800ccec <HAL_SD_InitCard+0x130>)
 800ccbe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ccc4:	6a3b      	ldr	r3, [r7, #32]
 800ccc6:	431a      	orrs	r2, r3
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2201      	movs	r2, #1
 800ccd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	e000      	b.n	800ccda <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 800ccd8:	2300      	movs	r3, #0
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3728      	adds	r7, #40	; 0x28
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bdb0      	pop	{r4, r5, r7, pc}
 800cce2:	bf00      	nop
 800cce4:	014f8b59 	.word	0x014f8b59
 800cce8:	00012110 	.word	0x00012110
 800ccec:	1fe00fff 	.word	0x1fe00fff

0800ccf0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b092      	sub	sp, #72	; 0x48
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	60f8      	str	r0, [r7, #12]
 800ccf8:	60b9      	str	r1, [r7, #8]
 800ccfa:	607a      	str	r2, [r7, #4]
 800ccfc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ccfe:	f7f7 fc71 	bl	80045e4 <HAL_GetTick>
 800cd02:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d107      	bne.n	800cd22 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd16:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cd1e:	2301      	movs	r3, #1
 800cd20:	e167      	b.n	800cff2 <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cd28:	b2db      	uxtb	r3, r3
 800cd2a:	2b01      	cmp	r3, #1
 800cd2c:	f040 815a 	bne.w	800cfe4 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	2200      	movs	r2, #0
 800cd34:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cd36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	441a      	add	r2, r3
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd40:	429a      	cmp	r2, r3
 800cd42:	d907      	bls.n	800cd54 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd48:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800cd50:	2301      	movs	r3, #1
 800cd52:	e14e      	b.n	800cff2 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	2203      	movs	r2, #3
 800cd58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	2200      	movs	r2, #0
 800cd62:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd68:	2b01      	cmp	r3, #1
 800cd6a:	d002      	beq.n	800cd72 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800cd6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd6e:	025b      	lsls	r3, r3, #9
 800cd70:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cd72:	f04f 33ff 	mov.w	r3, #4294967295
 800cd76:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	025b      	lsls	r3, r3, #9
 800cd7c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cd7e:	2390      	movs	r3, #144	; 0x90
 800cd80:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cd82:	2302      	movs	r3, #2
 800cd84:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cd86:	2300      	movs	r3, #0
 800cd88:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	f107 0214 	add.w	r2, r7, #20
 800cd96:	4611      	mov	r1, r2
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f004 f9e9 	bl	8011170 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	68da      	ldr	r2, [r3, #12]
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cdac:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	2b01      	cmp	r3, #1
 800cdb2:	d90a      	bls.n	800cdca <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	2202      	movs	r2, #2
 800cdb8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f004 fa47 	bl	8011254 <SDMMC_CmdReadMultiBlock>
 800cdc6:	6478      	str	r0, [r7, #68]	; 0x44
 800cdc8:	e009      	b.n	800cdde <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	2201      	movs	r2, #1
 800cdce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	f004 fa19 	bl	801120e <SDMMC_CmdReadSingleBlock>
 800cddc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cdde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d012      	beq.n	800ce0a <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	4a84      	ldr	r2, [pc, #528]	; (800cffc <HAL_SD_ReadBlocks+0x30c>)
 800cdea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cdf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cdf2:	431a      	orrs	r2, r3
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	2201      	movs	r2, #1
 800cdfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	2200      	movs	r2, #0
 800ce04:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ce06:	2301      	movs	r3, #1
 800ce08:	e0f3      	b.n	800cff2 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800ce0a:	69bb      	ldr	r3, [r7, #24]
 800ce0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ce0e:	e058      	b.n	800cec2 <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d033      	beq.n	800ce86 <HAL_SD_ReadBlocks+0x196>
 800ce1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce20:	2b1f      	cmp	r3, #31
 800ce22:	d930      	bls.n	800ce86 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800ce24:	2300      	movs	r3, #0
 800ce26:	643b      	str	r3, [r7, #64]	; 0x40
 800ce28:	e027      	b.n	800ce7a <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f004 f916 	bl	8011060 <SDMMC_ReadFIFO>
 800ce34:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800ce36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce38:	b2da      	uxtb	r2, r3
 800ce3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce3c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800ce3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce40:	3301      	adds	r3, #1
 800ce42:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800ce44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce46:	0a1b      	lsrs	r3, r3, #8
 800ce48:	b2da      	uxtb	r2, r3
 800ce4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce4c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800ce4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce50:	3301      	adds	r3, #1
 800ce52:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800ce54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce56:	0c1b      	lsrs	r3, r3, #16
 800ce58:	b2da      	uxtb	r2, r3
 800ce5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce5c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800ce5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce60:	3301      	adds	r3, #1
 800ce62:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800ce64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce66:	0e1b      	lsrs	r3, r3, #24
 800ce68:	b2da      	uxtb	r2, r3
 800ce6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce6c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800ce6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce70:	3301      	adds	r3, #1
 800ce72:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 800ce74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce76:	3301      	adds	r3, #1
 800ce78:	643b      	str	r3, [r7, #64]	; 0x40
 800ce7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce7c:	2b07      	cmp	r3, #7
 800ce7e:	d9d4      	bls.n	800ce2a <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800ce80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce82:	3b20      	subs	r3, #32
 800ce84:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800ce86:	f7f7 fbad 	bl	80045e4 <HAL_GetTick>
 800ce8a:	4602      	mov	r2, r0
 800ce8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce8e:	1ad3      	subs	r3, r2, r3
 800ce90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ce92:	429a      	cmp	r2, r3
 800ce94:	d902      	bls.n	800ce9c <HAL_SD_ReadBlocks+0x1ac>
 800ce96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d112      	bne.n	800cec2 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	4a56      	ldr	r2, [pc, #344]	; (800cffc <HAL_SD_ReadBlocks+0x30c>)
 800cea2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cea8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	2201      	movs	r2, #1
 800ceb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	2200      	movs	r2, #0
 800cebc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800cebe:	2303      	movs	r3, #3
 800cec0:	e097      	b.n	800cff2 <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cec8:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d09f      	beq.n	800ce10 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	68da      	ldr	r2, [r3, #12]
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cede:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d022      	beq.n	800cf34 <HAL_SD_ReadBlocks+0x244>
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	2b01      	cmp	r3, #1
 800cef2:	d91f      	bls.n	800cf34 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cef8:	2b03      	cmp	r3, #3
 800cefa:	d01b      	beq.n	800cf34 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	4618      	mov	r0, r3
 800cf02:	f004 fa11 	bl	8011328 <SDMMC_CmdStopTransfer>
 800cf06:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800cf08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d012      	beq.n	800cf34 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	4a3a      	ldr	r2, [pc, #232]	; (800cffc <HAL_SD_ReadBlocks+0x30c>)
 800cf14:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf1c:	431a      	orrs	r2, r3
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	2201      	movs	r2, #1
 800cf26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800cf30:	2301      	movs	r3, #1
 800cf32:	e05e      	b.n	800cff2 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf3a:	f003 0308 	and.w	r3, r3, #8
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d012      	beq.n	800cf68 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	4a2d      	ldr	r2, [pc, #180]	; (800cffc <HAL_SD_ReadBlocks+0x30c>)
 800cf48:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf4e:	f043 0208 	orr.w	r2, r3, #8
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	2201      	movs	r2, #1
 800cf5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	2200      	movs	r2, #0
 800cf62:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cf64:	2301      	movs	r3, #1
 800cf66:	e044      	b.n	800cff2 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf6e:	f003 0302 	and.w	r3, r3, #2
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d012      	beq.n	800cf9c <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	4a20      	ldr	r2, [pc, #128]	; (800cffc <HAL_SD_ReadBlocks+0x30c>)
 800cf7c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf82:	f043 0202 	orr.w	r2, r3, #2
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	2201      	movs	r2, #1
 800cf8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	2200      	movs	r2, #0
 800cf96:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cf98:	2301      	movs	r3, #1
 800cf9a:	e02a      	b.n	800cff2 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfa2:	f003 0320 	and.w	r3, r3, #32
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d012      	beq.n	800cfd0 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	4a13      	ldr	r2, [pc, #76]	; (800cffc <HAL_SD_ReadBlocks+0x30c>)
 800cfb0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfb6:	f043 0220 	orr.w	r2, r3, #32
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	2201      	movs	r2, #1
 800cfc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cfcc:	2301      	movs	r3, #1
 800cfce:	e010      	b.n	800cff2 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	4a0a      	ldr	r2, [pc, #40]	; (800d000 <HAL_SD_ReadBlocks+0x310>)
 800cfd6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	2201      	movs	r2, #1
 800cfdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	e006      	b.n	800cff2 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfe8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cff0:	2301      	movs	r3, #1
  }
}
 800cff2:	4618      	mov	r0, r3
 800cff4:	3748      	adds	r7, #72	; 0x48
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}
 800cffa:	bf00      	nop
 800cffc:	1fe00fff 	.word	0x1fe00fff
 800d000:	18000f3a 	.word	0x18000f3a

0800d004 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b092      	sub	sp, #72	; 0x48
 800d008:	af00      	add	r7, sp, #0
 800d00a:	60f8      	str	r0, [r7, #12]
 800d00c:	60b9      	str	r1, [r7, #8]
 800d00e:	607a      	str	r2, [r7, #4]
 800d010:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d012:	f7f7 fae7 	bl	80045e4 <HAL_GetTick>
 800d016:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800d01c:	68bb      	ldr	r3, [r7, #8]
 800d01e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d107      	bne.n	800d036 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d02a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d032:	2301      	movs	r3, #1
 800d034:	e16b      	b.n	800d30e <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d03c:	b2db      	uxtb	r3, r3
 800d03e:	2b01      	cmp	r3, #1
 800d040:	f040 815e 	bne.w	800d300 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	2200      	movs	r2, #0
 800d048:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d04a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	441a      	add	r2, r3
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d054:	429a      	cmp	r2, r3
 800d056:	d907      	bls.n	800d068 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d05c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d064:	2301      	movs	r3, #1
 800d066:	e152      	b.n	800d30e <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	2203      	movs	r2, #3
 800d06c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	2200      	movs	r2, #0
 800d076:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d07c:	2b01      	cmp	r3, #1
 800d07e:	d002      	beq.n	800d086 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800d080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d082:	025b      	lsls	r3, r3, #9
 800d084:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d086:	f04f 33ff 	mov.w	r3, #4294967295
 800d08a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	025b      	lsls	r3, r3, #9
 800d090:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d092:	2390      	movs	r3, #144	; 0x90
 800d094:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d096:	2300      	movs	r3, #0
 800d098:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d09a:	2300      	movs	r3, #0
 800d09c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	f107 0218 	add.w	r2, r7, #24
 800d0aa:	4611      	mov	r1, r2
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f004 f85f 	bl	8011170 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	68da      	ldr	r2, [r3, #12]
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d0c0:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	2b01      	cmp	r3, #1
 800d0c6:	d90a      	bls.n	800d0de <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	2220      	movs	r2, #32
 800d0cc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f004 f903 	bl	80112e0 <SDMMC_CmdWriteMultiBlock>
 800d0da:	6478      	str	r0, [r7, #68]	; 0x44
 800d0dc:	e009      	b.n	800d0f2 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	2210      	movs	r2, #16
 800d0e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f004 f8d5 	bl	801129a <SDMMC_CmdWriteSingleBlock>
 800d0f0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d0f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d012      	beq.n	800d11e <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	4a86      	ldr	r2, [pc, #536]	; (800d318 <HAL_SD_WriteBlocks+0x314>)
 800d0fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d106:	431a      	orrs	r2, r3
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	2201      	movs	r2, #1
 800d110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	2200      	movs	r2, #0
 800d118:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d11a:	2301      	movs	r3, #1
 800d11c:	e0f7      	b.n	800d30e <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800d11e:	69fb      	ldr	r3, [r7, #28]
 800d120:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d122:	e05c      	b.n	800d1de <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d12a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d037      	beq.n	800d1a2 <HAL_SD_WriteBlocks+0x19e>
 800d132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d134:	2b1f      	cmp	r3, #31
 800d136:	d934      	bls.n	800d1a2 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800d138:	2300      	movs	r3, #0
 800d13a:	643b      	str	r3, [r7, #64]	; 0x40
 800d13c:	e02b      	b.n	800d196 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800d13e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d140:	781b      	ldrb	r3, [r3, #0]
 800d142:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d146:	3301      	adds	r3, #1
 800d148:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800d14a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d14c:	781b      	ldrb	r3, [r3, #0]
 800d14e:	021a      	lsls	r2, r3, #8
 800d150:	697b      	ldr	r3, [r7, #20]
 800d152:	4313      	orrs	r3, r2
 800d154:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d158:	3301      	adds	r3, #1
 800d15a:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800d15c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d15e:	781b      	ldrb	r3, [r3, #0]
 800d160:	041a      	lsls	r2, r3, #16
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	4313      	orrs	r3, r2
 800d166:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d16a:	3301      	adds	r3, #1
 800d16c:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800d16e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d170:	781b      	ldrb	r3, [r3, #0]
 800d172:	061a      	lsls	r2, r3, #24
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	4313      	orrs	r3, r2
 800d178:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d17a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d17c:	3301      	adds	r3, #1
 800d17e:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	f107 0214 	add.w	r2, r7, #20
 800d188:	4611      	mov	r1, r2
 800d18a:	4618      	mov	r0, r3
 800d18c:	f003 ff75 	bl	801107a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800d190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d192:	3301      	adds	r3, #1
 800d194:	643b      	str	r3, [r7, #64]	; 0x40
 800d196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d198:	2b07      	cmp	r3, #7
 800d19a:	d9d0      	bls.n	800d13e <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800d19c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d19e:	3b20      	subs	r3, #32
 800d1a0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d1a2:	f7f7 fa1f 	bl	80045e4 <HAL_GetTick>
 800d1a6:	4602      	mov	r2, r0
 800d1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1aa:	1ad3      	subs	r3, r2, r3
 800d1ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d1ae:	429a      	cmp	r2, r3
 800d1b0:	d902      	bls.n	800d1b8 <HAL_SD_WriteBlocks+0x1b4>
 800d1b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d112      	bne.n	800d1de <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	4a56      	ldr	r2, [pc, #344]	; (800d318 <HAL_SD_WriteBlocks+0x314>)
 800d1be:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1c6:	431a      	orrs	r2, r3
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	2201      	movs	r2, #1
 800d1d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800d1da:	2303      	movs	r3, #3
 800d1dc:	e097      	b.n	800d30e <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1e4:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d09b      	beq.n	800d124 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	68da      	ldr	r2, [r3, #12]
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d1fa:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d206:	2b00      	cmp	r3, #0
 800d208:	d022      	beq.n	800d250 <HAL_SD_WriteBlocks+0x24c>
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	2b01      	cmp	r3, #1
 800d20e:	d91f      	bls.n	800d250 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d214:	2b03      	cmp	r3, #3
 800d216:	d01b      	beq.n	800d250 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	4618      	mov	r0, r3
 800d21e:	f004 f883 	bl	8011328 <SDMMC_CmdStopTransfer>
 800d222:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800d224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d226:	2b00      	cmp	r3, #0
 800d228:	d012      	beq.n	800d250 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	4a3a      	ldr	r2, [pc, #232]	; (800d318 <HAL_SD_WriteBlocks+0x314>)
 800d230:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d238:	431a      	orrs	r2, r3
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	2201      	movs	r2, #1
 800d242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	2200      	movs	r2, #0
 800d24a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800d24c:	2301      	movs	r3, #1
 800d24e:	e05e      	b.n	800d30e <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d256:	f003 0308 	and.w	r3, r3, #8
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d012      	beq.n	800d284 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	4a2d      	ldr	r2, [pc, #180]	; (800d318 <HAL_SD_WriteBlocks+0x314>)
 800d264:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d26a:	f043 0208 	orr.w	r2, r3, #8
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	2201      	movs	r2, #1
 800d276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	2200      	movs	r2, #0
 800d27e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d280:	2301      	movs	r3, #1
 800d282:	e044      	b.n	800d30e <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d28a:	f003 0302 	and.w	r3, r3, #2
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d012      	beq.n	800d2b8 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	4a20      	ldr	r2, [pc, #128]	; (800d318 <HAL_SD_WriteBlocks+0x314>)
 800d298:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d29e:	f043 0202 	orr.w	r2, r3, #2
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	2201      	movs	r2, #1
 800d2aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	e02a      	b.n	800d30e <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2be:	f003 0310 	and.w	r3, r3, #16
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d012      	beq.n	800d2ec <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	4a13      	ldr	r2, [pc, #76]	; (800d318 <HAL_SD_WriteBlocks+0x314>)
 800d2cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2d2:	f043 0210 	orr.w	r2, r3, #16
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	2201      	movs	r2, #1
 800d2de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d2e8:	2301      	movs	r3, #1
 800d2ea:	e010      	b.n	800d30e <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	4a0a      	ldr	r2, [pc, #40]	; (800d31c <HAL_SD_WriteBlocks+0x318>)
 800d2f2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	2201      	movs	r2, #1
 800d2f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	e006      	b.n	800d30e <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d304:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d30c:	2301      	movs	r3, #1
  }
}
 800d30e:	4618      	mov	r0, r3
 800d310:	3748      	adds	r7, #72	; 0x48
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}
 800d316:	bf00      	nop
 800d318:	1fe00fff 	.word	0x1fe00fff
 800d31c:	18000f3a 	.word	0x18000f3a

0800d320 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b08c      	sub	sp, #48	; 0x30
 800d324:	af00      	add	r7, sp, #0
 800d326:	60f8      	str	r0, [r7, #12]
 800d328:	60b9      	str	r1, [r7, #8]
 800d32a:	607a      	str	r2, [r7, #4]
 800d32c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d107      	bne.n	800d348 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d33c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d344:	2301      	movs	r3, #1
 800d346:	e08d      	b.n	800d464 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d34e:	b2db      	uxtb	r3, r3
 800d350:	2b01      	cmp	r3, #1
 800d352:	f040 8086 	bne.w	800d462 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	2200      	movs	r2, #0
 800d35a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d35c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	441a      	add	r2, r3
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d366:	429a      	cmp	r2, r3
 800d368:	d907      	bls.n	800d37a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d36e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d376:	2301      	movs	r3, #1
 800d378:	e074      	b.n	800d464 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	2203      	movs	r2, #3
 800d37e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	2200      	movs	r2, #0
 800d388:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	68ba      	ldr	r2, [r7, #8]
 800d38e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	025a      	lsls	r2, r3, #9
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d39c:	2b01      	cmp	r3, #1
 800d39e:	d002      	beq.n	800d3a6 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3a2:	025b      	lsls	r3, r3, #9
 800d3a4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d3a6:	f04f 33ff 	mov.w	r3, #4294967295
 800d3aa:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	025b      	lsls	r3, r3, #9
 800d3b0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d3b2:	2390      	movs	r3, #144	; 0x90
 800d3b4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d3b6:	2302      	movs	r3, #2
 800d3b8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d3be:	2300      	movs	r3, #0
 800d3c0:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	f107 0210 	add.w	r2, r7, #16
 800d3ca:	4611      	mov	r1, r2
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f003 fecf 	bl	8011170 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	68da      	ldr	r2, [r3, #12]
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d3e0:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	68ba      	ldr	r2, [r7, #8]
 800d3e8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	2201      	movs	r2, #1
 800d3f0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	2b01      	cmp	r3, #1
 800d3f6:	d90a      	bls.n	800d40e <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	2282      	movs	r2, #130	; 0x82
 800d3fc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d404:	4618      	mov	r0, r3
 800d406:	f003 ff25 	bl	8011254 <SDMMC_CmdReadMultiBlock>
 800d40a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d40c:	e009      	b.n	800d422 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	2281      	movs	r2, #129	; 0x81
 800d412:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d41a:	4618      	mov	r0, r3
 800d41c:	f003 fef7 	bl	801120e <SDMMC_CmdReadSingleBlock>
 800d420:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d424:	2b00      	cmp	r3, #0
 800d426:	d012      	beq.n	800d44e <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	4a0f      	ldr	r2, [pc, #60]	; (800d46c <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d42e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d436:	431a      	orrs	r2, r3
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	2201      	movs	r2, #1
 800d440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	2200      	movs	r2, #0
 800d448:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d44a:	2301      	movs	r3, #1
 800d44c:	e00a      	b.n	800d464 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d45c:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800d45e:	2300      	movs	r3, #0
 800d460:	e000      	b.n	800d464 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d462:	2302      	movs	r3, #2
  }
}
 800d464:	4618      	mov	r0, r3
 800d466:	3730      	adds	r7, #48	; 0x30
 800d468:	46bd      	mov	sp, r7
 800d46a:	bd80      	pop	{r7, pc}
 800d46c:	1fe00fff 	.word	0x1fe00fff

0800d470 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b08c      	sub	sp, #48	; 0x30
 800d474:	af00      	add	r7, sp, #0
 800d476:	60f8      	str	r0, [r7, #12]
 800d478:	60b9      	str	r1, [r7, #8]
 800d47a:	607a      	str	r2, [r7, #4]
 800d47c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d482:	68bb      	ldr	r3, [r7, #8]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d107      	bne.n	800d498 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d48c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d494:	2301      	movs	r3, #1
 800d496:	e08d      	b.n	800d5b4 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d49e:	b2db      	uxtb	r3, r3
 800d4a0:	2b01      	cmp	r3, #1
 800d4a2:	f040 8086 	bne.w	800d5b2 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d4ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	441a      	add	r2, r3
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4b6:	429a      	cmp	r2, r3
 800d4b8:	d907      	bls.n	800d4ca <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4be:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	e074      	b.n	800d5b4 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	2203      	movs	r2, #3
 800d4ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	68ba      	ldr	r2, [r7, #8]
 800d4de:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	025a      	lsls	r2, r3, #9
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	625a      	str	r2, [r3, #36]	; 0x24

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4ec:	2b01      	cmp	r3, #1
 800d4ee:	d002      	beq.n	800d4f6 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f2:	025b      	lsls	r3, r3, #9
 800d4f4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d4f6:	f04f 33ff 	mov.w	r3, #4294967295
 800d4fa:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	025b      	lsls	r3, r3, #9
 800d500:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d502:	2390      	movs	r3, #144	; 0x90
 800d504:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d506:	2300      	movs	r3, #0
 800d508:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d50a:	2300      	movs	r3, #0
 800d50c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d50e:	2300      	movs	r3, #0
 800d510:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	f107 0210 	add.w	r2, r7, #16
 800d51a:	4611      	mov	r1, r2
 800d51c:	4618      	mov	r0, r3
 800d51e:	f003 fe27 	bl	8011170 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	68da      	ldr	r2, [r3, #12]
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d530:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	68ba      	ldr	r2, [r7, #8]
 800d538:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	2201      	movs	r2, #1
 800d540:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d542:	683b      	ldr	r3, [r7, #0]
 800d544:	2b01      	cmp	r3, #1
 800d546:	d90a      	bls.n	800d55e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	22a0      	movs	r2, #160	; 0xa0
 800d54c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d554:	4618      	mov	r0, r3
 800d556:	f003 fec3 	bl	80112e0 <SDMMC_CmdWriteMultiBlock>
 800d55a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d55c:	e009      	b.n	800d572 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	2290      	movs	r2, #144	; 0x90
 800d562:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d56a:	4618      	mov	r0, r3
 800d56c:	f003 fe95 	bl	801129a <SDMMC_CmdWriteSingleBlock>
 800d570:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d574:	2b00      	cmp	r3, #0
 800d576:	d012      	beq.n	800d59e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	4a0f      	ldr	r2, [pc, #60]	; (800d5bc <HAL_SD_WriteBlocks_DMA+0x14c>)
 800d57e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d586:	431a      	orrs	r2, r3
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	2201      	movs	r2, #1
 800d590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	2200      	movs	r2, #0
 800d598:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d59a:	2301      	movs	r3, #1
 800d59c:	e00a      	b.n	800d5b4 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800d5ac:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	e000      	b.n	800d5b4 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d5b2:	2302      	movs	r3, #2
  }
}
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	3730      	adds	r7, #48	; 0x30
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}
 800d5bc:	1fe00fff 	.word	0x1fe00fff

0800d5c0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b084      	sub	sp, #16
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5cc:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d008      	beq.n	800d5ee <HAL_SD_IRQHandler+0x2e>
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	f003 0308 	and.w	r3, r3, #8
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d003      	beq.n	800d5ee <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d5e6:	6878      	ldr	r0, [r7, #4]
 800d5e8:	f001 f92a 	bl	800e840 <SD_Read_IT>
 800d5ec:	e19a      	b.n	800d924 <HAL_SD_IRQHandler+0x364>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	f000 80ac 	beq.w	800d756 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d606:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681a      	ldr	r2, [r3, #0]
 800d612:	4b9d      	ldr	r3, [pc, #628]	; (800d888 <HAL_SD_IRQHandler+0x2c8>)
 800d614:	400b      	ands	r3, r1
 800d616:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d626:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	68da      	ldr	r2, [r3, #12]
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d636:	60da      	str	r2, [r3, #12]

    if((context & SD_CONTEXT_IT) != 0U)
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	f003 0308 	and.w	r3, r3, #8
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d038      	beq.n	800d6b4 <HAL_SD_IRQHandler+0xf4>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	f003 0302 	and.w	r3, r3, #2
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d104      	bne.n	800d656 <HAL_SD_IRQHandler+0x96>
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	f003 0320 	and.w	r3, r3, #32
 800d652:	2b00      	cmp	r3, #0
 800d654:	d011      	beq.n	800d67a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	4618      	mov	r0, r3
 800d65c:	f003 fe64 	bl	8011328 <SDMMC_CmdStopTransfer>
 800d660:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d008      	beq.n	800d67a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	431a      	orrs	r2, r3
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	f000 f959 	bl	800d92c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	4a83      	ldr	r2, [pc, #524]	; (800d88c <HAL_SD_IRQHandler+0x2cc>)
 800d680:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2201      	movs	r2, #1
 800d686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	2200      	movs	r2, #0
 800d68e:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	f003 0301 	and.w	r3, r3, #1
 800d696:	2b00      	cmp	r3, #0
 800d698:	d104      	bne.n	800d6a4 <HAL_SD_IRQHandler+0xe4>
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	f003 0302 	and.w	r3, r3, #2
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d003      	beq.n	800d6ac <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d6a4:	6878      	ldr	r0, [r7, #4]
 800d6a6:	f005 fe55 	bl	8013354 <HAL_SD_RxCpltCallback>
 800d6aa:	e13b      	b.n	800d924 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f005 fe47 	bl	8013340 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d6b2:	e137      	b.n	800d924 <HAL_SD_IRQHandler+0x364>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	f000 8132 	beq.w	800d924 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	f003 0302 	and.w	r3, r3, #2
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d104      	bne.n	800d6ec <HAL_SD_IRQHandler+0x12c>
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	f003 0320 	and.w	r3, r3, #32
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d011      	beq.n	800d710 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f003 fe19 	bl	8011328 <SDMMC_CmdStopTransfer>
 800d6f6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d6f8:	68bb      	ldr	r3, [r7, #8]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d008      	beq.n	800d710 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	431a      	orrs	r2, r3
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f000 f90e 	bl	800d92c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2201      	movs	r2, #1
 800d714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2200      	movs	r2, #0
 800d71c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	f003 0310 	and.w	r3, r3, #16
 800d724:	2b00      	cmp	r3, #0
 800d726:	d104      	bne.n	800d732 <HAL_SD_IRQHandler+0x172>
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	f003 0320 	and.w	r3, r3, #32
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d002      	beq.n	800d738 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800d732:	6878      	ldr	r0, [r7, #4]
 800d734:	f005 fe04 	bl	8013340 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	f003 0301 	and.w	r3, r3, #1
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d105      	bne.n	800d74e <HAL_SD_IRQHandler+0x18e>
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	f003 0302 	and.w	r3, r3, #2
 800d748:	2b00      	cmp	r3, #0
 800d74a:	f000 80eb 	beq.w	800d924 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800d74e:	6878      	ldr	r0, [r7, #4]
 800d750:	f005 fe00 	bl	8013354 <HAL_SD_RxCpltCallback>
}
 800d754:	e0e6      	b.n	800d924 <HAL_SD_IRQHandler+0x364>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d75c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d760:	2b00      	cmp	r3, #0
 800d762:	d008      	beq.n	800d776 <HAL_SD_IRQHandler+0x1b6>
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	f003 0308 	and.w	r3, r3, #8
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d003      	beq.n	800d776 <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f001 f8ac 	bl	800e8cc <SD_Write_IT>
 800d774:	e0d6      	b.n	800d924 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d77c:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d780:	2b00      	cmp	r3, #0
 800d782:	f000 80a2 	beq.w	800d8ca <HAL_SD_IRQHandler+0x30a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d78c:	f003 0302 	and.w	r3, r3, #2
 800d790:	2b00      	cmp	r3, #0
 800d792:	d005      	beq.n	800d7a0 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d798:	f043 0202 	orr.w	r2, r3, #2
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7a6:	f003 0308 	and.w	r3, r3, #8
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d005      	beq.n	800d7ba <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7b2:	f043 0208 	orr.w	r2, r3, #8
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7c0:	f003 0320 	and.w	r3, r3, #32
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d005      	beq.n	800d7d4 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7cc:	f043 0220 	orr.w	r2, r3, #32
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7da:	f003 0310 	and.w	r3, r3, #16
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d005      	beq.n	800d7ee <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7e6:	f043 0210 	orr.w	r2, r3, #16
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	4a26      	ldr	r2, [pc, #152]	; (800d88c <HAL_SD_IRQHandler+0x2cc>)
 800d7f4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d804:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	68da      	ldr	r2, [r3, #12]
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d814:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d824:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	68da      	ldr	r2, [r3, #12]
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d834:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	4618      	mov	r0, r3
 800d83c:	f003 fd74 	bl	8011328 <SDMMC_CmdStopTransfer>
 800d840:	4602      	mov	r2, r0
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d846:	431a      	orrs	r2, r3
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	68da      	ldr	r2, [r3, #12]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d85a:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d864:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	f003 0308 	and.w	r3, r3, #8
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d00f      	beq.n	800d890 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2201      	movs	r2, #1
 800d874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2200      	movs	r2, #0
 800d87c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d87e:	6878      	ldr	r0, [r7, #4]
 800d880:	f000 f854 	bl	800d92c <HAL_SD_ErrorCallback>
}
 800d884:	e04e      	b.n	800d924 <HAL_SD_IRQHandler+0x364>
 800d886:	bf00      	nop
 800d888:	ffff3ec5 	.word	0xffff3ec5
 800d88c:	18000f3a 	.word	0x18000f3a
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d896:	2b00      	cmp	r3, #0
 800d898:	d044      	beq.n	800d924 <HAL_SD_IRQHandler+0x364>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d040      	beq.n	800d924 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d8b0:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	2201      	movs	r2, #1
 800d8be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	f000 f832 	bl	800d92c <HAL_SD_ErrorCallback>
}
 800d8c8:	e02c      	b.n	800d924 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d025      	beq.n	800d924 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8e0:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8e8:	f003 0304 	and.w	r3, r3, #4
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d10c      	bne.n	800d90a <HAL_SD_IRQHandler+0x34a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	f003 0320 	and.w	r3, r3, #32
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d003      	beq.n	800d902 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f001 f84e 	bl	800e99c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800d900:	e010      	b.n	800d924 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f001 f836 	bl	800e974 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800d908:	e00c      	b.n	800d924 <HAL_SD_IRQHandler+0x364>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	f003 0320 	and.w	r3, r3, #32
 800d910:	2b00      	cmp	r3, #0
 800d912:	d003      	beq.n	800d91c <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f001 f837 	bl	800e988 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800d91a:	e003      	b.n	800d924 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f001 f81f 	bl	800e960 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800d922:	e7ff      	b.n	800d924 <HAL_SD_IRQHandler+0x364>
 800d924:	bf00      	nop
 800d926:	3710      	adds	r7, #16
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}

0800d92c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d92c:	b480      	push	{r7}
 800d92e:	b083      	sub	sp, #12
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d934:	bf00      	nop
 800d936:	370c      	adds	r7, #12
 800d938:	46bd      	mov	sp, r7
 800d93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93e:	4770      	bx	lr

0800d940 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800d940:	b480      	push	{r7}
 800d942:	b083      	sub	sp, #12
 800d944:	af00      	add	r7, sp, #0
 800d946:	4603      	mov	r3, r0
 800d948:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 800d94a:	bf00      	nop
 800d94c:	370c      	adds	r7, #12
 800d94e:	46bd      	mov	sp, r7
 800d950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d954:	4770      	bx	lr
	...

0800d958 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d958:	b480      	push	{r7}
 800d95a:	b083      	sub	sp, #12
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d966:	0f9b      	lsrs	r3, r3, #30
 800d968:	b2da      	uxtb	r2, r3
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d972:	0e9b      	lsrs	r3, r3, #26
 800d974:	b2db      	uxtb	r3, r3
 800d976:	f003 030f 	and.w	r3, r3, #15
 800d97a:	b2da      	uxtb	r2, r3
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d984:	0e1b      	lsrs	r3, r3, #24
 800d986:	b2db      	uxtb	r3, r3
 800d988:	f003 0303 	and.w	r3, r3, #3
 800d98c:	b2da      	uxtb	r2, r3
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d996:	0c1b      	lsrs	r3, r3, #16
 800d998:	b2da      	uxtb	r2, r3
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d9a2:	0a1b      	lsrs	r3, r3, #8
 800d9a4:	b2da      	uxtb	r2, r3
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d9ae:	b2da      	uxtb	r2, r3
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9b8:	0d1b      	lsrs	r3, r3, #20
 800d9ba:	b29a      	uxth	r2, r3
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9c4:	0c1b      	lsrs	r3, r3, #16
 800d9c6:	b2db      	uxtb	r3, r3
 800d9c8:	f003 030f 	and.w	r3, r3, #15
 800d9cc:	b2da      	uxtb	r2, r3
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9d6:	0bdb      	lsrs	r3, r3, #15
 800d9d8:	b2db      	uxtb	r3, r3
 800d9da:	f003 0301 	and.w	r3, r3, #1
 800d9de:	b2da      	uxtb	r2, r3
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9e8:	0b9b      	lsrs	r3, r3, #14
 800d9ea:	b2db      	uxtb	r3, r3
 800d9ec:	f003 0301 	and.w	r3, r3, #1
 800d9f0:	b2da      	uxtb	r2, r3
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9fa:	0b5b      	lsrs	r3, r3, #13
 800d9fc:	b2db      	uxtb	r3, r3
 800d9fe:	f003 0301 	and.w	r3, r3, #1
 800da02:	b2da      	uxtb	r2, r3
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da0c:	0b1b      	lsrs	r3, r3, #12
 800da0e:	b2db      	uxtb	r3, r3
 800da10:	f003 0301 	and.w	r3, r3, #1
 800da14:	b2da      	uxtb	r2, r3
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	2200      	movs	r2, #0
 800da1e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da24:	2b00      	cmp	r3, #0
 800da26:	d163      	bne.n	800daf0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da2c:	009a      	lsls	r2, r3, #2
 800da2e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800da32:	4013      	ands	r3, r2
 800da34:	687a      	ldr	r2, [r7, #4]
 800da36:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800da38:	0f92      	lsrs	r2, r2, #30
 800da3a:	431a      	orrs	r2, r3
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da44:	0edb      	lsrs	r3, r3, #27
 800da46:	b2db      	uxtb	r3, r3
 800da48:	f003 0307 	and.w	r3, r3, #7
 800da4c:	b2da      	uxtb	r2, r3
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da56:	0e1b      	lsrs	r3, r3, #24
 800da58:	b2db      	uxtb	r3, r3
 800da5a:	f003 0307 	and.w	r3, r3, #7
 800da5e:	b2da      	uxtb	r2, r3
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da68:	0d5b      	lsrs	r3, r3, #21
 800da6a:	b2db      	uxtb	r3, r3
 800da6c:	f003 0307 	and.w	r3, r3, #7
 800da70:	b2da      	uxtb	r2, r3
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da7a:	0c9b      	lsrs	r3, r3, #18
 800da7c:	b2db      	uxtb	r3, r3
 800da7e:	f003 0307 	and.w	r3, r3, #7
 800da82:	b2da      	uxtb	r2, r3
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da8c:	0bdb      	lsrs	r3, r3, #15
 800da8e:	b2db      	uxtb	r3, r3
 800da90:	f003 0307 	and.w	r3, r3, #7
 800da94:	b2da      	uxtb	r2, r3
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	691b      	ldr	r3, [r3, #16]
 800da9e:	1c5a      	adds	r2, r3, #1
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	7e1b      	ldrb	r3, [r3, #24]
 800daa8:	b2db      	uxtb	r3, r3
 800daaa:	f003 0307 	and.w	r3, r3, #7
 800daae:	3302      	adds	r3, #2
 800dab0:	2201      	movs	r2, #1
 800dab2:	fa02 f303 	lsl.w	r3, r2, r3
 800dab6:	687a      	ldr	r2, [r7, #4]
 800dab8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800daba:	fb02 f203 	mul.w	r2, r2, r3
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	7a1b      	ldrb	r3, [r3, #8]
 800dac6:	b2db      	uxtb	r3, r3
 800dac8:	f003 030f 	and.w	r3, r3, #15
 800dacc:	2201      	movs	r2, #1
 800dace:	409a      	lsls	r2, r3
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dad8:	687a      	ldr	r2, [r7, #4]
 800dada:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800dadc:	0a52      	lsrs	r2, r2, #9
 800dade:	fb02 f203 	mul.w	r2, r2, r3
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800daec:	659a      	str	r2, [r3, #88]	; 0x58
 800daee:	e031      	b.n	800db54 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800daf4:	2b01      	cmp	r3, #1
 800daf6:	d11d      	bne.n	800db34 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dafc:	041b      	lsls	r3, r3, #16
 800dafe:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db06:	0c1b      	lsrs	r3, r3, #16
 800db08:	431a      	orrs	r2, r3
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	691b      	ldr	r3, [r3, #16]
 800db12:	3301      	adds	r3, #1
 800db14:	029a      	lsls	r2, r3, #10
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db28:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	659a      	str	r2, [r3, #88]	; 0x58
 800db32:	e00f      	b.n	800db54 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	4a58      	ldr	r2, [pc, #352]	; (800dc9c <HAL_SD_GetCardCSD+0x344>)
 800db3a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db40:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2201      	movs	r2, #1
 800db4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800db50:	2301      	movs	r3, #1
 800db52:	e09d      	b.n	800dc90 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db58:	0b9b      	lsrs	r3, r3, #14
 800db5a:	b2db      	uxtb	r3, r3
 800db5c:	f003 0301 	and.w	r3, r3, #1
 800db60:	b2da      	uxtb	r2, r3
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db6a:	09db      	lsrs	r3, r3, #7
 800db6c:	b2db      	uxtb	r3, r3
 800db6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db72:	b2da      	uxtb	r2, r3
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db7c:	b2db      	uxtb	r3, r3
 800db7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db82:	b2da      	uxtb	r2, r3
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db8c:	0fdb      	lsrs	r3, r3, #31
 800db8e:	b2da      	uxtb	r2, r3
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db98:	0f5b      	lsrs	r3, r3, #29
 800db9a:	b2db      	uxtb	r3, r3
 800db9c:	f003 0303 	and.w	r3, r3, #3
 800dba0:	b2da      	uxtb	r2, r3
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbaa:	0e9b      	lsrs	r3, r3, #26
 800dbac:	b2db      	uxtb	r3, r3
 800dbae:	f003 0307 	and.w	r3, r3, #7
 800dbb2:	b2da      	uxtb	r2, r3
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbbc:	0d9b      	lsrs	r3, r3, #22
 800dbbe:	b2db      	uxtb	r3, r3
 800dbc0:	f003 030f 	and.w	r3, r3, #15
 800dbc4:	b2da      	uxtb	r2, r3
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbce:	0d5b      	lsrs	r3, r3, #21
 800dbd0:	b2db      	uxtb	r3, r3
 800dbd2:	f003 0301 	and.w	r3, r3, #1
 800dbd6:	b2da      	uxtb	r2, r3
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbea:	0c1b      	lsrs	r3, r3, #16
 800dbec:	b2db      	uxtb	r3, r3
 800dbee:	f003 0301 	and.w	r3, r3, #1
 800dbf2:	b2da      	uxtb	r2, r3
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbfe:	0bdb      	lsrs	r3, r3, #15
 800dc00:	b2db      	uxtb	r3, r3
 800dc02:	f003 0301 	and.w	r3, r3, #1
 800dc06:	b2da      	uxtb	r2, r3
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc12:	0b9b      	lsrs	r3, r3, #14
 800dc14:	b2db      	uxtb	r3, r3
 800dc16:	f003 0301 	and.w	r3, r3, #1
 800dc1a:	b2da      	uxtb	r2, r3
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc26:	0b5b      	lsrs	r3, r3, #13
 800dc28:	b2db      	uxtb	r3, r3
 800dc2a:	f003 0301 	and.w	r3, r3, #1
 800dc2e:	b2da      	uxtb	r2, r3
 800dc30:	683b      	ldr	r3, [r7, #0]
 800dc32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc3a:	0b1b      	lsrs	r3, r3, #12
 800dc3c:	b2db      	uxtb	r3, r3
 800dc3e:	f003 0301 	and.w	r3, r3, #1
 800dc42:	b2da      	uxtb	r2, r3
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc4e:	0a9b      	lsrs	r3, r3, #10
 800dc50:	b2db      	uxtb	r3, r3
 800dc52:	f003 0303 	and.w	r3, r3, #3
 800dc56:	b2da      	uxtb	r2, r3
 800dc58:	683b      	ldr	r3, [r7, #0]
 800dc5a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc62:	0a1b      	lsrs	r3, r3, #8
 800dc64:	b2db      	uxtb	r3, r3
 800dc66:	f003 0303 	and.w	r3, r3, #3
 800dc6a:	b2da      	uxtb	r2, r3
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc76:	085b      	lsrs	r3, r3, #1
 800dc78:	b2db      	uxtb	r3, r3
 800dc7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc7e:	b2da      	uxtb	r2, r3
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	2201      	movs	r2, #1
 800dc8a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800dc8e:	2300      	movs	r3, #0
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	370c      	adds	r7, #12
 800dc94:	46bd      	mov	sp, r7
 800dc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9a:	4770      	bx	lr
 800dc9c:	1fe00fff 	.word	0x1fe00fff

0800dca0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b094      	sub	sp, #80	; 0x50
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
 800dca8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800dcb0:	f107 0308 	add.w	r3, r7, #8
 800dcb4:	4619      	mov	r1, r3
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	f000 fb64 	bl	800e384 <SD_SendSDStatus>
 800dcbc:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800dcbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d011      	beq.n	800dce8 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	4a4f      	ldr	r2, [pc, #316]	; (800de08 <HAL_SD_GetCardStatus+0x168>)
 800dcca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dcd2:	431a      	orrs	r2, r3
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	2201      	movs	r2, #1
 800dcdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800dce0:	2301      	movs	r3, #1
 800dce2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800dce6:	e070      	b.n	800ddca <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	099b      	lsrs	r3, r3, #6
 800dcec:	b2db      	uxtb	r3, r3
 800dcee:	f003 0303 	and.w	r3, r3, #3
 800dcf2:	b2da      	uxtb	r2, r3
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800dcf8:	68bb      	ldr	r3, [r7, #8]
 800dcfa:	095b      	lsrs	r3, r3, #5
 800dcfc:	b2db      	uxtb	r3, r3
 800dcfe:	f003 0301 	and.w	r3, r3, #1
 800dd02:	b2da      	uxtb	r2, r3
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	0a1b      	lsrs	r3, r3, #8
 800dd0c:	b29b      	uxth	r3, r3
 800dd0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dd12:	b29a      	uxth	r2, r3
 800dd14:	68bb      	ldr	r3, [r7, #8]
 800dd16:	0e1b      	lsrs	r3, r3, #24
 800dd18:	b29b      	uxth	r3, r3
 800dd1a:	4313      	orrs	r3, r2
 800dd1c:	b29a      	uxth	r2, r3
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	061a      	lsls	r2, r3, #24
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	021b      	lsls	r3, r3, #8
 800dd2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dd2e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	0a1b      	lsrs	r3, r3, #8
 800dd34:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dd38:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	0e1b      	lsrs	r3, r3, #24
 800dd3e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800dd44:	693b      	ldr	r3, [r7, #16]
 800dd46:	b2da      	uxtb	r2, r3
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800dd4c:	693b      	ldr	r3, [r7, #16]
 800dd4e:	0a1b      	lsrs	r3, r3, #8
 800dd50:	b2da      	uxtb	r2, r3
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800dd56:	693b      	ldr	r3, [r7, #16]
 800dd58:	0d1b      	lsrs	r3, r3, #20
 800dd5a:	b2db      	uxtb	r3, r3
 800dd5c:	f003 030f 	and.w	r3, r3, #15
 800dd60:	b2da      	uxtb	r2, r3
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800dd66:	693b      	ldr	r3, [r7, #16]
 800dd68:	0c1b      	lsrs	r3, r3, #16
 800dd6a:	b29b      	uxth	r3, r3
 800dd6c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dd70:	b29a      	uxth	r2, r3
 800dd72:	697b      	ldr	r3, [r7, #20]
 800dd74:	b29b      	uxth	r3, r3
 800dd76:	b2db      	uxtb	r3, r3
 800dd78:	b29b      	uxth	r3, r3
 800dd7a:	4313      	orrs	r3, r2
 800dd7c:	b29a      	uxth	r2, r3
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	0a9b      	lsrs	r3, r3, #10
 800dd86:	b2db      	uxtb	r3, r3
 800dd88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd8c:	b2da      	uxtb	r2, r3
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800dd92:	697b      	ldr	r3, [r7, #20]
 800dd94:	0a1b      	lsrs	r3, r3, #8
 800dd96:	b2db      	uxtb	r3, r3
 800dd98:	f003 0303 	and.w	r3, r3, #3
 800dd9c:	b2da      	uxtb	r2, r3
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800dda2:	697b      	ldr	r3, [r7, #20]
 800dda4:	091b      	lsrs	r3, r3, #4
 800dda6:	b2db      	uxtb	r3, r3
 800dda8:	f003 030f 	and.w	r3, r3, #15
 800ddac:	b2da      	uxtb	r2, r3
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800ddb2:	697b      	ldr	r3, [r7, #20]
 800ddb4:	b2db      	uxtb	r3, r3
 800ddb6:	f003 030f 	and.w	r3, r3, #15
 800ddba:	b2da      	uxtb	r2, r3
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800ddc0:	69bb      	ldr	r3, [r7, #24]
 800ddc2:	0e1b      	lsrs	r3, r3, #24
 800ddc4:	b2da      	uxtb	r2, r3
 800ddc6:	683b      	ldr	r3, [r7, #0]
 800ddc8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f003 f9f8 	bl	80111c8 <SDMMC_CmdBlockLength>
 800ddd8:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800ddda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d00d      	beq.n	800ddfc <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	4a08      	ldr	r2, [pc, #32]	; (800de08 <HAL_SD_GetCardStatus+0x168>)
 800dde6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ddec:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2201      	movs	r2, #1
 800ddf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800ddf6:	2301      	movs	r3, #1
 800ddf8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800ddfc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800de00:	4618      	mov	r0, r3
 800de02:	3750      	adds	r7, #80	; 0x50
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}
 800de08:	1fe00fff 	.word	0x1fe00fff

0800de0c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800de0c:	b480      	push	{r7}
 800de0e:	b083      	sub	sp, #12
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
 800de14:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800de56:	2300      	movs	r3, #0
}
 800de58:	4618      	mov	r0, r3
 800de5a:	370c      	adds	r7, #12
 800de5c:	46bd      	mov	sp, r7
 800de5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de62:	4770      	bx	lr

0800de64 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800de64:	b5b0      	push	{r4, r5, r7, lr}
 800de66:	b08e      	sub	sp, #56	; 0x38
 800de68:	af04      	add	r7, sp, #16
 800de6a:	6078      	str	r0, [r7, #4]
 800de6c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800de6e:	2300      	movs	r3, #0
 800de70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2203      	movs	r2, #3
 800de78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de80:	2b03      	cmp	r3, #3
 800de82:	d02e      	beq.n	800dee2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de8a:	d106      	bne.n	800de9a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de90:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	639a      	str	r2, [r3, #56]	; 0x38
 800de98:	e029      	b.n	800deee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dea0:	d10a      	bne.n	800deb8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800dea2:	6878      	ldr	r0, [r7, #4]
 800dea4:	f000 fb66 	bl	800e574 <SD_WideBus_Enable>
 800dea8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800deae:	6a3b      	ldr	r3, [r7, #32]
 800deb0:	431a      	orrs	r2, r3
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	639a      	str	r2, [r3, #56]	; 0x38
 800deb6:	e01a      	b.n	800deee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d10a      	bne.n	800ded4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	f000 fba3 	bl	800e60a <SD_WideBus_Disable>
 800dec4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800deca:	6a3b      	ldr	r3, [r7, #32]
 800decc:	431a      	orrs	r2, r3
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	639a      	str	r2, [r3, #56]	; 0x38
 800ded2:	e00c      	b.n	800deee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ded8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	639a      	str	r2, [r3, #56]	; 0x38
 800dee0:	e005      	b.n	800deee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dee6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800def2:	2b00      	cmp	r3, #0
 800def4:	d007      	beq.n	800df06 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	4a2e      	ldr	r2, [pc, #184]	; (800dfb4 <HAL_SD_ConfigWideBusOperation+0x150>)
 800defc:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800defe:	2301      	movs	r3, #1
 800df00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800df04:	e034      	b.n	800df70 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	685b      	ldr	r3, [r3, #4]
 800df0a:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	689b      	ldr	r3, [r3, #8]
 800df10:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	691b      	ldr	r3, [r3, #16]
 800df1a:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	695b      	ldr	r3, [r3, #20]
 800df20:	2b03      	cmp	r3, #3
 800df22:	d903      	bls.n	800df2c <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	695b      	ldr	r3, [r3, #20]
 800df28:	61bb      	str	r3, [r7, #24]
 800df2a:	e012      	b.n	800df52 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df34:	d103      	bne.n	800df3e <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	695b      	ldr	r3, [r3, #20]
 800df3a:	61bb      	str	r3, [r7, #24]
 800df3c:	e009      	b.n	800df52 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df46:	d102      	bne.n	800df4e <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800df48:	2302      	movs	r3, #2
 800df4a:	61bb      	str	r3, [r7, #24]
 800df4c:	e001      	b.n	800df52 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800df4e:	2304      	movs	r3, #4
 800df50:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681d      	ldr	r5, [r3, #0]
 800df56:	466c      	mov	r4, sp
 800df58:	f107 0314 	add.w	r3, r7, #20
 800df5c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800df60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800df64:	f107 0308 	add.w	r3, r7, #8
 800df68:	cb0e      	ldmia	r3, {r1, r2, r3}
 800df6a:	4628      	mov	r0, r5
 800df6c:	f003 f84e 	bl	801100c <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	f44f 7100 	mov.w	r1, #512	; 0x200
 800df78:	4618      	mov	r0, r3
 800df7a:	f003 f925 	bl	80111c8 <SDMMC_CmdBlockLength>
 800df7e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800df80:	6a3b      	ldr	r3, [r7, #32]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d00c      	beq.n	800dfa0 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	4a0a      	ldr	r2, [pc, #40]	; (800dfb4 <HAL_SD_ConfigWideBusOperation+0x150>)
 800df8c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df92:	6a3b      	ldr	r3, [r7, #32]
 800df94:	431a      	orrs	r2, r3
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800df9a:	2301      	movs	r3, #1
 800df9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2201      	movs	r2, #1
 800dfa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800dfa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800dfac:	4618      	mov	r0, r3
 800dfae:	3728      	adds	r7, #40	; 0x28
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	bdb0      	pop	{r4, r5, r7, pc}
 800dfb4:	1fe00fff 	.word	0x1fe00fff

0800dfb8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b086      	sub	sp, #24
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800dfc4:	f107 030c 	add.w	r3, r7, #12
 800dfc8:	4619      	mov	r1, r3
 800dfca:	6878      	ldr	r0, [r7, #4]
 800dfcc:	f000 faaa 	bl	800e524 <SD_SendStatus>
 800dfd0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dfd2:	697b      	ldr	r3, [r7, #20]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d005      	beq.n	800dfe4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dfdc:	697b      	ldr	r3, [r7, #20]
 800dfde:	431a      	orrs	r2, r3
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	0a5b      	lsrs	r3, r3, #9
 800dfe8:	f003 030f 	and.w	r3, r3, #15
 800dfec:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800dfee:	693b      	ldr	r3, [r7, #16]
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3718      	adds	r7, #24
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}

0800dff8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800dff8:	b590      	push	{r4, r7, lr}
 800dffa:	b091      	sub	sp, #68	; 0x44
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800e000:	2301      	movs	r3, #1
 800e002:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	4618      	mov	r0, r3
 800e00a:	f003 f858 	bl	80110be <SDMMC_GetPowerState>
 800e00e:	4603      	mov	r3, r0
 800e010:	2b00      	cmp	r3, #0
 800e012:	d102      	bne.n	800e01a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e014:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e018:	e0a8      	b.n	800e16c <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e01e:	2b03      	cmp	r3, #3
 800e020:	d02e      	beq.n	800e080 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	4618      	mov	r0, r3
 800e028:	f003 faa4 	bl	8011574 <SDMMC_CmdSendCID>
 800e02c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e02e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e030:	2b00      	cmp	r3, #0
 800e032:	d001      	beq.n	800e038 <SD_InitCard+0x40>
    {
      return errorstate;
 800e034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e036:	e099      	b.n	800e16c <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	2100      	movs	r1, #0
 800e03e:	4618      	mov	r0, r3
 800e040:	f003 f883 	bl	801114a <SDMMC_GetResponse>
 800e044:	4602      	mov	r2, r0
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	2104      	movs	r1, #4
 800e050:	4618      	mov	r0, r3
 800e052:	f003 f87a 	bl	801114a <SDMMC_GetResponse>
 800e056:	4602      	mov	r2, r0
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	2108      	movs	r1, #8
 800e062:	4618      	mov	r0, r3
 800e064:	f003 f871 	bl	801114a <SDMMC_GetResponse>
 800e068:	4602      	mov	r2, r0
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	210c      	movs	r1, #12
 800e074:	4618      	mov	r0, r3
 800e076:	f003 f868 	bl	801114a <SDMMC_GetResponse>
 800e07a:	4602      	mov	r2, r0
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e084:	2b03      	cmp	r3, #3
 800e086:	d00d      	beq.n	800e0a4 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	f107 020e 	add.w	r2, r7, #14
 800e090:	4611      	mov	r1, r2
 800e092:	4618      	mov	r0, r3
 800e094:	f003 faad 	bl	80115f2 <SDMMC_CmdSetRelAdd>
 800e098:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e09a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d001      	beq.n	800e0a4 <SD_InitCard+0xac>
    {
      return errorstate;
 800e0a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0a2:	e063      	b.n	800e16c <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0a8:	2b03      	cmp	r3, #3
 800e0aa:	d036      	beq.n	800e11a <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e0ac:	89fb      	ldrh	r3, [r7, #14]
 800e0ae:	461a      	mov	r2, r3
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681a      	ldr	r2, [r3, #0]
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0bc:	041b      	lsls	r3, r3, #16
 800e0be:	4619      	mov	r1, r3
 800e0c0:	4610      	mov	r0, r2
 800e0c2:	f003 fa76 	bl	80115b2 <SDMMC_CmdSendCSD>
 800e0c6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e0c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d001      	beq.n	800e0d2 <SD_InitCard+0xda>
    {
      return errorstate;
 800e0ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0d0:	e04c      	b.n	800e16c <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	2100      	movs	r1, #0
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f003 f836 	bl	801114a <SDMMC_GetResponse>
 800e0de:	4602      	mov	r2, r0
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	2104      	movs	r1, #4
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f003 f82d 	bl	801114a <SDMMC_GetResponse>
 800e0f0:	4602      	mov	r2, r0
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	2108      	movs	r1, #8
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f003 f824 	bl	801114a <SDMMC_GetResponse>
 800e102:	4602      	mov	r2, r0
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	210c      	movs	r1, #12
 800e10e:	4618      	mov	r0, r3
 800e110:	f003 f81b 	bl	801114a <SDMMC_GetResponse>
 800e114:	4602      	mov	r2, r0
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	2104      	movs	r1, #4
 800e120:	4618      	mov	r0, r3
 800e122:	f003 f812 	bl	801114a <SDMMC_GetResponse>
 800e126:	4603      	mov	r3, r0
 800e128:	0d1a      	lsrs	r2, r3, #20
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e12e:	f107 0310 	add.w	r3, r7, #16
 800e132:	4619      	mov	r1, r3
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	f7ff fc0f 	bl	800d958 <HAL_SD_GetCardCSD>
 800e13a:	4603      	mov	r3, r0
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d002      	beq.n	800e146 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e140:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e144:	e012      	b.n	800e16c <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	6819      	ldr	r1, [r3, #0]
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e14e:	041b      	lsls	r3, r3, #16
 800e150:	f04f 0400 	mov.w	r4, #0
 800e154:	461a      	mov	r2, r3
 800e156:	4623      	mov	r3, r4
 800e158:	4608      	mov	r0, r1
 800e15a:	f003 f921 	bl	80113a0 <SDMMC_CmdSelDesel>
 800e15e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e160:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e162:	2b00      	cmp	r3, #0
 800e164:	d001      	beq.n	800e16a <SD_InitCard+0x172>
  {
    return errorstate;
 800e166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e168:	e000      	b.n	800e16c <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e16a:	2300      	movs	r3, #0
}
 800e16c:	4618      	mov	r0, r3
 800e16e:	3744      	adds	r7, #68	; 0x44
 800e170:	46bd      	mov	sp, r7
 800e172:	bd90      	pop	{r4, r7, pc}

0800e174 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b088      	sub	sp, #32
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e17c:	2300      	movs	r3, #0
 800e17e:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800e180:	2300      	movs	r3, #0
 800e182:	61fb      	str	r3, [r7, #28]
 800e184:	2300      	movs	r3, #0
 800e186:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800e188:	f7f6 fa2c 	bl	80045e4 <HAL_GetTick>
 800e18c:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	4618      	mov	r0, r3
 800e194:	f003 f928 	bl	80113e8 <SDMMC_CmdGoIdleState>
 800e198:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e19a:	693b      	ldr	r3, [r7, #16]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d001      	beq.n	800e1a4 <SD_PowerON+0x30>
  {
    return errorstate;
 800e1a0:	693b      	ldr	r3, [r7, #16]
 800e1a2:	e0e9      	b.n	800e378 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	f003 f93b 	bl	8011424 <SDMMC_CmdOperCond>
 800e1ae:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e1b0:	693b      	ldr	r3, [r7, #16]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d00d      	beq.n	800e1d2 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	f003 f911 	bl	80113e8 <SDMMC_CmdGoIdleState>
 800e1c6:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1c8:	693b      	ldr	r3, [r7, #16]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d004      	beq.n	800e1d8 <SD_PowerON+0x64>
    {
      return errorstate;
 800e1ce:	693b      	ldr	r3, [r7, #16]
 800e1d0:	e0d2      	b.n	800e378 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	2201      	movs	r2, #1
 800e1d6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1dc:	2b01      	cmp	r3, #1
 800e1de:	d137      	bne.n	800e250 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	2100      	movs	r1, #0
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	f003 f93c 	bl	8011464 <SDMMC_CmdAppCommand>
 800e1ec:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1ee:	693b      	ldr	r3, [r7, #16]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d02d      	beq.n	800e250 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e1f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e1f8:	e0be      	b.n	800e378 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	2100      	movs	r1, #0
 800e200:	4618      	mov	r0, r3
 800e202:	f003 f92f 	bl	8011464 <SDMMC_CmdAppCommand>
 800e206:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d001      	beq.n	800e212 <SD_PowerON+0x9e>
    {
      return errorstate;
 800e20e:	693b      	ldr	r3, [r7, #16]
 800e210:	e0b2      	b.n	800e378 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	495a      	ldr	r1, [pc, #360]	; (800e380 <SD_PowerON+0x20c>)
 800e218:	4618      	mov	r0, r3
 800e21a:	f003 f946 	bl	80114aa <SDMMC_CmdAppOperCommand>
 800e21e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e220:	693b      	ldr	r3, [r7, #16]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d002      	beq.n	800e22c <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e226:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e22a:	e0a5      	b.n	800e378 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	2100      	movs	r1, #0
 800e232:	4618      	mov	r0, r3
 800e234:	f002 ff89 	bl	801114a <SDMMC_GetResponse>
 800e238:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e23a:	69fb      	ldr	r3, [r7, #28]
 800e23c:	0fdb      	lsrs	r3, r3, #31
 800e23e:	2b01      	cmp	r3, #1
 800e240:	d101      	bne.n	800e246 <SD_PowerON+0xd2>
 800e242:	2301      	movs	r3, #1
 800e244:	e000      	b.n	800e248 <SD_PowerON+0xd4>
 800e246:	2300      	movs	r3, #0
 800e248:	61bb      	str	r3, [r7, #24]

    count++;
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	3301      	adds	r3, #1
 800e24e:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e256:	4293      	cmp	r3, r2
 800e258:	d802      	bhi.n	800e260 <SD_PowerON+0xec>
 800e25a:	69bb      	ldr	r3, [r7, #24]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d0cc      	beq.n	800e1fa <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e266:	4293      	cmp	r3, r2
 800e268:	d902      	bls.n	800e270 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e26a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e26e:	e083      	b.n	800e378 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e270:	69fb      	ldr	r3, [r7, #28]
 800e272:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e276:	2b00      	cmp	r3, #0
 800e278:	d07d      	beq.n	800e376 <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2201      	movs	r2, #1
 800e27e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	699b      	ldr	r3, [r3, #24]
 800e284:	2b02      	cmp	r3, #2
 800e286:	d176      	bne.n	800e376 <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800e288:	69fb      	ldr	r3, [r7, #28]
 800e28a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d071      	beq.n	800e376 <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e298:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	681a      	ldr	r2, [r3, #0]
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	f042 0208 	orr.w	r2, r2, #8
 800e2a8:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f003 fa06 	bl	80116c0 <SDMMC_CmdVoltageSwitch>
 800e2b4:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800e2b6:	693b      	ldr	r3, [r7, #16]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d00c      	beq.n	800e2d6 <SD_PowerON+0x162>
        {
          return errorstate;
 800e2bc:	693b      	ldr	r3, [r7, #16]
 800e2be:	e05b      	b.n	800e378 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e2c0:	f7f6 f990 	bl	80045e4 <HAL_GetTick>
 800e2c4:	4602      	mov	r2, r0
 800e2c6:	697b      	ldr	r3, [r7, #20]
 800e2c8:	1ad3      	subs	r3, r2, r3
 800e2ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2ce:	d102      	bne.n	800e2d6 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800e2d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e2d4:	e050      	b.n	800e378 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e2e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e2e4:	d1ec      	bne.n	800e2c0 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800e2ee:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e2fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e2fe:	d002      	beq.n	800e306 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800e300:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e304:	e038      	b.n	800e378 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800e306:	2001      	movs	r0, #1
 800e308:	f7ff fb1a 	bl	800d940 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	681a      	ldr	r2, [r3, #0]
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	f042 0204 	orr.w	r2, r2, #4
 800e31a:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800e31c:	e00a      	b.n	800e334 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e31e:	f7f6 f961 	bl	80045e4 <HAL_GetTick>
 800e322:	4602      	mov	r2, r0
 800e324:	697b      	ldr	r3, [r7, #20]
 800e326:	1ad3      	subs	r3, r2, r3
 800e328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e32c:	d102      	bne.n	800e334 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800e32e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e332:	e021      	b.n	800e378 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e33a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e33e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e342:	d1ec      	bne.n	800e31e <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e34c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e354:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e358:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e35c:	d102      	bne.n	800e364 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e35e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e362:	e009      	b.n	800e378 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	2213      	movs	r2, #19
 800e36a:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	f04f 32ff 	mov.w	r2, #4294967295
 800e374:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e376:	2300      	movs	r3, #0
}
 800e378:	4618      	mov	r0, r3
 800e37a:	3720      	adds	r7, #32
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}
 800e380:	c1100000 	.word	0xc1100000

0800e384 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b08c      	sub	sp, #48	; 0x30
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
 800e38c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e38e:	f7f6 f929 	bl	80045e4 <HAL_GetTick>
 800e392:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	2100      	movs	r1, #0
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f002 fed3 	bl	801114a <SDMMC_GetResponse>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e3aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e3ae:	d102      	bne.n	800e3b6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e3b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e3b4:	e0b0      	b.n	800e518 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	2140      	movs	r1, #64	; 0x40
 800e3bc:	4618      	mov	r0, r3
 800e3be:	f002 ff03 	bl	80111c8 <SDMMC_CmdBlockLength>
 800e3c2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e3c4:	6a3b      	ldr	r3, [r7, #32]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d005      	beq.n	800e3d6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800e3d2:	6a3b      	ldr	r3, [r7, #32]
 800e3d4:	e0a0      	b.n	800e518 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681a      	ldr	r2, [r3, #0]
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e3de:	041b      	lsls	r3, r3, #16
 800e3e0:	4619      	mov	r1, r3
 800e3e2:	4610      	mov	r0, r2
 800e3e4:	f003 f83e 	bl	8011464 <SDMMC_CmdAppCommand>
 800e3e8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e3ea:	6a3b      	ldr	r3, [r7, #32]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d005      	beq.n	800e3fc <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800e3f8:	6a3b      	ldr	r3, [r7, #32]
 800e3fa:	e08d      	b.n	800e518 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e3fc:	f04f 33ff 	mov.w	r3, #4294967295
 800e400:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e402:	2340      	movs	r3, #64	; 0x40
 800e404:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e406:	2360      	movs	r3, #96	; 0x60
 800e408:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e40a:	2302      	movs	r3, #2
 800e40c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e40e:	2300      	movs	r3, #0
 800e410:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e412:	2301      	movs	r3, #1
 800e414:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	f107 0208 	add.w	r2, r7, #8
 800e41e:	4611      	mov	r1, r2
 800e420:	4618      	mov	r0, r3
 800e422:	f002 fea5 	bl	8011170 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	4618      	mov	r0, r3
 800e42c:	f003 f926 	bl	801167c <SDMMC_CmdStatusRegister>
 800e430:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e432:	6a3b      	ldr	r3, [r7, #32]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d02b      	beq.n	800e490 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800e440:	6a3b      	ldr	r3, [r7, #32]
 800e442:	e069      	b.n	800e518 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e44a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d013      	beq.n	800e47a <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800e452:	2300      	movs	r3, #0
 800e454:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e456:	e00d      	b.n	800e474 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	4618      	mov	r0, r3
 800e45e:	f002 fdff 	bl	8011060 <SDMMC_ReadFIFO>
 800e462:	4602      	mov	r2, r0
 800e464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e466:	601a      	str	r2, [r3, #0]
        pData++;
 800e468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e46a:	3304      	adds	r3, #4
 800e46c:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800e46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e470:	3301      	adds	r3, #1
 800e472:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e476:	2b07      	cmp	r3, #7
 800e478:	d9ee      	bls.n	800e458 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e47a:	f7f6 f8b3 	bl	80045e4 <HAL_GetTick>
 800e47e:	4602      	mov	r2, r0
 800e480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e482:	1ad3      	subs	r3, r2, r3
 800e484:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e488:	d102      	bne.n	800e490 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e48a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e48e:	e043      	b.n	800e518 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e496:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d0d2      	beq.n	800e444 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4a4:	f003 0308 	and.w	r3, r3, #8
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d001      	beq.n	800e4b0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e4ac:	2308      	movs	r3, #8
 800e4ae:	e033      	b.n	800e518 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4b6:	f003 0302 	and.w	r3, r3, #2
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d001      	beq.n	800e4c2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e4be:	2302      	movs	r3, #2
 800e4c0:	e02a      	b.n	800e518 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4c8:	f003 0320 	and.w	r3, r3, #32
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d017      	beq.n	800e500 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e4d0:	2320      	movs	r3, #32
 800e4d2:	e021      	b.n	800e518 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f002 fdc1 	bl	8011060 <SDMMC_ReadFIFO>
 800e4de:	4602      	mov	r2, r0
 800e4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e2:	601a      	str	r2, [r3, #0]
    pData++;
 800e4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e6:	3304      	adds	r3, #4
 800e4e8:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e4ea:	f7f6 f87b 	bl	80045e4 <HAL_GetTick>
 800e4ee:	4602      	mov	r2, r0
 800e4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f2:	1ad3      	subs	r3, r2, r3
 800e4f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4f8:	d102      	bne.n	800e500 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e4fa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e4fe:	e00b      	b.n	800e518 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e506:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d1e2      	bne.n	800e4d4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	4a03      	ldr	r2, [pc, #12]	; (800e520 <SD_SendSDStatus+0x19c>)
 800e514:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e516:	2300      	movs	r3, #0
}
 800e518:	4618      	mov	r0, r3
 800e51a:	3730      	adds	r7, #48	; 0x30
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd80      	pop	{r7, pc}
 800e520:	18000f3a 	.word	0x18000f3a

0800e524 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b084      	sub	sp, #16
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
 800e52c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d102      	bne.n	800e53a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e534:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e538:	e018      	b.n	800e56c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681a      	ldr	r2, [r3, #0]
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e542:	041b      	lsls	r3, r3, #16
 800e544:	4619      	mov	r1, r3
 800e546:	4610      	mov	r0, r2
 800e548:	f003 f875 	bl	8011636 <SDMMC_CmdSendStatus>
 800e54c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d001      	beq.n	800e558 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	e009      	b.n	800e56c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	2100      	movs	r1, #0
 800e55e:	4618      	mov	r0, r3
 800e560:	f002 fdf3 	bl	801114a <SDMMC_GetResponse>
 800e564:	4602      	mov	r2, r0
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e56a:	2300      	movs	r3, #0
}
 800e56c:	4618      	mov	r0, r3
 800e56e:	3710      	adds	r7, #16
 800e570:	46bd      	mov	sp, r7
 800e572:	bd80      	pop	{r7, pc}

0800e574 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b086      	sub	sp, #24
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e57c:	2300      	movs	r3, #0
 800e57e:	60fb      	str	r3, [r7, #12]
 800e580:	2300      	movs	r3, #0
 800e582:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	2100      	movs	r1, #0
 800e58a:	4618      	mov	r0, r3
 800e58c:	f002 fddd 	bl	801114a <SDMMC_GetResponse>
 800e590:	4603      	mov	r3, r0
 800e592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e596:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e59a:	d102      	bne.n	800e5a2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e59c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e5a0:	e02f      	b.n	800e602 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e5a2:	f107 030c 	add.w	r3, r7, #12
 800e5a6:	4619      	mov	r1, r3
 800e5a8:	6878      	ldr	r0, [r7, #4]
 800e5aa:	f000 f879 	bl	800e6a0 <SD_FindSCR>
 800e5ae:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e5b0:	697b      	ldr	r3, [r7, #20]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d001      	beq.n	800e5ba <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e5b6:	697b      	ldr	r3, [r7, #20]
 800e5b8:	e023      	b.n	800e602 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e5ba:	693b      	ldr	r3, [r7, #16]
 800e5bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d01c      	beq.n	800e5fe <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681a      	ldr	r2, [r3, #0]
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5cc:	041b      	lsls	r3, r3, #16
 800e5ce:	4619      	mov	r1, r3
 800e5d0:	4610      	mov	r0, r2
 800e5d2:	f002 ff47 	bl	8011464 <SDMMC_CmdAppCommand>
 800e5d6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e5d8:	697b      	ldr	r3, [r7, #20]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d001      	beq.n	800e5e2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e5de:	697b      	ldr	r3, [r7, #20]
 800e5e0:	e00f      	b.n	800e602 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	2102      	movs	r1, #2
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f002 ff7e 	bl	80114ea <SDMMC_CmdBusWidth>
 800e5ee:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d001      	beq.n	800e5fa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e5f6:	697b      	ldr	r3, [r7, #20]
 800e5f8:	e003      	b.n	800e602 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	e001      	b.n	800e602 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e5fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e602:	4618      	mov	r0, r3
 800e604:	3718      	adds	r7, #24
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}

0800e60a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e60a:	b580      	push	{r7, lr}
 800e60c:	b086      	sub	sp, #24
 800e60e:	af00      	add	r7, sp, #0
 800e610:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e612:	2300      	movs	r3, #0
 800e614:	60fb      	str	r3, [r7, #12]
 800e616:	2300      	movs	r3, #0
 800e618:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	2100      	movs	r1, #0
 800e620:	4618      	mov	r0, r3
 800e622:	f002 fd92 	bl	801114a <SDMMC_GetResponse>
 800e626:	4603      	mov	r3, r0
 800e628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e62c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e630:	d102      	bne.n	800e638 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e632:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e636:	e02f      	b.n	800e698 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e638:	f107 030c 	add.w	r3, r7, #12
 800e63c:	4619      	mov	r1, r3
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	f000 f82e 	bl	800e6a0 <SD_FindSCR>
 800e644:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e646:	697b      	ldr	r3, [r7, #20]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d001      	beq.n	800e650 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e64c:	697b      	ldr	r3, [r7, #20]
 800e64e:	e023      	b.n	800e698 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e650:	693b      	ldr	r3, [r7, #16]
 800e652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e656:	2b00      	cmp	r3, #0
 800e658:	d01c      	beq.n	800e694 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681a      	ldr	r2, [r3, #0]
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e662:	041b      	lsls	r3, r3, #16
 800e664:	4619      	mov	r1, r3
 800e666:	4610      	mov	r0, r2
 800e668:	f002 fefc 	bl	8011464 <SDMMC_CmdAppCommand>
 800e66c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e66e:	697b      	ldr	r3, [r7, #20]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d001      	beq.n	800e678 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e674:	697b      	ldr	r3, [r7, #20]
 800e676:	e00f      	b.n	800e698 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	2100      	movs	r1, #0
 800e67e:	4618      	mov	r0, r3
 800e680:	f002 ff33 	bl	80114ea <SDMMC_CmdBusWidth>
 800e684:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e686:	697b      	ldr	r3, [r7, #20]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d001      	beq.n	800e690 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e68c:	697b      	ldr	r3, [r7, #20]
 800e68e:	e003      	b.n	800e698 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e690:	2300      	movs	r3, #0
 800e692:	e001      	b.n	800e698 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e694:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e698:	4618      	mov	r0, r3
 800e69a:	3718      	adds	r7, #24
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}

0800e6a0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b08e      	sub	sp, #56	; 0x38
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
 800e6a8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e6aa:	f7f5 ff9b 	bl	80045e4 <HAL_GetTick>
 800e6ae:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	60bb      	str	r3, [r7, #8]
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e6bc:	683b      	ldr	r3, [r7, #0]
 800e6be:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	2108      	movs	r1, #8
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f002 fd7e 	bl	80111c8 <SDMMC_CmdBlockLength>
 800e6cc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d001      	beq.n	800e6d8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6d6:	e0ad      	b.n	800e834 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681a      	ldr	r2, [r3, #0]
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6e0:	041b      	lsls	r3, r3, #16
 800e6e2:	4619      	mov	r1, r3
 800e6e4:	4610      	mov	r0, r2
 800e6e6:	f002 febd 	bl	8011464 <SDMMC_CmdAppCommand>
 800e6ea:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d001      	beq.n	800e6f6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800e6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6f4:	e09e      	b.n	800e834 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e6f6:	f04f 33ff 	mov.w	r3, #4294967295
 800e6fa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e6fc:	2308      	movs	r3, #8
 800e6fe:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e700:	2330      	movs	r3, #48	; 0x30
 800e702:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e704:	2302      	movs	r3, #2
 800e706:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e708:	2300      	movs	r3, #0
 800e70a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e70c:	2301      	movs	r3, #1
 800e70e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	f107 0210 	add.w	r2, r7, #16
 800e718:	4611      	mov	r1, r2
 800e71a:	4618      	mov	r0, r3
 800e71c:	f002 fd28 	bl	8011170 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	4618      	mov	r0, r3
 800e726:	f002 ff03 	bl	8011530 <SDMMC_CmdSendSCR>
 800e72a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e72c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d027      	beq.n	800e782 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800e732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e734:	e07e      	b.n	800e834 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e73c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e740:	2b00      	cmp	r3, #0
 800e742:	d113      	bne.n	800e76c <SD_FindSCR+0xcc>
 800e744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e746:	2b00      	cmp	r3, #0
 800e748:	d110      	bne.n	800e76c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	4618      	mov	r0, r3
 800e750:	f002 fc86 	bl	8011060 <SDMMC_ReadFIFO>
 800e754:	4603      	mov	r3, r0
 800e756:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	4618      	mov	r0, r3
 800e75e:	f002 fc7f 	bl	8011060 <SDMMC_ReadFIFO>
 800e762:	4603      	mov	r3, r0
 800e764:	60fb      	str	r3, [r7, #12]
      index++;
 800e766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e768:	3301      	adds	r3, #1
 800e76a:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e76c:	f7f5 ff3a 	bl	80045e4 <HAL_GetTick>
 800e770:	4602      	mov	r2, r0
 800e772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e774:	1ad3      	subs	r3, r2, r3
 800e776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e77a:	d102      	bne.n	800e782 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e77c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e780:	e058      	b.n	800e834 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e788:	f240 532a 	movw	r3, #1322	; 0x52a
 800e78c:	4013      	ands	r3, r2
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d0d1      	beq.n	800e736 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e798:	f003 0308 	and.w	r3, r3, #8
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d005      	beq.n	800e7ac <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	2208      	movs	r2, #8
 800e7a6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e7a8:	2308      	movs	r3, #8
 800e7aa:	e043      	b.n	800e834 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7b2:	f003 0302 	and.w	r3, r3, #2
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d005      	beq.n	800e7c6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	2202      	movs	r2, #2
 800e7c0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e7c2:	2302      	movs	r3, #2
 800e7c4:	e036      	b.n	800e834 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7cc:	f003 0320 	and.w	r3, r3, #32
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d005      	beq.n	800e7e0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	2220      	movs	r2, #32
 800e7da:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e7dc:	2320      	movs	r3, #32
 800e7de:	e029      	b.n	800e834 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	4a15      	ldr	r2, [pc, #84]	; (800e83c <SD_FindSCR+0x19c>)
 800e7e6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	061a      	lsls	r2, r3, #24
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	021b      	lsls	r3, r3, #8
 800e7f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e7f4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	0a1b      	lsrs	r3, r3, #8
 800e7fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e7fe:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	0e1b      	lsrs	r3, r3, #24
 800e804:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e808:	601a      	str	r2, [r3, #0]
    scr++;
 800e80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e80c:	3304      	adds	r3, #4
 800e80e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e810:	68bb      	ldr	r3, [r7, #8]
 800e812:	061a      	lsls	r2, r3, #24
 800e814:	68bb      	ldr	r3, [r7, #8]
 800e816:	021b      	lsls	r3, r3, #8
 800e818:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e81c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	0a1b      	lsrs	r3, r3, #8
 800e822:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e826:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e828:	68bb      	ldr	r3, [r7, #8]
 800e82a:	0e1b      	lsrs	r3, r3, #24
 800e82c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e830:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e832:	2300      	movs	r3, #0
}
 800e834:	4618      	mov	r0, r3
 800e836:	3738      	adds	r7, #56	; 0x38
 800e838:	46bd      	mov	sp, r7
 800e83a:	bd80      	pop	{r7, pc}
 800e83c:	18000f3a 	.word	0x18000f3a

0800e840 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b086      	sub	sp, #24
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e84c:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e852:	2b1f      	cmp	r3, #31
 800e854:	d936      	bls.n	800e8c4 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e856:	2300      	movs	r3, #0
 800e858:	617b      	str	r3, [r7, #20]
 800e85a:	e027      	b.n	800e8ac <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	4618      	mov	r0, r3
 800e862:	f002 fbfd 	bl	8011060 <SDMMC_ReadFIFO>
 800e866:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	b2da      	uxtb	r2, r3
 800e86c:	693b      	ldr	r3, [r7, #16]
 800e86e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e870:	693b      	ldr	r3, [r7, #16]
 800e872:	3301      	adds	r3, #1
 800e874:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	0a1b      	lsrs	r3, r3, #8
 800e87a:	b2da      	uxtb	r2, r3
 800e87c:	693b      	ldr	r3, [r7, #16]
 800e87e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e880:	693b      	ldr	r3, [r7, #16]
 800e882:	3301      	adds	r3, #1
 800e884:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	0c1b      	lsrs	r3, r3, #16
 800e88a:	b2da      	uxtb	r2, r3
 800e88c:	693b      	ldr	r3, [r7, #16]
 800e88e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e890:	693b      	ldr	r3, [r7, #16]
 800e892:	3301      	adds	r3, #1
 800e894:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	0e1b      	lsrs	r3, r3, #24
 800e89a:	b2da      	uxtb	r2, r3
 800e89c:	693b      	ldr	r3, [r7, #16]
 800e89e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e8a0:	693b      	ldr	r3, [r7, #16]
 800e8a2:	3301      	adds	r3, #1
 800e8a4:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e8a6:	697b      	ldr	r3, [r7, #20]
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	617b      	str	r3, [r7, #20]
 800e8ac:	697b      	ldr	r3, [r7, #20]
 800e8ae:	2b07      	cmp	r3, #7
 800e8b0:	d9d4      	bls.n	800e85c <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	693a      	ldr	r2, [r7, #16]
 800e8b6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8bc:	f1a3 0220 	sub.w	r2, r3, #32
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e8c4:	bf00      	nop
 800e8c6:	3718      	adds	r7, #24
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}

0800e8cc <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b086      	sub	sp, #24
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	6a1b      	ldr	r3, [r3, #32]
 800e8d8:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8de:	2b1f      	cmp	r3, #31
 800e8e0:	d93a      	bls.n	800e958 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	617b      	str	r3, [r7, #20]
 800e8e6:	e02b      	b.n	800e940 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800e8e8:	693b      	ldr	r3, [r7, #16]
 800e8ea:	781b      	ldrb	r3, [r3, #0]
 800e8ec:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e8ee:	693b      	ldr	r3, [r7, #16]
 800e8f0:	3301      	adds	r3, #1
 800e8f2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e8f4:	693b      	ldr	r3, [r7, #16]
 800e8f6:	781b      	ldrb	r3, [r3, #0]
 800e8f8:	021a      	lsls	r2, r3, #8
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	4313      	orrs	r3, r2
 800e8fe:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e900:	693b      	ldr	r3, [r7, #16]
 800e902:	3301      	adds	r3, #1
 800e904:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e906:	693b      	ldr	r3, [r7, #16]
 800e908:	781b      	ldrb	r3, [r3, #0]
 800e90a:	041a      	lsls	r2, r3, #16
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	4313      	orrs	r3, r2
 800e910:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e912:	693b      	ldr	r3, [r7, #16]
 800e914:	3301      	adds	r3, #1
 800e916:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e918:	693b      	ldr	r3, [r7, #16]
 800e91a:	781b      	ldrb	r3, [r3, #0]
 800e91c:	061a      	lsls	r2, r3, #24
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	4313      	orrs	r3, r2
 800e922:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e924:	693b      	ldr	r3, [r7, #16]
 800e926:	3301      	adds	r3, #1
 800e928:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	f107 020c 	add.w	r2, r7, #12
 800e932:	4611      	mov	r1, r2
 800e934:	4618      	mov	r0, r3
 800e936:	f002 fba0 	bl	801107a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e93a:	697b      	ldr	r3, [r7, #20]
 800e93c:	3301      	adds	r3, #1
 800e93e:	617b      	str	r3, [r7, #20]
 800e940:	697b      	ldr	r3, [r7, #20]
 800e942:	2b07      	cmp	r3, #7
 800e944:	d9d0      	bls.n	800e8e8 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	693a      	ldr	r2, [r7, #16]
 800e94a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e950:	f1a3 0220 	sub.w	r2, r3, #32
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800e958:	bf00      	nop
 800e95a:	3718      	adds	r7, #24
 800e95c:	46bd      	mov	sp, r7
 800e95e:	bd80      	pop	{r7, pc}

0800e960 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e960:	b480      	push	{r7}
 800e962:	b083      	sub	sp, #12
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e968:	bf00      	nop
 800e96a:	370c      	adds	r7, #12
 800e96c:	46bd      	mov	sp, r7
 800e96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e972:	4770      	bx	lr

0800e974 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e974:	b480      	push	{r7}
 800e976:	b083      	sub	sp, #12
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e97c:	bf00      	nop
 800e97e:	370c      	adds	r7, #12
 800e980:	46bd      	mov	sp, r7
 800e982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e986:	4770      	bx	lr

0800e988 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e988:	b480      	push	{r7}
 800e98a:	b083      	sub	sp, #12
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e990:	bf00      	nop
 800e992:	370c      	adds	r7, #12
 800e994:	46bd      	mov	sp, r7
 800e996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99a:	4770      	bx	lr

0800e99c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e99c:	b480      	push	{r7}
 800e99e:	b083      	sub	sp, #12
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e9a4:	bf00      	nop
 800e9a6:	370c      	adds	r7, #12
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ae:	4770      	bx	lr

0800e9b0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b084      	sub	sp, #16
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d101      	bne.n	800e9c6 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800e9c2:	2301      	movs	r3, #1
 800e9c4:	e0e2      	b.n	800eb8c <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	4a70      	ldr	r2, [pc, #448]	; (800eb94 <HAL_SPI_Init+0x1e4>)
 800e9d2:	4293      	cmp	r3, r2
 800e9d4:	d00f      	beq.n	800e9f6 <HAL_SPI_Init+0x46>
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	4a6f      	ldr	r2, [pc, #444]	; (800eb98 <HAL_SPI_Init+0x1e8>)
 800e9dc:	4293      	cmp	r3, r2
 800e9de:	d00a      	beq.n	800e9f6 <HAL_SPI_Init+0x46>
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	4a6d      	ldr	r2, [pc, #436]	; (800eb9c <HAL_SPI_Init+0x1ec>)
 800e9e6:	4293      	cmp	r3, r2
 800e9e8:	d005      	beq.n	800e9f6 <HAL_SPI_Init+0x46>
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	68db      	ldr	r3, [r3, #12]
 800e9ee:	2b0f      	cmp	r3, #15
 800e9f0:	d901      	bls.n	800e9f6 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800e9f2:	2301      	movs	r3, #1
 800e9f4:	e0ca      	b.n	800eb8c <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	f001 f870 	bl	800fadc <SPI_GetPacketSize>
 800e9fc:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	4a64      	ldr	r2, [pc, #400]	; (800eb94 <HAL_SPI_Init+0x1e4>)
 800ea04:	4293      	cmp	r3, r2
 800ea06:	d00c      	beq.n	800ea22 <HAL_SPI_Init+0x72>
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	4a62      	ldr	r2, [pc, #392]	; (800eb98 <HAL_SPI_Init+0x1e8>)
 800ea0e:	4293      	cmp	r3, r2
 800ea10:	d007      	beq.n	800ea22 <HAL_SPI_Init+0x72>
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	4a61      	ldr	r2, [pc, #388]	; (800eb9c <HAL_SPI_Init+0x1ec>)
 800ea18:	4293      	cmp	r3, r2
 800ea1a:	d002      	beq.n	800ea22 <HAL_SPI_Init+0x72>
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	2b08      	cmp	r3, #8
 800ea20:	d811      	bhi.n	800ea46 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ea26:	4a5b      	ldr	r2, [pc, #364]	; (800eb94 <HAL_SPI_Init+0x1e4>)
 800ea28:	4293      	cmp	r3, r2
 800ea2a:	d009      	beq.n	800ea40 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	4a59      	ldr	r2, [pc, #356]	; (800eb98 <HAL_SPI_Init+0x1e8>)
 800ea32:	4293      	cmp	r3, r2
 800ea34:	d004      	beq.n	800ea40 <HAL_SPI_Init+0x90>
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	4a58      	ldr	r2, [pc, #352]	; (800eb9c <HAL_SPI_Init+0x1ec>)
 800ea3c:	4293      	cmp	r3, r2
 800ea3e:	d104      	bne.n	800ea4a <HAL_SPI_Init+0x9a>
 800ea40:	68bb      	ldr	r3, [r7, #8]
 800ea42:	2b10      	cmp	r3, #16
 800ea44:	d901      	bls.n	800ea4a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800ea46:	2301      	movs	r3, #1
 800ea48:	e0a0      	b.n	800eb8c <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ea50:	b2db      	uxtb	r3, r3
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d106      	bne.n	800ea64 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	2200      	movs	r2, #0
 800ea5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ea5e:	6878      	ldr	r0, [r7, #4]
 800ea60:	f7f5 fa92 	bl	8003f88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2202      	movs	r2, #2
 800ea68:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	681a      	ldr	r2, [r3, #0]
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	f022 0201 	bic.w	r2, r2, #1
 800ea7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	699b      	ldr	r3, [r3, #24]
 800ea80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ea84:	d110      	bne.n	800eaa8 <HAL_SPI_Init+0xf8>
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	685b      	ldr	r3, [r3, #4]
 800ea8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ea8e:	d10b      	bne.n	800eaa8 <HAL_SPI_Init+0xf8>
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d107      	bne.n	800eaa8 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	681a      	ldr	r2, [r3, #0]
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800eaa6:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	69da      	ldr	r2, [r3, #28]
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eab0:	431a      	orrs	r2, r3
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	431a      	orrs	r2, r3
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eaba:	ea42 0103 	orr.w	r1, r2, r3
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	68da      	ldr	r2, [r3, #12]
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	430a      	orrs	r2, r1
 800eac8:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ead2:	431a      	orrs	r2, r3
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ead8:	431a      	orrs	r2, r3
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	699b      	ldr	r3, [r3, #24]
 800eade:	431a      	orrs	r2, r3
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	691b      	ldr	r3, [r3, #16]
 800eae4:	431a      	orrs	r2, r3
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	695b      	ldr	r3, [r3, #20]
 800eaea:	431a      	orrs	r2, r3
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	6a1b      	ldr	r3, [r3, #32]
 800eaf0:	431a      	orrs	r2, r3
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	685b      	ldr	r3, [r3, #4]
 800eaf6:	431a      	orrs	r2, r3
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eafc:	431a      	orrs	r2, r3
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	689b      	ldr	r3, [r3, #8]
 800eb02:	431a      	orrs	r2, r3
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eb08:	ea42 0103 	orr.w	r1, r2, r3
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	430a      	orrs	r2, r1
 800eb16:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	685b      	ldr	r3, [r3, #4]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d113      	bne.n	800eb48 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	689b      	ldr	r3, [r3, #8]
 800eb26:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eb32:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	689b      	ldr	r3, [r3, #8]
 800eb3a:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800eb46:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	f022 0201 	bic.w	r2, r2, #1
 800eb56:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	685b      	ldr	r3, [r3, #4]
 800eb5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d00a      	beq.n	800eb7a <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	68db      	ldr	r3, [r3, #12]
 800eb6a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	430a      	orrs	r2, r1
 800eb78:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	2201      	movs	r2, #1
 800eb86:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800eb8a:	2300      	movs	r3, #0
}
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	3710      	adds	r7, #16
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bd80      	pop	{r7, pc}
 800eb94:	40013000 	.word	0x40013000
 800eb98:	40003800 	.word	0x40003800
 800eb9c:	40003c00 	.word	0x40003c00

0800eba0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b08a      	sub	sp, #40	; 0x28
 800eba4:	af02      	add	r7, sp, #8
 800eba6:	60f8      	str	r0, [r7, #12]
 800eba8:	60b9      	str	r1, [r7, #8]
 800ebaa:	603b      	str	r3, [r7, #0]
 800ebac:	4613      	mov	r3, r2
 800ebae:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	3320      	adds	r3, #32
 800ebb6:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ebb8:	2300      	movs	r3, #0
 800ebba:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ebc2:	2b01      	cmp	r3, #1
 800ebc4:	d101      	bne.n	800ebca <HAL_SPI_Transmit+0x2a>
 800ebc6:	2302      	movs	r3, #2
 800ebc8:	e1d7      	b.n	800ef7a <HAL_SPI_Transmit+0x3da>
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	2201      	movs	r2, #1
 800ebce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ebd2:	f7f5 fd07 	bl	80045e4 <HAL_GetTick>
 800ebd6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ebde:	b2db      	uxtb	r3, r3
 800ebe0:	2b01      	cmp	r3, #1
 800ebe2:	d007      	beq.n	800ebf4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800ebe4:	2302      	movs	r3, #2
 800ebe6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	2200      	movs	r2, #0
 800ebec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ebf0:	7efb      	ldrb	r3, [r7, #27]
 800ebf2:	e1c2      	b.n	800ef7a <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ebf4:	68bb      	ldr	r3, [r7, #8]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d002      	beq.n	800ec00 <HAL_SPI_Transmit+0x60>
 800ebfa:	88fb      	ldrh	r3, [r7, #6]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d107      	bne.n	800ec10 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800ec00:	2301      	movs	r3, #1
 800ec02:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	2200      	movs	r2, #0
 800ec08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ec0c:	7efb      	ldrb	r3, [r7, #27]
 800ec0e:	e1b4      	b.n	800ef7a <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	2203      	movs	r2, #3
 800ec14:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	68ba      	ldr	r2, [r7, #8]
 800ec24:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	88fa      	ldrh	r2, [r7, #6]
 800ec2a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	88fa      	ldrh	r2, [r7, #6]
 800ec32:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	2200      	movs	r2, #0
 800ec3a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	2200      	movs	r2, #0
 800ec40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	2200      	movs	r2, #0
 800ec48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	2200      	movs	r2, #0
 800ec50:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	2200      	movs	r2, #0
 800ec56:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	689b      	ldr	r3, [r3, #8]
 800ec5c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ec60:	d107      	bne.n	800ec72 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	681a      	ldr	r2, [r3, #0]
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ec70:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	685a      	ldr	r2, [r3, #4]
 800ec78:	4b96      	ldr	r3, [pc, #600]	; (800eed4 <HAL_SPI_Transmit+0x334>)
 800ec7a:	4013      	ands	r3, r2
 800ec7c:	88f9      	ldrh	r1, [r7, #6]
 800ec7e:	68fa      	ldr	r2, [r7, #12]
 800ec80:	6812      	ldr	r2, [r2, #0]
 800ec82:	430b      	orrs	r3, r1
 800ec84:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	681a      	ldr	r2, [r3, #0]
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	f042 0201 	orr.w	r2, r2, #1
 800ec94:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	685b      	ldr	r3, [r3, #4]
 800ec9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ec9e:	d107      	bne.n	800ecb0 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	681a      	ldr	r2, [r3, #0]
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ecae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	68db      	ldr	r3, [r3, #12]
 800ecb4:	2b0f      	cmp	r3, #15
 800ecb6:	d947      	bls.n	800ed48 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ecb8:	e03f      	b.n	800ed3a <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	695b      	ldr	r3, [r3, #20]
 800ecc0:	f003 0302 	and.w	r3, r3, #2
 800ecc4:	2b02      	cmp	r3, #2
 800ecc6:	d114      	bne.n	800ecf2 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	6812      	ldr	r2, [r2, #0]
 800ecd2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ecd8:	1d1a      	adds	r2, r3, #4
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ece4:	b29b      	uxth	r3, r3
 800ece6:	3b01      	subs	r3, #1
 800ece8:	b29a      	uxth	r2, r3
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ecf0:	e023      	b.n	800ed3a <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ecf2:	f7f5 fc77 	bl	80045e4 <HAL_GetTick>
 800ecf6:	4602      	mov	r2, r0
 800ecf8:	697b      	ldr	r3, [r7, #20]
 800ecfa:	1ad3      	subs	r3, r2, r3
 800ecfc:	683a      	ldr	r2, [r7, #0]
 800ecfe:	429a      	cmp	r2, r3
 800ed00:	d803      	bhi.n	800ed0a <HAL_SPI_Transmit+0x16a>
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed08:	d102      	bne.n	800ed10 <HAL_SPI_Transmit+0x170>
 800ed0a:	683b      	ldr	r3, [r7, #0]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d114      	bne.n	800ed3a <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ed10:	68f8      	ldr	r0, [r7, #12]
 800ed12:	f000 fe15 	bl	800f940 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	2200      	movs	r2, #0
 800ed1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	2201      	movs	r2, #1
 800ed32:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800ed36:	2301      	movs	r3, #1
 800ed38:	e11f      	b.n	800ef7a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed40:	b29b      	uxth	r3, r3
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d1b9      	bne.n	800ecba <HAL_SPI_Transmit+0x11a>
 800ed46:	e0f2      	b.n	800ef2e <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	68db      	ldr	r3, [r3, #12]
 800ed4c:	2b07      	cmp	r3, #7
 800ed4e:	f240 80e7 	bls.w	800ef20 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ed52:	e05d      	b.n	800ee10 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	695b      	ldr	r3, [r3, #20]
 800ed5a:	f003 0302 	and.w	r3, r3, #2
 800ed5e:	2b02      	cmp	r3, #2
 800ed60:	d132      	bne.n	800edc8 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed68:	b29b      	uxth	r3, r3
 800ed6a:	2b01      	cmp	r3, #1
 800ed6c:	d918      	bls.n	800eda0 <HAL_SPI_Transmit+0x200>
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d014      	beq.n	800eda0 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	6812      	ldr	r2, [r2, #0]
 800ed80:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed86:	1d1a      	adds	r2, r3, #4
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed92:	b29b      	uxth	r3, r3
 800ed94:	3b02      	subs	r3, #2
 800ed96:	b29a      	uxth	r2, r3
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ed9e:	e037      	b.n	800ee10 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eda4:	881a      	ldrh	r2, [r3, #0]
 800eda6:	69fb      	ldr	r3, [r7, #28]
 800eda8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800edae:	1c9a      	adds	r2, r3, #2
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800edba:	b29b      	uxth	r3, r3
 800edbc:	3b01      	subs	r3, #1
 800edbe:	b29a      	uxth	r2, r3
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800edc6:	e023      	b.n	800ee10 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800edc8:	f7f5 fc0c 	bl	80045e4 <HAL_GetTick>
 800edcc:	4602      	mov	r2, r0
 800edce:	697b      	ldr	r3, [r7, #20]
 800edd0:	1ad3      	subs	r3, r2, r3
 800edd2:	683a      	ldr	r2, [r7, #0]
 800edd4:	429a      	cmp	r2, r3
 800edd6:	d803      	bhi.n	800ede0 <HAL_SPI_Transmit+0x240>
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edde:	d102      	bne.n	800ede6 <HAL_SPI_Transmit+0x246>
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d114      	bne.n	800ee10 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ede6:	68f8      	ldr	r0, [r7, #12]
 800ede8:	f000 fdaa 	bl	800f940 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	2200      	movs	r2, #0
 800edf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800edfa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	2201      	movs	r2, #1
 800ee08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800ee0c:	2301      	movs	r3, #1
 800ee0e:	e0b4      	b.n	800ef7a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee16:	b29b      	uxth	r3, r3
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d19b      	bne.n	800ed54 <HAL_SPI_Transmit+0x1b4>
 800ee1c:	e087      	b.n	800ef2e <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	695b      	ldr	r3, [r3, #20]
 800ee24:	f003 0302 	and.w	r3, r3, #2
 800ee28:	2b02      	cmp	r3, #2
 800ee2a:	d155      	bne.n	800eed8 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee32:	b29b      	uxth	r3, r3
 800ee34:	2b03      	cmp	r3, #3
 800ee36:	d918      	bls.n	800ee6a <HAL_SPI_Transmit+0x2ca>
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee3c:	2b40      	cmp	r3, #64	; 0x40
 800ee3e:	d914      	bls.n	800ee6a <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	6812      	ldr	r2, [r2, #0]
 800ee4a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee50:	1d1a      	adds	r2, r3, #4
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee5c:	b29b      	uxth	r3, r3
 800ee5e:	3b04      	subs	r3, #4
 800ee60:	b29a      	uxth	r2, r3
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ee68:	e05a      	b.n	800ef20 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee70:	b29b      	uxth	r3, r3
 800ee72:	2b01      	cmp	r3, #1
 800ee74:	d917      	bls.n	800eea6 <HAL_SPI_Transmit+0x306>
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d013      	beq.n	800eea6 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee82:	881a      	ldrh	r2, [r3, #0]
 800ee84:	69fb      	ldr	r3, [r7, #28]
 800ee86:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee8c:	1c9a      	adds	r2, r3, #2
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee98:	b29b      	uxth	r3, r3
 800ee9a:	3b02      	subs	r3, #2
 800ee9c:	b29a      	uxth	r2, r3
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800eea4:	e03c      	b.n	800ef20 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	3320      	adds	r3, #32
 800eeb0:	7812      	ldrb	r2, [r2, #0]
 800eeb2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eeb8:	1c5a      	adds	r2, r3, #1
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eec4:	b29b      	uxth	r3, r3
 800eec6:	3b01      	subs	r3, #1
 800eec8:	b29a      	uxth	r2, r3
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800eed0:	e026      	b.n	800ef20 <HAL_SPI_Transmit+0x380>
 800eed2:	bf00      	nop
 800eed4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eed8:	f7f5 fb84 	bl	80045e4 <HAL_GetTick>
 800eedc:	4602      	mov	r2, r0
 800eede:	697b      	ldr	r3, [r7, #20]
 800eee0:	1ad3      	subs	r3, r2, r3
 800eee2:	683a      	ldr	r2, [r7, #0]
 800eee4:	429a      	cmp	r2, r3
 800eee6:	d803      	bhi.n	800eef0 <HAL_SPI_Transmit+0x350>
 800eee8:	683b      	ldr	r3, [r7, #0]
 800eeea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eeee:	d102      	bne.n	800eef6 <HAL_SPI_Transmit+0x356>
 800eef0:	683b      	ldr	r3, [r7, #0]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d114      	bne.n	800ef20 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800eef6:	68f8      	ldr	r0, [r7, #12]
 800eef8:	f000 fd22 	bl	800f940 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	2200      	movs	r2, #0
 800ef00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	2201      	movs	r2, #1
 800ef18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800ef1c:	2301      	movs	r3, #1
 800ef1e:	e02c      	b.n	800ef7a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ef26:	b29b      	uxth	r3, r3
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	f47f af78 	bne.w	800ee1e <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800ef2e:	683b      	ldr	r3, [r7, #0]
 800ef30:	9300      	str	r3, [sp, #0]
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	2200      	movs	r2, #0
 800ef36:	2108      	movs	r1, #8
 800ef38:	68f8      	ldr	r0, [r7, #12]
 800ef3a:	f000 fda1 	bl	800fa80 <SPI_WaitOnFlagUntilTimeout>
 800ef3e:	4603      	mov	r3, r0
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d007      	beq.n	800ef54 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef4a:	f043 0220 	orr.w	r2, r3, #32
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ef54:	68f8      	ldr	r0, [r7, #12]
 800ef56:	f000 fcf3 	bl	800f940 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	2201      	movs	r2, #1
 800ef66:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d001      	beq.n	800ef78 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800ef74:	2301      	movs	r3, #1
 800ef76:	e000      	b.n	800ef7a <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800ef78:	7efb      	ldrb	r3, [r7, #27]
}
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	3720      	adds	r7, #32
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}
 800ef82:	bf00      	nop

0800ef84 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b08a      	sub	sp, #40	; 0x28
 800ef88:	af02      	add	r7, sp, #8
 800ef8a:	60f8      	str	r0, [r7, #12]
 800ef8c:	60b9      	str	r1, [r7, #8]
 800ef8e:	603b      	str	r3, [r7, #0]
 800ef90:	4613      	mov	r3, r2
 800ef92:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ef94:	2300      	movs	r3, #0
 800ef96:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	3330      	adds	r3, #48	; 0x30
 800ef9e:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	685b      	ldr	r3, [r3, #4]
 800efa4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800efa8:	d112      	bne.n	800efd0 <HAL_SPI_Receive+0x4c>
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	689b      	ldr	r3, [r3, #8]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d10e      	bne.n	800efd0 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	2204      	movs	r2, #4
 800efb6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800efba:	88fa      	ldrh	r2, [r7, #6]
 800efbc:	683b      	ldr	r3, [r7, #0]
 800efbe:	9300      	str	r3, [sp, #0]
 800efc0:	4613      	mov	r3, r2
 800efc2:	68ba      	ldr	r2, [r7, #8]
 800efc4:	68b9      	ldr	r1, [r7, #8]
 800efc6:	68f8      	ldr	r0, [r7, #12]
 800efc8:	f000 f9ce 	bl	800f368 <HAL_SPI_TransmitReceive>
 800efcc:	4603      	mov	r3, r0
 800efce:	e1c7      	b.n	800f360 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800efd6:	2b01      	cmp	r3, #1
 800efd8:	d101      	bne.n	800efde <HAL_SPI_Receive+0x5a>
 800efda:	2302      	movs	r3, #2
 800efdc:	e1c0      	b.n	800f360 <HAL_SPI_Receive+0x3dc>
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	2201      	movs	r2, #1
 800efe2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800efe6:	f7f5 fafd 	bl	80045e4 <HAL_GetTick>
 800efea:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800eff2:	b2db      	uxtb	r3, r3
 800eff4:	2b01      	cmp	r3, #1
 800eff6:	d007      	beq.n	800f008 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800eff8:	2302      	movs	r3, #2
 800effa:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	2200      	movs	r2, #0
 800f000:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f004:	7ffb      	ldrb	r3, [r7, #31]
 800f006:	e1ab      	b.n	800f360 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f008:	68bb      	ldr	r3, [r7, #8]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d002      	beq.n	800f014 <HAL_SPI_Receive+0x90>
 800f00e:	88fb      	ldrh	r3, [r7, #6]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d107      	bne.n	800f024 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800f014:	2301      	movs	r3, #1
 800f016:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	2200      	movs	r2, #0
 800f01c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f020:	7ffb      	ldrb	r3, [r7, #31]
 800f022:	e19d      	b.n	800f360 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	2204      	movs	r2, #4
 800f028:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	2200      	movs	r2, #0
 800f030:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	68ba      	ldr	r2, [r7, #8]
 800f038:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	88fa      	ldrh	r2, [r7, #6]
 800f03e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	88fa      	ldrh	r2, [r7, #6]
 800f046:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	2200      	movs	r2, #0
 800f04e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	2200      	movs	r2, #0
 800f054:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	2200      	movs	r2, #0
 800f05c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	2200      	movs	r2, #0
 800f064:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	2200      	movs	r2, #0
 800f06a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	689b      	ldr	r3, [r3, #8]
 800f070:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f074:	d107      	bne.n	800f086 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	681a      	ldr	r2, [r3, #0]
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f084:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	685a      	ldr	r2, [r3, #4]
 800f08c:	4b94      	ldr	r3, [pc, #592]	; (800f2e0 <HAL_SPI_Receive+0x35c>)
 800f08e:	4013      	ands	r3, r2
 800f090:	88f9      	ldrh	r1, [r7, #6]
 800f092:	68fa      	ldr	r2, [r7, #12]
 800f094:	6812      	ldr	r2, [r2, #0]
 800f096:	430b      	orrs	r3, r1
 800f098:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	681a      	ldr	r2, [r3, #0]
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	f042 0201 	orr.w	r2, r2, #1
 800f0a8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	685b      	ldr	r3, [r3, #4]
 800f0ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f0b2:	d107      	bne.n	800f0c4 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	681a      	ldr	r2, [r3, #0]
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f0c2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	68db      	ldr	r3, [r3, #12]
 800f0c8:	2b0f      	cmp	r3, #15
 800f0ca:	d948      	bls.n	800f15e <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f0cc:	e040      	b.n	800f150 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	695a      	ldr	r2, [r3, #20]
 800f0d4:	f248 0308 	movw	r3, #32776	; 0x8008
 800f0d8:	4013      	ands	r3, r2
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d014      	beq.n	800f108 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	681a      	ldr	r2, [r3, #0]
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0e6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f0e8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0ee:	1d1a      	adds	r2, r3, #4
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f0fa:	b29b      	uxth	r3, r3
 800f0fc:	3b01      	subs	r3, #1
 800f0fe:	b29a      	uxth	r2, r3
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f106:	e023      	b.n	800f150 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f108:	f7f5 fa6c 	bl	80045e4 <HAL_GetTick>
 800f10c:	4602      	mov	r2, r0
 800f10e:	697b      	ldr	r3, [r7, #20]
 800f110:	1ad3      	subs	r3, r2, r3
 800f112:	683a      	ldr	r2, [r7, #0]
 800f114:	429a      	cmp	r2, r3
 800f116:	d803      	bhi.n	800f120 <HAL_SPI_Receive+0x19c>
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f11e:	d102      	bne.n	800f126 <HAL_SPI_Receive+0x1a2>
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d114      	bne.n	800f150 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f126:	68f8      	ldr	r0, [r7, #12]
 800f128:	f000 fc0a 	bl	800f940 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	2200      	movs	r2, #0
 800f130:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f13a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	2201      	movs	r2, #1
 800f148:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800f14c:	2301      	movs	r3, #1
 800f14e:	e107      	b.n	800f360 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f156:	b29b      	uxth	r3, r3
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d1b8      	bne.n	800f0ce <HAL_SPI_Receive+0x14a>
 800f15c:	e0ed      	b.n	800f33a <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	68db      	ldr	r3, [r3, #12]
 800f162:	2b07      	cmp	r3, #7
 800f164:	f240 80e2 	bls.w	800f32c <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f168:	e05b      	b.n	800f222 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	695b      	ldr	r3, [r3, #20]
 800f170:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f174:	2b00      	cmp	r3, #0
 800f176:	d030      	beq.n	800f1da <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	695b      	ldr	r3, [r3, #20]
 800f17e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f182:	2b00      	cmp	r3, #0
 800f184:	d014      	beq.n	800f1b0 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	681a      	ldr	r2, [r3, #0]
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f18e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f190:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f196:	1d1a      	adds	r2, r3, #4
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f1a2:	b29b      	uxth	r3, r3
 800f1a4:	3b02      	subs	r3, #2
 800f1a6:	b29a      	uxth	r2, r3
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f1ae:	e038      	b.n	800f222 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f1b4:	69ba      	ldr	r2, [r7, #24]
 800f1b6:	8812      	ldrh	r2, [r2, #0]
 800f1b8:	b292      	uxth	r2, r2
 800f1ba:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f1c0:	1c9a      	adds	r2, r3, #2
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f1cc:	b29b      	uxth	r3, r3
 800f1ce:	3b01      	subs	r3, #1
 800f1d0:	b29a      	uxth	r2, r3
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f1d8:	e023      	b.n	800f222 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f1da:	f7f5 fa03 	bl	80045e4 <HAL_GetTick>
 800f1de:	4602      	mov	r2, r0
 800f1e0:	697b      	ldr	r3, [r7, #20]
 800f1e2:	1ad3      	subs	r3, r2, r3
 800f1e4:	683a      	ldr	r2, [r7, #0]
 800f1e6:	429a      	cmp	r2, r3
 800f1e8:	d803      	bhi.n	800f1f2 <HAL_SPI_Receive+0x26e>
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1f0:	d102      	bne.n	800f1f8 <HAL_SPI_Receive+0x274>
 800f1f2:	683b      	ldr	r3, [r7, #0]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d114      	bne.n	800f222 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f1f8:	68f8      	ldr	r0, [r7, #12]
 800f1fa:	f000 fba1 	bl	800f940 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	2200      	movs	r2, #0
 800f202:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f20c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	2201      	movs	r2, #1
 800f21a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800f21e:	2301      	movs	r3, #1
 800f220:	e09e      	b.n	800f360 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f228:	b29b      	uxth	r3, r3
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d19d      	bne.n	800f16a <HAL_SPI_Receive+0x1e6>
 800f22e:	e084      	b.n	800f33a <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	695b      	ldr	r3, [r3, #20]
 800f236:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d052      	beq.n	800f2e4 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	695b      	ldr	r3, [r3, #20]
 800f244:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d014      	beq.n	800f276 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	681a      	ldr	r2, [r3, #0]
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f254:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f256:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f25c:	1d1a      	adds	r2, r3, #4
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f268:	b29b      	uxth	r3, r3
 800f26a:	3b04      	subs	r3, #4
 800f26c:	b29a      	uxth	r2, r3
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f274:	e05a      	b.n	800f32c <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	695b      	ldr	r3, [r3, #20]
 800f27c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800f280:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f284:	d914      	bls.n	800f2b0 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f28a:	69ba      	ldr	r2, [r7, #24]
 800f28c:	8812      	ldrh	r2, [r2, #0]
 800f28e:	b292      	uxth	r2, r2
 800f290:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f296:	1c9a      	adds	r2, r3, #2
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f2a2:	b29b      	uxth	r3, r3
 800f2a4:	3b02      	subs	r3, #2
 800f2a6:	b29a      	uxth	r2, r3
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f2ae:	e03d      	b.n	800f32c <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f2bc:	7812      	ldrb	r2, [r2, #0]
 800f2be:	b2d2      	uxtb	r2, r2
 800f2c0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f2c6:	1c5a      	adds	r2, r3, #1
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f2d2:	b29b      	uxth	r3, r3
 800f2d4:	3b01      	subs	r3, #1
 800f2d6:	b29a      	uxth	r2, r3
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f2de:	e025      	b.n	800f32c <HAL_SPI_Receive+0x3a8>
 800f2e0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f2e4:	f7f5 f97e 	bl	80045e4 <HAL_GetTick>
 800f2e8:	4602      	mov	r2, r0
 800f2ea:	697b      	ldr	r3, [r7, #20]
 800f2ec:	1ad3      	subs	r3, r2, r3
 800f2ee:	683a      	ldr	r2, [r7, #0]
 800f2f0:	429a      	cmp	r2, r3
 800f2f2:	d803      	bhi.n	800f2fc <HAL_SPI_Receive+0x378>
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2fa:	d102      	bne.n	800f302 <HAL_SPI_Receive+0x37e>
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d114      	bne.n	800f32c <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f302:	68f8      	ldr	r0, [r7, #12]
 800f304:	f000 fb1c 	bl	800f940 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	2200      	movs	r2, #0
 800f30c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f316:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	2201      	movs	r2, #1
 800f324:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800f328:	2301      	movs	r3, #1
 800f32a:	e019      	b.n	800f360 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f332:	b29b      	uxth	r3, r3
 800f334:	2b00      	cmp	r3, #0
 800f336:	f47f af7b 	bne.w	800f230 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f33a:	68f8      	ldr	r0, [r7, #12]
 800f33c:	f000 fb00 	bl	800f940 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	2200      	movs	r2, #0
 800f344:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	2201      	movs	r2, #1
 800f34c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f356:	2b00      	cmp	r3, #0
 800f358:	d001      	beq.n	800f35e <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800f35a:	2301      	movs	r3, #1
 800f35c:	e000      	b.n	800f360 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800f35e:	7ffb      	ldrb	r3, [r7, #31]
}
 800f360:	4618      	mov	r0, r3
 800f362:	3720      	adds	r7, #32
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}

0800f368 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b08e      	sub	sp, #56	; 0x38
 800f36c:	af02      	add	r7, sp, #8
 800f36e:	60f8      	str	r0, [r7, #12]
 800f370:	60b9      	str	r1, [r7, #8]
 800f372:	607a      	str	r2, [r7, #4]
 800f374:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f376:	2300      	movs	r3, #0
 800f378:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	3320      	adds	r3, #32
 800f382:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	3330      	adds	r3, #48	; 0x30
 800f38a:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f392:	2b01      	cmp	r3, #1
 800f394:	d101      	bne.n	800f39a <HAL_SPI_TransmitReceive+0x32>
 800f396:	2302      	movs	r3, #2
 800f398:	e2ce      	b.n	800f938 <HAL_SPI_TransmitReceive+0x5d0>
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	2201      	movs	r2, #1
 800f39e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f3a2:	f7f5 f91f 	bl	80045e4 <HAL_GetTick>
 800f3a6:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800f3a8:	887b      	ldrh	r3, [r7, #2]
 800f3aa:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800f3ac:	887b      	ldrh	r3, [r7, #2]
 800f3ae:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f3b6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	685b      	ldr	r3, [r3, #4]
 800f3bc:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f3be:	7efb      	ldrb	r3, [r7, #27]
 800f3c0:	2b01      	cmp	r3, #1
 800f3c2:	d014      	beq.n	800f3ee <HAL_SPI_TransmitReceive+0x86>
 800f3c4:	697b      	ldr	r3, [r7, #20]
 800f3c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f3ca:	d106      	bne.n	800f3da <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	689b      	ldr	r3, [r3, #8]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d102      	bne.n	800f3da <HAL_SPI_TransmitReceive+0x72>
 800f3d4:	7efb      	ldrb	r3, [r7, #27]
 800f3d6:	2b04      	cmp	r3, #4
 800f3d8:	d009      	beq.n	800f3ee <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800f3da:	2302      	movs	r3, #2
 800f3dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f3e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f3ec:	e2a4      	b.n	800f938 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800f3ee:	68bb      	ldr	r3, [r7, #8]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d005      	beq.n	800f400 <HAL_SPI_TransmitReceive+0x98>
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d002      	beq.n	800f400 <HAL_SPI_TransmitReceive+0x98>
 800f3fa:	887b      	ldrh	r3, [r7, #2]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d109      	bne.n	800f414 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800f400:	2301      	movs	r3, #1
 800f402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	2200      	movs	r2, #0
 800f40a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f40e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f412:	e291      	b.n	800f938 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f41a:	b2db      	uxtb	r3, r3
 800f41c:	2b04      	cmp	r3, #4
 800f41e:	d003      	beq.n	800f428 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	2205      	movs	r2, #5
 800f424:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	2200      	movs	r2, #0
 800f42c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	687a      	ldr	r2, [r7, #4]
 800f434:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	887a      	ldrh	r2, [r7, #2]
 800f43a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	887a      	ldrh	r2, [r7, #2]
 800f442:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	68ba      	ldr	r2, [r7, #8]
 800f44a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	887a      	ldrh	r2, [r7, #2]
 800f450:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	887a      	ldrh	r2, [r7, #2]
 800f458:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	2200      	movs	r2, #0
 800f460:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	2200      	movs	r2, #0
 800f466:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	685a      	ldr	r2, [r3, #4]
 800f46e:	4b9f      	ldr	r3, [pc, #636]	; (800f6ec <HAL_SPI_TransmitReceive+0x384>)
 800f470:	4013      	ands	r3, r2
 800f472:	8879      	ldrh	r1, [r7, #2]
 800f474:	68fa      	ldr	r2, [r7, #12]
 800f476:	6812      	ldr	r2, [r2, #0]
 800f478:	430b      	orrs	r3, r1
 800f47a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	681a      	ldr	r2, [r3, #0]
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	f042 0201 	orr.w	r2, r2, #1
 800f48a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	685b      	ldr	r3, [r3, #4]
 800f490:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f494:	d107      	bne.n	800f4a6 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	681a      	ldr	r2, [r3, #0]
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f4a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	68db      	ldr	r3, [r3, #12]
 800f4aa:	2b0f      	cmp	r3, #15
 800f4ac:	d970      	bls.n	800f590 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f4ae:	e068      	b.n	800f582 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	695b      	ldr	r3, [r3, #20]
 800f4b6:	f003 0302 	and.w	r3, r3, #2
 800f4ba:	2b02      	cmp	r3, #2
 800f4bc:	d11a      	bne.n	800f4f4 <HAL_SPI_TransmitReceive+0x18c>
 800f4be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d017      	beq.n	800f4f4 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	6812      	ldr	r2, [r2, #0]
 800f4ce:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f4d4:	1d1a      	adds	r2, r3, #4
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f4e0:	b29b      	uxth	r3, r3
 800f4e2:	3b01      	subs	r3, #1
 800f4e4:	b29a      	uxth	r2, r3
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f4f2:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	695a      	ldr	r2, [r3, #20]
 800f4fa:	f248 0308 	movw	r3, #32776	; 0x8008
 800f4fe:	4013      	ands	r3, r2
 800f500:	2b00      	cmp	r3, #0
 800f502:	d01a      	beq.n	800f53a <HAL_SPI_TransmitReceive+0x1d2>
 800f504:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f506:	2b00      	cmp	r3, #0
 800f508:	d017      	beq.n	800f53a <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	681a      	ldr	r2, [r3, #0]
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f512:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f514:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f51a:	1d1a      	adds	r2, r3, #4
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f526:	b29b      	uxth	r3, r3
 800f528:	3b01      	subs	r3, #1
 800f52a:	b29a      	uxth	r2, r3
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f538:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f53a:	f7f5 f853 	bl	80045e4 <HAL_GetTick>
 800f53e:	4602      	mov	r2, r0
 800f540:	69fb      	ldr	r3, [r7, #28]
 800f542:	1ad3      	subs	r3, r2, r3
 800f544:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f546:	429a      	cmp	r2, r3
 800f548:	d803      	bhi.n	800f552 <HAL_SPI_TransmitReceive+0x1ea>
 800f54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f54c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f550:	d102      	bne.n	800f558 <HAL_SPI_TransmitReceive+0x1f0>
 800f552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f554:	2b00      	cmp	r3, #0
 800f556:	d114      	bne.n	800f582 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800f558:	68f8      	ldr	r0, [r7, #12]
 800f55a:	f000 f9f1 	bl	800f940 <SPI_CloseTransfer>
      
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	2200      	movs	r2, #0
 800f562:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f56c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	2201      	movs	r2, #1
 800f57a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800f57e:	2301      	movs	r3, #1
 800f580:	e1da      	b.n	800f938 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f582:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f584:	2b00      	cmp	r3, #0
 800f586:	d193      	bne.n	800f4b0 <HAL_SPI_TransmitReceive+0x148>
 800f588:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d190      	bne.n	800f4b0 <HAL_SPI_TransmitReceive+0x148>
 800f58e:	e1ac      	b.n	800f8ea <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	68db      	ldr	r3, [r3, #12]
 800f594:	2b07      	cmp	r3, #7
 800f596:	f240 81a0 	bls.w	800f8da <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f59a:	e0a9      	b.n	800f6f0 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	695b      	ldr	r3, [r3, #20]
 800f5a2:	f003 0302 	and.w	r3, r3, #2
 800f5a6:	2b02      	cmp	r3, #2
 800f5a8:	d139      	bne.n	800f61e <HAL_SPI_TransmitReceive+0x2b6>
 800f5aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d036      	beq.n	800f61e <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f5b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f5b2:	2b01      	cmp	r3, #1
 800f5b4:	d91c      	bls.n	800f5f0 <HAL_SPI_TransmitReceive+0x288>
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d018      	beq.n	800f5f0 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	6812      	ldr	r2, [r2, #0]
 800f5c8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f5ce:	1d1a      	adds	r2, r3, #4
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f5da:	b29b      	uxth	r3, r3
 800f5dc:	3b02      	subs	r3, #2
 800f5de:	b29a      	uxth	r2, r3
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f5ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f5ee:	e016      	b.n	800f61e <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f5f4:	881a      	ldrh	r2, [r3, #0]
 800f5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5f8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f5fe:	1c9a      	adds	r2, r3, #2
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f60a:	b29b      	uxth	r3, r3
 800f60c:	3b01      	subs	r3, #1
 800f60e:	b29a      	uxth	r2, r3
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f61c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	695b      	ldr	r3, [r3, #20]
 800f624:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d03a      	beq.n	800f6a2 <HAL_SPI_TransmitReceive+0x33a>
 800f62c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d037      	beq.n	800f6a2 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	695b      	ldr	r3, [r3, #20]
 800f638:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d018      	beq.n	800f672 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	681a      	ldr	r2, [r3, #0]
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f648:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f64a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f650:	1d1a      	adds	r2, r3, #4
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f65c:	b29b      	uxth	r3, r3
 800f65e:	3b02      	subs	r3, #2
 800f660:	b29a      	uxth	r2, r3
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f66e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f670:	e017      	b.n	800f6a2 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f676:	6a3a      	ldr	r2, [r7, #32]
 800f678:	8812      	ldrh	r2, [r2, #0]
 800f67a:	b292      	uxth	r2, r2
 800f67c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f682:	1c9a      	adds	r2, r3, #2
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f68e:	b29b      	uxth	r3, r3
 800f690:	3b01      	subs	r3, #1
 800f692:	b29a      	uxth	r2, r3
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f6a0:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f6a2:	f7f4 ff9f 	bl	80045e4 <HAL_GetTick>
 800f6a6:	4602      	mov	r2, r0
 800f6a8:	69fb      	ldr	r3, [r7, #28]
 800f6aa:	1ad3      	subs	r3, r2, r3
 800f6ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f6ae:	429a      	cmp	r2, r3
 800f6b0:	d803      	bhi.n	800f6ba <HAL_SPI_TransmitReceive+0x352>
 800f6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6b8:	d102      	bne.n	800f6c0 <HAL_SPI_TransmitReceive+0x358>
 800f6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d117      	bne.n	800f6f0 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800f6c0:	68f8      	ldr	r0, [r7, #12]
 800f6c2:	f000 f93d 	bl	800f940 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f6d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	2201      	movs	r2, #1
 800f6e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800f6e6:	2301      	movs	r3, #1
 800f6e8:	e126      	b.n	800f938 <HAL_SPI_TransmitReceive+0x5d0>
 800f6ea:	bf00      	nop
 800f6ec:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f6f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	f47f af52 	bne.w	800f59c <HAL_SPI_TransmitReceive+0x234>
 800f6f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	f47f af4e 	bne.w	800f59c <HAL_SPI_TransmitReceive+0x234>
 800f700:	e0f3      	b.n	800f8ea <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	695b      	ldr	r3, [r3, #20]
 800f708:	f003 0302 	and.w	r3, r3, #2
 800f70c:	2b02      	cmp	r3, #2
 800f70e:	d15a      	bne.n	800f7c6 <HAL_SPI_TransmitReceive+0x45e>
 800f710:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f712:	2b00      	cmp	r3, #0
 800f714:	d057      	beq.n	800f7c6 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800f716:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f718:	2b03      	cmp	r3, #3
 800f71a:	d91c      	bls.n	800f756 <HAL_SPI_TransmitReceive+0x3ee>
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f720:	2b40      	cmp	r3, #64	; 0x40
 800f722:	d918      	bls.n	800f756 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	6812      	ldr	r2, [r2, #0]
 800f72e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f734:	1d1a      	adds	r2, r3, #4
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f740:	b29b      	uxth	r3, r3
 800f742:	3b04      	subs	r3, #4
 800f744:	b29a      	uxth	r2, r3
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f752:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f754:	e037      	b.n	800f7c6 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f756:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f758:	2b01      	cmp	r3, #1
 800f75a:	d91b      	bls.n	800f794 <HAL_SPI_TransmitReceive+0x42c>
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f760:	2b00      	cmp	r3, #0
 800f762:	d017      	beq.n	800f794 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f768:	881a      	ldrh	r2, [r3, #0]
 800f76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f76c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f772:	1c9a      	adds	r2, r3, #2
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f77e:	b29b      	uxth	r3, r3
 800f780:	3b02      	subs	r3, #2
 800f782:	b29a      	uxth	r2, r3
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f790:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f792:	e018      	b.n	800f7c6 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	3320      	adds	r3, #32
 800f79e:	7812      	ldrb	r2, [r2, #0]
 800f7a0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f7a6:	1c5a      	adds	r2, r3, #1
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f7b2:	b29b      	uxth	r3, r3
 800f7b4:	3b01      	subs	r3, #1
 800f7b6:	b29a      	uxth	r2, r3
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f7c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	695b      	ldr	r3, [r3, #20]
 800f7cc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d05e      	beq.n	800f892 <HAL_SPI_TransmitReceive+0x52a>
 800f7d4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d05b      	beq.n	800f892 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	695b      	ldr	r3, [r3, #20]
 800f7e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d018      	beq.n	800f81a <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	681a      	ldr	r2, [r3, #0]
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f7f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f7f2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f7f8:	1d1a      	adds	r2, r3, #4
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f804:	b29b      	uxth	r3, r3
 800f806:	3b04      	subs	r3, #4
 800f808:	b29a      	uxth	r2, r3
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f816:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f818:	e03b      	b.n	800f892 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	695b      	ldr	r3, [r3, #20]
 800f820:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800f824:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f828:	d918      	bls.n	800f85c <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f82e:	6a3a      	ldr	r2, [r7, #32]
 800f830:	8812      	ldrh	r2, [r2, #0]
 800f832:	b292      	uxth	r2, r2
 800f834:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f83a:	1c9a      	adds	r2, r3, #2
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f846:	b29b      	uxth	r3, r3
 800f848:	3b02      	subs	r3, #2
 800f84a:	b29a      	uxth	r2, r3
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f858:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f85a:	e01a      	b.n	800f892 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f868:	7812      	ldrb	r2, [r2, #0]
 800f86a:	b2d2      	uxtb	r2, r2
 800f86c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f872:	1c5a      	adds	r2, r3, #1
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f87e:	b29b      	uxth	r3, r3
 800f880:	3b01      	subs	r3, #1
 800f882:	b29a      	uxth	r2, r3
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f890:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f892:	f7f4 fea7 	bl	80045e4 <HAL_GetTick>
 800f896:	4602      	mov	r2, r0
 800f898:	69fb      	ldr	r3, [r7, #28]
 800f89a:	1ad3      	subs	r3, r2, r3
 800f89c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f89e:	429a      	cmp	r2, r3
 800f8a0:	d803      	bhi.n	800f8aa <HAL_SPI_TransmitReceive+0x542>
 800f8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8a8:	d102      	bne.n	800f8b0 <HAL_SPI_TransmitReceive+0x548>
 800f8aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d114      	bne.n	800f8da <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800f8b0:	68f8      	ldr	r0, [r7, #12]
 800f8b2:	f000 f845 	bl	800f940 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f8c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	2201      	movs	r2, #1
 800f8d2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800f8d6:	2301      	movs	r3, #1
 800f8d8:	e02e      	b.n	800f938 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f8da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	f47f af10 	bne.w	800f702 <HAL_SPI_TransmitReceive+0x39a>
 800f8e2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	f47f af0c 	bne.w	800f702 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800f8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ec:	9300      	str	r3, [sp, #0]
 800f8ee:	69fb      	ldr	r3, [r7, #28]
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	2108      	movs	r1, #8
 800f8f4:	68f8      	ldr	r0, [r7, #12]
 800f8f6:	f000 f8c3 	bl	800fa80 <SPI_WaitOnFlagUntilTimeout>
 800f8fa:	4603      	mov	r3, r0
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d007      	beq.n	800f910 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f906:	f043 0220 	orr.w	r2, r3, #32
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f910:	68f8      	ldr	r0, [r7, #12]
 800f912:	f000 f815 	bl	800f940 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	2200      	movs	r2, #0
 800f91a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	2201      	movs	r2, #1
 800f922:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d001      	beq.n	800f934 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800f930:	2301      	movs	r3, #1
 800f932:	e001      	b.n	800f938 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800f934:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800f938:	4618      	mov	r0, r3
 800f93a:	3730      	adds	r7, #48	; 0x30
 800f93c:	46bd      	mov	sp, r7
 800f93e:	bd80      	pop	{r7, pc}

0800f940 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f940:	b480      	push	{r7}
 800f942:	b085      	sub	sp, #20
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	695b      	ldr	r3, [r3, #20]
 800f94e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	699a      	ldr	r2, [r3, #24]
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	f042 0208 	orr.w	r2, r2, #8
 800f95e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	699a      	ldr	r2, [r3, #24]
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	f042 0210 	orr.w	r2, r2, #16
 800f96e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	681a      	ldr	r2, [r3, #0]
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	f022 0201 	bic.w	r2, r2, #1
 800f97e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	6919      	ldr	r1, [r3, #16]
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	681a      	ldr	r2, [r3, #0]
 800f98a:	4b3c      	ldr	r3, [pc, #240]	; (800fa7c <SPI_CloseTransfer+0x13c>)
 800f98c:	400b      	ands	r3, r1
 800f98e:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	689a      	ldr	r2, [r3, #8]
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f99e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f9a6:	b2db      	uxtb	r3, r3
 800f9a8:	2b04      	cmp	r3, #4
 800f9aa:	d014      	beq.n	800f9d6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	f003 0320 	and.w	r3, r3, #32
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d00f      	beq.n	800f9d6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f9bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	699a      	ldr	r2, [r3, #24]
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	f042 0220 	orr.w	r2, r2, #32
 800f9d4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f9dc:	b2db      	uxtb	r3, r3
 800f9de:	2b03      	cmp	r3, #3
 800f9e0:	d014      	beq.n	800fa0c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d00f      	beq.n	800fa0c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f9f2:	f043 0204 	orr.w	r2, r3, #4
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	699a      	ldr	r2, [r3, #24]
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fa0a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d00f      	beq.n	800fa36 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa1c:	f043 0201 	orr.w	r2, r3, #1
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	699a      	ldr	r2, [r3, #24]
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fa34:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d00f      	beq.n	800fa60 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa46:	f043 0208 	orr.w	r2, r3, #8
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	699a      	ldr	r2, [r3, #24]
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fa5e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	2200      	movs	r2, #0
 800fa64:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800fa70:	bf00      	nop
 800fa72:	3714      	adds	r7, #20
 800fa74:	46bd      	mov	sp, r7
 800fa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7a:	4770      	bx	lr
 800fa7c:	fffffc90 	.word	0xfffffc90

0800fa80 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b084      	sub	sp, #16
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	60f8      	str	r0, [r7, #12]
 800fa88:	60b9      	str	r1, [r7, #8]
 800fa8a:	603b      	str	r3, [r7, #0]
 800fa8c:	4613      	mov	r3, r2
 800fa8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800fa90:	e010      	b.n	800fab4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fa92:	f7f4 fda7 	bl	80045e4 <HAL_GetTick>
 800fa96:	4602      	mov	r2, r0
 800fa98:	683b      	ldr	r3, [r7, #0]
 800fa9a:	1ad3      	subs	r3, r2, r3
 800fa9c:	69ba      	ldr	r2, [r7, #24]
 800fa9e:	429a      	cmp	r2, r3
 800faa0:	d803      	bhi.n	800faaa <SPI_WaitOnFlagUntilTimeout+0x2a>
 800faa2:	69bb      	ldr	r3, [r7, #24]
 800faa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800faa8:	d102      	bne.n	800fab0 <SPI_WaitOnFlagUntilTimeout+0x30>
 800faaa:	69bb      	ldr	r3, [r7, #24]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d101      	bne.n	800fab4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800fab0:	2303      	movs	r3, #3
 800fab2:	e00f      	b.n	800fad4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	695a      	ldr	r2, [r3, #20]
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	4013      	ands	r3, r2
 800fabe:	68ba      	ldr	r2, [r7, #8]
 800fac0:	429a      	cmp	r2, r3
 800fac2:	bf0c      	ite	eq
 800fac4:	2301      	moveq	r3, #1
 800fac6:	2300      	movne	r3, #0
 800fac8:	b2db      	uxtb	r3, r3
 800faca:	461a      	mov	r2, r3
 800facc:	79fb      	ldrb	r3, [r7, #7]
 800face:	429a      	cmp	r2, r3
 800fad0:	d0df      	beq.n	800fa92 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800fad2:	2300      	movs	r3, #0
}
 800fad4:	4618      	mov	r0, r3
 800fad6:	3710      	adds	r7, #16
 800fad8:	46bd      	mov	sp, r7
 800fada:	bd80      	pop	{r7, pc}

0800fadc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800fadc:	b480      	push	{r7}
 800fade:	b085      	sub	sp, #20
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fae8:	095b      	lsrs	r3, r3, #5
 800faea:	3301      	adds	r3, #1
 800faec:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	68db      	ldr	r3, [r3, #12]
 800faf2:	3301      	adds	r3, #1
 800faf4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800faf6:	68bb      	ldr	r3, [r7, #8]
 800faf8:	3307      	adds	r3, #7
 800fafa:	08db      	lsrs	r3, r3, #3
 800fafc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800fafe:	68bb      	ldr	r3, [r7, #8]
 800fb00:	68fa      	ldr	r2, [r7, #12]
 800fb02:	fb02 f303 	mul.w	r3, r2, r3
}
 800fb06:	4618      	mov	r0, r3
 800fb08:	3714      	adds	r7, #20
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb10:	4770      	bx	lr

0800fb12 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fb12:	b580      	push	{r7, lr}
 800fb14:	b082      	sub	sp, #8
 800fb16:	af00      	add	r7, sp, #0
 800fb18:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d101      	bne.n	800fb24 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fb20:	2301      	movs	r3, #1
 800fb22:	e042      	b.n	800fbaa <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d106      	bne.n	800fb3c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	2200      	movs	r2, #0
 800fb32:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fb36:	6878      	ldr	r0, [r7, #4]
 800fb38:	f7f4 fa70 	bl	800401c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	2224      	movs	r2, #36	; 0x24
 800fb40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	681a      	ldr	r2, [r3, #0]
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	f022 0201 	bic.w	r2, r2, #1
 800fb52:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fb54:	6878      	ldr	r0, [r7, #4]
 800fb56:	f000 f95f 	bl	800fe18 <UART_SetConfig>
 800fb5a:	4603      	mov	r3, r0
 800fb5c:	2b01      	cmp	r3, #1
 800fb5e:	d101      	bne.n	800fb64 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800fb60:	2301      	movs	r3, #1
 800fb62:	e022      	b.n	800fbaa <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d002      	beq.n	800fb72 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800fb6c:	6878      	ldr	r0, [r7, #4]
 800fb6e:	f000 ff03 	bl	8010978 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	685a      	ldr	r2, [r3, #4]
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fb80:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	689a      	ldr	r2, [r3, #8]
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fb90:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	681a      	ldr	r2, [r3, #0]
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	f042 0201 	orr.w	r2, r2, #1
 800fba0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fba2:	6878      	ldr	r0, [r7, #4]
 800fba4:	f000 ff8a 	bl	8010abc <UART_CheckIdleState>
 800fba8:	4603      	mov	r3, r0
}
 800fbaa:	4618      	mov	r0, r3
 800fbac:	3708      	adds	r7, #8
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	bd80      	pop	{r7, pc}

0800fbb2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fbb2:	b580      	push	{r7, lr}
 800fbb4:	b08a      	sub	sp, #40	; 0x28
 800fbb6:	af02      	add	r7, sp, #8
 800fbb8:	60f8      	str	r0, [r7, #12]
 800fbba:	60b9      	str	r1, [r7, #8]
 800fbbc:	603b      	str	r3, [r7, #0]
 800fbbe:	4613      	mov	r3, r2
 800fbc0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fbc8:	2b20      	cmp	r3, #32
 800fbca:	f040 8083 	bne.w	800fcd4 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800fbce:	68bb      	ldr	r3, [r7, #8]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d002      	beq.n	800fbda <HAL_UART_Transmit+0x28>
 800fbd4:	88fb      	ldrh	r3, [r7, #6]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d101      	bne.n	800fbde <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800fbda:	2301      	movs	r3, #1
 800fbdc:	e07b      	b.n	800fcd6 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800fbe4:	2b01      	cmp	r3, #1
 800fbe6:	d101      	bne.n	800fbec <HAL_UART_Transmit+0x3a>
 800fbe8:	2302      	movs	r3, #2
 800fbea:	e074      	b.n	800fcd6 <HAL_UART_Transmit+0x124>
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	2201      	movs	r2, #1
 800fbf0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	2221      	movs	r2, #33	; 0x21
 800fc00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800fc04:	f7f4 fcee 	bl	80045e4 <HAL_GetTick>
 800fc08:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	88fa      	ldrh	r2, [r7, #6]
 800fc0e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	88fa      	ldrh	r2, [r7, #6]
 800fc16:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	689b      	ldr	r3, [r3, #8]
 800fc1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc22:	d108      	bne.n	800fc36 <HAL_UART_Transmit+0x84>
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	691b      	ldr	r3, [r3, #16]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d104      	bne.n	800fc36 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fc30:	68bb      	ldr	r3, [r7, #8]
 800fc32:	61bb      	str	r3, [r7, #24]
 800fc34:	e003      	b.n	800fc3e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800fc36:	68bb      	ldr	r3, [r7, #8]
 800fc38:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	2200      	movs	r2, #0
 800fc42:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800fc46:	e02c      	b.n	800fca2 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fc48:	683b      	ldr	r3, [r7, #0]
 800fc4a:	9300      	str	r3, [sp, #0]
 800fc4c:	697b      	ldr	r3, [r7, #20]
 800fc4e:	2200      	movs	r2, #0
 800fc50:	2180      	movs	r1, #128	; 0x80
 800fc52:	68f8      	ldr	r0, [r7, #12]
 800fc54:	f000 ff7a 	bl	8010b4c <UART_WaitOnFlagUntilTimeout>
 800fc58:	4603      	mov	r3, r0
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d001      	beq.n	800fc62 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800fc5e:	2303      	movs	r3, #3
 800fc60:	e039      	b.n	800fcd6 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800fc62:	69fb      	ldr	r3, [r7, #28]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d10b      	bne.n	800fc80 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fc68:	69bb      	ldr	r3, [r7, #24]
 800fc6a:	881b      	ldrh	r3, [r3, #0]
 800fc6c:	461a      	mov	r2, r3
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fc76:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800fc78:	69bb      	ldr	r3, [r7, #24]
 800fc7a:	3302      	adds	r3, #2
 800fc7c:	61bb      	str	r3, [r7, #24]
 800fc7e:	e007      	b.n	800fc90 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800fc80:	69fb      	ldr	r3, [r7, #28]
 800fc82:	781a      	ldrb	r2, [r3, #0]
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800fc8a:	69fb      	ldr	r3, [r7, #28]
 800fc8c:	3301      	adds	r3, #1
 800fc8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fc96:	b29b      	uxth	r3, r3
 800fc98:	3b01      	subs	r3, #1
 800fc9a:	b29a      	uxth	r2, r3
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fca8:	b29b      	uxth	r3, r3
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d1cc      	bne.n	800fc48 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	9300      	str	r3, [sp, #0]
 800fcb2:	697b      	ldr	r3, [r7, #20]
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	2140      	movs	r1, #64	; 0x40
 800fcb8:	68f8      	ldr	r0, [r7, #12]
 800fcba:	f000 ff47 	bl	8010b4c <UART_WaitOnFlagUntilTimeout>
 800fcbe:	4603      	mov	r3, r0
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d001      	beq.n	800fcc8 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800fcc4:	2303      	movs	r3, #3
 800fcc6:	e006      	b.n	800fcd6 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	2220      	movs	r2, #32
 800fccc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	e000      	b.n	800fcd6 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800fcd4:	2302      	movs	r3, #2
  }
}
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	3720      	adds	r7, #32
 800fcda:	46bd      	mov	sp, r7
 800fcdc:	bd80      	pop	{r7, pc}
	...

0800fce0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b084      	sub	sp, #16
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	60f8      	str	r0, [r7, #12]
 800fce8:	60b9      	str	r1, [r7, #8]
 800fcea:	4613      	mov	r3, r2
 800fcec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fcf4:	2b20      	cmp	r3, #32
 800fcf6:	d170      	bne.n	800fdda <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 800fcf8:	68bb      	ldr	r3, [r7, #8]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d002      	beq.n	800fd04 <HAL_UART_Receive_DMA+0x24>
 800fcfe:	88fb      	ldrh	r3, [r7, #6]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d101      	bne.n	800fd08 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800fd04:	2301      	movs	r3, #1
 800fd06:	e069      	b.n	800fddc <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800fd0e:	2b01      	cmp	r3, #1
 800fd10:	d101      	bne.n	800fd16 <HAL_UART_Receive_DMA+0x36>
 800fd12:	2302      	movs	r3, #2
 800fd14:	e062      	b.n	800fddc <HAL_UART_Receive_DMA+0xfc>
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	2201      	movs	r2, #1
 800fd1a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	68ba      	ldr	r2, [r7, #8]
 800fd22:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	88fa      	ldrh	r2, [r7, #6]
 800fd28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	2200      	movs	r2, #0
 800fd30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	2222      	movs	r2, #34	; 0x22
 800fd38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d02c      	beq.n	800fd9e <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd48:	4a26      	ldr	r2, [pc, #152]	; (800fde4 <HAL_UART_Receive_DMA+0x104>)
 800fd4a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd50:	4a25      	ldr	r2, [pc, #148]	; (800fde8 <HAL_UART_Receive_DMA+0x108>)
 800fd52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd58:	4a24      	ldr	r2, [pc, #144]	; (800fdec <HAL_UART_Receive_DMA+0x10c>)
 800fd5a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd60:	2200      	movs	r2, #0
 800fd62:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	3324      	adds	r3, #36	; 0x24
 800fd6e:	4619      	mov	r1, r3
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd74:	461a      	mov	r2, r3
 800fd76:	88fb      	ldrh	r3, [r7, #6]
 800fd78:	f7f5 f8da 	bl	8004f30 <HAL_DMA_Start_IT>
 800fd7c:	4603      	mov	r3, r0
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d00d      	beq.n	800fd9e <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	2210      	movs	r2, #16
 800fd86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	2220      	movs	r2, #32
 800fd96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800fd9a:	2301      	movs	r3, #1
 800fd9c:	e01e      	b.n	800fddc <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	2200      	movs	r2, #0
 800fda2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	681a      	ldr	r2, [r3, #0]
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fdb4:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	689a      	ldr	r2, [r3, #8]
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	f042 0201 	orr.w	r2, r2, #1
 800fdc4:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	689a      	ldr	r2, [r3, #8]
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fdd4:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	e000      	b.n	800fddc <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800fdda:	2302      	movs	r3, #2
  }
}
 800fddc:	4618      	mov	r0, r3
 800fdde:	3710      	adds	r7, #16
 800fde0:	46bd      	mov	sp, r7
 800fde2:	bd80      	pop	{r7, pc}
 800fde4:	08010cd1 	.word	0x08010cd1
 800fde8:	08010d37 	.word	0x08010d37
 800fdec:	08010d53 	.word	0x08010d53

0800fdf0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800fdf0:	b480      	push	{r7}
 800fdf2:	b083      	sub	sp, #12
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800fdf8:	bf00      	nop
 800fdfa:	370c      	adds	r7, #12
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe02:	4770      	bx	lr

0800fe04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fe04:	b480      	push	{r7}
 800fe06:	b083      	sub	sp, #12
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fe0c:	bf00      	nop
 800fe0e:	370c      	adds	r7, #12
 800fe10:	46bd      	mov	sp, r7
 800fe12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe16:	4770      	bx	lr

0800fe18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fe18:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800fe1c:	b08e      	sub	sp, #56	; 0x38
 800fe1e:	af00      	add	r7, sp, #0
 800fe20:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fe22:	2300      	movs	r3, #0
 800fe24:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	689a      	ldr	r2, [r3, #8]
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	691b      	ldr	r3, [r3, #16]
 800fe30:	431a      	orrs	r2, r3
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	695b      	ldr	r3, [r3, #20]
 800fe36:	431a      	orrs	r2, r3
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	69db      	ldr	r3, [r3, #28]
 800fe3c:	4313      	orrs	r3, r2
 800fe3e:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fe44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe46:	4313      	orrs	r3, r2
 800fe48:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	681a      	ldr	r2, [r3, #0]
 800fe50:	4bc1      	ldr	r3, [pc, #772]	; (8010158 <UART_SetConfig+0x340>)
 800fe52:	4013      	ands	r3, r2
 800fe54:	687a      	ldr	r2, [r7, #4]
 800fe56:	6812      	ldr	r2, [r2, #0]
 800fe58:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fe5a:	430b      	orrs	r3, r1
 800fe5c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	685b      	ldr	r3, [r3, #4]
 800fe64:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	68da      	ldr	r2, [r3, #12]
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	430a      	orrs	r2, r1
 800fe72:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	699b      	ldr	r3, [r3, #24]
 800fe78:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	4ab7      	ldr	r2, [pc, #732]	; (801015c <UART_SetConfig+0x344>)
 800fe80:	4293      	cmp	r3, r2
 800fe82:	d004      	beq.n	800fe8e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	6a1b      	ldr	r3, [r3, #32]
 800fe88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe8a:	4313      	orrs	r3, r2
 800fe8c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	689a      	ldr	r2, [r3, #8]
 800fe94:	4bb2      	ldr	r3, [pc, #712]	; (8010160 <UART_SetConfig+0x348>)
 800fe96:	4013      	ands	r3, r2
 800fe98:	687a      	ldr	r2, [r7, #4]
 800fe9a:	6812      	ldr	r2, [r2, #0]
 800fe9c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fe9e:	430b      	orrs	r3, r1
 800fea0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fea8:	f023 010f 	bic.w	r1, r3, #15
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	430a      	orrs	r2, r1
 800feb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	4aa9      	ldr	r2, [pc, #676]	; (8010164 <UART_SetConfig+0x34c>)
 800febe:	4293      	cmp	r3, r2
 800fec0:	d177      	bne.n	800ffb2 <UART_SetConfig+0x19a>
 800fec2:	4ba9      	ldr	r3, [pc, #676]	; (8010168 <UART_SetConfig+0x350>)
 800fec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fec6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800feca:	2b28      	cmp	r3, #40	; 0x28
 800fecc:	d86c      	bhi.n	800ffa8 <UART_SetConfig+0x190>
 800fece:	a201      	add	r2, pc, #4	; (adr r2, 800fed4 <UART_SetConfig+0xbc>)
 800fed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fed4:	0800ff79 	.word	0x0800ff79
 800fed8:	0800ffa9 	.word	0x0800ffa9
 800fedc:	0800ffa9 	.word	0x0800ffa9
 800fee0:	0800ffa9 	.word	0x0800ffa9
 800fee4:	0800ffa9 	.word	0x0800ffa9
 800fee8:	0800ffa9 	.word	0x0800ffa9
 800feec:	0800ffa9 	.word	0x0800ffa9
 800fef0:	0800ffa9 	.word	0x0800ffa9
 800fef4:	0800ff81 	.word	0x0800ff81
 800fef8:	0800ffa9 	.word	0x0800ffa9
 800fefc:	0800ffa9 	.word	0x0800ffa9
 800ff00:	0800ffa9 	.word	0x0800ffa9
 800ff04:	0800ffa9 	.word	0x0800ffa9
 800ff08:	0800ffa9 	.word	0x0800ffa9
 800ff0c:	0800ffa9 	.word	0x0800ffa9
 800ff10:	0800ffa9 	.word	0x0800ffa9
 800ff14:	0800ff89 	.word	0x0800ff89
 800ff18:	0800ffa9 	.word	0x0800ffa9
 800ff1c:	0800ffa9 	.word	0x0800ffa9
 800ff20:	0800ffa9 	.word	0x0800ffa9
 800ff24:	0800ffa9 	.word	0x0800ffa9
 800ff28:	0800ffa9 	.word	0x0800ffa9
 800ff2c:	0800ffa9 	.word	0x0800ffa9
 800ff30:	0800ffa9 	.word	0x0800ffa9
 800ff34:	0800ff91 	.word	0x0800ff91
 800ff38:	0800ffa9 	.word	0x0800ffa9
 800ff3c:	0800ffa9 	.word	0x0800ffa9
 800ff40:	0800ffa9 	.word	0x0800ffa9
 800ff44:	0800ffa9 	.word	0x0800ffa9
 800ff48:	0800ffa9 	.word	0x0800ffa9
 800ff4c:	0800ffa9 	.word	0x0800ffa9
 800ff50:	0800ffa9 	.word	0x0800ffa9
 800ff54:	0800ff99 	.word	0x0800ff99
 800ff58:	0800ffa9 	.word	0x0800ffa9
 800ff5c:	0800ffa9 	.word	0x0800ffa9
 800ff60:	0800ffa9 	.word	0x0800ffa9
 800ff64:	0800ffa9 	.word	0x0800ffa9
 800ff68:	0800ffa9 	.word	0x0800ffa9
 800ff6c:	0800ffa9 	.word	0x0800ffa9
 800ff70:	0800ffa9 	.word	0x0800ffa9
 800ff74:	0800ffa1 	.word	0x0800ffa1
 800ff78:	2301      	movs	r3, #1
 800ff7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff7e:	e233      	b.n	80103e8 <UART_SetConfig+0x5d0>
 800ff80:	2304      	movs	r3, #4
 800ff82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff86:	e22f      	b.n	80103e8 <UART_SetConfig+0x5d0>
 800ff88:	2308      	movs	r3, #8
 800ff8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff8e:	e22b      	b.n	80103e8 <UART_SetConfig+0x5d0>
 800ff90:	2310      	movs	r3, #16
 800ff92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff96:	e227      	b.n	80103e8 <UART_SetConfig+0x5d0>
 800ff98:	2320      	movs	r3, #32
 800ff9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff9e:	e223      	b.n	80103e8 <UART_SetConfig+0x5d0>
 800ffa0:	2340      	movs	r3, #64	; 0x40
 800ffa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffa6:	e21f      	b.n	80103e8 <UART_SetConfig+0x5d0>
 800ffa8:	2380      	movs	r3, #128	; 0x80
 800ffaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffae:	bf00      	nop
 800ffb0:	e21a      	b.n	80103e8 <UART_SetConfig+0x5d0>
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	4a6d      	ldr	r2, [pc, #436]	; (801016c <UART_SetConfig+0x354>)
 800ffb8:	4293      	cmp	r3, r2
 800ffba:	d132      	bne.n	8010022 <UART_SetConfig+0x20a>
 800ffbc:	4b6a      	ldr	r3, [pc, #424]	; (8010168 <UART_SetConfig+0x350>)
 800ffbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ffc0:	f003 0307 	and.w	r3, r3, #7
 800ffc4:	2b05      	cmp	r3, #5
 800ffc6:	d827      	bhi.n	8010018 <UART_SetConfig+0x200>
 800ffc8:	a201      	add	r2, pc, #4	; (adr r2, 800ffd0 <UART_SetConfig+0x1b8>)
 800ffca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffce:	bf00      	nop
 800ffd0:	0800ffe9 	.word	0x0800ffe9
 800ffd4:	0800fff1 	.word	0x0800fff1
 800ffd8:	0800fff9 	.word	0x0800fff9
 800ffdc:	08010001 	.word	0x08010001
 800ffe0:	08010009 	.word	0x08010009
 800ffe4:	08010011 	.word	0x08010011
 800ffe8:	2300      	movs	r3, #0
 800ffea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffee:	e1fb      	b.n	80103e8 <UART_SetConfig+0x5d0>
 800fff0:	2304      	movs	r3, #4
 800fff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fff6:	e1f7      	b.n	80103e8 <UART_SetConfig+0x5d0>
 800fff8:	2308      	movs	r3, #8
 800fffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fffe:	e1f3      	b.n	80103e8 <UART_SetConfig+0x5d0>
 8010000:	2310      	movs	r3, #16
 8010002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010006:	e1ef      	b.n	80103e8 <UART_SetConfig+0x5d0>
 8010008:	2320      	movs	r3, #32
 801000a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801000e:	e1eb      	b.n	80103e8 <UART_SetConfig+0x5d0>
 8010010:	2340      	movs	r3, #64	; 0x40
 8010012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010016:	e1e7      	b.n	80103e8 <UART_SetConfig+0x5d0>
 8010018:	2380      	movs	r3, #128	; 0x80
 801001a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801001e:	bf00      	nop
 8010020:	e1e2      	b.n	80103e8 <UART_SetConfig+0x5d0>
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	4a52      	ldr	r2, [pc, #328]	; (8010170 <UART_SetConfig+0x358>)
 8010028:	4293      	cmp	r3, r2
 801002a:	d132      	bne.n	8010092 <UART_SetConfig+0x27a>
 801002c:	4b4e      	ldr	r3, [pc, #312]	; (8010168 <UART_SetConfig+0x350>)
 801002e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010030:	f003 0307 	and.w	r3, r3, #7
 8010034:	2b05      	cmp	r3, #5
 8010036:	d827      	bhi.n	8010088 <UART_SetConfig+0x270>
 8010038:	a201      	add	r2, pc, #4	; (adr r2, 8010040 <UART_SetConfig+0x228>)
 801003a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801003e:	bf00      	nop
 8010040:	08010059 	.word	0x08010059
 8010044:	08010061 	.word	0x08010061
 8010048:	08010069 	.word	0x08010069
 801004c:	08010071 	.word	0x08010071
 8010050:	08010079 	.word	0x08010079
 8010054:	08010081 	.word	0x08010081
 8010058:	2300      	movs	r3, #0
 801005a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801005e:	e1c3      	b.n	80103e8 <UART_SetConfig+0x5d0>
 8010060:	2304      	movs	r3, #4
 8010062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010066:	e1bf      	b.n	80103e8 <UART_SetConfig+0x5d0>
 8010068:	2308      	movs	r3, #8
 801006a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801006e:	e1bb      	b.n	80103e8 <UART_SetConfig+0x5d0>
 8010070:	2310      	movs	r3, #16
 8010072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010076:	e1b7      	b.n	80103e8 <UART_SetConfig+0x5d0>
 8010078:	2320      	movs	r3, #32
 801007a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801007e:	e1b3      	b.n	80103e8 <UART_SetConfig+0x5d0>
 8010080:	2340      	movs	r3, #64	; 0x40
 8010082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010086:	e1af      	b.n	80103e8 <UART_SetConfig+0x5d0>
 8010088:	2380      	movs	r3, #128	; 0x80
 801008a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801008e:	bf00      	nop
 8010090:	e1aa      	b.n	80103e8 <UART_SetConfig+0x5d0>
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	4a37      	ldr	r2, [pc, #220]	; (8010174 <UART_SetConfig+0x35c>)
 8010098:	4293      	cmp	r3, r2
 801009a:	d132      	bne.n	8010102 <UART_SetConfig+0x2ea>
 801009c:	4b32      	ldr	r3, [pc, #200]	; (8010168 <UART_SetConfig+0x350>)
 801009e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80100a0:	f003 0307 	and.w	r3, r3, #7
 80100a4:	2b05      	cmp	r3, #5
 80100a6:	d827      	bhi.n	80100f8 <UART_SetConfig+0x2e0>
 80100a8:	a201      	add	r2, pc, #4	; (adr r2, 80100b0 <UART_SetConfig+0x298>)
 80100aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100ae:	bf00      	nop
 80100b0:	080100c9 	.word	0x080100c9
 80100b4:	080100d1 	.word	0x080100d1
 80100b8:	080100d9 	.word	0x080100d9
 80100bc:	080100e1 	.word	0x080100e1
 80100c0:	080100e9 	.word	0x080100e9
 80100c4:	080100f1 	.word	0x080100f1
 80100c8:	2300      	movs	r3, #0
 80100ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100ce:	e18b      	b.n	80103e8 <UART_SetConfig+0x5d0>
 80100d0:	2304      	movs	r3, #4
 80100d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100d6:	e187      	b.n	80103e8 <UART_SetConfig+0x5d0>
 80100d8:	2308      	movs	r3, #8
 80100da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100de:	e183      	b.n	80103e8 <UART_SetConfig+0x5d0>
 80100e0:	2310      	movs	r3, #16
 80100e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100e6:	e17f      	b.n	80103e8 <UART_SetConfig+0x5d0>
 80100e8:	2320      	movs	r3, #32
 80100ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100ee:	e17b      	b.n	80103e8 <UART_SetConfig+0x5d0>
 80100f0:	2340      	movs	r3, #64	; 0x40
 80100f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100f6:	e177      	b.n	80103e8 <UART_SetConfig+0x5d0>
 80100f8:	2380      	movs	r3, #128	; 0x80
 80100fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100fe:	bf00      	nop
 8010100:	e172      	b.n	80103e8 <UART_SetConfig+0x5d0>
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	4a1c      	ldr	r2, [pc, #112]	; (8010178 <UART_SetConfig+0x360>)
 8010108:	4293      	cmp	r3, r2
 801010a:	d144      	bne.n	8010196 <UART_SetConfig+0x37e>
 801010c:	4b16      	ldr	r3, [pc, #88]	; (8010168 <UART_SetConfig+0x350>)
 801010e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010110:	f003 0307 	and.w	r3, r3, #7
 8010114:	2b05      	cmp	r3, #5
 8010116:	d839      	bhi.n	801018c <UART_SetConfig+0x374>
 8010118:	a201      	add	r2, pc, #4	; (adr r2, 8010120 <UART_SetConfig+0x308>)
 801011a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801011e:	bf00      	nop
 8010120:	08010139 	.word	0x08010139
 8010124:	08010141 	.word	0x08010141
 8010128:	08010149 	.word	0x08010149
 801012c:	08010151 	.word	0x08010151
 8010130:	0801017d 	.word	0x0801017d
 8010134:	08010185 	.word	0x08010185
 8010138:	2300      	movs	r3, #0
 801013a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801013e:	e153      	b.n	80103e8 <UART_SetConfig+0x5d0>
 8010140:	2304      	movs	r3, #4
 8010142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010146:	e14f      	b.n	80103e8 <UART_SetConfig+0x5d0>
 8010148:	2308      	movs	r3, #8
 801014a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801014e:	e14b      	b.n	80103e8 <UART_SetConfig+0x5d0>
 8010150:	2310      	movs	r3, #16
 8010152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010156:	e147      	b.n	80103e8 <UART_SetConfig+0x5d0>
 8010158:	cfff69f3 	.word	0xcfff69f3
 801015c:	58000c00 	.word	0x58000c00
 8010160:	11fff4ff 	.word	0x11fff4ff
 8010164:	40011000 	.word	0x40011000
 8010168:	58024400 	.word	0x58024400
 801016c:	40004400 	.word	0x40004400
 8010170:	40004800 	.word	0x40004800
 8010174:	40004c00 	.word	0x40004c00
 8010178:	40005000 	.word	0x40005000
 801017c:	2320      	movs	r3, #32
 801017e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010182:	e131      	b.n	80103e8 <UART_SetConfig+0x5d0>
 8010184:	2340      	movs	r3, #64	; 0x40
 8010186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801018a:	e12d      	b.n	80103e8 <UART_SetConfig+0x5d0>
 801018c:	2380      	movs	r3, #128	; 0x80
 801018e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010192:	bf00      	nop
 8010194:	e128      	b.n	80103e8 <UART_SetConfig+0x5d0>
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	4ab6      	ldr	r2, [pc, #728]	; (8010474 <UART_SetConfig+0x65c>)
 801019c:	4293      	cmp	r3, r2
 801019e:	d178      	bne.n	8010292 <UART_SetConfig+0x47a>
 80101a0:	4bb5      	ldr	r3, [pc, #724]	; (8010478 <UART_SetConfig+0x660>)
 80101a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80101a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80101a8:	2b28      	cmp	r3, #40	; 0x28
 80101aa:	d86d      	bhi.n	8010288 <UART_SetConfig+0x470>
 80101ac:	a201      	add	r2, pc, #4	; (adr r2, 80101b4 <UART_SetConfig+0x39c>)
 80101ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101b2:	bf00      	nop
 80101b4:	08010259 	.word	0x08010259
 80101b8:	08010289 	.word	0x08010289
 80101bc:	08010289 	.word	0x08010289
 80101c0:	08010289 	.word	0x08010289
 80101c4:	08010289 	.word	0x08010289
 80101c8:	08010289 	.word	0x08010289
 80101cc:	08010289 	.word	0x08010289
 80101d0:	08010289 	.word	0x08010289
 80101d4:	08010261 	.word	0x08010261
 80101d8:	08010289 	.word	0x08010289
 80101dc:	08010289 	.word	0x08010289
 80101e0:	08010289 	.word	0x08010289
 80101e4:	08010289 	.word	0x08010289
 80101e8:	08010289 	.word	0x08010289
 80101ec:	08010289 	.word	0x08010289
 80101f0:	08010289 	.word	0x08010289
 80101f4:	08010269 	.word	0x08010269
 80101f8:	08010289 	.word	0x08010289
 80101fc:	08010289 	.word	0x08010289
 8010200:	08010289 	.word	0x08010289
 8010204:	08010289 	.word	0x08010289
 8010208:	08010289 	.word	0x08010289
 801020c:	08010289 	.word	0x08010289
 8010210:	08010289 	.word	0x08010289
 8010214:	08010271 	.word	0x08010271
 8010218:	08010289 	.word	0x08010289
 801021c:	08010289 	.word	0x08010289
 8010220:	08010289 	.word	0x08010289
 8010224:	08010289 	.word	0x08010289
 8010228:	08010289 	.word	0x08010289
 801022c:	08010289 	.word	0x08010289
 8010230:	08010289 	.word	0x08010289
 8010234:	08010279 	.word	0x08010279
 8010238:	08010289 	.word	0x08010289
 801023c:	08010289 	.word	0x08010289
 8010240:	08010289 	.word	0x08010289
 8010244:	08010289 	.word	0x08010289
 8010248:	08010289 	.word	0x08010289
 801024c:	08010289 	.word	0x08010289
 8010250:	08010289 	.word	0x08010289
 8010254:	08010281 	.word	0x08010281
 8010258:	2301      	movs	r3, #1
 801025a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801025e:	e0c3      	b.n	80103e8 <UART_SetConfig+0x5d0>
 8010260:	2304      	movs	r3, #4
 8010262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010266:	e0bf      	b.n	80103e8 <UART_SetConfig+0x5d0>
 8010268:	2308      	movs	r3, #8
 801026a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801026e:	e0bb      	b.n	80103e8 <UART_SetConfig+0x5d0>
 8010270:	2310      	movs	r3, #16
 8010272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010276:	e0b7      	b.n	80103e8 <UART_SetConfig+0x5d0>
 8010278:	2320      	movs	r3, #32
 801027a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801027e:	e0b3      	b.n	80103e8 <UART_SetConfig+0x5d0>
 8010280:	2340      	movs	r3, #64	; 0x40
 8010282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010286:	e0af      	b.n	80103e8 <UART_SetConfig+0x5d0>
 8010288:	2380      	movs	r3, #128	; 0x80
 801028a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801028e:	bf00      	nop
 8010290:	e0aa      	b.n	80103e8 <UART_SetConfig+0x5d0>
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	4a79      	ldr	r2, [pc, #484]	; (801047c <UART_SetConfig+0x664>)
 8010298:	4293      	cmp	r3, r2
 801029a:	d132      	bne.n	8010302 <UART_SetConfig+0x4ea>
 801029c:	4b76      	ldr	r3, [pc, #472]	; (8010478 <UART_SetConfig+0x660>)
 801029e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80102a0:	f003 0307 	and.w	r3, r3, #7
 80102a4:	2b05      	cmp	r3, #5
 80102a6:	d827      	bhi.n	80102f8 <UART_SetConfig+0x4e0>
 80102a8:	a201      	add	r2, pc, #4	; (adr r2, 80102b0 <UART_SetConfig+0x498>)
 80102aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102ae:	bf00      	nop
 80102b0:	080102c9 	.word	0x080102c9
 80102b4:	080102d1 	.word	0x080102d1
 80102b8:	080102d9 	.word	0x080102d9
 80102bc:	080102e1 	.word	0x080102e1
 80102c0:	080102e9 	.word	0x080102e9
 80102c4:	080102f1 	.word	0x080102f1
 80102c8:	2300      	movs	r3, #0
 80102ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102ce:	e08b      	b.n	80103e8 <UART_SetConfig+0x5d0>
 80102d0:	2304      	movs	r3, #4
 80102d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102d6:	e087      	b.n	80103e8 <UART_SetConfig+0x5d0>
 80102d8:	2308      	movs	r3, #8
 80102da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102de:	e083      	b.n	80103e8 <UART_SetConfig+0x5d0>
 80102e0:	2310      	movs	r3, #16
 80102e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102e6:	e07f      	b.n	80103e8 <UART_SetConfig+0x5d0>
 80102e8:	2320      	movs	r3, #32
 80102ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102ee:	e07b      	b.n	80103e8 <UART_SetConfig+0x5d0>
 80102f0:	2340      	movs	r3, #64	; 0x40
 80102f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102f6:	e077      	b.n	80103e8 <UART_SetConfig+0x5d0>
 80102f8:	2380      	movs	r3, #128	; 0x80
 80102fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102fe:	bf00      	nop
 8010300:	e072      	b.n	80103e8 <UART_SetConfig+0x5d0>
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	4a5e      	ldr	r2, [pc, #376]	; (8010480 <UART_SetConfig+0x668>)
 8010308:	4293      	cmp	r3, r2
 801030a:	d132      	bne.n	8010372 <UART_SetConfig+0x55a>
 801030c:	4b5a      	ldr	r3, [pc, #360]	; (8010478 <UART_SetConfig+0x660>)
 801030e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010310:	f003 0307 	and.w	r3, r3, #7
 8010314:	2b05      	cmp	r3, #5
 8010316:	d827      	bhi.n	8010368 <UART_SetConfig+0x550>
 8010318:	a201      	add	r2, pc, #4	; (adr r2, 8010320 <UART_SetConfig+0x508>)
 801031a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801031e:	bf00      	nop
 8010320:	08010339 	.word	0x08010339
 8010324:	08010341 	.word	0x08010341
 8010328:	08010349 	.word	0x08010349
 801032c:	08010351 	.word	0x08010351
 8010330:	08010359 	.word	0x08010359
 8010334:	08010361 	.word	0x08010361
 8010338:	2300      	movs	r3, #0
 801033a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801033e:	e053      	b.n	80103e8 <UART_SetConfig+0x5d0>
 8010340:	2304      	movs	r3, #4
 8010342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010346:	e04f      	b.n	80103e8 <UART_SetConfig+0x5d0>
 8010348:	2308      	movs	r3, #8
 801034a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801034e:	e04b      	b.n	80103e8 <UART_SetConfig+0x5d0>
 8010350:	2310      	movs	r3, #16
 8010352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010356:	e047      	b.n	80103e8 <UART_SetConfig+0x5d0>
 8010358:	2320      	movs	r3, #32
 801035a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801035e:	e043      	b.n	80103e8 <UART_SetConfig+0x5d0>
 8010360:	2340      	movs	r3, #64	; 0x40
 8010362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010366:	e03f      	b.n	80103e8 <UART_SetConfig+0x5d0>
 8010368:	2380      	movs	r3, #128	; 0x80
 801036a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801036e:	bf00      	nop
 8010370:	e03a      	b.n	80103e8 <UART_SetConfig+0x5d0>
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	4a43      	ldr	r2, [pc, #268]	; (8010484 <UART_SetConfig+0x66c>)
 8010378:	4293      	cmp	r3, r2
 801037a:	d132      	bne.n	80103e2 <UART_SetConfig+0x5ca>
 801037c:	4b3e      	ldr	r3, [pc, #248]	; (8010478 <UART_SetConfig+0x660>)
 801037e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010380:	f003 0307 	and.w	r3, r3, #7
 8010384:	2b05      	cmp	r3, #5
 8010386:	d827      	bhi.n	80103d8 <UART_SetConfig+0x5c0>
 8010388:	a201      	add	r2, pc, #4	; (adr r2, 8010390 <UART_SetConfig+0x578>)
 801038a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801038e:	bf00      	nop
 8010390:	080103a9 	.word	0x080103a9
 8010394:	080103b1 	.word	0x080103b1
 8010398:	080103b9 	.word	0x080103b9
 801039c:	080103c1 	.word	0x080103c1
 80103a0:	080103c9 	.word	0x080103c9
 80103a4:	080103d1 	.word	0x080103d1
 80103a8:	2302      	movs	r3, #2
 80103aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103ae:	e01b      	b.n	80103e8 <UART_SetConfig+0x5d0>
 80103b0:	2304      	movs	r3, #4
 80103b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103b6:	e017      	b.n	80103e8 <UART_SetConfig+0x5d0>
 80103b8:	2308      	movs	r3, #8
 80103ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103be:	e013      	b.n	80103e8 <UART_SetConfig+0x5d0>
 80103c0:	2310      	movs	r3, #16
 80103c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103c6:	e00f      	b.n	80103e8 <UART_SetConfig+0x5d0>
 80103c8:	2320      	movs	r3, #32
 80103ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103ce:	e00b      	b.n	80103e8 <UART_SetConfig+0x5d0>
 80103d0:	2340      	movs	r3, #64	; 0x40
 80103d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103d6:	e007      	b.n	80103e8 <UART_SetConfig+0x5d0>
 80103d8:	2380      	movs	r3, #128	; 0x80
 80103da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80103de:	bf00      	nop
 80103e0:	e002      	b.n	80103e8 <UART_SetConfig+0x5d0>
 80103e2:	2380      	movs	r3, #128	; 0x80
 80103e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	4a25      	ldr	r2, [pc, #148]	; (8010484 <UART_SetConfig+0x66c>)
 80103ee:	4293      	cmp	r3, r2
 80103f0:	f040 80b8 	bne.w	8010564 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80103f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80103f8:	2b08      	cmp	r3, #8
 80103fa:	d019      	beq.n	8010430 <UART_SetConfig+0x618>
 80103fc:	2b08      	cmp	r3, #8
 80103fe:	dc04      	bgt.n	801040a <UART_SetConfig+0x5f2>
 8010400:	2b02      	cmp	r3, #2
 8010402:	d009      	beq.n	8010418 <UART_SetConfig+0x600>
 8010404:	2b04      	cmp	r3, #4
 8010406:	d00b      	beq.n	8010420 <UART_SetConfig+0x608>
 8010408:	e042      	b.n	8010490 <UART_SetConfig+0x678>
 801040a:	2b20      	cmp	r3, #32
 801040c:	d02b      	beq.n	8010466 <UART_SetConfig+0x64e>
 801040e:	2b40      	cmp	r3, #64	; 0x40
 8010410:	d02c      	beq.n	801046c <UART_SetConfig+0x654>
 8010412:	2b10      	cmp	r3, #16
 8010414:	d014      	beq.n	8010440 <UART_SetConfig+0x628>
 8010416:	e03b      	b.n	8010490 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010418:	f7fb fad2 	bl	800b9c0 <HAL_RCCEx_GetD3PCLK1Freq>
 801041c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 801041e:	e03d      	b.n	801049c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010420:	f107 0314 	add.w	r3, r7, #20
 8010424:	4618      	mov	r0, r3
 8010426:	f7fb fae1 	bl	800b9ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801042a:	69bb      	ldr	r3, [r7, #24]
 801042c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801042e:	e035      	b.n	801049c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010430:	f107 0308 	add.w	r3, r7, #8
 8010434:	4618      	mov	r0, r3
 8010436:	f7fb fc25 	bl	800bc84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801043e:	e02d      	b.n	801049c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010440:	4b0d      	ldr	r3, [pc, #52]	; (8010478 <UART_SetConfig+0x660>)
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	f003 0320 	and.w	r3, r3, #32
 8010448:	2b00      	cmp	r3, #0
 801044a:	d009      	beq.n	8010460 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801044c:	4b0a      	ldr	r3, [pc, #40]	; (8010478 <UART_SetConfig+0x660>)
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	08db      	lsrs	r3, r3, #3
 8010452:	f003 0303 	and.w	r3, r3, #3
 8010456:	4a0c      	ldr	r2, [pc, #48]	; (8010488 <UART_SetConfig+0x670>)
 8010458:	fa22 f303 	lsr.w	r3, r2, r3
 801045c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801045e:	e01d      	b.n	801049c <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8010460:	4b09      	ldr	r3, [pc, #36]	; (8010488 <UART_SetConfig+0x670>)
 8010462:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010464:	e01a      	b.n	801049c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010466:	4b09      	ldr	r3, [pc, #36]	; (801048c <UART_SetConfig+0x674>)
 8010468:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801046a:	e017      	b.n	801049c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801046c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010470:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010472:	e013      	b.n	801049c <UART_SetConfig+0x684>
 8010474:	40011400 	.word	0x40011400
 8010478:	58024400 	.word	0x58024400
 801047c:	40007800 	.word	0x40007800
 8010480:	40007c00 	.word	0x40007c00
 8010484:	58000c00 	.word	0x58000c00
 8010488:	03d09000 	.word	0x03d09000
 801048c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8010490:	2300      	movs	r3, #0
 8010492:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8010494:	2301      	movs	r3, #1
 8010496:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 801049a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801049c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801049e:	2b00      	cmp	r3, #0
 80104a0:	f000 824d 	beq.w	801093e <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104a8:	4aad      	ldr	r2, [pc, #692]	; (8010760 <UART_SetConfig+0x948>)
 80104aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80104ae:	461a      	mov	r2, r3
 80104b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80104b6:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	685a      	ldr	r2, [r3, #4]
 80104bc:	4613      	mov	r3, r2
 80104be:	005b      	lsls	r3, r3, #1
 80104c0:	4413      	add	r3, r2
 80104c2:	6a3a      	ldr	r2, [r7, #32]
 80104c4:	429a      	cmp	r2, r3
 80104c6:	d305      	bcc.n	80104d4 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	685b      	ldr	r3, [r3, #4]
 80104cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80104ce:	6a3a      	ldr	r2, [r7, #32]
 80104d0:	429a      	cmp	r2, r3
 80104d2:	d903      	bls.n	80104dc <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 80104d4:	2301      	movs	r3, #1
 80104d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80104da:	e230      	b.n	801093e <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80104dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104de:	4618      	mov	r0, r3
 80104e0:	f04f 0100 	mov.w	r1, #0
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104e8:	4a9d      	ldr	r2, [pc, #628]	; (8010760 <UART_SetConfig+0x948>)
 80104ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80104ee:	b29b      	uxth	r3, r3
 80104f0:	f04f 0400 	mov.w	r4, #0
 80104f4:	461a      	mov	r2, r3
 80104f6:	4623      	mov	r3, r4
 80104f8:	f7ef ff4a 	bl	8000390 <__aeabi_uldivmod>
 80104fc:	4603      	mov	r3, r0
 80104fe:	460c      	mov	r4, r1
 8010500:	4619      	mov	r1, r3
 8010502:	4622      	mov	r2, r4
 8010504:	f04f 0300 	mov.w	r3, #0
 8010508:	f04f 0400 	mov.w	r4, #0
 801050c:	0214      	lsls	r4, r2, #8
 801050e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8010512:	020b      	lsls	r3, r1, #8
 8010514:	687a      	ldr	r2, [r7, #4]
 8010516:	6852      	ldr	r2, [r2, #4]
 8010518:	0852      	lsrs	r2, r2, #1
 801051a:	4611      	mov	r1, r2
 801051c:	f04f 0200 	mov.w	r2, #0
 8010520:	eb13 0b01 	adds.w	fp, r3, r1
 8010524:	eb44 0c02 	adc.w	ip, r4, r2
 8010528:	4658      	mov	r0, fp
 801052a:	4661      	mov	r1, ip
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	685b      	ldr	r3, [r3, #4]
 8010530:	f04f 0400 	mov.w	r4, #0
 8010534:	461a      	mov	r2, r3
 8010536:	4623      	mov	r3, r4
 8010538:	f7ef ff2a 	bl	8000390 <__aeabi_uldivmod>
 801053c:	4603      	mov	r3, r0
 801053e:	460c      	mov	r4, r1
 8010540:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010544:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010548:	d308      	bcc.n	801055c <UART_SetConfig+0x744>
 801054a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801054c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010550:	d204      	bcs.n	801055c <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010558:	60da      	str	r2, [r3, #12]
 801055a:	e1f0      	b.n	801093e <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 801055c:	2301      	movs	r3, #1
 801055e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010562:	e1ec      	b.n	801093e <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	69db      	ldr	r3, [r3, #28]
 8010568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801056c:	f040 8100 	bne.w	8010770 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8010570:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010574:	2b40      	cmp	r3, #64	; 0x40
 8010576:	f200 80b7 	bhi.w	80106e8 <UART_SetConfig+0x8d0>
 801057a:	a201      	add	r2, pc, #4	; (adr r2, 8010580 <UART_SetConfig+0x768>)
 801057c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010580:	08010685 	.word	0x08010685
 8010584:	0801068d 	.word	0x0801068d
 8010588:	080106e9 	.word	0x080106e9
 801058c:	080106e9 	.word	0x080106e9
 8010590:	08010695 	.word	0x08010695
 8010594:	080106e9 	.word	0x080106e9
 8010598:	080106e9 	.word	0x080106e9
 801059c:	080106e9 	.word	0x080106e9
 80105a0:	080106a5 	.word	0x080106a5
 80105a4:	080106e9 	.word	0x080106e9
 80105a8:	080106e9 	.word	0x080106e9
 80105ac:	080106e9 	.word	0x080106e9
 80105b0:	080106e9 	.word	0x080106e9
 80105b4:	080106e9 	.word	0x080106e9
 80105b8:	080106e9 	.word	0x080106e9
 80105bc:	080106e9 	.word	0x080106e9
 80105c0:	080106b5 	.word	0x080106b5
 80105c4:	080106e9 	.word	0x080106e9
 80105c8:	080106e9 	.word	0x080106e9
 80105cc:	080106e9 	.word	0x080106e9
 80105d0:	080106e9 	.word	0x080106e9
 80105d4:	080106e9 	.word	0x080106e9
 80105d8:	080106e9 	.word	0x080106e9
 80105dc:	080106e9 	.word	0x080106e9
 80105e0:	080106e9 	.word	0x080106e9
 80105e4:	080106e9 	.word	0x080106e9
 80105e8:	080106e9 	.word	0x080106e9
 80105ec:	080106e9 	.word	0x080106e9
 80105f0:	080106e9 	.word	0x080106e9
 80105f4:	080106e9 	.word	0x080106e9
 80105f8:	080106e9 	.word	0x080106e9
 80105fc:	080106e9 	.word	0x080106e9
 8010600:	080106db 	.word	0x080106db
 8010604:	080106e9 	.word	0x080106e9
 8010608:	080106e9 	.word	0x080106e9
 801060c:	080106e9 	.word	0x080106e9
 8010610:	080106e9 	.word	0x080106e9
 8010614:	080106e9 	.word	0x080106e9
 8010618:	080106e9 	.word	0x080106e9
 801061c:	080106e9 	.word	0x080106e9
 8010620:	080106e9 	.word	0x080106e9
 8010624:	080106e9 	.word	0x080106e9
 8010628:	080106e9 	.word	0x080106e9
 801062c:	080106e9 	.word	0x080106e9
 8010630:	080106e9 	.word	0x080106e9
 8010634:	080106e9 	.word	0x080106e9
 8010638:	080106e9 	.word	0x080106e9
 801063c:	080106e9 	.word	0x080106e9
 8010640:	080106e9 	.word	0x080106e9
 8010644:	080106e9 	.word	0x080106e9
 8010648:	080106e9 	.word	0x080106e9
 801064c:	080106e9 	.word	0x080106e9
 8010650:	080106e9 	.word	0x080106e9
 8010654:	080106e9 	.word	0x080106e9
 8010658:	080106e9 	.word	0x080106e9
 801065c:	080106e9 	.word	0x080106e9
 8010660:	080106e9 	.word	0x080106e9
 8010664:	080106e9 	.word	0x080106e9
 8010668:	080106e9 	.word	0x080106e9
 801066c:	080106e9 	.word	0x080106e9
 8010670:	080106e9 	.word	0x080106e9
 8010674:	080106e9 	.word	0x080106e9
 8010678:	080106e9 	.word	0x080106e9
 801067c:	080106e9 	.word	0x080106e9
 8010680:	080106e1 	.word	0x080106e1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010684:	f7f9 ffee 	bl	800a664 <HAL_RCC_GetPCLK1Freq>
 8010688:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 801068a:	e033      	b.n	80106f4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801068c:	f7fa f800 	bl	800a690 <HAL_RCC_GetPCLK2Freq>
 8010690:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010692:	e02f      	b.n	80106f4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010694:	f107 0314 	add.w	r3, r7, #20
 8010698:	4618      	mov	r0, r3
 801069a:	f7fb f9a7 	bl	800b9ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801069e:	69bb      	ldr	r3, [r7, #24]
 80106a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80106a2:	e027      	b.n	80106f4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80106a4:	f107 0308 	add.w	r3, r7, #8
 80106a8:	4618      	mov	r0, r3
 80106aa:	f7fb faeb 	bl	800bc84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80106b2:	e01f      	b.n	80106f4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80106b4:	4b2b      	ldr	r3, [pc, #172]	; (8010764 <UART_SetConfig+0x94c>)
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	f003 0320 	and.w	r3, r3, #32
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d009      	beq.n	80106d4 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80106c0:	4b28      	ldr	r3, [pc, #160]	; (8010764 <UART_SetConfig+0x94c>)
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	08db      	lsrs	r3, r3, #3
 80106c6:	f003 0303 	and.w	r3, r3, #3
 80106ca:	4a27      	ldr	r2, [pc, #156]	; (8010768 <UART_SetConfig+0x950>)
 80106cc:	fa22 f303 	lsr.w	r3, r2, r3
 80106d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80106d2:	e00f      	b.n	80106f4 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 80106d4:	4b24      	ldr	r3, [pc, #144]	; (8010768 <UART_SetConfig+0x950>)
 80106d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80106d8:	e00c      	b.n	80106f4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80106da:	4b24      	ldr	r3, [pc, #144]	; (801076c <UART_SetConfig+0x954>)
 80106dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80106de:	e009      	b.n	80106f4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80106e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80106e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80106e6:	e005      	b.n	80106f4 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 80106e8:	2300      	movs	r3, #0
 80106ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80106ec:	2301      	movs	r3, #1
 80106ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80106f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80106f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	f000 8121 	beq.w	801093e <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010700:	4a17      	ldr	r2, [pc, #92]	; (8010760 <UART_SetConfig+0x948>)
 8010702:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010706:	461a      	mov	r2, r3
 8010708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801070a:	fbb3 f3f2 	udiv	r3, r3, r2
 801070e:	005a      	lsls	r2, r3, #1
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	685b      	ldr	r3, [r3, #4]
 8010714:	085b      	lsrs	r3, r3, #1
 8010716:	441a      	add	r2, r3
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	685b      	ldr	r3, [r3, #4]
 801071c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010720:	b29b      	uxth	r3, r3
 8010722:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010726:	2b0f      	cmp	r3, #15
 8010728:	d916      	bls.n	8010758 <UART_SetConfig+0x940>
 801072a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801072c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010730:	d212      	bcs.n	8010758 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010734:	b29b      	uxth	r3, r3
 8010736:	f023 030f 	bic.w	r3, r3, #15
 801073a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801073c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801073e:	085b      	lsrs	r3, r3, #1
 8010740:	b29b      	uxth	r3, r3
 8010742:	f003 0307 	and.w	r3, r3, #7
 8010746:	b29a      	uxth	r2, r3
 8010748:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801074a:	4313      	orrs	r3, r2
 801074c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010754:	60da      	str	r2, [r3, #12]
 8010756:	e0f2      	b.n	801093e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8010758:	2301      	movs	r3, #1
 801075a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 801075e:	e0ee      	b.n	801093e <UART_SetConfig+0xb26>
 8010760:	0801af78 	.word	0x0801af78
 8010764:	58024400 	.word	0x58024400
 8010768:	03d09000 	.word	0x03d09000
 801076c:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8010770:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010774:	2b40      	cmp	r3, #64	; 0x40
 8010776:	f200 80b7 	bhi.w	80108e8 <UART_SetConfig+0xad0>
 801077a:	a201      	add	r2, pc, #4	; (adr r2, 8010780 <UART_SetConfig+0x968>)
 801077c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010780:	08010885 	.word	0x08010885
 8010784:	0801088d 	.word	0x0801088d
 8010788:	080108e9 	.word	0x080108e9
 801078c:	080108e9 	.word	0x080108e9
 8010790:	08010895 	.word	0x08010895
 8010794:	080108e9 	.word	0x080108e9
 8010798:	080108e9 	.word	0x080108e9
 801079c:	080108e9 	.word	0x080108e9
 80107a0:	080108a5 	.word	0x080108a5
 80107a4:	080108e9 	.word	0x080108e9
 80107a8:	080108e9 	.word	0x080108e9
 80107ac:	080108e9 	.word	0x080108e9
 80107b0:	080108e9 	.word	0x080108e9
 80107b4:	080108e9 	.word	0x080108e9
 80107b8:	080108e9 	.word	0x080108e9
 80107bc:	080108e9 	.word	0x080108e9
 80107c0:	080108b5 	.word	0x080108b5
 80107c4:	080108e9 	.word	0x080108e9
 80107c8:	080108e9 	.word	0x080108e9
 80107cc:	080108e9 	.word	0x080108e9
 80107d0:	080108e9 	.word	0x080108e9
 80107d4:	080108e9 	.word	0x080108e9
 80107d8:	080108e9 	.word	0x080108e9
 80107dc:	080108e9 	.word	0x080108e9
 80107e0:	080108e9 	.word	0x080108e9
 80107e4:	080108e9 	.word	0x080108e9
 80107e8:	080108e9 	.word	0x080108e9
 80107ec:	080108e9 	.word	0x080108e9
 80107f0:	080108e9 	.word	0x080108e9
 80107f4:	080108e9 	.word	0x080108e9
 80107f8:	080108e9 	.word	0x080108e9
 80107fc:	080108e9 	.word	0x080108e9
 8010800:	080108db 	.word	0x080108db
 8010804:	080108e9 	.word	0x080108e9
 8010808:	080108e9 	.word	0x080108e9
 801080c:	080108e9 	.word	0x080108e9
 8010810:	080108e9 	.word	0x080108e9
 8010814:	080108e9 	.word	0x080108e9
 8010818:	080108e9 	.word	0x080108e9
 801081c:	080108e9 	.word	0x080108e9
 8010820:	080108e9 	.word	0x080108e9
 8010824:	080108e9 	.word	0x080108e9
 8010828:	080108e9 	.word	0x080108e9
 801082c:	080108e9 	.word	0x080108e9
 8010830:	080108e9 	.word	0x080108e9
 8010834:	080108e9 	.word	0x080108e9
 8010838:	080108e9 	.word	0x080108e9
 801083c:	080108e9 	.word	0x080108e9
 8010840:	080108e9 	.word	0x080108e9
 8010844:	080108e9 	.word	0x080108e9
 8010848:	080108e9 	.word	0x080108e9
 801084c:	080108e9 	.word	0x080108e9
 8010850:	080108e9 	.word	0x080108e9
 8010854:	080108e9 	.word	0x080108e9
 8010858:	080108e9 	.word	0x080108e9
 801085c:	080108e9 	.word	0x080108e9
 8010860:	080108e9 	.word	0x080108e9
 8010864:	080108e9 	.word	0x080108e9
 8010868:	080108e9 	.word	0x080108e9
 801086c:	080108e9 	.word	0x080108e9
 8010870:	080108e9 	.word	0x080108e9
 8010874:	080108e9 	.word	0x080108e9
 8010878:	080108e9 	.word	0x080108e9
 801087c:	080108e9 	.word	0x080108e9
 8010880:	080108e1 	.word	0x080108e1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010884:	f7f9 feee 	bl	800a664 <HAL_RCC_GetPCLK1Freq>
 8010888:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 801088a:	e033      	b.n	80108f4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801088c:	f7f9 ff00 	bl	800a690 <HAL_RCC_GetPCLK2Freq>
 8010890:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010892:	e02f      	b.n	80108f4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010894:	f107 0314 	add.w	r3, r7, #20
 8010898:	4618      	mov	r0, r3
 801089a:	f7fb f8a7 	bl	800b9ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801089e:	69bb      	ldr	r3, [r7, #24]
 80108a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80108a2:	e027      	b.n	80108f4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80108a4:	f107 0308 	add.w	r3, r7, #8
 80108a8:	4618      	mov	r0, r3
 80108aa:	f7fb f9eb 	bl	800bc84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80108b2:	e01f      	b.n	80108f4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80108b4:	4b2c      	ldr	r3, [pc, #176]	; (8010968 <UART_SetConfig+0xb50>)
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	f003 0320 	and.w	r3, r3, #32
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d009      	beq.n	80108d4 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80108c0:	4b29      	ldr	r3, [pc, #164]	; (8010968 <UART_SetConfig+0xb50>)
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	08db      	lsrs	r3, r3, #3
 80108c6:	f003 0303 	and.w	r3, r3, #3
 80108ca:	4a28      	ldr	r2, [pc, #160]	; (801096c <UART_SetConfig+0xb54>)
 80108cc:	fa22 f303 	lsr.w	r3, r2, r3
 80108d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80108d2:	e00f      	b.n	80108f4 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 80108d4:	4b25      	ldr	r3, [pc, #148]	; (801096c <UART_SetConfig+0xb54>)
 80108d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80108d8:	e00c      	b.n	80108f4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80108da:	4b25      	ldr	r3, [pc, #148]	; (8010970 <UART_SetConfig+0xb58>)
 80108dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80108de:	e009      	b.n	80108f4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80108e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80108e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80108e6:	e005      	b.n	80108f4 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 80108e8:	2300      	movs	r3, #0
 80108ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80108ec:	2301      	movs	r3, #1
 80108ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80108f2:	bf00      	nop
    }

    if (pclk != 0U)
 80108f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d021      	beq.n	801093e <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108fe:	4a1d      	ldr	r2, [pc, #116]	; (8010974 <UART_SetConfig+0xb5c>)
 8010900:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010904:	461a      	mov	r2, r3
 8010906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010908:	fbb3 f2f2 	udiv	r2, r3, r2
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	685b      	ldr	r3, [r3, #4]
 8010910:	085b      	lsrs	r3, r3, #1
 8010912:	441a      	add	r2, r3
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	685b      	ldr	r3, [r3, #4]
 8010918:	fbb2 f3f3 	udiv	r3, r2, r3
 801091c:	b29b      	uxth	r3, r3
 801091e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010922:	2b0f      	cmp	r3, #15
 8010924:	d908      	bls.n	8010938 <UART_SetConfig+0xb20>
 8010926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801092c:	d204      	bcs.n	8010938 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010934:	60da      	str	r2, [r3, #12]
 8010936:	e002      	b.n	801093e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8010938:	2301      	movs	r3, #1
 801093a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	2201      	movs	r2, #1
 8010942:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	2201      	movs	r2, #1
 801094a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	2200      	movs	r2, #0
 8010952:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	2200      	movs	r2, #0
 8010958:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 801095a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 801095e:	4618      	mov	r0, r3
 8010960:	3738      	adds	r7, #56	; 0x38
 8010962:	46bd      	mov	sp, r7
 8010964:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8010968:	58024400 	.word	0x58024400
 801096c:	03d09000 	.word	0x03d09000
 8010970:	003d0900 	.word	0x003d0900
 8010974:	0801af78 	.word	0x0801af78

08010978 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010978:	b480      	push	{r7}
 801097a:	b083      	sub	sp, #12
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010984:	f003 0301 	and.w	r3, r3, #1
 8010988:	2b00      	cmp	r3, #0
 801098a:	d00a      	beq.n	80109a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	685b      	ldr	r3, [r3, #4]
 8010992:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	430a      	orrs	r2, r1
 80109a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109a6:	f003 0302 	and.w	r3, r3, #2
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d00a      	beq.n	80109c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	685b      	ldr	r3, [r3, #4]
 80109b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	430a      	orrs	r2, r1
 80109c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109c8:	f003 0304 	and.w	r3, r3, #4
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d00a      	beq.n	80109e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	685b      	ldr	r3, [r3, #4]
 80109d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	430a      	orrs	r2, r1
 80109e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109ea:	f003 0308 	and.w	r3, r3, #8
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d00a      	beq.n	8010a08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	685b      	ldr	r3, [r3, #4]
 80109f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	430a      	orrs	r2, r1
 8010a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a0c:	f003 0310 	and.w	r3, r3, #16
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d00a      	beq.n	8010a2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	689b      	ldr	r3, [r3, #8]
 8010a1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	430a      	orrs	r2, r1
 8010a28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a2e:	f003 0320 	and.w	r3, r3, #32
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d00a      	beq.n	8010a4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	689b      	ldr	r3, [r3, #8]
 8010a3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	430a      	orrs	r2, r1
 8010a4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d01a      	beq.n	8010a8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	685b      	ldr	r3, [r3, #4]
 8010a5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	430a      	orrs	r2, r1
 8010a6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010a76:	d10a      	bne.n	8010a8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	685b      	ldr	r3, [r3, #4]
 8010a7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	430a      	orrs	r2, r1
 8010a8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d00a      	beq.n	8010ab0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	685b      	ldr	r3, [r3, #4]
 8010aa0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	430a      	orrs	r2, r1
 8010aae:	605a      	str	r2, [r3, #4]
  }
}
 8010ab0:	bf00      	nop
 8010ab2:	370c      	adds	r7, #12
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aba:	4770      	bx	lr

08010abc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010abc:	b580      	push	{r7, lr}
 8010abe:	b086      	sub	sp, #24
 8010ac0:	af02      	add	r7, sp, #8
 8010ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8010acc:	f7f3 fd8a 	bl	80045e4 <HAL_GetTick>
 8010ad0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	f003 0308 	and.w	r3, r3, #8
 8010adc:	2b08      	cmp	r3, #8
 8010ade:	d10e      	bne.n	8010afe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010ae0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010ae4:	9300      	str	r3, [sp, #0]
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	2200      	movs	r2, #0
 8010aea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010aee:	6878      	ldr	r0, [r7, #4]
 8010af0:	f000 f82c 	bl	8010b4c <UART_WaitOnFlagUntilTimeout>
 8010af4:	4603      	mov	r3, r0
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d001      	beq.n	8010afe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010afa:	2303      	movs	r3, #3
 8010afc:	e022      	b.n	8010b44 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	f003 0304 	and.w	r3, r3, #4
 8010b08:	2b04      	cmp	r3, #4
 8010b0a:	d10e      	bne.n	8010b2a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010b0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010b10:	9300      	str	r3, [sp, #0]
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	2200      	movs	r2, #0
 8010b16:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010b1a:	6878      	ldr	r0, [r7, #4]
 8010b1c:	f000 f816 	bl	8010b4c <UART_WaitOnFlagUntilTimeout>
 8010b20:	4603      	mov	r3, r0
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d001      	beq.n	8010b2a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010b26:	2303      	movs	r3, #3
 8010b28:	e00c      	b.n	8010b44 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	2220      	movs	r2, #32
 8010b2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	2220      	movs	r2, #32
 8010b36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	2200      	movs	r2, #0
 8010b3e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010b42:	2300      	movs	r3, #0
}
 8010b44:	4618      	mov	r0, r3
 8010b46:	3710      	adds	r7, #16
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	bd80      	pop	{r7, pc}

08010b4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b084      	sub	sp, #16
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	60f8      	str	r0, [r7, #12]
 8010b54:	60b9      	str	r1, [r7, #8]
 8010b56:	603b      	str	r3, [r7, #0]
 8010b58:	4613      	mov	r3, r2
 8010b5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010b5c:	e062      	b.n	8010c24 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010b5e:	69bb      	ldr	r3, [r7, #24]
 8010b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b64:	d05e      	beq.n	8010c24 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010b66:	f7f3 fd3d 	bl	80045e4 <HAL_GetTick>
 8010b6a:	4602      	mov	r2, r0
 8010b6c:	683b      	ldr	r3, [r7, #0]
 8010b6e:	1ad3      	subs	r3, r2, r3
 8010b70:	69ba      	ldr	r2, [r7, #24]
 8010b72:	429a      	cmp	r2, r3
 8010b74:	d302      	bcc.n	8010b7c <UART_WaitOnFlagUntilTimeout+0x30>
 8010b76:	69bb      	ldr	r3, [r7, #24]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d11d      	bne.n	8010bb8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	681a      	ldr	r2, [r3, #0]
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010b8a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	689a      	ldr	r2, [r3, #8]
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	f022 0201 	bic.w	r2, r2, #1
 8010b9a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	2220      	movs	r2, #32
 8010ba0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	2220      	movs	r2, #32
 8010ba8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	2200      	movs	r2, #0
 8010bb0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8010bb4:	2303      	movs	r3, #3
 8010bb6:	e045      	b.n	8010c44 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	f003 0304 	and.w	r3, r3, #4
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d02e      	beq.n	8010c24 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	69db      	ldr	r3, [r3, #28]
 8010bcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010bd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010bd4:	d126      	bne.n	8010c24 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010bde:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	681a      	ldr	r2, [r3, #0]
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010bee:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	689a      	ldr	r2, [r3, #8]
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	f022 0201 	bic.w	r2, r2, #1
 8010bfe:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	2220      	movs	r2, #32
 8010c04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	2220      	movs	r2, #32
 8010c0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	2220      	movs	r2, #32
 8010c14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	2200      	movs	r2, #0
 8010c1c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8010c20:	2303      	movs	r3, #3
 8010c22:	e00f      	b.n	8010c44 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	69da      	ldr	r2, [r3, #28]
 8010c2a:	68bb      	ldr	r3, [r7, #8]
 8010c2c:	4013      	ands	r3, r2
 8010c2e:	68ba      	ldr	r2, [r7, #8]
 8010c30:	429a      	cmp	r2, r3
 8010c32:	bf0c      	ite	eq
 8010c34:	2301      	moveq	r3, #1
 8010c36:	2300      	movne	r3, #0
 8010c38:	b2db      	uxtb	r3, r3
 8010c3a:	461a      	mov	r2, r3
 8010c3c:	79fb      	ldrb	r3, [r7, #7]
 8010c3e:	429a      	cmp	r2, r3
 8010c40:	d08d      	beq.n	8010b5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010c42:	2300      	movs	r3, #0
}
 8010c44:	4618      	mov	r0, r3
 8010c46:	3710      	adds	r7, #16
 8010c48:	46bd      	mov	sp, r7
 8010c4a:	bd80      	pop	{r7, pc}

08010c4c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010c4c:	b480      	push	{r7}
 8010c4e:	b083      	sub	sp, #12
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	681a      	ldr	r2, [r3, #0]
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8010c62:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	689a      	ldr	r2, [r3, #8]
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8010c72:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	2220      	movs	r2, #32
 8010c78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8010c7c:	bf00      	nop
 8010c7e:	370c      	adds	r7, #12
 8010c80:	46bd      	mov	sp, r7
 8010c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c86:	4770      	bx	lr

08010c88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010c88:	b480      	push	{r7}
 8010c8a:	b083      	sub	sp, #12
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	681a      	ldr	r2, [r3, #0]
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010c9e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	6899      	ldr	r1, [r3, #8]
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	681a      	ldr	r2, [r3, #0]
 8010caa:	4b08      	ldr	r3, [pc, #32]	; (8010ccc <UART_EndRxTransfer+0x44>)
 8010cac:	400b      	ands	r3, r1
 8010cae:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	2220      	movs	r2, #32
 8010cb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	2200      	movs	r2, #0
 8010cbc:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8010cbe:	bf00      	nop
 8010cc0:	370c      	adds	r7, #12
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc8:	4770      	bx	lr
 8010cca:	bf00      	nop
 8010ccc:	effffffe 	.word	0xeffffffe

08010cd0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b084      	sub	sp, #16
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cdc:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	69db      	ldr	r3, [r3, #28]
 8010ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010ce6:	d01f      	beq.n	8010d28 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	2200      	movs	r2, #0
 8010cec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	681a      	ldr	r2, [r3, #0]
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010cfe:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	689a      	ldr	r2, [r3, #8]
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	f022 0201 	bic.w	r2, r2, #1
 8010d0e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	689a      	ldr	r2, [r3, #8]
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010d1e:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	2220      	movs	r2, #32
 8010d24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8010d28:	68f8      	ldr	r0, [r7, #12]
 8010d2a:	f7ff f861 	bl	800fdf0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010d2e:	bf00      	nop
 8010d30:	3710      	adds	r7, #16
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd80      	pop	{r7, pc}

08010d36 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010d36:	b580      	push	{r7, lr}
 8010d38:	b084      	sub	sp, #16
 8010d3a:	af00      	add	r7, sp, #0
 8010d3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d42:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8010d44:	68f8      	ldr	r0, [r7, #12]
 8010d46:	f7ef fef1 	bl	8000b2c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010d4a:	bf00      	nop
 8010d4c:	3710      	adds	r7, #16
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	bd80      	pop	{r7, pc}

08010d52 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010d52:	b580      	push	{r7, lr}
 8010d54:	b086      	sub	sp, #24
 8010d56:	af00      	add	r7, sp, #0
 8010d58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d5e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010d60:	697b      	ldr	r3, [r7, #20]
 8010d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d66:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010d68:	697b      	ldr	r3, [r7, #20]
 8010d6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010d6e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010d70:	697b      	ldr	r3, [r7, #20]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	689b      	ldr	r3, [r3, #8]
 8010d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d7a:	2b80      	cmp	r3, #128	; 0x80
 8010d7c:	d109      	bne.n	8010d92 <UART_DMAError+0x40>
 8010d7e:	693b      	ldr	r3, [r7, #16]
 8010d80:	2b21      	cmp	r3, #33	; 0x21
 8010d82:	d106      	bne.n	8010d92 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010d84:	697b      	ldr	r3, [r7, #20]
 8010d86:	2200      	movs	r2, #0
 8010d88:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8010d8c:	6978      	ldr	r0, [r7, #20]
 8010d8e:	f7ff ff5d 	bl	8010c4c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010d92:	697b      	ldr	r3, [r7, #20]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	689b      	ldr	r3, [r3, #8]
 8010d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d9c:	2b40      	cmp	r3, #64	; 0x40
 8010d9e:	d109      	bne.n	8010db4 <UART_DMAError+0x62>
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	2b22      	cmp	r3, #34	; 0x22
 8010da4:	d106      	bne.n	8010db4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010da6:	697b      	ldr	r3, [r7, #20]
 8010da8:	2200      	movs	r2, #0
 8010daa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8010dae:	6978      	ldr	r0, [r7, #20]
 8010db0:	f7ff ff6a 	bl	8010c88 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010db4:	697b      	ldr	r3, [r7, #20]
 8010db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010dba:	f043 0210 	orr.w	r2, r3, #16
 8010dbe:	697b      	ldr	r3, [r7, #20]
 8010dc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010dc4:	6978      	ldr	r0, [r7, #20]
 8010dc6:	f7ff f81d 	bl	800fe04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010dca:	bf00      	nop
 8010dcc:	3718      	adds	r7, #24
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	bd80      	pop	{r7, pc}

08010dd2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010dd2:	b480      	push	{r7}
 8010dd4:	b085      	sub	sp, #20
 8010dd6:	af00      	add	r7, sp, #0
 8010dd8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010de0:	2b01      	cmp	r3, #1
 8010de2:	d101      	bne.n	8010de8 <HAL_UARTEx_DisableFifoMode+0x16>
 8010de4:	2302      	movs	r3, #2
 8010de6:	e027      	b.n	8010e38 <HAL_UARTEx_DisableFifoMode+0x66>
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	2201      	movs	r2, #1
 8010dec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	2224      	movs	r2, #36	; 0x24
 8010df4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	681a      	ldr	r2, [r3, #0]
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	f022 0201 	bic.w	r2, r2, #1
 8010e0e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010e16:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	68fa      	ldr	r2, [r7, #12]
 8010e24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	2220      	movs	r2, #32
 8010e2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	2200      	movs	r2, #0
 8010e32:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010e36:	2300      	movs	r3, #0
}
 8010e38:	4618      	mov	r0, r3
 8010e3a:	3714      	adds	r7, #20
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e42:	4770      	bx	lr

08010e44 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010e44:	b580      	push	{r7, lr}
 8010e46:	b084      	sub	sp, #16
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	6078      	str	r0, [r7, #4]
 8010e4c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010e54:	2b01      	cmp	r3, #1
 8010e56:	d101      	bne.n	8010e5c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010e58:	2302      	movs	r3, #2
 8010e5a:	e02d      	b.n	8010eb8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	2201      	movs	r2, #1
 8010e60:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	2224      	movs	r2, #36	; 0x24
 8010e68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	681a      	ldr	r2, [r3, #0]
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	f022 0201 	bic.w	r2, r2, #1
 8010e82:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	689b      	ldr	r3, [r3, #8]
 8010e8a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	683a      	ldr	r2, [r7, #0]
 8010e94:	430a      	orrs	r2, r1
 8010e96:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010e98:	6878      	ldr	r0, [r7, #4]
 8010e9a:	f000 f84f 	bl	8010f3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	68fa      	ldr	r2, [r7, #12]
 8010ea4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	2220      	movs	r2, #32
 8010eaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010eb6:	2300      	movs	r3, #0
}
 8010eb8:	4618      	mov	r0, r3
 8010eba:	3710      	adds	r7, #16
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	bd80      	pop	{r7, pc}

08010ec0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b084      	sub	sp, #16
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
 8010ec8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010ed0:	2b01      	cmp	r3, #1
 8010ed2:	d101      	bne.n	8010ed8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010ed4:	2302      	movs	r3, #2
 8010ed6:	e02d      	b.n	8010f34 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	2201      	movs	r2, #1
 8010edc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	2224      	movs	r2, #36	; 0x24
 8010ee4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	681a      	ldr	r2, [r3, #0]
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	f022 0201 	bic.w	r2, r2, #1
 8010efe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	689b      	ldr	r3, [r3, #8]
 8010f06:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	683a      	ldr	r2, [r7, #0]
 8010f10:	430a      	orrs	r2, r1
 8010f12:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010f14:	6878      	ldr	r0, [r7, #4]
 8010f16:	f000 f811 	bl	8010f3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	68fa      	ldr	r2, [r7, #12]
 8010f20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	2220      	movs	r2, #32
 8010f26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	2200      	movs	r2, #0
 8010f2e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010f32:	2300      	movs	r3, #0
}
 8010f34:	4618      	mov	r0, r3
 8010f36:	3710      	adds	r7, #16
 8010f38:	46bd      	mov	sp, r7
 8010f3a:	bd80      	pop	{r7, pc}

08010f3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010f3c:	b480      	push	{r7}
 8010f3e:	b089      	sub	sp, #36	; 0x24
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8010f44:	4a2f      	ldr	r2, [pc, #188]	; (8011004 <UARTEx_SetNbDataToProcess+0xc8>)
 8010f46:	f107 0314 	add.w	r3, r7, #20
 8010f4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f4e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8010f52:	4a2d      	ldr	r2, [pc, #180]	; (8011008 <UARTEx_SetNbDataToProcess+0xcc>)
 8010f54:	f107 030c 	add.w	r3, r7, #12
 8010f58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f5c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d108      	bne.n	8010f7a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	2201      	movs	r2, #1
 8010f6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	2201      	movs	r2, #1
 8010f74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010f78:	e03d      	b.n	8010ff6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010f7a:	2310      	movs	r3, #16
 8010f7c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010f7e:	2310      	movs	r3, #16
 8010f80:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	689b      	ldr	r3, [r3, #8]
 8010f88:	0e5b      	lsrs	r3, r3, #25
 8010f8a:	b2db      	uxtb	r3, r3
 8010f8c:	f003 0307 	and.w	r3, r3, #7
 8010f90:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	689b      	ldr	r3, [r3, #8]
 8010f98:	0f5b      	lsrs	r3, r3, #29
 8010f9a:	b2db      	uxtb	r3, r3
 8010f9c:	f003 0307 	and.w	r3, r3, #7
 8010fa0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8010fa2:	7fbb      	ldrb	r3, [r7, #30]
 8010fa4:	7f3a      	ldrb	r2, [r7, #28]
 8010fa6:	f107 0120 	add.w	r1, r7, #32
 8010faa:	440a      	add	r2, r1
 8010fac:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8010fb0:	fb02 f303 	mul.w	r3, r2, r3
 8010fb4:	7f3a      	ldrb	r2, [r7, #28]
 8010fb6:	f107 0120 	add.w	r1, r7, #32
 8010fba:	440a      	add	r2, r1
 8010fbc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8010fc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8010fc4:	b29a      	uxth	r2, r3
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8010fcc:	7ffb      	ldrb	r3, [r7, #31]
 8010fce:	7f7a      	ldrb	r2, [r7, #29]
 8010fd0:	f107 0120 	add.w	r1, r7, #32
 8010fd4:	440a      	add	r2, r1
 8010fd6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8010fda:	fb02 f303 	mul.w	r3, r2, r3
 8010fde:	7f7a      	ldrb	r2, [r7, #29]
 8010fe0:	f107 0120 	add.w	r1, r7, #32
 8010fe4:	440a      	add	r2, r1
 8010fe6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8010fea:	fb93 f3f2 	sdiv	r3, r3, r2
 8010fee:	b29a      	uxth	r2, r3
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010ff6:	bf00      	nop
 8010ff8:	3724      	adds	r7, #36	; 0x24
 8010ffa:	46bd      	mov	sp, r7
 8010ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011000:	4770      	bx	lr
 8011002:	bf00      	nop
 8011004:	0801aeb8 	.word	0x0801aeb8
 8011008:	0801aec0 	.word	0x0801aec0

0801100c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 801100c:	b084      	sub	sp, #16
 801100e:	b480      	push	{r7}
 8011010:	b085      	sub	sp, #20
 8011012:	af00      	add	r7, sp, #0
 8011014:	6078      	str	r0, [r7, #4]
 8011016:	f107 001c 	add.w	r0, r7, #28
 801101a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801101e:	2300      	movs	r3, #0
 8011020:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8011022:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8011024:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8011026:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8011028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 801102a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 801102c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 801102e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8011032:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8011034:	68fa      	ldr	r2, [r7, #12]
 8011036:	4313      	orrs	r3, r2
 8011038:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	685a      	ldr	r2, [r3, #4]
 801103e:	4b07      	ldr	r3, [pc, #28]	; (801105c <SDMMC_Init+0x50>)
 8011040:	4013      	ands	r3, r2
 8011042:	68fa      	ldr	r2, [r7, #12]
 8011044:	431a      	orrs	r2, r3
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801104a:	2300      	movs	r3, #0
}
 801104c:	4618      	mov	r0, r3
 801104e:	3714      	adds	r7, #20
 8011050:	46bd      	mov	sp, r7
 8011052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011056:	b004      	add	sp, #16
 8011058:	4770      	bx	lr
 801105a:	bf00      	nop
 801105c:	ffc02c00 	.word	0xffc02c00

08011060 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8011060:	b480      	push	{r7}
 8011062:	b083      	sub	sp, #12
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801106e:	4618      	mov	r0, r3
 8011070:	370c      	adds	r7, #12
 8011072:	46bd      	mov	sp, r7
 8011074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011078:	4770      	bx	lr

0801107a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 801107a:	b480      	push	{r7}
 801107c:	b083      	sub	sp, #12
 801107e:	af00      	add	r7, sp, #0
 8011080:	6078      	str	r0, [r7, #4]
 8011082:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8011084:	683b      	ldr	r3, [r7, #0]
 8011086:	681a      	ldr	r2, [r3, #0]
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801108e:	2300      	movs	r3, #0
}
 8011090:	4618      	mov	r0, r3
 8011092:	370c      	adds	r7, #12
 8011094:	46bd      	mov	sp, r7
 8011096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109a:	4770      	bx	lr

0801109c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 801109c:	b480      	push	{r7}
 801109e:	b083      	sub	sp, #12
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	f043 0203 	orr.w	r2, r3, #3
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80110b0:	2300      	movs	r3, #0
}
 80110b2:	4618      	mov	r0, r3
 80110b4:	370c      	adds	r7, #12
 80110b6:	46bd      	mov	sp, r7
 80110b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110bc:	4770      	bx	lr

080110be <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80110be:	b480      	push	{r7}
 80110c0:	b083      	sub	sp, #12
 80110c2:	af00      	add	r7, sp, #0
 80110c4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	f003 0303 	and.w	r3, r3, #3
}
 80110ce:	4618      	mov	r0, r3
 80110d0:	370c      	adds	r7, #12
 80110d2:	46bd      	mov	sp, r7
 80110d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d8:	4770      	bx	lr
	...

080110dc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80110dc:	b480      	push	{r7}
 80110de:	b085      	sub	sp, #20
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
 80110e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80110e6:	2300      	movs	r3, #0
 80110e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80110ea:	683b      	ldr	r3, [r7, #0]
 80110ec:	681a      	ldr	r2, [r3, #0]
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80110f2:	683b      	ldr	r3, [r7, #0]
 80110f4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80110f6:	683b      	ldr	r3, [r7, #0]
 80110f8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80110fa:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80110fc:	683b      	ldr	r3, [r7, #0]
 80110fe:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8011100:	431a      	orrs	r2, r3
                       Command->CPSM);
 8011102:	683b      	ldr	r3, [r7, #0]
 8011104:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8011106:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011108:	68fa      	ldr	r2, [r7, #12]
 801110a:	4313      	orrs	r3, r2
 801110c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	68da      	ldr	r2, [r3, #12]
 8011112:	4b06      	ldr	r3, [pc, #24]	; (801112c <SDMMC_SendCommand+0x50>)
 8011114:	4013      	ands	r3, r2
 8011116:	68fa      	ldr	r2, [r7, #12]
 8011118:	431a      	orrs	r2, r3
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801111e:	2300      	movs	r3, #0
}
 8011120:	4618      	mov	r0, r3
 8011122:	3714      	adds	r7, #20
 8011124:	46bd      	mov	sp, r7
 8011126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112a:	4770      	bx	lr
 801112c:	fffee0c0 	.word	0xfffee0c0

08011130 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8011130:	b480      	push	{r7}
 8011132:	b083      	sub	sp, #12
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	691b      	ldr	r3, [r3, #16]
 801113c:	b2db      	uxtb	r3, r3
}
 801113e:	4618      	mov	r0, r3
 8011140:	370c      	adds	r7, #12
 8011142:	46bd      	mov	sp, r7
 8011144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011148:	4770      	bx	lr

0801114a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 801114a:	b480      	push	{r7}
 801114c:	b085      	sub	sp, #20
 801114e:	af00      	add	r7, sp, #0
 8011150:	6078      	str	r0, [r7, #4]
 8011152:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	3314      	adds	r3, #20
 8011158:	461a      	mov	r2, r3
 801115a:	683b      	ldr	r3, [r7, #0]
 801115c:	4413      	add	r3, r2
 801115e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	681b      	ldr	r3, [r3, #0]
}
 8011164:	4618      	mov	r0, r3
 8011166:	3714      	adds	r7, #20
 8011168:	46bd      	mov	sp, r7
 801116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801116e:	4770      	bx	lr

08011170 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8011170:	b480      	push	{r7}
 8011172:	b085      	sub	sp, #20
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
 8011178:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801117a:	2300      	movs	r3, #0
 801117c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 801117e:	683b      	ldr	r3, [r7, #0]
 8011180:	681a      	ldr	r2, [r3, #0]
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8011186:	683b      	ldr	r3, [r7, #0]
 8011188:	685a      	ldr	r2, [r3, #4]
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801118e:	683b      	ldr	r3, [r7, #0]
 8011190:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8011192:	683b      	ldr	r3, [r7, #0]
 8011194:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011196:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8011198:	683b      	ldr	r3, [r7, #0]
 801119a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 801119c:	431a      	orrs	r2, r3
                       Data->DPSM);
 801119e:	683b      	ldr	r3, [r7, #0]
 80111a0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80111a2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80111a4:	68fa      	ldr	r2, [r7, #12]
 80111a6:	4313      	orrs	r3, r2
 80111a8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	431a      	orrs	r2, r3
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80111ba:	2300      	movs	r3, #0

}
 80111bc:	4618      	mov	r0, r3
 80111be:	3714      	adds	r7, #20
 80111c0:	46bd      	mov	sp, r7
 80111c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c6:	4770      	bx	lr

080111c8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80111c8:	b580      	push	{r7, lr}
 80111ca:	b088      	sub	sp, #32
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
 80111d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80111d2:	683b      	ldr	r3, [r7, #0]
 80111d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80111d6:	2310      	movs	r3, #16
 80111d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80111da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80111de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80111e0:	2300      	movs	r3, #0
 80111e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80111e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80111e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80111ea:	f107 0308 	add.w	r3, r7, #8
 80111ee:	4619      	mov	r1, r3
 80111f0:	6878      	ldr	r0, [r7, #4]
 80111f2:	f7ff ff73 	bl	80110dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80111f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80111fa:	2110      	movs	r1, #16
 80111fc:	6878      	ldr	r0, [r7, #4]
 80111fe:	f000 faaf 	bl	8011760 <SDMMC_GetCmdResp1>
 8011202:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011204:	69fb      	ldr	r3, [r7, #28]
}
 8011206:	4618      	mov	r0, r3
 8011208:	3720      	adds	r7, #32
 801120a:	46bd      	mov	sp, r7
 801120c:	bd80      	pop	{r7, pc}

0801120e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801120e:	b580      	push	{r7, lr}
 8011210:	b088      	sub	sp, #32
 8011212:	af00      	add	r7, sp, #0
 8011214:	6078      	str	r0, [r7, #4]
 8011216:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011218:	683b      	ldr	r3, [r7, #0]
 801121a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801121c:	2311      	movs	r3, #17
 801121e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011220:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011224:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011226:	2300      	movs	r3, #0
 8011228:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801122a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801122e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011230:	f107 0308 	add.w	r3, r7, #8
 8011234:	4619      	mov	r1, r3
 8011236:	6878      	ldr	r0, [r7, #4]
 8011238:	f7ff ff50 	bl	80110dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801123c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011240:	2111      	movs	r1, #17
 8011242:	6878      	ldr	r0, [r7, #4]
 8011244:	f000 fa8c 	bl	8011760 <SDMMC_GetCmdResp1>
 8011248:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801124a:	69fb      	ldr	r3, [r7, #28]
}
 801124c:	4618      	mov	r0, r3
 801124e:	3720      	adds	r7, #32
 8011250:	46bd      	mov	sp, r7
 8011252:	bd80      	pop	{r7, pc}

08011254 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b088      	sub	sp, #32
 8011258:	af00      	add	r7, sp, #0
 801125a:	6078      	str	r0, [r7, #4]
 801125c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801125e:	683b      	ldr	r3, [r7, #0]
 8011260:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8011262:	2312      	movs	r3, #18
 8011264:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011266:	f44f 7380 	mov.w	r3, #256	; 0x100
 801126a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801126c:	2300      	movs	r3, #0
 801126e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011270:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011274:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011276:	f107 0308 	add.w	r3, r7, #8
 801127a:	4619      	mov	r1, r3
 801127c:	6878      	ldr	r0, [r7, #4]
 801127e:	f7ff ff2d 	bl	80110dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011282:	f241 3288 	movw	r2, #5000	; 0x1388
 8011286:	2112      	movs	r1, #18
 8011288:	6878      	ldr	r0, [r7, #4]
 801128a:	f000 fa69 	bl	8011760 <SDMMC_GetCmdResp1>
 801128e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011290:	69fb      	ldr	r3, [r7, #28]
}
 8011292:	4618      	mov	r0, r3
 8011294:	3720      	adds	r7, #32
 8011296:	46bd      	mov	sp, r7
 8011298:	bd80      	pop	{r7, pc}

0801129a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801129a:	b580      	push	{r7, lr}
 801129c:	b088      	sub	sp, #32
 801129e:	af00      	add	r7, sp, #0
 80112a0:	6078      	str	r0, [r7, #4]
 80112a2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80112a4:	683b      	ldr	r3, [r7, #0]
 80112a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80112a8:	2318      	movs	r3, #24
 80112aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80112ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80112b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80112b2:	2300      	movs	r3, #0
 80112b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80112b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80112ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80112bc:	f107 0308 	add.w	r3, r7, #8
 80112c0:	4619      	mov	r1, r3
 80112c2:	6878      	ldr	r0, [r7, #4]
 80112c4:	f7ff ff0a 	bl	80110dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80112c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80112cc:	2118      	movs	r1, #24
 80112ce:	6878      	ldr	r0, [r7, #4]
 80112d0:	f000 fa46 	bl	8011760 <SDMMC_GetCmdResp1>
 80112d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80112d6:	69fb      	ldr	r3, [r7, #28]
}
 80112d8:	4618      	mov	r0, r3
 80112da:	3720      	adds	r7, #32
 80112dc:	46bd      	mov	sp, r7
 80112de:	bd80      	pop	{r7, pc}

080112e0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b088      	sub	sp, #32
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	6078      	str	r0, [r7, #4]
 80112e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80112ea:	683b      	ldr	r3, [r7, #0]
 80112ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80112ee:	2319      	movs	r3, #25
 80112f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80112f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80112f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80112f8:	2300      	movs	r3, #0
 80112fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80112fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011300:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011302:	f107 0308 	add.w	r3, r7, #8
 8011306:	4619      	mov	r1, r3
 8011308:	6878      	ldr	r0, [r7, #4]
 801130a:	f7ff fee7 	bl	80110dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801130e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011312:	2119      	movs	r1, #25
 8011314:	6878      	ldr	r0, [r7, #4]
 8011316:	f000 fa23 	bl	8011760 <SDMMC_GetCmdResp1>
 801131a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801131c:	69fb      	ldr	r3, [r7, #28]
}
 801131e:	4618      	mov	r0, r3
 8011320:	3720      	adds	r7, #32
 8011322:	46bd      	mov	sp, r7
 8011324:	bd80      	pop	{r7, pc}
	...

08011328 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8011328:	b580      	push	{r7, lr}
 801132a:	b088      	sub	sp, #32
 801132c:	af00      	add	r7, sp, #0
 801132e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8011330:	2300      	movs	r3, #0
 8011332:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8011334:	230c      	movs	r3, #12
 8011336:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011338:	f44f 7380 	mov.w	r3, #256	; 0x100
 801133c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801133e:	2300      	movs	r3, #0
 8011340:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011346:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	68db      	ldr	r3, [r3, #12]
 801134c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	68db      	ldr	r3, [r3, #12]
 8011358:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011360:	f107 0308 	add.w	r3, r7, #8
 8011364:	4619      	mov	r1, r3
 8011366:	6878      	ldr	r0, [r7, #4]
 8011368:	f7ff feb8 	bl	80110dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 801136c:	4a0b      	ldr	r2, [pc, #44]	; (801139c <SDMMC_CmdStopTransfer+0x74>)
 801136e:	210c      	movs	r1, #12
 8011370:	6878      	ldr	r0, [r7, #4]
 8011372:	f000 f9f5 	bl	8011760 <SDMMC_GetCmdResp1>
 8011376:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	68db      	ldr	r3, [r3, #12]
 801137c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8011384:	69fb      	ldr	r3, [r7, #28]
 8011386:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801138a:	d101      	bne.n	8011390 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 801138c:	2300      	movs	r3, #0
 801138e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8011390:	69fb      	ldr	r3, [r7, #28]
}
 8011392:	4618      	mov	r0, r3
 8011394:	3720      	adds	r7, #32
 8011396:	46bd      	mov	sp, r7
 8011398:	bd80      	pop	{r7, pc}
 801139a:	bf00      	nop
 801139c:	05f5e100 	.word	0x05f5e100

080113a0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b08a      	sub	sp, #40	; 0x28
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	60f8      	str	r0, [r7, #12]
 80113a8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80113ac:	683b      	ldr	r3, [r7, #0]
 80113ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80113b0:	2307      	movs	r3, #7
 80113b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80113b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80113b8:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80113ba:	2300      	movs	r3, #0
 80113bc:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80113be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80113c2:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80113c4:	f107 0310 	add.w	r3, r7, #16
 80113c8:	4619      	mov	r1, r3
 80113ca:	68f8      	ldr	r0, [r7, #12]
 80113cc:	f7ff fe86 	bl	80110dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80113d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80113d4:	2107      	movs	r1, #7
 80113d6:	68f8      	ldr	r0, [r7, #12]
 80113d8:	f000 f9c2 	bl	8011760 <SDMMC_GetCmdResp1>
 80113dc:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80113de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80113e0:	4618      	mov	r0, r3
 80113e2:	3728      	adds	r7, #40	; 0x28
 80113e4:	46bd      	mov	sp, r7
 80113e6:	bd80      	pop	{r7, pc}

080113e8 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b088      	sub	sp, #32
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80113f0:	2300      	movs	r3, #0
 80113f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80113f4:	2300      	movs	r3, #0
 80113f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80113f8:	2300      	movs	r3, #0
 80113fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80113fc:	2300      	movs	r3, #0
 80113fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011404:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011406:	f107 0308 	add.w	r3, r7, #8
 801140a:	4619      	mov	r1, r3
 801140c:	6878      	ldr	r0, [r7, #4]
 801140e:	f7ff fe65 	bl	80110dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8011412:	6878      	ldr	r0, [r7, #4]
 8011414:	f000 f976 	bl	8011704 <SDMMC_GetCmdError>
 8011418:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801141a:	69fb      	ldr	r3, [r7, #28]
}
 801141c:	4618      	mov	r0, r3
 801141e:	3720      	adds	r7, #32
 8011420:	46bd      	mov	sp, r7
 8011422:	bd80      	pop	{r7, pc}

08011424 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8011424:	b580      	push	{r7, lr}
 8011426:	b088      	sub	sp, #32
 8011428:	af00      	add	r7, sp, #0
 801142a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801142c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8011430:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8011432:	2308      	movs	r3, #8
 8011434:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011436:	f44f 7380 	mov.w	r3, #256	; 0x100
 801143a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801143c:	2300      	movs	r3, #0
 801143e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011440:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011444:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011446:	f107 0308 	add.w	r3, r7, #8
 801144a:	4619      	mov	r1, r3
 801144c:	6878      	ldr	r0, [r7, #4]
 801144e:	f7ff fe45 	bl	80110dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8011452:	6878      	ldr	r0, [r7, #4]
 8011454:	f000 fb78 	bl	8011b48 <SDMMC_GetCmdResp7>
 8011458:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801145a:	69fb      	ldr	r3, [r7, #28]
}
 801145c:	4618      	mov	r0, r3
 801145e:	3720      	adds	r7, #32
 8011460:	46bd      	mov	sp, r7
 8011462:	bd80      	pop	{r7, pc}

08011464 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011464:	b580      	push	{r7, lr}
 8011466:	b088      	sub	sp, #32
 8011468:	af00      	add	r7, sp, #0
 801146a:	6078      	str	r0, [r7, #4]
 801146c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801146e:	683b      	ldr	r3, [r7, #0]
 8011470:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8011472:	2337      	movs	r3, #55	; 0x37
 8011474:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011476:	f44f 7380 	mov.w	r3, #256	; 0x100
 801147a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801147c:	2300      	movs	r3, #0
 801147e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011480:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011484:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011486:	f107 0308 	add.w	r3, r7, #8
 801148a:	4619      	mov	r1, r3
 801148c:	6878      	ldr	r0, [r7, #4]
 801148e:	f7ff fe25 	bl	80110dc <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8011492:	f241 3288 	movw	r2, #5000	; 0x1388
 8011496:	2137      	movs	r1, #55	; 0x37
 8011498:	6878      	ldr	r0, [r7, #4]
 801149a:	f000 f961 	bl	8011760 <SDMMC_GetCmdResp1>
 801149e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80114a0:	69fb      	ldr	r3, [r7, #28]
}
 80114a2:	4618      	mov	r0, r3
 80114a4:	3720      	adds	r7, #32
 80114a6:	46bd      	mov	sp, r7
 80114a8:	bd80      	pop	{r7, pc}

080114aa <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80114aa:	b580      	push	{r7, lr}
 80114ac:	b088      	sub	sp, #32
 80114ae:	af00      	add	r7, sp, #0
 80114b0:	6078      	str	r0, [r7, #4]
 80114b2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80114b4:	683b      	ldr	r3, [r7, #0]
 80114b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80114b8:	2329      	movs	r3, #41	; 0x29
 80114ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80114bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80114c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80114c2:	2300      	movs	r3, #0
 80114c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80114c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80114ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80114cc:	f107 0308 	add.w	r3, r7, #8
 80114d0:	4619      	mov	r1, r3
 80114d2:	6878      	ldr	r0, [r7, #4]
 80114d4:	f7ff fe02 	bl	80110dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80114d8:	6878      	ldr	r0, [r7, #4]
 80114da:	f000 fa7d 	bl	80119d8 <SDMMC_GetCmdResp3>
 80114de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80114e0:	69fb      	ldr	r3, [r7, #28]
}
 80114e2:	4618      	mov	r0, r3
 80114e4:	3720      	adds	r7, #32
 80114e6:	46bd      	mov	sp, r7
 80114e8:	bd80      	pop	{r7, pc}

080114ea <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80114ea:	b580      	push	{r7, lr}
 80114ec:	b088      	sub	sp, #32
 80114ee:	af00      	add	r7, sp, #0
 80114f0:	6078      	str	r0, [r7, #4]
 80114f2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80114f4:	683b      	ldr	r3, [r7, #0]
 80114f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80114f8:	2306      	movs	r3, #6
 80114fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80114fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011500:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011502:	2300      	movs	r3, #0
 8011504:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011506:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801150a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801150c:	f107 0308 	add.w	r3, r7, #8
 8011510:	4619      	mov	r1, r3
 8011512:	6878      	ldr	r0, [r7, #4]
 8011514:	f7ff fde2 	bl	80110dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8011518:	f241 3288 	movw	r2, #5000	; 0x1388
 801151c:	2106      	movs	r1, #6
 801151e:	6878      	ldr	r0, [r7, #4]
 8011520:	f000 f91e 	bl	8011760 <SDMMC_GetCmdResp1>
 8011524:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011526:	69fb      	ldr	r3, [r7, #28]
}
 8011528:	4618      	mov	r0, r3
 801152a:	3720      	adds	r7, #32
 801152c:	46bd      	mov	sp, r7
 801152e:	bd80      	pop	{r7, pc}

08011530 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8011530:	b580      	push	{r7, lr}
 8011532:	b088      	sub	sp, #32
 8011534:	af00      	add	r7, sp, #0
 8011536:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8011538:	2300      	movs	r3, #0
 801153a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801153c:	2333      	movs	r3, #51	; 0x33
 801153e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011540:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011544:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011546:	2300      	movs	r3, #0
 8011548:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801154a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801154e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011550:	f107 0308 	add.w	r3, r7, #8
 8011554:	4619      	mov	r1, r3
 8011556:	6878      	ldr	r0, [r7, #4]
 8011558:	f7ff fdc0 	bl	80110dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801155c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011560:	2133      	movs	r1, #51	; 0x33
 8011562:	6878      	ldr	r0, [r7, #4]
 8011564:	f000 f8fc 	bl	8011760 <SDMMC_GetCmdResp1>
 8011568:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801156a:	69fb      	ldr	r3, [r7, #28]
}
 801156c:	4618      	mov	r0, r3
 801156e:	3720      	adds	r7, #32
 8011570:	46bd      	mov	sp, r7
 8011572:	bd80      	pop	{r7, pc}

08011574 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8011574:	b580      	push	{r7, lr}
 8011576:	b088      	sub	sp, #32
 8011578:	af00      	add	r7, sp, #0
 801157a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801157c:	2300      	movs	r3, #0
 801157e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8011580:	2302      	movs	r3, #2
 8011582:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011584:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011588:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801158a:	2300      	movs	r3, #0
 801158c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801158e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011592:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011594:	f107 0308 	add.w	r3, r7, #8
 8011598:	4619      	mov	r1, r3
 801159a:	6878      	ldr	r0, [r7, #4]
 801159c:	f7ff fd9e 	bl	80110dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80115a0:	6878      	ldr	r0, [r7, #4]
 80115a2:	f000 f9cf 	bl	8011944 <SDMMC_GetCmdResp2>
 80115a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80115a8:	69fb      	ldr	r3, [r7, #28]
}
 80115aa:	4618      	mov	r0, r3
 80115ac:	3720      	adds	r7, #32
 80115ae:	46bd      	mov	sp, r7
 80115b0:	bd80      	pop	{r7, pc}

080115b2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80115b2:	b580      	push	{r7, lr}
 80115b4:	b088      	sub	sp, #32
 80115b6:	af00      	add	r7, sp, #0
 80115b8:	6078      	str	r0, [r7, #4]
 80115ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80115bc:	683b      	ldr	r3, [r7, #0]
 80115be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80115c0:	2309      	movs	r3, #9
 80115c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80115c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80115c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80115ca:	2300      	movs	r3, #0
 80115cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80115ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80115d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80115d4:	f107 0308 	add.w	r3, r7, #8
 80115d8:	4619      	mov	r1, r3
 80115da:	6878      	ldr	r0, [r7, #4]
 80115dc:	f7ff fd7e 	bl	80110dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80115e0:	6878      	ldr	r0, [r7, #4]
 80115e2:	f000 f9af 	bl	8011944 <SDMMC_GetCmdResp2>
 80115e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80115e8:	69fb      	ldr	r3, [r7, #28]
}
 80115ea:	4618      	mov	r0, r3
 80115ec:	3720      	adds	r7, #32
 80115ee:	46bd      	mov	sp, r7
 80115f0:	bd80      	pop	{r7, pc}

080115f2 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80115f2:	b580      	push	{r7, lr}
 80115f4:	b088      	sub	sp, #32
 80115f6:	af00      	add	r7, sp, #0
 80115f8:	6078      	str	r0, [r7, #4]
 80115fa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80115fc:	2300      	movs	r3, #0
 80115fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8011600:	2303      	movs	r3, #3
 8011602:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011604:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011608:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801160a:	2300      	movs	r3, #0
 801160c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801160e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011612:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011614:	f107 0308 	add.w	r3, r7, #8
 8011618:	4619      	mov	r1, r3
 801161a:	6878      	ldr	r0, [r7, #4]
 801161c:	f7ff fd5e 	bl	80110dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8011620:	683a      	ldr	r2, [r7, #0]
 8011622:	2103      	movs	r1, #3
 8011624:	6878      	ldr	r0, [r7, #4]
 8011626:	f000 fa17 	bl	8011a58 <SDMMC_GetCmdResp6>
 801162a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801162c:	69fb      	ldr	r3, [r7, #28]
}
 801162e:	4618      	mov	r0, r3
 8011630:	3720      	adds	r7, #32
 8011632:	46bd      	mov	sp, r7
 8011634:	bd80      	pop	{r7, pc}

08011636 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011636:	b580      	push	{r7, lr}
 8011638:	b088      	sub	sp, #32
 801163a:	af00      	add	r7, sp, #0
 801163c:	6078      	str	r0, [r7, #4]
 801163e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8011640:	683b      	ldr	r3, [r7, #0]
 8011642:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8011644:	230d      	movs	r3, #13
 8011646:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011648:	f44f 7380 	mov.w	r3, #256	; 0x100
 801164c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801164e:	2300      	movs	r3, #0
 8011650:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011656:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011658:	f107 0308 	add.w	r3, r7, #8
 801165c:	4619      	mov	r1, r3
 801165e:	6878      	ldr	r0, [r7, #4]
 8011660:	f7ff fd3c 	bl	80110dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8011664:	f241 3288 	movw	r2, #5000	; 0x1388
 8011668:	210d      	movs	r1, #13
 801166a:	6878      	ldr	r0, [r7, #4]
 801166c:	f000 f878 	bl	8011760 <SDMMC_GetCmdResp1>
 8011670:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011672:	69fb      	ldr	r3, [r7, #28]
}
 8011674:	4618      	mov	r0, r3
 8011676:	3720      	adds	r7, #32
 8011678:	46bd      	mov	sp, r7
 801167a:	bd80      	pop	{r7, pc}

0801167c <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 801167c:	b580      	push	{r7, lr}
 801167e:	b088      	sub	sp, #32
 8011680:	af00      	add	r7, sp, #0
 8011682:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8011684:	2300      	movs	r3, #0
 8011686:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8011688:	230d      	movs	r3, #13
 801168a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801168c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011690:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011692:	2300      	movs	r3, #0
 8011694:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801169a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801169c:	f107 0308 	add.w	r3, r7, #8
 80116a0:	4619      	mov	r1, r3
 80116a2:	6878      	ldr	r0, [r7, #4]
 80116a4:	f7ff fd1a 	bl	80110dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80116a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80116ac:	210d      	movs	r1, #13
 80116ae:	6878      	ldr	r0, [r7, #4]
 80116b0:	f000 f856 	bl	8011760 <SDMMC_GetCmdResp1>
 80116b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80116b6:	69fb      	ldr	r3, [r7, #28]
}
 80116b8:	4618      	mov	r0, r3
 80116ba:	3720      	adds	r7, #32
 80116bc:	46bd      	mov	sp, r7
 80116be:	bd80      	pop	{r7, pc}

080116c0 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b088      	sub	sp, #32
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 80116c8:	2300      	movs	r3, #0
 80116ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 80116cc:	230b      	movs	r3, #11
 80116ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80116d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80116d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80116d6:	2300      	movs	r3, #0
 80116d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80116da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80116de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80116e0:	f107 0308 	add.w	r3, r7, #8
 80116e4:	4619      	mov	r1, r3
 80116e6:	6878      	ldr	r0, [r7, #4]
 80116e8:	f7ff fcf8 	bl	80110dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 80116ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80116f0:	210b      	movs	r1, #11
 80116f2:	6878      	ldr	r0, [r7, #4]
 80116f4:	f000 f834 	bl	8011760 <SDMMC_GetCmdResp1>
 80116f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80116fa:	69fb      	ldr	r3, [r7, #28]
}
 80116fc:	4618      	mov	r0, r3
 80116fe:	3720      	adds	r7, #32
 8011700:	46bd      	mov	sp, r7
 8011702:	bd80      	pop	{r7, pc}

08011704 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8011704:	b480      	push	{r7}
 8011706:	b085      	sub	sp, #20
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801170c:	4b11      	ldr	r3, [pc, #68]	; (8011754 <SDMMC_GetCmdError+0x50>)
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	4a11      	ldr	r2, [pc, #68]	; (8011758 <SDMMC_GetCmdError+0x54>)
 8011712:	fba2 2303 	umull	r2, r3, r2, r3
 8011716:	0a5b      	lsrs	r3, r3, #9
 8011718:	f241 3288 	movw	r2, #5000	; 0x1388
 801171c:	fb02 f303 	mul.w	r3, r2, r3
 8011720:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	1e5a      	subs	r2, r3, #1
 8011726:	60fa      	str	r2, [r7, #12]
 8011728:	2b00      	cmp	r3, #0
 801172a:	d102      	bne.n	8011732 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801172c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011730:	e009      	b.n	8011746 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801173a:	2b00      	cmp	r3, #0
 801173c:	d0f1      	beq.n	8011722 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	4a06      	ldr	r2, [pc, #24]	; (801175c <SDMMC_GetCmdError+0x58>)
 8011742:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8011744:	2300      	movs	r3, #0
}
 8011746:	4618      	mov	r0, r3
 8011748:	3714      	adds	r7, #20
 801174a:	46bd      	mov	sp, r7
 801174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011750:	4770      	bx	lr
 8011752:	bf00      	nop
 8011754:	24000010 	.word	0x24000010
 8011758:	10624dd3 	.word	0x10624dd3
 801175c:	002000c5 	.word	0x002000c5

08011760 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8011760:	b580      	push	{r7, lr}
 8011762:	b088      	sub	sp, #32
 8011764:	af00      	add	r7, sp, #0
 8011766:	60f8      	str	r0, [r7, #12]
 8011768:	460b      	mov	r3, r1
 801176a:	607a      	str	r2, [r7, #4]
 801176c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801176e:	4b70      	ldr	r3, [pc, #448]	; (8011930 <SDMMC_GetCmdResp1+0x1d0>)
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	4a70      	ldr	r2, [pc, #448]	; (8011934 <SDMMC_GetCmdResp1+0x1d4>)
 8011774:	fba2 2303 	umull	r2, r3, r2, r3
 8011778:	0a5a      	lsrs	r2, r3, #9
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	fb02 f303 	mul.w	r3, r2, r3
 8011780:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8011782:	69fb      	ldr	r3, [r7, #28]
 8011784:	1e5a      	subs	r2, r3, #1
 8011786:	61fa      	str	r2, [r7, #28]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d102      	bne.n	8011792 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 801178c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011790:	e0c9      	b.n	8011926 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011796:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8011798:	69ba      	ldr	r2, [r7, #24]
 801179a:	4b67      	ldr	r3, [pc, #412]	; (8011938 <SDMMC_GetCmdResp1+0x1d8>)
 801179c:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d0ef      	beq.n	8011782 <SDMMC_GetCmdResp1+0x22>
 80117a2:	69bb      	ldr	r3, [r7, #24]
 80117a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d1ea      	bne.n	8011782 <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117b0:	f003 0304 	and.w	r3, r3, #4
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d004      	beq.n	80117c2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	2204      	movs	r2, #4
 80117bc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80117be:	2304      	movs	r3, #4
 80117c0:	e0b1      	b.n	8011926 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117c6:	f003 0301 	and.w	r3, r3, #1
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d004      	beq.n	80117d8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	2201      	movs	r2, #1
 80117d2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80117d4:	2301      	movs	r3, #1
 80117d6:	e0a6      	b.n	8011926 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	4a58      	ldr	r2, [pc, #352]	; (801193c <SDMMC_GetCmdResp1+0x1dc>)
 80117dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80117de:	68f8      	ldr	r0, [r7, #12]
 80117e0:	f7ff fca6 	bl	8011130 <SDMMC_GetCommandResponse>
 80117e4:	4603      	mov	r3, r0
 80117e6:	461a      	mov	r2, r3
 80117e8:	7afb      	ldrb	r3, [r7, #11]
 80117ea:	4293      	cmp	r3, r2
 80117ec:	d001      	beq.n	80117f2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80117ee:	2301      	movs	r3, #1
 80117f0:	e099      	b.n	8011926 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80117f2:	2100      	movs	r1, #0
 80117f4:	68f8      	ldr	r0, [r7, #12]
 80117f6:	f7ff fca8 	bl	801114a <SDMMC_GetResponse>
 80117fa:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80117fc:	697a      	ldr	r2, [r7, #20]
 80117fe:	4b50      	ldr	r3, [pc, #320]	; (8011940 <SDMMC_GetCmdResp1+0x1e0>)
 8011800:	4013      	ands	r3, r2
 8011802:	2b00      	cmp	r3, #0
 8011804:	d101      	bne.n	801180a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8011806:	2300      	movs	r3, #0
 8011808:	e08d      	b.n	8011926 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801180a:	697b      	ldr	r3, [r7, #20]
 801180c:	2b00      	cmp	r3, #0
 801180e:	da02      	bge.n	8011816 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8011810:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011814:	e087      	b.n	8011926 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8011816:	697b      	ldr	r3, [r7, #20]
 8011818:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801181c:	2b00      	cmp	r3, #0
 801181e:	d001      	beq.n	8011824 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8011820:	2340      	movs	r3, #64	; 0x40
 8011822:	e080      	b.n	8011926 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8011824:	697b      	ldr	r3, [r7, #20]
 8011826:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801182a:	2b00      	cmp	r3, #0
 801182c:	d001      	beq.n	8011832 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801182e:	2380      	movs	r3, #128	; 0x80
 8011830:	e079      	b.n	8011926 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8011832:	697b      	ldr	r3, [r7, #20]
 8011834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011838:	2b00      	cmp	r3, #0
 801183a:	d002      	beq.n	8011842 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801183c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011840:	e071      	b.n	8011926 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8011842:	697b      	ldr	r3, [r7, #20]
 8011844:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011848:	2b00      	cmp	r3, #0
 801184a:	d002      	beq.n	8011852 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801184c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011850:	e069      	b.n	8011926 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8011852:	697b      	ldr	r3, [r7, #20]
 8011854:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011858:	2b00      	cmp	r3, #0
 801185a:	d002      	beq.n	8011862 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801185c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011860:	e061      	b.n	8011926 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8011862:	697b      	ldr	r3, [r7, #20]
 8011864:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011868:	2b00      	cmp	r3, #0
 801186a:	d002      	beq.n	8011872 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801186c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011870:	e059      	b.n	8011926 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8011872:	697b      	ldr	r3, [r7, #20]
 8011874:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011878:	2b00      	cmp	r3, #0
 801187a:	d002      	beq.n	8011882 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801187c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011880:	e051      	b.n	8011926 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8011882:	697b      	ldr	r3, [r7, #20]
 8011884:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011888:	2b00      	cmp	r3, #0
 801188a:	d002      	beq.n	8011892 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801188c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011890:	e049      	b.n	8011926 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8011892:	697b      	ldr	r3, [r7, #20]
 8011894:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011898:	2b00      	cmp	r3, #0
 801189a:	d002      	beq.n	80118a2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801189c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80118a0:	e041      	b.n	8011926 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80118a2:	697b      	ldr	r3, [r7, #20]
 80118a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d002      	beq.n	80118b2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80118ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80118b0:	e039      	b.n	8011926 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80118b2:	697b      	ldr	r3, [r7, #20]
 80118b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d002      	beq.n	80118c2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80118bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80118c0:	e031      	b.n	8011926 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80118c2:	697b      	ldr	r3, [r7, #20]
 80118c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d002      	beq.n	80118d2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80118cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80118d0:	e029      	b.n	8011926 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80118d2:	697b      	ldr	r3, [r7, #20]
 80118d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d002      	beq.n	80118e2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80118dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80118e0:	e021      	b.n	8011926 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80118e2:	697b      	ldr	r3, [r7, #20]
 80118e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d002      	beq.n	80118f2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80118ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80118f0:	e019      	b.n	8011926 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80118f2:	697b      	ldr	r3, [r7, #20]
 80118f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d002      	beq.n	8011902 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80118fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011900:	e011      	b.n	8011926 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8011902:	697b      	ldr	r3, [r7, #20]
 8011904:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011908:	2b00      	cmp	r3, #0
 801190a:	d002      	beq.n	8011912 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 801190c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011910:	e009      	b.n	8011926 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8011912:	697b      	ldr	r3, [r7, #20]
 8011914:	f003 0308 	and.w	r3, r3, #8
 8011918:	2b00      	cmp	r3, #0
 801191a:	d002      	beq.n	8011922 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 801191c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8011920:	e001      	b.n	8011926 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011922:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011926:	4618      	mov	r0, r3
 8011928:	3720      	adds	r7, #32
 801192a:	46bd      	mov	sp, r7
 801192c:	bd80      	pop	{r7, pc}
 801192e:	bf00      	nop
 8011930:	24000010 	.word	0x24000010
 8011934:	10624dd3 	.word	0x10624dd3
 8011938:	00200045 	.word	0x00200045
 801193c:	002000c5 	.word	0x002000c5
 8011940:	fdffe008 	.word	0xfdffe008

08011944 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8011944:	b480      	push	{r7}
 8011946:	b085      	sub	sp, #20
 8011948:	af00      	add	r7, sp, #0
 801194a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801194c:	4b1f      	ldr	r3, [pc, #124]	; (80119cc <SDMMC_GetCmdResp2+0x88>)
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	4a1f      	ldr	r2, [pc, #124]	; (80119d0 <SDMMC_GetCmdResp2+0x8c>)
 8011952:	fba2 2303 	umull	r2, r3, r2, r3
 8011956:	0a5b      	lsrs	r3, r3, #9
 8011958:	f241 3288 	movw	r2, #5000	; 0x1388
 801195c:	fb02 f303 	mul.w	r3, r2, r3
 8011960:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	1e5a      	subs	r2, r3, #1
 8011966:	60fa      	str	r2, [r7, #12]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d102      	bne.n	8011972 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801196c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011970:	e026      	b.n	80119c0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011976:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011978:	68bb      	ldr	r3, [r7, #8]
 801197a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801197e:	2b00      	cmp	r3, #0
 8011980:	d0ef      	beq.n	8011962 <SDMMC_GetCmdResp2+0x1e>
 8011982:	68bb      	ldr	r3, [r7, #8]
 8011984:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011988:	2b00      	cmp	r3, #0
 801198a:	d1ea      	bne.n	8011962 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011990:	f003 0304 	and.w	r3, r3, #4
 8011994:	2b00      	cmp	r3, #0
 8011996:	d004      	beq.n	80119a2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	2204      	movs	r2, #4
 801199c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801199e:	2304      	movs	r3, #4
 80119a0:	e00e      	b.n	80119c0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119a6:	f003 0301 	and.w	r3, r3, #1
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d004      	beq.n	80119b8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	2201      	movs	r2, #1
 80119b2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80119b4:	2301      	movs	r3, #1
 80119b6:	e003      	b.n	80119c0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	4a06      	ldr	r2, [pc, #24]	; (80119d4 <SDMMC_GetCmdResp2+0x90>)
 80119bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80119be:	2300      	movs	r3, #0
}
 80119c0:	4618      	mov	r0, r3
 80119c2:	3714      	adds	r7, #20
 80119c4:	46bd      	mov	sp, r7
 80119c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ca:	4770      	bx	lr
 80119cc:	24000010 	.word	0x24000010
 80119d0:	10624dd3 	.word	0x10624dd3
 80119d4:	002000c5 	.word	0x002000c5

080119d8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80119d8:	b480      	push	{r7}
 80119da:	b085      	sub	sp, #20
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80119e0:	4b1a      	ldr	r3, [pc, #104]	; (8011a4c <SDMMC_GetCmdResp3+0x74>)
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	4a1a      	ldr	r2, [pc, #104]	; (8011a50 <SDMMC_GetCmdResp3+0x78>)
 80119e6:	fba2 2303 	umull	r2, r3, r2, r3
 80119ea:	0a5b      	lsrs	r3, r3, #9
 80119ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80119f0:	fb02 f303 	mul.w	r3, r2, r3
 80119f4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	1e5a      	subs	r2, r3, #1
 80119fa:	60fa      	str	r2, [r7, #12]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d102      	bne.n	8011a06 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011a00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011a04:	e01b      	b.n	8011a3e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a0a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011a0c:	68bb      	ldr	r3, [r7, #8]
 8011a0e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d0ef      	beq.n	80119f6 <SDMMC_GetCmdResp3+0x1e>
 8011a16:	68bb      	ldr	r3, [r7, #8]
 8011a18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d1ea      	bne.n	80119f6 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a24:	f003 0304 	and.w	r3, r3, #4
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d004      	beq.n	8011a36 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	2204      	movs	r2, #4
 8011a30:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011a32:	2304      	movs	r3, #4
 8011a34:	e003      	b.n	8011a3e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	4a06      	ldr	r2, [pc, #24]	; (8011a54 <SDMMC_GetCmdResp3+0x7c>)
 8011a3a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011a3c:	2300      	movs	r3, #0
}
 8011a3e:	4618      	mov	r0, r3
 8011a40:	3714      	adds	r7, #20
 8011a42:	46bd      	mov	sp, r7
 8011a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a48:	4770      	bx	lr
 8011a4a:	bf00      	nop
 8011a4c:	24000010 	.word	0x24000010
 8011a50:	10624dd3 	.word	0x10624dd3
 8011a54:	002000c5 	.word	0x002000c5

08011a58 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	b088      	sub	sp, #32
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	60f8      	str	r0, [r7, #12]
 8011a60:	460b      	mov	r3, r1
 8011a62:	607a      	str	r2, [r7, #4]
 8011a64:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011a66:	4b35      	ldr	r3, [pc, #212]	; (8011b3c <SDMMC_GetCmdResp6+0xe4>)
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	4a35      	ldr	r2, [pc, #212]	; (8011b40 <SDMMC_GetCmdResp6+0xe8>)
 8011a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8011a70:	0a5b      	lsrs	r3, r3, #9
 8011a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8011a76:	fb02 f303 	mul.w	r3, r2, r3
 8011a7a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8011a7c:	69fb      	ldr	r3, [r7, #28]
 8011a7e:	1e5a      	subs	r2, r3, #1
 8011a80:	61fa      	str	r2, [r7, #28]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d102      	bne.n	8011a8c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011a86:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011a8a:	e052      	b.n	8011b32 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a90:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011a92:	69bb      	ldr	r3, [r7, #24]
 8011a94:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d0ef      	beq.n	8011a7c <SDMMC_GetCmdResp6+0x24>
 8011a9c:	69bb      	ldr	r3, [r7, #24]
 8011a9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d1ea      	bne.n	8011a7c <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011aaa:	f003 0304 	and.w	r3, r3, #4
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d004      	beq.n	8011abc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	2204      	movs	r2, #4
 8011ab6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011ab8:	2304      	movs	r3, #4
 8011aba:	e03a      	b.n	8011b32 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ac0:	f003 0301 	and.w	r3, r3, #1
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d004      	beq.n	8011ad2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	2201      	movs	r2, #1
 8011acc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011ace:	2301      	movs	r3, #1
 8011ad0:	e02f      	b.n	8011b32 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011ad2:	68f8      	ldr	r0, [r7, #12]
 8011ad4:	f7ff fb2c 	bl	8011130 <SDMMC_GetCommandResponse>
 8011ad8:	4603      	mov	r3, r0
 8011ada:	461a      	mov	r2, r3
 8011adc:	7afb      	ldrb	r3, [r7, #11]
 8011ade:	4293      	cmp	r3, r2
 8011ae0:	d001      	beq.n	8011ae6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011ae2:	2301      	movs	r3, #1
 8011ae4:	e025      	b.n	8011b32 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	4a16      	ldr	r2, [pc, #88]	; (8011b44 <SDMMC_GetCmdResp6+0xec>)
 8011aea:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011aec:	2100      	movs	r1, #0
 8011aee:	68f8      	ldr	r0, [r7, #12]
 8011af0:	f7ff fb2b 	bl	801114a <SDMMC_GetResponse>
 8011af4:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8011af6:	697b      	ldr	r3, [r7, #20]
 8011af8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d106      	bne.n	8011b0e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8011b00:	697b      	ldr	r3, [r7, #20]
 8011b02:	0c1b      	lsrs	r3, r3, #16
 8011b04:	b29a      	uxth	r2, r3
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8011b0a:	2300      	movs	r3, #0
 8011b0c:	e011      	b.n	8011b32 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8011b0e:	697b      	ldr	r3, [r7, #20]
 8011b10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d002      	beq.n	8011b1e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011b18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011b1c:	e009      	b.n	8011b32 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8011b1e:	697b      	ldr	r3, [r7, #20]
 8011b20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d002      	beq.n	8011b2e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011b2c:	e001      	b.n	8011b32 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011b2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011b32:	4618      	mov	r0, r3
 8011b34:	3720      	adds	r7, #32
 8011b36:	46bd      	mov	sp, r7
 8011b38:	bd80      	pop	{r7, pc}
 8011b3a:	bf00      	nop
 8011b3c:	24000010 	.word	0x24000010
 8011b40:	10624dd3 	.word	0x10624dd3
 8011b44:	002000c5 	.word	0x002000c5

08011b48 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8011b48:	b480      	push	{r7}
 8011b4a:	b085      	sub	sp, #20
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011b50:	4b22      	ldr	r3, [pc, #136]	; (8011bdc <SDMMC_GetCmdResp7+0x94>)
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	4a22      	ldr	r2, [pc, #136]	; (8011be0 <SDMMC_GetCmdResp7+0x98>)
 8011b56:	fba2 2303 	umull	r2, r3, r2, r3
 8011b5a:	0a5b      	lsrs	r3, r3, #9
 8011b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011b60:	fb02 f303 	mul.w	r3, r2, r3
 8011b64:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	1e5a      	subs	r2, r3, #1
 8011b6a:	60fa      	str	r2, [r7, #12]
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d102      	bne.n	8011b76 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011b70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011b74:	e02c      	b.n	8011bd0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b7a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011b7c:	68bb      	ldr	r3, [r7, #8]
 8011b7e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d0ef      	beq.n	8011b66 <SDMMC_GetCmdResp7+0x1e>
 8011b86:	68bb      	ldr	r3, [r7, #8]
 8011b88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d1ea      	bne.n	8011b66 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b94:	f003 0304 	and.w	r3, r3, #4
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d004      	beq.n	8011ba6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	2204      	movs	r2, #4
 8011ba0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011ba2:	2304      	movs	r3, #4
 8011ba4:	e014      	b.n	8011bd0 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011baa:	f003 0301 	and.w	r3, r3, #1
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d004      	beq.n	8011bbc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	2201      	movs	r2, #1
 8011bb6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011bb8:	2301      	movs	r3, #1
 8011bba:	e009      	b.n	8011bd0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d002      	beq.n	8011bce <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	2240      	movs	r2, #64	; 0x40
 8011bcc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011bce:	2300      	movs	r3, #0

}
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	3714      	adds	r7, #20
 8011bd4:	46bd      	mov	sp, r7
 8011bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bda:	4770      	bx	lr
 8011bdc:	24000010 	.word	0x24000010
 8011be0:	10624dd3 	.word	0x10624dd3

08011be4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011be4:	b084      	sub	sp, #16
 8011be6:	b580      	push	{r7, lr}
 8011be8:	b084      	sub	sp, #16
 8011bea:	af00      	add	r7, sp, #0
 8011bec:	6078      	str	r0, [r7, #4]
 8011bee:	f107 001c 	add.w	r0, r7, #28
 8011bf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bf8:	2b01      	cmp	r3, #1
 8011bfa:	d120      	bne.n	8011c3e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	68da      	ldr	r2, [r3, #12]
 8011c0c:	4b25      	ldr	r3, [pc, #148]	; (8011ca4 <USB_CoreInit+0xc0>)
 8011c0e:	4013      	ands	r3, r2
 8011c10:	687a      	ldr	r2, [r7, #4]
 8011c12:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	68db      	ldr	r3, [r3, #12]
 8011c18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011c20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c22:	2b01      	cmp	r3, #1
 8011c24:	d105      	bne.n	8011c32 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	68db      	ldr	r3, [r3, #12]
 8011c2a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8011c32:	6878      	ldr	r0, [r7, #4]
 8011c34:	f001 fabe 	bl	80131b4 <USB_CoreReset>
 8011c38:	4603      	mov	r3, r0
 8011c3a:	73fb      	strb	r3, [r7, #15]
 8011c3c:	e01a      	b.n	8011c74 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	68db      	ldr	r3, [r3, #12]
 8011c42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8011c4a:	6878      	ldr	r0, [r7, #4]
 8011c4c:	f001 fab2 	bl	80131b4 <USB_CoreReset>
 8011c50:	4603      	mov	r3, r0
 8011c52:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8011c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d106      	bne.n	8011c68 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	639a      	str	r2, [r3, #56]	; 0x38
 8011c66:	e005      	b.n	8011c74 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8011c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c76:	2b01      	cmp	r3, #1
 8011c78:	d10b      	bne.n	8011c92 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	689b      	ldr	r3, [r3, #8]
 8011c7e:	f043 0206 	orr.w	r2, r3, #6
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	689b      	ldr	r3, [r3, #8]
 8011c8a:	f043 0220 	orr.w	r2, r3, #32
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8011c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c94:	4618      	mov	r0, r3
 8011c96:	3710      	adds	r7, #16
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011c9e:	b004      	add	sp, #16
 8011ca0:	4770      	bx	lr
 8011ca2:	bf00      	nop
 8011ca4:	ffbdffbf 	.word	0xffbdffbf

08011ca8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8011ca8:	b480      	push	{r7}
 8011caa:	b087      	sub	sp, #28
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	60f8      	str	r0, [r7, #12]
 8011cb0:	60b9      	str	r1, [r7, #8]
 8011cb2:	4613      	mov	r3, r2
 8011cb4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8011cb6:	79fb      	ldrb	r3, [r7, #7]
 8011cb8:	2b02      	cmp	r3, #2
 8011cba:	d165      	bne.n	8011d88 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8011cbc:	68bb      	ldr	r3, [r7, #8]
 8011cbe:	4a41      	ldr	r2, [pc, #260]	; (8011dc4 <USB_SetTurnaroundTime+0x11c>)
 8011cc0:	4293      	cmp	r3, r2
 8011cc2:	d906      	bls.n	8011cd2 <USB_SetTurnaroundTime+0x2a>
 8011cc4:	68bb      	ldr	r3, [r7, #8]
 8011cc6:	4a40      	ldr	r2, [pc, #256]	; (8011dc8 <USB_SetTurnaroundTime+0x120>)
 8011cc8:	4293      	cmp	r3, r2
 8011cca:	d802      	bhi.n	8011cd2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011ccc:	230f      	movs	r3, #15
 8011cce:	617b      	str	r3, [r7, #20]
 8011cd0:	e062      	b.n	8011d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8011cd2:	68bb      	ldr	r3, [r7, #8]
 8011cd4:	4a3c      	ldr	r2, [pc, #240]	; (8011dc8 <USB_SetTurnaroundTime+0x120>)
 8011cd6:	4293      	cmp	r3, r2
 8011cd8:	d906      	bls.n	8011ce8 <USB_SetTurnaroundTime+0x40>
 8011cda:	68bb      	ldr	r3, [r7, #8]
 8011cdc:	4a3b      	ldr	r2, [pc, #236]	; (8011dcc <USB_SetTurnaroundTime+0x124>)
 8011cde:	4293      	cmp	r3, r2
 8011ce0:	d802      	bhi.n	8011ce8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8011ce2:	230e      	movs	r3, #14
 8011ce4:	617b      	str	r3, [r7, #20]
 8011ce6:	e057      	b.n	8011d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8011ce8:	68bb      	ldr	r3, [r7, #8]
 8011cea:	4a38      	ldr	r2, [pc, #224]	; (8011dcc <USB_SetTurnaroundTime+0x124>)
 8011cec:	4293      	cmp	r3, r2
 8011cee:	d906      	bls.n	8011cfe <USB_SetTurnaroundTime+0x56>
 8011cf0:	68bb      	ldr	r3, [r7, #8]
 8011cf2:	4a37      	ldr	r2, [pc, #220]	; (8011dd0 <USB_SetTurnaroundTime+0x128>)
 8011cf4:	4293      	cmp	r3, r2
 8011cf6:	d802      	bhi.n	8011cfe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8011cf8:	230d      	movs	r3, #13
 8011cfa:	617b      	str	r3, [r7, #20]
 8011cfc:	e04c      	b.n	8011d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8011cfe:	68bb      	ldr	r3, [r7, #8]
 8011d00:	4a33      	ldr	r2, [pc, #204]	; (8011dd0 <USB_SetTurnaroundTime+0x128>)
 8011d02:	4293      	cmp	r3, r2
 8011d04:	d906      	bls.n	8011d14 <USB_SetTurnaroundTime+0x6c>
 8011d06:	68bb      	ldr	r3, [r7, #8]
 8011d08:	4a32      	ldr	r2, [pc, #200]	; (8011dd4 <USB_SetTurnaroundTime+0x12c>)
 8011d0a:	4293      	cmp	r3, r2
 8011d0c:	d802      	bhi.n	8011d14 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8011d0e:	230c      	movs	r3, #12
 8011d10:	617b      	str	r3, [r7, #20]
 8011d12:	e041      	b.n	8011d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8011d14:	68bb      	ldr	r3, [r7, #8]
 8011d16:	4a2f      	ldr	r2, [pc, #188]	; (8011dd4 <USB_SetTurnaroundTime+0x12c>)
 8011d18:	4293      	cmp	r3, r2
 8011d1a:	d906      	bls.n	8011d2a <USB_SetTurnaroundTime+0x82>
 8011d1c:	68bb      	ldr	r3, [r7, #8]
 8011d1e:	4a2e      	ldr	r2, [pc, #184]	; (8011dd8 <USB_SetTurnaroundTime+0x130>)
 8011d20:	4293      	cmp	r3, r2
 8011d22:	d802      	bhi.n	8011d2a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8011d24:	230b      	movs	r3, #11
 8011d26:	617b      	str	r3, [r7, #20]
 8011d28:	e036      	b.n	8011d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8011d2a:	68bb      	ldr	r3, [r7, #8]
 8011d2c:	4a2a      	ldr	r2, [pc, #168]	; (8011dd8 <USB_SetTurnaroundTime+0x130>)
 8011d2e:	4293      	cmp	r3, r2
 8011d30:	d906      	bls.n	8011d40 <USB_SetTurnaroundTime+0x98>
 8011d32:	68bb      	ldr	r3, [r7, #8]
 8011d34:	4a29      	ldr	r2, [pc, #164]	; (8011ddc <USB_SetTurnaroundTime+0x134>)
 8011d36:	4293      	cmp	r3, r2
 8011d38:	d802      	bhi.n	8011d40 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8011d3a:	230a      	movs	r3, #10
 8011d3c:	617b      	str	r3, [r7, #20]
 8011d3e:	e02b      	b.n	8011d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8011d40:	68bb      	ldr	r3, [r7, #8]
 8011d42:	4a26      	ldr	r2, [pc, #152]	; (8011ddc <USB_SetTurnaroundTime+0x134>)
 8011d44:	4293      	cmp	r3, r2
 8011d46:	d906      	bls.n	8011d56 <USB_SetTurnaroundTime+0xae>
 8011d48:	68bb      	ldr	r3, [r7, #8]
 8011d4a:	4a25      	ldr	r2, [pc, #148]	; (8011de0 <USB_SetTurnaroundTime+0x138>)
 8011d4c:	4293      	cmp	r3, r2
 8011d4e:	d802      	bhi.n	8011d56 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8011d50:	2309      	movs	r3, #9
 8011d52:	617b      	str	r3, [r7, #20]
 8011d54:	e020      	b.n	8011d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8011d56:	68bb      	ldr	r3, [r7, #8]
 8011d58:	4a21      	ldr	r2, [pc, #132]	; (8011de0 <USB_SetTurnaroundTime+0x138>)
 8011d5a:	4293      	cmp	r3, r2
 8011d5c:	d906      	bls.n	8011d6c <USB_SetTurnaroundTime+0xc4>
 8011d5e:	68bb      	ldr	r3, [r7, #8]
 8011d60:	4a20      	ldr	r2, [pc, #128]	; (8011de4 <USB_SetTurnaroundTime+0x13c>)
 8011d62:	4293      	cmp	r3, r2
 8011d64:	d802      	bhi.n	8011d6c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8011d66:	2308      	movs	r3, #8
 8011d68:	617b      	str	r3, [r7, #20]
 8011d6a:	e015      	b.n	8011d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8011d6c:	68bb      	ldr	r3, [r7, #8]
 8011d6e:	4a1d      	ldr	r2, [pc, #116]	; (8011de4 <USB_SetTurnaroundTime+0x13c>)
 8011d70:	4293      	cmp	r3, r2
 8011d72:	d906      	bls.n	8011d82 <USB_SetTurnaroundTime+0xda>
 8011d74:	68bb      	ldr	r3, [r7, #8]
 8011d76:	4a1c      	ldr	r2, [pc, #112]	; (8011de8 <USB_SetTurnaroundTime+0x140>)
 8011d78:	4293      	cmp	r3, r2
 8011d7a:	d802      	bhi.n	8011d82 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8011d7c:	2307      	movs	r3, #7
 8011d7e:	617b      	str	r3, [r7, #20]
 8011d80:	e00a      	b.n	8011d98 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8011d82:	2306      	movs	r3, #6
 8011d84:	617b      	str	r3, [r7, #20]
 8011d86:	e007      	b.n	8011d98 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8011d88:	79fb      	ldrb	r3, [r7, #7]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d102      	bne.n	8011d94 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8011d8e:	2309      	movs	r3, #9
 8011d90:	617b      	str	r3, [r7, #20]
 8011d92:	e001      	b.n	8011d98 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8011d94:	2309      	movs	r3, #9
 8011d96:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	68db      	ldr	r3, [r3, #12]
 8011d9c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	68da      	ldr	r2, [r3, #12]
 8011da8:	697b      	ldr	r3, [r7, #20]
 8011daa:	029b      	lsls	r3, r3, #10
 8011dac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8011db0:	431a      	orrs	r2, r3
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011db6:	2300      	movs	r3, #0
}
 8011db8:	4618      	mov	r0, r3
 8011dba:	371c      	adds	r7, #28
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc2:	4770      	bx	lr
 8011dc4:	00d8acbf 	.word	0x00d8acbf
 8011dc8:	00e4e1bf 	.word	0x00e4e1bf
 8011dcc:	00f423ff 	.word	0x00f423ff
 8011dd0:	0106737f 	.word	0x0106737f
 8011dd4:	011a499f 	.word	0x011a499f
 8011dd8:	01312cff 	.word	0x01312cff
 8011ddc:	014ca43f 	.word	0x014ca43f
 8011de0:	016e35ff 	.word	0x016e35ff
 8011de4:	01a6ab1f 	.word	0x01a6ab1f
 8011de8:	01e847ff 	.word	0x01e847ff

08011dec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011dec:	b480      	push	{r7}
 8011dee:	b083      	sub	sp, #12
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	689b      	ldr	r3, [r3, #8]
 8011df8:	f043 0201 	orr.w	r2, r3, #1
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011e00:	2300      	movs	r3, #0
}
 8011e02:	4618      	mov	r0, r3
 8011e04:	370c      	adds	r7, #12
 8011e06:	46bd      	mov	sp, r7
 8011e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e0c:	4770      	bx	lr

08011e0e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011e0e:	b480      	push	{r7}
 8011e10:	b083      	sub	sp, #12
 8011e12:	af00      	add	r7, sp, #0
 8011e14:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	689b      	ldr	r3, [r3, #8]
 8011e1a:	f023 0201 	bic.w	r2, r3, #1
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011e22:	2300      	movs	r3, #0
}
 8011e24:	4618      	mov	r0, r3
 8011e26:	370c      	adds	r7, #12
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e2e:	4770      	bx	lr

08011e30 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011e30:	b580      	push	{r7, lr}
 8011e32:	b082      	sub	sp, #8
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	6078      	str	r0, [r7, #4]
 8011e38:	460b      	mov	r3, r1
 8011e3a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	68db      	ldr	r3, [r3, #12]
 8011e40:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011e48:	78fb      	ldrb	r3, [r7, #3]
 8011e4a:	2b01      	cmp	r3, #1
 8011e4c:	d106      	bne.n	8011e5c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	68db      	ldr	r3, [r3, #12]
 8011e52:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	60da      	str	r2, [r3, #12]
 8011e5a:	e00b      	b.n	8011e74 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8011e5c:	78fb      	ldrb	r3, [r7, #3]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d106      	bne.n	8011e70 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	68db      	ldr	r3, [r3, #12]
 8011e66:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	60da      	str	r2, [r3, #12]
 8011e6e:	e001      	b.n	8011e74 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8011e70:	2301      	movs	r3, #1
 8011e72:	e003      	b.n	8011e7c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8011e74:	2032      	movs	r0, #50	; 0x32
 8011e76:	f7f2 fbc1 	bl	80045fc <HAL_Delay>

  return HAL_OK;
 8011e7a:	2300      	movs	r3, #0
}
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	3708      	adds	r7, #8
 8011e80:	46bd      	mov	sp, r7
 8011e82:	bd80      	pop	{r7, pc}

08011e84 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011e84:	b084      	sub	sp, #16
 8011e86:	b580      	push	{r7, lr}
 8011e88:	b086      	sub	sp, #24
 8011e8a:	af00      	add	r7, sp, #0
 8011e8c:	6078      	str	r0, [r7, #4]
 8011e8e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8011e92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011e96:	2300      	movs	r3, #0
 8011e98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	613b      	str	r3, [r7, #16]
 8011ea2:	e009      	b.n	8011eb8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011ea4:	687a      	ldr	r2, [r7, #4]
 8011ea6:	693b      	ldr	r3, [r7, #16]
 8011ea8:	3340      	adds	r3, #64	; 0x40
 8011eaa:	009b      	lsls	r3, r3, #2
 8011eac:	4413      	add	r3, r2
 8011eae:	2200      	movs	r2, #0
 8011eb0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8011eb2:	693b      	ldr	r3, [r7, #16]
 8011eb4:	3301      	adds	r3, #1
 8011eb6:	613b      	str	r3, [r7, #16]
 8011eb8:	693b      	ldr	r3, [r7, #16]
 8011eba:	2b0e      	cmp	r3, #14
 8011ebc:	d9f2      	bls.n	8011ea4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8011ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d11c      	bne.n	8011efe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011eca:	685b      	ldr	r3, [r3, #4]
 8011ecc:	68fa      	ldr	r2, [r7, #12]
 8011ece:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011ed2:	f043 0302 	orr.w	r3, r3, #2
 8011ed6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011edc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	601a      	str	r2, [r3, #0]
 8011efc:	e005      	b.n	8011f0a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f02:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011f10:	461a      	mov	r2, r3
 8011f12:	2300      	movs	r3, #0
 8011f14:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f1c:	4619      	mov	r1, r3
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f24:	461a      	mov	r2, r3
 8011f26:	680b      	ldr	r3, [r1, #0]
 8011f28:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f2c:	2b01      	cmp	r3, #1
 8011f2e:	d10c      	bne.n	8011f4a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8011f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d104      	bne.n	8011f40 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8011f36:	2100      	movs	r1, #0
 8011f38:	6878      	ldr	r0, [r7, #4]
 8011f3a:	f000 f949 	bl	80121d0 <USB_SetDevSpeed>
 8011f3e:	e008      	b.n	8011f52 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8011f40:	2101      	movs	r1, #1
 8011f42:	6878      	ldr	r0, [r7, #4]
 8011f44:	f000 f944 	bl	80121d0 <USB_SetDevSpeed>
 8011f48:	e003      	b.n	8011f52 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8011f4a:	2103      	movs	r1, #3
 8011f4c:	6878      	ldr	r0, [r7, #4]
 8011f4e:	f000 f93f 	bl	80121d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011f52:	2110      	movs	r1, #16
 8011f54:	6878      	ldr	r0, [r7, #4]
 8011f56:	f000 f8f3 	bl	8012140 <USB_FlushTxFifo>
 8011f5a:	4603      	mov	r3, r0
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d001      	beq.n	8011f64 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8011f60:	2301      	movs	r3, #1
 8011f62:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011f64:	6878      	ldr	r0, [r7, #4]
 8011f66:	f000 f911 	bl	801218c <USB_FlushRxFifo>
 8011f6a:	4603      	mov	r3, r0
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d001      	beq.n	8011f74 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8011f70:	2301      	movs	r3, #1
 8011f72:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f7a:	461a      	mov	r2, r3
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f86:	461a      	mov	r2, r3
 8011f88:	2300      	movs	r3, #0
 8011f8a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f92:	461a      	mov	r2, r3
 8011f94:	2300      	movs	r3, #0
 8011f96:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011f98:	2300      	movs	r3, #0
 8011f9a:	613b      	str	r3, [r7, #16]
 8011f9c:	e043      	b.n	8012026 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011f9e:	693b      	ldr	r3, [r7, #16]
 8011fa0:	015a      	lsls	r2, r3, #5
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	4413      	add	r3, r2
 8011fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011fb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011fb4:	d118      	bne.n	8011fe8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8011fb6:	693b      	ldr	r3, [r7, #16]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d10a      	bne.n	8011fd2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8011fbc:	693b      	ldr	r3, [r7, #16]
 8011fbe:	015a      	lsls	r2, r3, #5
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	4413      	add	r3, r2
 8011fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011fc8:	461a      	mov	r2, r3
 8011fca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011fce:	6013      	str	r3, [r2, #0]
 8011fd0:	e013      	b.n	8011ffa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8011fd2:	693b      	ldr	r3, [r7, #16]
 8011fd4:	015a      	lsls	r2, r3, #5
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	4413      	add	r3, r2
 8011fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011fde:	461a      	mov	r2, r3
 8011fe0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011fe4:	6013      	str	r3, [r2, #0]
 8011fe6:	e008      	b.n	8011ffa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8011fe8:	693b      	ldr	r3, [r7, #16]
 8011fea:	015a      	lsls	r2, r3, #5
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	4413      	add	r3, r2
 8011ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ff4:	461a      	mov	r2, r3
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8011ffa:	693b      	ldr	r3, [r7, #16]
 8011ffc:	015a      	lsls	r2, r3, #5
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	4413      	add	r3, r2
 8012002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012006:	461a      	mov	r2, r3
 8012008:	2300      	movs	r3, #0
 801200a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801200c:	693b      	ldr	r3, [r7, #16]
 801200e:	015a      	lsls	r2, r3, #5
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	4413      	add	r3, r2
 8012014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012018:	461a      	mov	r2, r3
 801201a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801201e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012020:	693b      	ldr	r3, [r7, #16]
 8012022:	3301      	adds	r3, #1
 8012024:	613b      	str	r3, [r7, #16]
 8012026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012028:	693a      	ldr	r2, [r7, #16]
 801202a:	429a      	cmp	r2, r3
 801202c:	d3b7      	bcc.n	8011f9e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801202e:	2300      	movs	r3, #0
 8012030:	613b      	str	r3, [r7, #16]
 8012032:	e043      	b.n	80120bc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012034:	693b      	ldr	r3, [r7, #16]
 8012036:	015a      	lsls	r2, r3, #5
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	4413      	add	r3, r2
 801203c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012046:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801204a:	d118      	bne.n	801207e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 801204c:	693b      	ldr	r3, [r7, #16]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d10a      	bne.n	8012068 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012052:	693b      	ldr	r3, [r7, #16]
 8012054:	015a      	lsls	r2, r3, #5
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	4413      	add	r3, r2
 801205a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801205e:	461a      	mov	r2, r3
 8012060:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012064:	6013      	str	r3, [r2, #0]
 8012066:	e013      	b.n	8012090 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012068:	693b      	ldr	r3, [r7, #16]
 801206a:	015a      	lsls	r2, r3, #5
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	4413      	add	r3, r2
 8012070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012074:	461a      	mov	r2, r3
 8012076:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801207a:	6013      	str	r3, [r2, #0]
 801207c:	e008      	b.n	8012090 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801207e:	693b      	ldr	r3, [r7, #16]
 8012080:	015a      	lsls	r2, r3, #5
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	4413      	add	r3, r2
 8012086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801208a:	461a      	mov	r2, r3
 801208c:	2300      	movs	r3, #0
 801208e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012090:	693b      	ldr	r3, [r7, #16]
 8012092:	015a      	lsls	r2, r3, #5
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	4413      	add	r3, r2
 8012098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801209c:	461a      	mov	r2, r3
 801209e:	2300      	movs	r3, #0
 80120a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80120a2:	693b      	ldr	r3, [r7, #16]
 80120a4:	015a      	lsls	r2, r3, #5
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	4413      	add	r3, r2
 80120aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80120ae:	461a      	mov	r2, r3
 80120b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80120b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80120b6:	693b      	ldr	r3, [r7, #16]
 80120b8:	3301      	adds	r3, #1
 80120ba:	613b      	str	r3, [r7, #16]
 80120bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120be:	693a      	ldr	r2, [r7, #16]
 80120c0:	429a      	cmp	r2, r3
 80120c2:	d3b7      	bcc.n	8012034 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80120ca:	691b      	ldr	r3, [r3, #16]
 80120cc:	68fa      	ldr	r2, [r7, #12]
 80120ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80120d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80120d6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	2200      	movs	r2, #0
 80120dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80120e4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80120e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d105      	bne.n	80120f8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	699b      	ldr	r3, [r3, #24]
 80120f0:	f043 0210 	orr.w	r2, r3, #16
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	699a      	ldr	r2, [r3, #24]
 80120fc:	4b0e      	ldr	r3, [pc, #56]	; (8012138 <USB_DevInit+0x2b4>)
 80120fe:	4313      	orrs	r3, r2
 8012100:	687a      	ldr	r2, [r7, #4]
 8012102:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8012104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012106:	2b00      	cmp	r3, #0
 8012108:	d005      	beq.n	8012116 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	699b      	ldr	r3, [r3, #24]
 801210e:	f043 0208 	orr.w	r2, r3, #8
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8012116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012118:	2b01      	cmp	r3, #1
 801211a:	d105      	bne.n	8012128 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	699a      	ldr	r2, [r3, #24]
 8012120:	4b06      	ldr	r3, [pc, #24]	; (801213c <USB_DevInit+0x2b8>)
 8012122:	4313      	orrs	r3, r2
 8012124:	687a      	ldr	r2, [r7, #4]
 8012126:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012128:	7dfb      	ldrb	r3, [r7, #23]
}
 801212a:	4618      	mov	r0, r3
 801212c:	3718      	adds	r7, #24
 801212e:	46bd      	mov	sp, r7
 8012130:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012134:	b004      	add	sp, #16
 8012136:	4770      	bx	lr
 8012138:	803c3800 	.word	0x803c3800
 801213c:	40000004 	.word	0x40000004

08012140 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012140:	b480      	push	{r7}
 8012142:	b085      	sub	sp, #20
 8012144:	af00      	add	r7, sp, #0
 8012146:	6078      	str	r0, [r7, #4]
 8012148:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 801214a:	2300      	movs	r3, #0
 801214c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801214e:	683b      	ldr	r3, [r7, #0]
 8012150:	019b      	lsls	r3, r3, #6
 8012152:	f043 0220 	orr.w	r2, r3, #32
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	3301      	adds	r3, #1
 801215e:	60fb      	str	r3, [r7, #12]
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	4a09      	ldr	r2, [pc, #36]	; (8012188 <USB_FlushTxFifo+0x48>)
 8012164:	4293      	cmp	r3, r2
 8012166:	d901      	bls.n	801216c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8012168:	2303      	movs	r3, #3
 801216a:	e006      	b.n	801217a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	691b      	ldr	r3, [r3, #16]
 8012170:	f003 0320 	and.w	r3, r3, #32
 8012174:	2b20      	cmp	r3, #32
 8012176:	d0f0      	beq.n	801215a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8012178:	2300      	movs	r3, #0
}
 801217a:	4618      	mov	r0, r3
 801217c:	3714      	adds	r7, #20
 801217e:	46bd      	mov	sp, r7
 8012180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012184:	4770      	bx	lr
 8012186:	bf00      	nop
 8012188:	00030d40 	.word	0x00030d40

0801218c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801218c:	b480      	push	{r7}
 801218e:	b085      	sub	sp, #20
 8012190:	af00      	add	r7, sp, #0
 8012192:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8012194:	2300      	movs	r3, #0
 8012196:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	2210      	movs	r2, #16
 801219c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	3301      	adds	r3, #1
 80121a2:	60fb      	str	r3, [r7, #12]
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	4a09      	ldr	r2, [pc, #36]	; (80121cc <USB_FlushRxFifo+0x40>)
 80121a8:	4293      	cmp	r3, r2
 80121aa:	d901      	bls.n	80121b0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80121ac:	2303      	movs	r3, #3
 80121ae:	e006      	b.n	80121be <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	691b      	ldr	r3, [r3, #16]
 80121b4:	f003 0310 	and.w	r3, r3, #16
 80121b8:	2b10      	cmp	r3, #16
 80121ba:	d0f0      	beq.n	801219e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80121bc:	2300      	movs	r3, #0
}
 80121be:	4618      	mov	r0, r3
 80121c0:	3714      	adds	r7, #20
 80121c2:	46bd      	mov	sp, r7
 80121c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c8:	4770      	bx	lr
 80121ca:	bf00      	nop
 80121cc:	00030d40 	.word	0x00030d40

080121d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80121d0:	b480      	push	{r7}
 80121d2:	b085      	sub	sp, #20
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	6078      	str	r0, [r7, #4]
 80121d8:	460b      	mov	r3, r1
 80121da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80121e6:	681a      	ldr	r2, [r3, #0]
 80121e8:	78fb      	ldrb	r3, [r7, #3]
 80121ea:	68f9      	ldr	r1, [r7, #12]
 80121ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80121f0:	4313      	orrs	r3, r2
 80121f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80121f4:	2300      	movs	r3, #0
}
 80121f6:	4618      	mov	r0, r3
 80121f8:	3714      	adds	r7, #20
 80121fa:	46bd      	mov	sp, r7
 80121fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012200:	4770      	bx	lr

08012202 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8012202:	b480      	push	{r7}
 8012204:	b087      	sub	sp, #28
 8012206:	af00      	add	r7, sp, #0
 8012208:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801220e:	693b      	ldr	r3, [r7, #16]
 8012210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012214:	689b      	ldr	r3, [r3, #8]
 8012216:	f003 0306 	and.w	r3, r3, #6
 801221a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d102      	bne.n	8012228 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8012222:	2300      	movs	r3, #0
 8012224:	75fb      	strb	r3, [r7, #23]
 8012226:	e00a      	b.n	801223e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	2b02      	cmp	r3, #2
 801222c:	d002      	beq.n	8012234 <USB_GetDevSpeed+0x32>
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	2b06      	cmp	r3, #6
 8012232:	d102      	bne.n	801223a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8012234:	2302      	movs	r3, #2
 8012236:	75fb      	strb	r3, [r7, #23]
 8012238:	e001      	b.n	801223e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801223a:	230f      	movs	r3, #15
 801223c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801223e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012240:	4618      	mov	r0, r3
 8012242:	371c      	adds	r7, #28
 8012244:	46bd      	mov	sp, r7
 8012246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801224a:	4770      	bx	lr

0801224c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801224c:	b480      	push	{r7}
 801224e:	b085      	sub	sp, #20
 8012250:	af00      	add	r7, sp, #0
 8012252:	6078      	str	r0, [r7, #4]
 8012254:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801225a:	683b      	ldr	r3, [r7, #0]
 801225c:	781b      	ldrb	r3, [r3, #0]
 801225e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012260:	683b      	ldr	r3, [r7, #0]
 8012262:	785b      	ldrb	r3, [r3, #1]
 8012264:	2b01      	cmp	r3, #1
 8012266:	d139      	bne.n	80122dc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801226e:	69da      	ldr	r2, [r3, #28]
 8012270:	683b      	ldr	r3, [r7, #0]
 8012272:	781b      	ldrb	r3, [r3, #0]
 8012274:	f003 030f 	and.w	r3, r3, #15
 8012278:	2101      	movs	r1, #1
 801227a:	fa01 f303 	lsl.w	r3, r1, r3
 801227e:	b29b      	uxth	r3, r3
 8012280:	68f9      	ldr	r1, [r7, #12]
 8012282:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012286:	4313      	orrs	r3, r2
 8012288:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801228a:	68bb      	ldr	r3, [r7, #8]
 801228c:	015a      	lsls	r2, r3, #5
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	4413      	add	r3, r2
 8012292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801229c:	2b00      	cmp	r3, #0
 801229e:	d153      	bne.n	8012348 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80122a0:	68bb      	ldr	r3, [r7, #8]
 80122a2:	015a      	lsls	r2, r3, #5
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	4413      	add	r3, r2
 80122a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80122ac:	681a      	ldr	r2, [r3, #0]
 80122ae:	683b      	ldr	r3, [r7, #0]
 80122b0:	689b      	ldr	r3, [r3, #8]
 80122b2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80122b6:	683b      	ldr	r3, [r7, #0]
 80122b8:	78db      	ldrb	r3, [r3, #3]
 80122ba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80122bc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80122be:	68bb      	ldr	r3, [r7, #8]
 80122c0:	059b      	lsls	r3, r3, #22
 80122c2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80122c4:	431a      	orrs	r2, r3
 80122c6:	68bb      	ldr	r3, [r7, #8]
 80122c8:	0159      	lsls	r1, r3, #5
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	440b      	add	r3, r1
 80122ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80122d2:	4619      	mov	r1, r3
 80122d4:	4b20      	ldr	r3, [pc, #128]	; (8012358 <USB_ActivateEndpoint+0x10c>)
 80122d6:	4313      	orrs	r3, r2
 80122d8:	600b      	str	r3, [r1, #0]
 80122da:	e035      	b.n	8012348 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80122e2:	69da      	ldr	r2, [r3, #28]
 80122e4:	683b      	ldr	r3, [r7, #0]
 80122e6:	781b      	ldrb	r3, [r3, #0]
 80122e8:	f003 030f 	and.w	r3, r3, #15
 80122ec:	2101      	movs	r1, #1
 80122ee:	fa01 f303 	lsl.w	r3, r1, r3
 80122f2:	041b      	lsls	r3, r3, #16
 80122f4:	68f9      	ldr	r1, [r7, #12]
 80122f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80122fa:	4313      	orrs	r3, r2
 80122fc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80122fe:	68bb      	ldr	r3, [r7, #8]
 8012300:	015a      	lsls	r2, r3, #5
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	4413      	add	r3, r2
 8012306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012310:	2b00      	cmp	r3, #0
 8012312:	d119      	bne.n	8012348 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012314:	68bb      	ldr	r3, [r7, #8]
 8012316:	015a      	lsls	r2, r3, #5
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	4413      	add	r3, r2
 801231c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012320:	681a      	ldr	r2, [r3, #0]
 8012322:	683b      	ldr	r3, [r7, #0]
 8012324:	689b      	ldr	r3, [r3, #8]
 8012326:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801232a:	683b      	ldr	r3, [r7, #0]
 801232c:	78db      	ldrb	r3, [r3, #3]
 801232e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012330:	430b      	orrs	r3, r1
 8012332:	431a      	orrs	r2, r3
 8012334:	68bb      	ldr	r3, [r7, #8]
 8012336:	0159      	lsls	r1, r3, #5
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	440b      	add	r3, r1
 801233c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012340:	4619      	mov	r1, r3
 8012342:	4b05      	ldr	r3, [pc, #20]	; (8012358 <USB_ActivateEndpoint+0x10c>)
 8012344:	4313      	orrs	r3, r2
 8012346:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8012348:	2300      	movs	r3, #0
}
 801234a:	4618      	mov	r0, r3
 801234c:	3714      	adds	r7, #20
 801234e:	46bd      	mov	sp, r7
 8012350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012354:	4770      	bx	lr
 8012356:	bf00      	nop
 8012358:	10008000 	.word	0x10008000

0801235c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801235c:	b480      	push	{r7}
 801235e:	b085      	sub	sp, #20
 8012360:	af00      	add	r7, sp, #0
 8012362:	6078      	str	r0, [r7, #4]
 8012364:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801236a:	683b      	ldr	r3, [r7, #0]
 801236c:	781b      	ldrb	r3, [r3, #0]
 801236e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8012370:	683b      	ldr	r3, [r7, #0]
 8012372:	785b      	ldrb	r3, [r3, #1]
 8012374:	2b01      	cmp	r3, #1
 8012376:	d161      	bne.n	801243c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012378:	68bb      	ldr	r3, [r7, #8]
 801237a:	015a      	lsls	r2, r3, #5
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	4413      	add	r3, r2
 8012380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801238a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801238e:	d11f      	bne.n	80123d0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8012390:	68bb      	ldr	r3, [r7, #8]
 8012392:	015a      	lsls	r2, r3, #5
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	4413      	add	r3, r2
 8012398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	68ba      	ldr	r2, [r7, #8]
 80123a0:	0151      	lsls	r1, r2, #5
 80123a2:	68fa      	ldr	r2, [r7, #12]
 80123a4:	440a      	add	r2, r1
 80123a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80123aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80123ae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80123b0:	68bb      	ldr	r3, [r7, #8]
 80123b2:	015a      	lsls	r2, r3, #5
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	4413      	add	r3, r2
 80123b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	68ba      	ldr	r2, [r7, #8]
 80123c0:	0151      	lsls	r1, r2, #5
 80123c2:	68fa      	ldr	r2, [r7, #12]
 80123c4:	440a      	add	r2, r1
 80123c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80123ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80123ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80123d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80123d8:	683b      	ldr	r3, [r7, #0]
 80123da:	781b      	ldrb	r3, [r3, #0]
 80123dc:	f003 030f 	and.w	r3, r3, #15
 80123e0:	2101      	movs	r1, #1
 80123e2:	fa01 f303 	lsl.w	r3, r1, r3
 80123e6:	b29b      	uxth	r3, r3
 80123e8:	43db      	mvns	r3, r3
 80123ea:	68f9      	ldr	r1, [r7, #12]
 80123ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80123f0:	4013      	ands	r3, r2
 80123f2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80123fa:	69da      	ldr	r2, [r3, #28]
 80123fc:	683b      	ldr	r3, [r7, #0]
 80123fe:	781b      	ldrb	r3, [r3, #0]
 8012400:	f003 030f 	and.w	r3, r3, #15
 8012404:	2101      	movs	r1, #1
 8012406:	fa01 f303 	lsl.w	r3, r1, r3
 801240a:	b29b      	uxth	r3, r3
 801240c:	43db      	mvns	r3, r3
 801240e:	68f9      	ldr	r1, [r7, #12]
 8012410:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012414:	4013      	ands	r3, r2
 8012416:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8012418:	68bb      	ldr	r3, [r7, #8]
 801241a:	015a      	lsls	r2, r3, #5
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	4413      	add	r3, r2
 8012420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012424:	681a      	ldr	r2, [r3, #0]
 8012426:	68bb      	ldr	r3, [r7, #8]
 8012428:	0159      	lsls	r1, r3, #5
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	440b      	add	r3, r1
 801242e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012432:	4619      	mov	r1, r3
 8012434:	4b35      	ldr	r3, [pc, #212]	; (801250c <USB_DeactivateEndpoint+0x1b0>)
 8012436:	4013      	ands	r3, r2
 8012438:	600b      	str	r3, [r1, #0]
 801243a:	e060      	b.n	80124fe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801243c:	68bb      	ldr	r3, [r7, #8]
 801243e:	015a      	lsls	r2, r3, #5
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	4413      	add	r3, r2
 8012444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801244e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012452:	d11f      	bne.n	8012494 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8012454:	68bb      	ldr	r3, [r7, #8]
 8012456:	015a      	lsls	r2, r3, #5
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	4413      	add	r3, r2
 801245c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	68ba      	ldr	r2, [r7, #8]
 8012464:	0151      	lsls	r1, r2, #5
 8012466:	68fa      	ldr	r2, [r7, #12]
 8012468:	440a      	add	r2, r1
 801246a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801246e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012472:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8012474:	68bb      	ldr	r3, [r7, #8]
 8012476:	015a      	lsls	r2, r3, #5
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	4413      	add	r3, r2
 801247c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	68ba      	ldr	r2, [r7, #8]
 8012484:	0151      	lsls	r1, r2, #5
 8012486:	68fa      	ldr	r2, [r7, #12]
 8012488:	440a      	add	r2, r1
 801248a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801248e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012492:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801249a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801249c:	683b      	ldr	r3, [r7, #0]
 801249e:	781b      	ldrb	r3, [r3, #0]
 80124a0:	f003 030f 	and.w	r3, r3, #15
 80124a4:	2101      	movs	r1, #1
 80124a6:	fa01 f303 	lsl.w	r3, r1, r3
 80124aa:	041b      	lsls	r3, r3, #16
 80124ac:	43db      	mvns	r3, r3
 80124ae:	68f9      	ldr	r1, [r7, #12]
 80124b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80124b4:	4013      	ands	r3, r2
 80124b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80124be:	69da      	ldr	r2, [r3, #28]
 80124c0:	683b      	ldr	r3, [r7, #0]
 80124c2:	781b      	ldrb	r3, [r3, #0]
 80124c4:	f003 030f 	and.w	r3, r3, #15
 80124c8:	2101      	movs	r1, #1
 80124ca:	fa01 f303 	lsl.w	r3, r1, r3
 80124ce:	041b      	lsls	r3, r3, #16
 80124d0:	43db      	mvns	r3, r3
 80124d2:	68f9      	ldr	r1, [r7, #12]
 80124d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80124d8:	4013      	ands	r3, r2
 80124da:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80124dc:	68bb      	ldr	r3, [r7, #8]
 80124de:	015a      	lsls	r2, r3, #5
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	4413      	add	r3, r2
 80124e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80124e8:	681a      	ldr	r2, [r3, #0]
 80124ea:	68bb      	ldr	r3, [r7, #8]
 80124ec:	0159      	lsls	r1, r3, #5
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	440b      	add	r3, r1
 80124f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80124f6:	4619      	mov	r1, r3
 80124f8:	4b05      	ldr	r3, [pc, #20]	; (8012510 <USB_DeactivateEndpoint+0x1b4>)
 80124fa:	4013      	ands	r3, r2
 80124fc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80124fe:	2300      	movs	r3, #0
}
 8012500:	4618      	mov	r0, r3
 8012502:	3714      	adds	r7, #20
 8012504:	46bd      	mov	sp, r7
 8012506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801250a:	4770      	bx	lr
 801250c:	ec337800 	.word	0xec337800
 8012510:	eff37800 	.word	0xeff37800

08012514 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8012514:	b580      	push	{r7, lr}
 8012516:	b08a      	sub	sp, #40	; 0x28
 8012518:	af02      	add	r7, sp, #8
 801251a:	60f8      	str	r0, [r7, #12]
 801251c:	60b9      	str	r1, [r7, #8]
 801251e:	4613      	mov	r3, r2
 8012520:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8012526:	68bb      	ldr	r3, [r7, #8]
 8012528:	781b      	ldrb	r3, [r3, #0]
 801252a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801252c:	68bb      	ldr	r3, [r7, #8]
 801252e:	785b      	ldrb	r3, [r3, #1]
 8012530:	2b01      	cmp	r3, #1
 8012532:	f040 8163 	bne.w	80127fc <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8012536:	68bb      	ldr	r3, [r7, #8]
 8012538:	695b      	ldr	r3, [r3, #20]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d132      	bne.n	80125a4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801253e:	69bb      	ldr	r3, [r7, #24]
 8012540:	015a      	lsls	r2, r3, #5
 8012542:	69fb      	ldr	r3, [r7, #28]
 8012544:	4413      	add	r3, r2
 8012546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801254a:	691a      	ldr	r2, [r3, #16]
 801254c:	69bb      	ldr	r3, [r7, #24]
 801254e:	0159      	lsls	r1, r3, #5
 8012550:	69fb      	ldr	r3, [r7, #28]
 8012552:	440b      	add	r3, r1
 8012554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012558:	4619      	mov	r1, r3
 801255a:	4ba5      	ldr	r3, [pc, #660]	; (80127f0 <USB_EPStartXfer+0x2dc>)
 801255c:	4013      	ands	r3, r2
 801255e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012560:	69bb      	ldr	r3, [r7, #24]
 8012562:	015a      	lsls	r2, r3, #5
 8012564:	69fb      	ldr	r3, [r7, #28]
 8012566:	4413      	add	r3, r2
 8012568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801256c:	691b      	ldr	r3, [r3, #16]
 801256e:	69ba      	ldr	r2, [r7, #24]
 8012570:	0151      	lsls	r1, r2, #5
 8012572:	69fa      	ldr	r2, [r7, #28]
 8012574:	440a      	add	r2, r1
 8012576:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801257a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801257e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012580:	69bb      	ldr	r3, [r7, #24]
 8012582:	015a      	lsls	r2, r3, #5
 8012584:	69fb      	ldr	r3, [r7, #28]
 8012586:	4413      	add	r3, r2
 8012588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801258c:	691a      	ldr	r2, [r3, #16]
 801258e:	69bb      	ldr	r3, [r7, #24]
 8012590:	0159      	lsls	r1, r3, #5
 8012592:	69fb      	ldr	r3, [r7, #28]
 8012594:	440b      	add	r3, r1
 8012596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801259a:	4619      	mov	r1, r3
 801259c:	4b95      	ldr	r3, [pc, #596]	; (80127f4 <USB_EPStartXfer+0x2e0>)
 801259e:	4013      	ands	r3, r2
 80125a0:	610b      	str	r3, [r1, #16]
 80125a2:	e074      	b.n	801268e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80125a4:	69bb      	ldr	r3, [r7, #24]
 80125a6:	015a      	lsls	r2, r3, #5
 80125a8:	69fb      	ldr	r3, [r7, #28]
 80125aa:	4413      	add	r3, r2
 80125ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125b0:	691a      	ldr	r2, [r3, #16]
 80125b2:	69bb      	ldr	r3, [r7, #24]
 80125b4:	0159      	lsls	r1, r3, #5
 80125b6:	69fb      	ldr	r3, [r7, #28]
 80125b8:	440b      	add	r3, r1
 80125ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125be:	4619      	mov	r1, r3
 80125c0:	4b8c      	ldr	r3, [pc, #560]	; (80127f4 <USB_EPStartXfer+0x2e0>)
 80125c2:	4013      	ands	r3, r2
 80125c4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80125c6:	69bb      	ldr	r3, [r7, #24]
 80125c8:	015a      	lsls	r2, r3, #5
 80125ca:	69fb      	ldr	r3, [r7, #28]
 80125cc:	4413      	add	r3, r2
 80125ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125d2:	691a      	ldr	r2, [r3, #16]
 80125d4:	69bb      	ldr	r3, [r7, #24]
 80125d6:	0159      	lsls	r1, r3, #5
 80125d8:	69fb      	ldr	r3, [r7, #28]
 80125da:	440b      	add	r3, r1
 80125dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125e0:	4619      	mov	r1, r3
 80125e2:	4b83      	ldr	r3, [pc, #524]	; (80127f0 <USB_EPStartXfer+0x2dc>)
 80125e4:	4013      	ands	r3, r2
 80125e6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80125e8:	69bb      	ldr	r3, [r7, #24]
 80125ea:	015a      	lsls	r2, r3, #5
 80125ec:	69fb      	ldr	r3, [r7, #28]
 80125ee:	4413      	add	r3, r2
 80125f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125f4:	691a      	ldr	r2, [r3, #16]
 80125f6:	68bb      	ldr	r3, [r7, #8]
 80125f8:	6959      	ldr	r1, [r3, #20]
 80125fa:	68bb      	ldr	r3, [r7, #8]
 80125fc:	689b      	ldr	r3, [r3, #8]
 80125fe:	440b      	add	r3, r1
 8012600:	1e59      	subs	r1, r3, #1
 8012602:	68bb      	ldr	r3, [r7, #8]
 8012604:	689b      	ldr	r3, [r3, #8]
 8012606:	fbb1 f3f3 	udiv	r3, r1, r3
 801260a:	04d9      	lsls	r1, r3, #19
 801260c:	4b7a      	ldr	r3, [pc, #488]	; (80127f8 <USB_EPStartXfer+0x2e4>)
 801260e:	400b      	ands	r3, r1
 8012610:	69b9      	ldr	r1, [r7, #24]
 8012612:	0148      	lsls	r0, r1, #5
 8012614:	69f9      	ldr	r1, [r7, #28]
 8012616:	4401      	add	r1, r0
 8012618:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801261c:	4313      	orrs	r3, r2
 801261e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012620:	69bb      	ldr	r3, [r7, #24]
 8012622:	015a      	lsls	r2, r3, #5
 8012624:	69fb      	ldr	r3, [r7, #28]
 8012626:	4413      	add	r3, r2
 8012628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801262c:	691a      	ldr	r2, [r3, #16]
 801262e:	68bb      	ldr	r3, [r7, #8]
 8012630:	695b      	ldr	r3, [r3, #20]
 8012632:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012636:	69b9      	ldr	r1, [r7, #24]
 8012638:	0148      	lsls	r0, r1, #5
 801263a:	69f9      	ldr	r1, [r7, #28]
 801263c:	4401      	add	r1, r0
 801263e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012642:	4313      	orrs	r3, r2
 8012644:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8012646:	68bb      	ldr	r3, [r7, #8]
 8012648:	78db      	ldrb	r3, [r3, #3]
 801264a:	2b01      	cmp	r3, #1
 801264c:	d11f      	bne.n	801268e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801264e:	69bb      	ldr	r3, [r7, #24]
 8012650:	015a      	lsls	r2, r3, #5
 8012652:	69fb      	ldr	r3, [r7, #28]
 8012654:	4413      	add	r3, r2
 8012656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801265a:	691b      	ldr	r3, [r3, #16]
 801265c:	69ba      	ldr	r2, [r7, #24]
 801265e:	0151      	lsls	r1, r2, #5
 8012660:	69fa      	ldr	r2, [r7, #28]
 8012662:	440a      	add	r2, r1
 8012664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012668:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801266c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801266e:	69bb      	ldr	r3, [r7, #24]
 8012670:	015a      	lsls	r2, r3, #5
 8012672:	69fb      	ldr	r3, [r7, #28]
 8012674:	4413      	add	r3, r2
 8012676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801267a:	691b      	ldr	r3, [r3, #16]
 801267c:	69ba      	ldr	r2, [r7, #24]
 801267e:	0151      	lsls	r1, r2, #5
 8012680:	69fa      	ldr	r2, [r7, #28]
 8012682:	440a      	add	r2, r1
 8012684:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012688:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801268c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801268e:	79fb      	ldrb	r3, [r7, #7]
 8012690:	2b01      	cmp	r3, #1
 8012692:	d14b      	bne.n	801272c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012694:	68bb      	ldr	r3, [r7, #8]
 8012696:	691b      	ldr	r3, [r3, #16]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d009      	beq.n	80126b0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801269c:	69bb      	ldr	r3, [r7, #24]
 801269e:	015a      	lsls	r2, r3, #5
 80126a0:	69fb      	ldr	r3, [r7, #28]
 80126a2:	4413      	add	r3, r2
 80126a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126a8:	461a      	mov	r2, r3
 80126aa:	68bb      	ldr	r3, [r7, #8]
 80126ac:	691b      	ldr	r3, [r3, #16]
 80126ae:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80126b0:	68bb      	ldr	r3, [r7, #8]
 80126b2:	78db      	ldrb	r3, [r3, #3]
 80126b4:	2b01      	cmp	r3, #1
 80126b6:	d128      	bne.n	801270a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80126b8:	69fb      	ldr	r3, [r7, #28]
 80126ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80126be:	689b      	ldr	r3, [r3, #8]
 80126c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d110      	bne.n	80126ea <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80126c8:	69bb      	ldr	r3, [r7, #24]
 80126ca:	015a      	lsls	r2, r3, #5
 80126cc:	69fb      	ldr	r3, [r7, #28]
 80126ce:	4413      	add	r3, r2
 80126d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	69ba      	ldr	r2, [r7, #24]
 80126d8:	0151      	lsls	r1, r2, #5
 80126da:	69fa      	ldr	r2, [r7, #28]
 80126dc:	440a      	add	r2, r1
 80126de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80126e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80126e6:	6013      	str	r3, [r2, #0]
 80126e8:	e00f      	b.n	801270a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80126ea:	69bb      	ldr	r3, [r7, #24]
 80126ec:	015a      	lsls	r2, r3, #5
 80126ee:	69fb      	ldr	r3, [r7, #28]
 80126f0:	4413      	add	r3, r2
 80126f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	69ba      	ldr	r2, [r7, #24]
 80126fa:	0151      	lsls	r1, r2, #5
 80126fc:	69fa      	ldr	r2, [r7, #28]
 80126fe:	440a      	add	r2, r1
 8012700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012708:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801270a:	69bb      	ldr	r3, [r7, #24]
 801270c:	015a      	lsls	r2, r3, #5
 801270e:	69fb      	ldr	r3, [r7, #28]
 8012710:	4413      	add	r3, r2
 8012712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	69ba      	ldr	r2, [r7, #24]
 801271a:	0151      	lsls	r1, r2, #5
 801271c:	69fa      	ldr	r2, [r7, #28]
 801271e:	440a      	add	r2, r1
 8012720:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012724:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012728:	6013      	str	r3, [r2, #0]
 801272a:	e133      	b.n	8012994 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801272c:	69bb      	ldr	r3, [r7, #24]
 801272e:	015a      	lsls	r2, r3, #5
 8012730:	69fb      	ldr	r3, [r7, #28]
 8012732:	4413      	add	r3, r2
 8012734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	69ba      	ldr	r2, [r7, #24]
 801273c:	0151      	lsls	r1, r2, #5
 801273e:	69fa      	ldr	r2, [r7, #28]
 8012740:	440a      	add	r2, r1
 8012742:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012746:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801274a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801274c:	68bb      	ldr	r3, [r7, #8]
 801274e:	78db      	ldrb	r3, [r3, #3]
 8012750:	2b01      	cmp	r3, #1
 8012752:	d015      	beq.n	8012780 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8012754:	68bb      	ldr	r3, [r7, #8]
 8012756:	695b      	ldr	r3, [r3, #20]
 8012758:	2b00      	cmp	r3, #0
 801275a:	f000 811b 	beq.w	8012994 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801275e:	69fb      	ldr	r3, [r7, #28]
 8012760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012764:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012766:	68bb      	ldr	r3, [r7, #8]
 8012768:	781b      	ldrb	r3, [r3, #0]
 801276a:	f003 030f 	and.w	r3, r3, #15
 801276e:	2101      	movs	r1, #1
 8012770:	fa01 f303 	lsl.w	r3, r1, r3
 8012774:	69f9      	ldr	r1, [r7, #28]
 8012776:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801277a:	4313      	orrs	r3, r2
 801277c:	634b      	str	r3, [r1, #52]	; 0x34
 801277e:	e109      	b.n	8012994 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012780:	69fb      	ldr	r3, [r7, #28]
 8012782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012786:	689b      	ldr	r3, [r3, #8]
 8012788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801278c:	2b00      	cmp	r3, #0
 801278e:	d110      	bne.n	80127b2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012790:	69bb      	ldr	r3, [r7, #24]
 8012792:	015a      	lsls	r2, r3, #5
 8012794:	69fb      	ldr	r3, [r7, #28]
 8012796:	4413      	add	r3, r2
 8012798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	69ba      	ldr	r2, [r7, #24]
 80127a0:	0151      	lsls	r1, r2, #5
 80127a2:	69fa      	ldr	r2, [r7, #28]
 80127a4:	440a      	add	r2, r1
 80127a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80127aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80127ae:	6013      	str	r3, [r2, #0]
 80127b0:	e00f      	b.n	80127d2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80127b2:	69bb      	ldr	r3, [r7, #24]
 80127b4:	015a      	lsls	r2, r3, #5
 80127b6:	69fb      	ldr	r3, [r7, #28]
 80127b8:	4413      	add	r3, r2
 80127ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	69ba      	ldr	r2, [r7, #24]
 80127c2:	0151      	lsls	r1, r2, #5
 80127c4:	69fa      	ldr	r2, [r7, #28]
 80127c6:	440a      	add	r2, r1
 80127c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80127cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80127d0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80127d2:	68bb      	ldr	r3, [r7, #8]
 80127d4:	68d9      	ldr	r1, [r3, #12]
 80127d6:	68bb      	ldr	r3, [r7, #8]
 80127d8:	781a      	ldrb	r2, [r3, #0]
 80127da:	68bb      	ldr	r3, [r7, #8]
 80127dc:	695b      	ldr	r3, [r3, #20]
 80127de:	b298      	uxth	r0, r3
 80127e0:	79fb      	ldrb	r3, [r7, #7]
 80127e2:	9300      	str	r3, [sp, #0]
 80127e4:	4603      	mov	r3, r0
 80127e6:	68f8      	ldr	r0, [r7, #12]
 80127e8:	f000 fa38 	bl	8012c5c <USB_WritePacket>
 80127ec:	e0d2      	b.n	8012994 <USB_EPStartXfer+0x480>
 80127ee:	bf00      	nop
 80127f0:	e007ffff 	.word	0xe007ffff
 80127f4:	fff80000 	.word	0xfff80000
 80127f8:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80127fc:	69bb      	ldr	r3, [r7, #24]
 80127fe:	015a      	lsls	r2, r3, #5
 8012800:	69fb      	ldr	r3, [r7, #28]
 8012802:	4413      	add	r3, r2
 8012804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012808:	691a      	ldr	r2, [r3, #16]
 801280a:	69bb      	ldr	r3, [r7, #24]
 801280c:	0159      	lsls	r1, r3, #5
 801280e:	69fb      	ldr	r3, [r7, #28]
 8012810:	440b      	add	r3, r1
 8012812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012816:	4619      	mov	r1, r3
 8012818:	4b61      	ldr	r3, [pc, #388]	; (80129a0 <USB_EPStartXfer+0x48c>)
 801281a:	4013      	ands	r3, r2
 801281c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801281e:	69bb      	ldr	r3, [r7, #24]
 8012820:	015a      	lsls	r2, r3, #5
 8012822:	69fb      	ldr	r3, [r7, #28]
 8012824:	4413      	add	r3, r2
 8012826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801282a:	691a      	ldr	r2, [r3, #16]
 801282c:	69bb      	ldr	r3, [r7, #24]
 801282e:	0159      	lsls	r1, r3, #5
 8012830:	69fb      	ldr	r3, [r7, #28]
 8012832:	440b      	add	r3, r1
 8012834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012838:	4619      	mov	r1, r3
 801283a:	4b5a      	ldr	r3, [pc, #360]	; (80129a4 <USB_EPStartXfer+0x490>)
 801283c:	4013      	ands	r3, r2
 801283e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8012840:	68bb      	ldr	r3, [r7, #8]
 8012842:	695b      	ldr	r3, [r3, #20]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d123      	bne.n	8012890 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8012848:	69bb      	ldr	r3, [r7, #24]
 801284a:	015a      	lsls	r2, r3, #5
 801284c:	69fb      	ldr	r3, [r7, #28]
 801284e:	4413      	add	r3, r2
 8012850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012854:	691a      	ldr	r2, [r3, #16]
 8012856:	68bb      	ldr	r3, [r7, #8]
 8012858:	689b      	ldr	r3, [r3, #8]
 801285a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801285e:	69b9      	ldr	r1, [r7, #24]
 8012860:	0148      	lsls	r0, r1, #5
 8012862:	69f9      	ldr	r1, [r7, #28]
 8012864:	4401      	add	r1, r0
 8012866:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801286a:	4313      	orrs	r3, r2
 801286c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801286e:	69bb      	ldr	r3, [r7, #24]
 8012870:	015a      	lsls	r2, r3, #5
 8012872:	69fb      	ldr	r3, [r7, #28]
 8012874:	4413      	add	r3, r2
 8012876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801287a:	691b      	ldr	r3, [r3, #16]
 801287c:	69ba      	ldr	r2, [r7, #24]
 801287e:	0151      	lsls	r1, r2, #5
 8012880:	69fa      	ldr	r2, [r7, #28]
 8012882:	440a      	add	r2, r1
 8012884:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012888:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801288c:	6113      	str	r3, [r2, #16]
 801288e:	e033      	b.n	80128f8 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8012890:	68bb      	ldr	r3, [r7, #8]
 8012892:	695a      	ldr	r2, [r3, #20]
 8012894:	68bb      	ldr	r3, [r7, #8]
 8012896:	689b      	ldr	r3, [r3, #8]
 8012898:	4413      	add	r3, r2
 801289a:	1e5a      	subs	r2, r3, #1
 801289c:	68bb      	ldr	r3, [r7, #8]
 801289e:	689b      	ldr	r3, [r3, #8]
 80128a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80128a4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80128a6:	69bb      	ldr	r3, [r7, #24]
 80128a8:	015a      	lsls	r2, r3, #5
 80128aa:	69fb      	ldr	r3, [r7, #28]
 80128ac:	4413      	add	r3, r2
 80128ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128b2:	691a      	ldr	r2, [r3, #16]
 80128b4:	8afb      	ldrh	r3, [r7, #22]
 80128b6:	04d9      	lsls	r1, r3, #19
 80128b8:	4b3b      	ldr	r3, [pc, #236]	; (80129a8 <USB_EPStartXfer+0x494>)
 80128ba:	400b      	ands	r3, r1
 80128bc:	69b9      	ldr	r1, [r7, #24]
 80128be:	0148      	lsls	r0, r1, #5
 80128c0:	69f9      	ldr	r1, [r7, #28]
 80128c2:	4401      	add	r1, r0
 80128c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80128c8:	4313      	orrs	r3, r2
 80128ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80128cc:	69bb      	ldr	r3, [r7, #24]
 80128ce:	015a      	lsls	r2, r3, #5
 80128d0:	69fb      	ldr	r3, [r7, #28]
 80128d2:	4413      	add	r3, r2
 80128d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128d8:	691a      	ldr	r2, [r3, #16]
 80128da:	68bb      	ldr	r3, [r7, #8]
 80128dc:	689b      	ldr	r3, [r3, #8]
 80128de:	8af9      	ldrh	r1, [r7, #22]
 80128e0:	fb01 f303 	mul.w	r3, r1, r3
 80128e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80128e8:	69b9      	ldr	r1, [r7, #24]
 80128ea:	0148      	lsls	r0, r1, #5
 80128ec:	69f9      	ldr	r1, [r7, #28]
 80128ee:	4401      	add	r1, r0
 80128f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80128f4:	4313      	orrs	r3, r2
 80128f6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80128f8:	79fb      	ldrb	r3, [r7, #7]
 80128fa:	2b01      	cmp	r3, #1
 80128fc:	d10d      	bne.n	801291a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80128fe:	68bb      	ldr	r3, [r7, #8]
 8012900:	68db      	ldr	r3, [r3, #12]
 8012902:	2b00      	cmp	r3, #0
 8012904:	d009      	beq.n	801291a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012906:	68bb      	ldr	r3, [r7, #8]
 8012908:	68d9      	ldr	r1, [r3, #12]
 801290a:	69bb      	ldr	r3, [r7, #24]
 801290c:	015a      	lsls	r2, r3, #5
 801290e:	69fb      	ldr	r3, [r7, #28]
 8012910:	4413      	add	r3, r2
 8012912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012916:	460a      	mov	r2, r1
 8012918:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801291a:	68bb      	ldr	r3, [r7, #8]
 801291c:	78db      	ldrb	r3, [r3, #3]
 801291e:	2b01      	cmp	r3, #1
 8012920:	d128      	bne.n	8012974 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012922:	69fb      	ldr	r3, [r7, #28]
 8012924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012928:	689b      	ldr	r3, [r3, #8]
 801292a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801292e:	2b00      	cmp	r3, #0
 8012930:	d110      	bne.n	8012954 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8012932:	69bb      	ldr	r3, [r7, #24]
 8012934:	015a      	lsls	r2, r3, #5
 8012936:	69fb      	ldr	r3, [r7, #28]
 8012938:	4413      	add	r3, r2
 801293a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	69ba      	ldr	r2, [r7, #24]
 8012942:	0151      	lsls	r1, r2, #5
 8012944:	69fa      	ldr	r2, [r7, #28]
 8012946:	440a      	add	r2, r1
 8012948:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801294c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012950:	6013      	str	r3, [r2, #0]
 8012952:	e00f      	b.n	8012974 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8012954:	69bb      	ldr	r3, [r7, #24]
 8012956:	015a      	lsls	r2, r3, #5
 8012958:	69fb      	ldr	r3, [r7, #28]
 801295a:	4413      	add	r3, r2
 801295c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	69ba      	ldr	r2, [r7, #24]
 8012964:	0151      	lsls	r1, r2, #5
 8012966:	69fa      	ldr	r2, [r7, #28]
 8012968:	440a      	add	r2, r1
 801296a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801296e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012972:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012974:	69bb      	ldr	r3, [r7, #24]
 8012976:	015a      	lsls	r2, r3, #5
 8012978:	69fb      	ldr	r3, [r7, #28]
 801297a:	4413      	add	r3, r2
 801297c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	69ba      	ldr	r2, [r7, #24]
 8012984:	0151      	lsls	r1, r2, #5
 8012986:	69fa      	ldr	r2, [r7, #28]
 8012988:	440a      	add	r2, r1
 801298a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801298e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012992:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012994:	2300      	movs	r3, #0
}
 8012996:	4618      	mov	r0, r3
 8012998:	3720      	adds	r7, #32
 801299a:	46bd      	mov	sp, r7
 801299c:	bd80      	pop	{r7, pc}
 801299e:	bf00      	nop
 80129a0:	fff80000 	.word	0xfff80000
 80129a4:	e007ffff 	.word	0xe007ffff
 80129a8:	1ff80000 	.word	0x1ff80000

080129ac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80129ac:	b480      	push	{r7}
 80129ae:	b087      	sub	sp, #28
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	60f8      	str	r0, [r7, #12]
 80129b4:	60b9      	str	r1, [r7, #8]
 80129b6:	4613      	mov	r3, r2
 80129b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80129be:	68bb      	ldr	r3, [r7, #8]
 80129c0:	781b      	ldrb	r3, [r3, #0]
 80129c2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80129c4:	68bb      	ldr	r3, [r7, #8]
 80129c6:	785b      	ldrb	r3, [r3, #1]
 80129c8:	2b01      	cmp	r3, #1
 80129ca:	f040 80cd 	bne.w	8012b68 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80129ce:	68bb      	ldr	r3, [r7, #8]
 80129d0:	695b      	ldr	r3, [r3, #20]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d132      	bne.n	8012a3c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80129d6:	693b      	ldr	r3, [r7, #16]
 80129d8:	015a      	lsls	r2, r3, #5
 80129da:	697b      	ldr	r3, [r7, #20]
 80129dc:	4413      	add	r3, r2
 80129de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129e2:	691a      	ldr	r2, [r3, #16]
 80129e4:	693b      	ldr	r3, [r7, #16]
 80129e6:	0159      	lsls	r1, r3, #5
 80129e8:	697b      	ldr	r3, [r7, #20]
 80129ea:	440b      	add	r3, r1
 80129ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129f0:	4619      	mov	r1, r3
 80129f2:	4b98      	ldr	r3, [pc, #608]	; (8012c54 <USB_EP0StartXfer+0x2a8>)
 80129f4:	4013      	ands	r3, r2
 80129f6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80129f8:	693b      	ldr	r3, [r7, #16]
 80129fa:	015a      	lsls	r2, r3, #5
 80129fc:	697b      	ldr	r3, [r7, #20]
 80129fe:	4413      	add	r3, r2
 8012a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a04:	691b      	ldr	r3, [r3, #16]
 8012a06:	693a      	ldr	r2, [r7, #16]
 8012a08:	0151      	lsls	r1, r2, #5
 8012a0a:	697a      	ldr	r2, [r7, #20]
 8012a0c:	440a      	add	r2, r1
 8012a0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012a12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012a16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012a18:	693b      	ldr	r3, [r7, #16]
 8012a1a:	015a      	lsls	r2, r3, #5
 8012a1c:	697b      	ldr	r3, [r7, #20]
 8012a1e:	4413      	add	r3, r2
 8012a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a24:	691a      	ldr	r2, [r3, #16]
 8012a26:	693b      	ldr	r3, [r7, #16]
 8012a28:	0159      	lsls	r1, r3, #5
 8012a2a:	697b      	ldr	r3, [r7, #20]
 8012a2c:	440b      	add	r3, r1
 8012a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a32:	4619      	mov	r1, r3
 8012a34:	4b88      	ldr	r3, [pc, #544]	; (8012c58 <USB_EP0StartXfer+0x2ac>)
 8012a36:	4013      	ands	r3, r2
 8012a38:	610b      	str	r3, [r1, #16]
 8012a3a:	e04e      	b.n	8012ada <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012a3c:	693b      	ldr	r3, [r7, #16]
 8012a3e:	015a      	lsls	r2, r3, #5
 8012a40:	697b      	ldr	r3, [r7, #20]
 8012a42:	4413      	add	r3, r2
 8012a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a48:	691a      	ldr	r2, [r3, #16]
 8012a4a:	693b      	ldr	r3, [r7, #16]
 8012a4c:	0159      	lsls	r1, r3, #5
 8012a4e:	697b      	ldr	r3, [r7, #20]
 8012a50:	440b      	add	r3, r1
 8012a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a56:	4619      	mov	r1, r3
 8012a58:	4b7f      	ldr	r3, [pc, #508]	; (8012c58 <USB_EP0StartXfer+0x2ac>)
 8012a5a:	4013      	ands	r3, r2
 8012a5c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012a5e:	693b      	ldr	r3, [r7, #16]
 8012a60:	015a      	lsls	r2, r3, #5
 8012a62:	697b      	ldr	r3, [r7, #20]
 8012a64:	4413      	add	r3, r2
 8012a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a6a:	691a      	ldr	r2, [r3, #16]
 8012a6c:	693b      	ldr	r3, [r7, #16]
 8012a6e:	0159      	lsls	r1, r3, #5
 8012a70:	697b      	ldr	r3, [r7, #20]
 8012a72:	440b      	add	r3, r1
 8012a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a78:	4619      	mov	r1, r3
 8012a7a:	4b76      	ldr	r3, [pc, #472]	; (8012c54 <USB_EP0StartXfer+0x2a8>)
 8012a7c:	4013      	ands	r3, r2
 8012a7e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8012a80:	68bb      	ldr	r3, [r7, #8]
 8012a82:	695a      	ldr	r2, [r3, #20]
 8012a84:	68bb      	ldr	r3, [r7, #8]
 8012a86:	689b      	ldr	r3, [r3, #8]
 8012a88:	429a      	cmp	r2, r3
 8012a8a:	d903      	bls.n	8012a94 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8012a8c:	68bb      	ldr	r3, [r7, #8]
 8012a8e:	689a      	ldr	r2, [r3, #8]
 8012a90:	68bb      	ldr	r3, [r7, #8]
 8012a92:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012a94:	693b      	ldr	r3, [r7, #16]
 8012a96:	015a      	lsls	r2, r3, #5
 8012a98:	697b      	ldr	r3, [r7, #20]
 8012a9a:	4413      	add	r3, r2
 8012a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012aa0:	691b      	ldr	r3, [r3, #16]
 8012aa2:	693a      	ldr	r2, [r7, #16]
 8012aa4:	0151      	lsls	r1, r2, #5
 8012aa6:	697a      	ldr	r2, [r7, #20]
 8012aa8:	440a      	add	r2, r1
 8012aaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012aae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012ab2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012ab4:	693b      	ldr	r3, [r7, #16]
 8012ab6:	015a      	lsls	r2, r3, #5
 8012ab8:	697b      	ldr	r3, [r7, #20]
 8012aba:	4413      	add	r3, r2
 8012abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ac0:	691a      	ldr	r2, [r3, #16]
 8012ac2:	68bb      	ldr	r3, [r7, #8]
 8012ac4:	695b      	ldr	r3, [r3, #20]
 8012ac6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012aca:	6939      	ldr	r1, [r7, #16]
 8012acc:	0148      	lsls	r0, r1, #5
 8012ace:	6979      	ldr	r1, [r7, #20]
 8012ad0:	4401      	add	r1, r0
 8012ad2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012ad6:	4313      	orrs	r3, r2
 8012ad8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8012ada:	79fb      	ldrb	r3, [r7, #7]
 8012adc:	2b01      	cmp	r3, #1
 8012ade:	d11e      	bne.n	8012b1e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012ae0:	68bb      	ldr	r3, [r7, #8]
 8012ae2:	691b      	ldr	r3, [r3, #16]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d009      	beq.n	8012afc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012ae8:	693b      	ldr	r3, [r7, #16]
 8012aea:	015a      	lsls	r2, r3, #5
 8012aec:	697b      	ldr	r3, [r7, #20]
 8012aee:	4413      	add	r3, r2
 8012af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012af4:	461a      	mov	r2, r3
 8012af6:	68bb      	ldr	r3, [r7, #8]
 8012af8:	691b      	ldr	r3, [r3, #16]
 8012afa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012afc:	693b      	ldr	r3, [r7, #16]
 8012afe:	015a      	lsls	r2, r3, #5
 8012b00:	697b      	ldr	r3, [r7, #20]
 8012b02:	4413      	add	r3, r2
 8012b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	693a      	ldr	r2, [r7, #16]
 8012b0c:	0151      	lsls	r1, r2, #5
 8012b0e:	697a      	ldr	r2, [r7, #20]
 8012b10:	440a      	add	r2, r1
 8012b12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012b16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012b1a:	6013      	str	r3, [r2, #0]
 8012b1c:	e092      	b.n	8012c44 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012b1e:	693b      	ldr	r3, [r7, #16]
 8012b20:	015a      	lsls	r2, r3, #5
 8012b22:	697b      	ldr	r3, [r7, #20]
 8012b24:	4413      	add	r3, r2
 8012b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	693a      	ldr	r2, [r7, #16]
 8012b2e:	0151      	lsls	r1, r2, #5
 8012b30:	697a      	ldr	r2, [r7, #20]
 8012b32:	440a      	add	r2, r1
 8012b34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012b38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012b3c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8012b3e:	68bb      	ldr	r3, [r7, #8]
 8012b40:	695b      	ldr	r3, [r3, #20]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d07e      	beq.n	8012c44 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012b46:	697b      	ldr	r3, [r7, #20]
 8012b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012b4e:	68bb      	ldr	r3, [r7, #8]
 8012b50:	781b      	ldrb	r3, [r3, #0]
 8012b52:	f003 030f 	and.w	r3, r3, #15
 8012b56:	2101      	movs	r1, #1
 8012b58:	fa01 f303 	lsl.w	r3, r1, r3
 8012b5c:	6979      	ldr	r1, [r7, #20]
 8012b5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012b62:	4313      	orrs	r3, r2
 8012b64:	634b      	str	r3, [r1, #52]	; 0x34
 8012b66:	e06d      	b.n	8012c44 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012b68:	693b      	ldr	r3, [r7, #16]
 8012b6a:	015a      	lsls	r2, r3, #5
 8012b6c:	697b      	ldr	r3, [r7, #20]
 8012b6e:	4413      	add	r3, r2
 8012b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b74:	691a      	ldr	r2, [r3, #16]
 8012b76:	693b      	ldr	r3, [r7, #16]
 8012b78:	0159      	lsls	r1, r3, #5
 8012b7a:	697b      	ldr	r3, [r7, #20]
 8012b7c:	440b      	add	r3, r1
 8012b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b82:	4619      	mov	r1, r3
 8012b84:	4b34      	ldr	r3, [pc, #208]	; (8012c58 <USB_EP0StartXfer+0x2ac>)
 8012b86:	4013      	ands	r3, r2
 8012b88:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012b8a:	693b      	ldr	r3, [r7, #16]
 8012b8c:	015a      	lsls	r2, r3, #5
 8012b8e:	697b      	ldr	r3, [r7, #20]
 8012b90:	4413      	add	r3, r2
 8012b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b96:	691a      	ldr	r2, [r3, #16]
 8012b98:	693b      	ldr	r3, [r7, #16]
 8012b9a:	0159      	lsls	r1, r3, #5
 8012b9c:	697b      	ldr	r3, [r7, #20]
 8012b9e:	440b      	add	r3, r1
 8012ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ba4:	4619      	mov	r1, r3
 8012ba6:	4b2b      	ldr	r3, [pc, #172]	; (8012c54 <USB_EP0StartXfer+0x2a8>)
 8012ba8:	4013      	ands	r3, r2
 8012baa:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8012bac:	68bb      	ldr	r3, [r7, #8]
 8012bae:	695b      	ldr	r3, [r3, #20]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d003      	beq.n	8012bbc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8012bb4:	68bb      	ldr	r3, [r7, #8]
 8012bb6:	689a      	ldr	r2, [r3, #8]
 8012bb8:	68bb      	ldr	r3, [r7, #8]
 8012bba:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012bbc:	693b      	ldr	r3, [r7, #16]
 8012bbe:	015a      	lsls	r2, r3, #5
 8012bc0:	697b      	ldr	r3, [r7, #20]
 8012bc2:	4413      	add	r3, r2
 8012bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012bc8:	691b      	ldr	r3, [r3, #16]
 8012bca:	693a      	ldr	r2, [r7, #16]
 8012bcc:	0151      	lsls	r1, r2, #5
 8012bce:	697a      	ldr	r2, [r7, #20]
 8012bd0:	440a      	add	r2, r1
 8012bd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012bd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012bda:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8012bdc:	693b      	ldr	r3, [r7, #16]
 8012bde:	015a      	lsls	r2, r3, #5
 8012be0:	697b      	ldr	r3, [r7, #20]
 8012be2:	4413      	add	r3, r2
 8012be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012be8:	691a      	ldr	r2, [r3, #16]
 8012bea:	68bb      	ldr	r3, [r7, #8]
 8012bec:	689b      	ldr	r3, [r3, #8]
 8012bee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012bf2:	6939      	ldr	r1, [r7, #16]
 8012bf4:	0148      	lsls	r0, r1, #5
 8012bf6:	6979      	ldr	r1, [r7, #20]
 8012bf8:	4401      	add	r1, r0
 8012bfa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012bfe:	4313      	orrs	r3, r2
 8012c00:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8012c02:	79fb      	ldrb	r3, [r7, #7]
 8012c04:	2b01      	cmp	r3, #1
 8012c06:	d10d      	bne.n	8012c24 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8012c08:	68bb      	ldr	r3, [r7, #8]
 8012c0a:	68db      	ldr	r3, [r3, #12]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d009      	beq.n	8012c24 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012c10:	68bb      	ldr	r3, [r7, #8]
 8012c12:	68d9      	ldr	r1, [r3, #12]
 8012c14:	693b      	ldr	r3, [r7, #16]
 8012c16:	015a      	lsls	r2, r3, #5
 8012c18:	697b      	ldr	r3, [r7, #20]
 8012c1a:	4413      	add	r3, r2
 8012c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c20:	460a      	mov	r2, r1
 8012c22:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012c24:	693b      	ldr	r3, [r7, #16]
 8012c26:	015a      	lsls	r2, r3, #5
 8012c28:	697b      	ldr	r3, [r7, #20]
 8012c2a:	4413      	add	r3, r2
 8012c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	693a      	ldr	r2, [r7, #16]
 8012c34:	0151      	lsls	r1, r2, #5
 8012c36:	697a      	ldr	r2, [r7, #20]
 8012c38:	440a      	add	r2, r1
 8012c3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012c3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012c42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012c44:	2300      	movs	r3, #0
}
 8012c46:	4618      	mov	r0, r3
 8012c48:	371c      	adds	r7, #28
 8012c4a:	46bd      	mov	sp, r7
 8012c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c50:	4770      	bx	lr
 8012c52:	bf00      	nop
 8012c54:	e007ffff 	.word	0xe007ffff
 8012c58:	fff80000 	.word	0xfff80000

08012c5c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8012c5c:	b480      	push	{r7}
 8012c5e:	b089      	sub	sp, #36	; 0x24
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	60f8      	str	r0, [r7, #12]
 8012c64:	60b9      	str	r1, [r7, #8]
 8012c66:	4611      	mov	r1, r2
 8012c68:	461a      	mov	r2, r3
 8012c6a:	460b      	mov	r3, r1
 8012c6c:	71fb      	strb	r3, [r7, #7]
 8012c6e:	4613      	mov	r3, r2
 8012c70:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8012c76:	68bb      	ldr	r3, [r7, #8]
 8012c78:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8012c7a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d11a      	bne.n	8012cb8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8012c82:	88bb      	ldrh	r3, [r7, #4]
 8012c84:	3303      	adds	r3, #3
 8012c86:	089b      	lsrs	r3, r3, #2
 8012c88:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8012c8a:	2300      	movs	r3, #0
 8012c8c:	61bb      	str	r3, [r7, #24]
 8012c8e:	e00f      	b.n	8012cb0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012c90:	79fb      	ldrb	r3, [r7, #7]
 8012c92:	031a      	lsls	r2, r3, #12
 8012c94:	697b      	ldr	r3, [r7, #20]
 8012c96:	4413      	add	r3, r2
 8012c98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012c9c:	461a      	mov	r2, r3
 8012c9e:	69fb      	ldr	r3, [r7, #28]
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8012ca4:	69fb      	ldr	r3, [r7, #28]
 8012ca6:	3304      	adds	r3, #4
 8012ca8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8012caa:	69bb      	ldr	r3, [r7, #24]
 8012cac:	3301      	adds	r3, #1
 8012cae:	61bb      	str	r3, [r7, #24]
 8012cb0:	69ba      	ldr	r2, [r7, #24]
 8012cb2:	693b      	ldr	r3, [r7, #16]
 8012cb4:	429a      	cmp	r2, r3
 8012cb6:	d3eb      	bcc.n	8012c90 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8012cb8:	2300      	movs	r3, #0
}
 8012cba:	4618      	mov	r0, r3
 8012cbc:	3724      	adds	r7, #36	; 0x24
 8012cbe:	46bd      	mov	sp, r7
 8012cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc4:	4770      	bx	lr

08012cc6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8012cc6:	b480      	push	{r7}
 8012cc8:	b089      	sub	sp, #36	; 0x24
 8012cca:	af00      	add	r7, sp, #0
 8012ccc:	60f8      	str	r0, [r7, #12]
 8012cce:	60b9      	str	r1, [r7, #8]
 8012cd0:	4613      	mov	r3, r2
 8012cd2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8012cd8:	68bb      	ldr	r3, [r7, #8]
 8012cda:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8012cdc:	88fb      	ldrh	r3, [r7, #6]
 8012cde:	3303      	adds	r3, #3
 8012ce0:	089b      	lsrs	r3, r3, #2
 8012ce2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	61bb      	str	r3, [r7, #24]
 8012ce8:	e00b      	b.n	8012d02 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012cea:	697b      	ldr	r3, [r7, #20]
 8012cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012cf0:	681a      	ldr	r2, [r3, #0]
 8012cf2:	69fb      	ldr	r3, [r7, #28]
 8012cf4:	601a      	str	r2, [r3, #0]
    pDest++;
 8012cf6:	69fb      	ldr	r3, [r7, #28]
 8012cf8:	3304      	adds	r3, #4
 8012cfa:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8012cfc:	69bb      	ldr	r3, [r7, #24]
 8012cfe:	3301      	adds	r3, #1
 8012d00:	61bb      	str	r3, [r7, #24]
 8012d02:	69ba      	ldr	r2, [r7, #24]
 8012d04:	693b      	ldr	r3, [r7, #16]
 8012d06:	429a      	cmp	r2, r3
 8012d08:	d3ef      	bcc.n	8012cea <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8012d0a:	69fb      	ldr	r3, [r7, #28]
}
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	3724      	adds	r7, #36	; 0x24
 8012d10:	46bd      	mov	sp, r7
 8012d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d16:	4770      	bx	lr

08012d18 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012d18:	b480      	push	{r7}
 8012d1a:	b085      	sub	sp, #20
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	6078      	str	r0, [r7, #4]
 8012d20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012d26:	683b      	ldr	r3, [r7, #0]
 8012d28:	781b      	ldrb	r3, [r3, #0]
 8012d2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012d2c:	683b      	ldr	r3, [r7, #0]
 8012d2e:	785b      	ldrb	r3, [r3, #1]
 8012d30:	2b01      	cmp	r3, #1
 8012d32:	d12c      	bne.n	8012d8e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012d34:	68bb      	ldr	r3, [r7, #8]
 8012d36:	015a      	lsls	r2, r3, #5
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	4413      	add	r3, r2
 8012d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	db12      	blt.n	8012d6c <USB_EPSetStall+0x54>
 8012d46:	68bb      	ldr	r3, [r7, #8]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d00f      	beq.n	8012d6c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8012d4c:	68bb      	ldr	r3, [r7, #8]
 8012d4e:	015a      	lsls	r2, r3, #5
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	4413      	add	r3, r2
 8012d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	68ba      	ldr	r2, [r7, #8]
 8012d5c:	0151      	lsls	r1, r2, #5
 8012d5e:	68fa      	ldr	r2, [r7, #12]
 8012d60:	440a      	add	r2, r1
 8012d62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012d66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012d6a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8012d6c:	68bb      	ldr	r3, [r7, #8]
 8012d6e:	015a      	lsls	r2, r3, #5
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	4413      	add	r3, r2
 8012d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	68ba      	ldr	r2, [r7, #8]
 8012d7c:	0151      	lsls	r1, r2, #5
 8012d7e:	68fa      	ldr	r2, [r7, #12]
 8012d80:	440a      	add	r2, r1
 8012d82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012d86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012d8a:	6013      	str	r3, [r2, #0]
 8012d8c:	e02b      	b.n	8012de6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012d8e:	68bb      	ldr	r3, [r7, #8]
 8012d90:	015a      	lsls	r2, r3, #5
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	4413      	add	r3, r2
 8012d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	db12      	blt.n	8012dc6 <USB_EPSetStall+0xae>
 8012da0:	68bb      	ldr	r3, [r7, #8]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d00f      	beq.n	8012dc6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8012da6:	68bb      	ldr	r3, [r7, #8]
 8012da8:	015a      	lsls	r2, r3, #5
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	4413      	add	r3, r2
 8012dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	68ba      	ldr	r2, [r7, #8]
 8012db6:	0151      	lsls	r1, r2, #5
 8012db8:	68fa      	ldr	r2, [r7, #12]
 8012dba:	440a      	add	r2, r1
 8012dbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012dc0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012dc4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8012dc6:	68bb      	ldr	r3, [r7, #8]
 8012dc8:	015a      	lsls	r2, r3, #5
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	4413      	add	r3, r2
 8012dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	68ba      	ldr	r2, [r7, #8]
 8012dd6:	0151      	lsls	r1, r2, #5
 8012dd8:	68fa      	ldr	r2, [r7, #12]
 8012dda:	440a      	add	r2, r1
 8012ddc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012de0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012de4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012de6:	2300      	movs	r3, #0
}
 8012de8:	4618      	mov	r0, r3
 8012dea:	3714      	adds	r7, #20
 8012dec:	46bd      	mov	sp, r7
 8012dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df2:	4770      	bx	lr

08012df4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012df4:	b480      	push	{r7}
 8012df6:	b085      	sub	sp, #20
 8012df8:	af00      	add	r7, sp, #0
 8012dfa:	6078      	str	r0, [r7, #4]
 8012dfc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012e02:	683b      	ldr	r3, [r7, #0]
 8012e04:	781b      	ldrb	r3, [r3, #0]
 8012e06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012e08:	683b      	ldr	r3, [r7, #0]
 8012e0a:	785b      	ldrb	r3, [r3, #1]
 8012e0c:	2b01      	cmp	r3, #1
 8012e0e:	d128      	bne.n	8012e62 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8012e10:	68bb      	ldr	r3, [r7, #8]
 8012e12:	015a      	lsls	r2, r3, #5
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	4413      	add	r3, r2
 8012e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	68ba      	ldr	r2, [r7, #8]
 8012e20:	0151      	lsls	r1, r2, #5
 8012e22:	68fa      	ldr	r2, [r7, #12]
 8012e24:	440a      	add	r2, r1
 8012e26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012e2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012e2e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012e30:	683b      	ldr	r3, [r7, #0]
 8012e32:	78db      	ldrb	r3, [r3, #3]
 8012e34:	2b03      	cmp	r3, #3
 8012e36:	d003      	beq.n	8012e40 <USB_EPClearStall+0x4c>
 8012e38:	683b      	ldr	r3, [r7, #0]
 8012e3a:	78db      	ldrb	r3, [r3, #3]
 8012e3c:	2b02      	cmp	r3, #2
 8012e3e:	d138      	bne.n	8012eb2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012e40:	68bb      	ldr	r3, [r7, #8]
 8012e42:	015a      	lsls	r2, r3, #5
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	4413      	add	r3, r2
 8012e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	68ba      	ldr	r2, [r7, #8]
 8012e50:	0151      	lsls	r1, r2, #5
 8012e52:	68fa      	ldr	r2, [r7, #12]
 8012e54:	440a      	add	r2, r1
 8012e56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012e5e:	6013      	str	r3, [r2, #0]
 8012e60:	e027      	b.n	8012eb2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8012e62:	68bb      	ldr	r3, [r7, #8]
 8012e64:	015a      	lsls	r2, r3, #5
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	4413      	add	r3, r2
 8012e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	68ba      	ldr	r2, [r7, #8]
 8012e72:	0151      	lsls	r1, r2, #5
 8012e74:	68fa      	ldr	r2, [r7, #12]
 8012e76:	440a      	add	r2, r1
 8012e78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012e7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012e80:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012e82:	683b      	ldr	r3, [r7, #0]
 8012e84:	78db      	ldrb	r3, [r3, #3]
 8012e86:	2b03      	cmp	r3, #3
 8012e88:	d003      	beq.n	8012e92 <USB_EPClearStall+0x9e>
 8012e8a:	683b      	ldr	r3, [r7, #0]
 8012e8c:	78db      	ldrb	r3, [r3, #3]
 8012e8e:	2b02      	cmp	r3, #2
 8012e90:	d10f      	bne.n	8012eb2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012e92:	68bb      	ldr	r3, [r7, #8]
 8012e94:	015a      	lsls	r2, r3, #5
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	4413      	add	r3, r2
 8012e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	68ba      	ldr	r2, [r7, #8]
 8012ea2:	0151      	lsls	r1, r2, #5
 8012ea4:	68fa      	ldr	r2, [r7, #12]
 8012ea6:	440a      	add	r2, r1
 8012ea8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012eb0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8012eb2:	2300      	movs	r3, #0
}
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	3714      	adds	r7, #20
 8012eb8:	46bd      	mov	sp, r7
 8012eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ebe:	4770      	bx	lr

08012ec0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8012ec0:	b480      	push	{r7}
 8012ec2:	b085      	sub	sp, #20
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	6078      	str	r0, [r7, #4]
 8012ec8:	460b      	mov	r3, r1
 8012eca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	68fa      	ldr	r2, [r7, #12]
 8012eda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012ede:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8012ee2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012eea:	681a      	ldr	r2, [r3, #0]
 8012eec:	78fb      	ldrb	r3, [r7, #3]
 8012eee:	011b      	lsls	r3, r3, #4
 8012ef0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8012ef4:	68f9      	ldr	r1, [r7, #12]
 8012ef6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012efa:	4313      	orrs	r3, r2
 8012efc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8012efe:	2300      	movs	r3, #0
}
 8012f00:	4618      	mov	r0, r3
 8012f02:	3714      	adds	r7, #20
 8012f04:	46bd      	mov	sp, r7
 8012f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f0a:	4770      	bx	lr

08012f0c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8012f0c:	b580      	push	{r7, lr}
 8012f0e:	b084      	sub	sp, #16
 8012f10:	af00      	add	r7, sp, #0
 8012f12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f1e:	685b      	ldr	r3, [r3, #4]
 8012f20:	68fa      	ldr	r2, [r7, #12]
 8012f22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012f26:	f023 0302 	bic.w	r3, r3, #2
 8012f2a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8012f2c:	2003      	movs	r0, #3
 8012f2e:	f7f1 fb65 	bl	80045fc <HAL_Delay>

  return HAL_OK;
 8012f32:	2300      	movs	r3, #0
}
 8012f34:	4618      	mov	r0, r3
 8012f36:	3710      	adds	r7, #16
 8012f38:	46bd      	mov	sp, r7
 8012f3a:	bd80      	pop	{r7, pc}

08012f3c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8012f3c:	b580      	push	{r7, lr}
 8012f3e:	b084      	sub	sp, #16
 8012f40:	af00      	add	r7, sp, #0
 8012f42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f4e:	685b      	ldr	r3, [r3, #4]
 8012f50:	68fa      	ldr	r2, [r7, #12]
 8012f52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012f56:	f043 0302 	orr.w	r3, r3, #2
 8012f5a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8012f5c:	2003      	movs	r0, #3
 8012f5e:	f7f1 fb4d 	bl	80045fc <HAL_Delay>

  return HAL_OK;
 8012f62:	2300      	movs	r3, #0
}
 8012f64:	4618      	mov	r0, r3
 8012f66:	3710      	adds	r7, #16
 8012f68:	46bd      	mov	sp, r7
 8012f6a:	bd80      	pop	{r7, pc}

08012f6c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8012f6c:	b480      	push	{r7}
 8012f6e:	b085      	sub	sp, #20
 8012f70:	af00      	add	r7, sp, #0
 8012f72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	695b      	ldr	r3, [r3, #20]
 8012f78:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	699b      	ldr	r3, [r3, #24]
 8012f7e:	68fa      	ldr	r2, [r7, #12]
 8012f80:	4013      	ands	r3, r2
 8012f82:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8012f84:	68fb      	ldr	r3, [r7, #12]
}
 8012f86:	4618      	mov	r0, r3
 8012f88:	3714      	adds	r7, #20
 8012f8a:	46bd      	mov	sp, r7
 8012f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f90:	4770      	bx	lr

08012f92 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012f92:	b480      	push	{r7}
 8012f94:	b085      	sub	sp, #20
 8012f96:	af00      	add	r7, sp, #0
 8012f98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fa4:	699b      	ldr	r3, [r3, #24]
 8012fa6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fae:	69db      	ldr	r3, [r3, #28]
 8012fb0:	68ba      	ldr	r2, [r7, #8]
 8012fb2:	4013      	ands	r3, r2
 8012fb4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8012fb6:	68bb      	ldr	r3, [r7, #8]
 8012fb8:	0c1b      	lsrs	r3, r3, #16
}
 8012fba:	4618      	mov	r0, r3
 8012fbc:	3714      	adds	r7, #20
 8012fbe:	46bd      	mov	sp, r7
 8012fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc4:	4770      	bx	lr

08012fc6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012fc6:	b480      	push	{r7}
 8012fc8:	b085      	sub	sp, #20
 8012fca:	af00      	add	r7, sp, #0
 8012fcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fd8:	699b      	ldr	r3, [r3, #24]
 8012fda:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fe2:	69db      	ldr	r3, [r3, #28]
 8012fe4:	68ba      	ldr	r2, [r7, #8]
 8012fe6:	4013      	ands	r3, r2
 8012fe8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8012fea:	68bb      	ldr	r3, [r7, #8]
 8012fec:	b29b      	uxth	r3, r3
}
 8012fee:	4618      	mov	r0, r3
 8012ff0:	3714      	adds	r7, #20
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff8:	4770      	bx	lr

08012ffa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012ffa:	b480      	push	{r7}
 8012ffc:	b085      	sub	sp, #20
 8012ffe:	af00      	add	r7, sp, #0
 8013000:	6078      	str	r0, [r7, #4]
 8013002:	460b      	mov	r3, r1
 8013004:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801300a:	78fb      	ldrb	r3, [r7, #3]
 801300c:	015a      	lsls	r2, r3, #5
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	4413      	add	r3, r2
 8013012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013016:	689b      	ldr	r3, [r3, #8]
 8013018:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013020:	695b      	ldr	r3, [r3, #20]
 8013022:	68ba      	ldr	r2, [r7, #8]
 8013024:	4013      	ands	r3, r2
 8013026:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013028:	68bb      	ldr	r3, [r7, #8]
}
 801302a:	4618      	mov	r0, r3
 801302c:	3714      	adds	r7, #20
 801302e:	46bd      	mov	sp, r7
 8013030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013034:	4770      	bx	lr

08013036 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013036:	b480      	push	{r7}
 8013038:	b087      	sub	sp, #28
 801303a:	af00      	add	r7, sp, #0
 801303c:	6078      	str	r0, [r7, #4]
 801303e:	460b      	mov	r3, r1
 8013040:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8013046:	697b      	ldr	r3, [r7, #20]
 8013048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801304c:	691b      	ldr	r3, [r3, #16]
 801304e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013050:	697b      	ldr	r3, [r7, #20]
 8013052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013058:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801305a:	78fb      	ldrb	r3, [r7, #3]
 801305c:	f003 030f 	and.w	r3, r3, #15
 8013060:	68fa      	ldr	r2, [r7, #12]
 8013062:	fa22 f303 	lsr.w	r3, r2, r3
 8013066:	01db      	lsls	r3, r3, #7
 8013068:	b2db      	uxtb	r3, r3
 801306a:	693a      	ldr	r2, [r7, #16]
 801306c:	4313      	orrs	r3, r2
 801306e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013070:	78fb      	ldrb	r3, [r7, #3]
 8013072:	015a      	lsls	r2, r3, #5
 8013074:	697b      	ldr	r3, [r7, #20]
 8013076:	4413      	add	r3, r2
 8013078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801307c:	689b      	ldr	r3, [r3, #8]
 801307e:	693a      	ldr	r2, [r7, #16]
 8013080:	4013      	ands	r3, r2
 8013082:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013084:	68bb      	ldr	r3, [r7, #8]
}
 8013086:	4618      	mov	r0, r3
 8013088:	371c      	adds	r7, #28
 801308a:	46bd      	mov	sp, r7
 801308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013090:	4770      	bx	lr

08013092 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013092:	b480      	push	{r7}
 8013094:	b083      	sub	sp, #12
 8013096:	af00      	add	r7, sp, #0
 8013098:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	695b      	ldr	r3, [r3, #20]
 801309e:	f003 0301 	and.w	r3, r3, #1
}
 80130a2:	4618      	mov	r0, r3
 80130a4:	370c      	adds	r7, #12
 80130a6:	46bd      	mov	sp, r7
 80130a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ac:	4770      	bx	lr
	...

080130b0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80130b0:	b480      	push	{r7}
 80130b2:	b085      	sub	sp, #20
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130c2:	681a      	ldr	r2, [r3, #0]
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80130ca:	4619      	mov	r1, r3
 80130cc:	4b09      	ldr	r3, [pc, #36]	; (80130f4 <USB_ActivateSetup+0x44>)
 80130ce:	4013      	ands	r3, r2
 80130d0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80130d8:	685b      	ldr	r3, [r3, #4]
 80130da:	68fa      	ldr	r2, [r7, #12]
 80130dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80130e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80130e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80130e6:	2300      	movs	r3, #0
}
 80130e8:	4618      	mov	r0, r3
 80130ea:	3714      	adds	r7, #20
 80130ec:	46bd      	mov	sp, r7
 80130ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f2:	4770      	bx	lr
 80130f4:	fffff800 	.word	0xfffff800

080130f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80130f8:	b480      	push	{r7}
 80130fa:	b087      	sub	sp, #28
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	60f8      	str	r0, [r7, #12]
 8013100:	460b      	mov	r3, r1
 8013102:	607a      	str	r2, [r7, #4]
 8013104:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	333c      	adds	r3, #60	; 0x3c
 801310e:	3304      	adds	r3, #4
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013114:	693b      	ldr	r3, [r7, #16]
 8013116:	4a26      	ldr	r2, [pc, #152]	; (80131b0 <USB_EP0_OutStart+0xb8>)
 8013118:	4293      	cmp	r3, r2
 801311a:	d90a      	bls.n	8013132 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801311c:	697b      	ldr	r3, [r7, #20]
 801311e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013128:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801312c:	d101      	bne.n	8013132 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801312e:	2300      	movs	r3, #0
 8013130:	e037      	b.n	80131a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8013132:	697b      	ldr	r3, [r7, #20]
 8013134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013138:	461a      	mov	r2, r3
 801313a:	2300      	movs	r3, #0
 801313c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801313e:	697b      	ldr	r3, [r7, #20]
 8013140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013144:	691b      	ldr	r3, [r3, #16]
 8013146:	697a      	ldr	r2, [r7, #20]
 8013148:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801314c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013150:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8013152:	697b      	ldr	r3, [r7, #20]
 8013154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013158:	691b      	ldr	r3, [r3, #16]
 801315a:	697a      	ldr	r2, [r7, #20]
 801315c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013160:	f043 0318 	orr.w	r3, r3, #24
 8013164:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8013166:	697b      	ldr	r3, [r7, #20]
 8013168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801316c:	691b      	ldr	r3, [r3, #16]
 801316e:	697a      	ldr	r2, [r7, #20]
 8013170:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013174:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8013178:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801317a:	7afb      	ldrb	r3, [r7, #11]
 801317c:	2b01      	cmp	r3, #1
 801317e:	d10f      	bne.n	80131a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8013180:	697b      	ldr	r3, [r7, #20]
 8013182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013186:	461a      	mov	r2, r3
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801318c:	697b      	ldr	r3, [r7, #20]
 801318e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	697a      	ldr	r2, [r7, #20]
 8013196:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801319a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801319e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80131a0:	2300      	movs	r3, #0
}
 80131a2:	4618      	mov	r0, r3
 80131a4:	371c      	adds	r7, #28
 80131a6:	46bd      	mov	sp, r7
 80131a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ac:	4770      	bx	lr
 80131ae:	bf00      	nop
 80131b0:	4f54300a 	.word	0x4f54300a

080131b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80131b4:	b480      	push	{r7}
 80131b6:	b085      	sub	sp, #20
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80131bc:	2300      	movs	r3, #0
 80131be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	3301      	adds	r3, #1
 80131c4:	60fb      	str	r3, [r7, #12]
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	4a13      	ldr	r2, [pc, #76]	; (8013218 <USB_CoreReset+0x64>)
 80131ca:	4293      	cmp	r3, r2
 80131cc:	d901      	bls.n	80131d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80131ce:	2303      	movs	r3, #3
 80131d0:	e01b      	b.n	801320a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	691b      	ldr	r3, [r3, #16]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	daf2      	bge.n	80131c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80131da:	2300      	movs	r3, #0
 80131dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	691b      	ldr	r3, [r3, #16]
 80131e2:	f043 0201 	orr.w	r2, r3, #1
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	3301      	adds	r3, #1
 80131ee:	60fb      	str	r3, [r7, #12]
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	4a09      	ldr	r2, [pc, #36]	; (8013218 <USB_CoreReset+0x64>)
 80131f4:	4293      	cmp	r3, r2
 80131f6:	d901      	bls.n	80131fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80131f8:	2303      	movs	r3, #3
 80131fa:	e006      	b.n	801320a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	691b      	ldr	r3, [r3, #16]
 8013200:	f003 0301 	and.w	r3, r3, #1
 8013204:	2b01      	cmp	r3, #1
 8013206:	d0f0      	beq.n	80131ea <USB_CoreReset+0x36>

  return HAL_OK;
 8013208:	2300      	movs	r3, #0
}
 801320a:	4618      	mov	r0, r3
 801320c:	3714      	adds	r7, #20
 801320e:	46bd      	mov	sp, r7
 8013210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013214:	4770      	bx	lr
 8013216:	bf00      	nop
 8013218:	00030d40 	.word	0x00030d40

0801321c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801321c:	b580      	push	{r7, lr}
 801321e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8013220:	4904      	ldr	r1, [pc, #16]	; (8013234 <MX_FATFS_Init+0x18>)
 8013222:	4805      	ldr	r0, [pc, #20]	; (8013238 <MX_FATFS_Init+0x1c>)
 8013224:	f005 fbec 	bl	8018a00 <FATFS_LinkDriver>
 8013228:	4603      	mov	r3, r0
 801322a:	461a      	mov	r2, r3
 801322c:	4b03      	ldr	r3, [pc, #12]	; (801323c <MX_FATFS_Init+0x20>)
 801322e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8013230:	bf00      	nop
 8013232:	bd80      	pop	{r7, pc}
 8013234:	24001770 	.word	0x24001770
 8013238:	0801af90 	.word	0x0801af90
 801323c:	2400176c 	.word	0x2400176c

08013240 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8013240:	b480      	push	{r7}
 8013242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8013244:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8013246:	4618      	mov	r0, r3
 8013248:	46bd      	mov	sp, r7
 801324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801324e:	4770      	bx	lr

08013250 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8013250:	b580      	push	{r7, lr}
 8013252:	b082      	sub	sp, #8
 8013254:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8013256:	2300      	movs	r3, #0
 8013258:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801325a:	f000 f885 	bl	8013368 <BSP_SD_IsDetected>
 801325e:	4603      	mov	r3, r0
 8013260:	2b01      	cmp	r3, #1
 8013262:	d001      	beq.n	8013268 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8013264:	2302      	movs	r3, #2
 8013266:	e012      	b.n	801328e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8013268:	480b      	ldr	r0, [pc, #44]	; (8013298 <BSP_SD_Init+0x48>)
 801326a:	f7f9 fc1d 	bl	800caa8 <HAL_SD_Init>
 801326e:	4603      	mov	r3, r0
 8013270:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8013272:	79fb      	ldrb	r3, [r7, #7]
 8013274:	2b00      	cmp	r3, #0
 8013276:	d109      	bne.n	801328c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8013278:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801327c:	4806      	ldr	r0, [pc, #24]	; (8013298 <BSP_SD_Init+0x48>)
 801327e:	f7fa fdf1 	bl	800de64 <HAL_SD_ConfigWideBusOperation>
 8013282:	4603      	mov	r3, r0
 8013284:	2b00      	cmp	r3, #0
 8013286:	d001      	beq.n	801328c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8013288:	2301      	movs	r3, #1
 801328a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 801328c:	79fb      	ldrb	r3, [r7, #7]
}
 801328e:	4618      	mov	r0, r3
 8013290:	3708      	adds	r7, #8
 8013292:	46bd      	mov	sp, r7
 8013294:	bd80      	pop	{r7, pc}
 8013296:	bf00      	nop
 8013298:	24001470 	.word	0x24001470

0801329c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 801329c:	b580      	push	{r7, lr}
 801329e:	b086      	sub	sp, #24
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	60f8      	str	r0, [r7, #12]
 80132a4:	60b9      	str	r1, [r7, #8]
 80132a6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80132a8:	2300      	movs	r3, #0
 80132aa:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	68ba      	ldr	r2, [r7, #8]
 80132b0:	68f9      	ldr	r1, [r7, #12]
 80132b2:	4806      	ldr	r0, [pc, #24]	; (80132cc <BSP_SD_ReadBlocks_DMA+0x30>)
 80132b4:	f7fa f834 	bl	800d320 <HAL_SD_ReadBlocks_DMA>
 80132b8:	4603      	mov	r3, r0
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d001      	beq.n	80132c2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80132be:	2301      	movs	r3, #1
 80132c0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80132c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80132c4:	4618      	mov	r0, r3
 80132c6:	3718      	adds	r7, #24
 80132c8:	46bd      	mov	sp, r7
 80132ca:	bd80      	pop	{r7, pc}
 80132cc:	24001470 	.word	0x24001470

080132d0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80132d0:	b580      	push	{r7, lr}
 80132d2:	b086      	sub	sp, #24
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	60f8      	str	r0, [r7, #12]
 80132d8:	60b9      	str	r1, [r7, #8]
 80132da:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80132dc:	2300      	movs	r3, #0
 80132de:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	68ba      	ldr	r2, [r7, #8]
 80132e4:	68f9      	ldr	r1, [r7, #12]
 80132e6:	4806      	ldr	r0, [pc, #24]	; (8013300 <BSP_SD_WriteBlocks_DMA+0x30>)
 80132e8:	f7fa f8c2 	bl	800d470 <HAL_SD_WriteBlocks_DMA>
 80132ec:	4603      	mov	r3, r0
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d001      	beq.n	80132f6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80132f2:	2301      	movs	r3, #1
 80132f4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80132f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80132f8:	4618      	mov	r0, r3
 80132fa:	3718      	adds	r7, #24
 80132fc:	46bd      	mov	sp, r7
 80132fe:	bd80      	pop	{r7, pc}
 8013300:	24001470 	.word	0x24001470

08013304 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8013304:	b580      	push	{r7, lr}
 8013306:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8013308:	4805      	ldr	r0, [pc, #20]	; (8013320 <BSP_SD_GetCardState+0x1c>)
 801330a:	f7fa fe55 	bl	800dfb8 <HAL_SD_GetCardState>
 801330e:	4603      	mov	r3, r0
 8013310:	2b04      	cmp	r3, #4
 8013312:	bf14      	ite	ne
 8013314:	2301      	movne	r3, #1
 8013316:	2300      	moveq	r3, #0
 8013318:	b2db      	uxtb	r3, r3
}
 801331a:	4618      	mov	r0, r3
 801331c:	bd80      	pop	{r7, pc}
 801331e:	bf00      	nop
 8013320:	24001470 	.word	0x24001470

08013324 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8013324:	b580      	push	{r7, lr}
 8013326:	b082      	sub	sp, #8
 8013328:	af00      	add	r7, sp, #0
 801332a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 801332c:	6879      	ldr	r1, [r7, #4]
 801332e:	4803      	ldr	r0, [pc, #12]	; (801333c <BSP_SD_GetCardInfo+0x18>)
 8013330:	f7fa fd6c 	bl	800de0c <HAL_SD_GetCardInfo>
}
 8013334:	bf00      	nop
 8013336:	3708      	adds	r7, #8
 8013338:	46bd      	mov	sp, r7
 801333a:	bd80      	pop	{r7, pc}
 801333c:	24001470 	.word	0x24001470

08013340 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013340:	b580      	push	{r7, lr}
 8013342:	b082      	sub	sp, #8
 8013344:	af00      	add	r7, sp, #0
 8013346:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8013348:	f000 f9a0 	bl	801368c <BSP_SD_WriteCpltCallback>
}
 801334c:	bf00      	nop
 801334e:	3708      	adds	r7, #8
 8013350:	46bd      	mov	sp, r7
 8013352:	bd80      	pop	{r7, pc}

08013354 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013354:	b580      	push	{r7, lr}
 8013356:	b082      	sub	sp, #8
 8013358:	af00      	add	r7, sp, #0
 801335a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 801335c:	f000 f9a2 	bl	80136a4 <BSP_SD_ReadCpltCallback>
}
 8013360:	bf00      	nop
 8013362:	3708      	adds	r7, #8
 8013364:	46bd      	mov	sp, r7
 8013366:	bd80      	pop	{r7, pc}

08013368 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8013368:	b580      	push	{r7, lr}
 801336a:	b082      	sub	sp, #8
 801336c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801336e:	2301      	movs	r3, #1
 8013370:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8013372:	f000 f80b 	bl	801338c <BSP_PlatformIsDetected>
 8013376:	4603      	mov	r3, r0
 8013378:	2b00      	cmp	r3, #0
 801337a:	d101      	bne.n	8013380 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 801337c:	2300      	movs	r3, #0
 801337e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8013380:	79fb      	ldrb	r3, [r7, #7]
 8013382:	b2db      	uxtb	r3, r3
}
 8013384:	4618      	mov	r0, r3
 8013386:	3708      	adds	r7, #8
 8013388:	46bd      	mov	sp, r7
 801338a:	bd80      	pop	{r7, pc}

0801338c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 801338c:	b580      	push	{r7, lr}
 801338e:	b082      	sub	sp, #8
 8013390:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8013392:	2301      	movs	r3, #1
 8013394:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8013396:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801339a:	4806      	ldr	r0, [pc, #24]	; (80133b4 <BSP_PlatformIsDetected+0x28>)
 801339c:	f7f4 fe30 	bl	8008000 <HAL_GPIO_ReadPin>
 80133a0:	4603      	mov	r3, r0
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d001      	beq.n	80133aa <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80133a6:	2300      	movs	r3, #0
 80133a8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80133aa:	79fb      	ldrb	r3, [r7, #7]
}
 80133ac:	4618      	mov	r0, r3
 80133ae:	3708      	adds	r7, #8
 80133b0:	46bd      	mov	sp, r7
 80133b2:	bd80      	pop	{r7, pc}
 80133b4:	58020000 	.word	0x58020000

080133b8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80133b8:	b580      	push	{r7, lr}
 80133ba:	b084      	sub	sp, #16
 80133bc:	af00      	add	r7, sp, #0
 80133be:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80133c0:	f7f1 f910 	bl	80045e4 <HAL_GetTick>
 80133c4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80133c6:	e006      	b.n	80133d6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80133c8:	f7ff ff9c 	bl	8013304 <BSP_SD_GetCardState>
 80133cc:	4603      	mov	r3, r0
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d101      	bne.n	80133d6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80133d2:	2300      	movs	r3, #0
 80133d4:	e009      	b.n	80133ea <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80133d6:	f7f1 f905 	bl	80045e4 <HAL_GetTick>
 80133da:	4602      	mov	r2, r0
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	1ad3      	subs	r3, r2, r3
 80133e0:	687a      	ldr	r2, [r7, #4]
 80133e2:	429a      	cmp	r2, r3
 80133e4:	d8f0      	bhi.n	80133c8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80133e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80133ea:	4618      	mov	r0, r3
 80133ec:	3710      	adds	r7, #16
 80133ee:	46bd      	mov	sp, r7
 80133f0:	bd80      	pop	{r7, pc}
	...

080133f4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80133f4:	b580      	push	{r7, lr}
 80133f6:	b082      	sub	sp, #8
 80133f8:	af00      	add	r7, sp, #0
 80133fa:	4603      	mov	r3, r0
 80133fc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80133fe:	4b0b      	ldr	r3, [pc, #44]	; (801342c <SD_CheckStatus+0x38>)
 8013400:	2201      	movs	r2, #1
 8013402:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8013404:	f7ff ff7e 	bl	8013304 <BSP_SD_GetCardState>
 8013408:	4603      	mov	r3, r0
 801340a:	2b00      	cmp	r3, #0
 801340c:	d107      	bne.n	801341e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801340e:	4b07      	ldr	r3, [pc, #28]	; (801342c <SD_CheckStatus+0x38>)
 8013410:	781b      	ldrb	r3, [r3, #0]
 8013412:	b2db      	uxtb	r3, r3
 8013414:	f023 0301 	bic.w	r3, r3, #1
 8013418:	b2da      	uxtb	r2, r3
 801341a:	4b04      	ldr	r3, [pc, #16]	; (801342c <SD_CheckStatus+0x38>)
 801341c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801341e:	4b03      	ldr	r3, [pc, #12]	; (801342c <SD_CheckStatus+0x38>)
 8013420:	781b      	ldrb	r3, [r3, #0]
 8013422:	b2db      	uxtb	r3, r3
}
 8013424:	4618      	mov	r0, r3
 8013426:	3708      	adds	r7, #8
 8013428:	46bd      	mov	sp, r7
 801342a:	bd80      	pop	{r7, pc}
 801342c:	2400001d 	.word	0x2400001d

08013430 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8013430:	b580      	push	{r7, lr}
 8013432:	b082      	sub	sp, #8
 8013434:	af00      	add	r7, sp, #0
 8013436:	4603      	mov	r3, r0
 8013438:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801343a:	f7ff ff09 	bl	8013250 <BSP_SD_Init>
 801343e:	4603      	mov	r3, r0
 8013440:	2b00      	cmp	r3, #0
 8013442:	d107      	bne.n	8013454 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8013444:	79fb      	ldrb	r3, [r7, #7]
 8013446:	4618      	mov	r0, r3
 8013448:	f7ff ffd4 	bl	80133f4 <SD_CheckStatus>
 801344c:	4603      	mov	r3, r0
 801344e:	461a      	mov	r2, r3
 8013450:	4b04      	ldr	r3, [pc, #16]	; (8013464 <SD_initialize+0x34>)
 8013452:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8013454:	4b03      	ldr	r3, [pc, #12]	; (8013464 <SD_initialize+0x34>)
 8013456:	781b      	ldrb	r3, [r3, #0]
 8013458:	b2db      	uxtb	r3, r3
}
 801345a:	4618      	mov	r0, r3
 801345c:	3708      	adds	r7, #8
 801345e:	46bd      	mov	sp, r7
 8013460:	bd80      	pop	{r7, pc}
 8013462:	bf00      	nop
 8013464:	2400001d 	.word	0x2400001d

08013468 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8013468:	b580      	push	{r7, lr}
 801346a:	b082      	sub	sp, #8
 801346c:	af00      	add	r7, sp, #0
 801346e:	4603      	mov	r3, r0
 8013470:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8013472:	79fb      	ldrb	r3, [r7, #7]
 8013474:	4618      	mov	r0, r3
 8013476:	f7ff ffbd 	bl	80133f4 <SD_CheckStatus>
 801347a:	4603      	mov	r3, r0
}
 801347c:	4618      	mov	r0, r3
 801347e:	3708      	adds	r7, #8
 8013480:	46bd      	mov	sp, r7
 8013482:	bd80      	pop	{r7, pc}

08013484 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8013484:	b580      	push	{r7, lr}
 8013486:	b086      	sub	sp, #24
 8013488:	af00      	add	r7, sp, #0
 801348a:	60b9      	str	r1, [r7, #8]
 801348c:	607a      	str	r2, [r7, #4]
 801348e:	603b      	str	r3, [r7, #0]
 8013490:	4603      	mov	r3, r0
 8013492:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013494:	2301      	movs	r3, #1
 8013496:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8013498:	f247 5030 	movw	r0, #30000	; 0x7530
 801349c:	f7ff ff8c 	bl	80133b8 <SD_CheckStatusWithTimeout>
 80134a0:	4603      	mov	r3, r0
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	da01      	bge.n	80134aa <SD_read+0x26>
  {
    return res;
 80134a6:	7dfb      	ldrb	r3, [r7, #23]
 80134a8:	e03b      	b.n	8013522 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80134aa:	683a      	ldr	r2, [r7, #0]
 80134ac:	6879      	ldr	r1, [r7, #4]
 80134ae:	68b8      	ldr	r0, [r7, #8]
 80134b0:	f7ff fef4 	bl	801329c <BSP_SD_ReadBlocks_DMA>
 80134b4:	4603      	mov	r3, r0
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d132      	bne.n	8013520 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80134ba:	4b1c      	ldr	r3, [pc, #112]	; (801352c <SD_read+0xa8>)
 80134bc:	2200      	movs	r2, #0
 80134be:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80134c0:	f7f1 f890 	bl	80045e4 <HAL_GetTick>
 80134c4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80134c6:	bf00      	nop
 80134c8:	4b18      	ldr	r3, [pc, #96]	; (801352c <SD_read+0xa8>)
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d108      	bne.n	80134e2 <SD_read+0x5e>
 80134d0:	f7f1 f888 	bl	80045e4 <HAL_GetTick>
 80134d4:	4602      	mov	r2, r0
 80134d6:	693b      	ldr	r3, [r7, #16]
 80134d8:	1ad3      	subs	r3, r2, r3
 80134da:	f247 522f 	movw	r2, #29999	; 0x752f
 80134de:	4293      	cmp	r3, r2
 80134e0:	d9f2      	bls.n	80134c8 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 80134e2:	4b12      	ldr	r3, [pc, #72]	; (801352c <SD_read+0xa8>)
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d102      	bne.n	80134f0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80134ea:	2301      	movs	r3, #1
 80134ec:	75fb      	strb	r3, [r7, #23]
 80134ee:	e017      	b.n	8013520 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80134f0:	4b0e      	ldr	r3, [pc, #56]	; (801352c <SD_read+0xa8>)
 80134f2:	2200      	movs	r2, #0
 80134f4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80134f6:	f7f1 f875 	bl	80045e4 <HAL_GetTick>
 80134fa:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80134fc:	e007      	b.n	801350e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80134fe:	f7ff ff01 	bl	8013304 <BSP_SD_GetCardState>
 8013502:	4603      	mov	r3, r0
 8013504:	2b00      	cmp	r3, #0
 8013506:	d102      	bne.n	801350e <SD_read+0x8a>
          {
            res = RES_OK;
 8013508:	2300      	movs	r3, #0
 801350a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 801350c:	e008      	b.n	8013520 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801350e:	f7f1 f869 	bl	80045e4 <HAL_GetTick>
 8013512:	4602      	mov	r2, r0
 8013514:	693b      	ldr	r3, [r7, #16]
 8013516:	1ad3      	subs	r3, r2, r3
 8013518:	f247 522f 	movw	r2, #29999	; 0x752f
 801351c:	4293      	cmp	r3, r2
 801351e:	d9ee      	bls.n	80134fe <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8013520:	7dfb      	ldrb	r3, [r7, #23]
}
 8013522:	4618      	mov	r0, r3
 8013524:	3718      	adds	r7, #24
 8013526:	46bd      	mov	sp, r7
 8013528:	bd80      	pop	{r7, pc}
 801352a:	bf00      	nop
 801352c:	24000b54 	.word	0x24000b54

08013530 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8013530:	b580      	push	{r7, lr}
 8013532:	b086      	sub	sp, #24
 8013534:	af00      	add	r7, sp, #0
 8013536:	60b9      	str	r1, [r7, #8]
 8013538:	607a      	str	r2, [r7, #4]
 801353a:	603b      	str	r3, [r7, #0]
 801353c:	4603      	mov	r3, r0
 801353e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013540:	2301      	movs	r3, #1
 8013542:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8013544:	4b24      	ldr	r3, [pc, #144]	; (80135d8 <SD_write+0xa8>)
 8013546:	2200      	movs	r2, #0
 8013548:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801354a:	f247 5030 	movw	r0, #30000	; 0x7530
 801354e:	f7ff ff33 	bl	80133b8 <SD_CheckStatusWithTimeout>
 8013552:	4603      	mov	r3, r0
 8013554:	2b00      	cmp	r3, #0
 8013556:	da01      	bge.n	801355c <SD_write+0x2c>
  {
    return res;
 8013558:	7dfb      	ldrb	r3, [r7, #23]
 801355a:	e038      	b.n	80135ce <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801355c:	683a      	ldr	r2, [r7, #0]
 801355e:	6879      	ldr	r1, [r7, #4]
 8013560:	68b8      	ldr	r0, [r7, #8]
 8013562:	f7ff feb5 	bl	80132d0 <BSP_SD_WriteBlocks_DMA>
 8013566:	4603      	mov	r3, r0
 8013568:	2b00      	cmp	r3, #0
 801356a:	d12f      	bne.n	80135cc <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 801356c:	f7f1 f83a 	bl	80045e4 <HAL_GetTick>
 8013570:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8013572:	bf00      	nop
 8013574:	4b18      	ldr	r3, [pc, #96]	; (80135d8 <SD_write+0xa8>)
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	2b00      	cmp	r3, #0
 801357a:	d108      	bne.n	801358e <SD_write+0x5e>
 801357c:	f7f1 f832 	bl	80045e4 <HAL_GetTick>
 8013580:	4602      	mov	r2, r0
 8013582:	693b      	ldr	r3, [r7, #16]
 8013584:	1ad3      	subs	r3, r2, r3
 8013586:	f247 522f 	movw	r2, #29999	; 0x752f
 801358a:	4293      	cmp	r3, r2
 801358c:	d9f2      	bls.n	8013574 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 801358e:	4b12      	ldr	r3, [pc, #72]	; (80135d8 <SD_write+0xa8>)
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	2b00      	cmp	r3, #0
 8013594:	d102      	bne.n	801359c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8013596:	2301      	movs	r3, #1
 8013598:	75fb      	strb	r3, [r7, #23]
 801359a:	e017      	b.n	80135cc <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 801359c:	4b0e      	ldr	r3, [pc, #56]	; (80135d8 <SD_write+0xa8>)
 801359e:	2200      	movs	r2, #0
 80135a0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80135a2:	f7f1 f81f 	bl	80045e4 <HAL_GetTick>
 80135a6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80135a8:	e007      	b.n	80135ba <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80135aa:	f7ff feab 	bl	8013304 <BSP_SD_GetCardState>
 80135ae:	4603      	mov	r3, r0
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d102      	bne.n	80135ba <SD_write+0x8a>
          {
            res = RES_OK;
 80135b4:	2300      	movs	r3, #0
 80135b6:	75fb      	strb	r3, [r7, #23]
            break;
 80135b8:	e008      	b.n	80135cc <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80135ba:	f7f1 f813 	bl	80045e4 <HAL_GetTick>
 80135be:	4602      	mov	r2, r0
 80135c0:	693b      	ldr	r3, [r7, #16]
 80135c2:	1ad3      	subs	r3, r2, r3
 80135c4:	f247 522f 	movw	r2, #29999	; 0x752f
 80135c8:	4293      	cmp	r3, r2
 80135ca:	d9ee      	bls.n	80135aa <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80135cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80135ce:	4618      	mov	r0, r3
 80135d0:	3718      	adds	r7, #24
 80135d2:	46bd      	mov	sp, r7
 80135d4:	bd80      	pop	{r7, pc}
 80135d6:	bf00      	nop
 80135d8:	24000b50 	.word	0x24000b50

080135dc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80135dc:	b580      	push	{r7, lr}
 80135de:	b08c      	sub	sp, #48	; 0x30
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	4603      	mov	r3, r0
 80135e4:	603a      	str	r2, [r7, #0]
 80135e6:	71fb      	strb	r3, [r7, #7]
 80135e8:	460b      	mov	r3, r1
 80135ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80135ec:	2301      	movs	r3, #1
 80135ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80135f2:	4b25      	ldr	r3, [pc, #148]	; (8013688 <SD_ioctl+0xac>)
 80135f4:	781b      	ldrb	r3, [r3, #0]
 80135f6:	b2db      	uxtb	r3, r3
 80135f8:	f003 0301 	and.w	r3, r3, #1
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d001      	beq.n	8013604 <SD_ioctl+0x28>
 8013600:	2303      	movs	r3, #3
 8013602:	e03c      	b.n	801367e <SD_ioctl+0xa2>

  switch (cmd)
 8013604:	79bb      	ldrb	r3, [r7, #6]
 8013606:	2b03      	cmp	r3, #3
 8013608:	d834      	bhi.n	8013674 <SD_ioctl+0x98>
 801360a:	a201      	add	r2, pc, #4	; (adr r2, 8013610 <SD_ioctl+0x34>)
 801360c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013610:	08013621 	.word	0x08013621
 8013614:	08013629 	.word	0x08013629
 8013618:	08013641 	.word	0x08013641
 801361c:	0801365b 	.word	0x0801365b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8013620:	2300      	movs	r3, #0
 8013622:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013626:	e028      	b.n	801367a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8013628:	f107 0308 	add.w	r3, r7, #8
 801362c:	4618      	mov	r0, r3
 801362e:	f7ff fe79 	bl	8013324 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8013632:	6a3a      	ldr	r2, [r7, #32]
 8013634:	683b      	ldr	r3, [r7, #0]
 8013636:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013638:	2300      	movs	r3, #0
 801363a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801363e:	e01c      	b.n	801367a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013640:	f107 0308 	add.w	r3, r7, #8
 8013644:	4618      	mov	r0, r3
 8013646:	f7ff fe6d 	bl	8013324 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801364c:	b29a      	uxth	r2, r3
 801364e:	683b      	ldr	r3, [r7, #0]
 8013650:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8013652:	2300      	movs	r3, #0
 8013654:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013658:	e00f      	b.n	801367a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801365a:	f107 0308 	add.w	r3, r7, #8
 801365e:	4618      	mov	r0, r3
 8013660:	f7ff fe60 	bl	8013324 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8013664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013666:	0a5a      	lsrs	r2, r3, #9
 8013668:	683b      	ldr	r3, [r7, #0]
 801366a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801366c:	2300      	movs	r3, #0
 801366e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013672:	e002      	b.n	801367a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8013674:	2304      	movs	r3, #4
 8013676:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801367a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801367e:	4618      	mov	r0, r3
 8013680:	3730      	adds	r7, #48	; 0x30
 8013682:	46bd      	mov	sp, r7
 8013684:	bd80      	pop	{r7, pc}
 8013686:	bf00      	nop
 8013688:	2400001d 	.word	0x2400001d

0801368c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 801368c:	b480      	push	{r7}
 801368e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8013690:	4b03      	ldr	r3, [pc, #12]	; (80136a0 <BSP_SD_WriteCpltCallback+0x14>)
 8013692:	2201      	movs	r2, #1
 8013694:	601a      	str	r2, [r3, #0]
}
 8013696:	bf00      	nop
 8013698:	46bd      	mov	sp, r7
 801369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801369e:	4770      	bx	lr
 80136a0:	24000b50 	.word	0x24000b50

080136a4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80136a4:	b480      	push	{r7}
 80136a6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80136a8:	4b03      	ldr	r3, [pc, #12]	; (80136b8 <BSP_SD_ReadCpltCallback+0x14>)
 80136aa:	2201      	movs	r2, #1
 80136ac:	601a      	str	r2, [r3, #0]
}
 80136ae:	bf00      	nop
 80136b0:	46bd      	mov	sp, r7
 80136b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b6:	4770      	bx	lr
 80136b8:	24000b54 	.word	0x24000b54

080136bc <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80136bc:	b580      	push	{r7, lr}
 80136be:	b084      	sub	sp, #16
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	6078      	str	r0, [r7, #4]
 80136c4:	460b      	mov	r3, r1
 80136c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 80136c8:	f248 0074 	movw	r0, #32884	; 0x8074
 80136cc:	f005 fed0 	bl	8019470 <malloc>
 80136d0:	4603      	mov	r3, r0
 80136d2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d105      	bne.n	80136e6 <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	2200      	movs	r2, #0
 80136de:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80136e2:	2302      	movs	r3, #2
 80136e4:	e034      	b.n	8013750 <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	68fa      	ldr	r2, [r7, #12]
 80136ea:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	7c1b      	ldrb	r3, [r3, #16]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d115      	bne.n	8013722 <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80136f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80136fa:	2202      	movs	r2, #2
 80136fc:	2101      	movs	r1, #1
 80136fe:	6878      	ldr	r0, [r7, #4]
 8013700:	f005 fd1d 	bl	801913e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	2201      	movs	r2, #1
 8013708:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801370c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013710:	2202      	movs	r2, #2
 8013712:	2181      	movs	r1, #129	; 0x81
 8013714:	6878      	ldr	r0, [r7, #4]
 8013716:	f005 fd12 	bl	801913e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	2201      	movs	r2, #1
 801371e:	871a      	strh	r2, [r3, #56]	; 0x38
 8013720:	e012      	b.n	8013748 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8013722:	2340      	movs	r3, #64	; 0x40
 8013724:	2202      	movs	r2, #2
 8013726:	2101      	movs	r1, #1
 8013728:	6878      	ldr	r0, [r7, #4]
 801372a:	f005 fd08 	bl	801913e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	2201      	movs	r2, #1
 8013732:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8013736:	2340      	movs	r3, #64	; 0x40
 8013738:	2202      	movs	r2, #2
 801373a:	2181      	movs	r1, #129	; 0x81
 801373c:	6878      	ldr	r0, [r7, #4]
 801373e:	f005 fcfe 	bl	801913e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	2201      	movs	r2, #1
 8013746:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8013748:	6878      	ldr	r0, [r7, #4]
 801374a:	f000 f98e 	bl	8013a6a <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 801374e:	2300      	movs	r3, #0
}
 8013750:	4618      	mov	r0, r3
 8013752:	3710      	adds	r7, #16
 8013754:	46bd      	mov	sp, r7
 8013756:	bd80      	pop	{r7, pc}

08013758 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013758:	b580      	push	{r7, lr}
 801375a:	b082      	sub	sp, #8
 801375c:	af00      	add	r7, sp, #0
 801375e:	6078      	str	r0, [r7, #4]
 8013760:	460b      	mov	r3, r1
 8013762:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8013764:	2101      	movs	r1, #1
 8013766:	6878      	ldr	r0, [r7, #4]
 8013768:	f005 fd0f 	bl	801918a <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	2200      	movs	r2, #0
 8013770:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8013774:	2181      	movs	r1, #129	; 0x81
 8013776:	6878      	ldr	r0, [r7, #4]
 8013778:	f005 fd07 	bl	801918a <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	2200      	movs	r2, #0
 8013780:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8013782:	6878      	ldr	r0, [r7, #4]
 8013784:	f000 f9cf 	bl	8013b26 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801378e:	2b00      	cmp	r3, #0
 8013790:	d009      	beq.n	80137a6 <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013798:	4618      	mov	r0, r3
 801379a:	f005 fe71 	bl	8019480 <free>
    pdev->pClassData = NULL;
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	2200      	movs	r2, #0
 80137a2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80137a6:	2300      	movs	r3, #0
}
 80137a8:	4618      	mov	r0, r3
 80137aa:	3708      	adds	r7, #8
 80137ac:	46bd      	mov	sp, r7
 80137ae:	bd80      	pop	{r7, pc}

080137b0 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80137b0:	b580      	push	{r7, lr}
 80137b2:	b086      	sub	sp, #24
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	6078      	str	r0, [r7, #4]
 80137b8:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80137c0:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80137c2:	2300      	movs	r3, #0
 80137c4:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80137c6:	2300      	movs	r3, #0
 80137c8:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80137ca:	683b      	ldr	r3, [r7, #0]
 80137cc:	781b      	ldrb	r3, [r3, #0]
 80137ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d04d      	beq.n	8013872 <USBD_MSC_Setup+0xc2>
 80137d6:	2b20      	cmp	r3, #32
 80137d8:	f040 80c6 	bne.w	8013968 <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 80137dc:	683b      	ldr	r3, [r7, #0]
 80137de:	785b      	ldrb	r3, [r3, #1]
 80137e0:	2bfe      	cmp	r3, #254	; 0xfe
 80137e2:	d002      	beq.n	80137ea <USBD_MSC_Setup+0x3a>
 80137e4:	2bff      	cmp	r3, #255	; 0xff
 80137e6:	d024      	beq.n	8013832 <USBD_MSC_Setup+0x82>
 80137e8:	e03b      	b.n	8013862 <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80137ea:	683b      	ldr	r3, [r7, #0]
 80137ec:	885b      	ldrh	r3, [r3, #2]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d118      	bne.n	8013824 <USBD_MSC_Setup+0x74>
 80137f2:	683b      	ldr	r3, [r7, #0]
 80137f4:	88db      	ldrh	r3, [r3, #6]
 80137f6:	2b01      	cmp	r3, #1
 80137f8:	d114      	bne.n	8013824 <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 80137fa:	683b      	ldr	r3, [r7, #0]
 80137fc:	781b      	ldrb	r3, [r3, #0]
 80137fe:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8013800:	2b00      	cmp	r3, #0
 8013802:	da0f      	bge.n	8013824 <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801380a:	699b      	ldr	r3, [r3, #24]
 801380c:	4798      	blx	r3
 801380e:	4603      	mov	r3, r0
 8013810:	461a      	mov	r2, r3
 8013812:	693b      	ldr	r3, [r7, #16]
 8013814:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8013816:	693b      	ldr	r3, [r7, #16]
 8013818:	2201      	movs	r2, #1
 801381a:	4619      	mov	r1, r3
 801381c:	6878      	ldr	r0, [r7, #4]
 801381e:	f002 fdaa 	bl	8016376 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8013822:	e025      	b.n	8013870 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 8013824:	6839      	ldr	r1, [r7, #0]
 8013826:	6878      	ldr	r0, [r7, #4]
 8013828:	f002 fd34 	bl	8016294 <USBD_CtlError>
        ret = USBD_FAIL;
 801382c:	2303      	movs	r3, #3
 801382e:	75fb      	strb	r3, [r7, #23]
      break;
 8013830:	e01e      	b.n	8013870 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8013832:	683b      	ldr	r3, [r7, #0]
 8013834:	885b      	ldrh	r3, [r3, #2]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d10c      	bne.n	8013854 <USBD_MSC_Setup+0xa4>
 801383a:	683b      	ldr	r3, [r7, #0]
 801383c:	88db      	ldrh	r3, [r3, #6]
 801383e:	2b00      	cmp	r3, #0
 8013840:	d108      	bne.n	8013854 <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 8013842:	683b      	ldr	r3, [r7, #0]
 8013844:	781b      	ldrb	r3, [r3, #0]
 8013846:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8013848:	2b00      	cmp	r3, #0
 801384a:	db03      	blt.n	8013854 <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 801384c:	6878      	ldr	r0, [r7, #4]
 801384e:	f000 f947 	bl	8013ae0 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8013852:	e00d      	b.n	8013870 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 8013854:	6839      	ldr	r1, [r7, #0]
 8013856:	6878      	ldr	r0, [r7, #4]
 8013858:	f002 fd1c 	bl	8016294 <USBD_CtlError>
        ret = USBD_FAIL;
 801385c:	2303      	movs	r3, #3
 801385e:	75fb      	strb	r3, [r7, #23]
      break;
 8013860:	e006      	b.n	8013870 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 8013862:	6839      	ldr	r1, [r7, #0]
 8013864:	6878      	ldr	r0, [r7, #4]
 8013866:	f002 fd15 	bl	8016294 <USBD_CtlError>
      ret = USBD_FAIL;
 801386a:	2303      	movs	r3, #3
 801386c:	75fb      	strb	r3, [r7, #23]
      break;
 801386e:	bf00      	nop
    }
    break;
 8013870:	e081      	b.n	8013976 <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8013872:	683b      	ldr	r3, [r7, #0]
 8013874:	785b      	ldrb	r3, [r3, #1]
 8013876:	2b0b      	cmp	r3, #11
 8013878:	d86d      	bhi.n	8013956 <USBD_MSC_Setup+0x1a6>
 801387a:	a201      	add	r2, pc, #4	; (adr r2, 8013880 <USBD_MSC_Setup+0xd0>)
 801387c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013880:	080138b1 	.word	0x080138b1
 8013884:	08013927 	.word	0x08013927
 8013888:	08013957 	.word	0x08013957
 801388c:	08013957 	.word	0x08013957
 8013890:	08013957 	.word	0x08013957
 8013894:	08013957 	.word	0x08013957
 8013898:	08013957 	.word	0x08013957
 801389c:	08013957 	.word	0x08013957
 80138a0:	08013957 	.word	0x08013957
 80138a4:	08013957 	.word	0x08013957
 80138a8:	080138d9 	.word	0x080138d9
 80138ac:	08013901 	.word	0x08013901
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80138b6:	2b03      	cmp	r3, #3
 80138b8:	d107      	bne.n	80138ca <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80138ba:	f107 030e 	add.w	r3, r7, #14
 80138be:	2202      	movs	r2, #2
 80138c0:	4619      	mov	r1, r3
 80138c2:	6878      	ldr	r0, [r7, #4]
 80138c4:	f002 fd57 	bl	8016376 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80138c8:	e04d      	b.n	8013966 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 80138ca:	6839      	ldr	r1, [r7, #0]
 80138cc:	6878      	ldr	r0, [r7, #4]
 80138ce:	f002 fce1 	bl	8016294 <USBD_CtlError>
        ret = USBD_FAIL;
 80138d2:	2303      	movs	r3, #3
 80138d4:	75fb      	strb	r3, [r7, #23]
      break;
 80138d6:	e046      	b.n	8013966 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80138de:	2b03      	cmp	r3, #3
 80138e0:	d107      	bne.n	80138f2 <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80138e2:	693b      	ldr	r3, [r7, #16]
 80138e4:	3304      	adds	r3, #4
 80138e6:	2201      	movs	r2, #1
 80138e8:	4619      	mov	r1, r3
 80138ea:	6878      	ldr	r0, [r7, #4]
 80138ec:	f002 fd43 	bl	8016376 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80138f0:	e039      	b.n	8013966 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 80138f2:	6839      	ldr	r1, [r7, #0]
 80138f4:	6878      	ldr	r0, [r7, #4]
 80138f6:	f002 fccd 	bl	8016294 <USBD_CtlError>
        ret = USBD_FAIL;
 80138fa:	2303      	movs	r3, #3
 80138fc:	75fb      	strb	r3, [r7, #23]
      break;
 80138fe:	e032      	b.n	8013966 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013906:	2b03      	cmp	r3, #3
 8013908:	d106      	bne.n	8013918 <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 801390a:	683b      	ldr	r3, [r7, #0]
 801390c:	885b      	ldrh	r3, [r3, #2]
 801390e:	b2db      	uxtb	r3, r3
 8013910:	461a      	mov	r2, r3
 8013912:	693b      	ldr	r3, [r7, #16]
 8013914:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8013916:	e026      	b.n	8013966 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8013918:	6839      	ldr	r1, [r7, #0]
 801391a:	6878      	ldr	r0, [r7, #4]
 801391c:	f002 fcba 	bl	8016294 <USBD_CtlError>
        ret = USBD_FAIL;
 8013920:	2303      	movs	r3, #3
 8013922:	75fb      	strb	r3, [r7, #23]
      break;
 8013924:	e01f      	b.n	8013966 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801392c:	2b03      	cmp	r3, #3
 801392e:	d119      	bne.n	8013964 <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 8013930:	683b      	ldr	r3, [r7, #0]
 8013932:	885b      	ldrh	r3, [r3, #2]
 8013934:	2b00      	cmp	r3, #0
 8013936:	d115      	bne.n	8013964 <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8013938:	683b      	ldr	r3, [r7, #0]
 801393a:	889b      	ldrh	r3, [r3, #4]
 801393c:	b2db      	uxtb	r3, r3
 801393e:	4619      	mov	r1, r3
 8013940:	6878      	ldr	r0, [r7, #4]
 8013942:	f005 fc41 	bl	80191c8 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8013946:	683b      	ldr	r3, [r7, #0]
 8013948:	889b      	ldrh	r3, [r3, #4]
 801394a:	b2db      	uxtb	r3, r3
 801394c:	4619      	mov	r1, r3
 801394e:	6878      	ldr	r0, [r7, #4]
 8013950:	f000 fa90 	bl	8013e74 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 8013954:	e006      	b.n	8013964 <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 8013956:	6839      	ldr	r1, [r7, #0]
 8013958:	6878      	ldr	r0, [r7, #4]
 801395a:	f002 fc9b 	bl	8016294 <USBD_CtlError>
      ret = USBD_FAIL;
 801395e:	2303      	movs	r3, #3
 8013960:	75fb      	strb	r3, [r7, #23]
      break;
 8013962:	e000      	b.n	8013966 <USBD_MSC_Setup+0x1b6>
      break;
 8013964:	bf00      	nop
    }
    break;
 8013966:	e006      	b.n	8013976 <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 8013968:	6839      	ldr	r1, [r7, #0]
 801396a:	6878      	ldr	r0, [r7, #4]
 801396c:	f002 fc92 	bl	8016294 <USBD_CtlError>
    ret = USBD_FAIL;
 8013970:	2303      	movs	r3, #3
 8013972:	75fb      	strb	r3, [r7, #23]
    break;
 8013974:	bf00      	nop
  }

  return (uint8_t)ret;
 8013976:	7dfb      	ldrb	r3, [r7, #23]
}
 8013978:	4618      	mov	r0, r3
 801397a:	3718      	adds	r7, #24
 801397c:	46bd      	mov	sp, r7
 801397e:	bd80      	pop	{r7, pc}

08013980 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013980:	b580      	push	{r7, lr}
 8013982:	b082      	sub	sp, #8
 8013984:	af00      	add	r7, sp, #0
 8013986:	6078      	str	r0, [r7, #4]
 8013988:	460b      	mov	r3, r1
 801398a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 801398c:	78fb      	ldrb	r3, [r7, #3]
 801398e:	4619      	mov	r1, r3
 8013990:	6878      	ldr	r0, [r7, #4]
 8013992:	f000 f8d9 	bl	8013b48 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8013996:	2300      	movs	r3, #0
}
 8013998:	4618      	mov	r0, r3
 801399a:	3708      	adds	r7, #8
 801399c:	46bd      	mov	sp, r7
 801399e:	bd80      	pop	{r7, pc}

080139a0 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80139a0:	b580      	push	{r7, lr}
 80139a2:	b082      	sub	sp, #8
 80139a4:	af00      	add	r7, sp, #0
 80139a6:	6078      	str	r0, [r7, #4]
 80139a8:	460b      	mov	r3, r1
 80139aa:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80139ac:	78fb      	ldrb	r3, [r7, #3]
 80139ae:	4619      	mov	r1, r3
 80139b0:	6878      	ldr	r0, [r7, #4]
 80139b2:	f000 f8fd 	bl	8013bb0 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80139b6:	2300      	movs	r3, #0
}
 80139b8:	4618      	mov	r0, r3
 80139ba:	3708      	adds	r7, #8
 80139bc:	46bd      	mov	sp, r7
 80139be:	bd80      	pop	{r7, pc}

080139c0 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80139c0:	b480      	push	{r7}
 80139c2:	b083      	sub	sp, #12
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	2220      	movs	r2, #32
 80139cc:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 80139ce:	4b03      	ldr	r3, [pc, #12]	; (80139dc <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 80139d0:	4618      	mov	r0, r3
 80139d2:	370c      	adds	r7, #12
 80139d4:	46bd      	mov	sp, r7
 80139d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139da:	4770      	bx	lr
 80139dc:	24000058 	.word	0x24000058

080139e0 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80139e0:	b480      	push	{r7}
 80139e2:	b083      	sub	sp, #12
 80139e4:	af00      	add	r7, sp, #0
 80139e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	2220      	movs	r2, #32
 80139ec:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 80139ee:	4b03      	ldr	r3, [pc, #12]	; (80139fc <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 80139f0:	4618      	mov	r0, r3
 80139f2:	370c      	adds	r7, #12
 80139f4:	46bd      	mov	sp, r7
 80139f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139fa:	4770      	bx	lr
 80139fc:	24000078 	.word	0x24000078

08013a00 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013a00:	b480      	push	{r7}
 8013a02:	b083      	sub	sp, #12
 8013a04:	af00      	add	r7, sp, #0
 8013a06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	2220      	movs	r2, #32
 8013a0c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8013a0e:	4b03      	ldr	r3, [pc, #12]	; (8013a1c <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8013a10:	4618      	mov	r0, r3
 8013a12:	370c      	adds	r7, #12
 8013a14:	46bd      	mov	sp, r7
 8013a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a1a:	4770      	bx	lr
 8013a1c:	24000098 	.word	0x24000098

08013a20 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013a20:	b480      	push	{r7}
 8013a22:	b083      	sub	sp, #12
 8013a24:	af00      	add	r7, sp, #0
 8013a26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	220a      	movs	r2, #10
 8013a2c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8013a2e:	4b03      	ldr	r3, [pc, #12]	; (8013a3c <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013a30:	4618      	mov	r0, r3
 8013a32:	370c      	adds	r7, #12
 8013a34:	46bd      	mov	sp, r7
 8013a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a3a:	4770      	bx	lr
 8013a3c:	240000b8 	.word	0x240000b8

08013a40 <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8013a40:	b480      	push	{r7}
 8013a42:	b083      	sub	sp, #12
 8013a44:	af00      	add	r7, sp, #0
 8013a46:	6078      	str	r0, [r7, #4]
 8013a48:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8013a4a:	683b      	ldr	r3, [r7, #0]
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d101      	bne.n	8013a54 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013a50:	2303      	movs	r3, #3
 8013a52:	e004      	b.n	8013a5e <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	683a      	ldr	r2, [r7, #0]
 8013a58:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8013a5c:	2300      	movs	r3, #0
}
 8013a5e:	4618      	mov	r0, r3
 8013a60:	370c      	adds	r7, #12
 8013a62:	46bd      	mov	sp, r7
 8013a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a68:	4770      	bx	lr

08013a6a <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8013a6a:	b580      	push	{r7, lr}
 8013a6c:	b084      	sub	sp, #16
 8013a6e:	af00      	add	r7, sp, #0
 8013a70:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013a78:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	2200      	movs	r2, #0
 8013a7e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	2200      	movs	r2, #0
 8013a84:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8013a86:	68fa      	ldr	r2, [r7, #12]
 8013a88:	f248 0361 	movw	r3, #32865	; 0x8061
 8013a8c:	4413      	add	r3, r2
 8013a8e:	2200      	movs	r2, #0
 8013a90:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_sense_head = 0U;
 8013a92:	68fa      	ldr	r2, [r7, #12]
 8013a94:	f248 0360 	movw	r3, #32864	; 0x8060
 8013a98:	4413      	add	r3, r2
 8013a9a:	2200      	movs	r2, #0
 8013a9c:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8013a9e:	68fa      	ldr	r2, [r7, #12]
 8013aa0:	f248 0362 	movw	r3, #32866	; 0x8062
 8013aa4:	4413      	add	r3, r2
 8013aa6:	2200      	movs	r2, #0
 8013aa8:	701a      	strb	r2, [r3, #0]

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	2000      	movs	r0, #0
 8013ab4:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8013ab6:	2101      	movs	r1, #1
 8013ab8:	6878      	ldr	r0, [r7, #4]
 8013aba:	f005 fb85 	bl	80191c8 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8013abe:	2181      	movs	r1, #129	; 0x81
 8013ac0:	6878      	ldr	r0, [r7, #4]
 8013ac2:	f005 fb81 	bl	80191c8 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	f248 0210 	movw	r2, #32784	; 0x8010
 8013acc:	441a      	add	r2, r3
 8013ace:	231f      	movs	r3, #31
 8013ad0:	2101      	movs	r1, #1
 8013ad2:	6878      	ldr	r0, [r7, #4]
 8013ad4:	f005 fc41 	bl	801935a <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8013ad8:	bf00      	nop
 8013ada:	3710      	adds	r7, #16
 8013adc:	46bd      	mov	sp, r7
 8013ade:	bd80      	pop	{r7, pc}

08013ae0 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8013ae0:	b580      	push	{r7, lr}
 8013ae2:	b084      	sub	sp, #16
 8013ae4:	af00      	add	r7, sp, #0
 8013ae6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013aee:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	2200      	movs	r2, #0
 8013af4:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	2201      	movs	r2, #1
 8013afa:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8013afc:	2181      	movs	r1, #129	; 0x81
 8013afe:	6878      	ldr	r0, [r7, #4]
 8013b00:	f005 fba0 	bl	8019244 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 8013b04:	2101      	movs	r1, #1
 8013b06:	6878      	ldr	r0, [r7, #4]
 8013b08:	f005 fb9c 	bl	8019244 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	f248 0210 	movw	r2, #32784	; 0x8010
 8013b12:	441a      	add	r2, r3
 8013b14:	231f      	movs	r3, #31
 8013b16:	2101      	movs	r1, #1
 8013b18:	6878      	ldr	r0, [r7, #4]
 8013b1a:	f005 fc1e 	bl	801935a <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8013b1e:	bf00      	nop
 8013b20:	3710      	adds	r7, #16
 8013b22:	46bd      	mov	sp, r7
 8013b24:	bd80      	pop	{r7, pc}

08013b26 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8013b26:	b480      	push	{r7}
 8013b28:	b085      	sub	sp, #20
 8013b2a:	af00      	add	r7, sp, #0
 8013b2c:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013b34:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	2200      	movs	r2, #0
 8013b3a:	721a      	strb	r2, [r3, #8]
}
 8013b3c:	bf00      	nop
 8013b3e:	3714      	adds	r7, #20
 8013b40:	46bd      	mov	sp, r7
 8013b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b46:	4770      	bx	lr

08013b48 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013b48:	b580      	push	{r7, lr}
 8013b4a:	b084      	sub	sp, #16
 8013b4c:	af00      	add	r7, sp, #0
 8013b4e:	6078      	str	r0, [r7, #4]
 8013b50:	460b      	mov	r3, r1
 8013b52:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013b5a:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	7a1b      	ldrb	r3, [r3, #8]
 8013b60:	2b02      	cmp	r3, #2
 8013b62:	d004      	beq.n	8013b6e <MSC_BOT_DataIn+0x26>
 8013b64:	2b02      	cmp	r3, #2
 8013b66:	db1c      	blt.n	8013ba2 <MSC_BOT_DataIn+0x5a>
 8013b68:	2b04      	cmp	r3, #4
 8013b6a:	dc1a      	bgt.n	8013ba2 <MSC_BOT_DataIn+0x5a>
 8013b6c:	e014      	b.n	8013b98 <MSC_BOT_DataIn+0x50>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013b6e:	68fa      	ldr	r2, [r7, #12]
 8013b70:	f248 031d 	movw	r3, #32797	; 0x801d
 8013b74:	4413      	add	r3, r2
 8013b76:	7819      	ldrb	r1, [r3, #0]
 8013b78:	68fa      	ldr	r2, [r7, #12]
 8013b7a:	f248 031f 	movw	r3, #32799	; 0x801f
 8013b7e:	4413      	add	r3, r2
 8013b80:	461a      	mov	r2, r3
 8013b82:	6878      	ldr	r0, [r7, #4]
 8013b84:	f000 f99e 	bl	8013ec4 <SCSI_ProcessCmd>
 8013b88:	4603      	mov	r3, r0
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	da0b      	bge.n	8013ba6 <MSC_BOT_DataIn+0x5e>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013b8e:	2101      	movs	r1, #1
 8013b90:	6878      	ldr	r0, [r7, #4]
 8013b92:	f000 f90b 	bl	8013dac <MSC_BOT_SendCSW>
    }
    break;
 8013b96:	e006      	b.n	8013ba6 <MSC_BOT_DataIn+0x5e>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8013b98:	2100      	movs	r1, #0
 8013b9a:	6878      	ldr	r0, [r7, #4]
 8013b9c:	f000 f906 	bl	8013dac <MSC_BOT_SendCSW>
    break;
 8013ba0:	e002      	b.n	8013ba8 <MSC_BOT_DataIn+0x60>

  default:
    break;
 8013ba2:	bf00      	nop
 8013ba4:	e000      	b.n	8013ba8 <MSC_BOT_DataIn+0x60>
    break;
 8013ba6:	bf00      	nop
  }
}
 8013ba8:	bf00      	nop
 8013baa:	3710      	adds	r7, #16
 8013bac:	46bd      	mov	sp, r7
 8013bae:	bd80      	pop	{r7, pc}

08013bb0 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013bb0:	b580      	push	{r7, lr}
 8013bb2:	b084      	sub	sp, #16
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	6078      	str	r0, [r7, #4]
 8013bb8:	460b      	mov	r3, r1
 8013bba:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013bc2:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	7a1b      	ldrb	r3, [r3, #8]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d002      	beq.n	8013bd2 <MSC_BOT_DataOut+0x22>
 8013bcc:	2b01      	cmp	r3, #1
 8013bce:	d004      	beq.n	8013bda <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8013bd0:	e018      	b.n	8013c04 <MSC_BOT_DataOut+0x54>
      MSC_BOT_CBW_Decode(pdev);
 8013bd2:	6878      	ldr	r0, [r7, #4]
 8013bd4:	f000 f81a 	bl	8013c0c <MSC_BOT_CBW_Decode>
      break;
 8013bd8:	e014      	b.n	8013c04 <MSC_BOT_DataOut+0x54>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013bda:	68fa      	ldr	r2, [r7, #12]
 8013bdc:	f248 031d 	movw	r3, #32797	; 0x801d
 8013be0:	4413      	add	r3, r2
 8013be2:	7819      	ldrb	r1, [r3, #0]
 8013be4:	68fa      	ldr	r2, [r7, #12]
 8013be6:	f248 031f 	movw	r3, #32799	; 0x801f
 8013bea:	4413      	add	r3, r2
 8013bec:	461a      	mov	r2, r3
 8013bee:	6878      	ldr	r0, [r7, #4]
 8013bf0:	f000 f968 	bl	8013ec4 <SCSI_ProcessCmd>
 8013bf4:	4603      	mov	r3, r0
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	da03      	bge.n	8013c02 <MSC_BOT_DataOut+0x52>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013bfa:	2101      	movs	r1, #1
 8013bfc:	6878      	ldr	r0, [r7, #4]
 8013bfe:	f000 f8d5 	bl	8013dac <MSC_BOT_SendCSW>
      break;
 8013c02:	bf00      	nop
  }
}
 8013c04:	bf00      	nop
 8013c06:	3710      	adds	r7, #16
 8013c08:	46bd      	mov	sp, r7
 8013c0a:	bd80      	pop	{r7, pc}

08013c0c <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b084      	sub	sp, #16
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013c1a:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8013c1c:	68fa      	ldr	r2, [r7, #12]
 8013c1e:	f248 0314 	movw	r3, #32788	; 0x8014
 8013c22:	4413      	add	r3, r2
 8013c24:	681a      	ldr	r2, [r3, #0]
 8013c26:	68f9      	ldr	r1, [r7, #12]
 8013c28:	f248 0334 	movw	r3, #32820	; 0x8034
 8013c2c:	440b      	add	r3, r1
 8013c2e:	601a      	str	r2, [r3, #0]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8013c30:	68fa      	ldr	r2, [r7, #12]
 8013c32:	f248 0318 	movw	r3, #32792	; 0x8018
 8013c36:	4413      	add	r3, r2
 8013c38:	681a      	ldr	r2, [r3, #0]
 8013c3a:	68f9      	ldr	r1, [r7, #12]
 8013c3c:	f248 0338 	movw	r3, #32824	; 0x8038
 8013c40:	440b      	add	r3, r1
 8013c42:	601a      	str	r2, [r3, #0]

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8013c44:	2101      	movs	r1, #1
 8013c46:	6878      	ldr	r0, [r7, #4]
 8013c48:	f005 fba8 	bl	801939c <USBD_LL_GetRxDataSize>
 8013c4c:	4603      	mov	r3, r0
 8013c4e:	2b1f      	cmp	r3, #31
 8013c50:	d11c      	bne.n	8013c8c <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8013c52:	68fa      	ldr	r2, [r7, #12]
 8013c54:	f248 0310 	movw	r3, #32784	; 0x8010
 8013c58:	4413      	add	r3, r2
 8013c5a:	681b      	ldr	r3, [r3, #0]
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8013c5c:	4a38      	ldr	r2, [pc, #224]	; (8013d40 <MSC_BOT_CBW_Decode+0x134>)
 8013c5e:	4293      	cmp	r3, r2
 8013c60:	d114      	bne.n	8013c8c <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8013c62:	68fa      	ldr	r2, [r7, #12]
 8013c64:	f248 031d 	movw	r3, #32797	; 0x801d
 8013c68:	4413      	add	r3, r2
 8013c6a:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8013c6c:	2b01      	cmp	r3, #1
 8013c6e:	d80d      	bhi.n	8013c8c <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8013c70:	68fa      	ldr	r2, [r7, #12]
 8013c72:	f248 031e 	movw	r3, #32798	; 0x801e
 8013c76:	4413      	add	r3, r2
 8013c78:	781b      	ldrb	r3, [r3, #0]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d006      	beq.n	8013c8c <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bCBLength > 16U))
 8013c7e:	68fa      	ldr	r2, [r7, #12]
 8013c80:	f248 031e 	movw	r3, #32798	; 0x801e
 8013c84:	4413      	add	r3, r2
 8013c86:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8013c88:	2b10      	cmp	r3, #16
 8013c8a:	d910      	bls.n	8013cae <MSC_BOT_CBW_Decode+0xa2>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013c8c:	68fa      	ldr	r2, [r7, #12]
 8013c8e:	f248 031d 	movw	r3, #32797	; 0x801d
 8013c92:	4413      	add	r3, r2
 8013c94:	7819      	ldrb	r1, [r3, #0]
 8013c96:	2320      	movs	r3, #32
 8013c98:	2205      	movs	r2, #5
 8013c9a:	6878      	ldr	r0, [r7, #4]
 8013c9c:	f000 fd36 	bl	801470c <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	2202      	movs	r2, #2
 8013ca4:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8013ca6:	6878      	ldr	r0, [r7, #4]
 8013ca8:	f000 f8b2 	bl	8013e10 <MSC_BOT_Abort>
 8013cac:	e044      	b.n	8013d38 <MSC_BOT_CBW_Decode+0x12c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013cae:	68fa      	ldr	r2, [r7, #12]
 8013cb0:	f248 031d 	movw	r3, #32797	; 0x801d
 8013cb4:	4413      	add	r3, r2
 8013cb6:	7819      	ldrb	r1, [r3, #0]
 8013cb8:	68fa      	ldr	r2, [r7, #12]
 8013cba:	f248 031f 	movw	r3, #32799	; 0x801f
 8013cbe:	4413      	add	r3, r2
 8013cc0:	461a      	mov	r2, r3
 8013cc2:	6878      	ldr	r0, [r7, #4]
 8013cc4:	f000 f8fe 	bl	8013ec4 <SCSI_ProcessCmd>
 8013cc8:	4603      	mov	r3, r0
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	da0c      	bge.n	8013ce8 <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	7a1b      	ldrb	r3, [r3, #8]
 8013cd2:	2b05      	cmp	r3, #5
 8013cd4:	d104      	bne.n	8013ce0 <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013cd6:	2101      	movs	r1, #1
 8013cd8:	6878      	ldr	r0, [r7, #4]
 8013cda:	f000 f867 	bl	8013dac <MSC_BOT_SendCSW>
 8013cde:	e02b      	b.n	8013d38 <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8013ce0:	6878      	ldr	r0, [r7, #4]
 8013ce2:	f000 f895 	bl	8013e10 <MSC_BOT_Abort>
 8013ce6:	e027      	b.n	8013d38 <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	7a1b      	ldrb	r3, [r3, #8]
 8013cec:	2b02      	cmp	r3, #2
 8013cee:	d022      	beq.n	8013d36 <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8013cf4:	2b01      	cmp	r3, #1
 8013cf6:	d01e      	beq.n	8013d36 <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8013cfc:	2b03      	cmp	r3, #3
 8013cfe:	d01a      	beq.n	8013d36 <MSC_BOT_CBW_Decode+0x12a>
    {
      if (hmsc->bot_data_length > 0U)
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	68db      	ldr	r3, [r3, #12]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d009      	beq.n	8013d1c <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	f103 0110 	add.w	r1, r3, #16
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	68db      	ldr	r3, [r3, #12]
 8013d12:	461a      	mov	r2, r3
 8013d14:	6878      	ldr	r0, [r7, #4]
 8013d16:	f000 f815 	bl	8013d44 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8013d1a:	e00d      	b.n	8013d38 <MSC_BOT_CBW_Decode+0x12c>
      }
      else if (hmsc->bot_data_length == 0U)
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	68db      	ldr	r3, [r3, #12]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d104      	bne.n	8013d2e <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8013d24:	2100      	movs	r1, #0
 8013d26:	6878      	ldr	r0, [r7, #4]
 8013d28:	f000 f840 	bl	8013dac <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8013d2c:	e004      	b.n	8013d38 <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8013d2e:	6878      	ldr	r0, [r7, #4]
 8013d30:	f000 f86e 	bl	8013e10 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8013d34:	e000      	b.n	8013d38 <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    else
    {
      return;
 8013d36:	bf00      	nop
    }
  }
}
 8013d38:	3710      	adds	r7, #16
 8013d3a:	46bd      	mov	sp, r7
 8013d3c:	bd80      	pop	{r7, pc}
 8013d3e:	bf00      	nop
 8013d40:	43425355 	.word	0x43425355

08013d44 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8013d44:	b580      	push	{r7, lr}
 8013d46:	b086      	sub	sp, #24
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	60f8      	str	r0, [r7, #12]
 8013d4c:	60b9      	str	r1, [r7, #8]
 8013d4e:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013d56:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8013d58:	697a      	ldr	r2, [r7, #20]
 8013d5a:	f248 0318 	movw	r3, #32792	; 0x8018
 8013d5e:	4413      	add	r3, r2
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	687a      	ldr	r2, [r7, #4]
 8013d64:	4293      	cmp	r3, r2
 8013d66:	bf28      	it	cs
 8013d68:	4613      	movcs	r3, r2
 8013d6a:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8013d6c:	697a      	ldr	r2, [r7, #20]
 8013d6e:	f248 0338 	movw	r3, #32824	; 0x8038
 8013d72:	4413      	add	r3, r2
 8013d74:	681a      	ldr	r2, [r3, #0]
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	1ad2      	subs	r2, r2, r3
 8013d7a:	6979      	ldr	r1, [r7, #20]
 8013d7c:	f248 0338 	movw	r3, #32824	; 0x8038
 8013d80:	440b      	add	r3, r1
 8013d82:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8013d84:	697a      	ldr	r2, [r7, #20]
 8013d86:	f248 033c 	movw	r3, #32828	; 0x803c
 8013d8a:	4413      	add	r3, r2
 8013d8c:	2200      	movs	r2, #0
 8013d8e:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8013d90:	697b      	ldr	r3, [r7, #20]
 8013d92:	2204      	movs	r2, #4
 8013d94:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8013d96:	693b      	ldr	r3, [r7, #16]
 8013d98:	68ba      	ldr	r2, [r7, #8]
 8013d9a:	2181      	movs	r1, #129	; 0x81
 8013d9c:	68f8      	ldr	r0, [r7, #12]
 8013d9e:	f005 fabb 	bl	8019318 <USBD_LL_Transmit>
}
 8013da2:	bf00      	nop
 8013da4:	3718      	adds	r7, #24
 8013da6:	46bd      	mov	sp, r7
 8013da8:	bd80      	pop	{r7, pc}
	...

08013dac <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b084      	sub	sp, #16
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	6078      	str	r0, [r7, #4]
 8013db4:	460b      	mov	r3, r1
 8013db6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013dbe:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8013dc0:	68fa      	ldr	r2, [r7, #12]
 8013dc2:	f248 0330 	movw	r3, #32816	; 0x8030
 8013dc6:	4413      	add	r3, r2
 8013dc8:	4a10      	ldr	r2, [pc, #64]	; (8013e0c <MSC_BOT_SendCSW+0x60>)
 8013dca:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = CSW_Status;
 8013dcc:	68fa      	ldr	r2, [r7, #12]
 8013dce:	f248 033c 	movw	r3, #32828	; 0x803c
 8013dd2:	4413      	add	r3, r2
 8013dd4:	78fa      	ldrb	r2, [r7, #3]
 8013dd6:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_IDLE;
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	2200      	movs	r2, #0
 8013ddc:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	f248 0230 	movw	r2, #32816	; 0x8030
 8013de4:	441a      	add	r2, r3
 8013de6:	230d      	movs	r3, #13
 8013de8:	2181      	movs	r1, #129	; 0x81
 8013dea:	6878      	ldr	r0, [r7, #4]
 8013dec:	f005 fa94 	bl	8019318 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	f248 0210 	movw	r2, #32784	; 0x8010
 8013df6:	441a      	add	r2, r3
 8013df8:	231f      	movs	r3, #31
 8013dfa:	2101      	movs	r1, #1
 8013dfc:	6878      	ldr	r0, [r7, #4]
 8013dfe:	f005 faac 	bl	801935a <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8013e02:	bf00      	nop
 8013e04:	3710      	adds	r7, #16
 8013e06:	46bd      	mov	sp, r7
 8013e08:	bd80      	pop	{r7, pc}
 8013e0a:	bf00      	nop
 8013e0c:	53425355 	.word	0x53425355

08013e10 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8013e10:	b580      	push	{r7, lr}
 8013e12:	b084      	sub	sp, #16
 8013e14:	af00      	add	r7, sp, #0
 8013e16:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013e1e:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8013e20:	68fa      	ldr	r2, [r7, #12]
 8013e22:	f248 031c 	movw	r3, #32796	; 0x801c
 8013e26:	4413      	add	r3, r2
 8013e28:	781b      	ldrb	r3, [r3, #0]
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d10e      	bne.n	8013e4c <MSC_BOT_Abort+0x3c>
      (hmsc->cbw.dDataLength != 0U) &&
 8013e2e:	68fa      	ldr	r2, [r7, #12]
 8013e30:	f248 0318 	movw	r3, #32792	; 0x8018
 8013e34:	4413      	add	r3, r2
 8013e36:	681b      	ldr	r3, [r3, #0]
  if ((hmsc->cbw.bmFlags == 0U) &&
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d007      	beq.n	8013e4c <MSC_BOT_Abort+0x3c>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8013e3c:	68fb      	ldr	r3, [r7, #12]
 8013e3e:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d103      	bne.n	8013e4c <MSC_BOT_Abort+0x3c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8013e44:	2101      	movs	r1, #1
 8013e46:	6878      	ldr	r0, [r7, #4]
 8013e48:	f005 f9dd 	bl	8019206 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8013e4c:	2181      	movs	r1, #129	; 0x81
 8013e4e:	6878      	ldr	r0, [r7, #4]
 8013e50:	f005 f9d9 	bl	8019206 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	7a5b      	ldrb	r3, [r3, #9]
 8013e58:	2b02      	cmp	r3, #2
 8013e5a:	d107      	bne.n	8013e6c <MSC_BOT_Abort+0x5c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8013e5c:	2181      	movs	r1, #129	; 0x81
 8013e5e:	6878      	ldr	r0, [r7, #4]
 8013e60:	f005 f9d1 	bl	8019206 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8013e64:	2101      	movs	r1, #1
 8013e66:	6878      	ldr	r0, [r7, #4]
 8013e68:	f005 f9cd 	bl	8019206 <USBD_LL_StallEP>
  }
}
 8013e6c:	bf00      	nop
 8013e6e:	3710      	adds	r7, #16
 8013e70:	46bd      	mov	sp, r7
 8013e72:	bd80      	pop	{r7, pc}

08013e74 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b084      	sub	sp, #16
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	6078      	str	r0, [r7, #4]
 8013e7c:	460b      	mov	r3, r1
 8013e7e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013e86:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	7a5b      	ldrb	r3, [r3, #9]
 8013e8c:	2b02      	cmp	r3, #2
 8013e8e:	d108      	bne.n	8013ea2 <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8013e90:	2181      	movs	r1, #129	; 0x81
 8013e92:	6878      	ldr	r0, [r7, #4]
 8013e94:	f005 f9b7 	bl	8019206 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8013e98:	2101      	movs	r1, #1
 8013e9a:	6878      	ldr	r0, [r7, #4]
 8013e9c:	f005 f9b3 	bl	8019206 <USBD_LL_StallEP>
 8013ea0:	e00d      	b.n	8013ebe <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8013ea2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	da08      	bge.n	8013ebc <MSC_BOT_CplClrFeature+0x48>
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	7a5b      	ldrb	r3, [r3, #9]
 8013eae:	2b01      	cmp	r3, #1
 8013eb0:	d004      	beq.n	8013ebc <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013eb2:	2101      	movs	r1, #1
 8013eb4:	6878      	ldr	r0, [r7, #4]
 8013eb6:	f7ff ff79 	bl	8013dac <MSC_BOT_SendCSW>
 8013eba:	e000      	b.n	8013ebe <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 8013ebc:	bf00      	nop
  }
}
 8013ebe:	3710      	adds	r7, #16
 8013ec0:	46bd      	mov	sp, r7
 8013ec2:	bd80      	pop	{r7, pc}

08013ec4 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8013ec4:	b580      	push	{r7, lr}
 8013ec6:	b086      	sub	sp, #24
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	60f8      	str	r0, [r7, #12]
 8013ecc:	460b      	mov	r3, r1
 8013ece:	607a      	str	r2, [r7, #4]
 8013ed0:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013ed8:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	781b      	ldrb	r3, [r3, #0]
 8013ede:	2b25      	cmp	r3, #37	; 0x25
 8013ee0:	d06e      	beq.n	8013fc0 <SCSI_ProcessCmd+0xfc>
 8013ee2:	2b25      	cmp	r3, #37	; 0x25
 8013ee4:	dc11      	bgt.n	8013f0a <SCSI_ProcessCmd+0x46>
 8013ee6:	2b1a      	cmp	r3, #26
 8013ee8:	d04f      	beq.n	8013f8a <SCSI_ProcessCmd+0xc6>
 8013eea:	2b1a      	cmp	r3, #26
 8013eec:	dc06      	bgt.n	8013efc <SCSI_ProcessCmd+0x38>
 8013eee:	2b03      	cmp	r3, #3
 8013ef0:	d027      	beq.n	8013f42 <SCSI_ProcessCmd+0x7e>
 8013ef2:	2b12      	cmp	r3, #18
 8013ef4:	d02e      	beq.n	8013f54 <SCSI_ProcessCmd+0x90>
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d01a      	beq.n	8013f30 <SCSI_ProcessCmd+0x6c>
 8013efa:	e0a0      	b.n	801403e <SCSI_ProcessCmd+0x17a>
 8013efc:	2b1e      	cmp	r3, #30
 8013efe:	d03b      	beq.n	8013f78 <SCSI_ProcessCmd+0xb4>
 8013f00:	2b23      	cmp	r3, #35	; 0x23
 8013f02:	d054      	beq.n	8013fae <SCSI_ProcessCmd+0xea>
 8013f04:	2b1b      	cmp	r3, #27
 8013f06:	d02e      	beq.n	8013f66 <SCSI_ProcessCmd+0xa2>
 8013f08:	e099      	b.n	801403e <SCSI_ProcessCmd+0x17a>
 8013f0a:	2b5a      	cmp	r3, #90	; 0x5a
 8013f0c:	d046      	beq.n	8013f9c <SCSI_ProcessCmd+0xd8>
 8013f0e:	2b5a      	cmp	r3, #90	; 0x5a
 8013f10:	dc07      	bgt.n	8013f22 <SCSI_ProcessCmd+0x5e>
 8013f12:	2b2a      	cmp	r3, #42	; 0x2a
 8013f14:	d078      	beq.n	8014008 <SCSI_ProcessCmd+0x144>
 8013f16:	2b2f      	cmp	r3, #47	; 0x2f
 8013f18:	f000 8088 	beq.w	801402c <SCSI_ProcessCmd+0x168>
 8013f1c:	2b28      	cmp	r3, #40	; 0x28
 8013f1e:	d061      	beq.n	8013fe4 <SCSI_ProcessCmd+0x120>
 8013f20:	e08d      	b.n	801403e <SCSI_ProcessCmd+0x17a>
 8013f22:	2ba8      	cmp	r3, #168	; 0xa8
 8013f24:	d067      	beq.n	8013ff6 <SCSI_ProcessCmd+0x132>
 8013f26:	2baa      	cmp	r3, #170	; 0xaa
 8013f28:	d077      	beq.n	801401a <SCSI_ProcessCmd+0x156>
 8013f2a:	2b9e      	cmp	r3, #158	; 0x9e
 8013f2c:	d051      	beq.n	8013fd2 <SCSI_ProcessCmd+0x10e>
 8013f2e:	e086      	b.n	801403e <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8013f30:	7afb      	ldrb	r3, [r7, #11]
 8013f32:	687a      	ldr	r2, [r7, #4]
 8013f34:	4619      	mov	r1, r3
 8013f36:	68f8      	ldr	r0, [r7, #12]
 8013f38:	f000 f893 	bl	8014062 <SCSI_TestUnitReady>
 8013f3c:	4603      	mov	r3, r0
 8013f3e:	75fb      	strb	r3, [r7, #23]
    break;
 8013f40:	e089      	b.n	8014056 <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 8013f42:	7afb      	ldrb	r3, [r7, #11]
 8013f44:	687a      	ldr	r2, [r7, #4]
 8013f46:	4619      	mov	r1, r3
 8013f48:	68f8      	ldr	r0, [r7, #12]
 8013f4a:	f000 fb47 	bl	80145dc <SCSI_RequestSense>
 8013f4e:	4603      	mov	r3, r0
 8013f50:	75fb      	strb	r3, [r7, #23]
    break;
 8013f52:	e080      	b.n	8014056 <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 8013f54:	7afb      	ldrb	r3, [r7, #11]
 8013f56:	687a      	ldr	r2, [r7, #4]
 8013f58:	4619      	mov	r1, r3
 8013f5a:	68f8      	ldr	r0, [r7, #12]
 8013f5c:	f000 f8d2 	bl	8014104 <SCSI_Inquiry>
 8013f60:	4603      	mov	r3, r0
 8013f62:	75fb      	strb	r3, [r7, #23]
    break;
 8013f64:	e077      	b.n	8014056 <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8013f66:	7afb      	ldrb	r3, [r7, #11]
 8013f68:	687a      	ldr	r2, [r7, #4]
 8013f6a:	4619      	mov	r1, r3
 8013f6c:	68f8      	ldr	r0, [r7, #12]
 8013f6e:	f000 fc27 	bl	80147c0 <SCSI_StartStopUnit>
 8013f72:	4603      	mov	r3, r0
 8013f74:	75fb      	strb	r3, [r7, #23]
    break;
 8013f76:	e06e      	b.n	8014056 <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8013f78:	7afb      	ldrb	r3, [r7, #11]
 8013f7a:	687a      	ldr	r2, [r7, #4]
 8013f7c:	4619      	mov	r1, r3
 8013f7e:	68f8      	ldr	r0, [r7, #12]
 8013f80:	f000 fc71 	bl	8014866 <SCSI_AllowPreventRemovable>
 8013f84:	4603      	mov	r3, r0
 8013f86:	75fb      	strb	r3, [r7, #23]
    break;
 8013f88:	e065      	b.n	8014056 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 8013f8a:	7afb      	ldrb	r3, [r7, #11]
 8013f8c:	687a      	ldr	r2, [r7, #4]
 8013f8e:	4619      	mov	r1, r3
 8013f90:	68f8      	ldr	r0, [r7, #12]
 8013f92:	f000 fad7 	bl	8014544 <SCSI_ModeSense6>
 8013f96:	4603      	mov	r3, r0
 8013f98:	75fb      	strb	r3, [r7, #23]
    break;
 8013f9a:	e05c      	b.n	8014056 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 8013f9c:	7afb      	ldrb	r3, [r7, #11]
 8013f9e:	687a      	ldr	r2, [r7, #4]
 8013fa0:	4619      	mov	r1, r3
 8013fa2:	68f8      	ldr	r0, [r7, #12]
 8013fa4:	f000 faf4 	bl	8014590 <SCSI_ModeSense10>
 8013fa8:	4603      	mov	r3, r0
 8013faa:	75fb      	strb	r3, [r7, #23]
    break;
 8013fac:	e053      	b.n	8014056 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8013fae:	7afb      	ldrb	r3, [r7, #11]
 8013fb0:	687a      	ldr	r2, [r7, #4]
 8013fb2:	4619      	mov	r1, r3
 8013fb4:	68f8      	ldr	r0, [r7, #12]
 8013fb6:	f000 fa56 	bl	8014466 <SCSI_ReadFormatCapacity>
 8013fba:	4603      	mov	r3, r0
 8013fbc:	75fb      	strb	r3, [r7, #23]
    break;
 8013fbe:	e04a      	b.n	8014056 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8013fc0:	7afb      	ldrb	r3, [r7, #11]
 8013fc2:	687a      	ldr	r2, [r7, #4]
 8013fc4:	4619      	mov	r1, r3
 8013fc6:	68f8      	ldr	r0, [r7, #12]
 8013fc8:	f000 f910 	bl	80141ec <SCSI_ReadCapacity10>
 8013fcc:	4603      	mov	r3, r0
 8013fce:	75fb      	strb	r3, [r7, #23]
    break;
 8013fd0:	e041      	b.n	8014056 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8013fd2:	7afb      	ldrb	r3, [r7, #11]
 8013fd4:	687a      	ldr	r2, [r7, #4]
 8013fd6:	4619      	mov	r1, r3
 8013fd8:	68f8      	ldr	r0, [r7, #12]
 8013fda:	f000 f98b 	bl	80142f4 <SCSI_ReadCapacity16>
 8013fde:	4603      	mov	r3, r0
 8013fe0:	75fb      	strb	r3, [r7, #23]
    break;
 8013fe2:	e038      	b.n	8014056 <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 8013fe4:	7afb      	ldrb	r3, [r7, #11]
 8013fe6:	687a      	ldr	r2, [r7, #4]
 8013fe8:	4619      	mov	r1, r3
 8013fea:	68f8      	ldr	r0, [r7, #12]
 8013fec:	f000 fc62 	bl	80148b4 <SCSI_Read10>
 8013ff0:	4603      	mov	r3, r0
 8013ff2:	75fb      	strb	r3, [r7, #23]
    break;
 8013ff4:	e02f      	b.n	8014056 <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 8013ff6:	7afb      	ldrb	r3, [r7, #11]
 8013ff8:	687a      	ldr	r2, [r7, #4]
 8013ffa:	4619      	mov	r1, r3
 8013ffc:	68f8      	ldr	r0, [r7, #12]
 8013ffe:	f000 fd0b 	bl	8014a18 <SCSI_Read12>
 8014002:	4603      	mov	r3, r0
 8014004:	75fb      	strb	r3, [r7, #23]
    break;
 8014006:	e026      	b.n	8014056 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 8014008:	7afb      	ldrb	r3, [r7, #11]
 801400a:	687a      	ldr	r2, [r7, #4]
 801400c:	4619      	mov	r1, r3
 801400e:	68f8      	ldr	r0, [r7, #12]
 8014010:	f000 fdbe 	bl	8014b90 <SCSI_Write10>
 8014014:	4603      	mov	r3, r0
 8014016:	75fb      	strb	r3, [r7, #23]
    break;
 8014018:	e01d      	b.n	8014056 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 801401a:	7afb      	ldrb	r3, [r7, #11]
 801401c:	687a      	ldr	r2, [r7, #4]
 801401e:	4619      	mov	r1, r3
 8014020:	68f8      	ldr	r0, [r7, #12]
 8014022:	f000 fe8d 	bl	8014d40 <SCSI_Write12>
 8014026:	4603      	mov	r3, r0
 8014028:	75fb      	strb	r3, [r7, #23]
    break;
 801402a:	e014      	b.n	8014056 <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 801402c:	7afb      	ldrb	r3, [r7, #11]
 801402e:	687a      	ldr	r2, [r7, #4]
 8014030:	4619      	mov	r1, r3
 8014032:	68f8      	ldr	r0, [r7, #12]
 8014034:	f000 ff6c 	bl	8014f10 <SCSI_Verify10>
 8014038:	4603      	mov	r3, r0
 801403a:	75fb      	strb	r3, [r7, #23]
    break;
 801403c:	e00b      	b.n	8014056 <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 801403e:	7af9      	ldrb	r1, [r7, #11]
 8014040:	2320      	movs	r3, #32
 8014042:	2205      	movs	r2, #5
 8014044:	68f8      	ldr	r0, [r7, #12]
 8014046:	f000 fb61 	bl	801470c <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801404a:	693b      	ldr	r3, [r7, #16]
 801404c:	2202      	movs	r2, #2
 801404e:	725a      	strb	r2, [r3, #9]
    ret = -1;
 8014050:	23ff      	movs	r3, #255	; 0xff
 8014052:	75fb      	strb	r3, [r7, #23]
    break;
 8014054:	bf00      	nop
  }

  return ret;
 8014056:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801405a:	4618      	mov	r0, r3
 801405c:	3718      	adds	r7, #24
 801405e:	46bd      	mov	sp, r7
 8014060:	bd80      	pop	{r7, pc}

08014062 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014062:	b580      	push	{r7, lr}
 8014064:	b086      	sub	sp, #24
 8014066:	af00      	add	r7, sp, #0
 8014068:	60f8      	str	r0, [r7, #12]
 801406a:	460b      	mov	r3, r1
 801406c:	607a      	str	r2, [r7, #4]
 801406e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014076:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8014078:	697a      	ldr	r2, [r7, #20]
 801407a:	f248 0318 	movw	r3, #32792	; 0x8018
 801407e:	4413      	add	r3, r2
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	2b00      	cmp	r3, #0
 8014084:	d00c      	beq.n	80140a0 <SCSI_TestUnitReady+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014086:	697a      	ldr	r2, [r7, #20]
 8014088:	f248 031d 	movw	r3, #32797	; 0x801d
 801408c:	4413      	add	r3, r2
 801408e:	7819      	ldrb	r1, [r3, #0]
 8014090:	2320      	movs	r3, #32
 8014092:	2205      	movs	r2, #5
 8014094:	68f8      	ldr	r0, [r7, #12]
 8014096:	f000 fb39 	bl	801470c <SCSI_SenseCode>

    return -1;
 801409a:	f04f 33ff 	mov.w	r3, #4294967295
 801409e:	e02c      	b.n	80140fa <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80140a0:	697a      	ldr	r2, [r7, #20]
 80140a2:	f248 0362 	movw	r3, #32866	; 0x8062
 80140a6:	4413      	add	r3, r2
 80140a8:	781b      	ldrb	r3, [r3, #0]
 80140aa:	2b02      	cmp	r3, #2
 80140ac:	d10b      	bne.n	80140c6 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80140ae:	7af9      	ldrb	r1, [r7, #11]
 80140b0:	233a      	movs	r3, #58	; 0x3a
 80140b2:	2202      	movs	r2, #2
 80140b4:	68f8      	ldr	r0, [r7, #12]
 80140b6:	f000 fb29 	bl	801470c <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80140ba:	697b      	ldr	r3, [r7, #20]
 80140bc:	2205      	movs	r2, #5
 80140be:	721a      	strb	r2, [r3, #8]
    return -1;
 80140c0:	f04f 33ff 	mov.w	r3, #4294967295
 80140c4:	e019      	b.n	80140fa <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80140cc:	689b      	ldr	r3, [r3, #8]
 80140ce:	7afa      	ldrb	r2, [r7, #11]
 80140d0:	4610      	mov	r0, r2
 80140d2:	4798      	blx	r3
 80140d4:	4603      	mov	r3, r0
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d00b      	beq.n	80140f2 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80140da:	7af9      	ldrb	r1, [r7, #11]
 80140dc:	233a      	movs	r3, #58	; 0x3a
 80140de:	2202      	movs	r2, #2
 80140e0:	68f8      	ldr	r0, [r7, #12]
 80140e2:	f000 fb13 	bl	801470c <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80140e6:	697b      	ldr	r3, [r7, #20]
 80140e8:	2205      	movs	r2, #5
 80140ea:	721a      	strb	r2, [r3, #8]

    return -1;
 80140ec:	f04f 33ff 	mov.w	r3, #4294967295
 80140f0:	e003      	b.n	80140fa <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 80140f2:	697b      	ldr	r3, [r7, #20]
 80140f4:	2200      	movs	r2, #0
 80140f6:	60da      	str	r2, [r3, #12]

  return 0;
 80140f8:	2300      	movs	r3, #0
}
 80140fa:	4618      	mov	r0, r3
 80140fc:	3718      	adds	r7, #24
 80140fe:	46bd      	mov	sp, r7
 8014100:	bd80      	pop	{r7, pc}
	...

08014104 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014104:	b580      	push	{r7, lr}
 8014106:	b088      	sub	sp, #32
 8014108:	af00      	add	r7, sp, #0
 801410a:	60f8      	str	r0, [r7, #12]
 801410c:	460b      	mov	r3, r1
 801410e:	607a      	str	r2, [r7, #4]
 8014110:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014118:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 801411a:	69ba      	ldr	r2, [r7, #24]
 801411c:	f248 0318 	movw	r3, #32792	; 0x8018
 8014120:	4413      	add	r3, r2
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	2b00      	cmp	r3, #0
 8014126:	d10c      	bne.n	8014142 <SCSI_Inquiry+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014128:	69ba      	ldr	r2, [r7, #24]
 801412a:	f248 031d 	movw	r3, #32797	; 0x801d
 801412e:	4413      	add	r3, r2
 8014130:	7819      	ldrb	r1, [r3, #0]
 8014132:	2320      	movs	r3, #32
 8014134:	2205      	movs	r2, #5
 8014136:	68f8      	ldr	r0, [r7, #12]
 8014138:	f000 fae8 	bl	801470c <SCSI_SenseCode>
    return -1;
 801413c:	f04f 33ff 	mov.w	r3, #4294967295
 8014140:	e04c      	b.n	80141dc <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	3301      	adds	r3, #1
 8014146:	781b      	ldrb	r3, [r3, #0]
 8014148:	f003 0301 	and.w	r3, r3, #1
 801414c:	2b00      	cmp	r3, #0
 801414e:	d022      	beq.n	8014196 <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	3302      	adds	r3, #2
 8014154:	781b      	ldrb	r3, [r3, #0]
 8014156:	2b00      	cmp	r3, #0
 8014158:	d105      	bne.n	8014166 <SCSI_Inquiry+0x62>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 801415a:	2206      	movs	r2, #6
 801415c:	4921      	ldr	r1, [pc, #132]	; (80141e4 <SCSI_Inquiry+0xe0>)
 801415e:	69b8      	ldr	r0, [r7, #24]
 8014160:	f001 f862 	bl	8015228 <SCSI_UpdateBotData>
 8014164:	e039      	b.n	80141da <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	3302      	adds	r3, #2
 801416a:	781b      	ldrb	r3, [r3, #0]
 801416c:	2b80      	cmp	r3, #128	; 0x80
 801416e:	d105      	bne.n	801417c <SCSI_Inquiry+0x78>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8014170:	2208      	movs	r2, #8
 8014172:	491d      	ldr	r1, [pc, #116]	; (80141e8 <SCSI_Inquiry+0xe4>)
 8014174:	69b8      	ldr	r0, [r7, #24]
 8014176:	f001 f857 	bl	8015228 <SCSI_UpdateBotData>
 801417a:	e02e      	b.n	80141da <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 801417c:	69ba      	ldr	r2, [r7, #24]
 801417e:	f248 031d 	movw	r3, #32797	; 0x801d
 8014182:	4413      	add	r3, r2
 8014184:	7819      	ldrb	r1, [r3, #0]
 8014186:	2324      	movs	r3, #36	; 0x24
 8014188:	2205      	movs	r2, #5
 801418a:	68f8      	ldr	r0, [r7, #12]
 801418c:	f000 fabe 	bl	801470c <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8014190:	f04f 33ff 	mov.w	r3, #4294967295
 8014194:	e022      	b.n	80141dc <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801419c:	69d9      	ldr	r1, [r3, #28]
 801419e:	7afa      	ldrb	r2, [r7, #11]
 80141a0:	4613      	mov	r3, r2
 80141a2:	00db      	lsls	r3, r3, #3
 80141a4:	4413      	add	r3, r2
 80141a6:	009b      	lsls	r3, r3, #2
 80141a8:	440b      	add	r3, r1
 80141aa:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 80141ac:	697b      	ldr	r3, [r7, #20]
 80141ae:	3304      	adds	r3, #4
 80141b0:	781b      	ldrb	r3, [r3, #0]
 80141b2:	b29b      	uxth	r3, r3
 80141b4:	3305      	adds	r3, #5
 80141b6:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	3304      	adds	r3, #4
 80141bc:	781b      	ldrb	r3, [r3, #0]
 80141be:	b29b      	uxth	r3, r3
 80141c0:	8bfa      	ldrh	r2, [r7, #30]
 80141c2:	429a      	cmp	r2, r3
 80141c4:	d303      	bcc.n	80141ce <SCSI_Inquiry+0xca>
    {
      len = params[4];
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	3304      	adds	r3, #4
 80141ca:	781b      	ldrb	r3, [r3, #0]
 80141cc:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 80141ce:	8bfb      	ldrh	r3, [r7, #30]
 80141d0:	461a      	mov	r2, r3
 80141d2:	6979      	ldr	r1, [r7, #20]
 80141d4:	69b8      	ldr	r0, [r7, #24]
 80141d6:	f001 f827 	bl	8015228 <SCSI_UpdateBotData>
  }

  return 0;
 80141da:	2300      	movs	r3, #0
}
 80141dc:	4618      	mov	r0, r3
 80141de:	3720      	adds	r7, #32
 80141e0:	46bd      	mov	sp, r7
 80141e2:	bd80      	pop	{r7, pc}
 80141e4:	240000c4 	.word	0x240000c4
 80141e8:	240000cc 	.word	0x240000cc

080141ec <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80141ec:	b590      	push	{r4, r7, lr}
 80141ee:	b087      	sub	sp, #28
 80141f0:	af00      	add	r7, sp, #0
 80141f2:	60f8      	str	r0, [r7, #12]
 80141f4:	460b      	mov	r3, r1
 80141f6:	607a      	str	r2, [r7, #4]
 80141f8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014200:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014208:	685c      	ldr	r4, [r3, #4]
 801420a:	697a      	ldr	r2, [r7, #20]
 801420c:	f248 0368 	movw	r3, #32872	; 0x8068
 8014210:	4413      	add	r3, r2
 8014212:	6979      	ldr	r1, [r7, #20]
 8014214:	f248 0264 	movw	r2, #32868	; 0x8064
 8014218:	440a      	add	r2, r1
 801421a:	7af8      	ldrb	r0, [r7, #11]
 801421c:	4619      	mov	r1, r3
 801421e:	47a0      	blx	r4
 8014220:	4603      	mov	r3, r0
 8014222:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8014224:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014228:	2b00      	cmp	r3, #0
 801422a:	d106      	bne.n	801423a <SCSI_ReadCapacity10+0x4e>
 801422c:	697a      	ldr	r2, [r7, #20]
 801422e:	f248 0362 	movw	r3, #32866	; 0x8062
 8014232:	4413      	add	r3, r2
 8014234:	781b      	ldrb	r3, [r3, #0]
 8014236:	2b02      	cmp	r3, #2
 8014238:	d108      	bne.n	801424c <SCSI_ReadCapacity10+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801423a:	7af9      	ldrb	r1, [r7, #11]
 801423c:	233a      	movs	r3, #58	; 0x3a
 801423e:	2202      	movs	r2, #2
 8014240:	68f8      	ldr	r0, [r7, #12]
 8014242:	f000 fa63 	bl	801470c <SCSI_SenseCode>
    return -1;
 8014246:	f04f 33ff 	mov.w	r3, #4294967295
 801424a:	e04f      	b.n	80142ec <SCSI_ReadCapacity10+0x100>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 801424c:	697a      	ldr	r2, [r7, #20]
 801424e:	f248 0368 	movw	r3, #32872	; 0x8068
 8014252:	4413      	add	r3, r2
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	3b01      	subs	r3, #1
 8014258:	0e1b      	lsrs	r3, r3, #24
 801425a:	b2da      	uxtb	r2, r3
 801425c:	697b      	ldr	r3, [r7, #20]
 801425e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8014260:	697a      	ldr	r2, [r7, #20]
 8014262:	f248 0368 	movw	r3, #32872	; 0x8068
 8014266:	4413      	add	r3, r2
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	3b01      	subs	r3, #1
 801426c:	0c1b      	lsrs	r3, r3, #16
 801426e:	b2da      	uxtb	r2, r3
 8014270:	697b      	ldr	r3, [r7, #20]
 8014272:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8014274:	697a      	ldr	r2, [r7, #20]
 8014276:	f248 0368 	movw	r3, #32872	; 0x8068
 801427a:	4413      	add	r3, r2
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	3b01      	subs	r3, #1
 8014280:	0a1b      	lsrs	r3, r3, #8
 8014282:	b2da      	uxtb	r2, r3
 8014284:	697b      	ldr	r3, [r7, #20]
 8014286:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8014288:	697a      	ldr	r2, [r7, #20]
 801428a:	f248 0368 	movw	r3, #32872	; 0x8068
 801428e:	4413      	add	r3, r2
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	b2db      	uxtb	r3, r3
 8014294:	3b01      	subs	r3, #1
 8014296:	b2da      	uxtb	r2, r3
 8014298:	697b      	ldr	r3, [r7, #20]
 801429a:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 801429c:	697a      	ldr	r2, [r7, #20]
 801429e:	f248 0364 	movw	r3, #32868	; 0x8064
 80142a2:	4413      	add	r3, r2
 80142a4:	881b      	ldrh	r3, [r3, #0]
 80142a6:	161b      	asrs	r3, r3, #24
 80142a8:	b2da      	uxtb	r2, r3
 80142aa:	697b      	ldr	r3, [r7, #20]
 80142ac:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80142ae:	697a      	ldr	r2, [r7, #20]
 80142b0:	f248 0364 	movw	r3, #32868	; 0x8064
 80142b4:	4413      	add	r3, r2
 80142b6:	881b      	ldrh	r3, [r3, #0]
 80142b8:	141b      	asrs	r3, r3, #16
 80142ba:	b2da      	uxtb	r2, r3
 80142bc:	697b      	ldr	r3, [r7, #20]
 80142be:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80142c0:	697a      	ldr	r2, [r7, #20]
 80142c2:	f248 0364 	movw	r3, #32868	; 0x8064
 80142c6:	4413      	add	r3, r2
 80142c8:	881b      	ldrh	r3, [r3, #0]
 80142ca:	0a1b      	lsrs	r3, r3, #8
 80142cc:	b29b      	uxth	r3, r3
 80142ce:	b2da      	uxtb	r2, r3
 80142d0:	697b      	ldr	r3, [r7, #20]
 80142d2:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 80142d4:	697a      	ldr	r2, [r7, #20]
 80142d6:	f248 0364 	movw	r3, #32868	; 0x8064
 80142da:	4413      	add	r3, r2
 80142dc:	881b      	ldrh	r3, [r3, #0]
 80142de:	b2da      	uxtb	r2, r3
 80142e0:	697b      	ldr	r3, [r7, #20]
 80142e2:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 80142e4:	697b      	ldr	r3, [r7, #20]
 80142e6:	2208      	movs	r2, #8
 80142e8:	60da      	str	r2, [r3, #12]

  return 0;
 80142ea:	2300      	movs	r3, #0

}
 80142ec:	4618      	mov	r0, r3
 80142ee:	371c      	adds	r7, #28
 80142f0:	46bd      	mov	sp, r7
 80142f2:	bd90      	pop	{r4, r7, pc}

080142f4 <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80142f4:	b590      	push	{r4, r7, lr}
 80142f6:	b089      	sub	sp, #36	; 0x24
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	60f8      	str	r0, [r7, #12]
 80142fc:	460b      	mov	r3, r1
 80142fe:	607a      	str	r2, [r7, #4]
 8014300:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014308:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014310:	685c      	ldr	r4, [r3, #4]
 8014312:	69ba      	ldr	r2, [r7, #24]
 8014314:	f248 0368 	movw	r3, #32872	; 0x8068
 8014318:	4413      	add	r3, r2
 801431a:	69b9      	ldr	r1, [r7, #24]
 801431c:	f248 0264 	movw	r2, #32868	; 0x8064
 8014320:	440a      	add	r2, r1
 8014322:	7af8      	ldrb	r0, [r7, #11]
 8014324:	4619      	mov	r1, r3
 8014326:	47a0      	blx	r4
 8014328:	4603      	mov	r3, r0
 801432a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801432c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014330:	2b00      	cmp	r3, #0
 8014332:	d106      	bne.n	8014342 <SCSI_ReadCapacity16+0x4e>
 8014334:	69ba      	ldr	r2, [r7, #24]
 8014336:	f248 0362 	movw	r3, #32866	; 0x8062
 801433a:	4413      	add	r3, r2
 801433c:	781b      	ldrb	r3, [r3, #0]
 801433e:	2b02      	cmp	r3, #2
 8014340:	d108      	bne.n	8014354 <SCSI_ReadCapacity16+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014342:	7af9      	ldrb	r1, [r7, #11]
 8014344:	233a      	movs	r3, #58	; 0x3a
 8014346:	2202      	movs	r2, #2
 8014348:	68f8      	ldr	r0, [r7, #12]
 801434a:	f000 f9df 	bl	801470c <SCSI_SenseCode>
    return -1;
 801434e:	f04f 33ff 	mov.w	r3, #4294967295
 8014352:	e084      	b.n	801445e <SCSI_ReadCapacity16+0x16a>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	330a      	adds	r3, #10
 8014358:	781b      	ldrb	r3, [r3, #0]
 801435a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	330b      	adds	r3, #11
 8014360:	781b      	ldrb	r3, [r3, #0]
 8014362:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014364:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	330c      	adds	r3, #12
 801436a:	781b      	ldrb	r3, [r3, #0]
 801436c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 801436e:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8014370:	687a      	ldr	r2, [r7, #4]
 8014372:	320d      	adds	r2, #13
 8014374:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8014376:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014378:	69bb      	ldr	r3, [r7, #24]
 801437a:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 801437c:	2300      	movs	r3, #0
 801437e:	77fb      	strb	r3, [r7, #31]
 8014380:	e007      	b.n	8014392 <SCSI_ReadCapacity16+0x9e>
  {
    hmsc->bot_data[idx] = 0U;
 8014382:	7ffb      	ldrb	r3, [r7, #31]
 8014384:	69ba      	ldr	r2, [r7, #24]
 8014386:	4413      	add	r3, r2
 8014388:	2200      	movs	r2, #0
 801438a:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 801438c:	7ffb      	ldrb	r3, [r7, #31]
 801438e:	3301      	adds	r3, #1
 8014390:	77fb      	strb	r3, [r7, #31]
 8014392:	7ffa      	ldrb	r2, [r7, #31]
 8014394:	69bb      	ldr	r3, [r7, #24]
 8014396:	68db      	ldr	r3, [r3, #12]
 8014398:	429a      	cmp	r2, r3
 801439a:	d3f2      	bcc.n	8014382 <SCSI_ReadCapacity16+0x8e>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 801439c:	69ba      	ldr	r2, [r7, #24]
 801439e:	f248 0368 	movw	r3, #32872	; 0x8068
 80143a2:	4413      	add	r3, r2
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	3b01      	subs	r3, #1
 80143a8:	0e1b      	lsrs	r3, r3, #24
 80143aa:	b2da      	uxtb	r2, r3
 80143ac:	69bb      	ldr	r3, [r7, #24]
 80143ae:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80143b0:	69ba      	ldr	r2, [r7, #24]
 80143b2:	f248 0368 	movw	r3, #32872	; 0x8068
 80143b6:	4413      	add	r3, r2
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	3b01      	subs	r3, #1
 80143bc:	0c1b      	lsrs	r3, r3, #16
 80143be:	b2da      	uxtb	r2, r3
 80143c0:	69bb      	ldr	r3, [r7, #24]
 80143c2:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80143c4:	69ba      	ldr	r2, [r7, #24]
 80143c6:	f248 0368 	movw	r3, #32872	; 0x8068
 80143ca:	4413      	add	r3, r2
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	3b01      	subs	r3, #1
 80143d0:	0a1b      	lsrs	r3, r3, #8
 80143d2:	b2da      	uxtb	r2, r3
 80143d4:	69bb      	ldr	r3, [r7, #24]
 80143d6:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80143d8:	69ba      	ldr	r2, [r7, #24]
 80143da:	f248 0368 	movw	r3, #32872	; 0x8068
 80143de:	4413      	add	r3, r2
 80143e0:	681b      	ldr	r3, [r3, #0]
 80143e2:	b2db      	uxtb	r3, r3
 80143e4:	3b01      	subs	r3, #1
 80143e6:	b2da      	uxtb	r2, r3
 80143e8:	69bb      	ldr	r3, [r7, #24]
 80143ea:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80143ec:	69ba      	ldr	r2, [r7, #24]
 80143ee:	f248 0364 	movw	r3, #32868	; 0x8064
 80143f2:	4413      	add	r3, r2
 80143f4:	881b      	ldrh	r3, [r3, #0]
 80143f6:	161b      	asrs	r3, r3, #24
 80143f8:	b2da      	uxtb	r2, r3
 80143fa:	69bb      	ldr	r3, [r7, #24]
 80143fc:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80143fe:	69ba      	ldr	r2, [r7, #24]
 8014400:	f248 0364 	movw	r3, #32868	; 0x8064
 8014404:	4413      	add	r3, r2
 8014406:	881b      	ldrh	r3, [r3, #0]
 8014408:	141b      	asrs	r3, r3, #16
 801440a:	b2da      	uxtb	r2, r3
 801440c:	69bb      	ldr	r3, [r7, #24]
 801440e:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8014410:	69ba      	ldr	r2, [r7, #24]
 8014412:	f248 0364 	movw	r3, #32868	; 0x8064
 8014416:	4413      	add	r3, r2
 8014418:	881b      	ldrh	r3, [r3, #0]
 801441a:	0a1b      	lsrs	r3, r3, #8
 801441c:	b29b      	uxth	r3, r3
 801441e:	b2da      	uxtb	r2, r3
 8014420:	69bb      	ldr	r3, [r7, #24]
 8014422:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8014424:	69ba      	ldr	r2, [r7, #24]
 8014426:	f248 0364 	movw	r3, #32868	; 0x8064
 801442a:	4413      	add	r3, r2
 801442c:	881b      	ldrh	r3, [r3, #0]
 801442e:	b2da      	uxtb	r2, r3
 8014430:	69bb      	ldr	r3, [r7, #24]
 8014432:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	330a      	adds	r3, #10
 8014438:	781b      	ldrb	r3, [r3, #0]
 801443a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	330b      	adds	r3, #11
 8014440:	781b      	ldrb	r3, [r3, #0]
 8014442:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014444:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	330c      	adds	r3, #12
 801444a:	781b      	ldrb	r3, [r3, #0]
 801444c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 801444e:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8014450:	687a      	ldr	r2, [r7, #4]
 8014452:	320d      	adds	r2, #13
 8014454:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8014456:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014458:	69bb      	ldr	r3, [r7, #24]
 801445a:	60da      	str	r2, [r3, #12]

  return 0;
 801445c:	2300      	movs	r3, #0
}
 801445e:	4618      	mov	r0, r3
 8014460:	3724      	adds	r7, #36	; 0x24
 8014462:	46bd      	mov	sp, r7
 8014464:	bd90      	pop	{r4, r7, pc}

08014466 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014466:	b580      	push	{r7, lr}
 8014468:	b088      	sub	sp, #32
 801446a:	af00      	add	r7, sp, #0
 801446c:	60f8      	str	r0, [r7, #12]
 801446e:	460b      	mov	r3, r1
 8014470:	607a      	str	r2, [r7, #4]
 8014472:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014474:	68fb      	ldr	r3, [r7, #12]
 8014476:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801447a:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014482:	685b      	ldr	r3, [r3, #4]
 8014484:	f107 0214 	add.w	r2, r7, #20
 8014488:	f107 0110 	add.w	r1, r7, #16
 801448c:	7af8      	ldrb	r0, [r7, #11]
 801448e:	4798      	blx	r3
 8014490:	4603      	mov	r3, r0
 8014492:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8014494:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014498:	2b00      	cmp	r3, #0
 801449a:	d106      	bne.n	80144aa <SCSI_ReadFormatCapacity+0x44>
 801449c:	69ba      	ldr	r2, [r7, #24]
 801449e:	f248 0362 	movw	r3, #32866	; 0x8062
 80144a2:	4413      	add	r3, r2
 80144a4:	781b      	ldrb	r3, [r3, #0]
 80144a6:	2b02      	cmp	r3, #2
 80144a8:	d108      	bne.n	80144bc <SCSI_ReadFormatCapacity+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80144aa:	7af9      	ldrb	r1, [r7, #11]
 80144ac:	233a      	movs	r3, #58	; 0x3a
 80144ae:	2202      	movs	r2, #2
 80144b0:	68f8      	ldr	r0, [r7, #12]
 80144b2:	f000 f92b 	bl	801470c <SCSI_SenseCode>
    return -1;
 80144b6:	f04f 33ff 	mov.w	r3, #4294967295
 80144ba:	e03e      	b.n	801453a <SCSI_ReadFormatCapacity+0xd4>
  }

  for (i = 0U; i < 12U ; i++)
 80144bc:	2300      	movs	r3, #0
 80144be:	83fb      	strh	r3, [r7, #30]
 80144c0:	e007      	b.n	80144d2 <SCSI_ReadFormatCapacity+0x6c>
  {
    hmsc->bot_data[i] = 0U;
 80144c2:	8bfb      	ldrh	r3, [r7, #30]
 80144c4:	69ba      	ldr	r2, [r7, #24]
 80144c6:	4413      	add	r3, r2
 80144c8:	2200      	movs	r2, #0
 80144ca:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 80144cc:	8bfb      	ldrh	r3, [r7, #30]
 80144ce:	3301      	adds	r3, #1
 80144d0:	83fb      	strh	r3, [r7, #30]
 80144d2:	8bfb      	ldrh	r3, [r7, #30]
 80144d4:	2b0b      	cmp	r3, #11
 80144d6:	d9f4      	bls.n	80144c2 <SCSI_ReadFormatCapacity+0x5c>
  }

  hmsc->bot_data[3] = 0x08U;
 80144d8:	69bb      	ldr	r3, [r7, #24]
 80144da:	2208      	movs	r2, #8
 80144dc:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80144de:	693b      	ldr	r3, [r7, #16]
 80144e0:	3b01      	subs	r3, #1
 80144e2:	0e1b      	lsrs	r3, r3, #24
 80144e4:	b2da      	uxtb	r2, r3
 80144e6:	69bb      	ldr	r3, [r7, #24]
 80144e8:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80144ea:	693b      	ldr	r3, [r7, #16]
 80144ec:	3b01      	subs	r3, #1
 80144ee:	0c1b      	lsrs	r3, r3, #16
 80144f0:	b2da      	uxtb	r2, r3
 80144f2:	69bb      	ldr	r3, [r7, #24]
 80144f4:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80144f6:	693b      	ldr	r3, [r7, #16]
 80144f8:	3b01      	subs	r3, #1
 80144fa:	0a1b      	lsrs	r3, r3, #8
 80144fc:	b2da      	uxtb	r2, r3
 80144fe:	69bb      	ldr	r3, [r7, #24]
 8014500:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8014502:	693b      	ldr	r3, [r7, #16]
 8014504:	b2db      	uxtb	r3, r3
 8014506:	3b01      	subs	r3, #1
 8014508:	b2da      	uxtb	r2, r3
 801450a:	69bb      	ldr	r3, [r7, #24]
 801450c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 801450e:	69bb      	ldr	r3, [r7, #24]
 8014510:	2202      	movs	r2, #2
 8014512:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8014514:	8abb      	ldrh	r3, [r7, #20]
 8014516:	141b      	asrs	r3, r3, #16
 8014518:	b2da      	uxtb	r2, r3
 801451a:	69bb      	ldr	r3, [r7, #24]
 801451c:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 801451e:	8abb      	ldrh	r3, [r7, #20]
 8014520:	0a1b      	lsrs	r3, r3, #8
 8014522:	b29b      	uxth	r3, r3
 8014524:	b2da      	uxtb	r2, r3
 8014526:	69bb      	ldr	r3, [r7, #24]
 8014528:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 801452a:	8abb      	ldrh	r3, [r7, #20]
 801452c:	b2da      	uxtb	r2, r3
 801452e:	69bb      	ldr	r3, [r7, #24]
 8014530:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8014532:	69bb      	ldr	r3, [r7, #24]
 8014534:	220c      	movs	r2, #12
 8014536:	60da      	str	r2, [r3, #12]

  return 0;
 8014538:	2300      	movs	r3, #0
}
 801453a:	4618      	mov	r0, r3
 801453c:	3720      	adds	r7, #32
 801453e:	46bd      	mov	sp, r7
 8014540:	bd80      	pop	{r7, pc}
	...

08014544 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014544:	b580      	push	{r7, lr}
 8014546:	b086      	sub	sp, #24
 8014548:	af00      	add	r7, sp, #0
 801454a:	60f8      	str	r0, [r7, #12]
 801454c:	460b      	mov	r3, r1
 801454e:	607a      	str	r2, [r7, #4]
 8014550:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014558:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 801455a:	2317      	movs	r3, #23
 801455c:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	3304      	adds	r3, #4
 8014562:	781b      	ldrb	r3, [r3, #0]
 8014564:	b29b      	uxth	r3, r3
 8014566:	8afa      	ldrh	r2, [r7, #22]
 8014568:	429a      	cmp	r2, r3
 801456a:	d303      	bcc.n	8014574 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	3304      	adds	r3, #4
 8014570:	781b      	ldrb	r3, [r3, #0]
 8014572:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8014574:	8afb      	ldrh	r3, [r7, #22]
 8014576:	461a      	mov	r2, r3
 8014578:	4904      	ldr	r1, [pc, #16]	; (801458c <SCSI_ModeSense6+0x48>)
 801457a:	6938      	ldr	r0, [r7, #16]
 801457c:	f000 fe54 	bl	8015228 <SCSI_UpdateBotData>

  return 0;
 8014580:	2300      	movs	r3, #0
}
 8014582:	4618      	mov	r0, r3
 8014584:	3718      	adds	r7, #24
 8014586:	46bd      	mov	sp, r7
 8014588:	bd80      	pop	{r7, pc}
 801458a:	bf00      	nop
 801458c:	240000d4 	.word	0x240000d4

08014590 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014590:	b580      	push	{r7, lr}
 8014592:	b086      	sub	sp, #24
 8014594:	af00      	add	r7, sp, #0
 8014596:	60f8      	str	r0, [r7, #12]
 8014598:	460b      	mov	r3, r1
 801459a:	607a      	str	r2, [r7, #4]
 801459c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80145a4:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 80145a6:	231b      	movs	r3, #27
 80145a8:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	3308      	adds	r3, #8
 80145ae:	781b      	ldrb	r3, [r3, #0]
 80145b0:	b29b      	uxth	r3, r3
 80145b2:	8afa      	ldrh	r2, [r7, #22]
 80145b4:	429a      	cmp	r2, r3
 80145b6:	d303      	bcc.n	80145c0 <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	3308      	adds	r3, #8
 80145bc:	781b      	ldrb	r3, [r3, #0]
 80145be:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80145c0:	8afb      	ldrh	r3, [r7, #22]
 80145c2:	461a      	mov	r2, r3
 80145c4:	4904      	ldr	r1, [pc, #16]	; (80145d8 <SCSI_ModeSense10+0x48>)
 80145c6:	6938      	ldr	r0, [r7, #16]
 80145c8:	f000 fe2e 	bl	8015228 <SCSI_UpdateBotData>

  return 0;
 80145cc:	2300      	movs	r3, #0
}
 80145ce:	4618      	mov	r0, r3
 80145d0:	3718      	adds	r7, #24
 80145d2:	46bd      	mov	sp, r7
 80145d4:	bd80      	pop	{r7, pc}
 80145d6:	bf00      	nop
 80145d8:	240000ec 	.word	0x240000ec

080145dc <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80145dc:	b580      	push	{r7, lr}
 80145de:	b086      	sub	sp, #24
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	60f8      	str	r0, [r7, #12]
 80145e4:	460b      	mov	r3, r1
 80145e6:	607a      	str	r2, [r7, #4]
 80145e8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80145f0:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 80145f2:	693a      	ldr	r2, [r7, #16]
 80145f4:	f248 0318 	movw	r3, #32792	; 0x8018
 80145f8:	4413      	add	r3, r2
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d10c      	bne.n	801461a <SCSI_RequestSense+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014600:	693a      	ldr	r2, [r7, #16]
 8014602:	f248 031d 	movw	r3, #32797	; 0x801d
 8014606:	4413      	add	r3, r2
 8014608:	7819      	ldrb	r1, [r3, #0]
 801460a:	2320      	movs	r3, #32
 801460c:	2205      	movs	r2, #5
 801460e:	68f8      	ldr	r0, [r7, #12]
 8014610:	f000 f87c 	bl	801470c <SCSI_SenseCode>
    return -1;
 8014614:	f04f 33ff 	mov.w	r3, #4294967295
 8014618:	e074      	b.n	8014704 <SCSI_RequestSense+0x128>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801461a:	2300      	movs	r3, #0
 801461c:	75fb      	strb	r3, [r7, #23]
 801461e:	e007      	b.n	8014630 <SCSI_RequestSense+0x54>
  {
    hmsc->bot_data[i] = 0U;
 8014620:	7dfb      	ldrb	r3, [r7, #23]
 8014622:	693a      	ldr	r2, [r7, #16]
 8014624:	4413      	add	r3, r2
 8014626:	2200      	movs	r2, #0
 8014628:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801462a:	7dfb      	ldrb	r3, [r7, #23]
 801462c:	3301      	adds	r3, #1
 801462e:	75fb      	strb	r3, [r7, #23]
 8014630:	7dfb      	ldrb	r3, [r7, #23]
 8014632:	2b11      	cmp	r3, #17
 8014634:	d9f4      	bls.n	8014620 <SCSI_RequestSense+0x44>
  }

  hmsc->bot_data[0] = 0x70U;
 8014636:	693b      	ldr	r3, [r7, #16]
 8014638:	2270      	movs	r2, #112	; 0x70
 801463a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 801463c:	693b      	ldr	r3, [r7, #16]
 801463e:	220c      	movs	r2, #12
 8014640:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8014642:	693a      	ldr	r2, [r7, #16]
 8014644:	f248 0360 	movw	r3, #32864	; 0x8060
 8014648:	4413      	add	r3, r2
 801464a:	781a      	ldrb	r2, [r3, #0]
 801464c:	6939      	ldr	r1, [r7, #16]
 801464e:	f248 0361 	movw	r3, #32865	; 0x8061
 8014652:	440b      	add	r3, r1
 8014654:	781b      	ldrb	r3, [r3, #0]
 8014656:	429a      	cmp	r2, r3
 8014658:	d045      	beq.n	80146e6 <SCSI_RequestSense+0x10a>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 801465a:	693a      	ldr	r2, [r7, #16]
 801465c:	f248 0360 	movw	r3, #32864	; 0x8060
 8014660:	4413      	add	r3, r2
 8014662:	781b      	ldrb	r3, [r3, #0]
 8014664:	4619      	mov	r1, r3
 8014666:	693a      	ldr	r2, [r7, #16]
 8014668:	f241 0308 	movw	r3, #4104	; 0x1008
 801466c:	440b      	add	r3, r1
 801466e:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8014672:	693b      	ldr	r3, [r7, #16]
 8014674:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8014676:	693a      	ldr	r2, [r7, #16]
 8014678:	f248 0360 	movw	r3, #32864	; 0x8060
 801467c:	4413      	add	r3, r2
 801467e:	781b      	ldrb	r3, [r3, #0]
 8014680:	4619      	mov	r1, r3
 8014682:	693a      	ldr	r2, [r7, #16]
 8014684:	f241 0308 	movw	r3, #4104	; 0x1008
 8014688:	440b      	add	r3, r1
 801468a:	00db      	lsls	r3, r3, #3
 801468c:	4413      	add	r3, r2
 801468e:	791a      	ldrb	r2, [r3, #4]
 8014690:	693b      	ldr	r3, [r7, #16]
 8014692:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8014694:	693a      	ldr	r2, [r7, #16]
 8014696:	f248 0360 	movw	r3, #32864	; 0x8060
 801469a:	4413      	add	r3, r2
 801469c:	781b      	ldrb	r3, [r3, #0]
 801469e:	4619      	mov	r1, r3
 80146a0:	693a      	ldr	r2, [r7, #16]
 80146a2:	f241 0308 	movw	r3, #4104	; 0x1008
 80146a6:	440b      	add	r3, r1
 80146a8:	00db      	lsls	r3, r3, #3
 80146aa:	4413      	add	r3, r2
 80146ac:	795a      	ldrb	r2, [r3, #5]
 80146ae:	693b      	ldr	r3, [r7, #16]
 80146b0:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80146b2:	693a      	ldr	r2, [r7, #16]
 80146b4:	f248 0360 	movw	r3, #32864	; 0x8060
 80146b8:	4413      	add	r3, r2
 80146ba:	781b      	ldrb	r3, [r3, #0]
 80146bc:	3301      	adds	r3, #1
 80146be:	b2d9      	uxtb	r1, r3
 80146c0:	693a      	ldr	r2, [r7, #16]
 80146c2:	f248 0360 	movw	r3, #32864	; 0x8060
 80146c6:	4413      	add	r3, r2
 80146c8:	460a      	mov	r2, r1
 80146ca:	701a      	strb	r2, [r3, #0]

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80146cc:	693a      	ldr	r2, [r7, #16]
 80146ce:	f248 0360 	movw	r3, #32864	; 0x8060
 80146d2:	4413      	add	r3, r2
 80146d4:	781b      	ldrb	r3, [r3, #0]
 80146d6:	2b04      	cmp	r3, #4
 80146d8:	d105      	bne.n	80146e6 <SCSI_RequestSense+0x10a>
    {
      hmsc->scsi_sense_head = 0U;
 80146da:	693a      	ldr	r2, [r7, #16]
 80146dc:	f248 0360 	movw	r3, #32864	; 0x8060
 80146e0:	4413      	add	r3, r2
 80146e2:	2200      	movs	r2, #0
 80146e4:	701a      	strb	r2, [r3, #0]
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80146e6:	693b      	ldr	r3, [r7, #16]
 80146e8:	2212      	movs	r2, #18
 80146ea:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	3304      	adds	r3, #4
 80146f0:	781b      	ldrb	r3, [r3, #0]
 80146f2:	2b12      	cmp	r3, #18
 80146f4:	d805      	bhi.n	8014702 <SCSI_RequestSense+0x126>
  {
    hmsc->bot_data_length = params[4];
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	3304      	adds	r3, #4
 80146fa:	781b      	ldrb	r3, [r3, #0]
 80146fc:	461a      	mov	r2, r3
 80146fe:	693b      	ldr	r3, [r7, #16]
 8014700:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8014702:	2300      	movs	r3, #0
}
 8014704:	4618      	mov	r0, r3
 8014706:	3718      	adds	r7, #24
 8014708:	46bd      	mov	sp, r7
 801470a:	bd80      	pop	{r7, pc}

0801470c <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 801470c:	b480      	push	{r7}
 801470e:	b085      	sub	sp, #20
 8014710:	af00      	add	r7, sp, #0
 8014712:	6078      	str	r0, [r7, #4]
 8014714:	4608      	mov	r0, r1
 8014716:	4611      	mov	r1, r2
 8014718:	461a      	mov	r2, r3
 801471a:	4603      	mov	r3, r0
 801471c:	70fb      	strb	r3, [r7, #3]
 801471e:	460b      	mov	r3, r1
 8014720:	70bb      	strb	r3, [r7, #2]
 8014722:	4613      	mov	r3, r2
 8014724:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801472c:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 801472e:	68fa      	ldr	r2, [r7, #12]
 8014730:	f248 0361 	movw	r3, #32865	; 0x8061
 8014734:	4413      	add	r3, r2
 8014736:	781b      	ldrb	r3, [r3, #0]
 8014738:	4619      	mov	r1, r3
 801473a:	68fa      	ldr	r2, [r7, #12]
 801473c:	f241 0308 	movw	r3, #4104	; 0x1008
 8014740:	440b      	add	r3, r1
 8014742:	78b9      	ldrb	r1, [r7, #2]
 8014744:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8014748:	68fa      	ldr	r2, [r7, #12]
 801474a:	f248 0361 	movw	r3, #32865	; 0x8061
 801474e:	4413      	add	r3, r2
 8014750:	781b      	ldrb	r3, [r3, #0]
 8014752:	4619      	mov	r1, r3
 8014754:	68fa      	ldr	r2, [r7, #12]
 8014756:	f241 0308 	movw	r3, #4104	; 0x1008
 801475a:	440b      	add	r3, r1
 801475c:	00db      	lsls	r3, r3, #3
 801475e:	4413      	add	r3, r2
 8014760:	787a      	ldrb	r2, [r7, #1]
 8014762:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8014764:	68fa      	ldr	r2, [r7, #12]
 8014766:	f248 0361 	movw	r3, #32865	; 0x8061
 801476a:	4413      	add	r3, r2
 801476c:	781b      	ldrb	r3, [r3, #0]
 801476e:	4619      	mov	r1, r3
 8014770:	68fa      	ldr	r2, [r7, #12]
 8014772:	f241 0308 	movw	r3, #4104	; 0x1008
 8014776:	440b      	add	r3, r1
 8014778:	00db      	lsls	r3, r3, #3
 801477a:	4413      	add	r3, r2
 801477c:	2200      	movs	r2, #0
 801477e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8014780:	68fa      	ldr	r2, [r7, #12]
 8014782:	f248 0361 	movw	r3, #32865	; 0x8061
 8014786:	4413      	add	r3, r2
 8014788:	781b      	ldrb	r3, [r3, #0]
 801478a:	3301      	adds	r3, #1
 801478c:	b2d9      	uxtb	r1, r3
 801478e:	68fa      	ldr	r2, [r7, #12]
 8014790:	f248 0361 	movw	r3, #32865	; 0x8061
 8014794:	4413      	add	r3, r2
 8014796:	460a      	mov	r2, r1
 8014798:	701a      	strb	r2, [r3, #0]

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 801479a:	68fa      	ldr	r2, [r7, #12]
 801479c:	f248 0361 	movw	r3, #32865	; 0x8061
 80147a0:	4413      	add	r3, r2
 80147a2:	781b      	ldrb	r3, [r3, #0]
 80147a4:	2b04      	cmp	r3, #4
 80147a6:	d105      	bne.n	80147b4 <SCSI_SenseCode+0xa8>
  {
    hmsc->scsi_sense_tail = 0U;
 80147a8:	68fa      	ldr	r2, [r7, #12]
 80147aa:	f248 0361 	movw	r3, #32865	; 0x8061
 80147ae:	4413      	add	r3, r2
 80147b0:	2200      	movs	r2, #0
 80147b2:	701a      	strb	r2, [r3, #0]
  }
}
 80147b4:	bf00      	nop
 80147b6:	3714      	adds	r7, #20
 80147b8:	46bd      	mov	sp, r7
 80147ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147be:	4770      	bx	lr

080147c0 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80147c0:	b580      	push	{r7, lr}
 80147c2:	b086      	sub	sp, #24
 80147c4:	af00      	add	r7, sp, #0
 80147c6:	60f8      	str	r0, [r7, #12]
 80147c8:	460b      	mov	r3, r1
 80147ca:	607a      	str	r2, [r7, #4]
 80147cc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80147d4:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80147d6:	697a      	ldr	r2, [r7, #20]
 80147d8:	f248 0362 	movw	r3, #32866	; 0x8062
 80147dc:	4413      	add	r3, r2
 80147de:	781b      	ldrb	r3, [r3, #0]
 80147e0:	2b01      	cmp	r3, #1
 80147e2:	d10f      	bne.n	8014804 <SCSI_StartStopUnit+0x44>
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	3304      	adds	r3, #4
 80147e8:	781b      	ldrb	r3, [r3, #0]
 80147ea:	f003 0303 	and.w	r3, r3, #3
 80147ee:	2b02      	cmp	r3, #2
 80147f0:	d108      	bne.n	8014804 <SCSI_StartStopUnit+0x44>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80147f2:	7af9      	ldrb	r1, [r7, #11]
 80147f4:	2324      	movs	r3, #36	; 0x24
 80147f6:	2205      	movs	r2, #5
 80147f8:	68f8      	ldr	r0, [r7, #12]
 80147fa:	f7ff ff87 	bl	801470c <SCSI_SenseCode>

    return -1;
 80147fe:	f04f 33ff 	mov.w	r3, #4294967295
 8014802:	e02c      	b.n	801485e <SCSI_StartStopUnit+0x9e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	3304      	adds	r3, #4
 8014808:	781b      	ldrb	r3, [r3, #0]
 801480a:	f003 0303 	and.w	r3, r3, #3
 801480e:	2b01      	cmp	r3, #1
 8014810:	d106      	bne.n	8014820 <SCSI_StartStopUnit+0x60>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8014812:	697a      	ldr	r2, [r7, #20]
 8014814:	f248 0362 	movw	r3, #32866	; 0x8062
 8014818:	4413      	add	r3, r2
 801481a:	2200      	movs	r2, #0
 801481c:	701a      	strb	r2, [r3, #0]
 801481e:	e01a      	b.n	8014856 <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	3304      	adds	r3, #4
 8014824:	781b      	ldrb	r3, [r3, #0]
 8014826:	f003 0303 	and.w	r3, r3, #3
 801482a:	2b02      	cmp	r3, #2
 801482c:	d106      	bne.n	801483c <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 801482e:	697a      	ldr	r2, [r7, #20]
 8014830:	f248 0362 	movw	r3, #32866	; 0x8062
 8014834:	4413      	add	r3, r2
 8014836:	2202      	movs	r2, #2
 8014838:	701a      	strb	r2, [r3, #0]
 801483a:	e00c      	b.n	8014856 <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	3304      	adds	r3, #4
 8014840:	781b      	ldrb	r3, [r3, #0]
 8014842:	f003 0303 	and.w	r3, r3, #3
 8014846:	2b03      	cmp	r3, #3
 8014848:	d105      	bne.n	8014856 <SCSI_StartStopUnit+0x96>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801484a:	697a      	ldr	r2, [r7, #20]
 801484c:	f248 0362 	movw	r3, #32866	; 0x8062
 8014850:	4413      	add	r3, r2
 8014852:	2200      	movs	r2, #0
 8014854:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8014856:	697b      	ldr	r3, [r7, #20]
 8014858:	2200      	movs	r2, #0
 801485a:	60da      	str	r2, [r3, #12]

  return 0;
 801485c:	2300      	movs	r3, #0
}
 801485e:	4618      	mov	r0, r3
 8014860:	3718      	adds	r7, #24
 8014862:	46bd      	mov	sp, r7
 8014864:	bd80      	pop	{r7, pc}

08014866 <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014866:	b480      	push	{r7}
 8014868:	b087      	sub	sp, #28
 801486a:	af00      	add	r7, sp, #0
 801486c:	60f8      	str	r0, [r7, #12]
 801486e:	460b      	mov	r3, r1
 8014870:	607a      	str	r2, [r7, #4]
 8014872:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801487a:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	3304      	adds	r3, #4
 8014880:	781b      	ldrb	r3, [r3, #0]
 8014882:	2b00      	cmp	r3, #0
 8014884:	d106      	bne.n	8014894 <SCSI_AllowPreventRemovable+0x2e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8014886:	697a      	ldr	r2, [r7, #20]
 8014888:	f248 0362 	movw	r3, #32866	; 0x8062
 801488c:	4413      	add	r3, r2
 801488e:	2200      	movs	r2, #0
 8014890:	701a      	strb	r2, [r3, #0]
 8014892:	e005      	b.n	80148a0 <SCSI_AllowPreventRemovable+0x3a>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8014894:	697a      	ldr	r2, [r7, #20]
 8014896:	f248 0362 	movw	r3, #32866	; 0x8062
 801489a:	4413      	add	r3, r2
 801489c:	2201      	movs	r2, #1
 801489e:	701a      	strb	r2, [r3, #0]
  }

  hmsc->bot_data_length = 0U;
 80148a0:	697b      	ldr	r3, [r7, #20]
 80148a2:	2200      	movs	r2, #0
 80148a4:	60da      	str	r2, [r3, #12]

  return 0;
 80148a6:	2300      	movs	r3, #0
}
 80148a8:	4618      	mov	r0, r3
 80148aa:	371c      	adds	r7, #28
 80148ac:	46bd      	mov	sp, r7
 80148ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148b2:	4770      	bx	lr

080148b4 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80148b4:	b580      	push	{r7, lr}
 80148b6:	b086      	sub	sp, #24
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	60f8      	str	r0, [r7, #12]
 80148bc:	460b      	mov	r3, r1
 80148be:	607a      	str	r2, [r7, #4]
 80148c0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80148c8:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80148ca:	697b      	ldr	r3, [r7, #20]
 80148cc:	7a1b      	ldrb	r3, [r3, #8]
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	f040 8094 	bne.w	80149fc <SCSI_Read10+0x148>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80148d4:	697a      	ldr	r2, [r7, #20]
 80148d6:	f248 031c 	movw	r3, #32796	; 0x801c
 80148da:	4413      	add	r3, r2
 80148dc:	781b      	ldrb	r3, [r3, #0]
 80148de:	b25b      	sxtb	r3, r3
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	db0c      	blt.n	80148fe <SCSI_Read10+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80148e4:	697a      	ldr	r2, [r7, #20]
 80148e6:	f248 031d 	movw	r3, #32797	; 0x801d
 80148ea:	4413      	add	r3, r2
 80148ec:	7819      	ldrb	r1, [r3, #0]
 80148ee:	2320      	movs	r3, #32
 80148f0:	2205      	movs	r2, #5
 80148f2:	68f8      	ldr	r0, [r7, #12]
 80148f4:	f7ff ff0a 	bl	801470c <SCSI_SenseCode>
      return -1;
 80148f8:	f04f 33ff 	mov.w	r3, #4294967295
 80148fc:	e088      	b.n	8014a10 <SCSI_Read10+0x15c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80148fe:	697a      	ldr	r2, [r7, #20]
 8014900:	f248 0362 	movw	r3, #32866	; 0x8062
 8014904:	4413      	add	r3, r2
 8014906:	781b      	ldrb	r3, [r3, #0]
 8014908:	2b02      	cmp	r3, #2
 801490a:	d108      	bne.n	801491e <SCSI_Read10+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801490c:	7af9      	ldrb	r1, [r7, #11]
 801490e:	233a      	movs	r3, #58	; 0x3a
 8014910:	2202      	movs	r2, #2
 8014912:	68f8      	ldr	r0, [r7, #12]
 8014914:	f7ff fefa 	bl	801470c <SCSI_SenseCode>

      return -1;
 8014918:	f04f 33ff 	mov.w	r3, #4294967295
 801491c:	e078      	b.n	8014a10 <SCSI_Read10+0x15c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014924:	689b      	ldr	r3, [r3, #8]
 8014926:	7afa      	ldrb	r2, [r7, #11]
 8014928:	4610      	mov	r0, r2
 801492a:	4798      	blx	r3
 801492c:	4603      	mov	r3, r0
 801492e:	2b00      	cmp	r3, #0
 8014930:	d008      	beq.n	8014944 <SCSI_Read10+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014932:	7af9      	ldrb	r1, [r7, #11]
 8014934:	233a      	movs	r3, #58	; 0x3a
 8014936:	2202      	movs	r2, #2
 8014938:	68f8      	ldr	r0, [r7, #12]
 801493a:	f7ff fee7 	bl	801470c <SCSI_SenseCode>
      return -1;
 801493e:	f04f 33ff 	mov.w	r3, #4294967295
 8014942:	e065      	b.n	8014a10 <SCSI_Read10+0x15c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	3302      	adds	r3, #2
 8014948:	781b      	ldrb	r3, [r3, #0]
 801494a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	3303      	adds	r3, #3
 8014950:	781b      	ldrb	r3, [r3, #0]
 8014952:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014954:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	3304      	adds	r3, #4
 801495a:	781b      	ldrb	r3, [r3, #0]
 801495c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801495e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014960:	687a      	ldr	r2, [r7, #4]
 8014962:	3205      	adds	r2, #5
 8014964:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8014966:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014968:	6979      	ldr	r1, [r7, #20]
 801496a:	f248 036c 	movw	r3, #32876	; 0x806c
 801496e:	440b      	add	r3, r1
 8014970:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	3307      	adds	r3, #7
 8014976:	781b      	ldrb	r3, [r3, #0]
 8014978:	021b      	lsls	r3, r3, #8
 801497a:	687a      	ldr	r2, [r7, #4]
 801497c:	3208      	adds	r2, #8
 801497e:	7812      	ldrb	r2, [r2, #0]
 8014980:	431a      	orrs	r2, r3
 8014982:	6979      	ldr	r1, [r7, #20]
 8014984:	f248 0370 	movw	r3, #32880	; 0x8070
 8014988:	440b      	add	r3, r1
 801498a:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801498c:	697a      	ldr	r2, [r7, #20]
 801498e:	f248 036c 	movw	r3, #32876	; 0x806c
 8014992:	4413      	add	r3, r2
 8014994:	6818      	ldr	r0, [r3, #0]
 8014996:	697a      	ldr	r2, [r7, #20]
 8014998:	f248 0370 	movw	r3, #32880	; 0x8070
 801499c:	4413      	add	r3, r2
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	7af9      	ldrb	r1, [r7, #11]
 80149a2:	4602      	mov	r2, r0
 80149a4:	68f8      	ldr	r0, [r7, #12]
 80149a6:	f000 faeb 	bl	8014f80 <SCSI_CheckAddressRange>
 80149aa:	4603      	mov	r3, r0
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	da02      	bge.n	80149b6 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80149b0:	f04f 33ff 	mov.w	r3, #4294967295
 80149b4:	e02c      	b.n	8014a10 <SCSI_Read10+0x15c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80149b6:	697a      	ldr	r2, [r7, #20]
 80149b8:	f248 0318 	movw	r3, #32792	; 0x8018
 80149bc:	4413      	add	r3, r2
 80149be:	681a      	ldr	r2, [r3, #0]
 80149c0:	6979      	ldr	r1, [r7, #20]
 80149c2:	f248 0370 	movw	r3, #32880	; 0x8070
 80149c6:	440b      	add	r3, r1
 80149c8:	6819      	ldr	r1, [r3, #0]
 80149ca:	6978      	ldr	r0, [r7, #20]
 80149cc:	f248 0364 	movw	r3, #32868	; 0x8064
 80149d0:	4403      	add	r3, r0
 80149d2:	881b      	ldrh	r3, [r3, #0]
 80149d4:	fb03 f301 	mul.w	r3, r3, r1
 80149d8:	429a      	cmp	r2, r3
 80149da:	d00c      	beq.n	80149f6 <SCSI_Read10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80149dc:	697a      	ldr	r2, [r7, #20]
 80149de:	f248 031d 	movw	r3, #32797	; 0x801d
 80149e2:	4413      	add	r3, r2
 80149e4:	7819      	ldrb	r1, [r3, #0]
 80149e6:	2320      	movs	r3, #32
 80149e8:	2205      	movs	r2, #5
 80149ea:	68f8      	ldr	r0, [r7, #12]
 80149ec:	f7ff fe8e 	bl	801470c <SCSI_SenseCode>
      return -1;
 80149f0:	f04f 33ff 	mov.w	r3, #4294967295
 80149f4:	e00c      	b.n	8014a10 <SCSI_Read10+0x15c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80149f6:	697b      	ldr	r3, [r7, #20]
 80149f8:	2202      	movs	r2, #2
 80149fa:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80149fc:	697b      	ldr	r3, [r7, #20]
 80149fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8014a02:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8014a04:	7afb      	ldrb	r3, [r7, #11]
 8014a06:	4619      	mov	r1, r3
 8014a08:	68f8      	ldr	r0, [r7, #12]
 8014a0a:	f000 fadd 	bl	8014fc8 <SCSI_ProcessRead>
 8014a0e:	4603      	mov	r3, r0
}
 8014a10:	4618      	mov	r0, r3
 8014a12:	3718      	adds	r7, #24
 8014a14:	46bd      	mov	sp, r7
 8014a16:	bd80      	pop	{r7, pc}

08014a18 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014a18:	b580      	push	{r7, lr}
 8014a1a:	b086      	sub	sp, #24
 8014a1c:	af00      	add	r7, sp, #0
 8014a1e:	60f8      	str	r0, [r7, #12]
 8014a20:	460b      	mov	r3, r1
 8014a22:	607a      	str	r2, [r7, #4]
 8014a24:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014a2c:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014a2e:	697b      	ldr	r3, [r7, #20]
 8014a30:	7a1b      	ldrb	r3, [r3, #8]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	f040 809e 	bne.w	8014b74 <SCSI_Read12+0x15c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8014a38:	697a      	ldr	r2, [r7, #20]
 8014a3a:	f248 031c 	movw	r3, #32796	; 0x801c
 8014a3e:	4413      	add	r3, r2
 8014a40:	781b      	ldrb	r3, [r3, #0]
 8014a42:	b25b      	sxtb	r3, r3
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	db0c      	blt.n	8014a62 <SCSI_Read12+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014a48:	697a      	ldr	r2, [r7, #20]
 8014a4a:	f248 031d 	movw	r3, #32797	; 0x801d
 8014a4e:	4413      	add	r3, r2
 8014a50:	7819      	ldrb	r1, [r3, #0]
 8014a52:	2320      	movs	r3, #32
 8014a54:	2205      	movs	r2, #5
 8014a56:	68f8      	ldr	r0, [r7, #12]
 8014a58:	f7ff fe58 	bl	801470c <SCSI_SenseCode>
      return -1;
 8014a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8014a60:	e092      	b.n	8014b88 <SCSI_Read12+0x170>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8014a62:	697a      	ldr	r2, [r7, #20]
 8014a64:	f248 0362 	movw	r3, #32866	; 0x8062
 8014a68:	4413      	add	r3, r2
 8014a6a:	781b      	ldrb	r3, [r3, #0]
 8014a6c:	2b02      	cmp	r3, #2
 8014a6e:	d108      	bne.n	8014a82 <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014a70:	7af9      	ldrb	r1, [r7, #11]
 8014a72:	233a      	movs	r3, #58	; 0x3a
 8014a74:	2202      	movs	r2, #2
 8014a76:	68f8      	ldr	r0, [r7, #12]
 8014a78:	f7ff fe48 	bl	801470c <SCSI_SenseCode>
      return -1;
 8014a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8014a80:	e082      	b.n	8014b88 <SCSI_Read12+0x170>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014a88:	689b      	ldr	r3, [r3, #8]
 8014a8a:	7afa      	ldrb	r2, [r7, #11]
 8014a8c:	4610      	mov	r0, r2
 8014a8e:	4798      	blx	r3
 8014a90:	4603      	mov	r3, r0
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d008      	beq.n	8014aa8 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014a96:	7af9      	ldrb	r1, [r7, #11]
 8014a98:	233a      	movs	r3, #58	; 0x3a
 8014a9a:	2202      	movs	r2, #2
 8014a9c:	68f8      	ldr	r0, [r7, #12]
 8014a9e:	f7ff fe35 	bl	801470c <SCSI_SenseCode>
      return -1;
 8014aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8014aa6:	e06f      	b.n	8014b88 <SCSI_Read12+0x170>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	3302      	adds	r3, #2
 8014aac:	781b      	ldrb	r3, [r3, #0]
 8014aae:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	3303      	adds	r3, #3
 8014ab4:	781b      	ldrb	r3, [r3, #0]
 8014ab6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014ab8:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	3304      	adds	r3, #4
 8014abe:	781b      	ldrb	r3, [r3, #0]
 8014ac0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014ac2:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014ac4:	687a      	ldr	r2, [r7, #4]
 8014ac6:	3205      	adds	r2, #5
 8014ac8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8014aca:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014acc:	6979      	ldr	r1, [r7, #20]
 8014ace:	f248 036c 	movw	r3, #32876	; 0x806c
 8014ad2:	440b      	add	r3, r1
 8014ad4:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	3306      	adds	r3, #6
 8014ada:	781b      	ldrb	r3, [r3, #0]
 8014adc:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	3307      	adds	r3, #7
 8014ae2:	781b      	ldrb	r3, [r3, #0]
 8014ae4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014ae6:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	3308      	adds	r3, #8
 8014aec:	781b      	ldrb	r3, [r3, #0]
 8014aee:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8014af0:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8014af2:	687a      	ldr	r2, [r7, #4]
 8014af4:	3209      	adds	r2, #9
 8014af6:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8014af8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014afa:	6979      	ldr	r1, [r7, #20]
 8014afc:	f248 0370 	movw	r3, #32880	; 0x8070
 8014b00:	440b      	add	r3, r1
 8014b02:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014b04:	697a      	ldr	r2, [r7, #20]
 8014b06:	f248 036c 	movw	r3, #32876	; 0x806c
 8014b0a:	4413      	add	r3, r2
 8014b0c:	6818      	ldr	r0, [r3, #0]
 8014b0e:	697a      	ldr	r2, [r7, #20]
 8014b10:	f248 0370 	movw	r3, #32880	; 0x8070
 8014b14:	4413      	add	r3, r2
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	7af9      	ldrb	r1, [r7, #11]
 8014b1a:	4602      	mov	r2, r0
 8014b1c:	68f8      	ldr	r0, [r7, #12]
 8014b1e:	f000 fa2f 	bl	8014f80 <SCSI_CheckAddressRange>
 8014b22:	4603      	mov	r3, r0
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	da02      	bge.n	8014b2e <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014b28:	f04f 33ff 	mov.w	r3, #4294967295
 8014b2c:	e02c      	b.n	8014b88 <SCSI_Read12+0x170>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8014b2e:	697a      	ldr	r2, [r7, #20]
 8014b30:	f248 0318 	movw	r3, #32792	; 0x8018
 8014b34:	4413      	add	r3, r2
 8014b36:	681a      	ldr	r2, [r3, #0]
 8014b38:	6979      	ldr	r1, [r7, #20]
 8014b3a:	f248 0370 	movw	r3, #32880	; 0x8070
 8014b3e:	440b      	add	r3, r1
 8014b40:	6819      	ldr	r1, [r3, #0]
 8014b42:	6978      	ldr	r0, [r7, #20]
 8014b44:	f248 0364 	movw	r3, #32868	; 0x8064
 8014b48:	4403      	add	r3, r0
 8014b4a:	881b      	ldrh	r3, [r3, #0]
 8014b4c:	fb03 f301 	mul.w	r3, r3, r1
 8014b50:	429a      	cmp	r2, r3
 8014b52:	d00c      	beq.n	8014b6e <SCSI_Read12+0x156>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014b54:	697a      	ldr	r2, [r7, #20]
 8014b56:	f248 031d 	movw	r3, #32797	; 0x801d
 8014b5a:	4413      	add	r3, r2
 8014b5c:	7819      	ldrb	r1, [r3, #0]
 8014b5e:	2320      	movs	r3, #32
 8014b60:	2205      	movs	r2, #5
 8014b62:	68f8      	ldr	r0, [r7, #12]
 8014b64:	f7ff fdd2 	bl	801470c <SCSI_SenseCode>
      return -1;
 8014b68:	f04f 33ff 	mov.w	r3, #4294967295
 8014b6c:	e00c      	b.n	8014b88 <SCSI_Read12+0x170>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8014b6e:	697b      	ldr	r3, [r7, #20]
 8014b70:	2202      	movs	r2, #2
 8014b72:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8014b74:	697b      	ldr	r3, [r7, #20]
 8014b76:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8014b7a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8014b7c:	7afb      	ldrb	r3, [r7, #11]
 8014b7e:	4619      	mov	r1, r3
 8014b80:	68f8      	ldr	r0, [r7, #12]
 8014b82:	f000 fa21 	bl	8014fc8 <SCSI_ProcessRead>
 8014b86:	4603      	mov	r3, r0
}
 8014b88:	4618      	mov	r0, r3
 8014b8a:	3718      	adds	r7, #24
 8014b8c:	46bd      	mov	sp, r7
 8014b8e:	bd80      	pop	{r7, pc}

08014b90 <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014b90:	b580      	push	{r7, lr}
 8014b92:	b086      	sub	sp, #24
 8014b94:	af00      	add	r7, sp, #0
 8014b96:	60f8      	str	r0, [r7, #12]
 8014b98:	460b      	mov	r3, r1
 8014b9a:	607a      	str	r2, [r7, #4]
 8014b9c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014ba4:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014ba6:	697b      	ldr	r3, [r7, #20]
 8014ba8:	7a1b      	ldrb	r3, [r3, #8]
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	f040 80be 	bne.w	8014d2c <SCSI_Write10+0x19c>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8014bb0:	697a      	ldr	r2, [r7, #20]
 8014bb2:	f248 0318 	movw	r3, #32792	; 0x8018
 8014bb6:	4413      	add	r3, r2
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d10c      	bne.n	8014bd8 <SCSI_Write10+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014bbe:	697a      	ldr	r2, [r7, #20]
 8014bc0:	f248 031d 	movw	r3, #32797	; 0x801d
 8014bc4:	4413      	add	r3, r2
 8014bc6:	7819      	ldrb	r1, [r3, #0]
 8014bc8:	2320      	movs	r3, #32
 8014bca:	2205      	movs	r2, #5
 8014bcc:	68f8      	ldr	r0, [r7, #12]
 8014bce:	f7ff fd9d 	bl	801470c <SCSI_SenseCode>
      return -1;
 8014bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8014bd6:	e0af      	b.n	8014d38 <SCSI_Write10+0x1a8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8014bd8:	697a      	ldr	r2, [r7, #20]
 8014bda:	f248 031c 	movw	r3, #32796	; 0x801c
 8014bde:	4413      	add	r3, r2
 8014be0:	781b      	ldrb	r3, [r3, #0]
 8014be2:	b25b      	sxtb	r3, r3
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	da0c      	bge.n	8014c02 <SCSI_Write10+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014be8:	697a      	ldr	r2, [r7, #20]
 8014bea:	f248 031d 	movw	r3, #32797	; 0x801d
 8014bee:	4413      	add	r3, r2
 8014bf0:	7819      	ldrb	r1, [r3, #0]
 8014bf2:	2320      	movs	r3, #32
 8014bf4:	2205      	movs	r2, #5
 8014bf6:	68f8      	ldr	r0, [r7, #12]
 8014bf8:	f7ff fd88 	bl	801470c <SCSI_SenseCode>
      return -1;
 8014bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8014c00:	e09a      	b.n	8014d38 <SCSI_Write10+0x1a8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014c08:	689b      	ldr	r3, [r3, #8]
 8014c0a:	7afa      	ldrb	r2, [r7, #11]
 8014c0c:	4610      	mov	r0, r2
 8014c0e:	4798      	blx	r3
 8014c10:	4603      	mov	r3, r0
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d008      	beq.n	8014c28 <SCSI_Write10+0x98>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014c16:	7af9      	ldrb	r1, [r7, #11]
 8014c18:	233a      	movs	r3, #58	; 0x3a
 8014c1a:	2202      	movs	r2, #2
 8014c1c:	68f8      	ldr	r0, [r7, #12]
 8014c1e:	f7ff fd75 	bl	801470c <SCSI_SenseCode>
      return -1;
 8014c22:	f04f 33ff 	mov.w	r3, #4294967295
 8014c26:	e087      	b.n	8014d38 <SCSI_Write10+0x1a8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014c2e:	68db      	ldr	r3, [r3, #12]
 8014c30:	7afa      	ldrb	r2, [r7, #11]
 8014c32:	4610      	mov	r0, r2
 8014c34:	4798      	blx	r3
 8014c36:	4603      	mov	r3, r0
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d008      	beq.n	8014c4e <SCSI_Write10+0xbe>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8014c3c:	7af9      	ldrb	r1, [r7, #11]
 8014c3e:	2327      	movs	r3, #39	; 0x27
 8014c40:	2202      	movs	r2, #2
 8014c42:	68f8      	ldr	r0, [r7, #12]
 8014c44:	f7ff fd62 	bl	801470c <SCSI_SenseCode>
      return -1;
 8014c48:	f04f 33ff 	mov.w	r3, #4294967295
 8014c4c:	e074      	b.n	8014d38 <SCSI_Write10+0x1a8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	3302      	adds	r3, #2
 8014c52:	781b      	ldrb	r3, [r3, #0]
 8014c54:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	3303      	adds	r3, #3
 8014c5a:	781b      	ldrb	r3, [r3, #0]
 8014c5c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014c5e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	3304      	adds	r3, #4
 8014c64:	781b      	ldrb	r3, [r3, #0]
 8014c66:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014c68:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014c6a:	687a      	ldr	r2, [r7, #4]
 8014c6c:	3205      	adds	r2, #5
 8014c6e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8014c70:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014c72:	6979      	ldr	r1, [r7, #20]
 8014c74:	f248 036c 	movw	r3, #32876	; 0x806c
 8014c78:	440b      	add	r3, r1
 8014c7a:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	3307      	adds	r3, #7
 8014c80:	781b      	ldrb	r3, [r3, #0]
 8014c82:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8014c84:	687a      	ldr	r2, [r7, #4]
 8014c86:	3208      	adds	r2, #8
 8014c88:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8014c8a:	431a      	orrs	r2, r3
 8014c8c:	6979      	ldr	r1, [r7, #20]
 8014c8e:	f248 0370 	movw	r3, #32880	; 0x8070
 8014c92:	440b      	add	r3, r1
 8014c94:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014c96:	697a      	ldr	r2, [r7, #20]
 8014c98:	f248 036c 	movw	r3, #32876	; 0x806c
 8014c9c:	4413      	add	r3, r2
 8014c9e:	6818      	ldr	r0, [r3, #0]
 8014ca0:	697a      	ldr	r2, [r7, #20]
 8014ca2:	f248 0370 	movw	r3, #32880	; 0x8070
 8014ca6:	4413      	add	r3, r2
 8014ca8:	681b      	ldr	r3, [r3, #0]
 8014caa:	7af9      	ldrb	r1, [r7, #11]
 8014cac:	4602      	mov	r2, r0
 8014cae:	68f8      	ldr	r0, [r7, #12]
 8014cb0:	f000 f966 	bl	8014f80 <SCSI_CheckAddressRange>
 8014cb4:	4603      	mov	r3, r0
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	da02      	bge.n	8014cc0 <SCSI_Write10+0x130>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014cba:	f04f 33ff 	mov.w	r3, #4294967295
 8014cbe:	e03b      	b.n	8014d38 <SCSI_Write10+0x1a8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8014cc0:	697a      	ldr	r2, [r7, #20]
 8014cc2:	f248 0370 	movw	r3, #32880	; 0x8070
 8014cc6:	4413      	add	r3, r2
 8014cc8:	681a      	ldr	r2, [r3, #0]
 8014cca:	6979      	ldr	r1, [r7, #20]
 8014ccc:	f248 0364 	movw	r3, #32868	; 0x8064
 8014cd0:	440b      	add	r3, r1
 8014cd2:	881b      	ldrh	r3, [r3, #0]
 8014cd4:	fb03 f302 	mul.w	r3, r3, r2
 8014cd8:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8014cda:	697a      	ldr	r2, [r7, #20]
 8014cdc:	f248 0318 	movw	r3, #32792	; 0x8018
 8014ce0:	4413      	add	r3, r2
 8014ce2:	681b      	ldr	r3, [r3, #0]
 8014ce4:	693a      	ldr	r2, [r7, #16]
 8014ce6:	429a      	cmp	r2, r3
 8014ce8:	d00c      	beq.n	8014d04 <SCSI_Write10+0x174>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014cea:	697a      	ldr	r2, [r7, #20]
 8014cec:	f248 031d 	movw	r3, #32797	; 0x801d
 8014cf0:	4413      	add	r3, r2
 8014cf2:	7819      	ldrb	r1, [r3, #0]
 8014cf4:	2320      	movs	r3, #32
 8014cf6:	2205      	movs	r2, #5
 8014cf8:	68f8      	ldr	r0, [r7, #12]
 8014cfa:	f7ff fd07 	bl	801470c <SCSI_SenseCode>
      return -1;
 8014cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8014d02:	e019      	b.n	8014d38 <SCSI_Write10+0x1a8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8014d04:	693b      	ldr	r3, [r7, #16]
 8014d06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014d0a:	bf28      	it	cs
 8014d0c:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8014d10:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8014d12:	697b      	ldr	r3, [r7, #20]
 8014d14:	2201      	movs	r2, #1
 8014d16:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8014d18:	697b      	ldr	r3, [r7, #20]
 8014d1a:	f103 0210 	add.w	r2, r3, #16
 8014d1e:	693b      	ldr	r3, [r7, #16]
 8014d20:	2101      	movs	r1, #1
 8014d22:	68f8      	ldr	r0, [r7, #12]
 8014d24:	f004 fb19 	bl	801935a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8014d28:	2300      	movs	r3, #0
 8014d2a:	e005      	b.n	8014d38 <SCSI_Write10+0x1a8>
    return SCSI_ProcessWrite(pdev, lun);
 8014d2c:	7afb      	ldrb	r3, [r7, #11]
 8014d2e:	4619      	mov	r1, r3
 8014d30:	68f8      	ldr	r0, [r7, #12]
 8014d32:	f000 f9d7 	bl	80150e4 <SCSI_ProcessWrite>
 8014d36:	4603      	mov	r3, r0
}
 8014d38:	4618      	mov	r0, r3
 8014d3a:	3718      	adds	r7, #24
 8014d3c:	46bd      	mov	sp, r7
 8014d3e:	bd80      	pop	{r7, pc}

08014d40 <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014d40:	b580      	push	{r7, lr}
 8014d42:	b086      	sub	sp, #24
 8014d44:	af00      	add	r7, sp, #0
 8014d46:	60f8      	str	r0, [r7, #12]
 8014d48:	460b      	mov	r3, r1
 8014d4a:	607a      	str	r2, [r7, #4]
 8014d4c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014d54:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014d56:	697b      	ldr	r3, [r7, #20]
 8014d58:	7a1b      	ldrb	r3, [r3, #8]
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	f040 80ce 	bne.w	8014efc <SCSI_Write12+0x1bc>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8014d60:	697a      	ldr	r2, [r7, #20]
 8014d62:	f248 0318 	movw	r3, #32792	; 0x8018
 8014d66:	4413      	add	r3, r2
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d10c      	bne.n	8014d88 <SCSI_Write12+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014d6e:	697a      	ldr	r2, [r7, #20]
 8014d70:	f248 031d 	movw	r3, #32797	; 0x801d
 8014d74:	4413      	add	r3, r2
 8014d76:	7819      	ldrb	r1, [r3, #0]
 8014d78:	2320      	movs	r3, #32
 8014d7a:	2205      	movs	r2, #5
 8014d7c:	68f8      	ldr	r0, [r7, #12]
 8014d7e:	f7ff fcc5 	bl	801470c <SCSI_SenseCode>
      return -1;
 8014d82:	f04f 33ff 	mov.w	r3, #4294967295
 8014d86:	e0bf      	b.n	8014f08 <SCSI_Write12+0x1c8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8014d88:	697a      	ldr	r2, [r7, #20]
 8014d8a:	f248 031c 	movw	r3, #32796	; 0x801c
 8014d8e:	4413      	add	r3, r2
 8014d90:	781b      	ldrb	r3, [r3, #0]
 8014d92:	b25b      	sxtb	r3, r3
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	da0c      	bge.n	8014db2 <SCSI_Write12+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014d98:	697a      	ldr	r2, [r7, #20]
 8014d9a:	f248 031d 	movw	r3, #32797	; 0x801d
 8014d9e:	4413      	add	r3, r2
 8014da0:	7819      	ldrb	r1, [r3, #0]
 8014da2:	2320      	movs	r3, #32
 8014da4:	2205      	movs	r2, #5
 8014da6:	68f8      	ldr	r0, [r7, #12]
 8014da8:	f7ff fcb0 	bl	801470c <SCSI_SenseCode>
      return -1;
 8014dac:	f04f 33ff 	mov.w	r3, #4294967295
 8014db0:	e0aa      	b.n	8014f08 <SCSI_Write12+0x1c8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014db8:	689b      	ldr	r3, [r3, #8]
 8014dba:	7afa      	ldrb	r2, [r7, #11]
 8014dbc:	4610      	mov	r0, r2
 8014dbe:	4798      	blx	r3
 8014dc0:	4603      	mov	r3, r0
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d00b      	beq.n	8014dde <SCSI_Write12+0x9e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014dc6:	7af9      	ldrb	r1, [r7, #11]
 8014dc8:	233a      	movs	r3, #58	; 0x3a
 8014dca:	2202      	movs	r2, #2
 8014dcc:	68f8      	ldr	r0, [r7, #12]
 8014dce:	f7ff fc9d 	bl	801470c <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8014dd2:	697b      	ldr	r3, [r7, #20]
 8014dd4:	2205      	movs	r2, #5
 8014dd6:	721a      	strb	r2, [r3, #8]
      return -1;
 8014dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8014ddc:	e094      	b.n	8014f08 <SCSI_Write12+0x1c8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014de4:	68db      	ldr	r3, [r3, #12]
 8014de6:	7afa      	ldrb	r2, [r7, #11]
 8014de8:	4610      	mov	r0, r2
 8014dea:	4798      	blx	r3
 8014dec:	4603      	mov	r3, r0
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d00b      	beq.n	8014e0a <SCSI_Write12+0xca>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8014df2:	7af9      	ldrb	r1, [r7, #11]
 8014df4:	2327      	movs	r3, #39	; 0x27
 8014df6:	2202      	movs	r2, #2
 8014df8:	68f8      	ldr	r0, [r7, #12]
 8014dfa:	f7ff fc87 	bl	801470c <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8014dfe:	697b      	ldr	r3, [r7, #20]
 8014e00:	2205      	movs	r2, #5
 8014e02:	721a      	strb	r2, [r3, #8]
      return -1;
 8014e04:	f04f 33ff 	mov.w	r3, #4294967295
 8014e08:	e07e      	b.n	8014f08 <SCSI_Write12+0x1c8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	3302      	adds	r3, #2
 8014e0e:	781b      	ldrb	r3, [r3, #0]
 8014e10:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	3303      	adds	r3, #3
 8014e16:	781b      	ldrb	r3, [r3, #0]
 8014e18:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014e1a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	3304      	adds	r3, #4
 8014e20:	781b      	ldrb	r3, [r3, #0]
 8014e22:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014e24:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014e26:	687a      	ldr	r2, [r7, #4]
 8014e28:	3205      	adds	r2, #5
 8014e2a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8014e2c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014e2e:	6979      	ldr	r1, [r7, #20]
 8014e30:	f248 036c 	movw	r3, #32876	; 0x806c
 8014e34:	440b      	add	r3, r1
 8014e36:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	3306      	adds	r3, #6
 8014e3c:	781b      	ldrb	r3, [r3, #0]
 8014e3e:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	3307      	adds	r3, #7
 8014e44:	781b      	ldrb	r3, [r3, #0]
 8014e46:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014e48:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	3308      	adds	r3, #8
 8014e4e:	781b      	ldrb	r3, [r3, #0]
 8014e50:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8014e52:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8014e54:	687a      	ldr	r2, [r7, #4]
 8014e56:	3209      	adds	r2, #9
 8014e58:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8014e5a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014e5c:	6979      	ldr	r1, [r7, #20]
 8014e5e:	f248 0370 	movw	r3, #32880	; 0x8070
 8014e62:	440b      	add	r3, r1
 8014e64:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014e66:	697a      	ldr	r2, [r7, #20]
 8014e68:	f248 036c 	movw	r3, #32876	; 0x806c
 8014e6c:	4413      	add	r3, r2
 8014e6e:	6818      	ldr	r0, [r3, #0]
 8014e70:	697a      	ldr	r2, [r7, #20]
 8014e72:	f248 0370 	movw	r3, #32880	; 0x8070
 8014e76:	4413      	add	r3, r2
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	7af9      	ldrb	r1, [r7, #11]
 8014e7c:	4602      	mov	r2, r0
 8014e7e:	68f8      	ldr	r0, [r7, #12]
 8014e80:	f000 f87e 	bl	8014f80 <SCSI_CheckAddressRange>
 8014e84:	4603      	mov	r3, r0
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	da02      	bge.n	8014e90 <SCSI_Write12+0x150>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8014e8e:	e03b      	b.n	8014f08 <SCSI_Write12+0x1c8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8014e90:	697a      	ldr	r2, [r7, #20]
 8014e92:	f248 0370 	movw	r3, #32880	; 0x8070
 8014e96:	4413      	add	r3, r2
 8014e98:	681a      	ldr	r2, [r3, #0]
 8014e9a:	6979      	ldr	r1, [r7, #20]
 8014e9c:	f248 0364 	movw	r3, #32868	; 0x8064
 8014ea0:	440b      	add	r3, r1
 8014ea2:	881b      	ldrh	r3, [r3, #0]
 8014ea4:	fb03 f302 	mul.w	r3, r3, r2
 8014ea8:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8014eaa:	697a      	ldr	r2, [r7, #20]
 8014eac:	f248 0318 	movw	r3, #32792	; 0x8018
 8014eb0:	4413      	add	r3, r2
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	693a      	ldr	r2, [r7, #16]
 8014eb6:	429a      	cmp	r2, r3
 8014eb8:	d00c      	beq.n	8014ed4 <SCSI_Write12+0x194>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014eba:	697a      	ldr	r2, [r7, #20]
 8014ebc:	f248 031d 	movw	r3, #32797	; 0x801d
 8014ec0:	4413      	add	r3, r2
 8014ec2:	7819      	ldrb	r1, [r3, #0]
 8014ec4:	2320      	movs	r3, #32
 8014ec6:	2205      	movs	r2, #5
 8014ec8:	68f8      	ldr	r0, [r7, #12]
 8014eca:	f7ff fc1f 	bl	801470c <SCSI_SenseCode>
      return -1;
 8014ece:	f04f 33ff 	mov.w	r3, #4294967295
 8014ed2:	e019      	b.n	8014f08 <SCSI_Write12+0x1c8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8014ed4:	693b      	ldr	r3, [r7, #16]
 8014ed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014eda:	bf28      	it	cs
 8014edc:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8014ee0:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8014ee2:	697b      	ldr	r3, [r7, #20]
 8014ee4:	2201      	movs	r2, #1
 8014ee6:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8014ee8:	697b      	ldr	r3, [r7, #20]
 8014eea:	f103 0210 	add.w	r2, r3, #16
 8014eee:	693b      	ldr	r3, [r7, #16]
 8014ef0:	2101      	movs	r1, #1
 8014ef2:	68f8      	ldr	r0, [r7, #12]
 8014ef4:	f004 fa31 	bl	801935a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8014ef8:	2300      	movs	r3, #0
 8014efa:	e005      	b.n	8014f08 <SCSI_Write12+0x1c8>
    return SCSI_ProcessWrite(pdev, lun);
 8014efc:	7afb      	ldrb	r3, [r7, #11]
 8014efe:	4619      	mov	r1, r3
 8014f00:	68f8      	ldr	r0, [r7, #12]
 8014f02:	f000 f8ef 	bl	80150e4 <SCSI_ProcessWrite>
 8014f06:	4603      	mov	r3, r0
}
 8014f08:	4618      	mov	r0, r3
 8014f0a:	3718      	adds	r7, #24
 8014f0c:	46bd      	mov	sp, r7
 8014f0e:	bd80      	pop	{r7, pc}

08014f10 <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014f10:	b580      	push	{r7, lr}
 8014f12:	b086      	sub	sp, #24
 8014f14:	af00      	add	r7, sp, #0
 8014f16:	60f8      	str	r0, [r7, #12]
 8014f18:	460b      	mov	r3, r1
 8014f1a:	607a      	str	r2, [r7, #4]
 8014f1c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014f1e:	68fb      	ldr	r3, [r7, #12]
 8014f20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014f24:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	3301      	adds	r3, #1
 8014f2a:	781b      	ldrb	r3, [r3, #0]
 8014f2c:	f003 0302 	and.w	r3, r3, #2
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d008      	beq.n	8014f46 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8014f34:	7af9      	ldrb	r1, [r7, #11]
 8014f36:	2324      	movs	r3, #36	; 0x24
 8014f38:	2205      	movs	r2, #5
 8014f3a:	68f8      	ldr	r0, [r7, #12]
 8014f3c:	f7ff fbe6 	bl	801470c <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8014f40:	f04f 33ff 	mov.w	r3, #4294967295
 8014f44:	e018      	b.n	8014f78 <SCSI_Verify10+0x68>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8014f46:	697a      	ldr	r2, [r7, #20]
 8014f48:	f248 036c 	movw	r3, #32876	; 0x806c
 8014f4c:	4413      	add	r3, r2
 8014f4e:	6818      	ldr	r0, [r3, #0]
 8014f50:	697a      	ldr	r2, [r7, #20]
 8014f52:	f248 0370 	movw	r3, #32880	; 0x8070
 8014f56:	4413      	add	r3, r2
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	7af9      	ldrb	r1, [r7, #11]
 8014f5c:	4602      	mov	r2, r0
 8014f5e:	68f8      	ldr	r0, [r7, #12]
 8014f60:	f000 f80e 	bl	8014f80 <SCSI_CheckAddressRange>
 8014f64:	4603      	mov	r3, r0
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	da02      	bge.n	8014f70 <SCSI_Verify10+0x60>
  {
    return -1; /* error */
 8014f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8014f6e:	e003      	b.n	8014f78 <SCSI_Verify10+0x68>
  }

  hmsc->bot_data_length = 0U;
 8014f70:	697b      	ldr	r3, [r7, #20]
 8014f72:	2200      	movs	r2, #0
 8014f74:	60da      	str	r2, [r3, #12]

  return 0;
 8014f76:	2300      	movs	r3, #0
}
 8014f78:	4618      	mov	r0, r3
 8014f7a:	3718      	adds	r7, #24
 8014f7c:	46bd      	mov	sp, r7
 8014f7e:	bd80      	pop	{r7, pc}

08014f80 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8014f80:	b580      	push	{r7, lr}
 8014f82:	b086      	sub	sp, #24
 8014f84:	af00      	add	r7, sp, #0
 8014f86:	60f8      	str	r0, [r7, #12]
 8014f88:	607a      	str	r2, [r7, #4]
 8014f8a:	603b      	str	r3, [r7, #0]
 8014f8c:	460b      	mov	r3, r1
 8014f8e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014f96:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8014f98:	687a      	ldr	r2, [r7, #4]
 8014f9a:	683b      	ldr	r3, [r7, #0]
 8014f9c:	441a      	add	r2, r3
 8014f9e:	6979      	ldr	r1, [r7, #20]
 8014fa0:	f248 0368 	movw	r3, #32872	; 0x8068
 8014fa4:	440b      	add	r3, r1
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	429a      	cmp	r2, r3
 8014faa:	d908      	bls.n	8014fbe <SCSI_CheckAddressRange+0x3e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8014fac:	7af9      	ldrb	r1, [r7, #11]
 8014fae:	2321      	movs	r3, #33	; 0x21
 8014fb0:	2205      	movs	r2, #5
 8014fb2:	68f8      	ldr	r0, [r7, #12]
 8014fb4:	f7ff fbaa 	bl	801470c <SCSI_SenseCode>
    return -1;
 8014fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8014fbc:	e000      	b.n	8014fc0 <SCSI_CheckAddressRange+0x40>
  }

  return 0;
 8014fbe:	2300      	movs	r3, #0
}
 8014fc0:	4618      	mov	r0, r3
 8014fc2:	3718      	adds	r7, #24
 8014fc4:	46bd      	mov	sp, r7
 8014fc6:	bd80      	pop	{r7, pc}

08014fc8 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8014fc8:	b5b0      	push	{r4, r5, r7, lr}
 8014fca:	b084      	sub	sp, #16
 8014fcc:	af00      	add	r7, sp, #0
 8014fce:	6078      	str	r0, [r7, #4]
 8014fd0:	460b      	mov	r3, r1
 8014fd2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014fda:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8014fdc:	68fa      	ldr	r2, [r7, #12]
 8014fde:	f248 0370 	movw	r3, #32880	; 0x8070
 8014fe2:	4413      	add	r3, r2
 8014fe4:	681a      	ldr	r2, [r3, #0]
 8014fe6:	68f9      	ldr	r1, [r7, #12]
 8014fe8:	f248 0364 	movw	r3, #32868	; 0x8064
 8014fec:	440b      	add	r3, r1
 8014fee:	881b      	ldrh	r3, [r3, #0]
 8014ff0:	fb03 f302 	mul.w	r3, r3, r2
 8014ff4:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8014ff6:	68bb      	ldr	r3, [r7, #8]
 8014ff8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014ffc:	bf28      	it	cs
 8014ffe:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8015002:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801500a:	691c      	ldr	r4, [r3, #16]
 801500c:	68fb      	ldr	r3, [r7, #12]
 801500e:	f103 0110 	add.w	r1, r3, #16
 8015012:	68fa      	ldr	r2, [r7, #12]
 8015014:	f248 036c 	movw	r3, #32876	; 0x806c
 8015018:	4413      	add	r3, r2
 801501a:	681d      	ldr	r5, [r3, #0]
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 801501c:	68fa      	ldr	r2, [r7, #12]
 801501e:	f248 0364 	movw	r3, #32868	; 0x8064
 8015022:	4413      	add	r3, r2
 8015024:	881b      	ldrh	r3, [r3, #0]
 8015026:	461a      	mov	r2, r3
 8015028:	68bb      	ldr	r3, [r7, #8]
 801502a:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 801502e:	b29b      	uxth	r3, r3
 8015030:	78f8      	ldrb	r0, [r7, #3]
 8015032:	462a      	mov	r2, r5
 8015034:	47a0      	blx	r4
 8015036:	4603      	mov	r3, r0
 8015038:	2b00      	cmp	r3, #0
 801503a:	da08      	bge.n	801504e <SCSI_ProcessRead+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 801503c:	78f9      	ldrb	r1, [r7, #3]
 801503e:	2311      	movs	r3, #17
 8015040:	2204      	movs	r2, #4
 8015042:	6878      	ldr	r0, [r7, #4]
 8015044:	f7ff fb62 	bl	801470c <SCSI_SenseCode>
    return -1;
 8015048:	f04f 33ff 	mov.w	r3, #4294967295
 801504c:	e046      	b.n	80150dc <SCSI_ProcessRead+0x114>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	f103 0210 	add.w	r2, r3, #16
 8015054:	68bb      	ldr	r3, [r7, #8]
 8015056:	2181      	movs	r1, #129	; 0x81
 8015058:	6878      	ldr	r0, [r7, #4]
 801505a:	f004 f95d 	bl	8019318 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801505e:	68fa      	ldr	r2, [r7, #12]
 8015060:	f248 036c 	movw	r3, #32876	; 0x806c
 8015064:	4413      	add	r3, r2
 8015066:	681a      	ldr	r2, [r3, #0]
 8015068:	68f9      	ldr	r1, [r7, #12]
 801506a:	f248 0364 	movw	r3, #32868	; 0x8064
 801506e:	440b      	add	r3, r1
 8015070:	881b      	ldrh	r3, [r3, #0]
 8015072:	4619      	mov	r1, r3
 8015074:	68bb      	ldr	r3, [r7, #8]
 8015076:	fbb3 f3f1 	udiv	r3, r3, r1
 801507a:	441a      	add	r2, r3
 801507c:	68f9      	ldr	r1, [r7, #12]
 801507e:	f248 036c 	movw	r3, #32876	; 0x806c
 8015082:	440b      	add	r3, r1
 8015084:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8015086:	68fa      	ldr	r2, [r7, #12]
 8015088:	f248 0370 	movw	r3, #32880	; 0x8070
 801508c:	4413      	add	r3, r2
 801508e:	681a      	ldr	r2, [r3, #0]
 8015090:	68f9      	ldr	r1, [r7, #12]
 8015092:	f248 0364 	movw	r3, #32868	; 0x8064
 8015096:	440b      	add	r3, r1
 8015098:	881b      	ldrh	r3, [r3, #0]
 801509a:	4619      	mov	r1, r3
 801509c:	68bb      	ldr	r3, [r7, #8]
 801509e:	fbb3 f3f1 	udiv	r3, r3, r1
 80150a2:	1ad2      	subs	r2, r2, r3
 80150a4:	68f9      	ldr	r1, [r7, #12]
 80150a6:	f248 0370 	movw	r3, #32880	; 0x8070
 80150aa:	440b      	add	r3, r1
 80150ac:	601a      	str	r2, [r3, #0]

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 80150ae:	68fa      	ldr	r2, [r7, #12]
 80150b0:	f248 0338 	movw	r3, #32824	; 0x8038
 80150b4:	4413      	add	r3, r2
 80150b6:	681a      	ldr	r2, [r3, #0]
 80150b8:	68bb      	ldr	r3, [r7, #8]
 80150ba:	1ad2      	subs	r2, r2, r3
 80150bc:	68f9      	ldr	r1, [r7, #12]
 80150be:	f248 0338 	movw	r3, #32824	; 0x8038
 80150c2:	440b      	add	r3, r1
 80150c4:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 80150c6:	68fa      	ldr	r2, [r7, #12]
 80150c8:	f248 0370 	movw	r3, #32880	; 0x8070
 80150cc:	4413      	add	r3, r2
 80150ce:	681b      	ldr	r3, [r3, #0]
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d102      	bne.n	80150da <SCSI_ProcessRead+0x112>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	2203      	movs	r2, #3
 80150d8:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 80150da:	2300      	movs	r3, #0
}
 80150dc:	4618      	mov	r0, r3
 80150de:	3710      	adds	r7, #16
 80150e0:	46bd      	mov	sp, r7
 80150e2:	bdb0      	pop	{r4, r5, r7, pc}

080150e4 <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80150e4:	b5b0      	push	{r4, r5, r7, lr}
 80150e6:	b084      	sub	sp, #16
 80150e8:	af00      	add	r7, sp, #0
 80150ea:	6078      	str	r0, [r7, #4]
 80150ec:	460b      	mov	r3, r1
 80150ee:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80150f6:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80150f8:	68fa      	ldr	r2, [r7, #12]
 80150fa:	f248 0370 	movw	r3, #32880	; 0x8070
 80150fe:	4413      	add	r3, r2
 8015100:	681a      	ldr	r2, [r3, #0]
 8015102:	68f9      	ldr	r1, [r7, #12]
 8015104:	f248 0364 	movw	r3, #32868	; 0x8064
 8015108:	440b      	add	r3, r1
 801510a:	881b      	ldrh	r3, [r3, #0]
 801510c:	fb03 f302 	mul.w	r3, r3, r2
 8015110:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8015112:	68bb      	ldr	r3, [r7, #8]
 8015114:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015118:	bf28      	it	cs
 801511a:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 801511e:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015126:	695c      	ldr	r4, [r3, #20]
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	f103 0110 	add.w	r1, r3, #16
 801512e:	68fa      	ldr	r2, [r7, #12]
 8015130:	f248 036c 	movw	r3, #32876	; 0x806c
 8015134:	4413      	add	r3, r2
 8015136:	681d      	ldr	r5, [r3, #0]
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8015138:	68fa      	ldr	r2, [r7, #12]
 801513a:	f248 0364 	movw	r3, #32868	; 0x8064
 801513e:	4413      	add	r3, r2
 8015140:	881b      	ldrh	r3, [r3, #0]
 8015142:	461a      	mov	r2, r3
 8015144:	68bb      	ldr	r3, [r7, #8]
 8015146:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 801514a:	b29b      	uxth	r3, r3
 801514c:	78f8      	ldrb	r0, [r7, #3]
 801514e:	462a      	mov	r2, r5
 8015150:	47a0      	blx	r4
 8015152:	4603      	mov	r3, r0
 8015154:	2b00      	cmp	r3, #0
 8015156:	da08      	bge.n	801516a <SCSI_ProcessWrite+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8015158:	78f9      	ldrb	r1, [r7, #3]
 801515a:	2303      	movs	r3, #3
 801515c:	2204      	movs	r2, #4
 801515e:	6878      	ldr	r0, [r7, #4]
 8015160:	f7ff fad4 	bl	801470c <SCSI_SenseCode>
    return -1;
 8015164:	f04f 33ff 	mov.w	r3, #4294967295
 8015168:	e05a      	b.n	8015220 <SCSI_ProcessWrite+0x13c>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801516a:	68fa      	ldr	r2, [r7, #12]
 801516c:	f248 036c 	movw	r3, #32876	; 0x806c
 8015170:	4413      	add	r3, r2
 8015172:	681a      	ldr	r2, [r3, #0]
 8015174:	68f9      	ldr	r1, [r7, #12]
 8015176:	f248 0364 	movw	r3, #32868	; 0x8064
 801517a:	440b      	add	r3, r1
 801517c:	881b      	ldrh	r3, [r3, #0]
 801517e:	4619      	mov	r1, r3
 8015180:	68bb      	ldr	r3, [r7, #8]
 8015182:	fbb3 f3f1 	udiv	r3, r3, r1
 8015186:	441a      	add	r2, r3
 8015188:	68f9      	ldr	r1, [r7, #12]
 801518a:	f248 036c 	movw	r3, #32876	; 0x806c
 801518e:	440b      	add	r3, r1
 8015190:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8015192:	68fa      	ldr	r2, [r7, #12]
 8015194:	f248 0370 	movw	r3, #32880	; 0x8070
 8015198:	4413      	add	r3, r2
 801519a:	681a      	ldr	r2, [r3, #0]
 801519c:	68f9      	ldr	r1, [r7, #12]
 801519e:	f248 0364 	movw	r3, #32868	; 0x8064
 80151a2:	440b      	add	r3, r1
 80151a4:	881b      	ldrh	r3, [r3, #0]
 80151a6:	4619      	mov	r1, r3
 80151a8:	68bb      	ldr	r3, [r7, #8]
 80151aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80151ae:	1ad2      	subs	r2, r2, r3
 80151b0:	68f9      	ldr	r1, [r7, #12]
 80151b2:	f248 0370 	movw	r3, #32880	; 0x8070
 80151b6:	440b      	add	r3, r1
 80151b8:	601a      	str	r2, [r3, #0]

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 80151ba:	68fa      	ldr	r2, [r7, #12]
 80151bc:	f248 0338 	movw	r3, #32824	; 0x8038
 80151c0:	4413      	add	r3, r2
 80151c2:	681a      	ldr	r2, [r3, #0]
 80151c4:	68bb      	ldr	r3, [r7, #8]
 80151c6:	1ad2      	subs	r2, r2, r3
 80151c8:	68f9      	ldr	r1, [r7, #12]
 80151ca:	f248 0338 	movw	r3, #32824	; 0x8038
 80151ce:	440b      	add	r3, r1
 80151d0:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 80151d2:	68fa      	ldr	r2, [r7, #12]
 80151d4:	f248 0370 	movw	r3, #32880	; 0x8070
 80151d8:	4413      	add	r3, r2
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d104      	bne.n	80151ea <SCSI_ProcessWrite+0x106>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80151e0:	2100      	movs	r1, #0
 80151e2:	6878      	ldr	r0, [r7, #4]
 80151e4:	f7fe fde2 	bl	8013dac <MSC_BOT_SendCSW>
 80151e8:	e019      	b.n	801521e <SCSI_ProcessWrite+0x13a>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 80151ea:	68fa      	ldr	r2, [r7, #12]
 80151ec:	f248 0370 	movw	r3, #32880	; 0x8070
 80151f0:	4413      	add	r3, r2
 80151f2:	681a      	ldr	r2, [r3, #0]
 80151f4:	68f9      	ldr	r1, [r7, #12]
 80151f6:	f248 0364 	movw	r3, #32868	; 0x8064
 80151fa:	440b      	add	r3, r1
 80151fc:	881b      	ldrh	r3, [r3, #0]
 80151fe:	fb03 f302 	mul.w	r3, r3, r2
 8015202:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015206:	bf28      	it	cs
 8015208:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 801520c:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	f103 0210 	add.w	r2, r3, #16
 8015214:	68bb      	ldr	r3, [r7, #8]
 8015216:	2101      	movs	r1, #1
 8015218:	6878      	ldr	r0, [r7, #4]
 801521a:	f004 f89e 	bl	801935a <USBD_LL_PrepareReceive>
  }

  return 0;
 801521e:	2300      	movs	r3, #0
}
 8015220:	4618      	mov	r0, r3
 8015222:	3710      	adds	r7, #16
 8015224:	46bd      	mov	sp, r7
 8015226:	bdb0      	pop	{r4, r5, r7, pc}

08015228 <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8015228:	b480      	push	{r7}
 801522a:	b087      	sub	sp, #28
 801522c:	af00      	add	r7, sp, #0
 801522e:	60f8      	str	r0, [r7, #12]
 8015230:	60b9      	str	r1, [r7, #8]
 8015232:	4613      	mov	r3, r2
 8015234:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8015236:	88fb      	ldrh	r3, [r7, #6]
 8015238:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 801523a:	8afa      	ldrh	r2, [r7, #22]
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8015240:	e00b      	b.n	801525a <SCSI_UpdateBotData+0x32>
  {
    len--;
 8015242:	8afb      	ldrh	r3, [r7, #22]
 8015244:	3b01      	subs	r3, #1
 8015246:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8015248:	8afb      	ldrh	r3, [r7, #22]
 801524a:	68ba      	ldr	r2, [r7, #8]
 801524c:	441a      	add	r2, r3
 801524e:	8afb      	ldrh	r3, [r7, #22]
 8015250:	7811      	ldrb	r1, [r2, #0]
 8015252:	68fa      	ldr	r2, [r7, #12]
 8015254:	4413      	add	r3, r2
 8015256:	460a      	mov	r2, r1
 8015258:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 801525a:	8afb      	ldrh	r3, [r7, #22]
 801525c:	2b00      	cmp	r3, #0
 801525e:	d1f0      	bne.n	8015242 <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 8015260:	2300      	movs	r3, #0
}
 8015262:	4618      	mov	r0, r3
 8015264:	371c      	adds	r7, #28
 8015266:	46bd      	mov	sp, r7
 8015268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801526c:	4770      	bx	lr

0801526e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801526e:	b580      	push	{r7, lr}
 8015270:	b086      	sub	sp, #24
 8015272:	af00      	add	r7, sp, #0
 8015274:	60f8      	str	r0, [r7, #12]
 8015276:	60b9      	str	r1, [r7, #8]
 8015278:	4613      	mov	r3, r2
 801527a:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	2b00      	cmp	r3, #0
 8015280:	d101      	bne.n	8015286 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8015282:	2303      	movs	r3, #3
 8015284:	e025      	b.n	80152d2 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801528c:	2b00      	cmp	r3, #0
 801528e:	d003      	beq.n	8015298 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	2200      	movs	r2, #0
 8015294:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8015298:	68fb      	ldr	r3, [r7, #12]
 801529a:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d003      	beq.n	80152aa <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	2200      	movs	r2, #0
 80152a6:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80152aa:	68bb      	ldr	r3, [r7, #8]
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d003      	beq.n	80152b8 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	68ba      	ldr	r2, [r7, #8]
 80152b4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	2201      	movs	r2, #1
 80152bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	79fa      	ldrb	r2, [r7, #7]
 80152c4:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80152c6:	68f8      	ldr	r0, [r7, #12]
 80152c8:	f003 fece 	bl	8019068 <USBD_LL_Init>
 80152cc:	4603      	mov	r3, r0
 80152ce:	75fb      	strb	r3, [r7, #23]

  return ret;
 80152d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80152d2:	4618      	mov	r0, r3
 80152d4:	3718      	adds	r7, #24
 80152d6:	46bd      	mov	sp, r7
 80152d8:	bd80      	pop	{r7, pc}

080152da <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80152da:	b580      	push	{r7, lr}
 80152dc:	b084      	sub	sp, #16
 80152de:	af00      	add	r7, sp, #0
 80152e0:	6078      	str	r0, [r7, #4]
 80152e2:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80152e4:	2300      	movs	r3, #0
 80152e6:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80152e8:	683b      	ldr	r3, [r7, #0]
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d101      	bne.n	80152f2 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80152ee:	2303      	movs	r3, #3
 80152f0:	e010      	b.n	8015314 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	683a      	ldr	r2, [r7, #0]
 80152f6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015302:	f107 020e 	add.w	r2, r7, #14
 8015306:	4610      	mov	r0, r2
 8015308:	4798      	blx	r3
 801530a:	4602      	mov	r2, r0
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8015312:	2300      	movs	r3, #0
}
 8015314:	4618      	mov	r0, r3
 8015316:	3710      	adds	r7, #16
 8015318:	46bd      	mov	sp, r7
 801531a:	bd80      	pop	{r7, pc}

0801531c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801531c:	b580      	push	{r7, lr}
 801531e:	b082      	sub	sp, #8
 8015320:	af00      	add	r7, sp, #0
 8015322:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015324:	6878      	ldr	r0, [r7, #4]
 8015326:	f003 feef 	bl	8019108 <USBD_LL_Start>
 801532a:	4603      	mov	r3, r0
}
 801532c:	4618      	mov	r0, r3
 801532e:	3708      	adds	r7, #8
 8015330:	46bd      	mov	sp, r7
 8015332:	bd80      	pop	{r7, pc}

08015334 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8015334:	b480      	push	{r7}
 8015336:	b083      	sub	sp, #12
 8015338:	af00      	add	r7, sp, #0
 801533a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801533c:	2300      	movs	r3, #0
}
 801533e:	4618      	mov	r0, r3
 8015340:	370c      	adds	r7, #12
 8015342:	46bd      	mov	sp, r7
 8015344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015348:	4770      	bx	lr

0801534a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801534a:	b580      	push	{r7, lr}
 801534c:	b084      	sub	sp, #16
 801534e:	af00      	add	r7, sp, #0
 8015350:	6078      	str	r0, [r7, #4]
 8015352:	460b      	mov	r3, r1
 8015354:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8015356:	2303      	movs	r3, #3
 8015358:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015360:	2b00      	cmp	r3, #0
 8015362:	d009      	beq.n	8015378 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	78fa      	ldrb	r2, [r7, #3]
 801536e:	4611      	mov	r1, r2
 8015370:	6878      	ldr	r0, [r7, #4]
 8015372:	4798      	blx	r3
 8015374:	4603      	mov	r3, r0
 8015376:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8015378:	7bfb      	ldrb	r3, [r7, #15]
}
 801537a:	4618      	mov	r0, r3
 801537c:	3710      	adds	r7, #16
 801537e:	46bd      	mov	sp, r7
 8015380:	bd80      	pop	{r7, pc}

08015382 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015382:	b580      	push	{r7, lr}
 8015384:	b082      	sub	sp, #8
 8015386:	af00      	add	r7, sp, #0
 8015388:	6078      	str	r0, [r7, #4]
 801538a:	460b      	mov	r3, r1
 801538c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015394:	2b00      	cmp	r3, #0
 8015396:	d007      	beq.n	80153a8 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801539e:	685b      	ldr	r3, [r3, #4]
 80153a0:	78fa      	ldrb	r2, [r7, #3]
 80153a2:	4611      	mov	r1, r2
 80153a4:	6878      	ldr	r0, [r7, #4]
 80153a6:	4798      	blx	r3
  }

  return USBD_OK;
 80153a8:	2300      	movs	r3, #0
}
 80153aa:	4618      	mov	r0, r3
 80153ac:	3708      	adds	r7, #8
 80153ae:	46bd      	mov	sp, r7
 80153b0:	bd80      	pop	{r7, pc}

080153b2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80153b2:	b580      	push	{r7, lr}
 80153b4:	b084      	sub	sp, #16
 80153b6:	af00      	add	r7, sp, #0
 80153b8:	6078      	str	r0, [r7, #4]
 80153ba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80153c2:	6839      	ldr	r1, [r7, #0]
 80153c4:	4618      	mov	r0, r3
 80153c6:	f000 ff2b 	bl	8016220 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	2201      	movs	r2, #1
 80153ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80153d8:	461a      	mov	r2, r3
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80153e6:	f003 031f 	and.w	r3, r3, #31
 80153ea:	2b01      	cmp	r3, #1
 80153ec:	d00e      	beq.n	801540c <USBD_LL_SetupStage+0x5a>
 80153ee:	2b01      	cmp	r3, #1
 80153f0:	d302      	bcc.n	80153f8 <USBD_LL_SetupStage+0x46>
 80153f2:	2b02      	cmp	r3, #2
 80153f4:	d014      	beq.n	8015420 <USBD_LL_SetupStage+0x6e>
 80153f6:	e01d      	b.n	8015434 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80153fe:	4619      	mov	r1, r3
 8015400:	6878      	ldr	r0, [r7, #4]
 8015402:	f000 fa17 	bl	8015834 <USBD_StdDevReq>
 8015406:	4603      	mov	r3, r0
 8015408:	73fb      	strb	r3, [r7, #15]
      break;
 801540a:	e020      	b.n	801544e <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015412:	4619      	mov	r1, r3
 8015414:	6878      	ldr	r0, [r7, #4]
 8015416:	f000 fa7b 	bl	8015910 <USBD_StdItfReq>
 801541a:	4603      	mov	r3, r0
 801541c:	73fb      	strb	r3, [r7, #15]
      break;
 801541e:	e016      	b.n	801544e <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015426:	4619      	mov	r1, r3
 8015428:	6878      	ldr	r0, [r7, #4]
 801542a:	f000 fab7 	bl	801599c <USBD_StdEPReq>
 801542e:	4603      	mov	r3, r0
 8015430:	73fb      	strb	r3, [r7, #15]
      break;
 8015432:	e00c      	b.n	801544e <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801543a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801543e:	b2db      	uxtb	r3, r3
 8015440:	4619      	mov	r1, r3
 8015442:	6878      	ldr	r0, [r7, #4]
 8015444:	f003 fedf 	bl	8019206 <USBD_LL_StallEP>
 8015448:	4603      	mov	r3, r0
 801544a:	73fb      	strb	r3, [r7, #15]
      break;
 801544c:	bf00      	nop
  }

  return ret;
 801544e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015450:	4618      	mov	r0, r3
 8015452:	3710      	adds	r7, #16
 8015454:	46bd      	mov	sp, r7
 8015456:	bd80      	pop	{r7, pc}

08015458 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015458:	b580      	push	{r7, lr}
 801545a:	b086      	sub	sp, #24
 801545c:	af00      	add	r7, sp, #0
 801545e:	60f8      	str	r0, [r7, #12]
 8015460:	460b      	mov	r3, r1
 8015462:	607a      	str	r2, [r7, #4]
 8015464:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8015466:	7afb      	ldrb	r3, [r7, #11]
 8015468:	2b00      	cmp	r3, #0
 801546a:	d137      	bne.n	80154dc <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015472:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801547a:	2b03      	cmp	r3, #3
 801547c:	d14a      	bne.n	8015514 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 801547e:	693b      	ldr	r3, [r7, #16]
 8015480:	689a      	ldr	r2, [r3, #8]
 8015482:	693b      	ldr	r3, [r7, #16]
 8015484:	68db      	ldr	r3, [r3, #12]
 8015486:	429a      	cmp	r2, r3
 8015488:	d913      	bls.n	80154b2 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801548a:	693b      	ldr	r3, [r7, #16]
 801548c:	689a      	ldr	r2, [r3, #8]
 801548e:	693b      	ldr	r3, [r7, #16]
 8015490:	68db      	ldr	r3, [r3, #12]
 8015492:	1ad2      	subs	r2, r2, r3
 8015494:	693b      	ldr	r3, [r7, #16]
 8015496:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015498:	693b      	ldr	r3, [r7, #16]
 801549a:	68da      	ldr	r2, [r3, #12]
 801549c:	693b      	ldr	r3, [r7, #16]
 801549e:	689b      	ldr	r3, [r3, #8]
 80154a0:	4293      	cmp	r3, r2
 80154a2:	bf28      	it	cs
 80154a4:	4613      	movcs	r3, r2
 80154a6:	461a      	mov	r2, r3
 80154a8:	6879      	ldr	r1, [r7, #4]
 80154aa:	68f8      	ldr	r0, [r7, #12]
 80154ac:	f000 ff8f 	bl	80163ce <USBD_CtlContinueRx>
 80154b0:	e030      	b.n	8015514 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154b8:	691b      	ldr	r3, [r3, #16]
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d00a      	beq.n	80154d4 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80154c4:	2b03      	cmp	r3, #3
 80154c6:	d105      	bne.n	80154d4 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80154c8:	68fb      	ldr	r3, [r7, #12]
 80154ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154ce:	691b      	ldr	r3, [r3, #16]
 80154d0:	68f8      	ldr	r0, [r7, #12]
 80154d2:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80154d4:	68f8      	ldr	r0, [r7, #12]
 80154d6:	f000 ff8b 	bl	80163f0 <USBD_CtlSendStatus>
 80154da:	e01b      	b.n	8015514 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80154dc:	68fb      	ldr	r3, [r7, #12]
 80154de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154e2:	699b      	ldr	r3, [r3, #24]
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d013      	beq.n	8015510 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80154e8:	68fb      	ldr	r3, [r7, #12]
 80154ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80154ee:	2b03      	cmp	r3, #3
 80154f0:	d10e      	bne.n	8015510 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80154f2:	68fb      	ldr	r3, [r7, #12]
 80154f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154f8:	699b      	ldr	r3, [r3, #24]
 80154fa:	7afa      	ldrb	r2, [r7, #11]
 80154fc:	4611      	mov	r1, r2
 80154fe:	68f8      	ldr	r0, [r7, #12]
 8015500:	4798      	blx	r3
 8015502:	4603      	mov	r3, r0
 8015504:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8015506:	7dfb      	ldrb	r3, [r7, #23]
 8015508:	2b00      	cmp	r3, #0
 801550a:	d003      	beq.n	8015514 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 801550c:	7dfb      	ldrb	r3, [r7, #23]
 801550e:	e002      	b.n	8015516 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8015510:	2303      	movs	r3, #3
 8015512:	e000      	b.n	8015516 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8015514:	2300      	movs	r3, #0
}
 8015516:	4618      	mov	r0, r3
 8015518:	3718      	adds	r7, #24
 801551a:	46bd      	mov	sp, r7
 801551c:	bd80      	pop	{r7, pc}

0801551e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801551e:	b580      	push	{r7, lr}
 8015520:	b086      	sub	sp, #24
 8015522:	af00      	add	r7, sp, #0
 8015524:	60f8      	str	r0, [r7, #12]
 8015526:	460b      	mov	r3, r1
 8015528:	607a      	str	r2, [r7, #4]
 801552a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801552c:	7afb      	ldrb	r3, [r7, #11]
 801552e:	2b00      	cmp	r3, #0
 8015530:	d16a      	bne.n	8015608 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8015532:	68fb      	ldr	r3, [r7, #12]
 8015534:	3314      	adds	r3, #20
 8015536:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015538:	68fb      	ldr	r3, [r7, #12]
 801553a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801553e:	2b02      	cmp	r3, #2
 8015540:	d155      	bne.n	80155ee <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8015542:	693b      	ldr	r3, [r7, #16]
 8015544:	689a      	ldr	r2, [r3, #8]
 8015546:	693b      	ldr	r3, [r7, #16]
 8015548:	68db      	ldr	r3, [r3, #12]
 801554a:	429a      	cmp	r2, r3
 801554c:	d914      	bls.n	8015578 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801554e:	693b      	ldr	r3, [r7, #16]
 8015550:	689a      	ldr	r2, [r3, #8]
 8015552:	693b      	ldr	r3, [r7, #16]
 8015554:	68db      	ldr	r3, [r3, #12]
 8015556:	1ad2      	subs	r2, r2, r3
 8015558:	693b      	ldr	r3, [r7, #16]
 801555a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801555c:	693b      	ldr	r3, [r7, #16]
 801555e:	689b      	ldr	r3, [r3, #8]
 8015560:	461a      	mov	r2, r3
 8015562:	6879      	ldr	r1, [r7, #4]
 8015564:	68f8      	ldr	r0, [r7, #12]
 8015566:	f000 ff21 	bl	80163ac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801556a:	2300      	movs	r3, #0
 801556c:	2200      	movs	r2, #0
 801556e:	2100      	movs	r1, #0
 8015570:	68f8      	ldr	r0, [r7, #12]
 8015572:	f003 fef2 	bl	801935a <USBD_LL_PrepareReceive>
 8015576:	e03a      	b.n	80155ee <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8015578:	693b      	ldr	r3, [r7, #16]
 801557a:	68da      	ldr	r2, [r3, #12]
 801557c:	693b      	ldr	r3, [r7, #16]
 801557e:	689b      	ldr	r3, [r3, #8]
 8015580:	429a      	cmp	r2, r3
 8015582:	d11c      	bne.n	80155be <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8015584:	693b      	ldr	r3, [r7, #16]
 8015586:	685a      	ldr	r2, [r3, #4]
 8015588:	693b      	ldr	r3, [r7, #16]
 801558a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801558c:	429a      	cmp	r2, r3
 801558e:	d316      	bcc.n	80155be <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015590:	693b      	ldr	r3, [r7, #16]
 8015592:	685a      	ldr	r2, [r3, #4]
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801559a:	429a      	cmp	r2, r3
 801559c:	d20f      	bcs.n	80155be <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801559e:	2200      	movs	r2, #0
 80155a0:	2100      	movs	r1, #0
 80155a2:	68f8      	ldr	r0, [r7, #12]
 80155a4:	f000 ff02 	bl	80163ac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	2200      	movs	r2, #0
 80155ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80155b0:	2300      	movs	r3, #0
 80155b2:	2200      	movs	r2, #0
 80155b4:	2100      	movs	r1, #0
 80155b6:	68f8      	ldr	r0, [r7, #12]
 80155b8:	f003 fecf 	bl	801935a <USBD_LL_PrepareReceive>
 80155bc:	e017      	b.n	80155ee <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80155be:	68fb      	ldr	r3, [r7, #12]
 80155c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155c4:	68db      	ldr	r3, [r3, #12]
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d00a      	beq.n	80155e0 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80155ca:	68fb      	ldr	r3, [r7, #12]
 80155cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80155d0:	2b03      	cmp	r3, #3
 80155d2:	d105      	bne.n	80155e0 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155da:	68db      	ldr	r3, [r3, #12]
 80155dc:	68f8      	ldr	r0, [r7, #12]
 80155de:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80155e0:	2180      	movs	r1, #128	; 0x80
 80155e2:	68f8      	ldr	r0, [r7, #12]
 80155e4:	f003 fe0f 	bl	8019206 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80155e8:	68f8      	ldr	r0, [r7, #12]
 80155ea:	f000 ff14 	bl	8016416 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80155f4:	2b01      	cmp	r3, #1
 80155f6:	d123      	bne.n	8015640 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80155f8:	68f8      	ldr	r0, [r7, #12]
 80155fa:	f7ff fe9b 	bl	8015334 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80155fe:	68fb      	ldr	r3, [r7, #12]
 8015600:	2200      	movs	r2, #0
 8015602:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015606:	e01b      	b.n	8015640 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801560e:	695b      	ldr	r3, [r3, #20]
 8015610:	2b00      	cmp	r3, #0
 8015612:	d013      	beq.n	801563c <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015614:	68fb      	ldr	r3, [r7, #12]
 8015616:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 801561a:	2b03      	cmp	r3, #3
 801561c:	d10e      	bne.n	801563c <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015624:	695b      	ldr	r3, [r3, #20]
 8015626:	7afa      	ldrb	r2, [r7, #11]
 8015628:	4611      	mov	r1, r2
 801562a:	68f8      	ldr	r0, [r7, #12]
 801562c:	4798      	blx	r3
 801562e:	4603      	mov	r3, r0
 8015630:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8015632:	7dfb      	ldrb	r3, [r7, #23]
 8015634:	2b00      	cmp	r3, #0
 8015636:	d003      	beq.n	8015640 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8015638:	7dfb      	ldrb	r3, [r7, #23]
 801563a:	e002      	b.n	8015642 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801563c:	2303      	movs	r3, #3
 801563e:	e000      	b.n	8015642 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8015640:	2300      	movs	r3, #0
}
 8015642:	4618      	mov	r0, r3
 8015644:	3718      	adds	r7, #24
 8015646:	46bd      	mov	sp, r7
 8015648:	bd80      	pop	{r7, pc}

0801564a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801564a:	b580      	push	{r7, lr}
 801564c:	b082      	sub	sp, #8
 801564e:	af00      	add	r7, sp, #0
 8015650:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	2201      	movs	r2, #1
 8015656:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	2200      	movs	r2, #0
 801565e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	2200      	movs	r2, #0
 8015666:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	2200      	movs	r2, #0
 801566c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015676:	2b00      	cmp	r3, #0
 8015678:	d009      	beq.n	801568e <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015680:	685b      	ldr	r3, [r3, #4]
 8015682:	687a      	ldr	r2, [r7, #4]
 8015684:	6852      	ldr	r2, [r2, #4]
 8015686:	b2d2      	uxtb	r2, r2
 8015688:	4611      	mov	r1, r2
 801568a:	6878      	ldr	r0, [r7, #4]
 801568c:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801568e:	2340      	movs	r3, #64	; 0x40
 8015690:	2200      	movs	r2, #0
 8015692:	2100      	movs	r1, #0
 8015694:	6878      	ldr	r0, [r7, #4]
 8015696:	f003 fd52 	bl	801913e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	2201      	movs	r2, #1
 801569e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	2240      	movs	r2, #64	; 0x40
 80156a6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80156aa:	2340      	movs	r3, #64	; 0x40
 80156ac:	2200      	movs	r2, #0
 80156ae:	2180      	movs	r1, #128	; 0x80
 80156b0:	6878      	ldr	r0, [r7, #4]
 80156b2:	f003 fd44 	bl	801913e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	2201      	movs	r2, #1
 80156ba:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	2240      	movs	r2, #64	; 0x40
 80156c0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80156c2:	2300      	movs	r3, #0
}
 80156c4:	4618      	mov	r0, r3
 80156c6:	3708      	adds	r7, #8
 80156c8:	46bd      	mov	sp, r7
 80156ca:	bd80      	pop	{r7, pc}

080156cc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80156cc:	b480      	push	{r7}
 80156ce:	b083      	sub	sp, #12
 80156d0:	af00      	add	r7, sp, #0
 80156d2:	6078      	str	r0, [r7, #4]
 80156d4:	460b      	mov	r3, r1
 80156d6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	78fa      	ldrb	r2, [r7, #3]
 80156dc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80156de:	2300      	movs	r3, #0
}
 80156e0:	4618      	mov	r0, r3
 80156e2:	370c      	adds	r7, #12
 80156e4:	46bd      	mov	sp, r7
 80156e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ea:	4770      	bx	lr

080156ec <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80156ec:	b480      	push	{r7}
 80156ee:	b083      	sub	sp, #12
 80156f0:	af00      	add	r7, sp, #0
 80156f2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	2204      	movs	r2, #4
 8015704:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015708:	2300      	movs	r3, #0
}
 801570a:	4618      	mov	r0, r3
 801570c:	370c      	adds	r7, #12
 801570e:	46bd      	mov	sp, r7
 8015710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015714:	4770      	bx	lr

08015716 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015716:	b480      	push	{r7}
 8015718:	b083      	sub	sp, #12
 801571a:	af00      	add	r7, sp, #0
 801571c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015724:	2b04      	cmp	r3, #4
 8015726:	d105      	bne.n	8015734 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8015734:	2300      	movs	r3, #0
}
 8015736:	4618      	mov	r0, r3
 8015738:	370c      	adds	r7, #12
 801573a:	46bd      	mov	sp, r7
 801573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015740:	4770      	bx	lr

08015742 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015742:	b580      	push	{r7, lr}
 8015744:	b082      	sub	sp, #8
 8015746:	af00      	add	r7, sp, #0
 8015748:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015750:	2b03      	cmp	r3, #3
 8015752:	d10b      	bne.n	801576c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801575a:	69db      	ldr	r3, [r3, #28]
 801575c:	2b00      	cmp	r3, #0
 801575e:	d005      	beq.n	801576c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015766:	69db      	ldr	r3, [r3, #28]
 8015768:	6878      	ldr	r0, [r7, #4]
 801576a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801576c:	2300      	movs	r3, #0
}
 801576e:	4618      	mov	r0, r3
 8015770:	3708      	adds	r7, #8
 8015772:	46bd      	mov	sp, r7
 8015774:	bd80      	pop	{r7, pc}

08015776 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8015776:	b480      	push	{r7}
 8015778:	b083      	sub	sp, #12
 801577a:	af00      	add	r7, sp, #0
 801577c:	6078      	str	r0, [r7, #4]
 801577e:	460b      	mov	r3, r1
 8015780:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8015782:	2300      	movs	r3, #0
}
 8015784:	4618      	mov	r0, r3
 8015786:	370c      	adds	r7, #12
 8015788:	46bd      	mov	sp, r7
 801578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801578e:	4770      	bx	lr

08015790 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015790:	b480      	push	{r7}
 8015792:	b083      	sub	sp, #12
 8015794:	af00      	add	r7, sp, #0
 8015796:	6078      	str	r0, [r7, #4]
 8015798:	460b      	mov	r3, r1
 801579a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 801579c:	2300      	movs	r3, #0
}
 801579e:	4618      	mov	r0, r3
 80157a0:	370c      	adds	r7, #12
 80157a2:	46bd      	mov	sp, r7
 80157a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a8:	4770      	bx	lr

080157aa <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80157aa:	b480      	push	{r7}
 80157ac:	b083      	sub	sp, #12
 80157ae:	af00      	add	r7, sp, #0
 80157b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80157b2:	2300      	movs	r3, #0
}
 80157b4:	4618      	mov	r0, r3
 80157b6:	370c      	adds	r7, #12
 80157b8:	46bd      	mov	sp, r7
 80157ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157be:	4770      	bx	lr

080157c0 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80157c0:	b580      	push	{r7, lr}
 80157c2:	b082      	sub	sp, #8
 80157c4:	af00      	add	r7, sp, #0
 80157c6:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	2201      	movs	r2, #1
 80157cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d009      	beq.n	80157ee <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80157e0:	685b      	ldr	r3, [r3, #4]
 80157e2:	687a      	ldr	r2, [r7, #4]
 80157e4:	6852      	ldr	r2, [r2, #4]
 80157e6:	b2d2      	uxtb	r2, r2
 80157e8:	4611      	mov	r1, r2
 80157ea:	6878      	ldr	r0, [r7, #4]
 80157ec:	4798      	blx	r3
  }

  return USBD_OK;
 80157ee:	2300      	movs	r3, #0
}
 80157f0:	4618      	mov	r0, r3
 80157f2:	3708      	adds	r7, #8
 80157f4:	46bd      	mov	sp, r7
 80157f6:	bd80      	pop	{r7, pc}

080157f8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80157f8:	b480      	push	{r7}
 80157fa:	b087      	sub	sp, #28
 80157fc:	af00      	add	r7, sp, #0
 80157fe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015804:	697b      	ldr	r3, [r7, #20]
 8015806:	781b      	ldrb	r3, [r3, #0]
 8015808:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801580a:	697b      	ldr	r3, [r7, #20]
 801580c:	3301      	adds	r3, #1
 801580e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015810:	697b      	ldr	r3, [r7, #20]
 8015812:	781b      	ldrb	r3, [r3, #0]
 8015814:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015816:	8a3b      	ldrh	r3, [r7, #16]
 8015818:	021b      	lsls	r3, r3, #8
 801581a:	b21a      	sxth	r2, r3
 801581c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015820:	4313      	orrs	r3, r2
 8015822:	b21b      	sxth	r3, r3
 8015824:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015826:	89fb      	ldrh	r3, [r7, #14]
}
 8015828:	4618      	mov	r0, r3
 801582a:	371c      	adds	r7, #28
 801582c:	46bd      	mov	sp, r7
 801582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015832:	4770      	bx	lr

08015834 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015834:	b580      	push	{r7, lr}
 8015836:	b084      	sub	sp, #16
 8015838:	af00      	add	r7, sp, #0
 801583a:	6078      	str	r0, [r7, #4]
 801583c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801583e:	2300      	movs	r3, #0
 8015840:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015842:	683b      	ldr	r3, [r7, #0]
 8015844:	781b      	ldrb	r3, [r3, #0]
 8015846:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801584a:	2b20      	cmp	r3, #32
 801584c:	d004      	beq.n	8015858 <USBD_StdDevReq+0x24>
 801584e:	2b40      	cmp	r3, #64	; 0x40
 8015850:	d002      	beq.n	8015858 <USBD_StdDevReq+0x24>
 8015852:	2b00      	cmp	r3, #0
 8015854:	d00a      	beq.n	801586c <USBD_StdDevReq+0x38>
 8015856:	e050      	b.n	80158fa <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801585e:	689b      	ldr	r3, [r3, #8]
 8015860:	6839      	ldr	r1, [r7, #0]
 8015862:	6878      	ldr	r0, [r7, #4]
 8015864:	4798      	blx	r3
 8015866:	4603      	mov	r3, r0
 8015868:	73fb      	strb	r3, [r7, #15]
    break;
 801586a:	e04b      	b.n	8015904 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 801586c:	683b      	ldr	r3, [r7, #0]
 801586e:	785b      	ldrb	r3, [r3, #1]
 8015870:	2b09      	cmp	r3, #9
 8015872:	d83c      	bhi.n	80158ee <USBD_StdDevReq+0xba>
 8015874:	a201      	add	r2, pc, #4	; (adr r2, 801587c <USBD_StdDevReq+0x48>)
 8015876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801587a:	bf00      	nop
 801587c:	080158d1 	.word	0x080158d1
 8015880:	080158e5 	.word	0x080158e5
 8015884:	080158ef 	.word	0x080158ef
 8015888:	080158db 	.word	0x080158db
 801588c:	080158ef 	.word	0x080158ef
 8015890:	080158af 	.word	0x080158af
 8015894:	080158a5 	.word	0x080158a5
 8015898:	080158ef 	.word	0x080158ef
 801589c:	080158c7 	.word	0x080158c7
 80158a0:	080158b9 	.word	0x080158b9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80158a4:	6839      	ldr	r1, [r7, #0]
 80158a6:	6878      	ldr	r0, [r7, #4]
 80158a8:	f000 f9ce 	bl	8015c48 <USBD_GetDescriptor>
      break;
 80158ac:	e024      	b.n	80158f8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80158ae:	6839      	ldr	r1, [r7, #0]
 80158b0:	6878      	ldr	r0, [r7, #4]
 80158b2:	f000 fb33 	bl	8015f1c <USBD_SetAddress>
      break;
 80158b6:	e01f      	b.n	80158f8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80158b8:	6839      	ldr	r1, [r7, #0]
 80158ba:	6878      	ldr	r0, [r7, #4]
 80158bc:	f000 fb70 	bl	8015fa0 <USBD_SetConfig>
 80158c0:	4603      	mov	r3, r0
 80158c2:	73fb      	strb	r3, [r7, #15]
      break;
 80158c4:	e018      	b.n	80158f8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80158c6:	6839      	ldr	r1, [r7, #0]
 80158c8:	6878      	ldr	r0, [r7, #4]
 80158ca:	f000 fc0d 	bl	80160e8 <USBD_GetConfig>
      break;
 80158ce:	e013      	b.n	80158f8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80158d0:	6839      	ldr	r1, [r7, #0]
 80158d2:	6878      	ldr	r0, [r7, #4]
 80158d4:	f000 fc3c 	bl	8016150 <USBD_GetStatus>
      break;
 80158d8:	e00e      	b.n	80158f8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80158da:	6839      	ldr	r1, [r7, #0]
 80158dc:	6878      	ldr	r0, [r7, #4]
 80158de:	f000 fc6a 	bl	80161b6 <USBD_SetFeature>
      break;
 80158e2:	e009      	b.n	80158f8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80158e4:	6839      	ldr	r1, [r7, #0]
 80158e6:	6878      	ldr	r0, [r7, #4]
 80158e8:	f000 fc79 	bl	80161de <USBD_ClrFeature>
      break;
 80158ec:	e004      	b.n	80158f8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80158ee:	6839      	ldr	r1, [r7, #0]
 80158f0:	6878      	ldr	r0, [r7, #4]
 80158f2:	f000 fccf 	bl	8016294 <USBD_CtlError>
      break;
 80158f6:	bf00      	nop
    }
    break;
 80158f8:	e004      	b.n	8015904 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80158fa:	6839      	ldr	r1, [r7, #0]
 80158fc:	6878      	ldr	r0, [r7, #4]
 80158fe:	f000 fcc9 	bl	8016294 <USBD_CtlError>
    break;
 8015902:	bf00      	nop
  }

  return ret;
 8015904:	7bfb      	ldrb	r3, [r7, #15]
}
 8015906:	4618      	mov	r0, r3
 8015908:	3710      	adds	r7, #16
 801590a:	46bd      	mov	sp, r7
 801590c:	bd80      	pop	{r7, pc}
 801590e:	bf00      	nop

08015910 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015910:	b580      	push	{r7, lr}
 8015912:	b084      	sub	sp, #16
 8015914:	af00      	add	r7, sp, #0
 8015916:	6078      	str	r0, [r7, #4]
 8015918:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801591a:	2300      	movs	r3, #0
 801591c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801591e:	683b      	ldr	r3, [r7, #0]
 8015920:	781b      	ldrb	r3, [r3, #0]
 8015922:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015926:	2b20      	cmp	r3, #32
 8015928:	d003      	beq.n	8015932 <USBD_StdItfReq+0x22>
 801592a:	2b40      	cmp	r3, #64	; 0x40
 801592c:	d001      	beq.n	8015932 <USBD_StdItfReq+0x22>
 801592e:	2b00      	cmp	r3, #0
 8015930:	d12a      	bne.n	8015988 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015938:	3b01      	subs	r3, #1
 801593a:	2b02      	cmp	r3, #2
 801593c:	d81d      	bhi.n	801597a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801593e:	683b      	ldr	r3, [r7, #0]
 8015940:	889b      	ldrh	r3, [r3, #4]
 8015942:	b2db      	uxtb	r3, r3
 8015944:	2b01      	cmp	r3, #1
 8015946:	d813      	bhi.n	8015970 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801594e:	689b      	ldr	r3, [r3, #8]
 8015950:	6839      	ldr	r1, [r7, #0]
 8015952:	6878      	ldr	r0, [r7, #4]
 8015954:	4798      	blx	r3
 8015956:	4603      	mov	r3, r0
 8015958:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 801595a:	683b      	ldr	r3, [r7, #0]
 801595c:	88db      	ldrh	r3, [r3, #6]
 801595e:	2b00      	cmp	r3, #0
 8015960:	d110      	bne.n	8015984 <USBD_StdItfReq+0x74>
 8015962:	7bfb      	ldrb	r3, [r7, #15]
 8015964:	2b00      	cmp	r3, #0
 8015966:	d10d      	bne.n	8015984 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8015968:	6878      	ldr	r0, [r7, #4]
 801596a:	f000 fd41 	bl	80163f0 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 801596e:	e009      	b.n	8015984 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8015970:	6839      	ldr	r1, [r7, #0]
 8015972:	6878      	ldr	r0, [r7, #4]
 8015974:	f000 fc8e 	bl	8016294 <USBD_CtlError>
      break;
 8015978:	e004      	b.n	8015984 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 801597a:	6839      	ldr	r1, [r7, #0]
 801597c:	6878      	ldr	r0, [r7, #4]
 801597e:	f000 fc89 	bl	8016294 <USBD_CtlError>
      break;
 8015982:	e000      	b.n	8015986 <USBD_StdItfReq+0x76>
      break;
 8015984:	bf00      	nop
    }
    break;
 8015986:	e004      	b.n	8015992 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8015988:	6839      	ldr	r1, [r7, #0]
 801598a:	6878      	ldr	r0, [r7, #4]
 801598c:	f000 fc82 	bl	8016294 <USBD_CtlError>
    break;
 8015990:	bf00      	nop
  }

  return ret;
 8015992:	7bfb      	ldrb	r3, [r7, #15]
}
 8015994:	4618      	mov	r0, r3
 8015996:	3710      	adds	r7, #16
 8015998:	46bd      	mov	sp, r7
 801599a:	bd80      	pop	{r7, pc}

0801599c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801599c:	b580      	push	{r7, lr}
 801599e:	b084      	sub	sp, #16
 80159a0:	af00      	add	r7, sp, #0
 80159a2:	6078      	str	r0, [r7, #4]
 80159a4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80159a6:	2300      	movs	r3, #0
 80159a8:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80159aa:	683b      	ldr	r3, [r7, #0]
 80159ac:	889b      	ldrh	r3, [r3, #4]
 80159ae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80159b0:	683b      	ldr	r3, [r7, #0]
 80159b2:	781b      	ldrb	r3, [r3, #0]
 80159b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80159b8:	2b20      	cmp	r3, #32
 80159ba:	d004      	beq.n	80159c6 <USBD_StdEPReq+0x2a>
 80159bc:	2b40      	cmp	r3, #64	; 0x40
 80159be:	d002      	beq.n	80159c6 <USBD_StdEPReq+0x2a>
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d00a      	beq.n	80159da <USBD_StdEPReq+0x3e>
 80159c4:	e135      	b.n	8015c32 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80159cc:	689b      	ldr	r3, [r3, #8]
 80159ce:	6839      	ldr	r1, [r7, #0]
 80159d0:	6878      	ldr	r0, [r7, #4]
 80159d2:	4798      	blx	r3
 80159d4:	4603      	mov	r3, r0
 80159d6:	73fb      	strb	r3, [r7, #15]
    break;
 80159d8:	e130      	b.n	8015c3c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80159da:	683b      	ldr	r3, [r7, #0]
 80159dc:	785b      	ldrb	r3, [r3, #1]
 80159de:	2b01      	cmp	r3, #1
 80159e0:	d03e      	beq.n	8015a60 <USBD_StdEPReq+0xc4>
 80159e2:	2b03      	cmp	r3, #3
 80159e4:	d002      	beq.n	80159ec <USBD_StdEPReq+0x50>
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d077      	beq.n	8015ada <USBD_StdEPReq+0x13e>
 80159ea:	e11c      	b.n	8015c26 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80159f2:	2b02      	cmp	r3, #2
 80159f4:	d002      	beq.n	80159fc <USBD_StdEPReq+0x60>
 80159f6:	2b03      	cmp	r3, #3
 80159f8:	d015      	beq.n	8015a26 <USBD_StdEPReq+0x8a>
 80159fa:	e02b      	b.n	8015a54 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80159fc:	7bbb      	ldrb	r3, [r7, #14]
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d00c      	beq.n	8015a1c <USBD_StdEPReq+0x80>
 8015a02:	7bbb      	ldrb	r3, [r7, #14]
 8015a04:	2b80      	cmp	r3, #128	; 0x80
 8015a06:	d009      	beq.n	8015a1c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8015a08:	7bbb      	ldrb	r3, [r7, #14]
 8015a0a:	4619      	mov	r1, r3
 8015a0c:	6878      	ldr	r0, [r7, #4]
 8015a0e:	f003 fbfa 	bl	8019206 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015a12:	2180      	movs	r1, #128	; 0x80
 8015a14:	6878      	ldr	r0, [r7, #4]
 8015a16:	f003 fbf6 	bl	8019206 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8015a1a:	e020      	b.n	8015a5e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8015a1c:	6839      	ldr	r1, [r7, #0]
 8015a1e:	6878      	ldr	r0, [r7, #4]
 8015a20:	f000 fc38 	bl	8016294 <USBD_CtlError>
        break;
 8015a24:	e01b      	b.n	8015a5e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8015a26:	683b      	ldr	r3, [r7, #0]
 8015a28:	885b      	ldrh	r3, [r3, #2]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d10e      	bne.n	8015a4c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015a2e:	7bbb      	ldrb	r3, [r7, #14]
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d00b      	beq.n	8015a4c <USBD_StdEPReq+0xb0>
 8015a34:	7bbb      	ldrb	r3, [r7, #14]
 8015a36:	2b80      	cmp	r3, #128	; 0x80
 8015a38:	d008      	beq.n	8015a4c <USBD_StdEPReq+0xb0>
 8015a3a:	683b      	ldr	r3, [r7, #0]
 8015a3c:	88db      	ldrh	r3, [r3, #6]
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d104      	bne.n	8015a4c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8015a42:	7bbb      	ldrb	r3, [r7, #14]
 8015a44:	4619      	mov	r1, r3
 8015a46:	6878      	ldr	r0, [r7, #4]
 8015a48:	f003 fbdd 	bl	8019206 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8015a4c:	6878      	ldr	r0, [r7, #4]
 8015a4e:	f000 fccf 	bl	80163f0 <USBD_CtlSendStatus>

        break;
 8015a52:	e004      	b.n	8015a5e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8015a54:	6839      	ldr	r1, [r7, #0]
 8015a56:	6878      	ldr	r0, [r7, #4]
 8015a58:	f000 fc1c 	bl	8016294 <USBD_CtlError>
        break;
 8015a5c:	bf00      	nop
      }
      break;
 8015a5e:	e0e7      	b.n	8015c30 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a66:	2b02      	cmp	r3, #2
 8015a68:	d002      	beq.n	8015a70 <USBD_StdEPReq+0xd4>
 8015a6a:	2b03      	cmp	r3, #3
 8015a6c:	d015      	beq.n	8015a9a <USBD_StdEPReq+0xfe>
 8015a6e:	e02d      	b.n	8015acc <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015a70:	7bbb      	ldrb	r3, [r7, #14]
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d00c      	beq.n	8015a90 <USBD_StdEPReq+0xf4>
 8015a76:	7bbb      	ldrb	r3, [r7, #14]
 8015a78:	2b80      	cmp	r3, #128	; 0x80
 8015a7a:	d009      	beq.n	8015a90 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8015a7c:	7bbb      	ldrb	r3, [r7, #14]
 8015a7e:	4619      	mov	r1, r3
 8015a80:	6878      	ldr	r0, [r7, #4]
 8015a82:	f003 fbc0 	bl	8019206 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015a86:	2180      	movs	r1, #128	; 0x80
 8015a88:	6878      	ldr	r0, [r7, #4]
 8015a8a:	f003 fbbc 	bl	8019206 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8015a8e:	e023      	b.n	8015ad8 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8015a90:	6839      	ldr	r1, [r7, #0]
 8015a92:	6878      	ldr	r0, [r7, #4]
 8015a94:	f000 fbfe 	bl	8016294 <USBD_CtlError>
        break;
 8015a98:	e01e      	b.n	8015ad8 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8015a9a:	683b      	ldr	r3, [r7, #0]
 8015a9c:	885b      	ldrh	r3, [r3, #2]
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d119      	bne.n	8015ad6 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8015aa2:	7bbb      	ldrb	r3, [r7, #14]
 8015aa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d004      	beq.n	8015ab6 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015aac:	7bbb      	ldrb	r3, [r7, #14]
 8015aae:	4619      	mov	r1, r3
 8015ab0:	6878      	ldr	r0, [r7, #4]
 8015ab2:	f003 fbc7 	bl	8019244 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8015ab6:	6878      	ldr	r0, [r7, #4]
 8015ab8:	f000 fc9a 	bl	80163f0 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015ac2:	689b      	ldr	r3, [r3, #8]
 8015ac4:	6839      	ldr	r1, [r7, #0]
 8015ac6:	6878      	ldr	r0, [r7, #4]
 8015ac8:	4798      	blx	r3
        }
        break;
 8015aca:	e004      	b.n	8015ad6 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8015acc:	6839      	ldr	r1, [r7, #0]
 8015ace:	6878      	ldr	r0, [r7, #4]
 8015ad0:	f000 fbe0 	bl	8016294 <USBD_CtlError>
        break;
 8015ad4:	e000      	b.n	8015ad8 <USBD_StdEPReq+0x13c>
        break;
 8015ad6:	bf00      	nop
      }
      break;
 8015ad8:	e0aa      	b.n	8015c30 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ae0:	2b02      	cmp	r3, #2
 8015ae2:	d002      	beq.n	8015aea <USBD_StdEPReq+0x14e>
 8015ae4:	2b03      	cmp	r3, #3
 8015ae6:	d032      	beq.n	8015b4e <USBD_StdEPReq+0x1b2>
 8015ae8:	e097      	b.n	8015c1a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015aea:	7bbb      	ldrb	r3, [r7, #14]
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d007      	beq.n	8015b00 <USBD_StdEPReq+0x164>
 8015af0:	7bbb      	ldrb	r3, [r7, #14]
 8015af2:	2b80      	cmp	r3, #128	; 0x80
 8015af4:	d004      	beq.n	8015b00 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8015af6:	6839      	ldr	r1, [r7, #0]
 8015af8:	6878      	ldr	r0, [r7, #4]
 8015afa:	f000 fbcb 	bl	8016294 <USBD_CtlError>
          break;
 8015afe:	e091      	b.n	8015c24 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015b00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	da0b      	bge.n	8015b20 <USBD_StdEPReq+0x184>
 8015b08:	7bbb      	ldrb	r3, [r7, #14]
 8015b0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015b0e:	4613      	mov	r3, r2
 8015b10:	009b      	lsls	r3, r3, #2
 8015b12:	4413      	add	r3, r2
 8015b14:	009b      	lsls	r3, r3, #2
 8015b16:	3310      	adds	r3, #16
 8015b18:	687a      	ldr	r2, [r7, #4]
 8015b1a:	4413      	add	r3, r2
 8015b1c:	3304      	adds	r3, #4
 8015b1e:	e00b      	b.n	8015b38 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8015b20:	7bbb      	ldrb	r3, [r7, #14]
 8015b22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015b26:	4613      	mov	r3, r2
 8015b28:	009b      	lsls	r3, r3, #2
 8015b2a:	4413      	add	r3, r2
 8015b2c:	009b      	lsls	r3, r3, #2
 8015b2e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015b32:	687a      	ldr	r2, [r7, #4]
 8015b34:	4413      	add	r3, r2
 8015b36:	3304      	adds	r3, #4
 8015b38:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8015b3a:	68bb      	ldr	r3, [r7, #8]
 8015b3c:	2200      	movs	r2, #0
 8015b3e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015b40:	68bb      	ldr	r3, [r7, #8]
 8015b42:	2202      	movs	r2, #2
 8015b44:	4619      	mov	r1, r3
 8015b46:	6878      	ldr	r0, [r7, #4]
 8015b48:	f000 fc15 	bl	8016376 <USBD_CtlSendData>
        break;
 8015b4c:	e06a      	b.n	8015c24 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8015b4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	da11      	bge.n	8015b7a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015b56:	7bbb      	ldrb	r3, [r7, #14]
 8015b58:	f003 020f 	and.w	r2, r3, #15
 8015b5c:	6879      	ldr	r1, [r7, #4]
 8015b5e:	4613      	mov	r3, r2
 8015b60:	009b      	lsls	r3, r3, #2
 8015b62:	4413      	add	r3, r2
 8015b64:	009b      	lsls	r3, r3, #2
 8015b66:	440b      	add	r3, r1
 8015b68:	3324      	adds	r3, #36	; 0x24
 8015b6a:	881b      	ldrh	r3, [r3, #0]
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d117      	bne.n	8015ba0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8015b70:	6839      	ldr	r1, [r7, #0]
 8015b72:	6878      	ldr	r0, [r7, #4]
 8015b74:	f000 fb8e 	bl	8016294 <USBD_CtlError>
            break;
 8015b78:	e054      	b.n	8015c24 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015b7a:	7bbb      	ldrb	r3, [r7, #14]
 8015b7c:	f003 020f 	and.w	r2, r3, #15
 8015b80:	6879      	ldr	r1, [r7, #4]
 8015b82:	4613      	mov	r3, r2
 8015b84:	009b      	lsls	r3, r3, #2
 8015b86:	4413      	add	r3, r2
 8015b88:	009b      	lsls	r3, r3, #2
 8015b8a:	440b      	add	r3, r1
 8015b8c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015b90:	881b      	ldrh	r3, [r3, #0]
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d104      	bne.n	8015ba0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8015b96:	6839      	ldr	r1, [r7, #0]
 8015b98:	6878      	ldr	r0, [r7, #4]
 8015b9a:	f000 fb7b 	bl	8016294 <USBD_CtlError>
            break;
 8015b9e:	e041      	b.n	8015c24 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015ba0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	da0b      	bge.n	8015bc0 <USBD_StdEPReq+0x224>
 8015ba8:	7bbb      	ldrb	r3, [r7, #14]
 8015baa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015bae:	4613      	mov	r3, r2
 8015bb0:	009b      	lsls	r3, r3, #2
 8015bb2:	4413      	add	r3, r2
 8015bb4:	009b      	lsls	r3, r3, #2
 8015bb6:	3310      	adds	r3, #16
 8015bb8:	687a      	ldr	r2, [r7, #4]
 8015bba:	4413      	add	r3, r2
 8015bbc:	3304      	adds	r3, #4
 8015bbe:	e00b      	b.n	8015bd8 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8015bc0:	7bbb      	ldrb	r3, [r7, #14]
 8015bc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015bc6:	4613      	mov	r3, r2
 8015bc8:	009b      	lsls	r3, r3, #2
 8015bca:	4413      	add	r3, r2
 8015bcc:	009b      	lsls	r3, r3, #2
 8015bce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015bd2:	687a      	ldr	r2, [r7, #4]
 8015bd4:	4413      	add	r3, r2
 8015bd6:	3304      	adds	r3, #4
 8015bd8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015bda:	7bbb      	ldrb	r3, [r7, #14]
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	d002      	beq.n	8015be6 <USBD_StdEPReq+0x24a>
 8015be0:	7bbb      	ldrb	r3, [r7, #14]
 8015be2:	2b80      	cmp	r3, #128	; 0x80
 8015be4:	d103      	bne.n	8015bee <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8015be6:	68bb      	ldr	r3, [r7, #8]
 8015be8:	2200      	movs	r2, #0
 8015bea:	601a      	str	r2, [r3, #0]
 8015bec:	e00e      	b.n	8015c0c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015bee:	7bbb      	ldrb	r3, [r7, #14]
 8015bf0:	4619      	mov	r1, r3
 8015bf2:	6878      	ldr	r0, [r7, #4]
 8015bf4:	f003 fb45 	bl	8019282 <USBD_LL_IsStallEP>
 8015bf8:	4603      	mov	r3, r0
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d003      	beq.n	8015c06 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8015bfe:	68bb      	ldr	r3, [r7, #8]
 8015c00:	2201      	movs	r2, #1
 8015c02:	601a      	str	r2, [r3, #0]
 8015c04:	e002      	b.n	8015c0c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8015c06:	68bb      	ldr	r3, [r7, #8]
 8015c08:	2200      	movs	r2, #0
 8015c0a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015c0c:	68bb      	ldr	r3, [r7, #8]
 8015c0e:	2202      	movs	r2, #2
 8015c10:	4619      	mov	r1, r3
 8015c12:	6878      	ldr	r0, [r7, #4]
 8015c14:	f000 fbaf 	bl	8016376 <USBD_CtlSendData>
          break;
 8015c18:	e004      	b.n	8015c24 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8015c1a:	6839      	ldr	r1, [r7, #0]
 8015c1c:	6878      	ldr	r0, [r7, #4]
 8015c1e:	f000 fb39 	bl	8016294 <USBD_CtlError>
        break;
 8015c22:	bf00      	nop
      }
      break;
 8015c24:	e004      	b.n	8015c30 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8015c26:	6839      	ldr	r1, [r7, #0]
 8015c28:	6878      	ldr	r0, [r7, #4]
 8015c2a:	f000 fb33 	bl	8016294 <USBD_CtlError>
      break;
 8015c2e:	bf00      	nop
    }
    break;
 8015c30:	e004      	b.n	8015c3c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8015c32:	6839      	ldr	r1, [r7, #0]
 8015c34:	6878      	ldr	r0, [r7, #4]
 8015c36:	f000 fb2d 	bl	8016294 <USBD_CtlError>
    break;
 8015c3a:	bf00      	nop
  }

  return ret;
 8015c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c3e:	4618      	mov	r0, r3
 8015c40:	3710      	adds	r7, #16
 8015c42:	46bd      	mov	sp, r7
 8015c44:	bd80      	pop	{r7, pc}
	...

08015c48 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015c48:	b580      	push	{r7, lr}
 8015c4a:	b084      	sub	sp, #16
 8015c4c:	af00      	add	r7, sp, #0
 8015c4e:	6078      	str	r0, [r7, #4]
 8015c50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015c52:	2300      	movs	r3, #0
 8015c54:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015c56:	2300      	movs	r3, #0
 8015c58:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015c5a:	2300      	movs	r3, #0
 8015c5c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015c5e:	683b      	ldr	r3, [r7, #0]
 8015c60:	885b      	ldrh	r3, [r3, #2]
 8015c62:	0a1b      	lsrs	r3, r3, #8
 8015c64:	b29b      	uxth	r3, r3
 8015c66:	3b01      	subs	r3, #1
 8015c68:	2b06      	cmp	r3, #6
 8015c6a:	f200 8128 	bhi.w	8015ebe <USBD_GetDescriptor+0x276>
 8015c6e:	a201      	add	r2, pc, #4	; (adr r2, 8015c74 <USBD_GetDescriptor+0x2c>)
 8015c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c74:	08015c91 	.word	0x08015c91
 8015c78:	08015ca9 	.word	0x08015ca9
 8015c7c:	08015ce9 	.word	0x08015ce9
 8015c80:	08015ebf 	.word	0x08015ebf
 8015c84:	08015ebf 	.word	0x08015ebf
 8015c88:	08015e5f 	.word	0x08015e5f
 8015c8c:	08015e8b 	.word	0x08015e8b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c96:	681b      	ldr	r3, [r3, #0]
 8015c98:	687a      	ldr	r2, [r7, #4]
 8015c9a:	7c12      	ldrb	r2, [r2, #16]
 8015c9c:	f107 0108 	add.w	r1, r7, #8
 8015ca0:	4610      	mov	r0, r2
 8015ca2:	4798      	blx	r3
 8015ca4:	60f8      	str	r0, [r7, #12]
    break;
 8015ca6:	e112      	b.n	8015ece <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	7c1b      	ldrb	r3, [r3, #16]
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	d10d      	bne.n	8015ccc <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015cb8:	f107 0208 	add.w	r2, r7, #8
 8015cbc:	4610      	mov	r0, r2
 8015cbe:	4798      	blx	r3
 8015cc0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015cc2:	68fb      	ldr	r3, [r7, #12]
 8015cc4:	3301      	adds	r3, #1
 8015cc6:	2202      	movs	r2, #2
 8015cc8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8015cca:	e100      	b.n	8015ece <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015cd4:	f107 0208 	add.w	r2, r7, #8
 8015cd8:	4610      	mov	r0, r2
 8015cda:	4798      	blx	r3
 8015cdc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015cde:	68fb      	ldr	r3, [r7, #12]
 8015ce0:	3301      	adds	r3, #1
 8015ce2:	2202      	movs	r2, #2
 8015ce4:	701a      	strb	r2, [r3, #0]
    break;
 8015ce6:	e0f2      	b.n	8015ece <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8015ce8:	683b      	ldr	r3, [r7, #0]
 8015cea:	885b      	ldrh	r3, [r3, #2]
 8015cec:	b2db      	uxtb	r3, r3
 8015cee:	2b05      	cmp	r3, #5
 8015cf0:	f200 80ac 	bhi.w	8015e4c <USBD_GetDescriptor+0x204>
 8015cf4:	a201      	add	r2, pc, #4	; (adr r2, 8015cfc <USBD_GetDescriptor+0xb4>)
 8015cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015cfa:	bf00      	nop
 8015cfc:	08015d15 	.word	0x08015d15
 8015d00:	08015d49 	.word	0x08015d49
 8015d04:	08015d7d 	.word	0x08015d7d
 8015d08:	08015db1 	.word	0x08015db1
 8015d0c:	08015de5 	.word	0x08015de5
 8015d10:	08015e19 	.word	0x08015e19
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d1a:	685b      	ldr	r3, [r3, #4]
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d00b      	beq.n	8015d38 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d26:	685b      	ldr	r3, [r3, #4]
 8015d28:	687a      	ldr	r2, [r7, #4]
 8015d2a:	7c12      	ldrb	r2, [r2, #16]
 8015d2c:	f107 0108 	add.w	r1, r7, #8
 8015d30:	4610      	mov	r0, r2
 8015d32:	4798      	blx	r3
 8015d34:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015d36:	e091      	b.n	8015e5c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015d38:	6839      	ldr	r1, [r7, #0]
 8015d3a:	6878      	ldr	r0, [r7, #4]
 8015d3c:	f000 faaa 	bl	8016294 <USBD_CtlError>
        err++;
 8015d40:	7afb      	ldrb	r3, [r7, #11]
 8015d42:	3301      	adds	r3, #1
 8015d44:	72fb      	strb	r3, [r7, #11]
      break;
 8015d46:	e089      	b.n	8015e5c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d4e:	689b      	ldr	r3, [r3, #8]
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d00b      	beq.n	8015d6c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d5a:	689b      	ldr	r3, [r3, #8]
 8015d5c:	687a      	ldr	r2, [r7, #4]
 8015d5e:	7c12      	ldrb	r2, [r2, #16]
 8015d60:	f107 0108 	add.w	r1, r7, #8
 8015d64:	4610      	mov	r0, r2
 8015d66:	4798      	blx	r3
 8015d68:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015d6a:	e077      	b.n	8015e5c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015d6c:	6839      	ldr	r1, [r7, #0]
 8015d6e:	6878      	ldr	r0, [r7, #4]
 8015d70:	f000 fa90 	bl	8016294 <USBD_CtlError>
        err++;
 8015d74:	7afb      	ldrb	r3, [r7, #11]
 8015d76:	3301      	adds	r3, #1
 8015d78:	72fb      	strb	r3, [r7, #11]
      break;
 8015d7a:	e06f      	b.n	8015e5c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d82:	68db      	ldr	r3, [r3, #12]
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d00b      	beq.n	8015da0 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d8e:	68db      	ldr	r3, [r3, #12]
 8015d90:	687a      	ldr	r2, [r7, #4]
 8015d92:	7c12      	ldrb	r2, [r2, #16]
 8015d94:	f107 0108 	add.w	r1, r7, #8
 8015d98:	4610      	mov	r0, r2
 8015d9a:	4798      	blx	r3
 8015d9c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015d9e:	e05d      	b.n	8015e5c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015da0:	6839      	ldr	r1, [r7, #0]
 8015da2:	6878      	ldr	r0, [r7, #4]
 8015da4:	f000 fa76 	bl	8016294 <USBD_CtlError>
        err++;
 8015da8:	7afb      	ldrb	r3, [r7, #11]
 8015daa:	3301      	adds	r3, #1
 8015dac:	72fb      	strb	r3, [r7, #11]
      break;
 8015dae:	e055      	b.n	8015e5c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015db6:	691b      	ldr	r3, [r3, #16]
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d00b      	beq.n	8015dd4 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015dc2:	691b      	ldr	r3, [r3, #16]
 8015dc4:	687a      	ldr	r2, [r7, #4]
 8015dc6:	7c12      	ldrb	r2, [r2, #16]
 8015dc8:	f107 0108 	add.w	r1, r7, #8
 8015dcc:	4610      	mov	r0, r2
 8015dce:	4798      	blx	r3
 8015dd0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015dd2:	e043      	b.n	8015e5c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015dd4:	6839      	ldr	r1, [r7, #0]
 8015dd6:	6878      	ldr	r0, [r7, #4]
 8015dd8:	f000 fa5c 	bl	8016294 <USBD_CtlError>
        err++;
 8015ddc:	7afb      	ldrb	r3, [r7, #11]
 8015dde:	3301      	adds	r3, #1
 8015de0:	72fb      	strb	r3, [r7, #11]
      break;
 8015de2:	e03b      	b.n	8015e5c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015dea:	695b      	ldr	r3, [r3, #20]
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d00b      	beq.n	8015e08 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015df6:	695b      	ldr	r3, [r3, #20]
 8015df8:	687a      	ldr	r2, [r7, #4]
 8015dfa:	7c12      	ldrb	r2, [r2, #16]
 8015dfc:	f107 0108 	add.w	r1, r7, #8
 8015e00:	4610      	mov	r0, r2
 8015e02:	4798      	blx	r3
 8015e04:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015e06:	e029      	b.n	8015e5c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015e08:	6839      	ldr	r1, [r7, #0]
 8015e0a:	6878      	ldr	r0, [r7, #4]
 8015e0c:	f000 fa42 	bl	8016294 <USBD_CtlError>
        err++;
 8015e10:	7afb      	ldrb	r3, [r7, #11]
 8015e12:	3301      	adds	r3, #1
 8015e14:	72fb      	strb	r3, [r7, #11]
      break;
 8015e16:	e021      	b.n	8015e5c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e1e:	699b      	ldr	r3, [r3, #24]
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d00b      	beq.n	8015e3c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e2a:	699b      	ldr	r3, [r3, #24]
 8015e2c:	687a      	ldr	r2, [r7, #4]
 8015e2e:	7c12      	ldrb	r2, [r2, #16]
 8015e30:	f107 0108 	add.w	r1, r7, #8
 8015e34:	4610      	mov	r0, r2
 8015e36:	4798      	blx	r3
 8015e38:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015e3a:	e00f      	b.n	8015e5c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015e3c:	6839      	ldr	r1, [r7, #0]
 8015e3e:	6878      	ldr	r0, [r7, #4]
 8015e40:	f000 fa28 	bl	8016294 <USBD_CtlError>
        err++;
 8015e44:	7afb      	ldrb	r3, [r7, #11]
 8015e46:	3301      	adds	r3, #1
 8015e48:	72fb      	strb	r3, [r7, #11]
      break;
 8015e4a:	e007      	b.n	8015e5c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8015e4c:	6839      	ldr	r1, [r7, #0]
 8015e4e:	6878      	ldr	r0, [r7, #4]
 8015e50:	f000 fa20 	bl	8016294 <USBD_CtlError>
      err++;
 8015e54:	7afb      	ldrb	r3, [r7, #11]
 8015e56:	3301      	adds	r3, #1
 8015e58:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8015e5a:	bf00      	nop
    }
    break;
 8015e5c:	e037      	b.n	8015ece <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	7c1b      	ldrb	r3, [r3, #16]
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d109      	bne.n	8015e7a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015e6e:	f107 0208 	add.w	r2, r7, #8
 8015e72:	4610      	mov	r0, r2
 8015e74:	4798      	blx	r3
 8015e76:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8015e78:	e029      	b.n	8015ece <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8015e7a:	6839      	ldr	r1, [r7, #0]
 8015e7c:	6878      	ldr	r0, [r7, #4]
 8015e7e:	f000 fa09 	bl	8016294 <USBD_CtlError>
      err++;
 8015e82:	7afb      	ldrb	r3, [r7, #11]
 8015e84:	3301      	adds	r3, #1
 8015e86:	72fb      	strb	r3, [r7, #11]
    break;
 8015e88:	e021      	b.n	8015ece <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	7c1b      	ldrb	r3, [r3, #16]
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	d10d      	bne.n	8015eae <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e9a:	f107 0208 	add.w	r2, r7, #8
 8015e9e:	4610      	mov	r0, r2
 8015ea0:	4798      	blx	r3
 8015ea2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015ea4:	68fb      	ldr	r3, [r7, #12]
 8015ea6:	3301      	adds	r3, #1
 8015ea8:	2207      	movs	r2, #7
 8015eaa:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8015eac:	e00f      	b.n	8015ece <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8015eae:	6839      	ldr	r1, [r7, #0]
 8015eb0:	6878      	ldr	r0, [r7, #4]
 8015eb2:	f000 f9ef 	bl	8016294 <USBD_CtlError>
      err++;
 8015eb6:	7afb      	ldrb	r3, [r7, #11]
 8015eb8:	3301      	adds	r3, #1
 8015eba:	72fb      	strb	r3, [r7, #11]
    break;
 8015ebc:	e007      	b.n	8015ece <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8015ebe:	6839      	ldr	r1, [r7, #0]
 8015ec0:	6878      	ldr	r0, [r7, #4]
 8015ec2:	f000 f9e7 	bl	8016294 <USBD_CtlError>
    err++;
 8015ec6:	7afb      	ldrb	r3, [r7, #11]
 8015ec8:	3301      	adds	r3, #1
 8015eca:	72fb      	strb	r3, [r7, #11]
    break;
 8015ecc:	bf00      	nop
  }

  if (err != 0U)
 8015ece:	7afb      	ldrb	r3, [r7, #11]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d11e      	bne.n	8015f12 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8015ed4:	683b      	ldr	r3, [r7, #0]
 8015ed6:	88db      	ldrh	r3, [r3, #6]
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d016      	beq.n	8015f0a <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8015edc:	893b      	ldrh	r3, [r7, #8]
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d00e      	beq.n	8015f00 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8015ee2:	683b      	ldr	r3, [r7, #0]
 8015ee4:	88da      	ldrh	r2, [r3, #6]
 8015ee6:	893b      	ldrh	r3, [r7, #8]
 8015ee8:	4293      	cmp	r3, r2
 8015eea:	bf28      	it	cs
 8015eec:	4613      	movcs	r3, r2
 8015eee:	b29b      	uxth	r3, r3
 8015ef0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8015ef2:	893b      	ldrh	r3, [r7, #8]
 8015ef4:	461a      	mov	r2, r3
 8015ef6:	68f9      	ldr	r1, [r7, #12]
 8015ef8:	6878      	ldr	r0, [r7, #4]
 8015efa:	f000 fa3c 	bl	8016376 <USBD_CtlSendData>
 8015efe:	e009      	b.n	8015f14 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8015f00:	6839      	ldr	r1, [r7, #0]
 8015f02:	6878      	ldr	r0, [r7, #4]
 8015f04:	f000 f9c6 	bl	8016294 <USBD_CtlError>
 8015f08:	e004      	b.n	8015f14 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8015f0a:	6878      	ldr	r0, [r7, #4]
 8015f0c:	f000 fa70 	bl	80163f0 <USBD_CtlSendStatus>
 8015f10:	e000      	b.n	8015f14 <USBD_GetDescriptor+0x2cc>
    return;
 8015f12:	bf00      	nop
    }
  }
}
 8015f14:	3710      	adds	r7, #16
 8015f16:	46bd      	mov	sp, r7
 8015f18:	bd80      	pop	{r7, pc}
 8015f1a:	bf00      	nop

08015f1c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f1c:	b580      	push	{r7, lr}
 8015f1e:	b084      	sub	sp, #16
 8015f20:	af00      	add	r7, sp, #0
 8015f22:	6078      	str	r0, [r7, #4]
 8015f24:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015f26:	683b      	ldr	r3, [r7, #0]
 8015f28:	889b      	ldrh	r3, [r3, #4]
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d130      	bne.n	8015f90 <USBD_SetAddress+0x74>
 8015f2e:	683b      	ldr	r3, [r7, #0]
 8015f30:	88db      	ldrh	r3, [r3, #6]
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d12c      	bne.n	8015f90 <USBD_SetAddress+0x74>
 8015f36:	683b      	ldr	r3, [r7, #0]
 8015f38:	885b      	ldrh	r3, [r3, #2]
 8015f3a:	2b7f      	cmp	r3, #127	; 0x7f
 8015f3c:	d828      	bhi.n	8015f90 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015f3e:	683b      	ldr	r3, [r7, #0]
 8015f40:	885b      	ldrh	r3, [r3, #2]
 8015f42:	b2db      	uxtb	r3, r3
 8015f44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015f48:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015f50:	2b03      	cmp	r3, #3
 8015f52:	d104      	bne.n	8015f5e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8015f54:	6839      	ldr	r1, [r7, #0]
 8015f56:	6878      	ldr	r0, [r7, #4]
 8015f58:	f000 f99c 	bl	8016294 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f5c:	e01c      	b.n	8015f98 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	7bfa      	ldrb	r2, [r7, #15]
 8015f62:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015f66:	7bfb      	ldrb	r3, [r7, #15]
 8015f68:	4619      	mov	r1, r3
 8015f6a:	6878      	ldr	r0, [r7, #4]
 8015f6c:	f003 f9b5 	bl	80192da <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015f70:	6878      	ldr	r0, [r7, #4]
 8015f72:	f000 fa3d 	bl	80163f0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015f76:	7bfb      	ldrb	r3, [r7, #15]
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d004      	beq.n	8015f86 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	2202      	movs	r2, #2
 8015f80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f84:	e008      	b.n	8015f98 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	2201      	movs	r2, #1
 8015f8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f8e:	e003      	b.n	8015f98 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015f90:	6839      	ldr	r1, [r7, #0]
 8015f92:	6878      	ldr	r0, [r7, #4]
 8015f94:	f000 f97e 	bl	8016294 <USBD_CtlError>
  }
}
 8015f98:	bf00      	nop
 8015f9a:	3710      	adds	r7, #16
 8015f9c:	46bd      	mov	sp, r7
 8015f9e:	bd80      	pop	{r7, pc}

08015fa0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015fa0:	b580      	push	{r7, lr}
 8015fa2:	b084      	sub	sp, #16
 8015fa4:	af00      	add	r7, sp, #0
 8015fa6:	6078      	str	r0, [r7, #4]
 8015fa8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015faa:	2300      	movs	r3, #0
 8015fac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015fae:	683b      	ldr	r3, [r7, #0]
 8015fb0:	885b      	ldrh	r3, [r3, #2]
 8015fb2:	b2da      	uxtb	r2, r3
 8015fb4:	4b4b      	ldr	r3, [pc, #300]	; (80160e4 <USBD_SetConfig+0x144>)
 8015fb6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015fb8:	4b4a      	ldr	r3, [pc, #296]	; (80160e4 <USBD_SetConfig+0x144>)
 8015fba:	781b      	ldrb	r3, [r3, #0]
 8015fbc:	2b01      	cmp	r3, #1
 8015fbe:	d905      	bls.n	8015fcc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015fc0:	6839      	ldr	r1, [r7, #0]
 8015fc2:	6878      	ldr	r0, [r7, #4]
 8015fc4:	f000 f966 	bl	8016294 <USBD_CtlError>
    return USBD_FAIL;
 8015fc8:	2303      	movs	r3, #3
 8015fca:	e087      	b.n	80160dc <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015fd2:	2b02      	cmp	r3, #2
 8015fd4:	d002      	beq.n	8015fdc <USBD_SetConfig+0x3c>
 8015fd6:	2b03      	cmp	r3, #3
 8015fd8:	d025      	beq.n	8016026 <USBD_SetConfig+0x86>
 8015fda:	e071      	b.n	80160c0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8015fdc:	4b41      	ldr	r3, [pc, #260]	; (80160e4 <USBD_SetConfig+0x144>)
 8015fde:	781b      	ldrb	r3, [r3, #0]
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d01c      	beq.n	801601e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8015fe4:	4b3f      	ldr	r3, [pc, #252]	; (80160e4 <USBD_SetConfig+0x144>)
 8015fe6:	781b      	ldrb	r3, [r3, #0]
 8015fe8:	461a      	mov	r2, r3
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8015fee:	4b3d      	ldr	r3, [pc, #244]	; (80160e4 <USBD_SetConfig+0x144>)
 8015ff0:	781b      	ldrb	r3, [r3, #0]
 8015ff2:	4619      	mov	r1, r3
 8015ff4:	6878      	ldr	r0, [r7, #4]
 8015ff6:	f7ff f9a8 	bl	801534a <USBD_SetClassConfig>
 8015ffa:	4603      	mov	r3, r0
 8015ffc:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8015ffe:	7bfb      	ldrb	r3, [r7, #15]
 8016000:	2b00      	cmp	r3, #0
 8016002:	d004      	beq.n	801600e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8016004:	6839      	ldr	r1, [r7, #0]
 8016006:	6878      	ldr	r0, [r7, #4]
 8016008:	f000 f944 	bl	8016294 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 801600c:	e065      	b.n	80160da <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 801600e:	6878      	ldr	r0, [r7, #4]
 8016010:	f000 f9ee 	bl	80163f0 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	2203      	movs	r2, #3
 8016018:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 801601c:	e05d      	b.n	80160da <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 801601e:	6878      	ldr	r0, [r7, #4]
 8016020:	f000 f9e6 	bl	80163f0 <USBD_CtlSendStatus>
    break;
 8016024:	e059      	b.n	80160da <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8016026:	4b2f      	ldr	r3, [pc, #188]	; (80160e4 <USBD_SetConfig+0x144>)
 8016028:	781b      	ldrb	r3, [r3, #0]
 801602a:	2b00      	cmp	r3, #0
 801602c:	d112      	bne.n	8016054 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	2202      	movs	r2, #2
 8016032:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8016036:	4b2b      	ldr	r3, [pc, #172]	; (80160e4 <USBD_SetConfig+0x144>)
 8016038:	781b      	ldrb	r3, [r3, #0]
 801603a:	461a      	mov	r2, r3
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016040:	4b28      	ldr	r3, [pc, #160]	; (80160e4 <USBD_SetConfig+0x144>)
 8016042:	781b      	ldrb	r3, [r3, #0]
 8016044:	4619      	mov	r1, r3
 8016046:	6878      	ldr	r0, [r7, #4]
 8016048:	f7ff f99b 	bl	8015382 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 801604c:	6878      	ldr	r0, [r7, #4]
 801604e:	f000 f9cf 	bl	80163f0 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8016052:	e042      	b.n	80160da <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8016054:	4b23      	ldr	r3, [pc, #140]	; (80160e4 <USBD_SetConfig+0x144>)
 8016056:	781b      	ldrb	r3, [r3, #0]
 8016058:	461a      	mov	r2, r3
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	685b      	ldr	r3, [r3, #4]
 801605e:	429a      	cmp	r2, r3
 8016060:	d02a      	beq.n	80160b8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	685b      	ldr	r3, [r3, #4]
 8016066:	b2db      	uxtb	r3, r3
 8016068:	4619      	mov	r1, r3
 801606a:	6878      	ldr	r0, [r7, #4]
 801606c:	f7ff f989 	bl	8015382 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8016070:	4b1c      	ldr	r3, [pc, #112]	; (80160e4 <USBD_SetConfig+0x144>)
 8016072:	781b      	ldrb	r3, [r3, #0]
 8016074:	461a      	mov	r2, r3
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 801607a:	4b1a      	ldr	r3, [pc, #104]	; (80160e4 <USBD_SetConfig+0x144>)
 801607c:	781b      	ldrb	r3, [r3, #0]
 801607e:	4619      	mov	r1, r3
 8016080:	6878      	ldr	r0, [r7, #4]
 8016082:	f7ff f962 	bl	801534a <USBD_SetClassConfig>
 8016086:	4603      	mov	r3, r0
 8016088:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 801608a:	7bfb      	ldrb	r3, [r7, #15]
 801608c:	2b00      	cmp	r3, #0
 801608e:	d00f      	beq.n	80160b0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8016090:	6839      	ldr	r1, [r7, #0]
 8016092:	6878      	ldr	r0, [r7, #4]
 8016094:	f000 f8fe 	bl	8016294 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	685b      	ldr	r3, [r3, #4]
 801609c:	b2db      	uxtb	r3, r3
 801609e:	4619      	mov	r1, r3
 80160a0:	6878      	ldr	r0, [r7, #4]
 80160a2:	f7ff f96e 	bl	8015382 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	2202      	movs	r2, #2
 80160aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80160ae:	e014      	b.n	80160da <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80160b0:	6878      	ldr	r0, [r7, #4]
 80160b2:	f000 f99d 	bl	80163f0 <USBD_CtlSendStatus>
    break;
 80160b6:	e010      	b.n	80160da <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80160b8:	6878      	ldr	r0, [r7, #4]
 80160ba:	f000 f999 	bl	80163f0 <USBD_CtlSendStatus>
    break;
 80160be:	e00c      	b.n	80160da <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80160c0:	6839      	ldr	r1, [r7, #0]
 80160c2:	6878      	ldr	r0, [r7, #4]
 80160c4:	f000 f8e6 	bl	8016294 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80160c8:	4b06      	ldr	r3, [pc, #24]	; (80160e4 <USBD_SetConfig+0x144>)
 80160ca:	781b      	ldrb	r3, [r3, #0]
 80160cc:	4619      	mov	r1, r3
 80160ce:	6878      	ldr	r0, [r7, #4]
 80160d0:	f7ff f957 	bl	8015382 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80160d4:	2303      	movs	r3, #3
 80160d6:	73fb      	strb	r3, [r7, #15]
    break;
 80160d8:	bf00      	nop
  }

  return ret;
 80160da:	7bfb      	ldrb	r3, [r7, #15]
}
 80160dc:	4618      	mov	r0, r3
 80160de:	3710      	adds	r7, #16
 80160e0:	46bd      	mov	sp, r7
 80160e2:	bd80      	pop	{r7, pc}
 80160e4:	24000b58 	.word	0x24000b58

080160e8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80160e8:	b580      	push	{r7, lr}
 80160ea:	b082      	sub	sp, #8
 80160ec:	af00      	add	r7, sp, #0
 80160ee:	6078      	str	r0, [r7, #4]
 80160f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80160f2:	683b      	ldr	r3, [r7, #0]
 80160f4:	88db      	ldrh	r3, [r3, #6]
 80160f6:	2b01      	cmp	r3, #1
 80160f8:	d004      	beq.n	8016104 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80160fa:	6839      	ldr	r1, [r7, #0]
 80160fc:	6878      	ldr	r0, [r7, #4]
 80160fe:	f000 f8c9 	bl	8016294 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8016102:	e021      	b.n	8016148 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801610a:	2b01      	cmp	r3, #1
 801610c:	db17      	blt.n	801613e <USBD_GetConfig+0x56>
 801610e:	2b02      	cmp	r3, #2
 8016110:	dd02      	ble.n	8016118 <USBD_GetConfig+0x30>
 8016112:	2b03      	cmp	r3, #3
 8016114:	d00b      	beq.n	801612e <USBD_GetConfig+0x46>
 8016116:	e012      	b.n	801613e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	2200      	movs	r2, #0
 801611c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	3308      	adds	r3, #8
 8016122:	2201      	movs	r2, #1
 8016124:	4619      	mov	r1, r3
 8016126:	6878      	ldr	r0, [r7, #4]
 8016128:	f000 f925 	bl	8016376 <USBD_CtlSendData>
      break;
 801612c:	e00c      	b.n	8016148 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	3304      	adds	r3, #4
 8016132:	2201      	movs	r2, #1
 8016134:	4619      	mov	r1, r3
 8016136:	6878      	ldr	r0, [r7, #4]
 8016138:	f000 f91d 	bl	8016376 <USBD_CtlSendData>
      break;
 801613c:	e004      	b.n	8016148 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 801613e:	6839      	ldr	r1, [r7, #0]
 8016140:	6878      	ldr	r0, [r7, #4]
 8016142:	f000 f8a7 	bl	8016294 <USBD_CtlError>
      break;
 8016146:	bf00      	nop
}
 8016148:	bf00      	nop
 801614a:	3708      	adds	r7, #8
 801614c:	46bd      	mov	sp, r7
 801614e:	bd80      	pop	{r7, pc}

08016150 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016150:	b580      	push	{r7, lr}
 8016152:	b082      	sub	sp, #8
 8016154:	af00      	add	r7, sp, #0
 8016156:	6078      	str	r0, [r7, #4]
 8016158:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016160:	3b01      	subs	r3, #1
 8016162:	2b02      	cmp	r3, #2
 8016164:	d81e      	bhi.n	80161a4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8016166:	683b      	ldr	r3, [r7, #0]
 8016168:	88db      	ldrh	r3, [r3, #6]
 801616a:	2b02      	cmp	r3, #2
 801616c:	d004      	beq.n	8016178 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 801616e:	6839      	ldr	r1, [r7, #0]
 8016170:	6878      	ldr	r0, [r7, #4]
 8016172:	f000 f88f 	bl	8016294 <USBD_CtlError>
      break;
 8016176:	e01a      	b.n	80161ae <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	2201      	movs	r2, #1
 801617c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8016184:	2b00      	cmp	r3, #0
 8016186:	d005      	beq.n	8016194 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	68db      	ldr	r3, [r3, #12]
 801618c:	f043 0202 	orr.w	r2, r3, #2
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	330c      	adds	r3, #12
 8016198:	2202      	movs	r2, #2
 801619a:	4619      	mov	r1, r3
 801619c:	6878      	ldr	r0, [r7, #4]
 801619e:	f000 f8ea 	bl	8016376 <USBD_CtlSendData>
    break;
 80161a2:	e004      	b.n	80161ae <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80161a4:	6839      	ldr	r1, [r7, #0]
 80161a6:	6878      	ldr	r0, [r7, #4]
 80161a8:	f000 f874 	bl	8016294 <USBD_CtlError>
    break;
 80161ac:	bf00      	nop
  }
}
 80161ae:	bf00      	nop
 80161b0:	3708      	adds	r7, #8
 80161b2:	46bd      	mov	sp, r7
 80161b4:	bd80      	pop	{r7, pc}

080161b6 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80161b6:	b580      	push	{r7, lr}
 80161b8:	b082      	sub	sp, #8
 80161ba:	af00      	add	r7, sp, #0
 80161bc:	6078      	str	r0, [r7, #4]
 80161be:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80161c0:	683b      	ldr	r3, [r7, #0]
 80161c2:	885b      	ldrh	r3, [r3, #2]
 80161c4:	2b01      	cmp	r3, #1
 80161c6:	d106      	bne.n	80161d6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	2201      	movs	r2, #1
 80161cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80161d0:	6878      	ldr	r0, [r7, #4]
 80161d2:	f000 f90d 	bl	80163f0 <USBD_CtlSendStatus>
  }
}
 80161d6:	bf00      	nop
 80161d8:	3708      	adds	r7, #8
 80161da:	46bd      	mov	sp, r7
 80161dc:	bd80      	pop	{r7, pc}

080161de <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80161de:	b580      	push	{r7, lr}
 80161e0:	b082      	sub	sp, #8
 80161e2:	af00      	add	r7, sp, #0
 80161e4:	6078      	str	r0, [r7, #4]
 80161e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80161ee:	3b01      	subs	r3, #1
 80161f0:	2b02      	cmp	r3, #2
 80161f2:	d80b      	bhi.n	801620c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80161f4:	683b      	ldr	r3, [r7, #0]
 80161f6:	885b      	ldrh	r3, [r3, #2]
 80161f8:	2b01      	cmp	r3, #1
 80161fa:	d10c      	bne.n	8016216 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	2200      	movs	r2, #0
 8016200:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8016204:	6878      	ldr	r0, [r7, #4]
 8016206:	f000 f8f3 	bl	80163f0 <USBD_CtlSendStatus>
      }
      break;
 801620a:	e004      	b.n	8016216 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 801620c:	6839      	ldr	r1, [r7, #0]
 801620e:	6878      	ldr	r0, [r7, #4]
 8016210:	f000 f840 	bl	8016294 <USBD_CtlError>
      break;
 8016214:	e000      	b.n	8016218 <USBD_ClrFeature+0x3a>
      break;
 8016216:	bf00      	nop
  }
}
 8016218:	bf00      	nop
 801621a:	3708      	adds	r7, #8
 801621c:	46bd      	mov	sp, r7
 801621e:	bd80      	pop	{r7, pc}

08016220 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016220:	b580      	push	{r7, lr}
 8016222:	b084      	sub	sp, #16
 8016224:	af00      	add	r7, sp, #0
 8016226:	6078      	str	r0, [r7, #4]
 8016228:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801622a:	683b      	ldr	r3, [r7, #0]
 801622c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	781a      	ldrb	r2, [r3, #0]
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	3301      	adds	r3, #1
 801623a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801623c:	68fb      	ldr	r3, [r7, #12]
 801623e:	781a      	ldrb	r2, [r3, #0]
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	3301      	adds	r3, #1
 8016248:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801624a:	68f8      	ldr	r0, [r7, #12]
 801624c:	f7ff fad4 	bl	80157f8 <SWAPBYTE>
 8016250:	4603      	mov	r3, r0
 8016252:	461a      	mov	r2, r3
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8016258:	68fb      	ldr	r3, [r7, #12]
 801625a:	3301      	adds	r3, #1
 801625c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	3301      	adds	r3, #1
 8016262:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8016264:	68f8      	ldr	r0, [r7, #12]
 8016266:	f7ff fac7 	bl	80157f8 <SWAPBYTE>
 801626a:	4603      	mov	r3, r0
 801626c:	461a      	mov	r2, r3
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016272:	68fb      	ldr	r3, [r7, #12]
 8016274:	3301      	adds	r3, #1
 8016276:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016278:	68fb      	ldr	r3, [r7, #12]
 801627a:	3301      	adds	r3, #1
 801627c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801627e:	68f8      	ldr	r0, [r7, #12]
 8016280:	f7ff faba 	bl	80157f8 <SWAPBYTE>
 8016284:	4603      	mov	r3, r0
 8016286:	461a      	mov	r2, r3
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	80da      	strh	r2, [r3, #6]
}
 801628c:	bf00      	nop
 801628e:	3710      	adds	r7, #16
 8016290:	46bd      	mov	sp, r7
 8016292:	bd80      	pop	{r7, pc}

08016294 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016294:	b580      	push	{r7, lr}
 8016296:	b082      	sub	sp, #8
 8016298:	af00      	add	r7, sp, #0
 801629a:	6078      	str	r0, [r7, #4]
 801629c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801629e:	2180      	movs	r1, #128	; 0x80
 80162a0:	6878      	ldr	r0, [r7, #4]
 80162a2:	f002 ffb0 	bl	8019206 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80162a6:	2100      	movs	r1, #0
 80162a8:	6878      	ldr	r0, [r7, #4]
 80162aa:	f002 ffac 	bl	8019206 <USBD_LL_StallEP>
}
 80162ae:	bf00      	nop
 80162b0:	3708      	adds	r7, #8
 80162b2:	46bd      	mov	sp, r7
 80162b4:	bd80      	pop	{r7, pc}

080162b6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80162b6:	b580      	push	{r7, lr}
 80162b8:	b086      	sub	sp, #24
 80162ba:	af00      	add	r7, sp, #0
 80162bc:	60f8      	str	r0, [r7, #12]
 80162be:	60b9      	str	r1, [r7, #8]
 80162c0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80162c2:	2300      	movs	r3, #0
 80162c4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80162c6:	68fb      	ldr	r3, [r7, #12]
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d036      	beq.n	801633a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80162cc:	68fb      	ldr	r3, [r7, #12]
 80162ce:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80162d0:	6938      	ldr	r0, [r7, #16]
 80162d2:	f000 f836 	bl	8016342 <USBD_GetLen>
 80162d6:	4603      	mov	r3, r0
 80162d8:	3301      	adds	r3, #1
 80162da:	b29b      	uxth	r3, r3
 80162dc:	005b      	lsls	r3, r3, #1
 80162de:	b29a      	uxth	r2, r3
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80162e4:	7dfb      	ldrb	r3, [r7, #23]
 80162e6:	68ba      	ldr	r2, [r7, #8]
 80162e8:	4413      	add	r3, r2
 80162ea:	687a      	ldr	r2, [r7, #4]
 80162ec:	7812      	ldrb	r2, [r2, #0]
 80162ee:	701a      	strb	r2, [r3, #0]
  idx++;
 80162f0:	7dfb      	ldrb	r3, [r7, #23]
 80162f2:	3301      	adds	r3, #1
 80162f4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80162f6:	7dfb      	ldrb	r3, [r7, #23]
 80162f8:	68ba      	ldr	r2, [r7, #8]
 80162fa:	4413      	add	r3, r2
 80162fc:	2203      	movs	r2, #3
 80162fe:	701a      	strb	r2, [r3, #0]
  idx++;
 8016300:	7dfb      	ldrb	r3, [r7, #23]
 8016302:	3301      	adds	r3, #1
 8016304:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016306:	e013      	b.n	8016330 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8016308:	7dfb      	ldrb	r3, [r7, #23]
 801630a:	68ba      	ldr	r2, [r7, #8]
 801630c:	4413      	add	r3, r2
 801630e:	693a      	ldr	r2, [r7, #16]
 8016310:	7812      	ldrb	r2, [r2, #0]
 8016312:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016314:	693b      	ldr	r3, [r7, #16]
 8016316:	3301      	adds	r3, #1
 8016318:	613b      	str	r3, [r7, #16]
    idx++;
 801631a:	7dfb      	ldrb	r3, [r7, #23]
 801631c:	3301      	adds	r3, #1
 801631e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016320:	7dfb      	ldrb	r3, [r7, #23]
 8016322:	68ba      	ldr	r2, [r7, #8]
 8016324:	4413      	add	r3, r2
 8016326:	2200      	movs	r2, #0
 8016328:	701a      	strb	r2, [r3, #0]
    idx++;
 801632a:	7dfb      	ldrb	r3, [r7, #23]
 801632c:	3301      	adds	r3, #1
 801632e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016330:	693b      	ldr	r3, [r7, #16]
 8016332:	781b      	ldrb	r3, [r3, #0]
 8016334:	2b00      	cmp	r3, #0
 8016336:	d1e7      	bne.n	8016308 <USBD_GetString+0x52>
 8016338:	e000      	b.n	801633c <USBD_GetString+0x86>
    return;
 801633a:	bf00      	nop
  }
}
 801633c:	3718      	adds	r7, #24
 801633e:	46bd      	mov	sp, r7
 8016340:	bd80      	pop	{r7, pc}

08016342 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016342:	b480      	push	{r7}
 8016344:	b085      	sub	sp, #20
 8016346:	af00      	add	r7, sp, #0
 8016348:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801634a:	2300      	movs	r3, #0
 801634c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016352:	e005      	b.n	8016360 <USBD_GetLen+0x1e>
  {
    len++;
 8016354:	7bfb      	ldrb	r3, [r7, #15]
 8016356:	3301      	adds	r3, #1
 8016358:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801635a:	68bb      	ldr	r3, [r7, #8]
 801635c:	3301      	adds	r3, #1
 801635e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016360:	68bb      	ldr	r3, [r7, #8]
 8016362:	781b      	ldrb	r3, [r3, #0]
 8016364:	2b00      	cmp	r3, #0
 8016366:	d1f5      	bne.n	8016354 <USBD_GetLen+0x12>
  }

  return len;
 8016368:	7bfb      	ldrb	r3, [r7, #15]
}
 801636a:	4618      	mov	r0, r3
 801636c:	3714      	adds	r7, #20
 801636e:	46bd      	mov	sp, r7
 8016370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016374:	4770      	bx	lr

08016376 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016376:	b580      	push	{r7, lr}
 8016378:	b084      	sub	sp, #16
 801637a:	af00      	add	r7, sp, #0
 801637c:	60f8      	str	r0, [r7, #12]
 801637e:	60b9      	str	r1, [r7, #8]
 8016380:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	2202      	movs	r2, #2
 8016386:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801638a:	68fb      	ldr	r3, [r7, #12]
 801638c:	687a      	ldr	r2, [r7, #4]
 801638e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8016390:	68fb      	ldr	r3, [r7, #12]
 8016392:	687a      	ldr	r2, [r7, #4]
 8016394:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	68ba      	ldr	r2, [r7, #8]
 801639a:	2100      	movs	r1, #0
 801639c:	68f8      	ldr	r0, [r7, #12]
 801639e:	f002 ffbb 	bl	8019318 <USBD_LL_Transmit>

  return USBD_OK;
 80163a2:	2300      	movs	r3, #0
}
 80163a4:	4618      	mov	r0, r3
 80163a6:	3710      	adds	r7, #16
 80163a8:	46bd      	mov	sp, r7
 80163aa:	bd80      	pop	{r7, pc}

080163ac <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80163ac:	b580      	push	{r7, lr}
 80163ae:	b084      	sub	sp, #16
 80163b0:	af00      	add	r7, sp, #0
 80163b2:	60f8      	str	r0, [r7, #12]
 80163b4:	60b9      	str	r1, [r7, #8]
 80163b6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	68ba      	ldr	r2, [r7, #8]
 80163bc:	2100      	movs	r1, #0
 80163be:	68f8      	ldr	r0, [r7, #12]
 80163c0:	f002 ffaa 	bl	8019318 <USBD_LL_Transmit>

  return USBD_OK;
 80163c4:	2300      	movs	r3, #0
}
 80163c6:	4618      	mov	r0, r3
 80163c8:	3710      	adds	r7, #16
 80163ca:	46bd      	mov	sp, r7
 80163cc:	bd80      	pop	{r7, pc}

080163ce <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80163ce:	b580      	push	{r7, lr}
 80163d0:	b084      	sub	sp, #16
 80163d2:	af00      	add	r7, sp, #0
 80163d4:	60f8      	str	r0, [r7, #12]
 80163d6:	60b9      	str	r1, [r7, #8]
 80163d8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	68ba      	ldr	r2, [r7, #8]
 80163de:	2100      	movs	r1, #0
 80163e0:	68f8      	ldr	r0, [r7, #12]
 80163e2:	f002 ffba 	bl	801935a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80163e6:	2300      	movs	r3, #0
}
 80163e8:	4618      	mov	r0, r3
 80163ea:	3710      	adds	r7, #16
 80163ec:	46bd      	mov	sp, r7
 80163ee:	bd80      	pop	{r7, pc}

080163f0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80163f0:	b580      	push	{r7, lr}
 80163f2:	b082      	sub	sp, #8
 80163f4:	af00      	add	r7, sp, #0
 80163f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	2204      	movs	r2, #4
 80163fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016400:	2300      	movs	r3, #0
 8016402:	2200      	movs	r2, #0
 8016404:	2100      	movs	r1, #0
 8016406:	6878      	ldr	r0, [r7, #4]
 8016408:	f002 ff86 	bl	8019318 <USBD_LL_Transmit>

  return USBD_OK;
 801640c:	2300      	movs	r3, #0
}
 801640e:	4618      	mov	r0, r3
 8016410:	3708      	adds	r7, #8
 8016412:	46bd      	mov	sp, r7
 8016414:	bd80      	pop	{r7, pc}

08016416 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016416:	b580      	push	{r7, lr}
 8016418:	b082      	sub	sp, #8
 801641a:	af00      	add	r7, sp, #0
 801641c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	2205      	movs	r2, #5
 8016422:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016426:	2300      	movs	r3, #0
 8016428:	2200      	movs	r2, #0
 801642a:	2100      	movs	r1, #0
 801642c:	6878      	ldr	r0, [r7, #4]
 801642e:	f002 ff94 	bl	801935a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016432:	2300      	movs	r3, #0
}
 8016434:	4618      	mov	r0, r3
 8016436:	3708      	adds	r7, #8
 8016438:	46bd      	mov	sp, r7
 801643a:	bd80      	pop	{r7, pc}

0801643c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801643c:	b580      	push	{r7, lr}
 801643e:	b084      	sub	sp, #16
 8016440:	af00      	add	r7, sp, #0
 8016442:	4603      	mov	r3, r0
 8016444:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8016446:	79fb      	ldrb	r3, [r7, #7]
 8016448:	4a08      	ldr	r2, [pc, #32]	; (801646c <disk_status+0x30>)
 801644a:	009b      	lsls	r3, r3, #2
 801644c:	4413      	add	r3, r2
 801644e:	685b      	ldr	r3, [r3, #4]
 8016450:	685b      	ldr	r3, [r3, #4]
 8016452:	79fa      	ldrb	r2, [r7, #7]
 8016454:	4905      	ldr	r1, [pc, #20]	; (801646c <disk_status+0x30>)
 8016456:	440a      	add	r2, r1
 8016458:	7a12      	ldrb	r2, [r2, #8]
 801645a:	4610      	mov	r0, r2
 801645c:	4798      	blx	r3
 801645e:	4603      	mov	r3, r0
 8016460:	73fb      	strb	r3, [r7, #15]
  return stat;
 8016462:	7bfb      	ldrb	r3, [r7, #15]
}
 8016464:	4618      	mov	r0, r3
 8016466:	3710      	adds	r7, #16
 8016468:	46bd      	mov	sp, r7
 801646a:	bd80      	pop	{r7, pc}
 801646c:	24000b84 	.word	0x24000b84

08016470 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8016470:	b580      	push	{r7, lr}
 8016472:	b084      	sub	sp, #16
 8016474:	af00      	add	r7, sp, #0
 8016476:	4603      	mov	r3, r0
 8016478:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801647a:	2300      	movs	r3, #0
 801647c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801647e:	79fb      	ldrb	r3, [r7, #7]
 8016480:	4a0d      	ldr	r2, [pc, #52]	; (80164b8 <disk_initialize+0x48>)
 8016482:	5cd3      	ldrb	r3, [r2, r3]
 8016484:	2b00      	cmp	r3, #0
 8016486:	d111      	bne.n	80164ac <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8016488:	79fb      	ldrb	r3, [r7, #7]
 801648a:	4a0b      	ldr	r2, [pc, #44]	; (80164b8 <disk_initialize+0x48>)
 801648c:	2101      	movs	r1, #1
 801648e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8016490:	79fb      	ldrb	r3, [r7, #7]
 8016492:	4a09      	ldr	r2, [pc, #36]	; (80164b8 <disk_initialize+0x48>)
 8016494:	009b      	lsls	r3, r3, #2
 8016496:	4413      	add	r3, r2
 8016498:	685b      	ldr	r3, [r3, #4]
 801649a:	681b      	ldr	r3, [r3, #0]
 801649c:	79fa      	ldrb	r2, [r7, #7]
 801649e:	4906      	ldr	r1, [pc, #24]	; (80164b8 <disk_initialize+0x48>)
 80164a0:	440a      	add	r2, r1
 80164a2:	7a12      	ldrb	r2, [r2, #8]
 80164a4:	4610      	mov	r0, r2
 80164a6:	4798      	blx	r3
 80164a8:	4603      	mov	r3, r0
 80164aa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80164ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80164ae:	4618      	mov	r0, r3
 80164b0:	3710      	adds	r7, #16
 80164b2:	46bd      	mov	sp, r7
 80164b4:	bd80      	pop	{r7, pc}
 80164b6:	bf00      	nop
 80164b8:	24000b84 	.word	0x24000b84

080164bc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80164bc:	b590      	push	{r4, r7, lr}
 80164be:	b087      	sub	sp, #28
 80164c0:	af00      	add	r7, sp, #0
 80164c2:	60b9      	str	r1, [r7, #8]
 80164c4:	607a      	str	r2, [r7, #4]
 80164c6:	603b      	str	r3, [r7, #0]
 80164c8:	4603      	mov	r3, r0
 80164ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80164cc:	7bfb      	ldrb	r3, [r7, #15]
 80164ce:	4a0a      	ldr	r2, [pc, #40]	; (80164f8 <disk_read+0x3c>)
 80164d0:	009b      	lsls	r3, r3, #2
 80164d2:	4413      	add	r3, r2
 80164d4:	685b      	ldr	r3, [r3, #4]
 80164d6:	689c      	ldr	r4, [r3, #8]
 80164d8:	7bfb      	ldrb	r3, [r7, #15]
 80164da:	4a07      	ldr	r2, [pc, #28]	; (80164f8 <disk_read+0x3c>)
 80164dc:	4413      	add	r3, r2
 80164de:	7a18      	ldrb	r0, [r3, #8]
 80164e0:	683b      	ldr	r3, [r7, #0]
 80164e2:	687a      	ldr	r2, [r7, #4]
 80164e4:	68b9      	ldr	r1, [r7, #8]
 80164e6:	47a0      	blx	r4
 80164e8:	4603      	mov	r3, r0
 80164ea:	75fb      	strb	r3, [r7, #23]
  return res;
 80164ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80164ee:	4618      	mov	r0, r3
 80164f0:	371c      	adds	r7, #28
 80164f2:	46bd      	mov	sp, r7
 80164f4:	bd90      	pop	{r4, r7, pc}
 80164f6:	bf00      	nop
 80164f8:	24000b84 	.word	0x24000b84

080164fc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80164fc:	b590      	push	{r4, r7, lr}
 80164fe:	b087      	sub	sp, #28
 8016500:	af00      	add	r7, sp, #0
 8016502:	60b9      	str	r1, [r7, #8]
 8016504:	607a      	str	r2, [r7, #4]
 8016506:	603b      	str	r3, [r7, #0]
 8016508:	4603      	mov	r3, r0
 801650a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801650c:	7bfb      	ldrb	r3, [r7, #15]
 801650e:	4a0a      	ldr	r2, [pc, #40]	; (8016538 <disk_write+0x3c>)
 8016510:	009b      	lsls	r3, r3, #2
 8016512:	4413      	add	r3, r2
 8016514:	685b      	ldr	r3, [r3, #4]
 8016516:	68dc      	ldr	r4, [r3, #12]
 8016518:	7bfb      	ldrb	r3, [r7, #15]
 801651a:	4a07      	ldr	r2, [pc, #28]	; (8016538 <disk_write+0x3c>)
 801651c:	4413      	add	r3, r2
 801651e:	7a18      	ldrb	r0, [r3, #8]
 8016520:	683b      	ldr	r3, [r7, #0]
 8016522:	687a      	ldr	r2, [r7, #4]
 8016524:	68b9      	ldr	r1, [r7, #8]
 8016526:	47a0      	blx	r4
 8016528:	4603      	mov	r3, r0
 801652a:	75fb      	strb	r3, [r7, #23]
  return res;
 801652c:	7dfb      	ldrb	r3, [r7, #23]
}
 801652e:	4618      	mov	r0, r3
 8016530:	371c      	adds	r7, #28
 8016532:	46bd      	mov	sp, r7
 8016534:	bd90      	pop	{r4, r7, pc}
 8016536:	bf00      	nop
 8016538:	24000b84 	.word	0x24000b84

0801653c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801653c:	b580      	push	{r7, lr}
 801653e:	b084      	sub	sp, #16
 8016540:	af00      	add	r7, sp, #0
 8016542:	4603      	mov	r3, r0
 8016544:	603a      	str	r2, [r7, #0]
 8016546:	71fb      	strb	r3, [r7, #7]
 8016548:	460b      	mov	r3, r1
 801654a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801654c:	79fb      	ldrb	r3, [r7, #7]
 801654e:	4a09      	ldr	r2, [pc, #36]	; (8016574 <disk_ioctl+0x38>)
 8016550:	009b      	lsls	r3, r3, #2
 8016552:	4413      	add	r3, r2
 8016554:	685b      	ldr	r3, [r3, #4]
 8016556:	691b      	ldr	r3, [r3, #16]
 8016558:	79fa      	ldrb	r2, [r7, #7]
 801655a:	4906      	ldr	r1, [pc, #24]	; (8016574 <disk_ioctl+0x38>)
 801655c:	440a      	add	r2, r1
 801655e:	7a10      	ldrb	r0, [r2, #8]
 8016560:	79b9      	ldrb	r1, [r7, #6]
 8016562:	683a      	ldr	r2, [r7, #0]
 8016564:	4798      	blx	r3
 8016566:	4603      	mov	r3, r0
 8016568:	73fb      	strb	r3, [r7, #15]
  return res;
 801656a:	7bfb      	ldrb	r3, [r7, #15]
}
 801656c:	4618      	mov	r0, r3
 801656e:	3710      	adds	r7, #16
 8016570:	46bd      	mov	sp, r7
 8016572:	bd80      	pop	{r7, pc}
 8016574:	24000b84 	.word	0x24000b84

08016578 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8016578:	b480      	push	{r7}
 801657a:	b085      	sub	sp, #20
 801657c:	af00      	add	r7, sp, #0
 801657e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	3301      	adds	r3, #1
 8016584:	781b      	ldrb	r3, [r3, #0]
 8016586:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8016588:	89fb      	ldrh	r3, [r7, #14]
 801658a:	021b      	lsls	r3, r3, #8
 801658c:	b21a      	sxth	r2, r3
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	781b      	ldrb	r3, [r3, #0]
 8016592:	b21b      	sxth	r3, r3
 8016594:	4313      	orrs	r3, r2
 8016596:	b21b      	sxth	r3, r3
 8016598:	81fb      	strh	r3, [r7, #14]
	return rv;
 801659a:	89fb      	ldrh	r3, [r7, #14]
}
 801659c:	4618      	mov	r0, r3
 801659e:	3714      	adds	r7, #20
 80165a0:	46bd      	mov	sp, r7
 80165a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165a6:	4770      	bx	lr

080165a8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80165a8:	b480      	push	{r7}
 80165aa:	b085      	sub	sp, #20
 80165ac:	af00      	add	r7, sp, #0
 80165ae:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	3303      	adds	r3, #3
 80165b4:	781b      	ldrb	r3, [r3, #0]
 80165b6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	021b      	lsls	r3, r3, #8
 80165bc:	687a      	ldr	r2, [r7, #4]
 80165be:	3202      	adds	r2, #2
 80165c0:	7812      	ldrb	r2, [r2, #0]
 80165c2:	4313      	orrs	r3, r2
 80165c4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80165c6:	68fb      	ldr	r3, [r7, #12]
 80165c8:	021b      	lsls	r3, r3, #8
 80165ca:	687a      	ldr	r2, [r7, #4]
 80165cc:	3201      	adds	r2, #1
 80165ce:	7812      	ldrb	r2, [r2, #0]
 80165d0:	4313      	orrs	r3, r2
 80165d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80165d4:	68fb      	ldr	r3, [r7, #12]
 80165d6:	021b      	lsls	r3, r3, #8
 80165d8:	687a      	ldr	r2, [r7, #4]
 80165da:	7812      	ldrb	r2, [r2, #0]
 80165dc:	4313      	orrs	r3, r2
 80165de:	60fb      	str	r3, [r7, #12]
	return rv;
 80165e0:	68fb      	ldr	r3, [r7, #12]
}
 80165e2:	4618      	mov	r0, r3
 80165e4:	3714      	adds	r7, #20
 80165e6:	46bd      	mov	sp, r7
 80165e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165ec:	4770      	bx	lr

080165ee <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80165ee:	b480      	push	{r7}
 80165f0:	b083      	sub	sp, #12
 80165f2:	af00      	add	r7, sp, #0
 80165f4:	6078      	str	r0, [r7, #4]
 80165f6:	460b      	mov	r3, r1
 80165f8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	1c5a      	adds	r2, r3, #1
 80165fe:	607a      	str	r2, [r7, #4]
 8016600:	887a      	ldrh	r2, [r7, #2]
 8016602:	b2d2      	uxtb	r2, r2
 8016604:	701a      	strb	r2, [r3, #0]
 8016606:	887b      	ldrh	r3, [r7, #2]
 8016608:	0a1b      	lsrs	r3, r3, #8
 801660a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	1c5a      	adds	r2, r3, #1
 8016610:	607a      	str	r2, [r7, #4]
 8016612:	887a      	ldrh	r2, [r7, #2]
 8016614:	b2d2      	uxtb	r2, r2
 8016616:	701a      	strb	r2, [r3, #0]
}
 8016618:	bf00      	nop
 801661a:	370c      	adds	r7, #12
 801661c:	46bd      	mov	sp, r7
 801661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016622:	4770      	bx	lr

08016624 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8016624:	b480      	push	{r7}
 8016626:	b083      	sub	sp, #12
 8016628:	af00      	add	r7, sp, #0
 801662a:	6078      	str	r0, [r7, #4]
 801662c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	1c5a      	adds	r2, r3, #1
 8016632:	607a      	str	r2, [r7, #4]
 8016634:	683a      	ldr	r2, [r7, #0]
 8016636:	b2d2      	uxtb	r2, r2
 8016638:	701a      	strb	r2, [r3, #0]
 801663a:	683b      	ldr	r3, [r7, #0]
 801663c:	0a1b      	lsrs	r3, r3, #8
 801663e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	1c5a      	adds	r2, r3, #1
 8016644:	607a      	str	r2, [r7, #4]
 8016646:	683a      	ldr	r2, [r7, #0]
 8016648:	b2d2      	uxtb	r2, r2
 801664a:	701a      	strb	r2, [r3, #0]
 801664c:	683b      	ldr	r3, [r7, #0]
 801664e:	0a1b      	lsrs	r3, r3, #8
 8016650:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	1c5a      	adds	r2, r3, #1
 8016656:	607a      	str	r2, [r7, #4]
 8016658:	683a      	ldr	r2, [r7, #0]
 801665a:	b2d2      	uxtb	r2, r2
 801665c:	701a      	strb	r2, [r3, #0]
 801665e:	683b      	ldr	r3, [r7, #0]
 8016660:	0a1b      	lsrs	r3, r3, #8
 8016662:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	1c5a      	adds	r2, r3, #1
 8016668:	607a      	str	r2, [r7, #4]
 801666a:	683a      	ldr	r2, [r7, #0]
 801666c:	b2d2      	uxtb	r2, r2
 801666e:	701a      	strb	r2, [r3, #0]
}
 8016670:	bf00      	nop
 8016672:	370c      	adds	r7, #12
 8016674:	46bd      	mov	sp, r7
 8016676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801667a:	4770      	bx	lr

0801667c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801667c:	b480      	push	{r7}
 801667e:	b087      	sub	sp, #28
 8016680:	af00      	add	r7, sp, #0
 8016682:	60f8      	str	r0, [r7, #12]
 8016684:	60b9      	str	r1, [r7, #8]
 8016686:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8016688:	68fb      	ldr	r3, [r7, #12]
 801668a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801668c:	68bb      	ldr	r3, [r7, #8]
 801668e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	2b00      	cmp	r3, #0
 8016694:	d00d      	beq.n	80166b2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8016696:	693a      	ldr	r2, [r7, #16]
 8016698:	1c53      	adds	r3, r2, #1
 801669a:	613b      	str	r3, [r7, #16]
 801669c:	697b      	ldr	r3, [r7, #20]
 801669e:	1c59      	adds	r1, r3, #1
 80166a0:	6179      	str	r1, [r7, #20]
 80166a2:	7812      	ldrb	r2, [r2, #0]
 80166a4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	3b01      	subs	r3, #1
 80166aa:	607b      	str	r3, [r7, #4]
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d1f1      	bne.n	8016696 <mem_cpy+0x1a>
	}
}
 80166b2:	bf00      	nop
 80166b4:	371c      	adds	r7, #28
 80166b6:	46bd      	mov	sp, r7
 80166b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166bc:	4770      	bx	lr

080166be <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80166be:	b480      	push	{r7}
 80166c0:	b087      	sub	sp, #28
 80166c2:	af00      	add	r7, sp, #0
 80166c4:	60f8      	str	r0, [r7, #12]
 80166c6:	60b9      	str	r1, [r7, #8]
 80166c8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80166ca:	68fb      	ldr	r3, [r7, #12]
 80166cc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80166ce:	697b      	ldr	r3, [r7, #20]
 80166d0:	1c5a      	adds	r2, r3, #1
 80166d2:	617a      	str	r2, [r7, #20]
 80166d4:	68ba      	ldr	r2, [r7, #8]
 80166d6:	b2d2      	uxtb	r2, r2
 80166d8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	3b01      	subs	r3, #1
 80166de:	607b      	str	r3, [r7, #4]
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	d1f3      	bne.n	80166ce <mem_set+0x10>
}
 80166e6:	bf00      	nop
 80166e8:	371c      	adds	r7, #28
 80166ea:	46bd      	mov	sp, r7
 80166ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166f0:	4770      	bx	lr

080166f2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80166f2:	b480      	push	{r7}
 80166f4:	b089      	sub	sp, #36	; 0x24
 80166f6:	af00      	add	r7, sp, #0
 80166f8:	60f8      	str	r0, [r7, #12]
 80166fa:	60b9      	str	r1, [r7, #8]
 80166fc:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80166fe:	68fb      	ldr	r3, [r7, #12]
 8016700:	61fb      	str	r3, [r7, #28]
 8016702:	68bb      	ldr	r3, [r7, #8]
 8016704:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8016706:	2300      	movs	r3, #0
 8016708:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801670a:	69fb      	ldr	r3, [r7, #28]
 801670c:	1c5a      	adds	r2, r3, #1
 801670e:	61fa      	str	r2, [r7, #28]
 8016710:	781b      	ldrb	r3, [r3, #0]
 8016712:	4619      	mov	r1, r3
 8016714:	69bb      	ldr	r3, [r7, #24]
 8016716:	1c5a      	adds	r2, r3, #1
 8016718:	61ba      	str	r2, [r7, #24]
 801671a:	781b      	ldrb	r3, [r3, #0]
 801671c:	1acb      	subs	r3, r1, r3
 801671e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	3b01      	subs	r3, #1
 8016724:	607b      	str	r3, [r7, #4]
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	2b00      	cmp	r3, #0
 801672a:	d002      	beq.n	8016732 <mem_cmp+0x40>
 801672c:	697b      	ldr	r3, [r7, #20]
 801672e:	2b00      	cmp	r3, #0
 8016730:	d0eb      	beq.n	801670a <mem_cmp+0x18>

	return r;
 8016732:	697b      	ldr	r3, [r7, #20]
}
 8016734:	4618      	mov	r0, r3
 8016736:	3724      	adds	r7, #36	; 0x24
 8016738:	46bd      	mov	sp, r7
 801673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801673e:	4770      	bx	lr

08016740 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8016740:	b480      	push	{r7}
 8016742:	b083      	sub	sp, #12
 8016744:	af00      	add	r7, sp, #0
 8016746:	6078      	str	r0, [r7, #4]
 8016748:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801674a:	e002      	b.n	8016752 <chk_chr+0x12>
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	3301      	adds	r3, #1
 8016750:	607b      	str	r3, [r7, #4]
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	781b      	ldrb	r3, [r3, #0]
 8016756:	2b00      	cmp	r3, #0
 8016758:	d005      	beq.n	8016766 <chk_chr+0x26>
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	781b      	ldrb	r3, [r3, #0]
 801675e:	461a      	mov	r2, r3
 8016760:	683b      	ldr	r3, [r7, #0]
 8016762:	4293      	cmp	r3, r2
 8016764:	d1f2      	bne.n	801674c <chk_chr+0xc>
	return *str;
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	781b      	ldrb	r3, [r3, #0]
}
 801676a:	4618      	mov	r0, r3
 801676c:	370c      	adds	r7, #12
 801676e:	46bd      	mov	sp, r7
 8016770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016774:	4770      	bx	lr
	...

08016778 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8016778:	b480      	push	{r7}
 801677a:	b085      	sub	sp, #20
 801677c:	af00      	add	r7, sp, #0
 801677e:	6078      	str	r0, [r7, #4]
 8016780:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016782:	2300      	movs	r3, #0
 8016784:	60bb      	str	r3, [r7, #8]
 8016786:	68bb      	ldr	r3, [r7, #8]
 8016788:	60fb      	str	r3, [r7, #12]
 801678a:	e029      	b.n	80167e0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801678c:	4a27      	ldr	r2, [pc, #156]	; (801682c <chk_lock+0xb4>)
 801678e:	68fb      	ldr	r3, [r7, #12]
 8016790:	011b      	lsls	r3, r3, #4
 8016792:	4413      	add	r3, r2
 8016794:	681b      	ldr	r3, [r3, #0]
 8016796:	2b00      	cmp	r3, #0
 8016798:	d01d      	beq.n	80167d6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801679a:	4a24      	ldr	r2, [pc, #144]	; (801682c <chk_lock+0xb4>)
 801679c:	68fb      	ldr	r3, [r7, #12]
 801679e:	011b      	lsls	r3, r3, #4
 80167a0:	4413      	add	r3, r2
 80167a2:	681a      	ldr	r2, [r3, #0]
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	429a      	cmp	r2, r3
 80167aa:	d116      	bne.n	80167da <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80167ac:	4a1f      	ldr	r2, [pc, #124]	; (801682c <chk_lock+0xb4>)
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	011b      	lsls	r3, r3, #4
 80167b2:	4413      	add	r3, r2
 80167b4:	3304      	adds	r3, #4
 80167b6:	681a      	ldr	r2, [r3, #0]
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80167bc:	429a      	cmp	r2, r3
 80167be:	d10c      	bne.n	80167da <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80167c0:	4a1a      	ldr	r2, [pc, #104]	; (801682c <chk_lock+0xb4>)
 80167c2:	68fb      	ldr	r3, [r7, #12]
 80167c4:	011b      	lsls	r3, r3, #4
 80167c6:	4413      	add	r3, r2
 80167c8:	3308      	adds	r3, #8
 80167ca:	681a      	ldr	r2, [r3, #0]
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80167d0:	429a      	cmp	r2, r3
 80167d2:	d102      	bne.n	80167da <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80167d4:	e007      	b.n	80167e6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80167d6:	2301      	movs	r3, #1
 80167d8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80167da:	68fb      	ldr	r3, [r7, #12]
 80167dc:	3301      	adds	r3, #1
 80167de:	60fb      	str	r3, [r7, #12]
 80167e0:	68fb      	ldr	r3, [r7, #12]
 80167e2:	2b01      	cmp	r3, #1
 80167e4:	d9d2      	bls.n	801678c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80167e6:	68fb      	ldr	r3, [r7, #12]
 80167e8:	2b02      	cmp	r3, #2
 80167ea:	d109      	bne.n	8016800 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80167ec:	68bb      	ldr	r3, [r7, #8]
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d102      	bne.n	80167f8 <chk_lock+0x80>
 80167f2:	683b      	ldr	r3, [r7, #0]
 80167f4:	2b02      	cmp	r3, #2
 80167f6:	d101      	bne.n	80167fc <chk_lock+0x84>
 80167f8:	2300      	movs	r3, #0
 80167fa:	e010      	b.n	801681e <chk_lock+0xa6>
 80167fc:	2312      	movs	r3, #18
 80167fe:	e00e      	b.n	801681e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8016800:	683b      	ldr	r3, [r7, #0]
 8016802:	2b00      	cmp	r3, #0
 8016804:	d108      	bne.n	8016818 <chk_lock+0xa0>
 8016806:	4a09      	ldr	r2, [pc, #36]	; (801682c <chk_lock+0xb4>)
 8016808:	68fb      	ldr	r3, [r7, #12]
 801680a:	011b      	lsls	r3, r3, #4
 801680c:	4413      	add	r3, r2
 801680e:	330c      	adds	r3, #12
 8016810:	881b      	ldrh	r3, [r3, #0]
 8016812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016816:	d101      	bne.n	801681c <chk_lock+0xa4>
 8016818:	2310      	movs	r3, #16
 801681a:	e000      	b.n	801681e <chk_lock+0xa6>
 801681c:	2300      	movs	r3, #0
}
 801681e:	4618      	mov	r0, r3
 8016820:	3714      	adds	r7, #20
 8016822:	46bd      	mov	sp, r7
 8016824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016828:	4770      	bx	lr
 801682a:	bf00      	nop
 801682c:	24000b64 	.word	0x24000b64

08016830 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8016830:	b480      	push	{r7}
 8016832:	b083      	sub	sp, #12
 8016834:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8016836:	2300      	movs	r3, #0
 8016838:	607b      	str	r3, [r7, #4]
 801683a:	e002      	b.n	8016842 <enq_lock+0x12>
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	3301      	adds	r3, #1
 8016840:	607b      	str	r3, [r7, #4]
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	2b01      	cmp	r3, #1
 8016846:	d806      	bhi.n	8016856 <enq_lock+0x26>
 8016848:	4a09      	ldr	r2, [pc, #36]	; (8016870 <enq_lock+0x40>)
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	011b      	lsls	r3, r3, #4
 801684e:	4413      	add	r3, r2
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	2b00      	cmp	r3, #0
 8016854:	d1f2      	bne.n	801683c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	2b02      	cmp	r3, #2
 801685a:	bf14      	ite	ne
 801685c:	2301      	movne	r3, #1
 801685e:	2300      	moveq	r3, #0
 8016860:	b2db      	uxtb	r3, r3
}
 8016862:	4618      	mov	r0, r3
 8016864:	370c      	adds	r7, #12
 8016866:	46bd      	mov	sp, r7
 8016868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801686c:	4770      	bx	lr
 801686e:	bf00      	nop
 8016870:	24000b64 	.word	0x24000b64

08016874 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8016874:	b480      	push	{r7}
 8016876:	b085      	sub	sp, #20
 8016878:	af00      	add	r7, sp, #0
 801687a:	6078      	str	r0, [r7, #4]
 801687c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801687e:	2300      	movs	r3, #0
 8016880:	60fb      	str	r3, [r7, #12]
 8016882:	e01f      	b.n	80168c4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8016884:	4a41      	ldr	r2, [pc, #260]	; (801698c <inc_lock+0x118>)
 8016886:	68fb      	ldr	r3, [r7, #12]
 8016888:	011b      	lsls	r3, r3, #4
 801688a:	4413      	add	r3, r2
 801688c:	681a      	ldr	r2, [r3, #0]
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	681b      	ldr	r3, [r3, #0]
 8016892:	429a      	cmp	r2, r3
 8016894:	d113      	bne.n	80168be <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8016896:	4a3d      	ldr	r2, [pc, #244]	; (801698c <inc_lock+0x118>)
 8016898:	68fb      	ldr	r3, [r7, #12]
 801689a:	011b      	lsls	r3, r3, #4
 801689c:	4413      	add	r3, r2
 801689e:	3304      	adds	r3, #4
 80168a0:	681a      	ldr	r2, [r3, #0]
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80168a6:	429a      	cmp	r2, r3
 80168a8:	d109      	bne.n	80168be <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80168aa:	4a38      	ldr	r2, [pc, #224]	; (801698c <inc_lock+0x118>)
 80168ac:	68fb      	ldr	r3, [r7, #12]
 80168ae:	011b      	lsls	r3, r3, #4
 80168b0:	4413      	add	r3, r2
 80168b2:	3308      	adds	r3, #8
 80168b4:	681a      	ldr	r2, [r3, #0]
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80168ba:	429a      	cmp	r2, r3
 80168bc:	d006      	beq.n	80168cc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80168be:	68fb      	ldr	r3, [r7, #12]
 80168c0:	3301      	adds	r3, #1
 80168c2:	60fb      	str	r3, [r7, #12]
 80168c4:	68fb      	ldr	r3, [r7, #12]
 80168c6:	2b01      	cmp	r3, #1
 80168c8:	d9dc      	bls.n	8016884 <inc_lock+0x10>
 80168ca:	e000      	b.n	80168ce <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80168cc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	2b02      	cmp	r3, #2
 80168d2:	d132      	bne.n	801693a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80168d4:	2300      	movs	r3, #0
 80168d6:	60fb      	str	r3, [r7, #12]
 80168d8:	e002      	b.n	80168e0 <inc_lock+0x6c>
 80168da:	68fb      	ldr	r3, [r7, #12]
 80168dc:	3301      	adds	r3, #1
 80168de:	60fb      	str	r3, [r7, #12]
 80168e0:	68fb      	ldr	r3, [r7, #12]
 80168e2:	2b01      	cmp	r3, #1
 80168e4:	d806      	bhi.n	80168f4 <inc_lock+0x80>
 80168e6:	4a29      	ldr	r2, [pc, #164]	; (801698c <inc_lock+0x118>)
 80168e8:	68fb      	ldr	r3, [r7, #12]
 80168ea:	011b      	lsls	r3, r3, #4
 80168ec:	4413      	add	r3, r2
 80168ee:	681b      	ldr	r3, [r3, #0]
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d1f2      	bne.n	80168da <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80168f4:	68fb      	ldr	r3, [r7, #12]
 80168f6:	2b02      	cmp	r3, #2
 80168f8:	d101      	bne.n	80168fe <inc_lock+0x8a>
 80168fa:	2300      	movs	r3, #0
 80168fc:	e040      	b.n	8016980 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	681a      	ldr	r2, [r3, #0]
 8016902:	4922      	ldr	r1, [pc, #136]	; (801698c <inc_lock+0x118>)
 8016904:	68fb      	ldr	r3, [r7, #12]
 8016906:	011b      	lsls	r3, r3, #4
 8016908:	440b      	add	r3, r1
 801690a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	689a      	ldr	r2, [r3, #8]
 8016910:	491e      	ldr	r1, [pc, #120]	; (801698c <inc_lock+0x118>)
 8016912:	68fb      	ldr	r3, [r7, #12]
 8016914:	011b      	lsls	r3, r3, #4
 8016916:	440b      	add	r3, r1
 8016918:	3304      	adds	r3, #4
 801691a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	695a      	ldr	r2, [r3, #20]
 8016920:	491a      	ldr	r1, [pc, #104]	; (801698c <inc_lock+0x118>)
 8016922:	68fb      	ldr	r3, [r7, #12]
 8016924:	011b      	lsls	r3, r3, #4
 8016926:	440b      	add	r3, r1
 8016928:	3308      	adds	r3, #8
 801692a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801692c:	4a17      	ldr	r2, [pc, #92]	; (801698c <inc_lock+0x118>)
 801692e:	68fb      	ldr	r3, [r7, #12]
 8016930:	011b      	lsls	r3, r3, #4
 8016932:	4413      	add	r3, r2
 8016934:	330c      	adds	r3, #12
 8016936:	2200      	movs	r2, #0
 8016938:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801693a:	683b      	ldr	r3, [r7, #0]
 801693c:	2b00      	cmp	r3, #0
 801693e:	d009      	beq.n	8016954 <inc_lock+0xe0>
 8016940:	4a12      	ldr	r2, [pc, #72]	; (801698c <inc_lock+0x118>)
 8016942:	68fb      	ldr	r3, [r7, #12]
 8016944:	011b      	lsls	r3, r3, #4
 8016946:	4413      	add	r3, r2
 8016948:	330c      	adds	r3, #12
 801694a:	881b      	ldrh	r3, [r3, #0]
 801694c:	2b00      	cmp	r3, #0
 801694e:	d001      	beq.n	8016954 <inc_lock+0xe0>
 8016950:	2300      	movs	r3, #0
 8016952:	e015      	b.n	8016980 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8016954:	683b      	ldr	r3, [r7, #0]
 8016956:	2b00      	cmp	r3, #0
 8016958:	d108      	bne.n	801696c <inc_lock+0xf8>
 801695a:	4a0c      	ldr	r2, [pc, #48]	; (801698c <inc_lock+0x118>)
 801695c:	68fb      	ldr	r3, [r7, #12]
 801695e:	011b      	lsls	r3, r3, #4
 8016960:	4413      	add	r3, r2
 8016962:	330c      	adds	r3, #12
 8016964:	881b      	ldrh	r3, [r3, #0]
 8016966:	3301      	adds	r3, #1
 8016968:	b29a      	uxth	r2, r3
 801696a:	e001      	b.n	8016970 <inc_lock+0xfc>
 801696c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016970:	4906      	ldr	r1, [pc, #24]	; (801698c <inc_lock+0x118>)
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	011b      	lsls	r3, r3, #4
 8016976:	440b      	add	r3, r1
 8016978:	330c      	adds	r3, #12
 801697a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801697c:	68fb      	ldr	r3, [r7, #12]
 801697e:	3301      	adds	r3, #1
}
 8016980:	4618      	mov	r0, r3
 8016982:	3714      	adds	r7, #20
 8016984:	46bd      	mov	sp, r7
 8016986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801698a:	4770      	bx	lr
 801698c:	24000b64 	.word	0x24000b64

08016990 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8016990:	b480      	push	{r7}
 8016992:	b085      	sub	sp, #20
 8016994:	af00      	add	r7, sp, #0
 8016996:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	3b01      	subs	r3, #1
 801699c:	607b      	str	r3, [r7, #4]
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	2b01      	cmp	r3, #1
 80169a2:	d825      	bhi.n	80169f0 <dec_lock+0x60>
		n = Files[i].ctr;
 80169a4:	4a17      	ldr	r2, [pc, #92]	; (8016a04 <dec_lock+0x74>)
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	011b      	lsls	r3, r3, #4
 80169aa:	4413      	add	r3, r2
 80169ac:	330c      	adds	r3, #12
 80169ae:	881b      	ldrh	r3, [r3, #0]
 80169b0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80169b2:	89fb      	ldrh	r3, [r7, #14]
 80169b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80169b8:	d101      	bne.n	80169be <dec_lock+0x2e>
 80169ba:	2300      	movs	r3, #0
 80169bc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80169be:	89fb      	ldrh	r3, [r7, #14]
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d002      	beq.n	80169ca <dec_lock+0x3a>
 80169c4:	89fb      	ldrh	r3, [r7, #14]
 80169c6:	3b01      	subs	r3, #1
 80169c8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80169ca:	4a0e      	ldr	r2, [pc, #56]	; (8016a04 <dec_lock+0x74>)
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	011b      	lsls	r3, r3, #4
 80169d0:	4413      	add	r3, r2
 80169d2:	330c      	adds	r3, #12
 80169d4:	89fa      	ldrh	r2, [r7, #14]
 80169d6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80169d8:	89fb      	ldrh	r3, [r7, #14]
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d105      	bne.n	80169ea <dec_lock+0x5a>
 80169de:	4a09      	ldr	r2, [pc, #36]	; (8016a04 <dec_lock+0x74>)
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	011b      	lsls	r3, r3, #4
 80169e4:	4413      	add	r3, r2
 80169e6:	2200      	movs	r2, #0
 80169e8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80169ea:	2300      	movs	r3, #0
 80169ec:	737b      	strb	r3, [r7, #13]
 80169ee:	e001      	b.n	80169f4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80169f0:	2302      	movs	r3, #2
 80169f2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80169f4:	7b7b      	ldrb	r3, [r7, #13]
}
 80169f6:	4618      	mov	r0, r3
 80169f8:	3714      	adds	r7, #20
 80169fa:	46bd      	mov	sp, r7
 80169fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a00:	4770      	bx	lr
 8016a02:	bf00      	nop
 8016a04:	24000b64 	.word	0x24000b64

08016a08 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8016a08:	b480      	push	{r7}
 8016a0a:	b085      	sub	sp, #20
 8016a0c:	af00      	add	r7, sp, #0
 8016a0e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8016a10:	2300      	movs	r3, #0
 8016a12:	60fb      	str	r3, [r7, #12]
 8016a14:	e010      	b.n	8016a38 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8016a16:	4a0d      	ldr	r2, [pc, #52]	; (8016a4c <clear_lock+0x44>)
 8016a18:	68fb      	ldr	r3, [r7, #12]
 8016a1a:	011b      	lsls	r3, r3, #4
 8016a1c:	4413      	add	r3, r2
 8016a1e:	681b      	ldr	r3, [r3, #0]
 8016a20:	687a      	ldr	r2, [r7, #4]
 8016a22:	429a      	cmp	r2, r3
 8016a24:	d105      	bne.n	8016a32 <clear_lock+0x2a>
 8016a26:	4a09      	ldr	r2, [pc, #36]	; (8016a4c <clear_lock+0x44>)
 8016a28:	68fb      	ldr	r3, [r7, #12]
 8016a2a:	011b      	lsls	r3, r3, #4
 8016a2c:	4413      	add	r3, r2
 8016a2e:	2200      	movs	r2, #0
 8016a30:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8016a32:	68fb      	ldr	r3, [r7, #12]
 8016a34:	3301      	adds	r3, #1
 8016a36:	60fb      	str	r3, [r7, #12]
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	2b01      	cmp	r3, #1
 8016a3c:	d9eb      	bls.n	8016a16 <clear_lock+0xe>
	}
}
 8016a3e:	bf00      	nop
 8016a40:	3714      	adds	r7, #20
 8016a42:	46bd      	mov	sp, r7
 8016a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a48:	4770      	bx	lr
 8016a4a:	bf00      	nop
 8016a4c:	24000b64 	.word	0x24000b64

08016a50 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8016a50:	b580      	push	{r7, lr}
 8016a52:	b086      	sub	sp, #24
 8016a54:	af00      	add	r7, sp, #0
 8016a56:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8016a58:	2300      	movs	r3, #0
 8016a5a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	78db      	ldrb	r3, [r3, #3]
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	d034      	beq.n	8016ace <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a68:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	7858      	ldrb	r0, [r3, #1]
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016a74:	2301      	movs	r3, #1
 8016a76:	697a      	ldr	r2, [r7, #20]
 8016a78:	f7ff fd40 	bl	80164fc <disk_write>
 8016a7c:	4603      	mov	r3, r0
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d002      	beq.n	8016a88 <sync_window+0x38>
			res = FR_DISK_ERR;
 8016a82:	2301      	movs	r3, #1
 8016a84:	73fb      	strb	r3, [r7, #15]
 8016a86:	e022      	b.n	8016ace <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	2200      	movs	r2, #0
 8016a8c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	6a1b      	ldr	r3, [r3, #32]
 8016a92:	697a      	ldr	r2, [r7, #20]
 8016a94:	1ad2      	subs	r2, r2, r3
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	699b      	ldr	r3, [r3, #24]
 8016a9a:	429a      	cmp	r2, r3
 8016a9c:	d217      	bcs.n	8016ace <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	789b      	ldrb	r3, [r3, #2]
 8016aa2:	613b      	str	r3, [r7, #16]
 8016aa4:	e010      	b.n	8016ac8 <sync_window+0x78>
					wsect += fs->fsize;
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	699b      	ldr	r3, [r3, #24]
 8016aaa:	697a      	ldr	r2, [r7, #20]
 8016aac:	4413      	add	r3, r2
 8016aae:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	7858      	ldrb	r0, [r3, #1]
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016aba:	2301      	movs	r3, #1
 8016abc:	697a      	ldr	r2, [r7, #20]
 8016abe:	f7ff fd1d 	bl	80164fc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016ac2:	693b      	ldr	r3, [r7, #16]
 8016ac4:	3b01      	subs	r3, #1
 8016ac6:	613b      	str	r3, [r7, #16]
 8016ac8:	693b      	ldr	r3, [r7, #16]
 8016aca:	2b01      	cmp	r3, #1
 8016acc:	d8eb      	bhi.n	8016aa6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8016ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ad0:	4618      	mov	r0, r3
 8016ad2:	3718      	adds	r7, #24
 8016ad4:	46bd      	mov	sp, r7
 8016ad6:	bd80      	pop	{r7, pc}

08016ad8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8016ad8:	b580      	push	{r7, lr}
 8016ada:	b084      	sub	sp, #16
 8016adc:	af00      	add	r7, sp, #0
 8016ade:	6078      	str	r0, [r7, #4]
 8016ae0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8016ae2:	2300      	movs	r3, #0
 8016ae4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016aea:	683a      	ldr	r2, [r7, #0]
 8016aec:	429a      	cmp	r2, r3
 8016aee:	d01b      	beq.n	8016b28 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8016af0:	6878      	ldr	r0, [r7, #4]
 8016af2:	f7ff ffad 	bl	8016a50 <sync_window>
 8016af6:	4603      	mov	r3, r0
 8016af8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8016afa:	7bfb      	ldrb	r3, [r7, #15]
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d113      	bne.n	8016b28 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	7858      	ldrb	r0, [r3, #1]
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016b0a:	2301      	movs	r3, #1
 8016b0c:	683a      	ldr	r2, [r7, #0]
 8016b0e:	f7ff fcd5 	bl	80164bc <disk_read>
 8016b12:	4603      	mov	r3, r0
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d004      	beq.n	8016b22 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8016b18:	f04f 33ff 	mov.w	r3, #4294967295
 8016b1c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8016b1e:	2301      	movs	r3, #1
 8016b20:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	683a      	ldr	r2, [r7, #0]
 8016b26:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8016b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b2a:	4618      	mov	r0, r3
 8016b2c:	3710      	adds	r7, #16
 8016b2e:	46bd      	mov	sp, r7
 8016b30:	bd80      	pop	{r7, pc}
	...

08016b34 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8016b34:	b580      	push	{r7, lr}
 8016b36:	b084      	sub	sp, #16
 8016b38:	af00      	add	r7, sp, #0
 8016b3a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8016b3c:	6878      	ldr	r0, [r7, #4]
 8016b3e:	f7ff ff87 	bl	8016a50 <sync_window>
 8016b42:	4603      	mov	r3, r0
 8016b44:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8016b46:	7bfb      	ldrb	r3, [r7, #15]
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	d158      	bne.n	8016bfe <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	781b      	ldrb	r3, [r3, #0]
 8016b50:	2b03      	cmp	r3, #3
 8016b52:	d148      	bne.n	8016be6 <sync_fs+0xb2>
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	791b      	ldrb	r3, [r3, #4]
 8016b58:	2b01      	cmp	r3, #1
 8016b5a:	d144      	bne.n	8016be6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	3330      	adds	r3, #48	; 0x30
 8016b60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016b64:	2100      	movs	r1, #0
 8016b66:	4618      	mov	r0, r3
 8016b68:	f7ff fda9 	bl	80166be <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	3330      	adds	r3, #48	; 0x30
 8016b70:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016b74:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8016b78:	4618      	mov	r0, r3
 8016b7a:	f7ff fd38 	bl	80165ee <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	3330      	adds	r3, #48	; 0x30
 8016b82:	4921      	ldr	r1, [pc, #132]	; (8016c08 <sync_fs+0xd4>)
 8016b84:	4618      	mov	r0, r3
 8016b86:	f7ff fd4d 	bl	8016624 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	3330      	adds	r3, #48	; 0x30
 8016b8e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8016b92:	491e      	ldr	r1, [pc, #120]	; (8016c0c <sync_fs+0xd8>)
 8016b94:	4618      	mov	r0, r3
 8016b96:	f7ff fd45 	bl	8016624 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	3330      	adds	r3, #48	; 0x30
 8016b9e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	691b      	ldr	r3, [r3, #16]
 8016ba6:	4619      	mov	r1, r3
 8016ba8:	4610      	mov	r0, r2
 8016baa:	f7ff fd3b 	bl	8016624 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	3330      	adds	r3, #48	; 0x30
 8016bb2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	68db      	ldr	r3, [r3, #12]
 8016bba:	4619      	mov	r1, r3
 8016bbc:	4610      	mov	r0, r2
 8016bbe:	f7ff fd31 	bl	8016624 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	69db      	ldr	r3, [r3, #28]
 8016bc6:	1c5a      	adds	r2, r3, #1
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	7858      	ldrb	r0, [r3, #1]
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016bda:	2301      	movs	r3, #1
 8016bdc:	f7ff fc8e 	bl	80164fc <disk_write>
			fs->fsi_flag = 0;
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	2200      	movs	r2, #0
 8016be4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	785b      	ldrb	r3, [r3, #1]
 8016bea:	2200      	movs	r2, #0
 8016bec:	2100      	movs	r1, #0
 8016bee:	4618      	mov	r0, r3
 8016bf0:	f7ff fca4 	bl	801653c <disk_ioctl>
 8016bf4:	4603      	mov	r3, r0
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d001      	beq.n	8016bfe <sync_fs+0xca>
 8016bfa:	2301      	movs	r3, #1
 8016bfc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8016bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c00:	4618      	mov	r0, r3
 8016c02:	3710      	adds	r7, #16
 8016c04:	46bd      	mov	sp, r7
 8016c06:	bd80      	pop	{r7, pc}
 8016c08:	41615252 	.word	0x41615252
 8016c0c:	61417272 	.word	0x61417272

08016c10 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8016c10:	b480      	push	{r7}
 8016c12:	b083      	sub	sp, #12
 8016c14:	af00      	add	r7, sp, #0
 8016c16:	6078      	str	r0, [r7, #4]
 8016c18:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8016c1a:	683b      	ldr	r3, [r7, #0]
 8016c1c:	3b02      	subs	r3, #2
 8016c1e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	695b      	ldr	r3, [r3, #20]
 8016c24:	3b02      	subs	r3, #2
 8016c26:	683a      	ldr	r2, [r7, #0]
 8016c28:	429a      	cmp	r2, r3
 8016c2a:	d301      	bcc.n	8016c30 <clust2sect+0x20>
 8016c2c:	2300      	movs	r3, #0
 8016c2e:	e008      	b.n	8016c42 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	895b      	ldrh	r3, [r3, #10]
 8016c34:	461a      	mov	r2, r3
 8016c36:	683b      	ldr	r3, [r7, #0]
 8016c38:	fb03 f202 	mul.w	r2, r3, r2
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016c40:	4413      	add	r3, r2
}
 8016c42:	4618      	mov	r0, r3
 8016c44:	370c      	adds	r7, #12
 8016c46:	46bd      	mov	sp, r7
 8016c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c4c:	4770      	bx	lr

08016c4e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8016c4e:	b580      	push	{r7, lr}
 8016c50:	b086      	sub	sp, #24
 8016c52:	af00      	add	r7, sp, #0
 8016c54:	6078      	str	r0, [r7, #4]
 8016c56:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8016c5e:	683b      	ldr	r3, [r7, #0]
 8016c60:	2b01      	cmp	r3, #1
 8016c62:	d904      	bls.n	8016c6e <get_fat+0x20>
 8016c64:	693b      	ldr	r3, [r7, #16]
 8016c66:	695b      	ldr	r3, [r3, #20]
 8016c68:	683a      	ldr	r2, [r7, #0]
 8016c6a:	429a      	cmp	r2, r3
 8016c6c:	d302      	bcc.n	8016c74 <get_fat+0x26>
		val = 1;	/* Internal error */
 8016c6e:	2301      	movs	r3, #1
 8016c70:	617b      	str	r3, [r7, #20]
 8016c72:	e08c      	b.n	8016d8e <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8016c74:	f04f 33ff 	mov.w	r3, #4294967295
 8016c78:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8016c7a:	693b      	ldr	r3, [r7, #16]
 8016c7c:	781b      	ldrb	r3, [r3, #0]
 8016c7e:	2b02      	cmp	r3, #2
 8016c80:	d045      	beq.n	8016d0e <get_fat+0xc0>
 8016c82:	2b03      	cmp	r3, #3
 8016c84:	d05d      	beq.n	8016d42 <get_fat+0xf4>
 8016c86:	2b01      	cmp	r3, #1
 8016c88:	d177      	bne.n	8016d7a <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8016c8a:	683b      	ldr	r3, [r7, #0]
 8016c8c:	60fb      	str	r3, [r7, #12]
 8016c8e:	68fb      	ldr	r3, [r7, #12]
 8016c90:	085b      	lsrs	r3, r3, #1
 8016c92:	68fa      	ldr	r2, [r7, #12]
 8016c94:	4413      	add	r3, r2
 8016c96:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016c98:	693b      	ldr	r3, [r7, #16]
 8016c9a:	6a1a      	ldr	r2, [r3, #32]
 8016c9c:	68fb      	ldr	r3, [r7, #12]
 8016c9e:	0a5b      	lsrs	r3, r3, #9
 8016ca0:	4413      	add	r3, r2
 8016ca2:	4619      	mov	r1, r3
 8016ca4:	6938      	ldr	r0, [r7, #16]
 8016ca6:	f7ff ff17 	bl	8016ad8 <move_window>
 8016caa:	4603      	mov	r3, r0
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d167      	bne.n	8016d80 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8016cb0:	68fb      	ldr	r3, [r7, #12]
 8016cb2:	1c5a      	adds	r2, r3, #1
 8016cb4:	60fa      	str	r2, [r7, #12]
 8016cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016cba:	693a      	ldr	r2, [r7, #16]
 8016cbc:	4413      	add	r3, r2
 8016cbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016cc2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016cc4:	693b      	ldr	r3, [r7, #16]
 8016cc6:	6a1a      	ldr	r2, [r3, #32]
 8016cc8:	68fb      	ldr	r3, [r7, #12]
 8016cca:	0a5b      	lsrs	r3, r3, #9
 8016ccc:	4413      	add	r3, r2
 8016cce:	4619      	mov	r1, r3
 8016cd0:	6938      	ldr	r0, [r7, #16]
 8016cd2:	f7ff ff01 	bl	8016ad8 <move_window>
 8016cd6:	4603      	mov	r3, r0
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d153      	bne.n	8016d84 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8016cdc:	68fb      	ldr	r3, [r7, #12]
 8016cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016ce2:	693a      	ldr	r2, [r7, #16]
 8016ce4:	4413      	add	r3, r2
 8016ce6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016cea:	021b      	lsls	r3, r3, #8
 8016cec:	461a      	mov	r2, r3
 8016cee:	68bb      	ldr	r3, [r7, #8]
 8016cf0:	4313      	orrs	r3, r2
 8016cf2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8016cf4:	683b      	ldr	r3, [r7, #0]
 8016cf6:	f003 0301 	and.w	r3, r3, #1
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	d002      	beq.n	8016d04 <get_fat+0xb6>
 8016cfe:	68bb      	ldr	r3, [r7, #8]
 8016d00:	091b      	lsrs	r3, r3, #4
 8016d02:	e002      	b.n	8016d0a <get_fat+0xbc>
 8016d04:	68bb      	ldr	r3, [r7, #8]
 8016d06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016d0a:	617b      	str	r3, [r7, #20]
			break;
 8016d0c:	e03f      	b.n	8016d8e <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8016d0e:	693b      	ldr	r3, [r7, #16]
 8016d10:	6a1a      	ldr	r2, [r3, #32]
 8016d12:	683b      	ldr	r3, [r7, #0]
 8016d14:	0a1b      	lsrs	r3, r3, #8
 8016d16:	4413      	add	r3, r2
 8016d18:	4619      	mov	r1, r3
 8016d1a:	6938      	ldr	r0, [r7, #16]
 8016d1c:	f7ff fedc 	bl	8016ad8 <move_window>
 8016d20:	4603      	mov	r3, r0
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d130      	bne.n	8016d88 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8016d26:	693b      	ldr	r3, [r7, #16]
 8016d28:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016d2c:	683b      	ldr	r3, [r7, #0]
 8016d2e:	005b      	lsls	r3, r3, #1
 8016d30:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8016d34:	4413      	add	r3, r2
 8016d36:	4618      	mov	r0, r3
 8016d38:	f7ff fc1e 	bl	8016578 <ld_word>
 8016d3c:	4603      	mov	r3, r0
 8016d3e:	617b      	str	r3, [r7, #20]
			break;
 8016d40:	e025      	b.n	8016d8e <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8016d42:	693b      	ldr	r3, [r7, #16]
 8016d44:	6a1a      	ldr	r2, [r3, #32]
 8016d46:	683b      	ldr	r3, [r7, #0]
 8016d48:	09db      	lsrs	r3, r3, #7
 8016d4a:	4413      	add	r3, r2
 8016d4c:	4619      	mov	r1, r3
 8016d4e:	6938      	ldr	r0, [r7, #16]
 8016d50:	f7ff fec2 	bl	8016ad8 <move_window>
 8016d54:	4603      	mov	r3, r0
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	d118      	bne.n	8016d8c <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8016d5a:	693b      	ldr	r3, [r7, #16]
 8016d5c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016d60:	683b      	ldr	r3, [r7, #0]
 8016d62:	009b      	lsls	r3, r3, #2
 8016d64:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8016d68:	4413      	add	r3, r2
 8016d6a:	4618      	mov	r0, r3
 8016d6c:	f7ff fc1c 	bl	80165a8 <ld_dword>
 8016d70:	4603      	mov	r3, r0
 8016d72:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8016d76:	617b      	str	r3, [r7, #20]
			break;
 8016d78:	e009      	b.n	8016d8e <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8016d7a:	2301      	movs	r3, #1
 8016d7c:	617b      	str	r3, [r7, #20]
 8016d7e:	e006      	b.n	8016d8e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016d80:	bf00      	nop
 8016d82:	e004      	b.n	8016d8e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016d84:	bf00      	nop
 8016d86:	e002      	b.n	8016d8e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8016d88:	bf00      	nop
 8016d8a:	e000      	b.n	8016d8e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8016d8c:	bf00      	nop
		}
	}

	return val;
 8016d8e:	697b      	ldr	r3, [r7, #20]
}
 8016d90:	4618      	mov	r0, r3
 8016d92:	3718      	adds	r7, #24
 8016d94:	46bd      	mov	sp, r7
 8016d96:	bd80      	pop	{r7, pc}

08016d98 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8016d98:	b590      	push	{r4, r7, lr}
 8016d9a:	b089      	sub	sp, #36	; 0x24
 8016d9c:	af00      	add	r7, sp, #0
 8016d9e:	60f8      	str	r0, [r7, #12]
 8016da0:	60b9      	str	r1, [r7, #8]
 8016da2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8016da4:	2302      	movs	r3, #2
 8016da6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8016da8:	68bb      	ldr	r3, [r7, #8]
 8016daa:	2b01      	cmp	r3, #1
 8016dac:	f240 80d6 	bls.w	8016f5c <put_fat+0x1c4>
 8016db0:	68fb      	ldr	r3, [r7, #12]
 8016db2:	695b      	ldr	r3, [r3, #20]
 8016db4:	68ba      	ldr	r2, [r7, #8]
 8016db6:	429a      	cmp	r2, r3
 8016db8:	f080 80d0 	bcs.w	8016f5c <put_fat+0x1c4>
		switch (fs->fs_type) {
 8016dbc:	68fb      	ldr	r3, [r7, #12]
 8016dbe:	781b      	ldrb	r3, [r3, #0]
 8016dc0:	2b02      	cmp	r3, #2
 8016dc2:	d073      	beq.n	8016eac <put_fat+0x114>
 8016dc4:	2b03      	cmp	r3, #3
 8016dc6:	f000 8091 	beq.w	8016eec <put_fat+0x154>
 8016dca:	2b01      	cmp	r3, #1
 8016dcc:	f040 80c6 	bne.w	8016f5c <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8016dd0:	68bb      	ldr	r3, [r7, #8]
 8016dd2:	61bb      	str	r3, [r7, #24]
 8016dd4:	69bb      	ldr	r3, [r7, #24]
 8016dd6:	085b      	lsrs	r3, r3, #1
 8016dd8:	69ba      	ldr	r2, [r7, #24]
 8016dda:	4413      	add	r3, r2
 8016ddc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8016dde:	68fb      	ldr	r3, [r7, #12]
 8016de0:	6a1a      	ldr	r2, [r3, #32]
 8016de2:	69bb      	ldr	r3, [r7, #24]
 8016de4:	0a5b      	lsrs	r3, r3, #9
 8016de6:	4413      	add	r3, r2
 8016de8:	4619      	mov	r1, r3
 8016dea:	68f8      	ldr	r0, [r7, #12]
 8016dec:	f7ff fe74 	bl	8016ad8 <move_window>
 8016df0:	4603      	mov	r3, r0
 8016df2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016df4:	7ffb      	ldrb	r3, [r7, #31]
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	f040 80a9 	bne.w	8016f4e <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8016dfc:	68fb      	ldr	r3, [r7, #12]
 8016dfe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016e02:	69bb      	ldr	r3, [r7, #24]
 8016e04:	1c59      	adds	r1, r3, #1
 8016e06:	61b9      	str	r1, [r7, #24]
 8016e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016e0c:	4413      	add	r3, r2
 8016e0e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8016e10:	68bb      	ldr	r3, [r7, #8]
 8016e12:	f003 0301 	and.w	r3, r3, #1
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d00d      	beq.n	8016e36 <put_fat+0x9e>
 8016e1a:	697b      	ldr	r3, [r7, #20]
 8016e1c:	781b      	ldrb	r3, [r3, #0]
 8016e1e:	b25b      	sxtb	r3, r3
 8016e20:	f003 030f 	and.w	r3, r3, #15
 8016e24:	b25a      	sxtb	r2, r3
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	b2db      	uxtb	r3, r3
 8016e2a:	011b      	lsls	r3, r3, #4
 8016e2c:	b25b      	sxtb	r3, r3
 8016e2e:	4313      	orrs	r3, r2
 8016e30:	b25b      	sxtb	r3, r3
 8016e32:	b2db      	uxtb	r3, r3
 8016e34:	e001      	b.n	8016e3a <put_fat+0xa2>
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	b2db      	uxtb	r3, r3
 8016e3a:	697a      	ldr	r2, [r7, #20]
 8016e3c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8016e3e:	68fb      	ldr	r3, [r7, #12]
 8016e40:	2201      	movs	r2, #1
 8016e42:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8016e44:	68fb      	ldr	r3, [r7, #12]
 8016e46:	6a1a      	ldr	r2, [r3, #32]
 8016e48:	69bb      	ldr	r3, [r7, #24]
 8016e4a:	0a5b      	lsrs	r3, r3, #9
 8016e4c:	4413      	add	r3, r2
 8016e4e:	4619      	mov	r1, r3
 8016e50:	68f8      	ldr	r0, [r7, #12]
 8016e52:	f7ff fe41 	bl	8016ad8 <move_window>
 8016e56:	4603      	mov	r3, r0
 8016e58:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016e5a:	7ffb      	ldrb	r3, [r7, #31]
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d178      	bne.n	8016f52 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8016e60:	68fb      	ldr	r3, [r7, #12]
 8016e62:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016e66:	69bb      	ldr	r3, [r7, #24]
 8016e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016e6c:	4413      	add	r3, r2
 8016e6e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8016e70:	68bb      	ldr	r3, [r7, #8]
 8016e72:	f003 0301 	and.w	r3, r3, #1
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	d003      	beq.n	8016e82 <put_fat+0xea>
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	091b      	lsrs	r3, r3, #4
 8016e7e:	b2db      	uxtb	r3, r3
 8016e80:	e00e      	b.n	8016ea0 <put_fat+0x108>
 8016e82:	697b      	ldr	r3, [r7, #20]
 8016e84:	781b      	ldrb	r3, [r3, #0]
 8016e86:	b25b      	sxtb	r3, r3
 8016e88:	f023 030f 	bic.w	r3, r3, #15
 8016e8c:	b25a      	sxtb	r2, r3
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	0a1b      	lsrs	r3, r3, #8
 8016e92:	b25b      	sxtb	r3, r3
 8016e94:	f003 030f 	and.w	r3, r3, #15
 8016e98:	b25b      	sxtb	r3, r3
 8016e9a:	4313      	orrs	r3, r2
 8016e9c:	b25b      	sxtb	r3, r3
 8016e9e:	b2db      	uxtb	r3, r3
 8016ea0:	697a      	ldr	r2, [r7, #20]
 8016ea2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8016ea4:	68fb      	ldr	r3, [r7, #12]
 8016ea6:	2201      	movs	r2, #1
 8016ea8:	70da      	strb	r2, [r3, #3]
			break;
 8016eaa:	e057      	b.n	8016f5c <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8016eac:	68fb      	ldr	r3, [r7, #12]
 8016eae:	6a1a      	ldr	r2, [r3, #32]
 8016eb0:	68bb      	ldr	r3, [r7, #8]
 8016eb2:	0a1b      	lsrs	r3, r3, #8
 8016eb4:	4413      	add	r3, r2
 8016eb6:	4619      	mov	r1, r3
 8016eb8:	68f8      	ldr	r0, [r7, #12]
 8016eba:	f7ff fe0d 	bl	8016ad8 <move_window>
 8016ebe:	4603      	mov	r3, r0
 8016ec0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016ec2:	7ffb      	ldrb	r3, [r7, #31]
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d146      	bne.n	8016f56 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8016ec8:	68fb      	ldr	r3, [r7, #12]
 8016eca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016ece:	68bb      	ldr	r3, [r7, #8]
 8016ed0:	005b      	lsls	r3, r3, #1
 8016ed2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8016ed6:	4413      	add	r3, r2
 8016ed8:	687a      	ldr	r2, [r7, #4]
 8016eda:	b292      	uxth	r2, r2
 8016edc:	4611      	mov	r1, r2
 8016ede:	4618      	mov	r0, r3
 8016ee0:	f7ff fb85 	bl	80165ee <st_word>
			fs->wflag = 1;
 8016ee4:	68fb      	ldr	r3, [r7, #12]
 8016ee6:	2201      	movs	r2, #1
 8016ee8:	70da      	strb	r2, [r3, #3]
			break;
 8016eea:	e037      	b.n	8016f5c <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8016eec:	68fb      	ldr	r3, [r7, #12]
 8016eee:	6a1a      	ldr	r2, [r3, #32]
 8016ef0:	68bb      	ldr	r3, [r7, #8]
 8016ef2:	09db      	lsrs	r3, r3, #7
 8016ef4:	4413      	add	r3, r2
 8016ef6:	4619      	mov	r1, r3
 8016ef8:	68f8      	ldr	r0, [r7, #12]
 8016efa:	f7ff fded 	bl	8016ad8 <move_window>
 8016efe:	4603      	mov	r3, r0
 8016f00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016f02:	7ffb      	ldrb	r3, [r7, #31]
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	d128      	bne.n	8016f5a <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8016f0e:	68fb      	ldr	r3, [r7, #12]
 8016f10:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016f14:	68bb      	ldr	r3, [r7, #8]
 8016f16:	009b      	lsls	r3, r3, #2
 8016f18:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8016f1c:	4413      	add	r3, r2
 8016f1e:	4618      	mov	r0, r3
 8016f20:	f7ff fb42 	bl	80165a8 <ld_dword>
 8016f24:	4603      	mov	r3, r0
 8016f26:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8016f2a:	4323      	orrs	r3, r4
 8016f2c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8016f2e:	68fb      	ldr	r3, [r7, #12]
 8016f30:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016f34:	68bb      	ldr	r3, [r7, #8]
 8016f36:	009b      	lsls	r3, r3, #2
 8016f38:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8016f3c:	4413      	add	r3, r2
 8016f3e:	6879      	ldr	r1, [r7, #4]
 8016f40:	4618      	mov	r0, r3
 8016f42:	f7ff fb6f 	bl	8016624 <st_dword>
			fs->wflag = 1;
 8016f46:	68fb      	ldr	r3, [r7, #12]
 8016f48:	2201      	movs	r2, #1
 8016f4a:	70da      	strb	r2, [r3, #3]
			break;
 8016f4c:	e006      	b.n	8016f5c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8016f4e:	bf00      	nop
 8016f50:	e004      	b.n	8016f5c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8016f52:	bf00      	nop
 8016f54:	e002      	b.n	8016f5c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8016f56:	bf00      	nop
 8016f58:	e000      	b.n	8016f5c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8016f5a:	bf00      	nop
		}
	}
	return res;
 8016f5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8016f5e:	4618      	mov	r0, r3
 8016f60:	3724      	adds	r7, #36	; 0x24
 8016f62:	46bd      	mov	sp, r7
 8016f64:	bd90      	pop	{r4, r7, pc}

08016f66 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8016f66:	b580      	push	{r7, lr}
 8016f68:	b088      	sub	sp, #32
 8016f6a:	af00      	add	r7, sp, #0
 8016f6c:	60f8      	str	r0, [r7, #12]
 8016f6e:	60b9      	str	r1, [r7, #8]
 8016f70:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8016f72:	2300      	movs	r3, #0
 8016f74:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8016f76:	68fb      	ldr	r3, [r7, #12]
 8016f78:	681b      	ldr	r3, [r3, #0]
 8016f7a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8016f7c:	68bb      	ldr	r3, [r7, #8]
 8016f7e:	2b01      	cmp	r3, #1
 8016f80:	d904      	bls.n	8016f8c <remove_chain+0x26>
 8016f82:	69bb      	ldr	r3, [r7, #24]
 8016f84:	695b      	ldr	r3, [r3, #20]
 8016f86:	68ba      	ldr	r2, [r7, #8]
 8016f88:	429a      	cmp	r2, r3
 8016f8a:	d301      	bcc.n	8016f90 <remove_chain+0x2a>
 8016f8c:	2302      	movs	r3, #2
 8016f8e:	e04b      	b.n	8017028 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d00c      	beq.n	8016fb0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8016f96:	f04f 32ff 	mov.w	r2, #4294967295
 8016f9a:	6879      	ldr	r1, [r7, #4]
 8016f9c:	69b8      	ldr	r0, [r7, #24]
 8016f9e:	f7ff fefb 	bl	8016d98 <put_fat>
 8016fa2:	4603      	mov	r3, r0
 8016fa4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8016fa6:	7ffb      	ldrb	r3, [r7, #31]
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	d001      	beq.n	8016fb0 <remove_chain+0x4a>
 8016fac:	7ffb      	ldrb	r3, [r7, #31]
 8016fae:	e03b      	b.n	8017028 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8016fb0:	68b9      	ldr	r1, [r7, #8]
 8016fb2:	68f8      	ldr	r0, [r7, #12]
 8016fb4:	f7ff fe4b 	bl	8016c4e <get_fat>
 8016fb8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8016fba:	697b      	ldr	r3, [r7, #20]
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	d031      	beq.n	8017024 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8016fc0:	697b      	ldr	r3, [r7, #20]
 8016fc2:	2b01      	cmp	r3, #1
 8016fc4:	d101      	bne.n	8016fca <remove_chain+0x64>
 8016fc6:	2302      	movs	r3, #2
 8016fc8:	e02e      	b.n	8017028 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8016fca:	697b      	ldr	r3, [r7, #20]
 8016fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016fd0:	d101      	bne.n	8016fd6 <remove_chain+0x70>
 8016fd2:	2301      	movs	r3, #1
 8016fd4:	e028      	b.n	8017028 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8016fd6:	2200      	movs	r2, #0
 8016fd8:	68b9      	ldr	r1, [r7, #8]
 8016fda:	69b8      	ldr	r0, [r7, #24]
 8016fdc:	f7ff fedc 	bl	8016d98 <put_fat>
 8016fe0:	4603      	mov	r3, r0
 8016fe2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8016fe4:	7ffb      	ldrb	r3, [r7, #31]
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	d001      	beq.n	8016fee <remove_chain+0x88>
 8016fea:	7ffb      	ldrb	r3, [r7, #31]
 8016fec:	e01c      	b.n	8017028 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8016fee:	69bb      	ldr	r3, [r7, #24]
 8016ff0:	691a      	ldr	r2, [r3, #16]
 8016ff2:	69bb      	ldr	r3, [r7, #24]
 8016ff4:	695b      	ldr	r3, [r3, #20]
 8016ff6:	3b02      	subs	r3, #2
 8016ff8:	429a      	cmp	r2, r3
 8016ffa:	d20b      	bcs.n	8017014 <remove_chain+0xae>
			fs->free_clst++;
 8016ffc:	69bb      	ldr	r3, [r7, #24]
 8016ffe:	691b      	ldr	r3, [r3, #16]
 8017000:	1c5a      	adds	r2, r3, #1
 8017002:	69bb      	ldr	r3, [r7, #24]
 8017004:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8017006:	69bb      	ldr	r3, [r7, #24]
 8017008:	791b      	ldrb	r3, [r3, #4]
 801700a:	f043 0301 	orr.w	r3, r3, #1
 801700e:	b2da      	uxtb	r2, r3
 8017010:	69bb      	ldr	r3, [r7, #24]
 8017012:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8017014:	697b      	ldr	r3, [r7, #20]
 8017016:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8017018:	69bb      	ldr	r3, [r7, #24]
 801701a:	695b      	ldr	r3, [r3, #20]
 801701c:	68ba      	ldr	r2, [r7, #8]
 801701e:	429a      	cmp	r2, r3
 8017020:	d3c6      	bcc.n	8016fb0 <remove_chain+0x4a>
 8017022:	e000      	b.n	8017026 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8017024:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8017026:	2300      	movs	r3, #0
}
 8017028:	4618      	mov	r0, r3
 801702a:	3720      	adds	r7, #32
 801702c:	46bd      	mov	sp, r7
 801702e:	bd80      	pop	{r7, pc}

08017030 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8017030:	b580      	push	{r7, lr}
 8017032:	b088      	sub	sp, #32
 8017034:	af00      	add	r7, sp, #0
 8017036:	6078      	str	r0, [r7, #4]
 8017038:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	681b      	ldr	r3, [r3, #0]
 801703e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8017040:	683b      	ldr	r3, [r7, #0]
 8017042:	2b00      	cmp	r3, #0
 8017044:	d10d      	bne.n	8017062 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8017046:	693b      	ldr	r3, [r7, #16]
 8017048:	68db      	ldr	r3, [r3, #12]
 801704a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801704c:	69bb      	ldr	r3, [r7, #24]
 801704e:	2b00      	cmp	r3, #0
 8017050:	d004      	beq.n	801705c <create_chain+0x2c>
 8017052:	693b      	ldr	r3, [r7, #16]
 8017054:	695b      	ldr	r3, [r3, #20]
 8017056:	69ba      	ldr	r2, [r7, #24]
 8017058:	429a      	cmp	r2, r3
 801705a:	d31b      	bcc.n	8017094 <create_chain+0x64>
 801705c:	2301      	movs	r3, #1
 801705e:	61bb      	str	r3, [r7, #24]
 8017060:	e018      	b.n	8017094 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8017062:	6839      	ldr	r1, [r7, #0]
 8017064:	6878      	ldr	r0, [r7, #4]
 8017066:	f7ff fdf2 	bl	8016c4e <get_fat>
 801706a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801706c:	68fb      	ldr	r3, [r7, #12]
 801706e:	2b01      	cmp	r3, #1
 8017070:	d801      	bhi.n	8017076 <create_chain+0x46>
 8017072:	2301      	movs	r3, #1
 8017074:	e070      	b.n	8017158 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8017076:	68fb      	ldr	r3, [r7, #12]
 8017078:	f1b3 3fff 	cmp.w	r3, #4294967295
 801707c:	d101      	bne.n	8017082 <create_chain+0x52>
 801707e:	68fb      	ldr	r3, [r7, #12]
 8017080:	e06a      	b.n	8017158 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8017082:	693b      	ldr	r3, [r7, #16]
 8017084:	695b      	ldr	r3, [r3, #20]
 8017086:	68fa      	ldr	r2, [r7, #12]
 8017088:	429a      	cmp	r2, r3
 801708a:	d201      	bcs.n	8017090 <create_chain+0x60>
 801708c:	68fb      	ldr	r3, [r7, #12]
 801708e:	e063      	b.n	8017158 <create_chain+0x128>
		scl = clst;
 8017090:	683b      	ldr	r3, [r7, #0]
 8017092:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8017094:	69bb      	ldr	r3, [r7, #24]
 8017096:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8017098:	69fb      	ldr	r3, [r7, #28]
 801709a:	3301      	adds	r3, #1
 801709c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801709e:	693b      	ldr	r3, [r7, #16]
 80170a0:	695b      	ldr	r3, [r3, #20]
 80170a2:	69fa      	ldr	r2, [r7, #28]
 80170a4:	429a      	cmp	r2, r3
 80170a6:	d307      	bcc.n	80170b8 <create_chain+0x88>
				ncl = 2;
 80170a8:	2302      	movs	r3, #2
 80170aa:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80170ac:	69fa      	ldr	r2, [r7, #28]
 80170ae:	69bb      	ldr	r3, [r7, #24]
 80170b0:	429a      	cmp	r2, r3
 80170b2:	d901      	bls.n	80170b8 <create_chain+0x88>
 80170b4:	2300      	movs	r3, #0
 80170b6:	e04f      	b.n	8017158 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80170b8:	69f9      	ldr	r1, [r7, #28]
 80170ba:	6878      	ldr	r0, [r7, #4]
 80170bc:	f7ff fdc7 	bl	8016c4e <get_fat>
 80170c0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80170c2:	68fb      	ldr	r3, [r7, #12]
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d00e      	beq.n	80170e6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80170c8:	68fb      	ldr	r3, [r7, #12]
 80170ca:	2b01      	cmp	r3, #1
 80170cc:	d003      	beq.n	80170d6 <create_chain+0xa6>
 80170ce:	68fb      	ldr	r3, [r7, #12]
 80170d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80170d4:	d101      	bne.n	80170da <create_chain+0xaa>
 80170d6:	68fb      	ldr	r3, [r7, #12]
 80170d8:	e03e      	b.n	8017158 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80170da:	69fa      	ldr	r2, [r7, #28]
 80170dc:	69bb      	ldr	r3, [r7, #24]
 80170de:	429a      	cmp	r2, r3
 80170e0:	d1da      	bne.n	8017098 <create_chain+0x68>
 80170e2:	2300      	movs	r3, #0
 80170e4:	e038      	b.n	8017158 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80170e6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80170e8:	f04f 32ff 	mov.w	r2, #4294967295
 80170ec:	69f9      	ldr	r1, [r7, #28]
 80170ee:	6938      	ldr	r0, [r7, #16]
 80170f0:	f7ff fe52 	bl	8016d98 <put_fat>
 80170f4:	4603      	mov	r3, r0
 80170f6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80170f8:	7dfb      	ldrb	r3, [r7, #23]
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	d109      	bne.n	8017112 <create_chain+0xe2>
 80170fe:	683b      	ldr	r3, [r7, #0]
 8017100:	2b00      	cmp	r3, #0
 8017102:	d006      	beq.n	8017112 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8017104:	69fa      	ldr	r2, [r7, #28]
 8017106:	6839      	ldr	r1, [r7, #0]
 8017108:	6938      	ldr	r0, [r7, #16]
 801710a:	f7ff fe45 	bl	8016d98 <put_fat>
 801710e:	4603      	mov	r3, r0
 8017110:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8017112:	7dfb      	ldrb	r3, [r7, #23]
 8017114:	2b00      	cmp	r3, #0
 8017116:	d116      	bne.n	8017146 <create_chain+0x116>
		fs->last_clst = ncl;
 8017118:	693b      	ldr	r3, [r7, #16]
 801711a:	69fa      	ldr	r2, [r7, #28]
 801711c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801711e:	693b      	ldr	r3, [r7, #16]
 8017120:	691a      	ldr	r2, [r3, #16]
 8017122:	693b      	ldr	r3, [r7, #16]
 8017124:	695b      	ldr	r3, [r3, #20]
 8017126:	3b02      	subs	r3, #2
 8017128:	429a      	cmp	r2, r3
 801712a:	d804      	bhi.n	8017136 <create_chain+0x106>
 801712c:	693b      	ldr	r3, [r7, #16]
 801712e:	691b      	ldr	r3, [r3, #16]
 8017130:	1e5a      	subs	r2, r3, #1
 8017132:	693b      	ldr	r3, [r7, #16]
 8017134:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8017136:	693b      	ldr	r3, [r7, #16]
 8017138:	791b      	ldrb	r3, [r3, #4]
 801713a:	f043 0301 	orr.w	r3, r3, #1
 801713e:	b2da      	uxtb	r2, r3
 8017140:	693b      	ldr	r3, [r7, #16]
 8017142:	711a      	strb	r2, [r3, #4]
 8017144:	e007      	b.n	8017156 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8017146:	7dfb      	ldrb	r3, [r7, #23]
 8017148:	2b01      	cmp	r3, #1
 801714a:	d102      	bne.n	8017152 <create_chain+0x122>
 801714c:	f04f 33ff 	mov.w	r3, #4294967295
 8017150:	e000      	b.n	8017154 <create_chain+0x124>
 8017152:	2301      	movs	r3, #1
 8017154:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8017156:	69fb      	ldr	r3, [r7, #28]
}
 8017158:	4618      	mov	r0, r3
 801715a:	3720      	adds	r7, #32
 801715c:	46bd      	mov	sp, r7
 801715e:	bd80      	pop	{r7, pc}

08017160 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8017160:	b480      	push	{r7}
 8017162:	b087      	sub	sp, #28
 8017164:	af00      	add	r7, sp, #0
 8017166:	6078      	str	r0, [r7, #4]
 8017168:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	681b      	ldr	r3, [r3, #0]
 801716e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017174:	3304      	adds	r3, #4
 8017176:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8017178:	683b      	ldr	r3, [r7, #0]
 801717a:	0a5b      	lsrs	r3, r3, #9
 801717c:	68fa      	ldr	r2, [r7, #12]
 801717e:	8952      	ldrh	r2, [r2, #10]
 8017180:	fbb3 f3f2 	udiv	r3, r3, r2
 8017184:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8017186:	693b      	ldr	r3, [r7, #16]
 8017188:	1d1a      	adds	r2, r3, #4
 801718a:	613a      	str	r2, [r7, #16]
 801718c:	681b      	ldr	r3, [r3, #0]
 801718e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8017190:	68bb      	ldr	r3, [r7, #8]
 8017192:	2b00      	cmp	r3, #0
 8017194:	d101      	bne.n	801719a <clmt_clust+0x3a>
 8017196:	2300      	movs	r3, #0
 8017198:	e010      	b.n	80171bc <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801719a:	697a      	ldr	r2, [r7, #20]
 801719c:	68bb      	ldr	r3, [r7, #8]
 801719e:	429a      	cmp	r2, r3
 80171a0:	d307      	bcc.n	80171b2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80171a2:	697a      	ldr	r2, [r7, #20]
 80171a4:	68bb      	ldr	r3, [r7, #8]
 80171a6:	1ad3      	subs	r3, r2, r3
 80171a8:	617b      	str	r3, [r7, #20]
 80171aa:	693b      	ldr	r3, [r7, #16]
 80171ac:	3304      	adds	r3, #4
 80171ae:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80171b0:	e7e9      	b.n	8017186 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80171b2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80171b4:	693b      	ldr	r3, [r7, #16]
 80171b6:	681a      	ldr	r2, [r3, #0]
 80171b8:	697b      	ldr	r3, [r7, #20]
 80171ba:	4413      	add	r3, r2
}
 80171bc:	4618      	mov	r0, r3
 80171be:	371c      	adds	r7, #28
 80171c0:	46bd      	mov	sp, r7
 80171c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171c6:	4770      	bx	lr

080171c8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80171c8:	b580      	push	{r7, lr}
 80171ca:	b086      	sub	sp, #24
 80171cc:	af00      	add	r7, sp, #0
 80171ce:	6078      	str	r0, [r7, #4]
 80171d0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	681b      	ldr	r3, [r3, #0]
 80171d6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80171d8:	683b      	ldr	r3, [r7, #0]
 80171da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80171de:	d204      	bcs.n	80171ea <dir_sdi+0x22>
 80171e0:	683b      	ldr	r3, [r7, #0]
 80171e2:	f003 031f 	and.w	r3, r3, #31
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d001      	beq.n	80171ee <dir_sdi+0x26>
		return FR_INT_ERR;
 80171ea:	2302      	movs	r3, #2
 80171ec:	e063      	b.n	80172b6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	683a      	ldr	r2, [r7, #0]
 80171f2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	689b      	ldr	r3, [r3, #8]
 80171f8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80171fa:	697b      	ldr	r3, [r7, #20]
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d106      	bne.n	801720e <dir_sdi+0x46>
 8017200:	693b      	ldr	r3, [r7, #16]
 8017202:	781b      	ldrb	r3, [r3, #0]
 8017204:	2b02      	cmp	r3, #2
 8017206:	d902      	bls.n	801720e <dir_sdi+0x46>
		clst = fs->dirbase;
 8017208:	693b      	ldr	r3, [r7, #16]
 801720a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801720c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801720e:	697b      	ldr	r3, [r7, #20]
 8017210:	2b00      	cmp	r3, #0
 8017212:	d10c      	bne.n	801722e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8017214:	683b      	ldr	r3, [r7, #0]
 8017216:	095b      	lsrs	r3, r3, #5
 8017218:	693a      	ldr	r2, [r7, #16]
 801721a:	8912      	ldrh	r2, [r2, #8]
 801721c:	4293      	cmp	r3, r2
 801721e:	d301      	bcc.n	8017224 <dir_sdi+0x5c>
 8017220:	2302      	movs	r3, #2
 8017222:	e048      	b.n	80172b6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8017224:	693b      	ldr	r3, [r7, #16]
 8017226:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	61da      	str	r2, [r3, #28]
 801722c:	e029      	b.n	8017282 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801722e:	693b      	ldr	r3, [r7, #16]
 8017230:	895b      	ldrh	r3, [r3, #10]
 8017232:	025b      	lsls	r3, r3, #9
 8017234:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8017236:	e019      	b.n	801726c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	6979      	ldr	r1, [r7, #20]
 801723c:	4618      	mov	r0, r3
 801723e:	f7ff fd06 	bl	8016c4e <get_fat>
 8017242:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017244:	697b      	ldr	r3, [r7, #20]
 8017246:	f1b3 3fff 	cmp.w	r3, #4294967295
 801724a:	d101      	bne.n	8017250 <dir_sdi+0x88>
 801724c:	2301      	movs	r3, #1
 801724e:	e032      	b.n	80172b6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8017250:	697b      	ldr	r3, [r7, #20]
 8017252:	2b01      	cmp	r3, #1
 8017254:	d904      	bls.n	8017260 <dir_sdi+0x98>
 8017256:	693b      	ldr	r3, [r7, #16]
 8017258:	695b      	ldr	r3, [r3, #20]
 801725a:	697a      	ldr	r2, [r7, #20]
 801725c:	429a      	cmp	r2, r3
 801725e:	d301      	bcc.n	8017264 <dir_sdi+0x9c>
 8017260:	2302      	movs	r3, #2
 8017262:	e028      	b.n	80172b6 <dir_sdi+0xee>
			ofs -= csz;
 8017264:	683a      	ldr	r2, [r7, #0]
 8017266:	68fb      	ldr	r3, [r7, #12]
 8017268:	1ad3      	subs	r3, r2, r3
 801726a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801726c:	683a      	ldr	r2, [r7, #0]
 801726e:	68fb      	ldr	r3, [r7, #12]
 8017270:	429a      	cmp	r2, r3
 8017272:	d2e1      	bcs.n	8017238 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8017274:	6979      	ldr	r1, [r7, #20]
 8017276:	6938      	ldr	r0, [r7, #16]
 8017278:	f7ff fcca 	bl	8016c10 <clust2sect>
 801727c:	4602      	mov	r2, r0
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	697a      	ldr	r2, [r7, #20]
 8017286:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	69db      	ldr	r3, [r3, #28]
 801728c:	2b00      	cmp	r3, #0
 801728e:	d101      	bne.n	8017294 <dir_sdi+0xcc>
 8017290:	2302      	movs	r3, #2
 8017292:	e010      	b.n	80172b6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	69da      	ldr	r2, [r3, #28]
 8017298:	683b      	ldr	r3, [r7, #0]
 801729a:	0a5b      	lsrs	r3, r3, #9
 801729c:	441a      	add	r2, r3
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80172a2:	693b      	ldr	r3, [r7, #16]
 80172a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80172a8:	683b      	ldr	r3, [r7, #0]
 80172aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80172ae:	441a      	add	r2, r3
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80172b4:	2300      	movs	r3, #0
}
 80172b6:	4618      	mov	r0, r3
 80172b8:	3718      	adds	r7, #24
 80172ba:	46bd      	mov	sp, r7
 80172bc:	bd80      	pop	{r7, pc}

080172be <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80172be:	b580      	push	{r7, lr}
 80172c0:	b086      	sub	sp, #24
 80172c2:	af00      	add	r7, sp, #0
 80172c4:	6078      	str	r0, [r7, #4]
 80172c6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80172c8:	687b      	ldr	r3, [r7, #4]
 80172ca:	681b      	ldr	r3, [r3, #0]
 80172cc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	695b      	ldr	r3, [r3, #20]
 80172d2:	3320      	adds	r3, #32
 80172d4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	69db      	ldr	r3, [r3, #28]
 80172da:	2b00      	cmp	r3, #0
 80172dc:	d003      	beq.n	80172e6 <dir_next+0x28>
 80172de:	68bb      	ldr	r3, [r7, #8]
 80172e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80172e4:	d301      	bcc.n	80172ea <dir_next+0x2c>
 80172e6:	2304      	movs	r3, #4
 80172e8:	e0aa      	b.n	8017440 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80172ea:	68bb      	ldr	r3, [r7, #8]
 80172ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	f040 8098 	bne.w	8017426 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	69db      	ldr	r3, [r3, #28]
 80172fa:	1c5a      	adds	r2, r3, #1
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	699b      	ldr	r3, [r3, #24]
 8017304:	2b00      	cmp	r3, #0
 8017306:	d10b      	bne.n	8017320 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8017308:	68bb      	ldr	r3, [r7, #8]
 801730a:	095b      	lsrs	r3, r3, #5
 801730c:	68fa      	ldr	r2, [r7, #12]
 801730e:	8912      	ldrh	r2, [r2, #8]
 8017310:	4293      	cmp	r3, r2
 8017312:	f0c0 8088 	bcc.w	8017426 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	2200      	movs	r2, #0
 801731a:	61da      	str	r2, [r3, #28]
 801731c:	2304      	movs	r3, #4
 801731e:	e08f      	b.n	8017440 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8017320:	68bb      	ldr	r3, [r7, #8]
 8017322:	0a5b      	lsrs	r3, r3, #9
 8017324:	68fa      	ldr	r2, [r7, #12]
 8017326:	8952      	ldrh	r2, [r2, #10]
 8017328:	3a01      	subs	r2, #1
 801732a:	4013      	ands	r3, r2
 801732c:	2b00      	cmp	r3, #0
 801732e:	d17a      	bne.n	8017426 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8017330:	687a      	ldr	r2, [r7, #4]
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	699b      	ldr	r3, [r3, #24]
 8017336:	4619      	mov	r1, r3
 8017338:	4610      	mov	r0, r2
 801733a:	f7ff fc88 	bl	8016c4e <get_fat>
 801733e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8017340:	697b      	ldr	r3, [r7, #20]
 8017342:	2b01      	cmp	r3, #1
 8017344:	d801      	bhi.n	801734a <dir_next+0x8c>
 8017346:	2302      	movs	r3, #2
 8017348:	e07a      	b.n	8017440 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801734a:	697b      	ldr	r3, [r7, #20]
 801734c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017350:	d101      	bne.n	8017356 <dir_next+0x98>
 8017352:	2301      	movs	r3, #1
 8017354:	e074      	b.n	8017440 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8017356:	68fb      	ldr	r3, [r7, #12]
 8017358:	695b      	ldr	r3, [r3, #20]
 801735a:	697a      	ldr	r2, [r7, #20]
 801735c:	429a      	cmp	r2, r3
 801735e:	d358      	bcc.n	8017412 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8017360:	683b      	ldr	r3, [r7, #0]
 8017362:	2b00      	cmp	r3, #0
 8017364:	d104      	bne.n	8017370 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	2200      	movs	r2, #0
 801736a:	61da      	str	r2, [r3, #28]
 801736c:	2304      	movs	r3, #4
 801736e:	e067      	b.n	8017440 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8017370:	687a      	ldr	r2, [r7, #4]
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	699b      	ldr	r3, [r3, #24]
 8017376:	4619      	mov	r1, r3
 8017378:	4610      	mov	r0, r2
 801737a:	f7ff fe59 	bl	8017030 <create_chain>
 801737e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8017380:	697b      	ldr	r3, [r7, #20]
 8017382:	2b00      	cmp	r3, #0
 8017384:	d101      	bne.n	801738a <dir_next+0xcc>
 8017386:	2307      	movs	r3, #7
 8017388:	e05a      	b.n	8017440 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801738a:	697b      	ldr	r3, [r7, #20]
 801738c:	2b01      	cmp	r3, #1
 801738e:	d101      	bne.n	8017394 <dir_next+0xd6>
 8017390:	2302      	movs	r3, #2
 8017392:	e055      	b.n	8017440 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017394:	697b      	ldr	r3, [r7, #20]
 8017396:	f1b3 3fff 	cmp.w	r3, #4294967295
 801739a:	d101      	bne.n	80173a0 <dir_next+0xe2>
 801739c:	2301      	movs	r3, #1
 801739e:	e04f      	b.n	8017440 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80173a0:	68f8      	ldr	r0, [r7, #12]
 80173a2:	f7ff fb55 	bl	8016a50 <sync_window>
 80173a6:	4603      	mov	r3, r0
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	d001      	beq.n	80173b0 <dir_next+0xf2>
 80173ac:	2301      	movs	r3, #1
 80173ae:	e047      	b.n	8017440 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80173b0:	68fb      	ldr	r3, [r7, #12]
 80173b2:	3330      	adds	r3, #48	; 0x30
 80173b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80173b8:	2100      	movs	r1, #0
 80173ba:	4618      	mov	r0, r3
 80173bc:	f7ff f97f 	bl	80166be <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80173c0:	2300      	movs	r3, #0
 80173c2:	613b      	str	r3, [r7, #16]
 80173c4:	6979      	ldr	r1, [r7, #20]
 80173c6:	68f8      	ldr	r0, [r7, #12]
 80173c8:	f7ff fc22 	bl	8016c10 <clust2sect>
 80173cc:	4602      	mov	r2, r0
 80173ce:	68fb      	ldr	r3, [r7, #12]
 80173d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80173d2:	e012      	b.n	80173fa <dir_next+0x13c>
						fs->wflag = 1;
 80173d4:	68fb      	ldr	r3, [r7, #12]
 80173d6:	2201      	movs	r2, #1
 80173d8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80173da:	68f8      	ldr	r0, [r7, #12]
 80173dc:	f7ff fb38 	bl	8016a50 <sync_window>
 80173e0:	4603      	mov	r3, r0
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	d001      	beq.n	80173ea <dir_next+0x12c>
 80173e6:	2301      	movs	r3, #1
 80173e8:	e02a      	b.n	8017440 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80173ea:	693b      	ldr	r3, [r7, #16]
 80173ec:	3301      	adds	r3, #1
 80173ee:	613b      	str	r3, [r7, #16]
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80173f4:	1c5a      	adds	r2, r3, #1
 80173f6:	68fb      	ldr	r3, [r7, #12]
 80173f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80173fa:	68fb      	ldr	r3, [r7, #12]
 80173fc:	895b      	ldrh	r3, [r3, #10]
 80173fe:	461a      	mov	r2, r3
 8017400:	693b      	ldr	r3, [r7, #16]
 8017402:	4293      	cmp	r3, r2
 8017404:	d3e6      	bcc.n	80173d4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8017406:	68fb      	ldr	r3, [r7, #12]
 8017408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801740a:	693b      	ldr	r3, [r7, #16]
 801740c:	1ad2      	subs	r2, r2, r3
 801740e:	68fb      	ldr	r3, [r7, #12]
 8017410:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	697a      	ldr	r2, [r7, #20]
 8017416:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8017418:	6979      	ldr	r1, [r7, #20]
 801741a:	68f8      	ldr	r0, [r7, #12]
 801741c:	f7ff fbf8 	bl	8016c10 <clust2sect>
 8017420:	4602      	mov	r2, r0
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	68ba      	ldr	r2, [r7, #8]
 801742a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801742c:	68fb      	ldr	r3, [r7, #12]
 801742e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017432:	68bb      	ldr	r3, [r7, #8]
 8017434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017438:	441a      	add	r2, r3
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801743e:	2300      	movs	r3, #0
}
 8017440:	4618      	mov	r0, r3
 8017442:	3718      	adds	r7, #24
 8017444:	46bd      	mov	sp, r7
 8017446:	bd80      	pop	{r7, pc}

08017448 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8017448:	b580      	push	{r7, lr}
 801744a:	b086      	sub	sp, #24
 801744c:	af00      	add	r7, sp, #0
 801744e:	6078      	str	r0, [r7, #4]
 8017450:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	681b      	ldr	r3, [r3, #0]
 8017456:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8017458:	2100      	movs	r1, #0
 801745a:	6878      	ldr	r0, [r7, #4]
 801745c:	f7ff feb4 	bl	80171c8 <dir_sdi>
 8017460:	4603      	mov	r3, r0
 8017462:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8017464:	7dfb      	ldrb	r3, [r7, #23]
 8017466:	2b00      	cmp	r3, #0
 8017468:	d12b      	bne.n	80174c2 <dir_alloc+0x7a>
		n = 0;
 801746a:	2300      	movs	r3, #0
 801746c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	69db      	ldr	r3, [r3, #28]
 8017472:	4619      	mov	r1, r3
 8017474:	68f8      	ldr	r0, [r7, #12]
 8017476:	f7ff fb2f 	bl	8016ad8 <move_window>
 801747a:	4603      	mov	r3, r0
 801747c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801747e:	7dfb      	ldrb	r3, [r7, #23]
 8017480:	2b00      	cmp	r3, #0
 8017482:	d11d      	bne.n	80174c0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	6a1b      	ldr	r3, [r3, #32]
 8017488:	781b      	ldrb	r3, [r3, #0]
 801748a:	2be5      	cmp	r3, #229	; 0xe5
 801748c:	d004      	beq.n	8017498 <dir_alloc+0x50>
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	6a1b      	ldr	r3, [r3, #32]
 8017492:	781b      	ldrb	r3, [r3, #0]
 8017494:	2b00      	cmp	r3, #0
 8017496:	d107      	bne.n	80174a8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8017498:	693b      	ldr	r3, [r7, #16]
 801749a:	3301      	adds	r3, #1
 801749c:	613b      	str	r3, [r7, #16]
 801749e:	693a      	ldr	r2, [r7, #16]
 80174a0:	683b      	ldr	r3, [r7, #0]
 80174a2:	429a      	cmp	r2, r3
 80174a4:	d102      	bne.n	80174ac <dir_alloc+0x64>
 80174a6:	e00c      	b.n	80174c2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80174a8:	2300      	movs	r3, #0
 80174aa:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80174ac:	2101      	movs	r1, #1
 80174ae:	6878      	ldr	r0, [r7, #4]
 80174b0:	f7ff ff05 	bl	80172be <dir_next>
 80174b4:	4603      	mov	r3, r0
 80174b6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80174b8:	7dfb      	ldrb	r3, [r7, #23]
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d0d7      	beq.n	801746e <dir_alloc+0x26>
 80174be:	e000      	b.n	80174c2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80174c0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80174c2:	7dfb      	ldrb	r3, [r7, #23]
 80174c4:	2b04      	cmp	r3, #4
 80174c6:	d101      	bne.n	80174cc <dir_alloc+0x84>
 80174c8:	2307      	movs	r3, #7
 80174ca:	75fb      	strb	r3, [r7, #23]
	return res;
 80174cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80174ce:	4618      	mov	r0, r3
 80174d0:	3718      	adds	r7, #24
 80174d2:	46bd      	mov	sp, r7
 80174d4:	bd80      	pop	{r7, pc}

080174d6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80174d6:	b580      	push	{r7, lr}
 80174d8:	b084      	sub	sp, #16
 80174da:	af00      	add	r7, sp, #0
 80174dc:	6078      	str	r0, [r7, #4]
 80174de:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80174e0:	683b      	ldr	r3, [r7, #0]
 80174e2:	331a      	adds	r3, #26
 80174e4:	4618      	mov	r0, r3
 80174e6:	f7ff f847 	bl	8016578 <ld_word>
 80174ea:	4603      	mov	r3, r0
 80174ec:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	781b      	ldrb	r3, [r3, #0]
 80174f2:	2b03      	cmp	r3, #3
 80174f4:	d109      	bne.n	801750a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80174f6:	683b      	ldr	r3, [r7, #0]
 80174f8:	3314      	adds	r3, #20
 80174fa:	4618      	mov	r0, r3
 80174fc:	f7ff f83c 	bl	8016578 <ld_word>
 8017500:	4603      	mov	r3, r0
 8017502:	041b      	lsls	r3, r3, #16
 8017504:	68fa      	ldr	r2, [r7, #12]
 8017506:	4313      	orrs	r3, r2
 8017508:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801750a:	68fb      	ldr	r3, [r7, #12]
}
 801750c:	4618      	mov	r0, r3
 801750e:	3710      	adds	r7, #16
 8017510:	46bd      	mov	sp, r7
 8017512:	bd80      	pop	{r7, pc}

08017514 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8017514:	b580      	push	{r7, lr}
 8017516:	b084      	sub	sp, #16
 8017518:	af00      	add	r7, sp, #0
 801751a:	60f8      	str	r0, [r7, #12]
 801751c:	60b9      	str	r1, [r7, #8]
 801751e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8017520:	68bb      	ldr	r3, [r7, #8]
 8017522:	331a      	adds	r3, #26
 8017524:	687a      	ldr	r2, [r7, #4]
 8017526:	b292      	uxth	r2, r2
 8017528:	4611      	mov	r1, r2
 801752a:	4618      	mov	r0, r3
 801752c:	f7ff f85f 	bl	80165ee <st_word>
	if (fs->fs_type == FS_FAT32) {
 8017530:	68fb      	ldr	r3, [r7, #12]
 8017532:	781b      	ldrb	r3, [r3, #0]
 8017534:	2b03      	cmp	r3, #3
 8017536:	d109      	bne.n	801754c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8017538:	68bb      	ldr	r3, [r7, #8]
 801753a:	f103 0214 	add.w	r2, r3, #20
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	0c1b      	lsrs	r3, r3, #16
 8017542:	b29b      	uxth	r3, r3
 8017544:	4619      	mov	r1, r3
 8017546:	4610      	mov	r0, r2
 8017548:	f7ff f851 	bl	80165ee <st_word>
	}
}
 801754c:	bf00      	nop
 801754e:	3710      	adds	r7, #16
 8017550:	46bd      	mov	sp, r7
 8017552:	bd80      	pop	{r7, pc}

08017554 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8017554:	b580      	push	{r7, lr}
 8017556:	b086      	sub	sp, #24
 8017558:	af00      	add	r7, sp, #0
 801755a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	681b      	ldr	r3, [r3, #0]
 8017560:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8017562:	2100      	movs	r1, #0
 8017564:	6878      	ldr	r0, [r7, #4]
 8017566:	f7ff fe2f 	bl	80171c8 <dir_sdi>
 801756a:	4603      	mov	r3, r0
 801756c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801756e:	7dfb      	ldrb	r3, [r7, #23]
 8017570:	2b00      	cmp	r3, #0
 8017572:	d001      	beq.n	8017578 <dir_find+0x24>
 8017574:	7dfb      	ldrb	r3, [r7, #23]
 8017576:	e03e      	b.n	80175f6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	69db      	ldr	r3, [r3, #28]
 801757c:	4619      	mov	r1, r3
 801757e:	6938      	ldr	r0, [r7, #16]
 8017580:	f7ff faaa 	bl	8016ad8 <move_window>
 8017584:	4603      	mov	r3, r0
 8017586:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8017588:	7dfb      	ldrb	r3, [r7, #23]
 801758a:	2b00      	cmp	r3, #0
 801758c:	d12f      	bne.n	80175ee <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	6a1b      	ldr	r3, [r3, #32]
 8017592:	781b      	ldrb	r3, [r3, #0]
 8017594:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8017596:	7bfb      	ldrb	r3, [r7, #15]
 8017598:	2b00      	cmp	r3, #0
 801759a:	d102      	bne.n	80175a2 <dir_find+0x4e>
 801759c:	2304      	movs	r3, #4
 801759e:	75fb      	strb	r3, [r7, #23]
 80175a0:	e028      	b.n	80175f4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	6a1b      	ldr	r3, [r3, #32]
 80175a6:	330b      	adds	r3, #11
 80175a8:	781b      	ldrb	r3, [r3, #0]
 80175aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80175ae:	b2da      	uxtb	r2, r3
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	6a1b      	ldr	r3, [r3, #32]
 80175b8:	330b      	adds	r3, #11
 80175ba:	781b      	ldrb	r3, [r3, #0]
 80175bc:	f003 0308 	and.w	r3, r3, #8
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d10a      	bne.n	80175da <dir_find+0x86>
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	6a18      	ldr	r0, [r3, #32]
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	3324      	adds	r3, #36	; 0x24
 80175cc:	220b      	movs	r2, #11
 80175ce:	4619      	mov	r1, r3
 80175d0:	f7ff f88f 	bl	80166f2 <mem_cmp>
 80175d4:	4603      	mov	r3, r0
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	d00b      	beq.n	80175f2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80175da:	2100      	movs	r1, #0
 80175dc:	6878      	ldr	r0, [r7, #4]
 80175de:	f7ff fe6e 	bl	80172be <dir_next>
 80175e2:	4603      	mov	r3, r0
 80175e4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80175e6:	7dfb      	ldrb	r3, [r7, #23]
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d0c5      	beq.n	8017578 <dir_find+0x24>
 80175ec:	e002      	b.n	80175f4 <dir_find+0xa0>
		if (res != FR_OK) break;
 80175ee:	bf00      	nop
 80175f0:	e000      	b.n	80175f4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80175f2:	bf00      	nop

	return res;
 80175f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80175f6:	4618      	mov	r0, r3
 80175f8:	3718      	adds	r7, #24
 80175fa:	46bd      	mov	sp, r7
 80175fc:	bd80      	pop	{r7, pc}

080175fe <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80175fe:	b580      	push	{r7, lr}
 8017600:	b084      	sub	sp, #16
 8017602:	af00      	add	r7, sp, #0
 8017604:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8017606:	687b      	ldr	r3, [r7, #4]
 8017608:	681b      	ldr	r3, [r3, #0]
 801760a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801760c:	2101      	movs	r1, #1
 801760e:	6878      	ldr	r0, [r7, #4]
 8017610:	f7ff ff1a 	bl	8017448 <dir_alloc>
 8017614:	4603      	mov	r3, r0
 8017616:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8017618:	7bfb      	ldrb	r3, [r7, #15]
 801761a:	2b00      	cmp	r3, #0
 801761c:	d11c      	bne.n	8017658 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	69db      	ldr	r3, [r3, #28]
 8017622:	4619      	mov	r1, r3
 8017624:	68b8      	ldr	r0, [r7, #8]
 8017626:	f7ff fa57 	bl	8016ad8 <move_window>
 801762a:	4603      	mov	r3, r0
 801762c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801762e:	7bfb      	ldrb	r3, [r7, #15]
 8017630:	2b00      	cmp	r3, #0
 8017632:	d111      	bne.n	8017658 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	6a1b      	ldr	r3, [r3, #32]
 8017638:	2220      	movs	r2, #32
 801763a:	2100      	movs	r1, #0
 801763c:	4618      	mov	r0, r3
 801763e:	f7ff f83e 	bl	80166be <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	6a18      	ldr	r0, [r3, #32]
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	3324      	adds	r3, #36	; 0x24
 801764a:	220b      	movs	r2, #11
 801764c:	4619      	mov	r1, r3
 801764e:	f7ff f815 	bl	801667c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8017652:	68bb      	ldr	r3, [r7, #8]
 8017654:	2201      	movs	r2, #1
 8017656:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8017658:	7bfb      	ldrb	r3, [r7, #15]
}
 801765a:	4618      	mov	r0, r3
 801765c:	3710      	adds	r7, #16
 801765e:	46bd      	mov	sp, r7
 8017660:	bd80      	pop	{r7, pc}
	...

08017664 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8017664:	b580      	push	{r7, lr}
 8017666:	b088      	sub	sp, #32
 8017668:	af00      	add	r7, sp, #0
 801766a:	6078      	str	r0, [r7, #4]
 801766c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801766e:	683b      	ldr	r3, [r7, #0]
 8017670:	681b      	ldr	r3, [r3, #0]
 8017672:	60fb      	str	r3, [r7, #12]
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	3324      	adds	r3, #36	; 0x24
 8017678:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801767a:	220b      	movs	r2, #11
 801767c:	2120      	movs	r1, #32
 801767e:	68b8      	ldr	r0, [r7, #8]
 8017680:	f7ff f81d 	bl	80166be <mem_set>
	si = i = 0; ni = 8;
 8017684:	2300      	movs	r3, #0
 8017686:	613b      	str	r3, [r7, #16]
 8017688:	693b      	ldr	r3, [r7, #16]
 801768a:	617b      	str	r3, [r7, #20]
 801768c:	2308      	movs	r3, #8
 801768e:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8017690:	697b      	ldr	r3, [r7, #20]
 8017692:	1c5a      	adds	r2, r3, #1
 8017694:	617a      	str	r2, [r7, #20]
 8017696:	68fa      	ldr	r2, [r7, #12]
 8017698:	4413      	add	r3, r2
 801769a:	781b      	ldrb	r3, [r3, #0]
 801769c:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801769e:	7ffb      	ldrb	r3, [r7, #31]
 80176a0:	2b20      	cmp	r3, #32
 80176a2:	d94e      	bls.n	8017742 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80176a4:	7ffb      	ldrb	r3, [r7, #31]
 80176a6:	2b2f      	cmp	r3, #47	; 0x2f
 80176a8:	d006      	beq.n	80176b8 <create_name+0x54>
 80176aa:	7ffb      	ldrb	r3, [r7, #31]
 80176ac:	2b5c      	cmp	r3, #92	; 0x5c
 80176ae:	d110      	bne.n	80176d2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80176b0:	e002      	b.n	80176b8 <create_name+0x54>
 80176b2:	697b      	ldr	r3, [r7, #20]
 80176b4:	3301      	adds	r3, #1
 80176b6:	617b      	str	r3, [r7, #20]
 80176b8:	68fa      	ldr	r2, [r7, #12]
 80176ba:	697b      	ldr	r3, [r7, #20]
 80176bc:	4413      	add	r3, r2
 80176be:	781b      	ldrb	r3, [r3, #0]
 80176c0:	2b2f      	cmp	r3, #47	; 0x2f
 80176c2:	d0f6      	beq.n	80176b2 <create_name+0x4e>
 80176c4:	68fa      	ldr	r2, [r7, #12]
 80176c6:	697b      	ldr	r3, [r7, #20]
 80176c8:	4413      	add	r3, r2
 80176ca:	781b      	ldrb	r3, [r3, #0]
 80176cc:	2b5c      	cmp	r3, #92	; 0x5c
 80176ce:	d0f0      	beq.n	80176b2 <create_name+0x4e>
			break;
 80176d0:	e038      	b.n	8017744 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80176d2:	7ffb      	ldrb	r3, [r7, #31]
 80176d4:	2b2e      	cmp	r3, #46	; 0x2e
 80176d6:	d003      	beq.n	80176e0 <create_name+0x7c>
 80176d8:	693a      	ldr	r2, [r7, #16]
 80176da:	69bb      	ldr	r3, [r7, #24]
 80176dc:	429a      	cmp	r2, r3
 80176de:	d30c      	bcc.n	80176fa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80176e0:	69bb      	ldr	r3, [r7, #24]
 80176e2:	2b0b      	cmp	r3, #11
 80176e4:	d002      	beq.n	80176ec <create_name+0x88>
 80176e6:	7ffb      	ldrb	r3, [r7, #31]
 80176e8:	2b2e      	cmp	r3, #46	; 0x2e
 80176ea:	d001      	beq.n	80176f0 <create_name+0x8c>
 80176ec:	2306      	movs	r3, #6
 80176ee:	e044      	b.n	801777a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80176f0:	2308      	movs	r3, #8
 80176f2:	613b      	str	r3, [r7, #16]
 80176f4:	230b      	movs	r3, #11
 80176f6:	61bb      	str	r3, [r7, #24]
			continue;
 80176f8:	e022      	b.n	8017740 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80176fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80176fe:	2b00      	cmp	r3, #0
 8017700:	da04      	bge.n	801770c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8017702:	7ffb      	ldrb	r3, [r7, #31]
 8017704:	3b80      	subs	r3, #128	; 0x80
 8017706:	4a1f      	ldr	r2, [pc, #124]	; (8017784 <create_name+0x120>)
 8017708:	5cd3      	ldrb	r3, [r2, r3]
 801770a:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 801770c:	7ffb      	ldrb	r3, [r7, #31]
 801770e:	4619      	mov	r1, r3
 8017710:	481d      	ldr	r0, [pc, #116]	; (8017788 <create_name+0x124>)
 8017712:	f7ff f815 	bl	8016740 <chk_chr>
 8017716:	4603      	mov	r3, r0
 8017718:	2b00      	cmp	r3, #0
 801771a:	d001      	beq.n	8017720 <create_name+0xbc>
 801771c:	2306      	movs	r3, #6
 801771e:	e02c      	b.n	801777a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8017720:	7ffb      	ldrb	r3, [r7, #31]
 8017722:	2b60      	cmp	r3, #96	; 0x60
 8017724:	d905      	bls.n	8017732 <create_name+0xce>
 8017726:	7ffb      	ldrb	r3, [r7, #31]
 8017728:	2b7a      	cmp	r3, #122	; 0x7a
 801772a:	d802      	bhi.n	8017732 <create_name+0xce>
 801772c:	7ffb      	ldrb	r3, [r7, #31]
 801772e:	3b20      	subs	r3, #32
 8017730:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8017732:	693b      	ldr	r3, [r7, #16]
 8017734:	1c5a      	adds	r2, r3, #1
 8017736:	613a      	str	r2, [r7, #16]
 8017738:	68ba      	ldr	r2, [r7, #8]
 801773a:	4413      	add	r3, r2
 801773c:	7ffa      	ldrb	r2, [r7, #31]
 801773e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8017740:	e7a6      	b.n	8017690 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8017742:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8017744:	68fa      	ldr	r2, [r7, #12]
 8017746:	697b      	ldr	r3, [r7, #20]
 8017748:	441a      	add	r2, r3
 801774a:	683b      	ldr	r3, [r7, #0]
 801774c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801774e:	693b      	ldr	r3, [r7, #16]
 8017750:	2b00      	cmp	r3, #0
 8017752:	d101      	bne.n	8017758 <create_name+0xf4>
 8017754:	2306      	movs	r3, #6
 8017756:	e010      	b.n	801777a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8017758:	68bb      	ldr	r3, [r7, #8]
 801775a:	781b      	ldrb	r3, [r3, #0]
 801775c:	2be5      	cmp	r3, #229	; 0xe5
 801775e:	d102      	bne.n	8017766 <create_name+0x102>
 8017760:	68bb      	ldr	r3, [r7, #8]
 8017762:	2205      	movs	r2, #5
 8017764:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8017766:	7ffb      	ldrb	r3, [r7, #31]
 8017768:	2b20      	cmp	r3, #32
 801776a:	d801      	bhi.n	8017770 <create_name+0x10c>
 801776c:	2204      	movs	r2, #4
 801776e:	e000      	b.n	8017772 <create_name+0x10e>
 8017770:	2200      	movs	r2, #0
 8017772:	68bb      	ldr	r3, [r7, #8]
 8017774:	330b      	adds	r3, #11
 8017776:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8017778:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801777a:	4618      	mov	r0, r3
 801777c:	3720      	adds	r7, #32
 801777e:	46bd      	mov	sp, r7
 8017780:	bd80      	pop	{r7, pc}
 8017782:	bf00      	nop
 8017784:	0801afa4 	.word	0x0801afa4
 8017788:	0801aec8 	.word	0x0801aec8

0801778c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801778c:	b580      	push	{r7, lr}
 801778e:	b086      	sub	sp, #24
 8017790:	af00      	add	r7, sp, #0
 8017792:	6078      	str	r0, [r7, #4]
 8017794:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801779a:	693b      	ldr	r3, [r7, #16]
 801779c:	681b      	ldr	r3, [r3, #0]
 801779e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80177a0:	e002      	b.n	80177a8 <follow_path+0x1c>
 80177a2:	683b      	ldr	r3, [r7, #0]
 80177a4:	3301      	adds	r3, #1
 80177a6:	603b      	str	r3, [r7, #0]
 80177a8:	683b      	ldr	r3, [r7, #0]
 80177aa:	781b      	ldrb	r3, [r3, #0]
 80177ac:	2b2f      	cmp	r3, #47	; 0x2f
 80177ae:	d0f8      	beq.n	80177a2 <follow_path+0x16>
 80177b0:	683b      	ldr	r3, [r7, #0]
 80177b2:	781b      	ldrb	r3, [r3, #0]
 80177b4:	2b5c      	cmp	r3, #92	; 0x5c
 80177b6:	d0f4      	beq.n	80177a2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80177b8:	693b      	ldr	r3, [r7, #16]
 80177ba:	2200      	movs	r2, #0
 80177bc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80177be:	683b      	ldr	r3, [r7, #0]
 80177c0:	781b      	ldrb	r3, [r3, #0]
 80177c2:	2b1f      	cmp	r3, #31
 80177c4:	d80a      	bhi.n	80177dc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	2280      	movs	r2, #128	; 0x80
 80177ca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80177ce:	2100      	movs	r1, #0
 80177d0:	6878      	ldr	r0, [r7, #4]
 80177d2:	f7ff fcf9 	bl	80171c8 <dir_sdi>
 80177d6:	4603      	mov	r3, r0
 80177d8:	75fb      	strb	r3, [r7, #23]
 80177da:	e043      	b.n	8017864 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80177dc:	463b      	mov	r3, r7
 80177de:	4619      	mov	r1, r3
 80177e0:	6878      	ldr	r0, [r7, #4]
 80177e2:	f7ff ff3f 	bl	8017664 <create_name>
 80177e6:	4603      	mov	r3, r0
 80177e8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80177ea:	7dfb      	ldrb	r3, [r7, #23]
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	d134      	bne.n	801785a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80177f0:	6878      	ldr	r0, [r7, #4]
 80177f2:	f7ff feaf 	bl	8017554 <dir_find>
 80177f6:	4603      	mov	r3, r0
 80177f8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8017800:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8017802:	7dfb      	ldrb	r3, [r7, #23]
 8017804:	2b00      	cmp	r3, #0
 8017806:	d00a      	beq.n	801781e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8017808:	7dfb      	ldrb	r3, [r7, #23]
 801780a:	2b04      	cmp	r3, #4
 801780c:	d127      	bne.n	801785e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801780e:	7afb      	ldrb	r3, [r7, #11]
 8017810:	f003 0304 	and.w	r3, r3, #4
 8017814:	2b00      	cmp	r3, #0
 8017816:	d122      	bne.n	801785e <follow_path+0xd2>
 8017818:	2305      	movs	r3, #5
 801781a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801781c:	e01f      	b.n	801785e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801781e:	7afb      	ldrb	r3, [r7, #11]
 8017820:	f003 0304 	and.w	r3, r3, #4
 8017824:	2b00      	cmp	r3, #0
 8017826:	d11c      	bne.n	8017862 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8017828:	693b      	ldr	r3, [r7, #16]
 801782a:	799b      	ldrb	r3, [r3, #6]
 801782c:	f003 0310 	and.w	r3, r3, #16
 8017830:	2b00      	cmp	r3, #0
 8017832:	d102      	bne.n	801783a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8017834:	2305      	movs	r3, #5
 8017836:	75fb      	strb	r3, [r7, #23]
 8017838:	e014      	b.n	8017864 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801783a:	68fb      	ldr	r3, [r7, #12]
 801783c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	695b      	ldr	r3, [r3, #20]
 8017844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017848:	4413      	add	r3, r2
 801784a:	4619      	mov	r1, r3
 801784c:	68f8      	ldr	r0, [r7, #12]
 801784e:	f7ff fe42 	bl	80174d6 <ld_clust>
 8017852:	4602      	mov	r2, r0
 8017854:	693b      	ldr	r3, [r7, #16]
 8017856:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8017858:	e7c0      	b.n	80177dc <follow_path+0x50>
			if (res != FR_OK) break;
 801785a:	bf00      	nop
 801785c:	e002      	b.n	8017864 <follow_path+0xd8>
				break;
 801785e:	bf00      	nop
 8017860:	e000      	b.n	8017864 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8017862:	bf00      	nop
			}
		}
	}

	return res;
 8017864:	7dfb      	ldrb	r3, [r7, #23]
}
 8017866:	4618      	mov	r0, r3
 8017868:	3718      	adds	r7, #24
 801786a:	46bd      	mov	sp, r7
 801786c:	bd80      	pop	{r7, pc}

0801786e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801786e:	b480      	push	{r7}
 8017870:	b087      	sub	sp, #28
 8017872:	af00      	add	r7, sp, #0
 8017874:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8017876:	f04f 33ff 	mov.w	r3, #4294967295
 801787a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	681b      	ldr	r3, [r3, #0]
 8017880:	2b00      	cmp	r3, #0
 8017882:	d031      	beq.n	80178e8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	681b      	ldr	r3, [r3, #0]
 8017888:	617b      	str	r3, [r7, #20]
 801788a:	e002      	b.n	8017892 <get_ldnumber+0x24>
 801788c:	697b      	ldr	r3, [r7, #20]
 801788e:	3301      	adds	r3, #1
 8017890:	617b      	str	r3, [r7, #20]
 8017892:	697b      	ldr	r3, [r7, #20]
 8017894:	781b      	ldrb	r3, [r3, #0]
 8017896:	2b20      	cmp	r3, #32
 8017898:	d903      	bls.n	80178a2 <get_ldnumber+0x34>
 801789a:	697b      	ldr	r3, [r7, #20]
 801789c:	781b      	ldrb	r3, [r3, #0]
 801789e:	2b3a      	cmp	r3, #58	; 0x3a
 80178a0:	d1f4      	bne.n	801788c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80178a2:	697b      	ldr	r3, [r7, #20]
 80178a4:	781b      	ldrb	r3, [r3, #0]
 80178a6:	2b3a      	cmp	r3, #58	; 0x3a
 80178a8:	d11c      	bne.n	80178e4 <get_ldnumber+0x76>
			tp = *path;
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	681b      	ldr	r3, [r3, #0]
 80178ae:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80178b0:	68fb      	ldr	r3, [r7, #12]
 80178b2:	1c5a      	adds	r2, r3, #1
 80178b4:	60fa      	str	r2, [r7, #12]
 80178b6:	781b      	ldrb	r3, [r3, #0]
 80178b8:	3b30      	subs	r3, #48	; 0x30
 80178ba:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80178bc:	68bb      	ldr	r3, [r7, #8]
 80178be:	2b09      	cmp	r3, #9
 80178c0:	d80e      	bhi.n	80178e0 <get_ldnumber+0x72>
 80178c2:	68fa      	ldr	r2, [r7, #12]
 80178c4:	697b      	ldr	r3, [r7, #20]
 80178c6:	429a      	cmp	r2, r3
 80178c8:	d10a      	bne.n	80178e0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80178ca:	68bb      	ldr	r3, [r7, #8]
 80178cc:	2b00      	cmp	r3, #0
 80178ce:	d107      	bne.n	80178e0 <get_ldnumber+0x72>
					vol = (int)i;
 80178d0:	68bb      	ldr	r3, [r7, #8]
 80178d2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80178d4:	697b      	ldr	r3, [r7, #20]
 80178d6:	3301      	adds	r3, #1
 80178d8:	617b      	str	r3, [r7, #20]
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	697a      	ldr	r2, [r7, #20]
 80178de:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80178e0:	693b      	ldr	r3, [r7, #16]
 80178e2:	e002      	b.n	80178ea <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80178e4:	2300      	movs	r3, #0
 80178e6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80178e8:	693b      	ldr	r3, [r7, #16]
}
 80178ea:	4618      	mov	r0, r3
 80178ec:	371c      	adds	r7, #28
 80178ee:	46bd      	mov	sp, r7
 80178f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178f4:	4770      	bx	lr
	...

080178f8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80178f8:	b580      	push	{r7, lr}
 80178fa:	b082      	sub	sp, #8
 80178fc:	af00      	add	r7, sp, #0
 80178fe:	6078      	str	r0, [r7, #4]
 8017900:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	2200      	movs	r2, #0
 8017906:	70da      	strb	r2, [r3, #3]
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	f04f 32ff 	mov.w	r2, #4294967295
 801790e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8017910:	6839      	ldr	r1, [r7, #0]
 8017912:	6878      	ldr	r0, [r7, #4]
 8017914:	f7ff f8e0 	bl	8016ad8 <move_window>
 8017918:	4603      	mov	r3, r0
 801791a:	2b00      	cmp	r3, #0
 801791c:	d001      	beq.n	8017922 <check_fs+0x2a>
 801791e:	2304      	movs	r3, #4
 8017920:	e038      	b.n	8017994 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	3330      	adds	r3, #48	; 0x30
 8017926:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801792a:	4618      	mov	r0, r3
 801792c:	f7fe fe24 	bl	8016578 <ld_word>
 8017930:	4603      	mov	r3, r0
 8017932:	461a      	mov	r2, r3
 8017934:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8017938:	429a      	cmp	r2, r3
 801793a:	d001      	beq.n	8017940 <check_fs+0x48>
 801793c:	2303      	movs	r3, #3
 801793e:	e029      	b.n	8017994 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017946:	2be9      	cmp	r3, #233	; 0xe9
 8017948:	d009      	beq.n	801795e <check_fs+0x66>
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017950:	2beb      	cmp	r3, #235	; 0xeb
 8017952:	d11e      	bne.n	8017992 <check_fs+0x9a>
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801795a:	2b90      	cmp	r3, #144	; 0x90
 801795c:	d119      	bne.n	8017992 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	3330      	adds	r3, #48	; 0x30
 8017962:	3336      	adds	r3, #54	; 0x36
 8017964:	4618      	mov	r0, r3
 8017966:	f7fe fe1f 	bl	80165a8 <ld_dword>
 801796a:	4603      	mov	r3, r0
 801796c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8017970:	4a0a      	ldr	r2, [pc, #40]	; (801799c <check_fs+0xa4>)
 8017972:	4293      	cmp	r3, r2
 8017974:	d101      	bne.n	801797a <check_fs+0x82>
 8017976:	2300      	movs	r3, #0
 8017978:	e00c      	b.n	8017994 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	3330      	adds	r3, #48	; 0x30
 801797e:	3352      	adds	r3, #82	; 0x52
 8017980:	4618      	mov	r0, r3
 8017982:	f7fe fe11 	bl	80165a8 <ld_dword>
 8017986:	4602      	mov	r2, r0
 8017988:	4b05      	ldr	r3, [pc, #20]	; (80179a0 <check_fs+0xa8>)
 801798a:	429a      	cmp	r2, r3
 801798c:	d101      	bne.n	8017992 <check_fs+0x9a>
 801798e:	2300      	movs	r3, #0
 8017990:	e000      	b.n	8017994 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8017992:	2302      	movs	r3, #2
}
 8017994:	4618      	mov	r0, r3
 8017996:	3708      	adds	r7, #8
 8017998:	46bd      	mov	sp, r7
 801799a:	bd80      	pop	{r7, pc}
 801799c:	00544146 	.word	0x00544146
 80179a0:	33544146 	.word	0x33544146

080179a4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80179a4:	b580      	push	{r7, lr}
 80179a6:	b096      	sub	sp, #88	; 0x58
 80179a8:	af00      	add	r7, sp, #0
 80179aa:	60f8      	str	r0, [r7, #12]
 80179ac:	60b9      	str	r1, [r7, #8]
 80179ae:	4613      	mov	r3, r2
 80179b0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80179b2:	68bb      	ldr	r3, [r7, #8]
 80179b4:	2200      	movs	r2, #0
 80179b6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80179b8:	68f8      	ldr	r0, [r7, #12]
 80179ba:	f7ff ff58 	bl	801786e <get_ldnumber>
 80179be:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80179c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	da01      	bge.n	80179ca <find_volume+0x26>
 80179c6:	230b      	movs	r3, #11
 80179c8:	e22e      	b.n	8017e28 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80179ca:	4aa8      	ldr	r2, [pc, #672]	; (8017c6c <find_volume+0x2c8>)
 80179cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80179ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80179d2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80179d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d101      	bne.n	80179de <find_volume+0x3a>
 80179da:	230c      	movs	r3, #12
 80179dc:	e224      	b.n	8017e28 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80179de:	68bb      	ldr	r3, [r7, #8]
 80179e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80179e2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80179e4:	79fb      	ldrb	r3, [r7, #7]
 80179e6:	f023 0301 	bic.w	r3, r3, #1
 80179ea:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80179ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179ee:	781b      	ldrb	r3, [r3, #0]
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d01a      	beq.n	8017a2a <find_volume+0x86>
		stat = disk_status(fs->drv);
 80179f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179f6:	785b      	ldrb	r3, [r3, #1]
 80179f8:	4618      	mov	r0, r3
 80179fa:	f7fe fd1f 	bl	801643c <disk_status>
 80179fe:	4603      	mov	r3, r0
 8017a00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8017a04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017a08:	f003 0301 	and.w	r3, r3, #1
 8017a0c:	2b00      	cmp	r3, #0
 8017a0e:	d10c      	bne.n	8017a2a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8017a10:	79fb      	ldrb	r3, [r7, #7]
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d007      	beq.n	8017a26 <find_volume+0x82>
 8017a16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017a1a:	f003 0304 	and.w	r3, r3, #4
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	d001      	beq.n	8017a26 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8017a22:	230a      	movs	r3, #10
 8017a24:	e200      	b.n	8017e28 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8017a26:	2300      	movs	r3, #0
 8017a28:	e1fe      	b.n	8017e28 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8017a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a2c:	2200      	movs	r2, #0
 8017a2e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8017a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017a32:	b2da      	uxtb	r2, r3
 8017a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a36:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8017a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a3a:	785b      	ldrb	r3, [r3, #1]
 8017a3c:	4618      	mov	r0, r3
 8017a3e:	f7fe fd17 	bl	8016470 <disk_initialize>
 8017a42:	4603      	mov	r3, r0
 8017a44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8017a48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017a4c:	f003 0301 	and.w	r3, r3, #1
 8017a50:	2b00      	cmp	r3, #0
 8017a52:	d001      	beq.n	8017a58 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8017a54:	2303      	movs	r3, #3
 8017a56:	e1e7      	b.n	8017e28 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8017a58:	79fb      	ldrb	r3, [r7, #7]
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d007      	beq.n	8017a6e <find_volume+0xca>
 8017a5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017a62:	f003 0304 	and.w	r3, r3, #4
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	d001      	beq.n	8017a6e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8017a6a:	230a      	movs	r3, #10
 8017a6c:	e1dc      	b.n	8017e28 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8017a6e:	2300      	movs	r3, #0
 8017a70:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8017a72:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017a74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017a76:	f7ff ff3f 	bl	80178f8 <check_fs>
 8017a7a:	4603      	mov	r3, r0
 8017a7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8017a80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017a84:	2b02      	cmp	r3, #2
 8017a86:	d14b      	bne.n	8017b20 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8017a88:	2300      	movs	r3, #0
 8017a8a:	643b      	str	r3, [r7, #64]	; 0x40
 8017a8c:	e01f      	b.n	8017ace <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8017a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a90:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017a94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a96:	011b      	lsls	r3, r3, #4
 8017a98:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8017a9c:	4413      	add	r3, r2
 8017a9e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8017aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017aa2:	3304      	adds	r3, #4
 8017aa4:	781b      	ldrb	r3, [r3, #0]
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	d006      	beq.n	8017ab8 <find_volume+0x114>
 8017aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017aac:	3308      	adds	r3, #8
 8017aae:	4618      	mov	r0, r3
 8017ab0:	f7fe fd7a 	bl	80165a8 <ld_dword>
 8017ab4:	4602      	mov	r2, r0
 8017ab6:	e000      	b.n	8017aba <find_volume+0x116>
 8017ab8:	2200      	movs	r2, #0
 8017aba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017abc:	009b      	lsls	r3, r3, #2
 8017abe:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8017ac2:	440b      	add	r3, r1
 8017ac4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8017ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017aca:	3301      	adds	r3, #1
 8017acc:	643b      	str	r3, [r7, #64]	; 0x40
 8017ace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ad0:	2b03      	cmp	r3, #3
 8017ad2:	d9dc      	bls.n	8017a8e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8017ad4:	2300      	movs	r3, #0
 8017ad6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8017ad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	d002      	beq.n	8017ae4 <find_volume+0x140>
 8017ade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ae0:	3b01      	subs	r3, #1
 8017ae2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8017ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ae6:	009b      	lsls	r3, r3, #2
 8017ae8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8017aec:	4413      	add	r3, r2
 8017aee:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8017af2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8017af4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017af6:	2b00      	cmp	r3, #0
 8017af8:	d005      	beq.n	8017b06 <find_volume+0x162>
 8017afa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017afc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017afe:	f7ff fefb 	bl	80178f8 <check_fs>
 8017b02:	4603      	mov	r3, r0
 8017b04:	e000      	b.n	8017b08 <find_volume+0x164>
 8017b06:	2303      	movs	r3, #3
 8017b08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8017b0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017b10:	2b01      	cmp	r3, #1
 8017b12:	d905      	bls.n	8017b20 <find_volume+0x17c>
 8017b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017b16:	3301      	adds	r3, #1
 8017b18:	643b      	str	r3, [r7, #64]	; 0x40
 8017b1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017b1c:	2b03      	cmp	r3, #3
 8017b1e:	d9e1      	bls.n	8017ae4 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8017b20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017b24:	2b04      	cmp	r3, #4
 8017b26:	d101      	bne.n	8017b2c <find_volume+0x188>
 8017b28:	2301      	movs	r3, #1
 8017b2a:	e17d      	b.n	8017e28 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8017b2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017b30:	2b01      	cmp	r3, #1
 8017b32:	d901      	bls.n	8017b38 <find_volume+0x194>
 8017b34:	230d      	movs	r3, #13
 8017b36:	e177      	b.n	8017e28 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8017b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b3a:	3330      	adds	r3, #48	; 0x30
 8017b3c:	330b      	adds	r3, #11
 8017b3e:	4618      	mov	r0, r3
 8017b40:	f7fe fd1a 	bl	8016578 <ld_word>
 8017b44:	4603      	mov	r3, r0
 8017b46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017b4a:	d001      	beq.n	8017b50 <find_volume+0x1ac>
 8017b4c:	230d      	movs	r3, #13
 8017b4e:	e16b      	b.n	8017e28 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8017b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b52:	3330      	adds	r3, #48	; 0x30
 8017b54:	3316      	adds	r3, #22
 8017b56:	4618      	mov	r0, r3
 8017b58:	f7fe fd0e 	bl	8016578 <ld_word>
 8017b5c:	4603      	mov	r3, r0
 8017b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8017b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	d106      	bne.n	8017b74 <find_volume+0x1d0>
 8017b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b68:	3330      	adds	r3, #48	; 0x30
 8017b6a:	3324      	adds	r3, #36	; 0x24
 8017b6c:	4618      	mov	r0, r3
 8017b6e:	f7fe fd1b 	bl	80165a8 <ld_dword>
 8017b72:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8017b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017b78:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8017b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b7c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8017b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b82:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8017b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b86:	789b      	ldrb	r3, [r3, #2]
 8017b88:	2b01      	cmp	r3, #1
 8017b8a:	d005      	beq.n	8017b98 <find_volume+0x1f4>
 8017b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b8e:	789b      	ldrb	r3, [r3, #2]
 8017b90:	2b02      	cmp	r3, #2
 8017b92:	d001      	beq.n	8017b98 <find_volume+0x1f4>
 8017b94:	230d      	movs	r3, #13
 8017b96:	e147      	b.n	8017e28 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8017b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b9a:	789b      	ldrb	r3, [r3, #2]
 8017b9c:	461a      	mov	r2, r3
 8017b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017ba0:	fb02 f303 	mul.w	r3, r2, r3
 8017ba4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8017ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017bac:	b29a      	uxth	r2, r3
 8017bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bb0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8017bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bb4:	895b      	ldrh	r3, [r3, #10]
 8017bb6:	2b00      	cmp	r3, #0
 8017bb8:	d008      	beq.n	8017bcc <find_volume+0x228>
 8017bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bbc:	895b      	ldrh	r3, [r3, #10]
 8017bbe:	461a      	mov	r2, r3
 8017bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bc2:	895b      	ldrh	r3, [r3, #10]
 8017bc4:	3b01      	subs	r3, #1
 8017bc6:	4013      	ands	r3, r2
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	d001      	beq.n	8017bd0 <find_volume+0x22c>
 8017bcc:	230d      	movs	r3, #13
 8017bce:	e12b      	b.n	8017e28 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8017bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bd2:	3330      	adds	r3, #48	; 0x30
 8017bd4:	3311      	adds	r3, #17
 8017bd6:	4618      	mov	r0, r3
 8017bd8:	f7fe fcce 	bl	8016578 <ld_word>
 8017bdc:	4603      	mov	r3, r0
 8017bde:	461a      	mov	r2, r3
 8017be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017be2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8017be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017be6:	891b      	ldrh	r3, [r3, #8]
 8017be8:	f003 030f 	and.w	r3, r3, #15
 8017bec:	b29b      	uxth	r3, r3
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d001      	beq.n	8017bf6 <find_volume+0x252>
 8017bf2:	230d      	movs	r3, #13
 8017bf4:	e118      	b.n	8017e28 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8017bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bf8:	3330      	adds	r3, #48	; 0x30
 8017bfa:	3313      	adds	r3, #19
 8017bfc:	4618      	mov	r0, r3
 8017bfe:	f7fe fcbb 	bl	8016578 <ld_word>
 8017c02:	4603      	mov	r3, r0
 8017c04:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8017c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017c08:	2b00      	cmp	r3, #0
 8017c0a:	d106      	bne.n	8017c1a <find_volume+0x276>
 8017c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c0e:	3330      	adds	r3, #48	; 0x30
 8017c10:	3320      	adds	r3, #32
 8017c12:	4618      	mov	r0, r3
 8017c14:	f7fe fcc8 	bl	80165a8 <ld_dword>
 8017c18:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8017c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c1c:	3330      	adds	r3, #48	; 0x30
 8017c1e:	330e      	adds	r3, #14
 8017c20:	4618      	mov	r0, r3
 8017c22:	f7fe fca9 	bl	8016578 <ld_word>
 8017c26:	4603      	mov	r3, r0
 8017c28:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8017c2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d101      	bne.n	8017c34 <find_volume+0x290>
 8017c30:	230d      	movs	r3, #13
 8017c32:	e0f9      	b.n	8017e28 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8017c34:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017c38:	4413      	add	r3, r2
 8017c3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017c3c:	8912      	ldrh	r2, [r2, #8]
 8017c3e:	0912      	lsrs	r2, r2, #4
 8017c40:	b292      	uxth	r2, r2
 8017c42:	4413      	add	r3, r2
 8017c44:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8017c46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c4a:	429a      	cmp	r2, r3
 8017c4c:	d201      	bcs.n	8017c52 <find_volume+0x2ae>
 8017c4e:	230d      	movs	r3, #13
 8017c50:	e0ea      	b.n	8017e28 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8017c52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c56:	1ad3      	subs	r3, r2, r3
 8017c58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017c5a:	8952      	ldrh	r2, [r2, #10]
 8017c5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8017c60:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8017c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	d103      	bne.n	8017c70 <find_volume+0x2cc>
 8017c68:	230d      	movs	r3, #13
 8017c6a:	e0dd      	b.n	8017e28 <find_volume+0x484>
 8017c6c:	24000b5c 	.word	0x24000b5c
		fmt = FS_FAT32;
 8017c70:	2303      	movs	r3, #3
 8017c72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8017c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c78:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8017c7c:	4293      	cmp	r3, r2
 8017c7e:	d802      	bhi.n	8017c86 <find_volume+0x2e2>
 8017c80:	2302      	movs	r3, #2
 8017c82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8017c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c88:	f640 72f5 	movw	r2, #4085	; 0xff5
 8017c8c:	4293      	cmp	r3, r2
 8017c8e:	d802      	bhi.n	8017c96 <find_volume+0x2f2>
 8017c90:	2301      	movs	r3, #1
 8017c92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8017c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c98:	1c9a      	adds	r2, r3, #2
 8017c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c9c:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8017c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ca0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017ca2:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8017ca4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017ca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017ca8:	441a      	add	r2, r3
 8017caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cac:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8017cae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cb2:	441a      	add	r2, r3
 8017cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cb6:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8017cb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017cbc:	2b03      	cmp	r3, #3
 8017cbe:	d11e      	bne.n	8017cfe <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8017cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cc2:	3330      	adds	r3, #48	; 0x30
 8017cc4:	332a      	adds	r3, #42	; 0x2a
 8017cc6:	4618      	mov	r0, r3
 8017cc8:	f7fe fc56 	bl	8016578 <ld_word>
 8017ccc:	4603      	mov	r3, r0
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	d001      	beq.n	8017cd6 <find_volume+0x332>
 8017cd2:	230d      	movs	r3, #13
 8017cd4:	e0a8      	b.n	8017e28 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8017cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cd8:	891b      	ldrh	r3, [r3, #8]
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	d001      	beq.n	8017ce2 <find_volume+0x33e>
 8017cde:	230d      	movs	r3, #13
 8017ce0:	e0a2      	b.n	8017e28 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8017ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ce4:	3330      	adds	r3, #48	; 0x30
 8017ce6:	332c      	adds	r3, #44	; 0x2c
 8017ce8:	4618      	mov	r0, r3
 8017cea:	f7fe fc5d 	bl	80165a8 <ld_dword>
 8017cee:	4602      	mov	r2, r0
 8017cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cf2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8017cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cf6:	695b      	ldr	r3, [r3, #20]
 8017cf8:	009b      	lsls	r3, r3, #2
 8017cfa:	647b      	str	r3, [r7, #68]	; 0x44
 8017cfc:	e01f      	b.n	8017d3e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8017cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d00:	891b      	ldrh	r3, [r3, #8]
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d101      	bne.n	8017d0a <find_volume+0x366>
 8017d06:	230d      	movs	r3, #13
 8017d08:	e08e      	b.n	8017e28 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8017d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d0c:	6a1a      	ldr	r2, [r3, #32]
 8017d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017d10:	441a      	add	r2, r3
 8017d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d14:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8017d16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017d1a:	2b02      	cmp	r3, #2
 8017d1c:	d103      	bne.n	8017d26 <find_volume+0x382>
 8017d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d20:	695b      	ldr	r3, [r3, #20]
 8017d22:	005b      	lsls	r3, r3, #1
 8017d24:	e00a      	b.n	8017d3c <find_volume+0x398>
 8017d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d28:	695a      	ldr	r2, [r3, #20]
 8017d2a:	4613      	mov	r3, r2
 8017d2c:	005b      	lsls	r3, r3, #1
 8017d2e:	4413      	add	r3, r2
 8017d30:	085a      	lsrs	r2, r3, #1
 8017d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d34:	695b      	ldr	r3, [r3, #20]
 8017d36:	f003 0301 	and.w	r3, r3, #1
 8017d3a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8017d3c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8017d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d40:	699a      	ldr	r2, [r3, #24]
 8017d42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017d44:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8017d48:	0a5b      	lsrs	r3, r3, #9
 8017d4a:	429a      	cmp	r2, r3
 8017d4c:	d201      	bcs.n	8017d52 <find_volume+0x3ae>
 8017d4e:	230d      	movs	r3, #13
 8017d50:	e06a      	b.n	8017e28 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8017d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d54:	f04f 32ff 	mov.w	r2, #4294967295
 8017d58:	611a      	str	r2, [r3, #16]
 8017d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d5c:	691a      	ldr	r2, [r3, #16]
 8017d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d60:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8017d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d64:	2280      	movs	r2, #128	; 0x80
 8017d66:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8017d68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017d6c:	2b03      	cmp	r3, #3
 8017d6e:	d149      	bne.n	8017e04 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8017d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d72:	3330      	adds	r3, #48	; 0x30
 8017d74:	3330      	adds	r3, #48	; 0x30
 8017d76:	4618      	mov	r0, r3
 8017d78:	f7fe fbfe 	bl	8016578 <ld_word>
 8017d7c:	4603      	mov	r3, r0
 8017d7e:	2b01      	cmp	r3, #1
 8017d80:	d140      	bne.n	8017e04 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8017d82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d84:	3301      	adds	r3, #1
 8017d86:	4619      	mov	r1, r3
 8017d88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017d8a:	f7fe fea5 	bl	8016ad8 <move_window>
 8017d8e:	4603      	mov	r3, r0
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d137      	bne.n	8017e04 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8017d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d96:	2200      	movs	r2, #0
 8017d98:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8017d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d9c:	3330      	adds	r3, #48	; 0x30
 8017d9e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017da2:	4618      	mov	r0, r3
 8017da4:	f7fe fbe8 	bl	8016578 <ld_word>
 8017da8:	4603      	mov	r3, r0
 8017daa:	461a      	mov	r2, r3
 8017dac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8017db0:	429a      	cmp	r2, r3
 8017db2:	d127      	bne.n	8017e04 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8017db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017db6:	3330      	adds	r3, #48	; 0x30
 8017db8:	4618      	mov	r0, r3
 8017dba:	f7fe fbf5 	bl	80165a8 <ld_dword>
 8017dbe:	4602      	mov	r2, r0
 8017dc0:	4b1b      	ldr	r3, [pc, #108]	; (8017e30 <find_volume+0x48c>)
 8017dc2:	429a      	cmp	r2, r3
 8017dc4:	d11e      	bne.n	8017e04 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8017dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017dc8:	3330      	adds	r3, #48	; 0x30
 8017dca:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8017dce:	4618      	mov	r0, r3
 8017dd0:	f7fe fbea 	bl	80165a8 <ld_dword>
 8017dd4:	4602      	mov	r2, r0
 8017dd6:	4b17      	ldr	r3, [pc, #92]	; (8017e34 <find_volume+0x490>)
 8017dd8:	429a      	cmp	r2, r3
 8017dda:	d113      	bne.n	8017e04 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8017ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017dde:	3330      	adds	r3, #48	; 0x30
 8017de0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8017de4:	4618      	mov	r0, r3
 8017de6:	f7fe fbdf 	bl	80165a8 <ld_dword>
 8017dea:	4602      	mov	r2, r0
 8017dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017dee:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8017df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017df2:	3330      	adds	r3, #48	; 0x30
 8017df4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8017df8:	4618      	mov	r0, r3
 8017dfa:	f7fe fbd5 	bl	80165a8 <ld_dword>
 8017dfe:	4602      	mov	r2, r0
 8017e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e02:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8017e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e06:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8017e0a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8017e0c:	4b0a      	ldr	r3, [pc, #40]	; (8017e38 <find_volume+0x494>)
 8017e0e:	881b      	ldrh	r3, [r3, #0]
 8017e10:	3301      	adds	r3, #1
 8017e12:	b29a      	uxth	r2, r3
 8017e14:	4b08      	ldr	r3, [pc, #32]	; (8017e38 <find_volume+0x494>)
 8017e16:	801a      	strh	r2, [r3, #0]
 8017e18:	4b07      	ldr	r3, [pc, #28]	; (8017e38 <find_volume+0x494>)
 8017e1a:	881a      	ldrh	r2, [r3, #0]
 8017e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e1e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8017e20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017e22:	f7fe fdf1 	bl	8016a08 <clear_lock>
#endif
	return FR_OK;
 8017e26:	2300      	movs	r3, #0
}
 8017e28:	4618      	mov	r0, r3
 8017e2a:	3758      	adds	r7, #88	; 0x58
 8017e2c:	46bd      	mov	sp, r7
 8017e2e:	bd80      	pop	{r7, pc}
 8017e30:	41615252 	.word	0x41615252
 8017e34:	61417272 	.word	0x61417272
 8017e38:	24000b60 	.word	0x24000b60

08017e3c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8017e3c:	b580      	push	{r7, lr}
 8017e3e:	b084      	sub	sp, #16
 8017e40:	af00      	add	r7, sp, #0
 8017e42:	6078      	str	r0, [r7, #4]
 8017e44:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8017e46:	2309      	movs	r3, #9
 8017e48:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	d01c      	beq.n	8017e8a <validate+0x4e>
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	681b      	ldr	r3, [r3, #0]
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d018      	beq.n	8017e8a <validate+0x4e>
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	681b      	ldr	r3, [r3, #0]
 8017e5c:	781b      	ldrb	r3, [r3, #0]
 8017e5e:	2b00      	cmp	r3, #0
 8017e60:	d013      	beq.n	8017e8a <validate+0x4e>
 8017e62:	687b      	ldr	r3, [r7, #4]
 8017e64:	889a      	ldrh	r2, [r3, #4]
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	681b      	ldr	r3, [r3, #0]
 8017e6a:	88db      	ldrh	r3, [r3, #6]
 8017e6c:	429a      	cmp	r2, r3
 8017e6e:	d10c      	bne.n	8017e8a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	681b      	ldr	r3, [r3, #0]
 8017e74:	785b      	ldrb	r3, [r3, #1]
 8017e76:	4618      	mov	r0, r3
 8017e78:	f7fe fae0 	bl	801643c <disk_status>
 8017e7c:	4603      	mov	r3, r0
 8017e7e:	f003 0301 	and.w	r3, r3, #1
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	d101      	bne.n	8017e8a <validate+0x4e>
			res = FR_OK;
 8017e86:	2300      	movs	r3, #0
 8017e88:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8017e8a:	7bfb      	ldrb	r3, [r7, #15]
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	d102      	bne.n	8017e96 <validate+0x5a>
 8017e90:	687b      	ldr	r3, [r7, #4]
 8017e92:	681b      	ldr	r3, [r3, #0]
 8017e94:	e000      	b.n	8017e98 <validate+0x5c>
 8017e96:	2300      	movs	r3, #0
 8017e98:	683a      	ldr	r2, [r7, #0]
 8017e9a:	6013      	str	r3, [r2, #0]
	return res;
 8017e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8017e9e:	4618      	mov	r0, r3
 8017ea0:	3710      	adds	r7, #16
 8017ea2:	46bd      	mov	sp, r7
 8017ea4:	bd80      	pop	{r7, pc}
	...

08017ea8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8017ea8:	b580      	push	{r7, lr}
 8017eaa:	b088      	sub	sp, #32
 8017eac:	af00      	add	r7, sp, #0
 8017eae:	60f8      	str	r0, [r7, #12]
 8017eb0:	60b9      	str	r1, [r7, #8]
 8017eb2:	4613      	mov	r3, r2
 8017eb4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8017eb6:	68bb      	ldr	r3, [r7, #8]
 8017eb8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8017eba:	f107 0310 	add.w	r3, r7, #16
 8017ebe:	4618      	mov	r0, r3
 8017ec0:	f7ff fcd5 	bl	801786e <get_ldnumber>
 8017ec4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8017ec6:	69fb      	ldr	r3, [r7, #28]
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	da01      	bge.n	8017ed0 <f_mount+0x28>
 8017ecc:	230b      	movs	r3, #11
 8017ece:	e02b      	b.n	8017f28 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8017ed0:	4a17      	ldr	r2, [pc, #92]	; (8017f30 <f_mount+0x88>)
 8017ed2:	69fb      	ldr	r3, [r7, #28]
 8017ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017ed8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8017eda:	69bb      	ldr	r3, [r7, #24]
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d005      	beq.n	8017eec <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8017ee0:	69b8      	ldr	r0, [r7, #24]
 8017ee2:	f7fe fd91 	bl	8016a08 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8017ee6:	69bb      	ldr	r3, [r7, #24]
 8017ee8:	2200      	movs	r2, #0
 8017eea:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8017eec:	68fb      	ldr	r3, [r7, #12]
 8017eee:	2b00      	cmp	r3, #0
 8017ef0:	d002      	beq.n	8017ef8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8017ef2:	68fb      	ldr	r3, [r7, #12]
 8017ef4:	2200      	movs	r2, #0
 8017ef6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8017ef8:	68fa      	ldr	r2, [r7, #12]
 8017efa:	490d      	ldr	r1, [pc, #52]	; (8017f30 <f_mount+0x88>)
 8017efc:	69fb      	ldr	r3, [r7, #28]
 8017efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8017f02:	68fb      	ldr	r3, [r7, #12]
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	d002      	beq.n	8017f0e <f_mount+0x66>
 8017f08:	79fb      	ldrb	r3, [r7, #7]
 8017f0a:	2b01      	cmp	r3, #1
 8017f0c:	d001      	beq.n	8017f12 <f_mount+0x6a>
 8017f0e:	2300      	movs	r3, #0
 8017f10:	e00a      	b.n	8017f28 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8017f12:	f107 010c 	add.w	r1, r7, #12
 8017f16:	f107 0308 	add.w	r3, r7, #8
 8017f1a:	2200      	movs	r2, #0
 8017f1c:	4618      	mov	r0, r3
 8017f1e:	f7ff fd41 	bl	80179a4 <find_volume>
 8017f22:	4603      	mov	r3, r0
 8017f24:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8017f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8017f28:	4618      	mov	r0, r3
 8017f2a:	3720      	adds	r7, #32
 8017f2c:	46bd      	mov	sp, r7
 8017f2e:	bd80      	pop	{r7, pc}
 8017f30:	24000b5c 	.word	0x24000b5c

08017f34 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8017f34:	b580      	push	{r7, lr}
 8017f36:	b098      	sub	sp, #96	; 0x60
 8017f38:	af00      	add	r7, sp, #0
 8017f3a:	60f8      	str	r0, [r7, #12]
 8017f3c:	60b9      	str	r1, [r7, #8]
 8017f3e:	4613      	mov	r3, r2
 8017f40:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8017f42:	68fb      	ldr	r3, [r7, #12]
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	d101      	bne.n	8017f4c <f_open+0x18>
 8017f48:	2309      	movs	r3, #9
 8017f4a:	e1ad      	b.n	80182a8 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8017f4c:	79fb      	ldrb	r3, [r7, #7]
 8017f4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017f52:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8017f54:	79fa      	ldrb	r2, [r7, #7]
 8017f56:	f107 0110 	add.w	r1, r7, #16
 8017f5a:	f107 0308 	add.w	r3, r7, #8
 8017f5e:	4618      	mov	r0, r3
 8017f60:	f7ff fd20 	bl	80179a4 <find_volume>
 8017f64:	4603      	mov	r3, r0
 8017f66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8017f6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	f040 8191 	bne.w	8018296 <f_open+0x362>
		dj.obj.fs = fs;
 8017f74:	693b      	ldr	r3, [r7, #16]
 8017f76:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8017f78:	68ba      	ldr	r2, [r7, #8]
 8017f7a:	f107 0314 	add.w	r3, r7, #20
 8017f7e:	4611      	mov	r1, r2
 8017f80:	4618      	mov	r0, r3
 8017f82:	f7ff fc03 	bl	801778c <follow_path>
 8017f86:	4603      	mov	r3, r0
 8017f88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8017f8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d11a      	bne.n	8017fca <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8017f94:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017f98:	b25b      	sxtb	r3, r3
 8017f9a:	2b00      	cmp	r3, #0
 8017f9c:	da03      	bge.n	8017fa6 <f_open+0x72>
				res = FR_INVALID_NAME;
 8017f9e:	2306      	movs	r3, #6
 8017fa0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8017fa4:	e011      	b.n	8017fca <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8017fa6:	79fb      	ldrb	r3, [r7, #7]
 8017fa8:	f023 0301 	bic.w	r3, r3, #1
 8017fac:	2b00      	cmp	r3, #0
 8017fae:	bf14      	ite	ne
 8017fb0:	2301      	movne	r3, #1
 8017fb2:	2300      	moveq	r3, #0
 8017fb4:	b2db      	uxtb	r3, r3
 8017fb6:	461a      	mov	r2, r3
 8017fb8:	f107 0314 	add.w	r3, r7, #20
 8017fbc:	4611      	mov	r1, r2
 8017fbe:	4618      	mov	r0, r3
 8017fc0:	f7fe fbda 	bl	8016778 <chk_lock>
 8017fc4:	4603      	mov	r3, r0
 8017fc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8017fca:	79fb      	ldrb	r3, [r7, #7]
 8017fcc:	f003 031c 	and.w	r3, r3, #28
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	d07f      	beq.n	80180d4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8017fd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	d017      	beq.n	801800c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8017fdc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017fe0:	2b04      	cmp	r3, #4
 8017fe2:	d10e      	bne.n	8018002 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8017fe4:	f7fe fc24 	bl	8016830 <enq_lock>
 8017fe8:	4603      	mov	r3, r0
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d006      	beq.n	8017ffc <f_open+0xc8>
 8017fee:	f107 0314 	add.w	r3, r7, #20
 8017ff2:	4618      	mov	r0, r3
 8017ff4:	f7ff fb03 	bl	80175fe <dir_register>
 8017ff8:	4603      	mov	r3, r0
 8017ffa:	e000      	b.n	8017ffe <f_open+0xca>
 8017ffc:	2312      	movs	r3, #18
 8017ffe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8018002:	79fb      	ldrb	r3, [r7, #7]
 8018004:	f043 0308 	orr.w	r3, r3, #8
 8018008:	71fb      	strb	r3, [r7, #7]
 801800a:	e010      	b.n	801802e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801800c:	7ebb      	ldrb	r3, [r7, #26]
 801800e:	f003 0311 	and.w	r3, r3, #17
 8018012:	2b00      	cmp	r3, #0
 8018014:	d003      	beq.n	801801e <f_open+0xea>
					res = FR_DENIED;
 8018016:	2307      	movs	r3, #7
 8018018:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801801c:	e007      	b.n	801802e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801801e:	79fb      	ldrb	r3, [r7, #7]
 8018020:	f003 0304 	and.w	r3, r3, #4
 8018024:	2b00      	cmp	r3, #0
 8018026:	d002      	beq.n	801802e <f_open+0xfa>
 8018028:	2308      	movs	r3, #8
 801802a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801802e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018032:	2b00      	cmp	r3, #0
 8018034:	d168      	bne.n	8018108 <f_open+0x1d4>
 8018036:	79fb      	ldrb	r3, [r7, #7]
 8018038:	f003 0308 	and.w	r3, r3, #8
 801803c:	2b00      	cmp	r3, #0
 801803e:	d063      	beq.n	8018108 <f_open+0x1d4>
				dw = GET_FATTIME();
 8018040:	f7fb f8fe 	bl	8013240 <get_fattime>
 8018044:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8018046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018048:	330e      	adds	r3, #14
 801804a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801804c:	4618      	mov	r0, r3
 801804e:	f7fe fae9 	bl	8016624 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8018052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018054:	3316      	adds	r3, #22
 8018056:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018058:	4618      	mov	r0, r3
 801805a:	f7fe fae3 	bl	8016624 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801805e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018060:	330b      	adds	r3, #11
 8018062:	2220      	movs	r2, #32
 8018064:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8018066:	693b      	ldr	r3, [r7, #16]
 8018068:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801806a:	4611      	mov	r1, r2
 801806c:	4618      	mov	r0, r3
 801806e:	f7ff fa32 	bl	80174d6 <ld_clust>
 8018072:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8018074:	693b      	ldr	r3, [r7, #16]
 8018076:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018078:	2200      	movs	r2, #0
 801807a:	4618      	mov	r0, r3
 801807c:	f7ff fa4a 	bl	8017514 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8018080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018082:	331c      	adds	r3, #28
 8018084:	2100      	movs	r1, #0
 8018086:	4618      	mov	r0, r3
 8018088:	f7fe facc 	bl	8016624 <st_dword>
					fs->wflag = 1;
 801808c:	693b      	ldr	r3, [r7, #16]
 801808e:	2201      	movs	r2, #1
 8018090:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8018092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018094:	2b00      	cmp	r3, #0
 8018096:	d037      	beq.n	8018108 <f_open+0x1d4>
						dw = fs->winsect;
 8018098:	693b      	ldr	r3, [r7, #16]
 801809a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801809c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801809e:	f107 0314 	add.w	r3, r7, #20
 80180a2:	2200      	movs	r2, #0
 80180a4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80180a6:	4618      	mov	r0, r3
 80180a8:	f7fe ff5d 	bl	8016f66 <remove_chain>
 80180ac:	4603      	mov	r3, r0
 80180ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80180b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	d126      	bne.n	8018108 <f_open+0x1d4>
							res = move_window(fs, dw);
 80180ba:	693b      	ldr	r3, [r7, #16]
 80180bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80180be:	4618      	mov	r0, r3
 80180c0:	f7fe fd0a 	bl	8016ad8 <move_window>
 80180c4:	4603      	mov	r3, r0
 80180c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80180ca:	693b      	ldr	r3, [r7, #16]
 80180cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80180ce:	3a01      	subs	r2, #1
 80180d0:	60da      	str	r2, [r3, #12]
 80180d2:	e019      	b.n	8018108 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80180d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80180d8:	2b00      	cmp	r3, #0
 80180da:	d115      	bne.n	8018108 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80180dc:	7ebb      	ldrb	r3, [r7, #26]
 80180de:	f003 0310 	and.w	r3, r3, #16
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	d003      	beq.n	80180ee <f_open+0x1ba>
					res = FR_NO_FILE;
 80180e6:	2304      	movs	r3, #4
 80180e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80180ec:	e00c      	b.n	8018108 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80180ee:	79fb      	ldrb	r3, [r7, #7]
 80180f0:	f003 0302 	and.w	r3, r3, #2
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	d007      	beq.n	8018108 <f_open+0x1d4>
 80180f8:	7ebb      	ldrb	r3, [r7, #26]
 80180fa:	f003 0301 	and.w	r3, r3, #1
 80180fe:	2b00      	cmp	r3, #0
 8018100:	d002      	beq.n	8018108 <f_open+0x1d4>
						res = FR_DENIED;
 8018102:	2307      	movs	r3, #7
 8018104:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8018108:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801810c:	2b00      	cmp	r3, #0
 801810e:	d128      	bne.n	8018162 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8018110:	79fb      	ldrb	r3, [r7, #7]
 8018112:	f003 0308 	and.w	r3, r3, #8
 8018116:	2b00      	cmp	r3, #0
 8018118:	d003      	beq.n	8018122 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801811a:	79fb      	ldrb	r3, [r7, #7]
 801811c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018120:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8018122:	693b      	ldr	r3, [r7, #16]
 8018124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018126:	68fb      	ldr	r3, [r7, #12]
 8018128:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801812a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801812c:	68fb      	ldr	r3, [r7, #12]
 801812e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8018130:	79fb      	ldrb	r3, [r7, #7]
 8018132:	f023 0301 	bic.w	r3, r3, #1
 8018136:	2b00      	cmp	r3, #0
 8018138:	bf14      	ite	ne
 801813a:	2301      	movne	r3, #1
 801813c:	2300      	moveq	r3, #0
 801813e:	b2db      	uxtb	r3, r3
 8018140:	461a      	mov	r2, r3
 8018142:	f107 0314 	add.w	r3, r7, #20
 8018146:	4611      	mov	r1, r2
 8018148:	4618      	mov	r0, r3
 801814a:	f7fe fb93 	bl	8016874 <inc_lock>
 801814e:	4602      	mov	r2, r0
 8018150:	68fb      	ldr	r3, [r7, #12]
 8018152:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8018154:	68fb      	ldr	r3, [r7, #12]
 8018156:	691b      	ldr	r3, [r3, #16]
 8018158:	2b00      	cmp	r3, #0
 801815a:	d102      	bne.n	8018162 <f_open+0x22e>
 801815c:	2302      	movs	r3, #2
 801815e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8018162:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018166:	2b00      	cmp	r3, #0
 8018168:	f040 8095 	bne.w	8018296 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801816c:	693b      	ldr	r3, [r7, #16]
 801816e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018170:	4611      	mov	r1, r2
 8018172:	4618      	mov	r0, r3
 8018174:	f7ff f9af 	bl	80174d6 <ld_clust>
 8018178:	4602      	mov	r2, r0
 801817a:	68fb      	ldr	r3, [r7, #12]
 801817c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801817e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018180:	331c      	adds	r3, #28
 8018182:	4618      	mov	r0, r3
 8018184:	f7fe fa10 	bl	80165a8 <ld_dword>
 8018188:	4602      	mov	r2, r0
 801818a:	68fb      	ldr	r3, [r7, #12]
 801818c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801818e:	68fb      	ldr	r3, [r7, #12]
 8018190:	2200      	movs	r2, #0
 8018192:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8018194:	693a      	ldr	r2, [r7, #16]
 8018196:	68fb      	ldr	r3, [r7, #12]
 8018198:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801819a:	693b      	ldr	r3, [r7, #16]
 801819c:	88da      	ldrh	r2, [r3, #6]
 801819e:	68fb      	ldr	r3, [r7, #12]
 80181a0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80181a2:	68fb      	ldr	r3, [r7, #12]
 80181a4:	79fa      	ldrb	r2, [r7, #7]
 80181a6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80181a8:	68fb      	ldr	r3, [r7, #12]
 80181aa:	2200      	movs	r2, #0
 80181ac:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80181ae:	68fb      	ldr	r3, [r7, #12]
 80181b0:	2200      	movs	r2, #0
 80181b2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80181b4:	68fb      	ldr	r3, [r7, #12]
 80181b6:	2200      	movs	r2, #0
 80181b8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80181ba:	68fb      	ldr	r3, [r7, #12]
 80181bc:	3330      	adds	r3, #48	; 0x30
 80181be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80181c2:	2100      	movs	r1, #0
 80181c4:	4618      	mov	r0, r3
 80181c6:	f7fe fa7a 	bl	80166be <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80181ca:	79fb      	ldrb	r3, [r7, #7]
 80181cc:	f003 0320 	and.w	r3, r3, #32
 80181d0:	2b00      	cmp	r3, #0
 80181d2:	d060      	beq.n	8018296 <f_open+0x362>
 80181d4:	68fb      	ldr	r3, [r7, #12]
 80181d6:	68db      	ldr	r3, [r3, #12]
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d05c      	beq.n	8018296 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80181dc:	68fb      	ldr	r3, [r7, #12]
 80181de:	68da      	ldr	r2, [r3, #12]
 80181e0:	68fb      	ldr	r3, [r7, #12]
 80181e2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80181e4:	693b      	ldr	r3, [r7, #16]
 80181e6:	895b      	ldrh	r3, [r3, #10]
 80181e8:	025b      	lsls	r3, r3, #9
 80181ea:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80181ec:	68fb      	ldr	r3, [r7, #12]
 80181ee:	689b      	ldr	r3, [r3, #8]
 80181f0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80181f2:	68fb      	ldr	r3, [r7, #12]
 80181f4:	68db      	ldr	r3, [r3, #12]
 80181f6:	657b      	str	r3, [r7, #84]	; 0x54
 80181f8:	e016      	b.n	8018228 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80181fa:	68fb      	ldr	r3, [r7, #12]
 80181fc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80181fe:	4618      	mov	r0, r3
 8018200:	f7fe fd25 	bl	8016c4e <get_fat>
 8018204:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8018206:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018208:	2b01      	cmp	r3, #1
 801820a:	d802      	bhi.n	8018212 <f_open+0x2de>
 801820c:	2302      	movs	r3, #2
 801820e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8018212:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018218:	d102      	bne.n	8018220 <f_open+0x2ec>
 801821a:	2301      	movs	r3, #1
 801821c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8018220:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018224:	1ad3      	subs	r3, r2, r3
 8018226:	657b      	str	r3, [r7, #84]	; 0x54
 8018228:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801822c:	2b00      	cmp	r3, #0
 801822e:	d103      	bne.n	8018238 <f_open+0x304>
 8018230:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018232:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018234:	429a      	cmp	r2, r3
 8018236:	d8e0      	bhi.n	80181fa <f_open+0x2c6>
				}
				fp->clust = clst;
 8018238:	68fb      	ldr	r3, [r7, #12]
 801823a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801823c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801823e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018242:	2b00      	cmp	r3, #0
 8018244:	d127      	bne.n	8018296 <f_open+0x362>
 8018246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801824c:	2b00      	cmp	r3, #0
 801824e:	d022      	beq.n	8018296 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8018250:	693b      	ldr	r3, [r7, #16]
 8018252:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8018254:	4618      	mov	r0, r3
 8018256:	f7fe fcdb 	bl	8016c10 <clust2sect>
 801825a:	6478      	str	r0, [r7, #68]	; 0x44
 801825c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801825e:	2b00      	cmp	r3, #0
 8018260:	d103      	bne.n	801826a <f_open+0x336>
						res = FR_INT_ERR;
 8018262:	2302      	movs	r3, #2
 8018264:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8018268:	e015      	b.n	8018296 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801826a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801826c:	0a5a      	lsrs	r2, r3, #9
 801826e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018270:	441a      	add	r2, r3
 8018272:	68fb      	ldr	r3, [r7, #12]
 8018274:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8018276:	693b      	ldr	r3, [r7, #16]
 8018278:	7858      	ldrb	r0, [r3, #1]
 801827a:	68fb      	ldr	r3, [r7, #12]
 801827c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018280:	68fb      	ldr	r3, [r7, #12]
 8018282:	6a1a      	ldr	r2, [r3, #32]
 8018284:	2301      	movs	r3, #1
 8018286:	f7fe f919 	bl	80164bc <disk_read>
 801828a:	4603      	mov	r3, r0
 801828c:	2b00      	cmp	r3, #0
 801828e:	d002      	beq.n	8018296 <f_open+0x362>
 8018290:	2301      	movs	r3, #1
 8018292:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8018296:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801829a:	2b00      	cmp	r3, #0
 801829c:	d002      	beq.n	80182a4 <f_open+0x370>
 801829e:	68fb      	ldr	r3, [r7, #12]
 80182a0:	2200      	movs	r2, #0
 80182a2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80182a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80182a8:	4618      	mov	r0, r3
 80182aa:	3760      	adds	r7, #96	; 0x60
 80182ac:	46bd      	mov	sp, r7
 80182ae:	bd80      	pop	{r7, pc}

080182b0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80182b0:	b580      	push	{r7, lr}
 80182b2:	b08e      	sub	sp, #56	; 0x38
 80182b4:	af00      	add	r7, sp, #0
 80182b6:	60f8      	str	r0, [r7, #12]
 80182b8:	60b9      	str	r1, [r7, #8]
 80182ba:	607a      	str	r2, [r7, #4]
 80182bc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80182be:	68bb      	ldr	r3, [r7, #8]
 80182c0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80182c2:	683b      	ldr	r3, [r7, #0]
 80182c4:	2200      	movs	r2, #0
 80182c6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80182c8:	68fb      	ldr	r3, [r7, #12]
 80182ca:	f107 0214 	add.w	r2, r7, #20
 80182ce:	4611      	mov	r1, r2
 80182d0:	4618      	mov	r0, r3
 80182d2:	f7ff fdb3 	bl	8017e3c <validate>
 80182d6:	4603      	mov	r3, r0
 80182d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80182dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	d107      	bne.n	80182f4 <f_read+0x44>
 80182e4:	68fb      	ldr	r3, [r7, #12]
 80182e6:	7d5b      	ldrb	r3, [r3, #21]
 80182e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80182ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d002      	beq.n	80182fa <f_read+0x4a>
 80182f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80182f8:	e115      	b.n	8018526 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80182fa:	68fb      	ldr	r3, [r7, #12]
 80182fc:	7d1b      	ldrb	r3, [r3, #20]
 80182fe:	f003 0301 	and.w	r3, r3, #1
 8018302:	2b00      	cmp	r3, #0
 8018304:	d101      	bne.n	801830a <f_read+0x5a>
 8018306:	2307      	movs	r3, #7
 8018308:	e10d      	b.n	8018526 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 801830a:	68fb      	ldr	r3, [r7, #12]
 801830c:	68da      	ldr	r2, [r3, #12]
 801830e:	68fb      	ldr	r3, [r7, #12]
 8018310:	699b      	ldr	r3, [r3, #24]
 8018312:	1ad3      	subs	r3, r2, r3
 8018314:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8018316:	687a      	ldr	r2, [r7, #4]
 8018318:	6a3b      	ldr	r3, [r7, #32]
 801831a:	429a      	cmp	r2, r3
 801831c:	f240 80fe 	bls.w	801851c <f_read+0x26c>
 8018320:	6a3b      	ldr	r3, [r7, #32]
 8018322:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8018324:	e0fa      	b.n	801851c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8018326:	68fb      	ldr	r3, [r7, #12]
 8018328:	699b      	ldr	r3, [r3, #24]
 801832a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801832e:	2b00      	cmp	r3, #0
 8018330:	f040 80c6 	bne.w	80184c0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8018334:	68fb      	ldr	r3, [r7, #12]
 8018336:	699b      	ldr	r3, [r3, #24]
 8018338:	0a5b      	lsrs	r3, r3, #9
 801833a:	697a      	ldr	r2, [r7, #20]
 801833c:	8952      	ldrh	r2, [r2, #10]
 801833e:	3a01      	subs	r2, #1
 8018340:	4013      	ands	r3, r2
 8018342:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8018344:	69fb      	ldr	r3, [r7, #28]
 8018346:	2b00      	cmp	r3, #0
 8018348:	d12f      	bne.n	80183aa <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801834a:	68fb      	ldr	r3, [r7, #12]
 801834c:	699b      	ldr	r3, [r3, #24]
 801834e:	2b00      	cmp	r3, #0
 8018350:	d103      	bne.n	801835a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8018352:	68fb      	ldr	r3, [r7, #12]
 8018354:	689b      	ldr	r3, [r3, #8]
 8018356:	633b      	str	r3, [r7, #48]	; 0x30
 8018358:	e013      	b.n	8018382 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801835a:	68fb      	ldr	r3, [r7, #12]
 801835c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801835e:	2b00      	cmp	r3, #0
 8018360:	d007      	beq.n	8018372 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8018362:	68fb      	ldr	r3, [r7, #12]
 8018364:	699b      	ldr	r3, [r3, #24]
 8018366:	4619      	mov	r1, r3
 8018368:	68f8      	ldr	r0, [r7, #12]
 801836a:	f7fe fef9 	bl	8017160 <clmt_clust>
 801836e:	6338      	str	r0, [r7, #48]	; 0x30
 8018370:	e007      	b.n	8018382 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8018372:	68fa      	ldr	r2, [r7, #12]
 8018374:	68fb      	ldr	r3, [r7, #12]
 8018376:	69db      	ldr	r3, [r3, #28]
 8018378:	4619      	mov	r1, r3
 801837a:	4610      	mov	r0, r2
 801837c:	f7fe fc67 	bl	8016c4e <get_fat>
 8018380:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8018382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018384:	2b01      	cmp	r3, #1
 8018386:	d804      	bhi.n	8018392 <f_read+0xe2>
 8018388:	68fb      	ldr	r3, [r7, #12]
 801838a:	2202      	movs	r2, #2
 801838c:	755a      	strb	r2, [r3, #21]
 801838e:	2302      	movs	r3, #2
 8018390:	e0c9      	b.n	8018526 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8018392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018398:	d104      	bne.n	80183a4 <f_read+0xf4>
 801839a:	68fb      	ldr	r3, [r7, #12]
 801839c:	2201      	movs	r2, #1
 801839e:	755a      	strb	r2, [r3, #21]
 80183a0:	2301      	movs	r3, #1
 80183a2:	e0c0      	b.n	8018526 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80183a4:	68fb      	ldr	r3, [r7, #12]
 80183a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80183a8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80183aa:	697a      	ldr	r2, [r7, #20]
 80183ac:	68fb      	ldr	r3, [r7, #12]
 80183ae:	69db      	ldr	r3, [r3, #28]
 80183b0:	4619      	mov	r1, r3
 80183b2:	4610      	mov	r0, r2
 80183b4:	f7fe fc2c 	bl	8016c10 <clust2sect>
 80183b8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80183ba:	69bb      	ldr	r3, [r7, #24]
 80183bc:	2b00      	cmp	r3, #0
 80183be:	d104      	bne.n	80183ca <f_read+0x11a>
 80183c0:	68fb      	ldr	r3, [r7, #12]
 80183c2:	2202      	movs	r2, #2
 80183c4:	755a      	strb	r2, [r3, #21]
 80183c6:	2302      	movs	r3, #2
 80183c8:	e0ad      	b.n	8018526 <f_read+0x276>
			sect += csect;
 80183ca:	69ba      	ldr	r2, [r7, #24]
 80183cc:	69fb      	ldr	r3, [r7, #28]
 80183ce:	4413      	add	r3, r2
 80183d0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80183d2:	687b      	ldr	r3, [r7, #4]
 80183d4:	0a5b      	lsrs	r3, r3, #9
 80183d6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80183d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183da:	2b00      	cmp	r3, #0
 80183dc:	d039      	beq.n	8018452 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80183de:	69fa      	ldr	r2, [r7, #28]
 80183e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183e2:	4413      	add	r3, r2
 80183e4:	697a      	ldr	r2, [r7, #20]
 80183e6:	8952      	ldrh	r2, [r2, #10]
 80183e8:	4293      	cmp	r3, r2
 80183ea:	d905      	bls.n	80183f8 <f_read+0x148>
					cc = fs->csize - csect;
 80183ec:	697b      	ldr	r3, [r7, #20]
 80183ee:	895b      	ldrh	r3, [r3, #10]
 80183f0:	461a      	mov	r2, r3
 80183f2:	69fb      	ldr	r3, [r7, #28]
 80183f4:	1ad3      	subs	r3, r2, r3
 80183f6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80183f8:	697b      	ldr	r3, [r7, #20]
 80183fa:	7858      	ldrb	r0, [r3, #1]
 80183fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183fe:	69ba      	ldr	r2, [r7, #24]
 8018400:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018402:	f7fe f85b 	bl	80164bc <disk_read>
 8018406:	4603      	mov	r3, r0
 8018408:	2b00      	cmp	r3, #0
 801840a:	d004      	beq.n	8018416 <f_read+0x166>
 801840c:	68fb      	ldr	r3, [r7, #12]
 801840e:	2201      	movs	r2, #1
 8018410:	755a      	strb	r2, [r3, #21]
 8018412:	2301      	movs	r3, #1
 8018414:	e087      	b.n	8018526 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8018416:	68fb      	ldr	r3, [r7, #12]
 8018418:	7d1b      	ldrb	r3, [r3, #20]
 801841a:	b25b      	sxtb	r3, r3
 801841c:	2b00      	cmp	r3, #0
 801841e:	da14      	bge.n	801844a <f_read+0x19a>
 8018420:	68fb      	ldr	r3, [r7, #12]
 8018422:	6a1a      	ldr	r2, [r3, #32]
 8018424:	69bb      	ldr	r3, [r7, #24]
 8018426:	1ad3      	subs	r3, r2, r3
 8018428:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801842a:	429a      	cmp	r2, r3
 801842c:	d90d      	bls.n	801844a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801842e:	68fb      	ldr	r3, [r7, #12]
 8018430:	6a1a      	ldr	r2, [r3, #32]
 8018432:	69bb      	ldr	r3, [r7, #24]
 8018434:	1ad3      	subs	r3, r2, r3
 8018436:	025b      	lsls	r3, r3, #9
 8018438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801843a:	18d0      	adds	r0, r2, r3
 801843c:	68fb      	ldr	r3, [r7, #12]
 801843e:	3330      	adds	r3, #48	; 0x30
 8018440:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018444:	4619      	mov	r1, r3
 8018446:	f7fe f919 	bl	801667c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801844a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801844c:	025b      	lsls	r3, r3, #9
 801844e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8018450:	e050      	b.n	80184f4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8018452:	68fb      	ldr	r3, [r7, #12]
 8018454:	6a1b      	ldr	r3, [r3, #32]
 8018456:	69ba      	ldr	r2, [r7, #24]
 8018458:	429a      	cmp	r2, r3
 801845a:	d02e      	beq.n	80184ba <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801845c:	68fb      	ldr	r3, [r7, #12]
 801845e:	7d1b      	ldrb	r3, [r3, #20]
 8018460:	b25b      	sxtb	r3, r3
 8018462:	2b00      	cmp	r3, #0
 8018464:	da18      	bge.n	8018498 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018466:	697b      	ldr	r3, [r7, #20]
 8018468:	7858      	ldrb	r0, [r3, #1]
 801846a:	68fb      	ldr	r3, [r7, #12]
 801846c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018470:	68fb      	ldr	r3, [r7, #12]
 8018472:	6a1a      	ldr	r2, [r3, #32]
 8018474:	2301      	movs	r3, #1
 8018476:	f7fe f841 	bl	80164fc <disk_write>
 801847a:	4603      	mov	r3, r0
 801847c:	2b00      	cmp	r3, #0
 801847e:	d004      	beq.n	801848a <f_read+0x1da>
 8018480:	68fb      	ldr	r3, [r7, #12]
 8018482:	2201      	movs	r2, #1
 8018484:	755a      	strb	r2, [r3, #21]
 8018486:	2301      	movs	r3, #1
 8018488:	e04d      	b.n	8018526 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 801848a:	68fb      	ldr	r3, [r7, #12]
 801848c:	7d1b      	ldrb	r3, [r3, #20]
 801848e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018492:	b2da      	uxtb	r2, r3
 8018494:	68fb      	ldr	r3, [r7, #12]
 8018496:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8018498:	697b      	ldr	r3, [r7, #20]
 801849a:	7858      	ldrb	r0, [r3, #1]
 801849c:	68fb      	ldr	r3, [r7, #12]
 801849e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80184a2:	2301      	movs	r3, #1
 80184a4:	69ba      	ldr	r2, [r7, #24]
 80184a6:	f7fe f809 	bl	80164bc <disk_read>
 80184aa:	4603      	mov	r3, r0
 80184ac:	2b00      	cmp	r3, #0
 80184ae:	d004      	beq.n	80184ba <f_read+0x20a>
 80184b0:	68fb      	ldr	r3, [r7, #12]
 80184b2:	2201      	movs	r2, #1
 80184b4:	755a      	strb	r2, [r3, #21]
 80184b6:	2301      	movs	r3, #1
 80184b8:	e035      	b.n	8018526 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80184ba:	68fb      	ldr	r3, [r7, #12]
 80184bc:	69ba      	ldr	r2, [r7, #24]
 80184be:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80184c0:	68fb      	ldr	r3, [r7, #12]
 80184c2:	699b      	ldr	r3, [r3, #24]
 80184c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80184c8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80184cc:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80184ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	429a      	cmp	r2, r3
 80184d4:	d901      	bls.n	80184da <f_read+0x22a>
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80184da:	68fb      	ldr	r3, [r7, #12]
 80184dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80184e0:	68fb      	ldr	r3, [r7, #12]
 80184e2:	699b      	ldr	r3, [r3, #24]
 80184e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80184e8:	4413      	add	r3, r2
 80184ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80184ec:	4619      	mov	r1, r3
 80184ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80184f0:	f7fe f8c4 	bl	801667c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80184f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80184f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184f8:	4413      	add	r3, r2
 80184fa:	627b      	str	r3, [r7, #36]	; 0x24
 80184fc:	68fb      	ldr	r3, [r7, #12]
 80184fe:	699a      	ldr	r2, [r3, #24]
 8018500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018502:	441a      	add	r2, r3
 8018504:	68fb      	ldr	r3, [r7, #12]
 8018506:	619a      	str	r2, [r3, #24]
 8018508:	683b      	ldr	r3, [r7, #0]
 801850a:	681a      	ldr	r2, [r3, #0]
 801850c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801850e:	441a      	add	r2, r3
 8018510:	683b      	ldr	r3, [r7, #0]
 8018512:	601a      	str	r2, [r3, #0]
 8018514:	687a      	ldr	r2, [r7, #4]
 8018516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018518:	1ad3      	subs	r3, r2, r3
 801851a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	2b00      	cmp	r3, #0
 8018520:	f47f af01 	bne.w	8018326 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8018524:	2300      	movs	r3, #0
}
 8018526:	4618      	mov	r0, r3
 8018528:	3738      	adds	r7, #56	; 0x38
 801852a:	46bd      	mov	sp, r7
 801852c:	bd80      	pop	{r7, pc}

0801852e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801852e:	b580      	push	{r7, lr}
 8018530:	b08c      	sub	sp, #48	; 0x30
 8018532:	af00      	add	r7, sp, #0
 8018534:	60f8      	str	r0, [r7, #12]
 8018536:	60b9      	str	r1, [r7, #8]
 8018538:	607a      	str	r2, [r7, #4]
 801853a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801853c:	68bb      	ldr	r3, [r7, #8]
 801853e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8018540:	683b      	ldr	r3, [r7, #0]
 8018542:	2200      	movs	r2, #0
 8018544:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8018546:	68fb      	ldr	r3, [r7, #12]
 8018548:	f107 0210 	add.w	r2, r7, #16
 801854c:	4611      	mov	r1, r2
 801854e:	4618      	mov	r0, r3
 8018550:	f7ff fc74 	bl	8017e3c <validate>
 8018554:	4603      	mov	r3, r0
 8018556:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801855a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801855e:	2b00      	cmp	r3, #0
 8018560:	d107      	bne.n	8018572 <f_write+0x44>
 8018562:	68fb      	ldr	r3, [r7, #12]
 8018564:	7d5b      	ldrb	r3, [r3, #21]
 8018566:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801856a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801856e:	2b00      	cmp	r3, #0
 8018570:	d002      	beq.n	8018578 <f_write+0x4a>
 8018572:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018576:	e14b      	b.n	8018810 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8018578:	68fb      	ldr	r3, [r7, #12]
 801857a:	7d1b      	ldrb	r3, [r3, #20]
 801857c:	f003 0302 	and.w	r3, r3, #2
 8018580:	2b00      	cmp	r3, #0
 8018582:	d101      	bne.n	8018588 <f_write+0x5a>
 8018584:	2307      	movs	r3, #7
 8018586:	e143      	b.n	8018810 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8018588:	68fb      	ldr	r3, [r7, #12]
 801858a:	699a      	ldr	r2, [r3, #24]
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	441a      	add	r2, r3
 8018590:	68fb      	ldr	r3, [r7, #12]
 8018592:	699b      	ldr	r3, [r3, #24]
 8018594:	429a      	cmp	r2, r3
 8018596:	f080 812d 	bcs.w	80187f4 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801859a:	68fb      	ldr	r3, [r7, #12]
 801859c:	699b      	ldr	r3, [r3, #24]
 801859e:	43db      	mvns	r3, r3
 80185a0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80185a2:	e127      	b.n	80187f4 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80185a4:	68fb      	ldr	r3, [r7, #12]
 80185a6:	699b      	ldr	r3, [r3, #24]
 80185a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80185ac:	2b00      	cmp	r3, #0
 80185ae:	f040 80e3 	bne.w	8018778 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80185b2:	68fb      	ldr	r3, [r7, #12]
 80185b4:	699b      	ldr	r3, [r3, #24]
 80185b6:	0a5b      	lsrs	r3, r3, #9
 80185b8:	693a      	ldr	r2, [r7, #16]
 80185ba:	8952      	ldrh	r2, [r2, #10]
 80185bc:	3a01      	subs	r2, #1
 80185be:	4013      	ands	r3, r2
 80185c0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80185c2:	69bb      	ldr	r3, [r7, #24]
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	d143      	bne.n	8018650 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80185c8:	68fb      	ldr	r3, [r7, #12]
 80185ca:	699b      	ldr	r3, [r3, #24]
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d10c      	bne.n	80185ea <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80185d0:	68fb      	ldr	r3, [r7, #12]
 80185d2:	689b      	ldr	r3, [r3, #8]
 80185d4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80185d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185d8:	2b00      	cmp	r3, #0
 80185da:	d11a      	bne.n	8018612 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80185dc:	68fb      	ldr	r3, [r7, #12]
 80185de:	2100      	movs	r1, #0
 80185e0:	4618      	mov	r0, r3
 80185e2:	f7fe fd25 	bl	8017030 <create_chain>
 80185e6:	62b8      	str	r0, [r7, #40]	; 0x28
 80185e8:	e013      	b.n	8018612 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80185ea:	68fb      	ldr	r3, [r7, #12]
 80185ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185ee:	2b00      	cmp	r3, #0
 80185f0:	d007      	beq.n	8018602 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80185f2:	68fb      	ldr	r3, [r7, #12]
 80185f4:	699b      	ldr	r3, [r3, #24]
 80185f6:	4619      	mov	r1, r3
 80185f8:	68f8      	ldr	r0, [r7, #12]
 80185fa:	f7fe fdb1 	bl	8017160 <clmt_clust>
 80185fe:	62b8      	str	r0, [r7, #40]	; 0x28
 8018600:	e007      	b.n	8018612 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8018602:	68fa      	ldr	r2, [r7, #12]
 8018604:	68fb      	ldr	r3, [r7, #12]
 8018606:	69db      	ldr	r3, [r3, #28]
 8018608:	4619      	mov	r1, r3
 801860a:	4610      	mov	r0, r2
 801860c:	f7fe fd10 	bl	8017030 <create_chain>
 8018610:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8018612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018614:	2b00      	cmp	r3, #0
 8018616:	f000 80f2 	beq.w	80187fe <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801861a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801861c:	2b01      	cmp	r3, #1
 801861e:	d104      	bne.n	801862a <f_write+0xfc>
 8018620:	68fb      	ldr	r3, [r7, #12]
 8018622:	2202      	movs	r2, #2
 8018624:	755a      	strb	r2, [r3, #21]
 8018626:	2302      	movs	r3, #2
 8018628:	e0f2      	b.n	8018810 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801862a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801862c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018630:	d104      	bne.n	801863c <f_write+0x10e>
 8018632:	68fb      	ldr	r3, [r7, #12]
 8018634:	2201      	movs	r2, #1
 8018636:	755a      	strb	r2, [r3, #21]
 8018638:	2301      	movs	r3, #1
 801863a:	e0e9      	b.n	8018810 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801863c:	68fb      	ldr	r3, [r7, #12]
 801863e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018640:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8018642:	68fb      	ldr	r3, [r7, #12]
 8018644:	689b      	ldr	r3, [r3, #8]
 8018646:	2b00      	cmp	r3, #0
 8018648:	d102      	bne.n	8018650 <f_write+0x122>
 801864a:	68fb      	ldr	r3, [r7, #12]
 801864c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801864e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8018650:	68fb      	ldr	r3, [r7, #12]
 8018652:	7d1b      	ldrb	r3, [r3, #20]
 8018654:	b25b      	sxtb	r3, r3
 8018656:	2b00      	cmp	r3, #0
 8018658:	da18      	bge.n	801868c <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801865a:	693b      	ldr	r3, [r7, #16]
 801865c:	7858      	ldrb	r0, [r3, #1]
 801865e:	68fb      	ldr	r3, [r7, #12]
 8018660:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018664:	68fb      	ldr	r3, [r7, #12]
 8018666:	6a1a      	ldr	r2, [r3, #32]
 8018668:	2301      	movs	r3, #1
 801866a:	f7fd ff47 	bl	80164fc <disk_write>
 801866e:	4603      	mov	r3, r0
 8018670:	2b00      	cmp	r3, #0
 8018672:	d004      	beq.n	801867e <f_write+0x150>
 8018674:	68fb      	ldr	r3, [r7, #12]
 8018676:	2201      	movs	r2, #1
 8018678:	755a      	strb	r2, [r3, #21]
 801867a:	2301      	movs	r3, #1
 801867c:	e0c8      	b.n	8018810 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801867e:	68fb      	ldr	r3, [r7, #12]
 8018680:	7d1b      	ldrb	r3, [r3, #20]
 8018682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018686:	b2da      	uxtb	r2, r3
 8018688:	68fb      	ldr	r3, [r7, #12]
 801868a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801868c:	693a      	ldr	r2, [r7, #16]
 801868e:	68fb      	ldr	r3, [r7, #12]
 8018690:	69db      	ldr	r3, [r3, #28]
 8018692:	4619      	mov	r1, r3
 8018694:	4610      	mov	r0, r2
 8018696:	f7fe fabb 	bl	8016c10 <clust2sect>
 801869a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801869c:	697b      	ldr	r3, [r7, #20]
 801869e:	2b00      	cmp	r3, #0
 80186a0:	d104      	bne.n	80186ac <f_write+0x17e>
 80186a2:	68fb      	ldr	r3, [r7, #12]
 80186a4:	2202      	movs	r2, #2
 80186a6:	755a      	strb	r2, [r3, #21]
 80186a8:	2302      	movs	r3, #2
 80186aa:	e0b1      	b.n	8018810 <f_write+0x2e2>
			sect += csect;
 80186ac:	697a      	ldr	r2, [r7, #20]
 80186ae:	69bb      	ldr	r3, [r7, #24]
 80186b0:	4413      	add	r3, r2
 80186b2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	0a5b      	lsrs	r3, r3, #9
 80186b8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80186ba:	6a3b      	ldr	r3, [r7, #32]
 80186bc:	2b00      	cmp	r3, #0
 80186be:	d03c      	beq.n	801873a <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80186c0:	69ba      	ldr	r2, [r7, #24]
 80186c2:	6a3b      	ldr	r3, [r7, #32]
 80186c4:	4413      	add	r3, r2
 80186c6:	693a      	ldr	r2, [r7, #16]
 80186c8:	8952      	ldrh	r2, [r2, #10]
 80186ca:	4293      	cmp	r3, r2
 80186cc:	d905      	bls.n	80186da <f_write+0x1ac>
					cc = fs->csize - csect;
 80186ce:	693b      	ldr	r3, [r7, #16]
 80186d0:	895b      	ldrh	r3, [r3, #10]
 80186d2:	461a      	mov	r2, r3
 80186d4:	69bb      	ldr	r3, [r7, #24]
 80186d6:	1ad3      	subs	r3, r2, r3
 80186d8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80186da:	693b      	ldr	r3, [r7, #16]
 80186dc:	7858      	ldrb	r0, [r3, #1]
 80186de:	6a3b      	ldr	r3, [r7, #32]
 80186e0:	697a      	ldr	r2, [r7, #20]
 80186e2:	69f9      	ldr	r1, [r7, #28]
 80186e4:	f7fd ff0a 	bl	80164fc <disk_write>
 80186e8:	4603      	mov	r3, r0
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	d004      	beq.n	80186f8 <f_write+0x1ca>
 80186ee:	68fb      	ldr	r3, [r7, #12]
 80186f0:	2201      	movs	r2, #1
 80186f2:	755a      	strb	r2, [r3, #21]
 80186f4:	2301      	movs	r3, #1
 80186f6:	e08b      	b.n	8018810 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80186f8:	68fb      	ldr	r3, [r7, #12]
 80186fa:	6a1a      	ldr	r2, [r3, #32]
 80186fc:	697b      	ldr	r3, [r7, #20]
 80186fe:	1ad3      	subs	r3, r2, r3
 8018700:	6a3a      	ldr	r2, [r7, #32]
 8018702:	429a      	cmp	r2, r3
 8018704:	d915      	bls.n	8018732 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8018706:	68fb      	ldr	r3, [r7, #12]
 8018708:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801870c:	68fb      	ldr	r3, [r7, #12]
 801870e:	6a1a      	ldr	r2, [r3, #32]
 8018710:	697b      	ldr	r3, [r7, #20]
 8018712:	1ad3      	subs	r3, r2, r3
 8018714:	025b      	lsls	r3, r3, #9
 8018716:	69fa      	ldr	r2, [r7, #28]
 8018718:	4413      	add	r3, r2
 801871a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801871e:	4619      	mov	r1, r3
 8018720:	f7fd ffac 	bl	801667c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8018724:	68fb      	ldr	r3, [r7, #12]
 8018726:	7d1b      	ldrb	r3, [r3, #20]
 8018728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801872c:	b2da      	uxtb	r2, r3
 801872e:	68fb      	ldr	r3, [r7, #12]
 8018730:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8018732:	6a3b      	ldr	r3, [r7, #32]
 8018734:	025b      	lsls	r3, r3, #9
 8018736:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8018738:	e03f      	b.n	80187ba <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801873a:	68fb      	ldr	r3, [r7, #12]
 801873c:	6a1b      	ldr	r3, [r3, #32]
 801873e:	697a      	ldr	r2, [r7, #20]
 8018740:	429a      	cmp	r2, r3
 8018742:	d016      	beq.n	8018772 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8018744:	68fb      	ldr	r3, [r7, #12]
 8018746:	699a      	ldr	r2, [r3, #24]
 8018748:	68fb      	ldr	r3, [r7, #12]
 801874a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801874c:	429a      	cmp	r2, r3
 801874e:	d210      	bcs.n	8018772 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8018750:	693b      	ldr	r3, [r7, #16]
 8018752:	7858      	ldrb	r0, [r3, #1]
 8018754:	68fb      	ldr	r3, [r7, #12]
 8018756:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801875a:	2301      	movs	r3, #1
 801875c:	697a      	ldr	r2, [r7, #20]
 801875e:	f7fd fead 	bl	80164bc <disk_read>
 8018762:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8018764:	2b00      	cmp	r3, #0
 8018766:	d004      	beq.n	8018772 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8018768:	68fb      	ldr	r3, [r7, #12]
 801876a:	2201      	movs	r2, #1
 801876c:	755a      	strb	r2, [r3, #21]
 801876e:	2301      	movs	r3, #1
 8018770:	e04e      	b.n	8018810 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8018772:	68fb      	ldr	r3, [r7, #12]
 8018774:	697a      	ldr	r2, [r7, #20]
 8018776:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8018778:	68fb      	ldr	r3, [r7, #12]
 801877a:	699b      	ldr	r3, [r3, #24]
 801877c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018780:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8018784:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8018786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018788:	687b      	ldr	r3, [r7, #4]
 801878a:	429a      	cmp	r2, r3
 801878c:	d901      	bls.n	8018792 <f_write+0x264>
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8018792:	68fb      	ldr	r3, [r7, #12]
 8018794:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8018798:	68fb      	ldr	r3, [r7, #12]
 801879a:	699b      	ldr	r3, [r3, #24]
 801879c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80187a0:	4413      	add	r3, r2
 80187a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80187a4:	69f9      	ldr	r1, [r7, #28]
 80187a6:	4618      	mov	r0, r3
 80187a8:	f7fd ff68 	bl	801667c <mem_cpy>
		fp->flag |= FA_DIRTY;
 80187ac:	68fb      	ldr	r3, [r7, #12]
 80187ae:	7d1b      	ldrb	r3, [r3, #20]
 80187b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80187b4:	b2da      	uxtb	r2, r3
 80187b6:	68fb      	ldr	r3, [r7, #12]
 80187b8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80187ba:	69fa      	ldr	r2, [r7, #28]
 80187bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187be:	4413      	add	r3, r2
 80187c0:	61fb      	str	r3, [r7, #28]
 80187c2:	68fb      	ldr	r3, [r7, #12]
 80187c4:	699a      	ldr	r2, [r3, #24]
 80187c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187c8:	441a      	add	r2, r3
 80187ca:	68fb      	ldr	r3, [r7, #12]
 80187cc:	619a      	str	r2, [r3, #24]
 80187ce:	68fb      	ldr	r3, [r7, #12]
 80187d0:	68da      	ldr	r2, [r3, #12]
 80187d2:	68fb      	ldr	r3, [r7, #12]
 80187d4:	699b      	ldr	r3, [r3, #24]
 80187d6:	429a      	cmp	r2, r3
 80187d8:	bf38      	it	cc
 80187da:	461a      	movcc	r2, r3
 80187dc:	68fb      	ldr	r3, [r7, #12]
 80187de:	60da      	str	r2, [r3, #12]
 80187e0:	683b      	ldr	r3, [r7, #0]
 80187e2:	681a      	ldr	r2, [r3, #0]
 80187e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187e6:	441a      	add	r2, r3
 80187e8:	683b      	ldr	r3, [r7, #0]
 80187ea:	601a      	str	r2, [r3, #0]
 80187ec:	687a      	ldr	r2, [r7, #4]
 80187ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187f0:	1ad3      	subs	r3, r2, r3
 80187f2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	f47f aed4 	bne.w	80185a4 <f_write+0x76>
 80187fc:	e000      	b.n	8018800 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80187fe:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8018800:	68fb      	ldr	r3, [r7, #12]
 8018802:	7d1b      	ldrb	r3, [r3, #20]
 8018804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018808:	b2da      	uxtb	r2, r3
 801880a:	68fb      	ldr	r3, [r7, #12]
 801880c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801880e:	2300      	movs	r3, #0
}
 8018810:	4618      	mov	r0, r3
 8018812:	3730      	adds	r7, #48	; 0x30
 8018814:	46bd      	mov	sp, r7
 8018816:	bd80      	pop	{r7, pc}

08018818 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8018818:	b580      	push	{r7, lr}
 801881a:	b086      	sub	sp, #24
 801881c:	af00      	add	r7, sp, #0
 801881e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8018820:	687b      	ldr	r3, [r7, #4]
 8018822:	f107 0208 	add.w	r2, r7, #8
 8018826:	4611      	mov	r1, r2
 8018828:	4618      	mov	r0, r3
 801882a:	f7ff fb07 	bl	8017e3c <validate>
 801882e:	4603      	mov	r3, r0
 8018830:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8018832:	7dfb      	ldrb	r3, [r7, #23]
 8018834:	2b00      	cmp	r3, #0
 8018836:	d168      	bne.n	801890a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	7d1b      	ldrb	r3, [r3, #20]
 801883c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018840:	2b00      	cmp	r3, #0
 8018842:	d062      	beq.n	801890a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	7d1b      	ldrb	r3, [r3, #20]
 8018848:	b25b      	sxtb	r3, r3
 801884a:	2b00      	cmp	r3, #0
 801884c:	da15      	bge.n	801887a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801884e:	68bb      	ldr	r3, [r7, #8]
 8018850:	7858      	ldrb	r0, [r3, #1]
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	6a1a      	ldr	r2, [r3, #32]
 801885c:	2301      	movs	r3, #1
 801885e:	f7fd fe4d 	bl	80164fc <disk_write>
 8018862:	4603      	mov	r3, r0
 8018864:	2b00      	cmp	r3, #0
 8018866:	d001      	beq.n	801886c <f_sync+0x54>
 8018868:	2301      	movs	r3, #1
 801886a:	e04f      	b.n	801890c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	7d1b      	ldrb	r3, [r3, #20]
 8018870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018874:	b2da      	uxtb	r2, r3
 8018876:	687b      	ldr	r3, [r7, #4]
 8018878:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801887a:	f7fa fce1 	bl	8013240 <get_fattime>
 801887e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8018880:	68ba      	ldr	r2, [r7, #8]
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018886:	4619      	mov	r1, r3
 8018888:	4610      	mov	r0, r2
 801888a:	f7fe f925 	bl	8016ad8 <move_window>
 801888e:	4603      	mov	r3, r0
 8018890:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8018892:	7dfb      	ldrb	r3, [r7, #23]
 8018894:	2b00      	cmp	r3, #0
 8018896:	d138      	bne.n	801890a <f_sync+0xf2>
					dir = fp->dir_ptr;
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801889c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801889e:	68fb      	ldr	r3, [r7, #12]
 80188a0:	330b      	adds	r3, #11
 80188a2:	781a      	ldrb	r2, [r3, #0]
 80188a4:	68fb      	ldr	r3, [r7, #12]
 80188a6:	330b      	adds	r3, #11
 80188a8:	f042 0220 	orr.w	r2, r2, #32
 80188ac:	b2d2      	uxtb	r2, r2
 80188ae:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80188b0:	687b      	ldr	r3, [r7, #4]
 80188b2:	6818      	ldr	r0, [r3, #0]
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	689b      	ldr	r3, [r3, #8]
 80188b8:	461a      	mov	r2, r3
 80188ba:	68f9      	ldr	r1, [r7, #12]
 80188bc:	f7fe fe2a 	bl	8017514 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80188c0:	68fb      	ldr	r3, [r7, #12]
 80188c2:	f103 021c 	add.w	r2, r3, #28
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	68db      	ldr	r3, [r3, #12]
 80188ca:	4619      	mov	r1, r3
 80188cc:	4610      	mov	r0, r2
 80188ce:	f7fd fea9 	bl	8016624 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80188d2:	68fb      	ldr	r3, [r7, #12]
 80188d4:	3316      	adds	r3, #22
 80188d6:	6939      	ldr	r1, [r7, #16]
 80188d8:	4618      	mov	r0, r3
 80188da:	f7fd fea3 	bl	8016624 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80188de:	68fb      	ldr	r3, [r7, #12]
 80188e0:	3312      	adds	r3, #18
 80188e2:	2100      	movs	r1, #0
 80188e4:	4618      	mov	r0, r3
 80188e6:	f7fd fe82 	bl	80165ee <st_word>
					fs->wflag = 1;
 80188ea:	68bb      	ldr	r3, [r7, #8]
 80188ec:	2201      	movs	r2, #1
 80188ee:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80188f0:	68bb      	ldr	r3, [r7, #8]
 80188f2:	4618      	mov	r0, r3
 80188f4:	f7fe f91e 	bl	8016b34 <sync_fs>
 80188f8:	4603      	mov	r3, r0
 80188fa:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80188fc:	687b      	ldr	r3, [r7, #4]
 80188fe:	7d1b      	ldrb	r3, [r3, #20]
 8018900:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8018904:	b2da      	uxtb	r2, r3
 8018906:	687b      	ldr	r3, [r7, #4]
 8018908:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801890a:	7dfb      	ldrb	r3, [r7, #23]
}
 801890c:	4618      	mov	r0, r3
 801890e:	3718      	adds	r7, #24
 8018910:	46bd      	mov	sp, r7
 8018912:	bd80      	pop	{r7, pc}

08018914 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8018914:	b580      	push	{r7, lr}
 8018916:	b084      	sub	sp, #16
 8018918:	af00      	add	r7, sp, #0
 801891a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801891c:	6878      	ldr	r0, [r7, #4]
 801891e:	f7ff ff7b 	bl	8018818 <f_sync>
 8018922:	4603      	mov	r3, r0
 8018924:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8018926:	7bfb      	ldrb	r3, [r7, #15]
 8018928:	2b00      	cmp	r3, #0
 801892a:	d118      	bne.n	801895e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	f107 0208 	add.w	r2, r7, #8
 8018932:	4611      	mov	r1, r2
 8018934:	4618      	mov	r0, r3
 8018936:	f7ff fa81 	bl	8017e3c <validate>
 801893a:	4603      	mov	r3, r0
 801893c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801893e:	7bfb      	ldrb	r3, [r7, #15]
 8018940:	2b00      	cmp	r3, #0
 8018942:	d10c      	bne.n	801895e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	691b      	ldr	r3, [r3, #16]
 8018948:	4618      	mov	r0, r3
 801894a:	f7fe f821 	bl	8016990 <dec_lock>
 801894e:	4603      	mov	r3, r0
 8018950:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8018952:	7bfb      	ldrb	r3, [r7, #15]
 8018954:	2b00      	cmp	r3, #0
 8018956:	d102      	bne.n	801895e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	2200      	movs	r2, #0
 801895c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801895e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018960:	4618      	mov	r0, r3
 8018962:	3710      	adds	r7, #16
 8018964:	46bd      	mov	sp, r7
 8018966:	bd80      	pop	{r7, pc}

08018968 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8018968:	b480      	push	{r7}
 801896a:	b087      	sub	sp, #28
 801896c:	af00      	add	r7, sp, #0
 801896e:	60f8      	str	r0, [r7, #12]
 8018970:	60b9      	str	r1, [r7, #8]
 8018972:	4613      	mov	r3, r2
 8018974:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8018976:	2301      	movs	r3, #1
 8018978:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801897a:	2300      	movs	r3, #0
 801897c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801897e:	4b1f      	ldr	r3, [pc, #124]	; (80189fc <FATFS_LinkDriverEx+0x94>)
 8018980:	7a5b      	ldrb	r3, [r3, #9]
 8018982:	b2db      	uxtb	r3, r3
 8018984:	2b00      	cmp	r3, #0
 8018986:	d131      	bne.n	80189ec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8018988:	4b1c      	ldr	r3, [pc, #112]	; (80189fc <FATFS_LinkDriverEx+0x94>)
 801898a:	7a5b      	ldrb	r3, [r3, #9]
 801898c:	b2db      	uxtb	r3, r3
 801898e:	461a      	mov	r2, r3
 8018990:	4b1a      	ldr	r3, [pc, #104]	; (80189fc <FATFS_LinkDriverEx+0x94>)
 8018992:	2100      	movs	r1, #0
 8018994:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8018996:	4b19      	ldr	r3, [pc, #100]	; (80189fc <FATFS_LinkDriverEx+0x94>)
 8018998:	7a5b      	ldrb	r3, [r3, #9]
 801899a:	b2db      	uxtb	r3, r3
 801899c:	4a17      	ldr	r2, [pc, #92]	; (80189fc <FATFS_LinkDriverEx+0x94>)
 801899e:	009b      	lsls	r3, r3, #2
 80189a0:	4413      	add	r3, r2
 80189a2:	68fa      	ldr	r2, [r7, #12]
 80189a4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80189a6:	4b15      	ldr	r3, [pc, #84]	; (80189fc <FATFS_LinkDriverEx+0x94>)
 80189a8:	7a5b      	ldrb	r3, [r3, #9]
 80189aa:	b2db      	uxtb	r3, r3
 80189ac:	461a      	mov	r2, r3
 80189ae:	4b13      	ldr	r3, [pc, #76]	; (80189fc <FATFS_LinkDriverEx+0x94>)
 80189b0:	4413      	add	r3, r2
 80189b2:	79fa      	ldrb	r2, [r7, #7]
 80189b4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80189b6:	4b11      	ldr	r3, [pc, #68]	; (80189fc <FATFS_LinkDriverEx+0x94>)
 80189b8:	7a5b      	ldrb	r3, [r3, #9]
 80189ba:	b2db      	uxtb	r3, r3
 80189bc:	1c5a      	adds	r2, r3, #1
 80189be:	b2d1      	uxtb	r1, r2
 80189c0:	4a0e      	ldr	r2, [pc, #56]	; (80189fc <FATFS_LinkDriverEx+0x94>)
 80189c2:	7251      	strb	r1, [r2, #9]
 80189c4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80189c6:	7dbb      	ldrb	r3, [r7, #22]
 80189c8:	3330      	adds	r3, #48	; 0x30
 80189ca:	b2da      	uxtb	r2, r3
 80189cc:	68bb      	ldr	r3, [r7, #8]
 80189ce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80189d0:	68bb      	ldr	r3, [r7, #8]
 80189d2:	3301      	adds	r3, #1
 80189d4:	223a      	movs	r2, #58	; 0x3a
 80189d6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80189d8:	68bb      	ldr	r3, [r7, #8]
 80189da:	3302      	adds	r3, #2
 80189dc:	222f      	movs	r2, #47	; 0x2f
 80189de:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80189e0:	68bb      	ldr	r3, [r7, #8]
 80189e2:	3303      	adds	r3, #3
 80189e4:	2200      	movs	r2, #0
 80189e6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80189e8:	2300      	movs	r3, #0
 80189ea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80189ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80189ee:	4618      	mov	r0, r3
 80189f0:	371c      	adds	r7, #28
 80189f2:	46bd      	mov	sp, r7
 80189f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189f8:	4770      	bx	lr
 80189fa:	bf00      	nop
 80189fc:	24000b84 	.word	0x24000b84

08018a00 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8018a00:	b580      	push	{r7, lr}
 8018a02:	b082      	sub	sp, #8
 8018a04:	af00      	add	r7, sp, #0
 8018a06:	6078      	str	r0, [r7, #4]
 8018a08:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8018a0a:	2200      	movs	r2, #0
 8018a0c:	6839      	ldr	r1, [r7, #0]
 8018a0e:	6878      	ldr	r0, [r7, #4]
 8018a10:	f7ff ffaa 	bl	8018968 <FATFS_LinkDriverEx>
 8018a14:	4603      	mov	r3, r0
}
 8018a16:	4618      	mov	r0, r3
 8018a18:	3708      	adds	r7, #8
 8018a1a:	46bd      	mov	sp, r7
 8018a1c:	bd80      	pop	{r7, pc}
	...

08018a20 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8018a20:	b580      	push	{r7, lr}
 8018a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8018a24:	2200      	movs	r2, #0
 8018a26:	4913      	ldr	r1, [pc, #76]	; (8018a74 <MX_USB_DEVICE_Init+0x54>)
 8018a28:	4813      	ldr	r0, [pc, #76]	; (8018a78 <MX_USB_DEVICE_Init+0x58>)
 8018a2a:	f7fc fc20 	bl	801526e <USBD_Init>
 8018a2e:	4603      	mov	r3, r0
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	d001      	beq.n	8018a38 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8018a34:	f7eb f8ee 	bl	8003c14 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8018a38:	4910      	ldr	r1, [pc, #64]	; (8018a7c <MX_USB_DEVICE_Init+0x5c>)
 8018a3a:	480f      	ldr	r0, [pc, #60]	; (8018a78 <MX_USB_DEVICE_Init+0x58>)
 8018a3c:	f7fc fc4d 	bl	80152da <USBD_RegisterClass>
 8018a40:	4603      	mov	r3, r0
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	d001      	beq.n	8018a4a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8018a46:	f7eb f8e5 	bl	8003c14 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8018a4a:	490d      	ldr	r1, [pc, #52]	; (8018a80 <MX_USB_DEVICE_Init+0x60>)
 8018a4c:	480a      	ldr	r0, [pc, #40]	; (8018a78 <MX_USB_DEVICE_Init+0x58>)
 8018a4e:	f7fa fff7 	bl	8013a40 <USBD_MSC_RegisterStorage>
 8018a52:	4603      	mov	r3, r0
 8018a54:	2b00      	cmp	r3, #0
 8018a56:	d001      	beq.n	8018a5c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8018a58:	f7eb f8dc 	bl	8003c14 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8018a5c:	4806      	ldr	r0, [pc, #24]	; (8018a78 <MX_USB_DEVICE_Init+0x58>)
 8018a5e:	f7fc fc5d 	bl	801531c <USBD_Start>
 8018a62:	4603      	mov	r3, r0
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	d001      	beq.n	8018a6c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8018a68:	f7eb f8d4 	bl	8003c14 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8018a6c:	f7f0 fe2e 	bl	80096cc <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8018a70:	bf00      	nop
 8018a72:	bd80      	pop	{r7, pc}
 8018a74:	24000108 	.word	0x24000108
 8018a78:	24001bd4 	.word	0x24001bd4
 8018a7c:	24000020 	.word	0x24000020
 8018a80:	24000158 	.word	0x24000158

08018a84 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018a84:	b480      	push	{r7}
 8018a86:	b083      	sub	sp, #12
 8018a88:	af00      	add	r7, sp, #0
 8018a8a:	4603      	mov	r3, r0
 8018a8c:	6039      	str	r1, [r7, #0]
 8018a8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8018a90:	683b      	ldr	r3, [r7, #0]
 8018a92:	2212      	movs	r2, #18
 8018a94:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8018a96:	4b03      	ldr	r3, [pc, #12]	; (8018aa4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8018a98:	4618      	mov	r0, r3
 8018a9a:	370c      	adds	r7, #12
 8018a9c:	46bd      	mov	sp, r7
 8018a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aa2:	4770      	bx	lr
 8018aa4:	24000124 	.word	0x24000124

08018aa8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018aa8:	b480      	push	{r7}
 8018aaa:	b083      	sub	sp, #12
 8018aac:	af00      	add	r7, sp, #0
 8018aae:	4603      	mov	r3, r0
 8018ab0:	6039      	str	r1, [r7, #0]
 8018ab2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018ab4:	683b      	ldr	r3, [r7, #0]
 8018ab6:	2204      	movs	r2, #4
 8018ab8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018aba:	4b03      	ldr	r3, [pc, #12]	; (8018ac8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8018abc:	4618      	mov	r0, r3
 8018abe:	370c      	adds	r7, #12
 8018ac0:	46bd      	mov	sp, r7
 8018ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ac6:	4770      	bx	lr
 8018ac8:	24000138 	.word	0x24000138

08018acc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018acc:	b580      	push	{r7, lr}
 8018ace:	b082      	sub	sp, #8
 8018ad0:	af00      	add	r7, sp, #0
 8018ad2:	4603      	mov	r3, r0
 8018ad4:	6039      	str	r1, [r7, #0]
 8018ad6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018ad8:	79fb      	ldrb	r3, [r7, #7]
 8018ada:	2b00      	cmp	r3, #0
 8018adc:	d105      	bne.n	8018aea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018ade:	683a      	ldr	r2, [r7, #0]
 8018ae0:	4907      	ldr	r1, [pc, #28]	; (8018b00 <USBD_FS_ProductStrDescriptor+0x34>)
 8018ae2:	4808      	ldr	r0, [pc, #32]	; (8018b04 <USBD_FS_ProductStrDescriptor+0x38>)
 8018ae4:	f7fd fbe7 	bl	80162b6 <USBD_GetString>
 8018ae8:	e004      	b.n	8018af4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018aea:	683a      	ldr	r2, [r7, #0]
 8018aec:	4904      	ldr	r1, [pc, #16]	; (8018b00 <USBD_FS_ProductStrDescriptor+0x34>)
 8018aee:	4805      	ldr	r0, [pc, #20]	; (8018b04 <USBD_FS_ProductStrDescriptor+0x38>)
 8018af0:	f7fd fbe1 	bl	80162b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018af4:	4b02      	ldr	r3, [pc, #8]	; (8018b00 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8018af6:	4618      	mov	r0, r3
 8018af8:	3708      	adds	r7, #8
 8018afa:	46bd      	mov	sp, r7
 8018afc:	bd80      	pop	{r7, pc}
 8018afe:	bf00      	nop
 8018b00:	24001ea4 	.word	0x24001ea4
 8018b04:	0801af0c 	.word	0x0801af0c

08018b08 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018b08:	b580      	push	{r7, lr}
 8018b0a:	b082      	sub	sp, #8
 8018b0c:	af00      	add	r7, sp, #0
 8018b0e:	4603      	mov	r3, r0
 8018b10:	6039      	str	r1, [r7, #0]
 8018b12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8018b14:	683a      	ldr	r2, [r7, #0]
 8018b16:	4904      	ldr	r1, [pc, #16]	; (8018b28 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8018b18:	4804      	ldr	r0, [pc, #16]	; (8018b2c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8018b1a:	f7fd fbcc 	bl	80162b6 <USBD_GetString>
  return USBD_StrDesc;
 8018b1e:	4b02      	ldr	r3, [pc, #8]	; (8018b28 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8018b20:	4618      	mov	r0, r3
 8018b22:	3708      	adds	r7, #8
 8018b24:	46bd      	mov	sp, r7
 8018b26:	bd80      	pop	{r7, pc}
 8018b28:	24001ea4 	.word	0x24001ea4
 8018b2c:	0801af20 	.word	0x0801af20

08018b30 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018b30:	b580      	push	{r7, lr}
 8018b32:	b082      	sub	sp, #8
 8018b34:	af00      	add	r7, sp, #0
 8018b36:	4603      	mov	r3, r0
 8018b38:	6039      	str	r1, [r7, #0]
 8018b3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018b3c:	683b      	ldr	r3, [r7, #0]
 8018b3e:	221a      	movs	r2, #26
 8018b40:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8018b42:	f000 f843 	bl	8018bcc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8018b46:	4b02      	ldr	r3, [pc, #8]	; (8018b50 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8018b48:	4618      	mov	r0, r3
 8018b4a:	3708      	adds	r7, #8
 8018b4c:	46bd      	mov	sp, r7
 8018b4e:	bd80      	pop	{r7, pc}
 8018b50:	2400013c 	.word	0x2400013c

08018b54 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018b54:	b580      	push	{r7, lr}
 8018b56:	b082      	sub	sp, #8
 8018b58:	af00      	add	r7, sp, #0
 8018b5a:	4603      	mov	r3, r0
 8018b5c:	6039      	str	r1, [r7, #0]
 8018b5e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018b60:	79fb      	ldrb	r3, [r7, #7]
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	d105      	bne.n	8018b72 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018b66:	683a      	ldr	r2, [r7, #0]
 8018b68:	4907      	ldr	r1, [pc, #28]	; (8018b88 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018b6a:	4808      	ldr	r0, [pc, #32]	; (8018b8c <USBD_FS_ConfigStrDescriptor+0x38>)
 8018b6c:	f7fd fba3 	bl	80162b6 <USBD_GetString>
 8018b70:	e004      	b.n	8018b7c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018b72:	683a      	ldr	r2, [r7, #0]
 8018b74:	4904      	ldr	r1, [pc, #16]	; (8018b88 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018b76:	4805      	ldr	r0, [pc, #20]	; (8018b8c <USBD_FS_ConfigStrDescriptor+0x38>)
 8018b78:	f7fd fb9d 	bl	80162b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018b7c:	4b02      	ldr	r3, [pc, #8]	; (8018b88 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8018b7e:	4618      	mov	r0, r3
 8018b80:	3708      	adds	r7, #8
 8018b82:	46bd      	mov	sp, r7
 8018b84:	bd80      	pop	{r7, pc}
 8018b86:	bf00      	nop
 8018b88:	24001ea4 	.word	0x24001ea4
 8018b8c:	0801af34 	.word	0x0801af34

08018b90 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018b90:	b580      	push	{r7, lr}
 8018b92:	b082      	sub	sp, #8
 8018b94:	af00      	add	r7, sp, #0
 8018b96:	4603      	mov	r3, r0
 8018b98:	6039      	str	r1, [r7, #0]
 8018b9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018b9c:	79fb      	ldrb	r3, [r7, #7]
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	d105      	bne.n	8018bae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018ba2:	683a      	ldr	r2, [r7, #0]
 8018ba4:	4907      	ldr	r1, [pc, #28]	; (8018bc4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018ba6:	4808      	ldr	r0, [pc, #32]	; (8018bc8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018ba8:	f7fd fb85 	bl	80162b6 <USBD_GetString>
 8018bac:	e004      	b.n	8018bb8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018bae:	683a      	ldr	r2, [r7, #0]
 8018bb0:	4904      	ldr	r1, [pc, #16]	; (8018bc4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018bb2:	4805      	ldr	r0, [pc, #20]	; (8018bc8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018bb4:	f7fd fb7f 	bl	80162b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018bb8:	4b02      	ldr	r3, [pc, #8]	; (8018bc4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8018bba:	4618      	mov	r0, r3
 8018bbc:	3708      	adds	r7, #8
 8018bbe:	46bd      	mov	sp, r7
 8018bc0:	bd80      	pop	{r7, pc}
 8018bc2:	bf00      	nop
 8018bc4:	24001ea4 	.word	0x24001ea4
 8018bc8:	0801af40 	.word	0x0801af40

08018bcc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018bcc:	b580      	push	{r7, lr}
 8018bce:	b084      	sub	sp, #16
 8018bd0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018bd2:	4b0f      	ldr	r3, [pc, #60]	; (8018c10 <Get_SerialNum+0x44>)
 8018bd4:	681b      	ldr	r3, [r3, #0]
 8018bd6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018bd8:	4b0e      	ldr	r3, [pc, #56]	; (8018c14 <Get_SerialNum+0x48>)
 8018bda:	681b      	ldr	r3, [r3, #0]
 8018bdc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018bde:	4b0e      	ldr	r3, [pc, #56]	; (8018c18 <Get_SerialNum+0x4c>)
 8018be0:	681b      	ldr	r3, [r3, #0]
 8018be2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018be4:	68fa      	ldr	r2, [r7, #12]
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	4413      	add	r3, r2
 8018bea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018bec:	68fb      	ldr	r3, [r7, #12]
 8018bee:	2b00      	cmp	r3, #0
 8018bf0:	d009      	beq.n	8018c06 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018bf2:	2208      	movs	r2, #8
 8018bf4:	4909      	ldr	r1, [pc, #36]	; (8018c1c <Get_SerialNum+0x50>)
 8018bf6:	68f8      	ldr	r0, [r7, #12]
 8018bf8:	f000 f814 	bl	8018c24 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018bfc:	2204      	movs	r2, #4
 8018bfe:	4908      	ldr	r1, [pc, #32]	; (8018c20 <Get_SerialNum+0x54>)
 8018c00:	68b8      	ldr	r0, [r7, #8]
 8018c02:	f000 f80f 	bl	8018c24 <IntToUnicode>
  }
}
 8018c06:	bf00      	nop
 8018c08:	3710      	adds	r7, #16
 8018c0a:	46bd      	mov	sp, r7
 8018c0c:	bd80      	pop	{r7, pc}
 8018c0e:	bf00      	nop
 8018c10:	1ff1e800 	.word	0x1ff1e800
 8018c14:	1ff1e804 	.word	0x1ff1e804
 8018c18:	1ff1e808 	.word	0x1ff1e808
 8018c1c:	2400013e 	.word	0x2400013e
 8018c20:	2400014e 	.word	0x2400014e

08018c24 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018c24:	b480      	push	{r7}
 8018c26:	b087      	sub	sp, #28
 8018c28:	af00      	add	r7, sp, #0
 8018c2a:	60f8      	str	r0, [r7, #12]
 8018c2c:	60b9      	str	r1, [r7, #8]
 8018c2e:	4613      	mov	r3, r2
 8018c30:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8018c32:	2300      	movs	r3, #0
 8018c34:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8018c36:	2300      	movs	r3, #0
 8018c38:	75fb      	strb	r3, [r7, #23]
 8018c3a:	e027      	b.n	8018c8c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018c3c:	68fb      	ldr	r3, [r7, #12]
 8018c3e:	0f1b      	lsrs	r3, r3, #28
 8018c40:	2b09      	cmp	r3, #9
 8018c42:	d80b      	bhi.n	8018c5c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018c44:	68fb      	ldr	r3, [r7, #12]
 8018c46:	0f1b      	lsrs	r3, r3, #28
 8018c48:	b2da      	uxtb	r2, r3
 8018c4a:	7dfb      	ldrb	r3, [r7, #23]
 8018c4c:	005b      	lsls	r3, r3, #1
 8018c4e:	4619      	mov	r1, r3
 8018c50:	68bb      	ldr	r3, [r7, #8]
 8018c52:	440b      	add	r3, r1
 8018c54:	3230      	adds	r2, #48	; 0x30
 8018c56:	b2d2      	uxtb	r2, r2
 8018c58:	701a      	strb	r2, [r3, #0]
 8018c5a:	e00a      	b.n	8018c72 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018c5c:	68fb      	ldr	r3, [r7, #12]
 8018c5e:	0f1b      	lsrs	r3, r3, #28
 8018c60:	b2da      	uxtb	r2, r3
 8018c62:	7dfb      	ldrb	r3, [r7, #23]
 8018c64:	005b      	lsls	r3, r3, #1
 8018c66:	4619      	mov	r1, r3
 8018c68:	68bb      	ldr	r3, [r7, #8]
 8018c6a:	440b      	add	r3, r1
 8018c6c:	3237      	adds	r2, #55	; 0x37
 8018c6e:	b2d2      	uxtb	r2, r2
 8018c70:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018c72:	68fb      	ldr	r3, [r7, #12]
 8018c74:	011b      	lsls	r3, r3, #4
 8018c76:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018c78:	7dfb      	ldrb	r3, [r7, #23]
 8018c7a:	005b      	lsls	r3, r3, #1
 8018c7c:	3301      	adds	r3, #1
 8018c7e:	68ba      	ldr	r2, [r7, #8]
 8018c80:	4413      	add	r3, r2
 8018c82:	2200      	movs	r2, #0
 8018c84:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018c86:	7dfb      	ldrb	r3, [r7, #23]
 8018c88:	3301      	adds	r3, #1
 8018c8a:	75fb      	strb	r3, [r7, #23]
 8018c8c:	7dfa      	ldrb	r2, [r7, #23]
 8018c8e:	79fb      	ldrb	r3, [r7, #7]
 8018c90:	429a      	cmp	r2, r3
 8018c92:	d3d3      	bcc.n	8018c3c <IntToUnicode+0x18>
  }
}
 8018c94:	bf00      	nop
 8018c96:	371c      	adds	r7, #28
 8018c98:	46bd      	mov	sp, r7
 8018c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c9e:	4770      	bx	lr

08018ca0 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8018ca0:	b480      	push	{r7}
 8018ca2:	b083      	sub	sp, #12
 8018ca4:	af00      	add	r7, sp, #0
 8018ca6:	4603      	mov	r3, r0
 8018ca8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8018caa:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8018cac:	4618      	mov	r0, r3
 8018cae:	370c      	adds	r7, #12
 8018cb0:	46bd      	mov	sp, r7
 8018cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cb6:	4770      	bx	lr

08018cb8 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8018cb8:	b580      	push	{r7, lr}
 8018cba:	b08e      	sub	sp, #56	; 0x38
 8018cbc:	af00      	add	r7, sp, #0
 8018cbe:	4603      	mov	r3, r0
 8018cc0:	60b9      	str	r1, [r7, #8]
 8018cc2:	607a      	str	r2, [r7, #4]
 8018cc4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 8018cc6:	23ff      	movs	r3, #255	; 0xff
 8018cc8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd1, &info);
 8018ccc:	f107 0310 	add.w	r3, r7, #16
 8018cd0:	4619      	mov	r1, r3
 8018cd2:	480a      	ldr	r0, [pc, #40]	; (8018cfc <STORAGE_GetCapacity_FS+0x44>)
 8018cd4:	f7f5 f89a 	bl	800de0c <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 8018cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018cda:	1e5a      	subs	r2, r3, #1
 8018cdc:	68bb      	ldr	r3, [r7, #8]
 8018cde:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 8018ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ce2:	b29a      	uxth	r2, r3
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 8018ce8:	2300      	movs	r3, #0
 8018cea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 8018cee:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 8018cf2:	4618      	mov	r0, r3
 8018cf4:	3738      	adds	r7, #56	; 0x38
 8018cf6:	46bd      	mov	sp, r7
 8018cf8:	bd80      	pop	{r7, pc}
 8018cfa:	bf00      	nop
 8018cfc:	24001470 	.word	0x24001470

08018d00 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8018d00:	b480      	push	{r7}
 8018d02:	b083      	sub	sp, #12
 8018d04:	af00      	add	r7, sp, #0
 8018d06:	4603      	mov	r3, r0
 8018d08:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8018d0a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8018d0c:	4618      	mov	r0, r3
 8018d0e:	370c      	adds	r7, #12
 8018d10:	46bd      	mov	sp, r7
 8018d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d16:	4770      	bx	lr

08018d18 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8018d18:	b480      	push	{r7}
 8018d1a:	b083      	sub	sp, #12
 8018d1c:	af00      	add	r7, sp, #0
 8018d1e:	4603      	mov	r3, r0
 8018d20:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8018d22:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018d24:	4618      	mov	r0, r3
 8018d26:	370c      	adds	r7, #12
 8018d28:	46bd      	mov	sp, r7
 8018d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d2e:	4770      	bx	lr

08018d30 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8018d30:	b580      	push	{r7, lr}
 8018d32:	b088      	sub	sp, #32
 8018d34:	af02      	add	r7, sp, #8
 8018d36:	60b9      	str	r1, [r7, #8]
 8018d38:	607a      	str	r2, [r7, #4]
 8018d3a:	461a      	mov	r2, r3
 8018d3c:	4603      	mov	r3, r0
 8018d3e:	73fb      	strb	r3, [r7, #15]
 8018d40:	4613      	mov	r3, r2
 8018d42:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	int8_t ret = -1;
 8018d44:	23ff      	movs	r3, #255	; 0xff
 8018d46:	75fb      	strb	r3, [r7, #23]

	HAL_SD_ReadBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8018d48:	89ba      	ldrh	r2, [r7, #12]
 8018d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8018d4e:	9300      	str	r3, [sp, #0]
 8018d50:	4613      	mov	r3, r2
 8018d52:	687a      	ldr	r2, [r7, #4]
 8018d54:	68b9      	ldr	r1, [r7, #8]
 8018d56:	4809      	ldr	r0, [pc, #36]	; (8018d7c <STORAGE_Read_FS+0x4c>)
 8018d58:	f7f3 ffca 	bl	800ccf0 <HAL_SD_ReadBlocks>

	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8018d5c:	bf00      	nop
 8018d5e:	4807      	ldr	r0, [pc, #28]	; (8018d7c <STORAGE_Read_FS+0x4c>)
 8018d60:	f7f5 f92a 	bl	800dfb8 <HAL_SD_GetCardState>
 8018d64:	4603      	mov	r3, r0
 8018d66:	2b04      	cmp	r3, #4
 8018d68:	d1f9      	bne.n	8018d5e <STORAGE_Read_FS+0x2e>
	ret = 0;
 8018d6a:	2300      	movs	r3, #0
 8018d6c:	75fb      	strb	r3, [r7, #23]
	return ret;
 8018d6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 8018d72:	4618      	mov	r0, r3
 8018d74:	3718      	adds	r7, #24
 8018d76:	46bd      	mov	sp, r7
 8018d78:	bd80      	pop	{r7, pc}
 8018d7a:	bf00      	nop
 8018d7c:	24001470 	.word	0x24001470

08018d80 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8018d80:	b580      	push	{r7, lr}
 8018d82:	b088      	sub	sp, #32
 8018d84:	af02      	add	r7, sp, #8
 8018d86:	60b9      	str	r1, [r7, #8]
 8018d88:	607a      	str	r2, [r7, #4]
 8018d8a:	461a      	mov	r2, r3
 8018d8c:	4603      	mov	r3, r0
 8018d8e:	73fb      	strb	r3, [r7, #15]
 8018d90:	4613      	mov	r3, r2
 8018d92:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	int8_t ret = -1;
 8018d94:	23ff      	movs	r3, #255	; 0xff
 8018d96:	75fb      	strb	r3, [r7, #23]

	HAL_SD_WriteBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8018d98:	89ba      	ldrh	r2, [r7, #12]
 8018d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8018d9e:	9300      	str	r3, [sp, #0]
 8018da0:	4613      	mov	r3, r2
 8018da2:	687a      	ldr	r2, [r7, #4]
 8018da4:	68b9      	ldr	r1, [r7, #8]
 8018da6:	4809      	ldr	r0, [pc, #36]	; (8018dcc <STORAGE_Write_FS+0x4c>)
 8018da8:	f7f4 f92c 	bl	800d004 <HAL_SD_WriteBlocks>


	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8018dac:	bf00      	nop
 8018dae:	4807      	ldr	r0, [pc, #28]	; (8018dcc <STORAGE_Write_FS+0x4c>)
 8018db0:	f7f5 f902 	bl	800dfb8 <HAL_SD_GetCardState>
 8018db4:	4603      	mov	r3, r0
 8018db6:	2b04      	cmp	r3, #4
 8018db8:	d1f9      	bne.n	8018dae <STORAGE_Write_FS+0x2e>
	ret = 0;
 8018dba:	2300      	movs	r3, #0
 8018dbc:	75fb      	strb	r3, [r7, #23]
	return ret;
 8018dbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 8018dc2:	4618      	mov	r0, r3
 8018dc4:	3718      	adds	r7, #24
 8018dc6:	46bd      	mov	sp, r7
 8018dc8:	bd80      	pop	{r7, pc}
 8018dca:	bf00      	nop
 8018dcc:	24001470 	.word	0x24001470

08018dd0 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8018dd0:	b480      	push	{r7}
 8018dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8018dd4:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8018dd6:	4618      	mov	r0, r3
 8018dd8:	46bd      	mov	sp, r7
 8018dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dde:	4770      	bx	lr

08018de0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018de0:	b580      	push	{r7, lr}
 8018de2:	b08a      	sub	sp, #40	; 0x28
 8018de4:	af00      	add	r7, sp, #0
 8018de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018de8:	f107 0314 	add.w	r3, r7, #20
 8018dec:	2200      	movs	r2, #0
 8018dee:	601a      	str	r2, [r3, #0]
 8018df0:	605a      	str	r2, [r3, #4]
 8018df2:	609a      	str	r2, [r3, #8]
 8018df4:	60da      	str	r2, [r3, #12]
 8018df6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	681b      	ldr	r3, [r3, #0]
 8018dfc:	4a1e      	ldr	r2, [pc, #120]	; (8018e78 <HAL_PCD_MspInit+0x98>)
 8018dfe:	4293      	cmp	r3, r2
 8018e00:	d136      	bne.n	8018e70 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018e02:	4b1e      	ldr	r3, [pc, #120]	; (8018e7c <HAL_PCD_MspInit+0x9c>)
 8018e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8018e08:	4a1c      	ldr	r2, [pc, #112]	; (8018e7c <HAL_PCD_MspInit+0x9c>)
 8018e0a:	f043 0301 	orr.w	r3, r3, #1
 8018e0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8018e12:	4b1a      	ldr	r3, [pc, #104]	; (8018e7c <HAL_PCD_MspInit+0x9c>)
 8018e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8018e18:	f003 0301 	and.w	r3, r3, #1
 8018e1c:	613b      	str	r3, [r7, #16]
 8018e1e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8018e20:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8018e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018e26:	2302      	movs	r3, #2
 8018e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018e2a:	2300      	movs	r3, #0
 8018e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018e2e:	2300      	movs	r3, #0
 8018e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8018e32:	230a      	movs	r3, #10
 8018e34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018e36:	f107 0314 	add.w	r3, r7, #20
 8018e3a:	4619      	mov	r1, r3
 8018e3c:	4810      	ldr	r0, [pc, #64]	; (8018e80 <HAL_PCD_MspInit+0xa0>)
 8018e3e:	f7ee ff2f 	bl	8007ca0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8018e42:	4b0e      	ldr	r3, [pc, #56]	; (8018e7c <HAL_PCD_MspInit+0x9c>)
 8018e44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8018e48:	4a0c      	ldr	r2, [pc, #48]	; (8018e7c <HAL_PCD_MspInit+0x9c>)
 8018e4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8018e4e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8018e52:	4b0a      	ldr	r3, [pc, #40]	; (8018e7c <HAL_PCD_MspInit+0x9c>)
 8018e54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8018e58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8018e5c:	60fb      	str	r3, [r7, #12]
 8018e5e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8018e60:	2200      	movs	r2, #0
 8018e62:	2100      	movs	r1, #0
 8018e64:	2065      	movs	r0, #101	; 0x65
 8018e66:	f7eb fcd2 	bl	800480e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018e6a:	2065      	movs	r0, #101	; 0x65
 8018e6c:	f7eb fce9 	bl	8004842 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8018e70:	bf00      	nop
 8018e72:	3728      	adds	r7, #40	; 0x28
 8018e74:	46bd      	mov	sp, r7
 8018e76:	bd80      	pop	{r7, pc}
 8018e78:	40080000 	.word	0x40080000
 8018e7c:	58024400 	.word	0x58024400
 8018e80:	58020000 	.word	0x58020000

08018e84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018e84:	b580      	push	{r7, lr}
 8018e86:	b082      	sub	sp, #8
 8018e88:	af00      	add	r7, sp, #0
 8018e8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8018e98:	4619      	mov	r1, r3
 8018e9a:	4610      	mov	r0, r2
 8018e9c:	f7fc fa89 	bl	80153b2 <USBD_LL_SetupStage>
}
 8018ea0:	bf00      	nop
 8018ea2:	3708      	adds	r7, #8
 8018ea4:	46bd      	mov	sp, r7
 8018ea6:	bd80      	pop	{r7, pc}

08018ea8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018ea8:	b580      	push	{r7, lr}
 8018eaa:	b082      	sub	sp, #8
 8018eac:	af00      	add	r7, sp, #0
 8018eae:	6078      	str	r0, [r7, #4]
 8018eb0:	460b      	mov	r3, r1
 8018eb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8018eba:	78fa      	ldrb	r2, [r7, #3]
 8018ebc:	6879      	ldr	r1, [r7, #4]
 8018ebe:	4613      	mov	r3, r2
 8018ec0:	00db      	lsls	r3, r3, #3
 8018ec2:	1a9b      	subs	r3, r3, r2
 8018ec4:	009b      	lsls	r3, r3, #2
 8018ec6:	440b      	add	r3, r1
 8018ec8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8018ecc:	681a      	ldr	r2, [r3, #0]
 8018ece:	78fb      	ldrb	r3, [r7, #3]
 8018ed0:	4619      	mov	r1, r3
 8018ed2:	f7fc fac1 	bl	8015458 <USBD_LL_DataOutStage>
}
 8018ed6:	bf00      	nop
 8018ed8:	3708      	adds	r7, #8
 8018eda:	46bd      	mov	sp, r7
 8018edc:	bd80      	pop	{r7, pc}

08018ede <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018ede:	b580      	push	{r7, lr}
 8018ee0:	b082      	sub	sp, #8
 8018ee2:	af00      	add	r7, sp, #0
 8018ee4:	6078      	str	r0, [r7, #4]
 8018ee6:	460b      	mov	r3, r1
 8018ee8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018eea:	687b      	ldr	r3, [r7, #4]
 8018eec:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8018ef0:	78fa      	ldrb	r2, [r7, #3]
 8018ef2:	6879      	ldr	r1, [r7, #4]
 8018ef4:	4613      	mov	r3, r2
 8018ef6:	00db      	lsls	r3, r3, #3
 8018ef8:	1a9b      	subs	r3, r3, r2
 8018efa:	009b      	lsls	r3, r3, #2
 8018efc:	440b      	add	r3, r1
 8018efe:	3348      	adds	r3, #72	; 0x48
 8018f00:	681a      	ldr	r2, [r3, #0]
 8018f02:	78fb      	ldrb	r3, [r7, #3]
 8018f04:	4619      	mov	r1, r3
 8018f06:	f7fc fb0a 	bl	801551e <USBD_LL_DataInStage>
}
 8018f0a:	bf00      	nop
 8018f0c:	3708      	adds	r7, #8
 8018f0e:	46bd      	mov	sp, r7
 8018f10:	bd80      	pop	{r7, pc}

08018f12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f12:	b580      	push	{r7, lr}
 8018f14:	b082      	sub	sp, #8
 8018f16:	af00      	add	r7, sp, #0
 8018f18:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018f20:	4618      	mov	r0, r3
 8018f22:	f7fc fc0e 	bl	8015742 <USBD_LL_SOF>
}
 8018f26:	bf00      	nop
 8018f28:	3708      	adds	r7, #8
 8018f2a:	46bd      	mov	sp, r7
 8018f2c:	bd80      	pop	{r7, pc}

08018f2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f2e:	b580      	push	{r7, lr}
 8018f30:	b084      	sub	sp, #16
 8018f32:	af00      	add	r7, sp, #0
 8018f34:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018f36:	2301      	movs	r3, #1
 8018f38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	68db      	ldr	r3, [r3, #12]
 8018f3e:	2b00      	cmp	r3, #0
 8018f40:	d102      	bne.n	8018f48 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8018f42:	2300      	movs	r3, #0
 8018f44:	73fb      	strb	r3, [r7, #15]
 8018f46:	e008      	b.n	8018f5a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	68db      	ldr	r3, [r3, #12]
 8018f4c:	2b02      	cmp	r3, #2
 8018f4e:	d102      	bne.n	8018f56 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8018f50:	2301      	movs	r3, #1
 8018f52:	73fb      	strb	r3, [r7, #15]
 8018f54:	e001      	b.n	8018f5a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8018f56:	f7ea fe5d 	bl	8003c14 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018f60:	7bfa      	ldrb	r2, [r7, #15]
 8018f62:	4611      	mov	r1, r2
 8018f64:	4618      	mov	r0, r3
 8018f66:	f7fc fbb1 	bl	80156cc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018f70:	4618      	mov	r0, r3
 8018f72:	f7fc fb6a 	bl	801564a <USBD_LL_Reset>
}
 8018f76:	bf00      	nop
 8018f78:	3710      	adds	r7, #16
 8018f7a:	46bd      	mov	sp, r7
 8018f7c:	bd80      	pop	{r7, pc}
	...

08018f80 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f80:	b580      	push	{r7, lr}
 8018f82:	b082      	sub	sp, #8
 8018f84:	af00      	add	r7, sp, #0
 8018f86:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018f8e:	4618      	mov	r0, r3
 8018f90:	f7fc fbac 	bl	80156ec <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	681b      	ldr	r3, [r3, #0]
 8018f98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018f9c:	681b      	ldr	r3, [r3, #0]
 8018f9e:	687a      	ldr	r2, [r7, #4]
 8018fa0:	6812      	ldr	r2, [r2, #0]
 8018fa2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8018fa6:	f043 0301 	orr.w	r3, r3, #1
 8018faa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	6a1b      	ldr	r3, [r3, #32]
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	d005      	beq.n	8018fc0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018fb4:	4b04      	ldr	r3, [pc, #16]	; (8018fc8 <HAL_PCD_SuspendCallback+0x48>)
 8018fb6:	691b      	ldr	r3, [r3, #16]
 8018fb8:	4a03      	ldr	r2, [pc, #12]	; (8018fc8 <HAL_PCD_SuspendCallback+0x48>)
 8018fba:	f043 0306 	orr.w	r3, r3, #6
 8018fbe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018fc0:	bf00      	nop
 8018fc2:	3708      	adds	r7, #8
 8018fc4:	46bd      	mov	sp, r7
 8018fc6:	bd80      	pop	{r7, pc}
 8018fc8:	e000ed00 	.word	0xe000ed00

08018fcc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018fcc:	b580      	push	{r7, lr}
 8018fce:	b082      	sub	sp, #8
 8018fd0:	af00      	add	r7, sp, #0
 8018fd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018fda:	4618      	mov	r0, r3
 8018fdc:	f7fc fb9b 	bl	8015716 <USBD_LL_Resume>
}
 8018fe0:	bf00      	nop
 8018fe2:	3708      	adds	r7, #8
 8018fe4:	46bd      	mov	sp, r7
 8018fe6:	bd80      	pop	{r7, pc}

08018fe8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018fe8:	b580      	push	{r7, lr}
 8018fea:	b082      	sub	sp, #8
 8018fec:	af00      	add	r7, sp, #0
 8018fee:	6078      	str	r0, [r7, #4]
 8018ff0:	460b      	mov	r3, r1
 8018ff2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018ffa:	78fa      	ldrb	r2, [r7, #3]
 8018ffc:	4611      	mov	r1, r2
 8018ffe:	4618      	mov	r0, r3
 8019000:	f7fc fbc6 	bl	8015790 <USBD_LL_IsoOUTIncomplete>
}
 8019004:	bf00      	nop
 8019006:	3708      	adds	r7, #8
 8019008:	46bd      	mov	sp, r7
 801900a:	bd80      	pop	{r7, pc}

0801900c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801900c:	b580      	push	{r7, lr}
 801900e:	b082      	sub	sp, #8
 8019010:	af00      	add	r7, sp, #0
 8019012:	6078      	str	r0, [r7, #4]
 8019014:	460b      	mov	r3, r1
 8019016:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019018:	687b      	ldr	r3, [r7, #4]
 801901a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801901e:	78fa      	ldrb	r2, [r7, #3]
 8019020:	4611      	mov	r1, r2
 8019022:	4618      	mov	r0, r3
 8019024:	f7fc fba7 	bl	8015776 <USBD_LL_IsoINIncomplete>
}
 8019028:	bf00      	nop
 801902a:	3708      	adds	r7, #8
 801902c:	46bd      	mov	sp, r7
 801902e:	bd80      	pop	{r7, pc}

08019030 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019030:	b580      	push	{r7, lr}
 8019032:	b082      	sub	sp, #8
 8019034:	af00      	add	r7, sp, #0
 8019036:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8019038:	687b      	ldr	r3, [r7, #4]
 801903a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801903e:	4618      	mov	r0, r3
 8019040:	f7fc fbb3 	bl	80157aa <USBD_LL_DevConnected>
}
 8019044:	bf00      	nop
 8019046:	3708      	adds	r7, #8
 8019048:	46bd      	mov	sp, r7
 801904a:	bd80      	pop	{r7, pc}

0801904c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801904c:	b580      	push	{r7, lr}
 801904e:	b082      	sub	sp, #8
 8019050:	af00      	add	r7, sp, #0
 8019052:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801905a:	4618      	mov	r0, r3
 801905c:	f7fc fbb0 	bl	80157c0 <USBD_LL_DevDisconnected>
}
 8019060:	bf00      	nop
 8019062:	3708      	adds	r7, #8
 8019064:	46bd      	mov	sp, r7
 8019066:	bd80      	pop	{r7, pc}

08019068 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019068:	b580      	push	{r7, lr}
 801906a:	b082      	sub	sp, #8
 801906c:	af00      	add	r7, sp, #0
 801906e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	781b      	ldrb	r3, [r3, #0]
 8019074:	2b00      	cmp	r3, #0
 8019076:	d13e      	bne.n	80190f6 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8019078:	4a21      	ldr	r2, [pc, #132]	; (8019100 <USBD_LL_Init+0x98>)
 801907a:	687b      	ldr	r3, [r7, #4]
 801907c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	4a1f      	ldr	r2, [pc, #124]	; (8019100 <USBD_LL_Init+0x98>)
 8019084:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8019088:	4b1d      	ldr	r3, [pc, #116]	; (8019100 <USBD_LL_Init+0x98>)
 801908a:	4a1e      	ldr	r2, [pc, #120]	; (8019104 <USBD_LL_Init+0x9c>)
 801908c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801908e:	4b1c      	ldr	r3, [pc, #112]	; (8019100 <USBD_LL_Init+0x98>)
 8019090:	2209      	movs	r2, #9
 8019092:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8019094:	4b1a      	ldr	r3, [pc, #104]	; (8019100 <USBD_LL_Init+0x98>)
 8019096:	2202      	movs	r2, #2
 8019098:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801909a:	4b19      	ldr	r3, [pc, #100]	; (8019100 <USBD_LL_Init+0x98>)
 801909c:	2200      	movs	r2, #0
 801909e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80190a0:	4b17      	ldr	r3, [pc, #92]	; (8019100 <USBD_LL_Init+0x98>)
 80190a2:	2202      	movs	r2, #2
 80190a4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80190a6:	4b16      	ldr	r3, [pc, #88]	; (8019100 <USBD_LL_Init+0x98>)
 80190a8:	2200      	movs	r2, #0
 80190aa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80190ac:	4b14      	ldr	r3, [pc, #80]	; (8019100 <USBD_LL_Init+0x98>)
 80190ae:	2200      	movs	r2, #0
 80190b0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80190b2:	4b13      	ldr	r3, [pc, #76]	; (8019100 <USBD_LL_Init+0x98>)
 80190b4:	2200      	movs	r2, #0
 80190b6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80190b8:	4b11      	ldr	r3, [pc, #68]	; (8019100 <USBD_LL_Init+0x98>)
 80190ba:	2200      	movs	r2, #0
 80190bc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80190be:	4b10      	ldr	r3, [pc, #64]	; (8019100 <USBD_LL_Init+0x98>)
 80190c0:	2200      	movs	r2, #0
 80190c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80190c4:	4b0e      	ldr	r3, [pc, #56]	; (8019100 <USBD_LL_Init+0x98>)
 80190c6:	2200      	movs	r2, #0
 80190c8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80190ca:	480d      	ldr	r0, [pc, #52]	; (8019100 <USBD_LL_Init+0x98>)
 80190cc:	f7ef f822 	bl	8008114 <HAL_PCD_Init>
 80190d0:	4603      	mov	r3, r0
 80190d2:	2b00      	cmp	r3, #0
 80190d4:	d001      	beq.n	80190da <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80190d6:	f7ea fd9d 	bl	8003c14 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80190da:	2180      	movs	r1, #128	; 0x80
 80190dc:	4808      	ldr	r0, [pc, #32]	; (8019100 <USBD_LL_Init+0x98>)
 80190de:	f7f0 f9e0 	bl	80094a2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80190e2:	2240      	movs	r2, #64	; 0x40
 80190e4:	2100      	movs	r1, #0
 80190e6:	4806      	ldr	r0, [pc, #24]	; (8019100 <USBD_LL_Init+0x98>)
 80190e8:	f7f0 f994 	bl	8009414 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80190ec:	2280      	movs	r2, #128	; 0x80
 80190ee:	2101      	movs	r1, #1
 80190f0:	4803      	ldr	r0, [pc, #12]	; (8019100 <USBD_LL_Init+0x98>)
 80190f2:	f7f0 f98f 	bl	8009414 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80190f6:	2300      	movs	r3, #0
}
 80190f8:	4618      	mov	r0, r3
 80190fa:	3708      	adds	r7, #8
 80190fc:	46bd      	mov	sp, r7
 80190fe:	bd80      	pop	{r7, pc}
 8019100:	240020a4 	.word	0x240020a4
 8019104:	40080000 	.word	0x40080000

08019108 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8019108:	b580      	push	{r7, lr}
 801910a:	b084      	sub	sp, #16
 801910c:	af00      	add	r7, sp, #0
 801910e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019110:	2300      	movs	r3, #0
 8019112:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019114:	2300      	movs	r3, #0
 8019116:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8019118:	687b      	ldr	r3, [r7, #4]
 801911a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801911e:	4618      	mov	r0, r3
 8019120:	f7ef f91c 	bl	800835c <HAL_PCD_Start>
 8019124:	4603      	mov	r3, r0
 8019126:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019128:	7bfb      	ldrb	r3, [r7, #15]
 801912a:	4618      	mov	r0, r3
 801912c:	f000 f94a 	bl	80193c4 <USBD_Get_USB_Status>
 8019130:	4603      	mov	r3, r0
 8019132:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019134:	7bbb      	ldrb	r3, [r7, #14]
}
 8019136:	4618      	mov	r0, r3
 8019138:	3710      	adds	r7, #16
 801913a:	46bd      	mov	sp, r7
 801913c:	bd80      	pop	{r7, pc}

0801913e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801913e:	b580      	push	{r7, lr}
 8019140:	b084      	sub	sp, #16
 8019142:	af00      	add	r7, sp, #0
 8019144:	6078      	str	r0, [r7, #4]
 8019146:	4608      	mov	r0, r1
 8019148:	4611      	mov	r1, r2
 801914a:	461a      	mov	r2, r3
 801914c:	4603      	mov	r3, r0
 801914e:	70fb      	strb	r3, [r7, #3]
 8019150:	460b      	mov	r3, r1
 8019152:	70bb      	strb	r3, [r7, #2]
 8019154:	4613      	mov	r3, r2
 8019156:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019158:	2300      	movs	r3, #0
 801915a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801915c:	2300      	movs	r3, #0
 801915e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019166:	78bb      	ldrb	r3, [r7, #2]
 8019168:	883a      	ldrh	r2, [r7, #0]
 801916a:	78f9      	ldrb	r1, [r7, #3]
 801916c:	f7ef fd2d 	bl	8008bca <HAL_PCD_EP_Open>
 8019170:	4603      	mov	r3, r0
 8019172:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019174:	7bfb      	ldrb	r3, [r7, #15]
 8019176:	4618      	mov	r0, r3
 8019178:	f000 f924 	bl	80193c4 <USBD_Get_USB_Status>
 801917c:	4603      	mov	r3, r0
 801917e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019180:	7bbb      	ldrb	r3, [r7, #14]
}
 8019182:	4618      	mov	r0, r3
 8019184:	3710      	adds	r7, #16
 8019186:	46bd      	mov	sp, r7
 8019188:	bd80      	pop	{r7, pc}

0801918a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801918a:	b580      	push	{r7, lr}
 801918c:	b084      	sub	sp, #16
 801918e:	af00      	add	r7, sp, #0
 8019190:	6078      	str	r0, [r7, #4]
 8019192:	460b      	mov	r3, r1
 8019194:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019196:	2300      	movs	r3, #0
 8019198:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801919a:	2300      	movs	r3, #0
 801919c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801919e:	687b      	ldr	r3, [r7, #4]
 80191a0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80191a4:	78fa      	ldrb	r2, [r7, #3]
 80191a6:	4611      	mov	r1, r2
 80191a8:	4618      	mov	r0, r3
 80191aa:	f7ef fd76 	bl	8008c9a <HAL_PCD_EP_Close>
 80191ae:	4603      	mov	r3, r0
 80191b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80191b2:	7bfb      	ldrb	r3, [r7, #15]
 80191b4:	4618      	mov	r0, r3
 80191b6:	f000 f905 	bl	80193c4 <USBD_Get_USB_Status>
 80191ba:	4603      	mov	r3, r0
 80191bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80191be:	7bbb      	ldrb	r3, [r7, #14]
}
 80191c0:	4618      	mov	r0, r3
 80191c2:	3710      	adds	r7, #16
 80191c4:	46bd      	mov	sp, r7
 80191c6:	bd80      	pop	{r7, pc}

080191c8 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80191c8:	b580      	push	{r7, lr}
 80191ca:	b084      	sub	sp, #16
 80191cc:	af00      	add	r7, sp, #0
 80191ce:	6078      	str	r0, [r7, #4]
 80191d0:	460b      	mov	r3, r1
 80191d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80191d4:	2300      	movs	r3, #0
 80191d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80191d8:	2300      	movs	r3, #0
 80191da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80191dc:	687b      	ldr	r3, [r7, #4]
 80191de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80191e2:	78fa      	ldrb	r2, [r7, #3]
 80191e4:	4611      	mov	r1, r2
 80191e6:	4618      	mov	r0, r3
 80191e8:	f7ef ff08 	bl	8008ffc <HAL_PCD_EP_Flush>
 80191ec:	4603      	mov	r3, r0
 80191ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80191f0:	7bfb      	ldrb	r3, [r7, #15]
 80191f2:	4618      	mov	r0, r3
 80191f4:	f000 f8e6 	bl	80193c4 <USBD_Get_USB_Status>
 80191f8:	4603      	mov	r3, r0
 80191fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80191fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80191fe:	4618      	mov	r0, r3
 8019200:	3710      	adds	r7, #16
 8019202:	46bd      	mov	sp, r7
 8019204:	bd80      	pop	{r7, pc}

08019206 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019206:	b580      	push	{r7, lr}
 8019208:	b084      	sub	sp, #16
 801920a:	af00      	add	r7, sp, #0
 801920c:	6078      	str	r0, [r7, #4]
 801920e:	460b      	mov	r3, r1
 8019210:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019212:	2300      	movs	r3, #0
 8019214:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019216:	2300      	movs	r3, #0
 8019218:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019220:	78fa      	ldrb	r2, [r7, #3]
 8019222:	4611      	mov	r1, r2
 8019224:	4618      	mov	r0, r3
 8019226:	f7ef fe2f 	bl	8008e88 <HAL_PCD_EP_SetStall>
 801922a:	4603      	mov	r3, r0
 801922c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801922e:	7bfb      	ldrb	r3, [r7, #15]
 8019230:	4618      	mov	r0, r3
 8019232:	f000 f8c7 	bl	80193c4 <USBD_Get_USB_Status>
 8019236:	4603      	mov	r3, r0
 8019238:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801923a:	7bbb      	ldrb	r3, [r7, #14]
}
 801923c:	4618      	mov	r0, r3
 801923e:	3710      	adds	r7, #16
 8019240:	46bd      	mov	sp, r7
 8019242:	bd80      	pop	{r7, pc}

08019244 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019244:	b580      	push	{r7, lr}
 8019246:	b084      	sub	sp, #16
 8019248:	af00      	add	r7, sp, #0
 801924a:	6078      	str	r0, [r7, #4]
 801924c:	460b      	mov	r3, r1
 801924e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019250:	2300      	movs	r3, #0
 8019252:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019254:	2300      	movs	r3, #0
 8019256:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8019258:	687b      	ldr	r3, [r7, #4]
 801925a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801925e:	78fa      	ldrb	r2, [r7, #3]
 8019260:	4611      	mov	r1, r2
 8019262:	4618      	mov	r0, r3
 8019264:	f7ef fe74 	bl	8008f50 <HAL_PCD_EP_ClrStall>
 8019268:	4603      	mov	r3, r0
 801926a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801926c:	7bfb      	ldrb	r3, [r7, #15]
 801926e:	4618      	mov	r0, r3
 8019270:	f000 f8a8 	bl	80193c4 <USBD_Get_USB_Status>
 8019274:	4603      	mov	r3, r0
 8019276:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019278:	7bbb      	ldrb	r3, [r7, #14]
}
 801927a:	4618      	mov	r0, r3
 801927c:	3710      	adds	r7, #16
 801927e:	46bd      	mov	sp, r7
 8019280:	bd80      	pop	{r7, pc}

08019282 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019282:	b480      	push	{r7}
 8019284:	b085      	sub	sp, #20
 8019286:	af00      	add	r7, sp, #0
 8019288:	6078      	str	r0, [r7, #4]
 801928a:	460b      	mov	r3, r1
 801928c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019294:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8019296:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801929a:	2b00      	cmp	r3, #0
 801929c:	da0b      	bge.n	80192b6 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801929e:	78fb      	ldrb	r3, [r7, #3]
 80192a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80192a4:	68f9      	ldr	r1, [r7, #12]
 80192a6:	4613      	mov	r3, r2
 80192a8:	00db      	lsls	r3, r3, #3
 80192aa:	1a9b      	subs	r3, r3, r2
 80192ac:	009b      	lsls	r3, r3, #2
 80192ae:	440b      	add	r3, r1
 80192b0:	333e      	adds	r3, #62	; 0x3e
 80192b2:	781b      	ldrb	r3, [r3, #0]
 80192b4:	e00b      	b.n	80192ce <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80192b6:	78fb      	ldrb	r3, [r7, #3]
 80192b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80192bc:	68f9      	ldr	r1, [r7, #12]
 80192be:	4613      	mov	r3, r2
 80192c0:	00db      	lsls	r3, r3, #3
 80192c2:	1a9b      	subs	r3, r3, r2
 80192c4:	009b      	lsls	r3, r3, #2
 80192c6:	440b      	add	r3, r1
 80192c8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80192cc:	781b      	ldrb	r3, [r3, #0]
  }
}
 80192ce:	4618      	mov	r0, r3
 80192d0:	3714      	adds	r7, #20
 80192d2:	46bd      	mov	sp, r7
 80192d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192d8:	4770      	bx	lr

080192da <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80192da:	b580      	push	{r7, lr}
 80192dc:	b084      	sub	sp, #16
 80192de:	af00      	add	r7, sp, #0
 80192e0:	6078      	str	r0, [r7, #4]
 80192e2:	460b      	mov	r3, r1
 80192e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80192e6:	2300      	movs	r3, #0
 80192e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80192ea:	2300      	movs	r3, #0
 80192ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80192f4:	78fa      	ldrb	r2, [r7, #3]
 80192f6:	4611      	mov	r1, r2
 80192f8:	4618      	mov	r0, r3
 80192fa:	f7ef fc41 	bl	8008b80 <HAL_PCD_SetAddress>
 80192fe:	4603      	mov	r3, r0
 8019300:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019302:	7bfb      	ldrb	r3, [r7, #15]
 8019304:	4618      	mov	r0, r3
 8019306:	f000 f85d 	bl	80193c4 <USBD_Get_USB_Status>
 801930a:	4603      	mov	r3, r0
 801930c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801930e:	7bbb      	ldrb	r3, [r7, #14]
}
 8019310:	4618      	mov	r0, r3
 8019312:	3710      	adds	r7, #16
 8019314:	46bd      	mov	sp, r7
 8019316:	bd80      	pop	{r7, pc}

08019318 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019318:	b580      	push	{r7, lr}
 801931a:	b086      	sub	sp, #24
 801931c:	af00      	add	r7, sp, #0
 801931e:	60f8      	str	r0, [r7, #12]
 8019320:	607a      	str	r2, [r7, #4]
 8019322:	603b      	str	r3, [r7, #0]
 8019324:	460b      	mov	r3, r1
 8019326:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019328:	2300      	movs	r3, #0
 801932a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801932c:	2300      	movs	r3, #0
 801932e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8019330:	68fb      	ldr	r3, [r7, #12]
 8019332:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019336:	7af9      	ldrb	r1, [r7, #11]
 8019338:	683b      	ldr	r3, [r7, #0]
 801933a:	687a      	ldr	r2, [r7, #4]
 801933c:	f7ef fd5a 	bl	8008df4 <HAL_PCD_EP_Transmit>
 8019340:	4603      	mov	r3, r0
 8019342:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019344:	7dfb      	ldrb	r3, [r7, #23]
 8019346:	4618      	mov	r0, r3
 8019348:	f000 f83c 	bl	80193c4 <USBD_Get_USB_Status>
 801934c:	4603      	mov	r3, r0
 801934e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019350:	7dbb      	ldrb	r3, [r7, #22]
}
 8019352:	4618      	mov	r0, r3
 8019354:	3718      	adds	r7, #24
 8019356:	46bd      	mov	sp, r7
 8019358:	bd80      	pop	{r7, pc}

0801935a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801935a:	b580      	push	{r7, lr}
 801935c:	b086      	sub	sp, #24
 801935e:	af00      	add	r7, sp, #0
 8019360:	60f8      	str	r0, [r7, #12]
 8019362:	607a      	str	r2, [r7, #4]
 8019364:	603b      	str	r3, [r7, #0]
 8019366:	460b      	mov	r3, r1
 8019368:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801936a:	2300      	movs	r3, #0
 801936c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801936e:	2300      	movs	r3, #0
 8019370:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019372:	68fb      	ldr	r3, [r7, #12]
 8019374:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019378:	7af9      	ldrb	r1, [r7, #11]
 801937a:	683b      	ldr	r3, [r7, #0]
 801937c:	687a      	ldr	r2, [r7, #4]
 801937e:	f7ef fcd6 	bl	8008d2e <HAL_PCD_EP_Receive>
 8019382:	4603      	mov	r3, r0
 8019384:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019386:	7dfb      	ldrb	r3, [r7, #23]
 8019388:	4618      	mov	r0, r3
 801938a:	f000 f81b 	bl	80193c4 <USBD_Get_USB_Status>
 801938e:	4603      	mov	r3, r0
 8019390:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019392:	7dbb      	ldrb	r3, [r7, #22]
}
 8019394:	4618      	mov	r0, r3
 8019396:	3718      	adds	r7, #24
 8019398:	46bd      	mov	sp, r7
 801939a:	bd80      	pop	{r7, pc}

0801939c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801939c:	b580      	push	{r7, lr}
 801939e:	b082      	sub	sp, #8
 80193a0:	af00      	add	r7, sp, #0
 80193a2:	6078      	str	r0, [r7, #4]
 80193a4:	460b      	mov	r3, r1
 80193a6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80193ae:	78fa      	ldrb	r2, [r7, #3]
 80193b0:	4611      	mov	r1, r2
 80193b2:	4618      	mov	r0, r3
 80193b4:	f7ef fd06 	bl	8008dc4 <HAL_PCD_EP_GetRxCount>
 80193b8:	4603      	mov	r3, r0
}
 80193ba:	4618      	mov	r0, r3
 80193bc:	3708      	adds	r7, #8
 80193be:	46bd      	mov	sp, r7
 80193c0:	bd80      	pop	{r7, pc}
	...

080193c4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80193c4:	b480      	push	{r7}
 80193c6:	b085      	sub	sp, #20
 80193c8:	af00      	add	r7, sp, #0
 80193ca:	4603      	mov	r3, r0
 80193cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80193ce:	2300      	movs	r3, #0
 80193d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80193d2:	79fb      	ldrb	r3, [r7, #7]
 80193d4:	2b03      	cmp	r3, #3
 80193d6:	d817      	bhi.n	8019408 <USBD_Get_USB_Status+0x44>
 80193d8:	a201      	add	r2, pc, #4	; (adr r2, 80193e0 <USBD_Get_USB_Status+0x1c>)
 80193da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80193de:	bf00      	nop
 80193e0:	080193f1 	.word	0x080193f1
 80193e4:	080193f7 	.word	0x080193f7
 80193e8:	080193fd 	.word	0x080193fd
 80193ec:	08019403 	.word	0x08019403
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80193f0:	2300      	movs	r3, #0
 80193f2:	73fb      	strb	r3, [r7, #15]
    break;
 80193f4:	e00b      	b.n	801940e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80193f6:	2303      	movs	r3, #3
 80193f8:	73fb      	strb	r3, [r7, #15]
    break;
 80193fa:	e008      	b.n	801940e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80193fc:	2301      	movs	r3, #1
 80193fe:	73fb      	strb	r3, [r7, #15]
    break;
 8019400:	e005      	b.n	801940e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019402:	2303      	movs	r3, #3
 8019404:	73fb      	strb	r3, [r7, #15]
    break;
 8019406:	e002      	b.n	801940e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8019408:	2303      	movs	r3, #3
 801940a:	73fb      	strb	r3, [r7, #15]
    break;
 801940c:	bf00      	nop
  }
  return usb_status;
 801940e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019410:	4618      	mov	r0, r3
 8019412:	3714      	adds	r7, #20
 8019414:	46bd      	mov	sp, r7
 8019416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801941a:	4770      	bx	lr

0801941c <__errno>:
 801941c:	4b01      	ldr	r3, [pc, #4]	; (8019424 <__errno+0x8>)
 801941e:	6818      	ldr	r0, [r3, #0]
 8019420:	4770      	bx	lr
 8019422:	bf00      	nop
 8019424:	24000178 	.word	0x24000178

08019428 <__libc_init_array>:
 8019428:	b570      	push	{r4, r5, r6, lr}
 801942a:	4e0d      	ldr	r6, [pc, #52]	; (8019460 <__libc_init_array+0x38>)
 801942c:	4c0d      	ldr	r4, [pc, #52]	; (8019464 <__libc_init_array+0x3c>)
 801942e:	1ba4      	subs	r4, r4, r6
 8019430:	10a4      	asrs	r4, r4, #2
 8019432:	2500      	movs	r5, #0
 8019434:	42a5      	cmp	r5, r4
 8019436:	d109      	bne.n	801944c <__libc_init_array+0x24>
 8019438:	4e0b      	ldr	r6, [pc, #44]	; (8019468 <__libc_init_array+0x40>)
 801943a:	4c0c      	ldr	r4, [pc, #48]	; (801946c <__libc_init_array+0x44>)
 801943c:	f001 f97a 	bl	801a734 <_init>
 8019440:	1ba4      	subs	r4, r4, r6
 8019442:	10a4      	asrs	r4, r4, #2
 8019444:	2500      	movs	r5, #0
 8019446:	42a5      	cmp	r5, r4
 8019448:	d105      	bne.n	8019456 <__libc_init_array+0x2e>
 801944a:	bd70      	pop	{r4, r5, r6, pc}
 801944c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8019450:	4798      	blx	r3
 8019452:	3501      	adds	r5, #1
 8019454:	e7ee      	b.n	8019434 <__libc_init_array+0xc>
 8019456:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801945a:	4798      	blx	r3
 801945c:	3501      	adds	r5, #1
 801945e:	e7f2      	b.n	8019446 <__libc_init_array+0x1e>
 8019460:	0801b0e8 	.word	0x0801b0e8
 8019464:	0801b0e8 	.word	0x0801b0e8
 8019468:	0801b0e8 	.word	0x0801b0e8
 801946c:	0801b0ec 	.word	0x0801b0ec

08019470 <malloc>:
 8019470:	4b02      	ldr	r3, [pc, #8]	; (801947c <malloc+0xc>)
 8019472:	4601      	mov	r1, r0
 8019474:	6818      	ldr	r0, [r3, #0]
 8019476:	f000 b86d 	b.w	8019554 <_malloc_r>
 801947a:	bf00      	nop
 801947c:	24000178 	.word	0x24000178

08019480 <free>:
 8019480:	4b02      	ldr	r3, [pc, #8]	; (801948c <free+0xc>)
 8019482:	4601      	mov	r1, r0
 8019484:	6818      	ldr	r0, [r3, #0]
 8019486:	f000 b817 	b.w	80194b8 <_free_r>
 801948a:	bf00      	nop
 801948c:	24000178 	.word	0x24000178

08019490 <memcpy>:
 8019490:	b510      	push	{r4, lr}
 8019492:	1e43      	subs	r3, r0, #1
 8019494:	440a      	add	r2, r1
 8019496:	4291      	cmp	r1, r2
 8019498:	d100      	bne.n	801949c <memcpy+0xc>
 801949a:	bd10      	pop	{r4, pc}
 801949c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80194a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80194a4:	e7f7      	b.n	8019496 <memcpy+0x6>

080194a6 <memset>:
 80194a6:	4402      	add	r2, r0
 80194a8:	4603      	mov	r3, r0
 80194aa:	4293      	cmp	r3, r2
 80194ac:	d100      	bne.n	80194b0 <memset+0xa>
 80194ae:	4770      	bx	lr
 80194b0:	f803 1b01 	strb.w	r1, [r3], #1
 80194b4:	e7f9      	b.n	80194aa <memset+0x4>
	...

080194b8 <_free_r>:
 80194b8:	b538      	push	{r3, r4, r5, lr}
 80194ba:	4605      	mov	r5, r0
 80194bc:	2900      	cmp	r1, #0
 80194be:	d045      	beq.n	801954c <_free_r+0x94>
 80194c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80194c4:	1f0c      	subs	r4, r1, #4
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	bfb8      	it	lt
 80194ca:	18e4      	addlt	r4, r4, r3
 80194cc:	f000 fc22 	bl	8019d14 <__malloc_lock>
 80194d0:	4a1f      	ldr	r2, [pc, #124]	; (8019550 <_free_r+0x98>)
 80194d2:	6813      	ldr	r3, [r2, #0]
 80194d4:	4610      	mov	r0, r2
 80194d6:	b933      	cbnz	r3, 80194e6 <_free_r+0x2e>
 80194d8:	6063      	str	r3, [r4, #4]
 80194da:	6014      	str	r4, [r2, #0]
 80194dc:	4628      	mov	r0, r5
 80194de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80194e2:	f000 bc18 	b.w	8019d16 <__malloc_unlock>
 80194e6:	42a3      	cmp	r3, r4
 80194e8:	d90c      	bls.n	8019504 <_free_r+0x4c>
 80194ea:	6821      	ldr	r1, [r4, #0]
 80194ec:	1862      	adds	r2, r4, r1
 80194ee:	4293      	cmp	r3, r2
 80194f0:	bf04      	itt	eq
 80194f2:	681a      	ldreq	r2, [r3, #0]
 80194f4:	685b      	ldreq	r3, [r3, #4]
 80194f6:	6063      	str	r3, [r4, #4]
 80194f8:	bf04      	itt	eq
 80194fa:	1852      	addeq	r2, r2, r1
 80194fc:	6022      	streq	r2, [r4, #0]
 80194fe:	6004      	str	r4, [r0, #0]
 8019500:	e7ec      	b.n	80194dc <_free_r+0x24>
 8019502:	4613      	mov	r3, r2
 8019504:	685a      	ldr	r2, [r3, #4]
 8019506:	b10a      	cbz	r2, 801950c <_free_r+0x54>
 8019508:	42a2      	cmp	r2, r4
 801950a:	d9fa      	bls.n	8019502 <_free_r+0x4a>
 801950c:	6819      	ldr	r1, [r3, #0]
 801950e:	1858      	adds	r0, r3, r1
 8019510:	42a0      	cmp	r0, r4
 8019512:	d10b      	bne.n	801952c <_free_r+0x74>
 8019514:	6820      	ldr	r0, [r4, #0]
 8019516:	4401      	add	r1, r0
 8019518:	1858      	adds	r0, r3, r1
 801951a:	4282      	cmp	r2, r0
 801951c:	6019      	str	r1, [r3, #0]
 801951e:	d1dd      	bne.n	80194dc <_free_r+0x24>
 8019520:	6810      	ldr	r0, [r2, #0]
 8019522:	6852      	ldr	r2, [r2, #4]
 8019524:	605a      	str	r2, [r3, #4]
 8019526:	4401      	add	r1, r0
 8019528:	6019      	str	r1, [r3, #0]
 801952a:	e7d7      	b.n	80194dc <_free_r+0x24>
 801952c:	d902      	bls.n	8019534 <_free_r+0x7c>
 801952e:	230c      	movs	r3, #12
 8019530:	602b      	str	r3, [r5, #0]
 8019532:	e7d3      	b.n	80194dc <_free_r+0x24>
 8019534:	6820      	ldr	r0, [r4, #0]
 8019536:	1821      	adds	r1, r4, r0
 8019538:	428a      	cmp	r2, r1
 801953a:	bf04      	itt	eq
 801953c:	6811      	ldreq	r1, [r2, #0]
 801953e:	6852      	ldreq	r2, [r2, #4]
 8019540:	6062      	str	r2, [r4, #4]
 8019542:	bf04      	itt	eq
 8019544:	1809      	addeq	r1, r1, r0
 8019546:	6021      	streq	r1, [r4, #0]
 8019548:	605c      	str	r4, [r3, #4]
 801954a:	e7c7      	b.n	80194dc <_free_r+0x24>
 801954c:	bd38      	pop	{r3, r4, r5, pc}
 801954e:	bf00      	nop
 8019550:	24000b90 	.word	0x24000b90

08019554 <_malloc_r>:
 8019554:	b570      	push	{r4, r5, r6, lr}
 8019556:	1ccd      	adds	r5, r1, #3
 8019558:	f025 0503 	bic.w	r5, r5, #3
 801955c:	3508      	adds	r5, #8
 801955e:	2d0c      	cmp	r5, #12
 8019560:	bf38      	it	cc
 8019562:	250c      	movcc	r5, #12
 8019564:	2d00      	cmp	r5, #0
 8019566:	4606      	mov	r6, r0
 8019568:	db01      	blt.n	801956e <_malloc_r+0x1a>
 801956a:	42a9      	cmp	r1, r5
 801956c:	d903      	bls.n	8019576 <_malloc_r+0x22>
 801956e:	230c      	movs	r3, #12
 8019570:	6033      	str	r3, [r6, #0]
 8019572:	2000      	movs	r0, #0
 8019574:	bd70      	pop	{r4, r5, r6, pc}
 8019576:	f000 fbcd 	bl	8019d14 <__malloc_lock>
 801957a:	4a21      	ldr	r2, [pc, #132]	; (8019600 <_malloc_r+0xac>)
 801957c:	6814      	ldr	r4, [r2, #0]
 801957e:	4621      	mov	r1, r4
 8019580:	b991      	cbnz	r1, 80195a8 <_malloc_r+0x54>
 8019582:	4c20      	ldr	r4, [pc, #128]	; (8019604 <_malloc_r+0xb0>)
 8019584:	6823      	ldr	r3, [r4, #0]
 8019586:	b91b      	cbnz	r3, 8019590 <_malloc_r+0x3c>
 8019588:	4630      	mov	r0, r6
 801958a:	f000 f8b9 	bl	8019700 <_sbrk_r>
 801958e:	6020      	str	r0, [r4, #0]
 8019590:	4629      	mov	r1, r5
 8019592:	4630      	mov	r0, r6
 8019594:	f000 f8b4 	bl	8019700 <_sbrk_r>
 8019598:	1c43      	adds	r3, r0, #1
 801959a:	d124      	bne.n	80195e6 <_malloc_r+0x92>
 801959c:	230c      	movs	r3, #12
 801959e:	6033      	str	r3, [r6, #0]
 80195a0:	4630      	mov	r0, r6
 80195a2:	f000 fbb8 	bl	8019d16 <__malloc_unlock>
 80195a6:	e7e4      	b.n	8019572 <_malloc_r+0x1e>
 80195a8:	680b      	ldr	r3, [r1, #0]
 80195aa:	1b5b      	subs	r3, r3, r5
 80195ac:	d418      	bmi.n	80195e0 <_malloc_r+0x8c>
 80195ae:	2b0b      	cmp	r3, #11
 80195b0:	d90f      	bls.n	80195d2 <_malloc_r+0x7e>
 80195b2:	600b      	str	r3, [r1, #0]
 80195b4:	50cd      	str	r5, [r1, r3]
 80195b6:	18cc      	adds	r4, r1, r3
 80195b8:	4630      	mov	r0, r6
 80195ba:	f000 fbac 	bl	8019d16 <__malloc_unlock>
 80195be:	f104 000b 	add.w	r0, r4, #11
 80195c2:	1d23      	adds	r3, r4, #4
 80195c4:	f020 0007 	bic.w	r0, r0, #7
 80195c8:	1ac3      	subs	r3, r0, r3
 80195ca:	d0d3      	beq.n	8019574 <_malloc_r+0x20>
 80195cc:	425a      	negs	r2, r3
 80195ce:	50e2      	str	r2, [r4, r3]
 80195d0:	e7d0      	b.n	8019574 <_malloc_r+0x20>
 80195d2:	428c      	cmp	r4, r1
 80195d4:	684b      	ldr	r3, [r1, #4]
 80195d6:	bf16      	itet	ne
 80195d8:	6063      	strne	r3, [r4, #4]
 80195da:	6013      	streq	r3, [r2, #0]
 80195dc:	460c      	movne	r4, r1
 80195de:	e7eb      	b.n	80195b8 <_malloc_r+0x64>
 80195e0:	460c      	mov	r4, r1
 80195e2:	6849      	ldr	r1, [r1, #4]
 80195e4:	e7cc      	b.n	8019580 <_malloc_r+0x2c>
 80195e6:	1cc4      	adds	r4, r0, #3
 80195e8:	f024 0403 	bic.w	r4, r4, #3
 80195ec:	42a0      	cmp	r0, r4
 80195ee:	d005      	beq.n	80195fc <_malloc_r+0xa8>
 80195f0:	1a21      	subs	r1, r4, r0
 80195f2:	4630      	mov	r0, r6
 80195f4:	f000 f884 	bl	8019700 <_sbrk_r>
 80195f8:	3001      	adds	r0, #1
 80195fa:	d0cf      	beq.n	801959c <_malloc_r+0x48>
 80195fc:	6025      	str	r5, [r4, #0]
 80195fe:	e7db      	b.n	80195b8 <_malloc_r+0x64>
 8019600:	24000b90 	.word	0x24000b90
 8019604:	24000b94 	.word	0x24000b94

08019608 <iprintf>:
 8019608:	b40f      	push	{r0, r1, r2, r3}
 801960a:	4b0a      	ldr	r3, [pc, #40]	; (8019634 <iprintf+0x2c>)
 801960c:	b513      	push	{r0, r1, r4, lr}
 801960e:	681c      	ldr	r4, [r3, #0]
 8019610:	b124      	cbz	r4, 801961c <iprintf+0x14>
 8019612:	69a3      	ldr	r3, [r4, #24]
 8019614:	b913      	cbnz	r3, 801961c <iprintf+0x14>
 8019616:	4620      	mov	r0, r4
 8019618:	f000 fa8e 	bl	8019b38 <__sinit>
 801961c:	ab05      	add	r3, sp, #20
 801961e:	9a04      	ldr	r2, [sp, #16]
 8019620:	68a1      	ldr	r1, [r4, #8]
 8019622:	9301      	str	r3, [sp, #4]
 8019624:	4620      	mov	r0, r4
 8019626:	f000 fcf3 	bl	801a010 <_vfiprintf_r>
 801962a:	b002      	add	sp, #8
 801962c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019630:	b004      	add	sp, #16
 8019632:	4770      	bx	lr
 8019634:	24000178 	.word	0x24000178

08019638 <_puts_r>:
 8019638:	b570      	push	{r4, r5, r6, lr}
 801963a:	460e      	mov	r6, r1
 801963c:	4605      	mov	r5, r0
 801963e:	b118      	cbz	r0, 8019648 <_puts_r+0x10>
 8019640:	6983      	ldr	r3, [r0, #24]
 8019642:	b90b      	cbnz	r3, 8019648 <_puts_r+0x10>
 8019644:	f000 fa78 	bl	8019b38 <__sinit>
 8019648:	69ab      	ldr	r3, [r5, #24]
 801964a:	68ac      	ldr	r4, [r5, #8]
 801964c:	b913      	cbnz	r3, 8019654 <_puts_r+0x1c>
 801964e:	4628      	mov	r0, r5
 8019650:	f000 fa72 	bl	8019b38 <__sinit>
 8019654:	4b23      	ldr	r3, [pc, #140]	; (80196e4 <_puts_r+0xac>)
 8019656:	429c      	cmp	r4, r3
 8019658:	d117      	bne.n	801968a <_puts_r+0x52>
 801965a:	686c      	ldr	r4, [r5, #4]
 801965c:	89a3      	ldrh	r3, [r4, #12]
 801965e:	071b      	lsls	r3, r3, #28
 8019660:	d51d      	bpl.n	801969e <_puts_r+0x66>
 8019662:	6923      	ldr	r3, [r4, #16]
 8019664:	b1db      	cbz	r3, 801969e <_puts_r+0x66>
 8019666:	3e01      	subs	r6, #1
 8019668:	68a3      	ldr	r3, [r4, #8]
 801966a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801966e:	3b01      	subs	r3, #1
 8019670:	60a3      	str	r3, [r4, #8]
 8019672:	b9e9      	cbnz	r1, 80196b0 <_puts_r+0x78>
 8019674:	2b00      	cmp	r3, #0
 8019676:	da2e      	bge.n	80196d6 <_puts_r+0x9e>
 8019678:	4622      	mov	r2, r4
 801967a:	210a      	movs	r1, #10
 801967c:	4628      	mov	r0, r5
 801967e:	f000 f8ab 	bl	80197d8 <__swbuf_r>
 8019682:	3001      	adds	r0, #1
 8019684:	d011      	beq.n	80196aa <_puts_r+0x72>
 8019686:	200a      	movs	r0, #10
 8019688:	e011      	b.n	80196ae <_puts_r+0x76>
 801968a:	4b17      	ldr	r3, [pc, #92]	; (80196e8 <_puts_r+0xb0>)
 801968c:	429c      	cmp	r4, r3
 801968e:	d101      	bne.n	8019694 <_puts_r+0x5c>
 8019690:	68ac      	ldr	r4, [r5, #8]
 8019692:	e7e3      	b.n	801965c <_puts_r+0x24>
 8019694:	4b15      	ldr	r3, [pc, #84]	; (80196ec <_puts_r+0xb4>)
 8019696:	429c      	cmp	r4, r3
 8019698:	bf08      	it	eq
 801969a:	68ec      	ldreq	r4, [r5, #12]
 801969c:	e7de      	b.n	801965c <_puts_r+0x24>
 801969e:	4621      	mov	r1, r4
 80196a0:	4628      	mov	r0, r5
 80196a2:	f000 f8eb 	bl	801987c <__swsetup_r>
 80196a6:	2800      	cmp	r0, #0
 80196a8:	d0dd      	beq.n	8019666 <_puts_r+0x2e>
 80196aa:	f04f 30ff 	mov.w	r0, #4294967295
 80196ae:	bd70      	pop	{r4, r5, r6, pc}
 80196b0:	2b00      	cmp	r3, #0
 80196b2:	da04      	bge.n	80196be <_puts_r+0x86>
 80196b4:	69a2      	ldr	r2, [r4, #24]
 80196b6:	429a      	cmp	r2, r3
 80196b8:	dc06      	bgt.n	80196c8 <_puts_r+0x90>
 80196ba:	290a      	cmp	r1, #10
 80196bc:	d004      	beq.n	80196c8 <_puts_r+0x90>
 80196be:	6823      	ldr	r3, [r4, #0]
 80196c0:	1c5a      	adds	r2, r3, #1
 80196c2:	6022      	str	r2, [r4, #0]
 80196c4:	7019      	strb	r1, [r3, #0]
 80196c6:	e7cf      	b.n	8019668 <_puts_r+0x30>
 80196c8:	4622      	mov	r2, r4
 80196ca:	4628      	mov	r0, r5
 80196cc:	f000 f884 	bl	80197d8 <__swbuf_r>
 80196d0:	3001      	adds	r0, #1
 80196d2:	d1c9      	bne.n	8019668 <_puts_r+0x30>
 80196d4:	e7e9      	b.n	80196aa <_puts_r+0x72>
 80196d6:	6823      	ldr	r3, [r4, #0]
 80196d8:	200a      	movs	r0, #10
 80196da:	1c5a      	adds	r2, r3, #1
 80196dc:	6022      	str	r2, [r4, #0]
 80196de:	7018      	strb	r0, [r3, #0]
 80196e0:	e7e5      	b.n	80196ae <_puts_r+0x76>
 80196e2:	bf00      	nop
 80196e4:	0801b06c 	.word	0x0801b06c
 80196e8:	0801b08c 	.word	0x0801b08c
 80196ec:	0801b04c 	.word	0x0801b04c

080196f0 <puts>:
 80196f0:	4b02      	ldr	r3, [pc, #8]	; (80196fc <puts+0xc>)
 80196f2:	4601      	mov	r1, r0
 80196f4:	6818      	ldr	r0, [r3, #0]
 80196f6:	f7ff bf9f 	b.w	8019638 <_puts_r>
 80196fa:	bf00      	nop
 80196fc:	24000178 	.word	0x24000178

08019700 <_sbrk_r>:
 8019700:	b538      	push	{r3, r4, r5, lr}
 8019702:	4c06      	ldr	r4, [pc, #24]	; (801971c <_sbrk_r+0x1c>)
 8019704:	2300      	movs	r3, #0
 8019706:	4605      	mov	r5, r0
 8019708:	4608      	mov	r0, r1
 801970a:	6023      	str	r3, [r4, #0]
 801970c:	f7ea fdf8 	bl	8004300 <_sbrk>
 8019710:	1c43      	adds	r3, r0, #1
 8019712:	d102      	bne.n	801971a <_sbrk_r+0x1a>
 8019714:	6823      	ldr	r3, [r4, #0]
 8019716:	b103      	cbz	r3, 801971a <_sbrk_r+0x1a>
 8019718:	602b      	str	r3, [r5, #0]
 801971a:	bd38      	pop	{r3, r4, r5, pc}
 801971c:	240024ac 	.word	0x240024ac

08019720 <sniprintf>:
 8019720:	b40c      	push	{r2, r3}
 8019722:	b530      	push	{r4, r5, lr}
 8019724:	4b17      	ldr	r3, [pc, #92]	; (8019784 <sniprintf+0x64>)
 8019726:	1e0c      	subs	r4, r1, #0
 8019728:	b09d      	sub	sp, #116	; 0x74
 801972a:	681d      	ldr	r5, [r3, #0]
 801972c:	da08      	bge.n	8019740 <sniprintf+0x20>
 801972e:	238b      	movs	r3, #139	; 0x8b
 8019730:	602b      	str	r3, [r5, #0]
 8019732:	f04f 30ff 	mov.w	r0, #4294967295
 8019736:	b01d      	add	sp, #116	; 0x74
 8019738:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801973c:	b002      	add	sp, #8
 801973e:	4770      	bx	lr
 8019740:	f44f 7302 	mov.w	r3, #520	; 0x208
 8019744:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019748:	bf14      	ite	ne
 801974a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801974e:	4623      	moveq	r3, r4
 8019750:	9304      	str	r3, [sp, #16]
 8019752:	9307      	str	r3, [sp, #28]
 8019754:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019758:	9002      	str	r0, [sp, #8]
 801975a:	9006      	str	r0, [sp, #24]
 801975c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019760:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019762:	ab21      	add	r3, sp, #132	; 0x84
 8019764:	a902      	add	r1, sp, #8
 8019766:	4628      	mov	r0, r5
 8019768:	9301      	str	r3, [sp, #4]
 801976a:	f000 fb2f 	bl	8019dcc <_svfiprintf_r>
 801976e:	1c43      	adds	r3, r0, #1
 8019770:	bfbc      	itt	lt
 8019772:	238b      	movlt	r3, #139	; 0x8b
 8019774:	602b      	strlt	r3, [r5, #0]
 8019776:	2c00      	cmp	r4, #0
 8019778:	d0dd      	beq.n	8019736 <sniprintf+0x16>
 801977a:	9b02      	ldr	r3, [sp, #8]
 801977c:	2200      	movs	r2, #0
 801977e:	701a      	strb	r2, [r3, #0]
 8019780:	e7d9      	b.n	8019736 <sniprintf+0x16>
 8019782:	bf00      	nop
 8019784:	24000178 	.word	0x24000178

08019788 <siprintf>:
 8019788:	b40e      	push	{r1, r2, r3}
 801978a:	b500      	push	{lr}
 801978c:	b09c      	sub	sp, #112	; 0x70
 801978e:	ab1d      	add	r3, sp, #116	; 0x74
 8019790:	9002      	str	r0, [sp, #8]
 8019792:	9006      	str	r0, [sp, #24]
 8019794:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019798:	4809      	ldr	r0, [pc, #36]	; (80197c0 <siprintf+0x38>)
 801979a:	9107      	str	r1, [sp, #28]
 801979c:	9104      	str	r1, [sp, #16]
 801979e:	4909      	ldr	r1, [pc, #36]	; (80197c4 <siprintf+0x3c>)
 80197a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80197a4:	9105      	str	r1, [sp, #20]
 80197a6:	6800      	ldr	r0, [r0, #0]
 80197a8:	9301      	str	r3, [sp, #4]
 80197aa:	a902      	add	r1, sp, #8
 80197ac:	f000 fb0e 	bl	8019dcc <_svfiprintf_r>
 80197b0:	9b02      	ldr	r3, [sp, #8]
 80197b2:	2200      	movs	r2, #0
 80197b4:	701a      	strb	r2, [r3, #0]
 80197b6:	b01c      	add	sp, #112	; 0x70
 80197b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80197bc:	b003      	add	sp, #12
 80197be:	4770      	bx	lr
 80197c0:	24000178 	.word	0x24000178
 80197c4:	ffff0208 	.word	0xffff0208

080197c8 <strcpy>:
 80197c8:	4603      	mov	r3, r0
 80197ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80197ce:	f803 2b01 	strb.w	r2, [r3], #1
 80197d2:	2a00      	cmp	r2, #0
 80197d4:	d1f9      	bne.n	80197ca <strcpy+0x2>
 80197d6:	4770      	bx	lr

080197d8 <__swbuf_r>:
 80197d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197da:	460e      	mov	r6, r1
 80197dc:	4614      	mov	r4, r2
 80197de:	4605      	mov	r5, r0
 80197e0:	b118      	cbz	r0, 80197ea <__swbuf_r+0x12>
 80197e2:	6983      	ldr	r3, [r0, #24]
 80197e4:	b90b      	cbnz	r3, 80197ea <__swbuf_r+0x12>
 80197e6:	f000 f9a7 	bl	8019b38 <__sinit>
 80197ea:	4b21      	ldr	r3, [pc, #132]	; (8019870 <__swbuf_r+0x98>)
 80197ec:	429c      	cmp	r4, r3
 80197ee:	d12a      	bne.n	8019846 <__swbuf_r+0x6e>
 80197f0:	686c      	ldr	r4, [r5, #4]
 80197f2:	69a3      	ldr	r3, [r4, #24]
 80197f4:	60a3      	str	r3, [r4, #8]
 80197f6:	89a3      	ldrh	r3, [r4, #12]
 80197f8:	071a      	lsls	r2, r3, #28
 80197fa:	d52e      	bpl.n	801985a <__swbuf_r+0x82>
 80197fc:	6923      	ldr	r3, [r4, #16]
 80197fe:	b363      	cbz	r3, 801985a <__swbuf_r+0x82>
 8019800:	6923      	ldr	r3, [r4, #16]
 8019802:	6820      	ldr	r0, [r4, #0]
 8019804:	1ac0      	subs	r0, r0, r3
 8019806:	6963      	ldr	r3, [r4, #20]
 8019808:	b2f6      	uxtb	r6, r6
 801980a:	4283      	cmp	r3, r0
 801980c:	4637      	mov	r7, r6
 801980e:	dc04      	bgt.n	801981a <__swbuf_r+0x42>
 8019810:	4621      	mov	r1, r4
 8019812:	4628      	mov	r0, r5
 8019814:	f000 f926 	bl	8019a64 <_fflush_r>
 8019818:	bb28      	cbnz	r0, 8019866 <__swbuf_r+0x8e>
 801981a:	68a3      	ldr	r3, [r4, #8]
 801981c:	3b01      	subs	r3, #1
 801981e:	60a3      	str	r3, [r4, #8]
 8019820:	6823      	ldr	r3, [r4, #0]
 8019822:	1c5a      	adds	r2, r3, #1
 8019824:	6022      	str	r2, [r4, #0]
 8019826:	701e      	strb	r6, [r3, #0]
 8019828:	6963      	ldr	r3, [r4, #20]
 801982a:	3001      	adds	r0, #1
 801982c:	4283      	cmp	r3, r0
 801982e:	d004      	beq.n	801983a <__swbuf_r+0x62>
 8019830:	89a3      	ldrh	r3, [r4, #12]
 8019832:	07db      	lsls	r3, r3, #31
 8019834:	d519      	bpl.n	801986a <__swbuf_r+0x92>
 8019836:	2e0a      	cmp	r6, #10
 8019838:	d117      	bne.n	801986a <__swbuf_r+0x92>
 801983a:	4621      	mov	r1, r4
 801983c:	4628      	mov	r0, r5
 801983e:	f000 f911 	bl	8019a64 <_fflush_r>
 8019842:	b190      	cbz	r0, 801986a <__swbuf_r+0x92>
 8019844:	e00f      	b.n	8019866 <__swbuf_r+0x8e>
 8019846:	4b0b      	ldr	r3, [pc, #44]	; (8019874 <__swbuf_r+0x9c>)
 8019848:	429c      	cmp	r4, r3
 801984a:	d101      	bne.n	8019850 <__swbuf_r+0x78>
 801984c:	68ac      	ldr	r4, [r5, #8]
 801984e:	e7d0      	b.n	80197f2 <__swbuf_r+0x1a>
 8019850:	4b09      	ldr	r3, [pc, #36]	; (8019878 <__swbuf_r+0xa0>)
 8019852:	429c      	cmp	r4, r3
 8019854:	bf08      	it	eq
 8019856:	68ec      	ldreq	r4, [r5, #12]
 8019858:	e7cb      	b.n	80197f2 <__swbuf_r+0x1a>
 801985a:	4621      	mov	r1, r4
 801985c:	4628      	mov	r0, r5
 801985e:	f000 f80d 	bl	801987c <__swsetup_r>
 8019862:	2800      	cmp	r0, #0
 8019864:	d0cc      	beq.n	8019800 <__swbuf_r+0x28>
 8019866:	f04f 37ff 	mov.w	r7, #4294967295
 801986a:	4638      	mov	r0, r7
 801986c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801986e:	bf00      	nop
 8019870:	0801b06c 	.word	0x0801b06c
 8019874:	0801b08c 	.word	0x0801b08c
 8019878:	0801b04c 	.word	0x0801b04c

0801987c <__swsetup_r>:
 801987c:	4b32      	ldr	r3, [pc, #200]	; (8019948 <__swsetup_r+0xcc>)
 801987e:	b570      	push	{r4, r5, r6, lr}
 8019880:	681d      	ldr	r5, [r3, #0]
 8019882:	4606      	mov	r6, r0
 8019884:	460c      	mov	r4, r1
 8019886:	b125      	cbz	r5, 8019892 <__swsetup_r+0x16>
 8019888:	69ab      	ldr	r3, [r5, #24]
 801988a:	b913      	cbnz	r3, 8019892 <__swsetup_r+0x16>
 801988c:	4628      	mov	r0, r5
 801988e:	f000 f953 	bl	8019b38 <__sinit>
 8019892:	4b2e      	ldr	r3, [pc, #184]	; (801994c <__swsetup_r+0xd0>)
 8019894:	429c      	cmp	r4, r3
 8019896:	d10f      	bne.n	80198b8 <__swsetup_r+0x3c>
 8019898:	686c      	ldr	r4, [r5, #4]
 801989a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801989e:	b29a      	uxth	r2, r3
 80198a0:	0715      	lsls	r5, r2, #28
 80198a2:	d42c      	bmi.n	80198fe <__swsetup_r+0x82>
 80198a4:	06d0      	lsls	r0, r2, #27
 80198a6:	d411      	bmi.n	80198cc <__swsetup_r+0x50>
 80198a8:	2209      	movs	r2, #9
 80198aa:	6032      	str	r2, [r6, #0]
 80198ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80198b0:	81a3      	strh	r3, [r4, #12]
 80198b2:	f04f 30ff 	mov.w	r0, #4294967295
 80198b6:	e03e      	b.n	8019936 <__swsetup_r+0xba>
 80198b8:	4b25      	ldr	r3, [pc, #148]	; (8019950 <__swsetup_r+0xd4>)
 80198ba:	429c      	cmp	r4, r3
 80198bc:	d101      	bne.n	80198c2 <__swsetup_r+0x46>
 80198be:	68ac      	ldr	r4, [r5, #8]
 80198c0:	e7eb      	b.n	801989a <__swsetup_r+0x1e>
 80198c2:	4b24      	ldr	r3, [pc, #144]	; (8019954 <__swsetup_r+0xd8>)
 80198c4:	429c      	cmp	r4, r3
 80198c6:	bf08      	it	eq
 80198c8:	68ec      	ldreq	r4, [r5, #12]
 80198ca:	e7e6      	b.n	801989a <__swsetup_r+0x1e>
 80198cc:	0751      	lsls	r1, r2, #29
 80198ce:	d512      	bpl.n	80198f6 <__swsetup_r+0x7a>
 80198d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80198d2:	b141      	cbz	r1, 80198e6 <__swsetup_r+0x6a>
 80198d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80198d8:	4299      	cmp	r1, r3
 80198da:	d002      	beq.n	80198e2 <__swsetup_r+0x66>
 80198dc:	4630      	mov	r0, r6
 80198de:	f7ff fdeb 	bl	80194b8 <_free_r>
 80198e2:	2300      	movs	r3, #0
 80198e4:	6363      	str	r3, [r4, #52]	; 0x34
 80198e6:	89a3      	ldrh	r3, [r4, #12]
 80198e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80198ec:	81a3      	strh	r3, [r4, #12]
 80198ee:	2300      	movs	r3, #0
 80198f0:	6063      	str	r3, [r4, #4]
 80198f2:	6923      	ldr	r3, [r4, #16]
 80198f4:	6023      	str	r3, [r4, #0]
 80198f6:	89a3      	ldrh	r3, [r4, #12]
 80198f8:	f043 0308 	orr.w	r3, r3, #8
 80198fc:	81a3      	strh	r3, [r4, #12]
 80198fe:	6923      	ldr	r3, [r4, #16]
 8019900:	b94b      	cbnz	r3, 8019916 <__swsetup_r+0x9a>
 8019902:	89a3      	ldrh	r3, [r4, #12]
 8019904:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801990c:	d003      	beq.n	8019916 <__swsetup_r+0x9a>
 801990e:	4621      	mov	r1, r4
 8019910:	4630      	mov	r0, r6
 8019912:	f000 f9bf 	bl	8019c94 <__smakebuf_r>
 8019916:	89a2      	ldrh	r2, [r4, #12]
 8019918:	f012 0301 	ands.w	r3, r2, #1
 801991c:	d00c      	beq.n	8019938 <__swsetup_r+0xbc>
 801991e:	2300      	movs	r3, #0
 8019920:	60a3      	str	r3, [r4, #8]
 8019922:	6963      	ldr	r3, [r4, #20]
 8019924:	425b      	negs	r3, r3
 8019926:	61a3      	str	r3, [r4, #24]
 8019928:	6923      	ldr	r3, [r4, #16]
 801992a:	b953      	cbnz	r3, 8019942 <__swsetup_r+0xc6>
 801992c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019930:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8019934:	d1ba      	bne.n	80198ac <__swsetup_r+0x30>
 8019936:	bd70      	pop	{r4, r5, r6, pc}
 8019938:	0792      	lsls	r2, r2, #30
 801993a:	bf58      	it	pl
 801993c:	6963      	ldrpl	r3, [r4, #20]
 801993e:	60a3      	str	r3, [r4, #8]
 8019940:	e7f2      	b.n	8019928 <__swsetup_r+0xac>
 8019942:	2000      	movs	r0, #0
 8019944:	e7f7      	b.n	8019936 <__swsetup_r+0xba>
 8019946:	bf00      	nop
 8019948:	24000178 	.word	0x24000178
 801994c:	0801b06c 	.word	0x0801b06c
 8019950:	0801b08c 	.word	0x0801b08c
 8019954:	0801b04c 	.word	0x0801b04c

08019958 <__sflush_r>:
 8019958:	898a      	ldrh	r2, [r1, #12]
 801995a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801995e:	4605      	mov	r5, r0
 8019960:	0710      	lsls	r0, r2, #28
 8019962:	460c      	mov	r4, r1
 8019964:	d458      	bmi.n	8019a18 <__sflush_r+0xc0>
 8019966:	684b      	ldr	r3, [r1, #4]
 8019968:	2b00      	cmp	r3, #0
 801996a:	dc05      	bgt.n	8019978 <__sflush_r+0x20>
 801996c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801996e:	2b00      	cmp	r3, #0
 8019970:	dc02      	bgt.n	8019978 <__sflush_r+0x20>
 8019972:	2000      	movs	r0, #0
 8019974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019978:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801997a:	2e00      	cmp	r6, #0
 801997c:	d0f9      	beq.n	8019972 <__sflush_r+0x1a>
 801997e:	2300      	movs	r3, #0
 8019980:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019984:	682f      	ldr	r7, [r5, #0]
 8019986:	6a21      	ldr	r1, [r4, #32]
 8019988:	602b      	str	r3, [r5, #0]
 801998a:	d032      	beq.n	80199f2 <__sflush_r+0x9a>
 801998c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801998e:	89a3      	ldrh	r3, [r4, #12]
 8019990:	075a      	lsls	r2, r3, #29
 8019992:	d505      	bpl.n	80199a0 <__sflush_r+0x48>
 8019994:	6863      	ldr	r3, [r4, #4]
 8019996:	1ac0      	subs	r0, r0, r3
 8019998:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801999a:	b10b      	cbz	r3, 80199a0 <__sflush_r+0x48>
 801999c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801999e:	1ac0      	subs	r0, r0, r3
 80199a0:	2300      	movs	r3, #0
 80199a2:	4602      	mov	r2, r0
 80199a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80199a6:	6a21      	ldr	r1, [r4, #32]
 80199a8:	4628      	mov	r0, r5
 80199aa:	47b0      	blx	r6
 80199ac:	1c43      	adds	r3, r0, #1
 80199ae:	89a3      	ldrh	r3, [r4, #12]
 80199b0:	d106      	bne.n	80199c0 <__sflush_r+0x68>
 80199b2:	6829      	ldr	r1, [r5, #0]
 80199b4:	291d      	cmp	r1, #29
 80199b6:	d848      	bhi.n	8019a4a <__sflush_r+0xf2>
 80199b8:	4a29      	ldr	r2, [pc, #164]	; (8019a60 <__sflush_r+0x108>)
 80199ba:	40ca      	lsrs	r2, r1
 80199bc:	07d6      	lsls	r6, r2, #31
 80199be:	d544      	bpl.n	8019a4a <__sflush_r+0xf2>
 80199c0:	2200      	movs	r2, #0
 80199c2:	6062      	str	r2, [r4, #4]
 80199c4:	04d9      	lsls	r1, r3, #19
 80199c6:	6922      	ldr	r2, [r4, #16]
 80199c8:	6022      	str	r2, [r4, #0]
 80199ca:	d504      	bpl.n	80199d6 <__sflush_r+0x7e>
 80199cc:	1c42      	adds	r2, r0, #1
 80199ce:	d101      	bne.n	80199d4 <__sflush_r+0x7c>
 80199d0:	682b      	ldr	r3, [r5, #0]
 80199d2:	b903      	cbnz	r3, 80199d6 <__sflush_r+0x7e>
 80199d4:	6560      	str	r0, [r4, #84]	; 0x54
 80199d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80199d8:	602f      	str	r7, [r5, #0]
 80199da:	2900      	cmp	r1, #0
 80199dc:	d0c9      	beq.n	8019972 <__sflush_r+0x1a>
 80199de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80199e2:	4299      	cmp	r1, r3
 80199e4:	d002      	beq.n	80199ec <__sflush_r+0x94>
 80199e6:	4628      	mov	r0, r5
 80199e8:	f7ff fd66 	bl	80194b8 <_free_r>
 80199ec:	2000      	movs	r0, #0
 80199ee:	6360      	str	r0, [r4, #52]	; 0x34
 80199f0:	e7c0      	b.n	8019974 <__sflush_r+0x1c>
 80199f2:	2301      	movs	r3, #1
 80199f4:	4628      	mov	r0, r5
 80199f6:	47b0      	blx	r6
 80199f8:	1c41      	adds	r1, r0, #1
 80199fa:	d1c8      	bne.n	801998e <__sflush_r+0x36>
 80199fc:	682b      	ldr	r3, [r5, #0]
 80199fe:	2b00      	cmp	r3, #0
 8019a00:	d0c5      	beq.n	801998e <__sflush_r+0x36>
 8019a02:	2b1d      	cmp	r3, #29
 8019a04:	d001      	beq.n	8019a0a <__sflush_r+0xb2>
 8019a06:	2b16      	cmp	r3, #22
 8019a08:	d101      	bne.n	8019a0e <__sflush_r+0xb6>
 8019a0a:	602f      	str	r7, [r5, #0]
 8019a0c:	e7b1      	b.n	8019972 <__sflush_r+0x1a>
 8019a0e:	89a3      	ldrh	r3, [r4, #12]
 8019a10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019a14:	81a3      	strh	r3, [r4, #12]
 8019a16:	e7ad      	b.n	8019974 <__sflush_r+0x1c>
 8019a18:	690f      	ldr	r7, [r1, #16]
 8019a1a:	2f00      	cmp	r7, #0
 8019a1c:	d0a9      	beq.n	8019972 <__sflush_r+0x1a>
 8019a1e:	0793      	lsls	r3, r2, #30
 8019a20:	680e      	ldr	r6, [r1, #0]
 8019a22:	bf08      	it	eq
 8019a24:	694b      	ldreq	r3, [r1, #20]
 8019a26:	600f      	str	r7, [r1, #0]
 8019a28:	bf18      	it	ne
 8019a2a:	2300      	movne	r3, #0
 8019a2c:	eba6 0807 	sub.w	r8, r6, r7
 8019a30:	608b      	str	r3, [r1, #8]
 8019a32:	f1b8 0f00 	cmp.w	r8, #0
 8019a36:	dd9c      	ble.n	8019972 <__sflush_r+0x1a>
 8019a38:	4643      	mov	r3, r8
 8019a3a:	463a      	mov	r2, r7
 8019a3c:	6a21      	ldr	r1, [r4, #32]
 8019a3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019a40:	4628      	mov	r0, r5
 8019a42:	47b0      	blx	r6
 8019a44:	2800      	cmp	r0, #0
 8019a46:	dc06      	bgt.n	8019a56 <__sflush_r+0xfe>
 8019a48:	89a3      	ldrh	r3, [r4, #12]
 8019a4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019a4e:	81a3      	strh	r3, [r4, #12]
 8019a50:	f04f 30ff 	mov.w	r0, #4294967295
 8019a54:	e78e      	b.n	8019974 <__sflush_r+0x1c>
 8019a56:	4407      	add	r7, r0
 8019a58:	eba8 0800 	sub.w	r8, r8, r0
 8019a5c:	e7e9      	b.n	8019a32 <__sflush_r+0xda>
 8019a5e:	bf00      	nop
 8019a60:	20400001 	.word	0x20400001

08019a64 <_fflush_r>:
 8019a64:	b538      	push	{r3, r4, r5, lr}
 8019a66:	690b      	ldr	r3, [r1, #16]
 8019a68:	4605      	mov	r5, r0
 8019a6a:	460c      	mov	r4, r1
 8019a6c:	b1db      	cbz	r3, 8019aa6 <_fflush_r+0x42>
 8019a6e:	b118      	cbz	r0, 8019a78 <_fflush_r+0x14>
 8019a70:	6983      	ldr	r3, [r0, #24]
 8019a72:	b90b      	cbnz	r3, 8019a78 <_fflush_r+0x14>
 8019a74:	f000 f860 	bl	8019b38 <__sinit>
 8019a78:	4b0c      	ldr	r3, [pc, #48]	; (8019aac <_fflush_r+0x48>)
 8019a7a:	429c      	cmp	r4, r3
 8019a7c:	d109      	bne.n	8019a92 <_fflush_r+0x2e>
 8019a7e:	686c      	ldr	r4, [r5, #4]
 8019a80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019a84:	b17b      	cbz	r3, 8019aa6 <_fflush_r+0x42>
 8019a86:	4621      	mov	r1, r4
 8019a88:	4628      	mov	r0, r5
 8019a8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019a8e:	f7ff bf63 	b.w	8019958 <__sflush_r>
 8019a92:	4b07      	ldr	r3, [pc, #28]	; (8019ab0 <_fflush_r+0x4c>)
 8019a94:	429c      	cmp	r4, r3
 8019a96:	d101      	bne.n	8019a9c <_fflush_r+0x38>
 8019a98:	68ac      	ldr	r4, [r5, #8]
 8019a9a:	e7f1      	b.n	8019a80 <_fflush_r+0x1c>
 8019a9c:	4b05      	ldr	r3, [pc, #20]	; (8019ab4 <_fflush_r+0x50>)
 8019a9e:	429c      	cmp	r4, r3
 8019aa0:	bf08      	it	eq
 8019aa2:	68ec      	ldreq	r4, [r5, #12]
 8019aa4:	e7ec      	b.n	8019a80 <_fflush_r+0x1c>
 8019aa6:	2000      	movs	r0, #0
 8019aa8:	bd38      	pop	{r3, r4, r5, pc}
 8019aaa:	bf00      	nop
 8019aac:	0801b06c 	.word	0x0801b06c
 8019ab0:	0801b08c 	.word	0x0801b08c
 8019ab4:	0801b04c 	.word	0x0801b04c

08019ab8 <std>:
 8019ab8:	2300      	movs	r3, #0
 8019aba:	b510      	push	{r4, lr}
 8019abc:	4604      	mov	r4, r0
 8019abe:	e9c0 3300 	strd	r3, r3, [r0]
 8019ac2:	6083      	str	r3, [r0, #8]
 8019ac4:	8181      	strh	r1, [r0, #12]
 8019ac6:	6643      	str	r3, [r0, #100]	; 0x64
 8019ac8:	81c2      	strh	r2, [r0, #14]
 8019aca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019ace:	6183      	str	r3, [r0, #24]
 8019ad0:	4619      	mov	r1, r3
 8019ad2:	2208      	movs	r2, #8
 8019ad4:	305c      	adds	r0, #92	; 0x5c
 8019ad6:	f7ff fce6 	bl	80194a6 <memset>
 8019ada:	4b05      	ldr	r3, [pc, #20]	; (8019af0 <std+0x38>)
 8019adc:	6263      	str	r3, [r4, #36]	; 0x24
 8019ade:	4b05      	ldr	r3, [pc, #20]	; (8019af4 <std+0x3c>)
 8019ae0:	62a3      	str	r3, [r4, #40]	; 0x28
 8019ae2:	4b05      	ldr	r3, [pc, #20]	; (8019af8 <std+0x40>)
 8019ae4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019ae6:	4b05      	ldr	r3, [pc, #20]	; (8019afc <std+0x44>)
 8019ae8:	6224      	str	r4, [r4, #32]
 8019aea:	6323      	str	r3, [r4, #48]	; 0x30
 8019aec:	bd10      	pop	{r4, pc}
 8019aee:	bf00      	nop
 8019af0:	0801a54d 	.word	0x0801a54d
 8019af4:	0801a56f 	.word	0x0801a56f
 8019af8:	0801a5a7 	.word	0x0801a5a7
 8019afc:	0801a5cb 	.word	0x0801a5cb

08019b00 <_cleanup_r>:
 8019b00:	4901      	ldr	r1, [pc, #4]	; (8019b08 <_cleanup_r+0x8>)
 8019b02:	f000 b885 	b.w	8019c10 <_fwalk_reent>
 8019b06:	bf00      	nop
 8019b08:	08019a65 	.word	0x08019a65

08019b0c <__sfmoreglue>:
 8019b0c:	b570      	push	{r4, r5, r6, lr}
 8019b0e:	1e4a      	subs	r2, r1, #1
 8019b10:	2568      	movs	r5, #104	; 0x68
 8019b12:	4355      	muls	r5, r2
 8019b14:	460e      	mov	r6, r1
 8019b16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019b1a:	f7ff fd1b 	bl	8019554 <_malloc_r>
 8019b1e:	4604      	mov	r4, r0
 8019b20:	b140      	cbz	r0, 8019b34 <__sfmoreglue+0x28>
 8019b22:	2100      	movs	r1, #0
 8019b24:	e9c0 1600 	strd	r1, r6, [r0]
 8019b28:	300c      	adds	r0, #12
 8019b2a:	60a0      	str	r0, [r4, #8]
 8019b2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019b30:	f7ff fcb9 	bl	80194a6 <memset>
 8019b34:	4620      	mov	r0, r4
 8019b36:	bd70      	pop	{r4, r5, r6, pc}

08019b38 <__sinit>:
 8019b38:	6983      	ldr	r3, [r0, #24]
 8019b3a:	b510      	push	{r4, lr}
 8019b3c:	4604      	mov	r4, r0
 8019b3e:	bb33      	cbnz	r3, 8019b8e <__sinit+0x56>
 8019b40:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8019b44:	6503      	str	r3, [r0, #80]	; 0x50
 8019b46:	4b12      	ldr	r3, [pc, #72]	; (8019b90 <__sinit+0x58>)
 8019b48:	4a12      	ldr	r2, [pc, #72]	; (8019b94 <__sinit+0x5c>)
 8019b4a:	681b      	ldr	r3, [r3, #0]
 8019b4c:	6282      	str	r2, [r0, #40]	; 0x28
 8019b4e:	4298      	cmp	r0, r3
 8019b50:	bf04      	itt	eq
 8019b52:	2301      	moveq	r3, #1
 8019b54:	6183      	streq	r3, [r0, #24]
 8019b56:	f000 f81f 	bl	8019b98 <__sfp>
 8019b5a:	6060      	str	r0, [r4, #4]
 8019b5c:	4620      	mov	r0, r4
 8019b5e:	f000 f81b 	bl	8019b98 <__sfp>
 8019b62:	60a0      	str	r0, [r4, #8]
 8019b64:	4620      	mov	r0, r4
 8019b66:	f000 f817 	bl	8019b98 <__sfp>
 8019b6a:	2200      	movs	r2, #0
 8019b6c:	60e0      	str	r0, [r4, #12]
 8019b6e:	2104      	movs	r1, #4
 8019b70:	6860      	ldr	r0, [r4, #4]
 8019b72:	f7ff ffa1 	bl	8019ab8 <std>
 8019b76:	2201      	movs	r2, #1
 8019b78:	2109      	movs	r1, #9
 8019b7a:	68a0      	ldr	r0, [r4, #8]
 8019b7c:	f7ff ff9c 	bl	8019ab8 <std>
 8019b80:	2202      	movs	r2, #2
 8019b82:	2112      	movs	r1, #18
 8019b84:	68e0      	ldr	r0, [r4, #12]
 8019b86:	f7ff ff97 	bl	8019ab8 <std>
 8019b8a:	2301      	movs	r3, #1
 8019b8c:	61a3      	str	r3, [r4, #24]
 8019b8e:	bd10      	pop	{r4, pc}
 8019b90:	0801b048 	.word	0x0801b048
 8019b94:	08019b01 	.word	0x08019b01

08019b98 <__sfp>:
 8019b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b9a:	4b1b      	ldr	r3, [pc, #108]	; (8019c08 <__sfp+0x70>)
 8019b9c:	681e      	ldr	r6, [r3, #0]
 8019b9e:	69b3      	ldr	r3, [r6, #24]
 8019ba0:	4607      	mov	r7, r0
 8019ba2:	b913      	cbnz	r3, 8019baa <__sfp+0x12>
 8019ba4:	4630      	mov	r0, r6
 8019ba6:	f7ff ffc7 	bl	8019b38 <__sinit>
 8019baa:	3648      	adds	r6, #72	; 0x48
 8019bac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019bb0:	3b01      	subs	r3, #1
 8019bb2:	d503      	bpl.n	8019bbc <__sfp+0x24>
 8019bb4:	6833      	ldr	r3, [r6, #0]
 8019bb6:	b133      	cbz	r3, 8019bc6 <__sfp+0x2e>
 8019bb8:	6836      	ldr	r6, [r6, #0]
 8019bba:	e7f7      	b.n	8019bac <__sfp+0x14>
 8019bbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019bc0:	b16d      	cbz	r5, 8019bde <__sfp+0x46>
 8019bc2:	3468      	adds	r4, #104	; 0x68
 8019bc4:	e7f4      	b.n	8019bb0 <__sfp+0x18>
 8019bc6:	2104      	movs	r1, #4
 8019bc8:	4638      	mov	r0, r7
 8019bca:	f7ff ff9f 	bl	8019b0c <__sfmoreglue>
 8019bce:	6030      	str	r0, [r6, #0]
 8019bd0:	2800      	cmp	r0, #0
 8019bd2:	d1f1      	bne.n	8019bb8 <__sfp+0x20>
 8019bd4:	230c      	movs	r3, #12
 8019bd6:	603b      	str	r3, [r7, #0]
 8019bd8:	4604      	mov	r4, r0
 8019bda:	4620      	mov	r0, r4
 8019bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019bde:	4b0b      	ldr	r3, [pc, #44]	; (8019c0c <__sfp+0x74>)
 8019be0:	6665      	str	r5, [r4, #100]	; 0x64
 8019be2:	e9c4 5500 	strd	r5, r5, [r4]
 8019be6:	60a5      	str	r5, [r4, #8]
 8019be8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8019bec:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8019bf0:	2208      	movs	r2, #8
 8019bf2:	4629      	mov	r1, r5
 8019bf4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019bf8:	f7ff fc55 	bl	80194a6 <memset>
 8019bfc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019c00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019c04:	e7e9      	b.n	8019bda <__sfp+0x42>
 8019c06:	bf00      	nop
 8019c08:	0801b048 	.word	0x0801b048
 8019c0c:	ffff0001 	.word	0xffff0001

08019c10 <_fwalk_reent>:
 8019c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019c14:	4680      	mov	r8, r0
 8019c16:	4689      	mov	r9, r1
 8019c18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019c1c:	2600      	movs	r6, #0
 8019c1e:	b914      	cbnz	r4, 8019c26 <_fwalk_reent+0x16>
 8019c20:	4630      	mov	r0, r6
 8019c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019c26:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8019c2a:	3f01      	subs	r7, #1
 8019c2c:	d501      	bpl.n	8019c32 <_fwalk_reent+0x22>
 8019c2e:	6824      	ldr	r4, [r4, #0]
 8019c30:	e7f5      	b.n	8019c1e <_fwalk_reent+0xe>
 8019c32:	89ab      	ldrh	r3, [r5, #12]
 8019c34:	2b01      	cmp	r3, #1
 8019c36:	d907      	bls.n	8019c48 <_fwalk_reent+0x38>
 8019c38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019c3c:	3301      	adds	r3, #1
 8019c3e:	d003      	beq.n	8019c48 <_fwalk_reent+0x38>
 8019c40:	4629      	mov	r1, r5
 8019c42:	4640      	mov	r0, r8
 8019c44:	47c8      	blx	r9
 8019c46:	4306      	orrs	r6, r0
 8019c48:	3568      	adds	r5, #104	; 0x68
 8019c4a:	e7ee      	b.n	8019c2a <_fwalk_reent+0x1a>

08019c4c <__swhatbuf_r>:
 8019c4c:	b570      	push	{r4, r5, r6, lr}
 8019c4e:	460e      	mov	r6, r1
 8019c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c54:	2900      	cmp	r1, #0
 8019c56:	b096      	sub	sp, #88	; 0x58
 8019c58:	4614      	mov	r4, r2
 8019c5a:	461d      	mov	r5, r3
 8019c5c:	da07      	bge.n	8019c6e <__swhatbuf_r+0x22>
 8019c5e:	2300      	movs	r3, #0
 8019c60:	602b      	str	r3, [r5, #0]
 8019c62:	89b3      	ldrh	r3, [r6, #12]
 8019c64:	061a      	lsls	r2, r3, #24
 8019c66:	d410      	bmi.n	8019c8a <__swhatbuf_r+0x3e>
 8019c68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019c6c:	e00e      	b.n	8019c8c <__swhatbuf_r+0x40>
 8019c6e:	466a      	mov	r2, sp
 8019c70:	f000 fcd2 	bl	801a618 <_fstat_r>
 8019c74:	2800      	cmp	r0, #0
 8019c76:	dbf2      	blt.n	8019c5e <__swhatbuf_r+0x12>
 8019c78:	9a01      	ldr	r2, [sp, #4]
 8019c7a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019c7e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019c82:	425a      	negs	r2, r3
 8019c84:	415a      	adcs	r2, r3
 8019c86:	602a      	str	r2, [r5, #0]
 8019c88:	e7ee      	b.n	8019c68 <__swhatbuf_r+0x1c>
 8019c8a:	2340      	movs	r3, #64	; 0x40
 8019c8c:	2000      	movs	r0, #0
 8019c8e:	6023      	str	r3, [r4, #0]
 8019c90:	b016      	add	sp, #88	; 0x58
 8019c92:	bd70      	pop	{r4, r5, r6, pc}

08019c94 <__smakebuf_r>:
 8019c94:	898b      	ldrh	r3, [r1, #12]
 8019c96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019c98:	079d      	lsls	r5, r3, #30
 8019c9a:	4606      	mov	r6, r0
 8019c9c:	460c      	mov	r4, r1
 8019c9e:	d507      	bpl.n	8019cb0 <__smakebuf_r+0x1c>
 8019ca0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019ca4:	6023      	str	r3, [r4, #0]
 8019ca6:	6123      	str	r3, [r4, #16]
 8019ca8:	2301      	movs	r3, #1
 8019caa:	6163      	str	r3, [r4, #20]
 8019cac:	b002      	add	sp, #8
 8019cae:	bd70      	pop	{r4, r5, r6, pc}
 8019cb0:	ab01      	add	r3, sp, #4
 8019cb2:	466a      	mov	r2, sp
 8019cb4:	f7ff ffca 	bl	8019c4c <__swhatbuf_r>
 8019cb8:	9900      	ldr	r1, [sp, #0]
 8019cba:	4605      	mov	r5, r0
 8019cbc:	4630      	mov	r0, r6
 8019cbe:	f7ff fc49 	bl	8019554 <_malloc_r>
 8019cc2:	b948      	cbnz	r0, 8019cd8 <__smakebuf_r+0x44>
 8019cc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019cc8:	059a      	lsls	r2, r3, #22
 8019cca:	d4ef      	bmi.n	8019cac <__smakebuf_r+0x18>
 8019ccc:	f023 0303 	bic.w	r3, r3, #3
 8019cd0:	f043 0302 	orr.w	r3, r3, #2
 8019cd4:	81a3      	strh	r3, [r4, #12]
 8019cd6:	e7e3      	b.n	8019ca0 <__smakebuf_r+0xc>
 8019cd8:	4b0d      	ldr	r3, [pc, #52]	; (8019d10 <__smakebuf_r+0x7c>)
 8019cda:	62b3      	str	r3, [r6, #40]	; 0x28
 8019cdc:	89a3      	ldrh	r3, [r4, #12]
 8019cde:	6020      	str	r0, [r4, #0]
 8019ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019ce4:	81a3      	strh	r3, [r4, #12]
 8019ce6:	9b00      	ldr	r3, [sp, #0]
 8019ce8:	6163      	str	r3, [r4, #20]
 8019cea:	9b01      	ldr	r3, [sp, #4]
 8019cec:	6120      	str	r0, [r4, #16]
 8019cee:	b15b      	cbz	r3, 8019d08 <__smakebuf_r+0x74>
 8019cf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019cf4:	4630      	mov	r0, r6
 8019cf6:	f000 fca1 	bl	801a63c <_isatty_r>
 8019cfa:	b128      	cbz	r0, 8019d08 <__smakebuf_r+0x74>
 8019cfc:	89a3      	ldrh	r3, [r4, #12]
 8019cfe:	f023 0303 	bic.w	r3, r3, #3
 8019d02:	f043 0301 	orr.w	r3, r3, #1
 8019d06:	81a3      	strh	r3, [r4, #12]
 8019d08:	89a3      	ldrh	r3, [r4, #12]
 8019d0a:	431d      	orrs	r5, r3
 8019d0c:	81a5      	strh	r5, [r4, #12]
 8019d0e:	e7cd      	b.n	8019cac <__smakebuf_r+0x18>
 8019d10:	08019b01 	.word	0x08019b01

08019d14 <__malloc_lock>:
 8019d14:	4770      	bx	lr

08019d16 <__malloc_unlock>:
 8019d16:	4770      	bx	lr

08019d18 <__ssputs_r>:
 8019d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019d1c:	688e      	ldr	r6, [r1, #8]
 8019d1e:	429e      	cmp	r6, r3
 8019d20:	4682      	mov	sl, r0
 8019d22:	460c      	mov	r4, r1
 8019d24:	4690      	mov	r8, r2
 8019d26:	4699      	mov	r9, r3
 8019d28:	d837      	bhi.n	8019d9a <__ssputs_r+0x82>
 8019d2a:	898a      	ldrh	r2, [r1, #12]
 8019d2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019d30:	d031      	beq.n	8019d96 <__ssputs_r+0x7e>
 8019d32:	6825      	ldr	r5, [r4, #0]
 8019d34:	6909      	ldr	r1, [r1, #16]
 8019d36:	1a6f      	subs	r7, r5, r1
 8019d38:	6965      	ldr	r5, [r4, #20]
 8019d3a:	2302      	movs	r3, #2
 8019d3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019d40:	fb95 f5f3 	sdiv	r5, r5, r3
 8019d44:	f109 0301 	add.w	r3, r9, #1
 8019d48:	443b      	add	r3, r7
 8019d4a:	429d      	cmp	r5, r3
 8019d4c:	bf38      	it	cc
 8019d4e:	461d      	movcc	r5, r3
 8019d50:	0553      	lsls	r3, r2, #21
 8019d52:	d530      	bpl.n	8019db6 <__ssputs_r+0x9e>
 8019d54:	4629      	mov	r1, r5
 8019d56:	f7ff fbfd 	bl	8019554 <_malloc_r>
 8019d5a:	4606      	mov	r6, r0
 8019d5c:	b950      	cbnz	r0, 8019d74 <__ssputs_r+0x5c>
 8019d5e:	230c      	movs	r3, #12
 8019d60:	f8ca 3000 	str.w	r3, [sl]
 8019d64:	89a3      	ldrh	r3, [r4, #12]
 8019d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019d6a:	81a3      	strh	r3, [r4, #12]
 8019d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8019d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d74:	463a      	mov	r2, r7
 8019d76:	6921      	ldr	r1, [r4, #16]
 8019d78:	f7ff fb8a 	bl	8019490 <memcpy>
 8019d7c:	89a3      	ldrh	r3, [r4, #12]
 8019d7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019d86:	81a3      	strh	r3, [r4, #12]
 8019d88:	6126      	str	r6, [r4, #16]
 8019d8a:	6165      	str	r5, [r4, #20]
 8019d8c:	443e      	add	r6, r7
 8019d8e:	1bed      	subs	r5, r5, r7
 8019d90:	6026      	str	r6, [r4, #0]
 8019d92:	60a5      	str	r5, [r4, #8]
 8019d94:	464e      	mov	r6, r9
 8019d96:	454e      	cmp	r6, r9
 8019d98:	d900      	bls.n	8019d9c <__ssputs_r+0x84>
 8019d9a:	464e      	mov	r6, r9
 8019d9c:	4632      	mov	r2, r6
 8019d9e:	4641      	mov	r1, r8
 8019da0:	6820      	ldr	r0, [r4, #0]
 8019da2:	f000 fc6d 	bl	801a680 <memmove>
 8019da6:	68a3      	ldr	r3, [r4, #8]
 8019da8:	1b9b      	subs	r3, r3, r6
 8019daa:	60a3      	str	r3, [r4, #8]
 8019dac:	6823      	ldr	r3, [r4, #0]
 8019dae:	441e      	add	r6, r3
 8019db0:	6026      	str	r6, [r4, #0]
 8019db2:	2000      	movs	r0, #0
 8019db4:	e7dc      	b.n	8019d70 <__ssputs_r+0x58>
 8019db6:	462a      	mov	r2, r5
 8019db8:	f000 fc7b 	bl	801a6b2 <_realloc_r>
 8019dbc:	4606      	mov	r6, r0
 8019dbe:	2800      	cmp	r0, #0
 8019dc0:	d1e2      	bne.n	8019d88 <__ssputs_r+0x70>
 8019dc2:	6921      	ldr	r1, [r4, #16]
 8019dc4:	4650      	mov	r0, sl
 8019dc6:	f7ff fb77 	bl	80194b8 <_free_r>
 8019dca:	e7c8      	b.n	8019d5e <__ssputs_r+0x46>

08019dcc <_svfiprintf_r>:
 8019dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019dd0:	461d      	mov	r5, r3
 8019dd2:	898b      	ldrh	r3, [r1, #12]
 8019dd4:	061f      	lsls	r7, r3, #24
 8019dd6:	b09d      	sub	sp, #116	; 0x74
 8019dd8:	4680      	mov	r8, r0
 8019dda:	460c      	mov	r4, r1
 8019ddc:	4616      	mov	r6, r2
 8019dde:	d50f      	bpl.n	8019e00 <_svfiprintf_r+0x34>
 8019de0:	690b      	ldr	r3, [r1, #16]
 8019de2:	b96b      	cbnz	r3, 8019e00 <_svfiprintf_r+0x34>
 8019de4:	2140      	movs	r1, #64	; 0x40
 8019de6:	f7ff fbb5 	bl	8019554 <_malloc_r>
 8019dea:	6020      	str	r0, [r4, #0]
 8019dec:	6120      	str	r0, [r4, #16]
 8019dee:	b928      	cbnz	r0, 8019dfc <_svfiprintf_r+0x30>
 8019df0:	230c      	movs	r3, #12
 8019df2:	f8c8 3000 	str.w	r3, [r8]
 8019df6:	f04f 30ff 	mov.w	r0, #4294967295
 8019dfa:	e0c8      	b.n	8019f8e <_svfiprintf_r+0x1c2>
 8019dfc:	2340      	movs	r3, #64	; 0x40
 8019dfe:	6163      	str	r3, [r4, #20]
 8019e00:	2300      	movs	r3, #0
 8019e02:	9309      	str	r3, [sp, #36]	; 0x24
 8019e04:	2320      	movs	r3, #32
 8019e06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019e0a:	2330      	movs	r3, #48	; 0x30
 8019e0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019e10:	9503      	str	r5, [sp, #12]
 8019e12:	f04f 0b01 	mov.w	fp, #1
 8019e16:	4637      	mov	r7, r6
 8019e18:	463d      	mov	r5, r7
 8019e1a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019e1e:	b10b      	cbz	r3, 8019e24 <_svfiprintf_r+0x58>
 8019e20:	2b25      	cmp	r3, #37	; 0x25
 8019e22:	d13e      	bne.n	8019ea2 <_svfiprintf_r+0xd6>
 8019e24:	ebb7 0a06 	subs.w	sl, r7, r6
 8019e28:	d00b      	beq.n	8019e42 <_svfiprintf_r+0x76>
 8019e2a:	4653      	mov	r3, sl
 8019e2c:	4632      	mov	r2, r6
 8019e2e:	4621      	mov	r1, r4
 8019e30:	4640      	mov	r0, r8
 8019e32:	f7ff ff71 	bl	8019d18 <__ssputs_r>
 8019e36:	3001      	adds	r0, #1
 8019e38:	f000 80a4 	beq.w	8019f84 <_svfiprintf_r+0x1b8>
 8019e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e3e:	4453      	add	r3, sl
 8019e40:	9309      	str	r3, [sp, #36]	; 0x24
 8019e42:	783b      	ldrb	r3, [r7, #0]
 8019e44:	2b00      	cmp	r3, #0
 8019e46:	f000 809d 	beq.w	8019f84 <_svfiprintf_r+0x1b8>
 8019e4a:	2300      	movs	r3, #0
 8019e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8019e50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019e54:	9304      	str	r3, [sp, #16]
 8019e56:	9307      	str	r3, [sp, #28]
 8019e58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019e5c:	931a      	str	r3, [sp, #104]	; 0x68
 8019e5e:	462f      	mov	r7, r5
 8019e60:	2205      	movs	r2, #5
 8019e62:	f817 1b01 	ldrb.w	r1, [r7], #1
 8019e66:	4850      	ldr	r0, [pc, #320]	; (8019fa8 <_svfiprintf_r+0x1dc>)
 8019e68:	f7e6 fa42 	bl	80002f0 <memchr>
 8019e6c:	9b04      	ldr	r3, [sp, #16]
 8019e6e:	b9d0      	cbnz	r0, 8019ea6 <_svfiprintf_r+0xda>
 8019e70:	06d9      	lsls	r1, r3, #27
 8019e72:	bf44      	itt	mi
 8019e74:	2220      	movmi	r2, #32
 8019e76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019e7a:	071a      	lsls	r2, r3, #28
 8019e7c:	bf44      	itt	mi
 8019e7e:	222b      	movmi	r2, #43	; 0x2b
 8019e80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019e84:	782a      	ldrb	r2, [r5, #0]
 8019e86:	2a2a      	cmp	r2, #42	; 0x2a
 8019e88:	d015      	beq.n	8019eb6 <_svfiprintf_r+0xea>
 8019e8a:	9a07      	ldr	r2, [sp, #28]
 8019e8c:	462f      	mov	r7, r5
 8019e8e:	2000      	movs	r0, #0
 8019e90:	250a      	movs	r5, #10
 8019e92:	4639      	mov	r1, r7
 8019e94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019e98:	3b30      	subs	r3, #48	; 0x30
 8019e9a:	2b09      	cmp	r3, #9
 8019e9c:	d94d      	bls.n	8019f3a <_svfiprintf_r+0x16e>
 8019e9e:	b1b8      	cbz	r0, 8019ed0 <_svfiprintf_r+0x104>
 8019ea0:	e00f      	b.n	8019ec2 <_svfiprintf_r+0xf6>
 8019ea2:	462f      	mov	r7, r5
 8019ea4:	e7b8      	b.n	8019e18 <_svfiprintf_r+0x4c>
 8019ea6:	4a40      	ldr	r2, [pc, #256]	; (8019fa8 <_svfiprintf_r+0x1dc>)
 8019ea8:	1a80      	subs	r0, r0, r2
 8019eaa:	fa0b f000 	lsl.w	r0, fp, r0
 8019eae:	4318      	orrs	r0, r3
 8019eb0:	9004      	str	r0, [sp, #16]
 8019eb2:	463d      	mov	r5, r7
 8019eb4:	e7d3      	b.n	8019e5e <_svfiprintf_r+0x92>
 8019eb6:	9a03      	ldr	r2, [sp, #12]
 8019eb8:	1d11      	adds	r1, r2, #4
 8019eba:	6812      	ldr	r2, [r2, #0]
 8019ebc:	9103      	str	r1, [sp, #12]
 8019ebe:	2a00      	cmp	r2, #0
 8019ec0:	db01      	blt.n	8019ec6 <_svfiprintf_r+0xfa>
 8019ec2:	9207      	str	r2, [sp, #28]
 8019ec4:	e004      	b.n	8019ed0 <_svfiprintf_r+0x104>
 8019ec6:	4252      	negs	r2, r2
 8019ec8:	f043 0302 	orr.w	r3, r3, #2
 8019ecc:	9207      	str	r2, [sp, #28]
 8019ece:	9304      	str	r3, [sp, #16]
 8019ed0:	783b      	ldrb	r3, [r7, #0]
 8019ed2:	2b2e      	cmp	r3, #46	; 0x2e
 8019ed4:	d10c      	bne.n	8019ef0 <_svfiprintf_r+0x124>
 8019ed6:	787b      	ldrb	r3, [r7, #1]
 8019ed8:	2b2a      	cmp	r3, #42	; 0x2a
 8019eda:	d133      	bne.n	8019f44 <_svfiprintf_r+0x178>
 8019edc:	9b03      	ldr	r3, [sp, #12]
 8019ede:	1d1a      	adds	r2, r3, #4
 8019ee0:	681b      	ldr	r3, [r3, #0]
 8019ee2:	9203      	str	r2, [sp, #12]
 8019ee4:	2b00      	cmp	r3, #0
 8019ee6:	bfb8      	it	lt
 8019ee8:	f04f 33ff 	movlt.w	r3, #4294967295
 8019eec:	3702      	adds	r7, #2
 8019eee:	9305      	str	r3, [sp, #20]
 8019ef0:	4d2e      	ldr	r5, [pc, #184]	; (8019fac <_svfiprintf_r+0x1e0>)
 8019ef2:	7839      	ldrb	r1, [r7, #0]
 8019ef4:	2203      	movs	r2, #3
 8019ef6:	4628      	mov	r0, r5
 8019ef8:	f7e6 f9fa 	bl	80002f0 <memchr>
 8019efc:	b138      	cbz	r0, 8019f0e <_svfiprintf_r+0x142>
 8019efe:	2340      	movs	r3, #64	; 0x40
 8019f00:	1b40      	subs	r0, r0, r5
 8019f02:	fa03 f000 	lsl.w	r0, r3, r0
 8019f06:	9b04      	ldr	r3, [sp, #16]
 8019f08:	4303      	orrs	r3, r0
 8019f0a:	3701      	adds	r7, #1
 8019f0c:	9304      	str	r3, [sp, #16]
 8019f0e:	7839      	ldrb	r1, [r7, #0]
 8019f10:	4827      	ldr	r0, [pc, #156]	; (8019fb0 <_svfiprintf_r+0x1e4>)
 8019f12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019f16:	2206      	movs	r2, #6
 8019f18:	1c7e      	adds	r6, r7, #1
 8019f1a:	f7e6 f9e9 	bl	80002f0 <memchr>
 8019f1e:	2800      	cmp	r0, #0
 8019f20:	d038      	beq.n	8019f94 <_svfiprintf_r+0x1c8>
 8019f22:	4b24      	ldr	r3, [pc, #144]	; (8019fb4 <_svfiprintf_r+0x1e8>)
 8019f24:	bb13      	cbnz	r3, 8019f6c <_svfiprintf_r+0x1a0>
 8019f26:	9b03      	ldr	r3, [sp, #12]
 8019f28:	3307      	adds	r3, #7
 8019f2a:	f023 0307 	bic.w	r3, r3, #7
 8019f2e:	3308      	adds	r3, #8
 8019f30:	9303      	str	r3, [sp, #12]
 8019f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f34:	444b      	add	r3, r9
 8019f36:	9309      	str	r3, [sp, #36]	; 0x24
 8019f38:	e76d      	b.n	8019e16 <_svfiprintf_r+0x4a>
 8019f3a:	fb05 3202 	mla	r2, r5, r2, r3
 8019f3e:	2001      	movs	r0, #1
 8019f40:	460f      	mov	r7, r1
 8019f42:	e7a6      	b.n	8019e92 <_svfiprintf_r+0xc6>
 8019f44:	2300      	movs	r3, #0
 8019f46:	3701      	adds	r7, #1
 8019f48:	9305      	str	r3, [sp, #20]
 8019f4a:	4619      	mov	r1, r3
 8019f4c:	250a      	movs	r5, #10
 8019f4e:	4638      	mov	r0, r7
 8019f50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019f54:	3a30      	subs	r2, #48	; 0x30
 8019f56:	2a09      	cmp	r2, #9
 8019f58:	d903      	bls.n	8019f62 <_svfiprintf_r+0x196>
 8019f5a:	2b00      	cmp	r3, #0
 8019f5c:	d0c8      	beq.n	8019ef0 <_svfiprintf_r+0x124>
 8019f5e:	9105      	str	r1, [sp, #20]
 8019f60:	e7c6      	b.n	8019ef0 <_svfiprintf_r+0x124>
 8019f62:	fb05 2101 	mla	r1, r5, r1, r2
 8019f66:	2301      	movs	r3, #1
 8019f68:	4607      	mov	r7, r0
 8019f6a:	e7f0      	b.n	8019f4e <_svfiprintf_r+0x182>
 8019f6c:	ab03      	add	r3, sp, #12
 8019f6e:	9300      	str	r3, [sp, #0]
 8019f70:	4622      	mov	r2, r4
 8019f72:	4b11      	ldr	r3, [pc, #68]	; (8019fb8 <_svfiprintf_r+0x1ec>)
 8019f74:	a904      	add	r1, sp, #16
 8019f76:	4640      	mov	r0, r8
 8019f78:	f3af 8000 	nop.w
 8019f7c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019f80:	4681      	mov	r9, r0
 8019f82:	d1d6      	bne.n	8019f32 <_svfiprintf_r+0x166>
 8019f84:	89a3      	ldrh	r3, [r4, #12]
 8019f86:	065b      	lsls	r3, r3, #25
 8019f88:	f53f af35 	bmi.w	8019df6 <_svfiprintf_r+0x2a>
 8019f8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019f8e:	b01d      	add	sp, #116	; 0x74
 8019f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f94:	ab03      	add	r3, sp, #12
 8019f96:	9300      	str	r3, [sp, #0]
 8019f98:	4622      	mov	r2, r4
 8019f9a:	4b07      	ldr	r3, [pc, #28]	; (8019fb8 <_svfiprintf_r+0x1ec>)
 8019f9c:	a904      	add	r1, sp, #16
 8019f9e:	4640      	mov	r0, r8
 8019fa0:	f000 f9c2 	bl	801a328 <_printf_i>
 8019fa4:	e7ea      	b.n	8019f7c <_svfiprintf_r+0x1b0>
 8019fa6:	bf00      	nop
 8019fa8:	0801b0ac 	.word	0x0801b0ac
 8019fac:	0801b0b2 	.word	0x0801b0b2
 8019fb0:	0801b0b6 	.word	0x0801b0b6
 8019fb4:	00000000 	.word	0x00000000
 8019fb8:	08019d19 	.word	0x08019d19

08019fbc <__sfputc_r>:
 8019fbc:	6893      	ldr	r3, [r2, #8]
 8019fbe:	3b01      	subs	r3, #1
 8019fc0:	2b00      	cmp	r3, #0
 8019fc2:	b410      	push	{r4}
 8019fc4:	6093      	str	r3, [r2, #8]
 8019fc6:	da08      	bge.n	8019fda <__sfputc_r+0x1e>
 8019fc8:	6994      	ldr	r4, [r2, #24]
 8019fca:	42a3      	cmp	r3, r4
 8019fcc:	db01      	blt.n	8019fd2 <__sfputc_r+0x16>
 8019fce:	290a      	cmp	r1, #10
 8019fd0:	d103      	bne.n	8019fda <__sfputc_r+0x1e>
 8019fd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019fd6:	f7ff bbff 	b.w	80197d8 <__swbuf_r>
 8019fda:	6813      	ldr	r3, [r2, #0]
 8019fdc:	1c58      	adds	r0, r3, #1
 8019fde:	6010      	str	r0, [r2, #0]
 8019fe0:	7019      	strb	r1, [r3, #0]
 8019fe2:	4608      	mov	r0, r1
 8019fe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019fe8:	4770      	bx	lr

08019fea <__sfputs_r>:
 8019fea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019fec:	4606      	mov	r6, r0
 8019fee:	460f      	mov	r7, r1
 8019ff0:	4614      	mov	r4, r2
 8019ff2:	18d5      	adds	r5, r2, r3
 8019ff4:	42ac      	cmp	r4, r5
 8019ff6:	d101      	bne.n	8019ffc <__sfputs_r+0x12>
 8019ff8:	2000      	movs	r0, #0
 8019ffa:	e007      	b.n	801a00c <__sfputs_r+0x22>
 8019ffc:	463a      	mov	r2, r7
 8019ffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a002:	4630      	mov	r0, r6
 801a004:	f7ff ffda 	bl	8019fbc <__sfputc_r>
 801a008:	1c43      	adds	r3, r0, #1
 801a00a:	d1f3      	bne.n	8019ff4 <__sfputs_r+0xa>
 801a00c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a010 <_vfiprintf_r>:
 801a010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a014:	460c      	mov	r4, r1
 801a016:	b09d      	sub	sp, #116	; 0x74
 801a018:	4617      	mov	r7, r2
 801a01a:	461d      	mov	r5, r3
 801a01c:	4606      	mov	r6, r0
 801a01e:	b118      	cbz	r0, 801a028 <_vfiprintf_r+0x18>
 801a020:	6983      	ldr	r3, [r0, #24]
 801a022:	b90b      	cbnz	r3, 801a028 <_vfiprintf_r+0x18>
 801a024:	f7ff fd88 	bl	8019b38 <__sinit>
 801a028:	4b7c      	ldr	r3, [pc, #496]	; (801a21c <_vfiprintf_r+0x20c>)
 801a02a:	429c      	cmp	r4, r3
 801a02c:	d158      	bne.n	801a0e0 <_vfiprintf_r+0xd0>
 801a02e:	6874      	ldr	r4, [r6, #4]
 801a030:	89a3      	ldrh	r3, [r4, #12]
 801a032:	0718      	lsls	r0, r3, #28
 801a034:	d55e      	bpl.n	801a0f4 <_vfiprintf_r+0xe4>
 801a036:	6923      	ldr	r3, [r4, #16]
 801a038:	2b00      	cmp	r3, #0
 801a03a:	d05b      	beq.n	801a0f4 <_vfiprintf_r+0xe4>
 801a03c:	2300      	movs	r3, #0
 801a03e:	9309      	str	r3, [sp, #36]	; 0x24
 801a040:	2320      	movs	r3, #32
 801a042:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a046:	2330      	movs	r3, #48	; 0x30
 801a048:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a04c:	9503      	str	r5, [sp, #12]
 801a04e:	f04f 0b01 	mov.w	fp, #1
 801a052:	46b8      	mov	r8, r7
 801a054:	4645      	mov	r5, r8
 801a056:	f815 3b01 	ldrb.w	r3, [r5], #1
 801a05a:	b10b      	cbz	r3, 801a060 <_vfiprintf_r+0x50>
 801a05c:	2b25      	cmp	r3, #37	; 0x25
 801a05e:	d154      	bne.n	801a10a <_vfiprintf_r+0xfa>
 801a060:	ebb8 0a07 	subs.w	sl, r8, r7
 801a064:	d00b      	beq.n	801a07e <_vfiprintf_r+0x6e>
 801a066:	4653      	mov	r3, sl
 801a068:	463a      	mov	r2, r7
 801a06a:	4621      	mov	r1, r4
 801a06c:	4630      	mov	r0, r6
 801a06e:	f7ff ffbc 	bl	8019fea <__sfputs_r>
 801a072:	3001      	adds	r0, #1
 801a074:	f000 80c2 	beq.w	801a1fc <_vfiprintf_r+0x1ec>
 801a078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a07a:	4453      	add	r3, sl
 801a07c:	9309      	str	r3, [sp, #36]	; 0x24
 801a07e:	f898 3000 	ldrb.w	r3, [r8]
 801a082:	2b00      	cmp	r3, #0
 801a084:	f000 80ba 	beq.w	801a1fc <_vfiprintf_r+0x1ec>
 801a088:	2300      	movs	r3, #0
 801a08a:	f04f 32ff 	mov.w	r2, #4294967295
 801a08e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a092:	9304      	str	r3, [sp, #16]
 801a094:	9307      	str	r3, [sp, #28]
 801a096:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a09a:	931a      	str	r3, [sp, #104]	; 0x68
 801a09c:	46a8      	mov	r8, r5
 801a09e:	2205      	movs	r2, #5
 801a0a0:	f818 1b01 	ldrb.w	r1, [r8], #1
 801a0a4:	485e      	ldr	r0, [pc, #376]	; (801a220 <_vfiprintf_r+0x210>)
 801a0a6:	f7e6 f923 	bl	80002f0 <memchr>
 801a0aa:	9b04      	ldr	r3, [sp, #16]
 801a0ac:	bb78      	cbnz	r0, 801a10e <_vfiprintf_r+0xfe>
 801a0ae:	06d9      	lsls	r1, r3, #27
 801a0b0:	bf44      	itt	mi
 801a0b2:	2220      	movmi	r2, #32
 801a0b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a0b8:	071a      	lsls	r2, r3, #28
 801a0ba:	bf44      	itt	mi
 801a0bc:	222b      	movmi	r2, #43	; 0x2b
 801a0be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a0c2:	782a      	ldrb	r2, [r5, #0]
 801a0c4:	2a2a      	cmp	r2, #42	; 0x2a
 801a0c6:	d02a      	beq.n	801a11e <_vfiprintf_r+0x10e>
 801a0c8:	9a07      	ldr	r2, [sp, #28]
 801a0ca:	46a8      	mov	r8, r5
 801a0cc:	2000      	movs	r0, #0
 801a0ce:	250a      	movs	r5, #10
 801a0d0:	4641      	mov	r1, r8
 801a0d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a0d6:	3b30      	subs	r3, #48	; 0x30
 801a0d8:	2b09      	cmp	r3, #9
 801a0da:	d969      	bls.n	801a1b0 <_vfiprintf_r+0x1a0>
 801a0dc:	b360      	cbz	r0, 801a138 <_vfiprintf_r+0x128>
 801a0de:	e024      	b.n	801a12a <_vfiprintf_r+0x11a>
 801a0e0:	4b50      	ldr	r3, [pc, #320]	; (801a224 <_vfiprintf_r+0x214>)
 801a0e2:	429c      	cmp	r4, r3
 801a0e4:	d101      	bne.n	801a0ea <_vfiprintf_r+0xda>
 801a0e6:	68b4      	ldr	r4, [r6, #8]
 801a0e8:	e7a2      	b.n	801a030 <_vfiprintf_r+0x20>
 801a0ea:	4b4f      	ldr	r3, [pc, #316]	; (801a228 <_vfiprintf_r+0x218>)
 801a0ec:	429c      	cmp	r4, r3
 801a0ee:	bf08      	it	eq
 801a0f0:	68f4      	ldreq	r4, [r6, #12]
 801a0f2:	e79d      	b.n	801a030 <_vfiprintf_r+0x20>
 801a0f4:	4621      	mov	r1, r4
 801a0f6:	4630      	mov	r0, r6
 801a0f8:	f7ff fbc0 	bl	801987c <__swsetup_r>
 801a0fc:	2800      	cmp	r0, #0
 801a0fe:	d09d      	beq.n	801a03c <_vfiprintf_r+0x2c>
 801a100:	f04f 30ff 	mov.w	r0, #4294967295
 801a104:	b01d      	add	sp, #116	; 0x74
 801a106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a10a:	46a8      	mov	r8, r5
 801a10c:	e7a2      	b.n	801a054 <_vfiprintf_r+0x44>
 801a10e:	4a44      	ldr	r2, [pc, #272]	; (801a220 <_vfiprintf_r+0x210>)
 801a110:	1a80      	subs	r0, r0, r2
 801a112:	fa0b f000 	lsl.w	r0, fp, r0
 801a116:	4318      	orrs	r0, r3
 801a118:	9004      	str	r0, [sp, #16]
 801a11a:	4645      	mov	r5, r8
 801a11c:	e7be      	b.n	801a09c <_vfiprintf_r+0x8c>
 801a11e:	9a03      	ldr	r2, [sp, #12]
 801a120:	1d11      	adds	r1, r2, #4
 801a122:	6812      	ldr	r2, [r2, #0]
 801a124:	9103      	str	r1, [sp, #12]
 801a126:	2a00      	cmp	r2, #0
 801a128:	db01      	blt.n	801a12e <_vfiprintf_r+0x11e>
 801a12a:	9207      	str	r2, [sp, #28]
 801a12c:	e004      	b.n	801a138 <_vfiprintf_r+0x128>
 801a12e:	4252      	negs	r2, r2
 801a130:	f043 0302 	orr.w	r3, r3, #2
 801a134:	9207      	str	r2, [sp, #28]
 801a136:	9304      	str	r3, [sp, #16]
 801a138:	f898 3000 	ldrb.w	r3, [r8]
 801a13c:	2b2e      	cmp	r3, #46	; 0x2e
 801a13e:	d10e      	bne.n	801a15e <_vfiprintf_r+0x14e>
 801a140:	f898 3001 	ldrb.w	r3, [r8, #1]
 801a144:	2b2a      	cmp	r3, #42	; 0x2a
 801a146:	d138      	bne.n	801a1ba <_vfiprintf_r+0x1aa>
 801a148:	9b03      	ldr	r3, [sp, #12]
 801a14a:	1d1a      	adds	r2, r3, #4
 801a14c:	681b      	ldr	r3, [r3, #0]
 801a14e:	9203      	str	r2, [sp, #12]
 801a150:	2b00      	cmp	r3, #0
 801a152:	bfb8      	it	lt
 801a154:	f04f 33ff 	movlt.w	r3, #4294967295
 801a158:	f108 0802 	add.w	r8, r8, #2
 801a15c:	9305      	str	r3, [sp, #20]
 801a15e:	4d33      	ldr	r5, [pc, #204]	; (801a22c <_vfiprintf_r+0x21c>)
 801a160:	f898 1000 	ldrb.w	r1, [r8]
 801a164:	2203      	movs	r2, #3
 801a166:	4628      	mov	r0, r5
 801a168:	f7e6 f8c2 	bl	80002f0 <memchr>
 801a16c:	b140      	cbz	r0, 801a180 <_vfiprintf_r+0x170>
 801a16e:	2340      	movs	r3, #64	; 0x40
 801a170:	1b40      	subs	r0, r0, r5
 801a172:	fa03 f000 	lsl.w	r0, r3, r0
 801a176:	9b04      	ldr	r3, [sp, #16]
 801a178:	4303      	orrs	r3, r0
 801a17a:	f108 0801 	add.w	r8, r8, #1
 801a17e:	9304      	str	r3, [sp, #16]
 801a180:	f898 1000 	ldrb.w	r1, [r8]
 801a184:	482a      	ldr	r0, [pc, #168]	; (801a230 <_vfiprintf_r+0x220>)
 801a186:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a18a:	2206      	movs	r2, #6
 801a18c:	f108 0701 	add.w	r7, r8, #1
 801a190:	f7e6 f8ae 	bl	80002f0 <memchr>
 801a194:	2800      	cmp	r0, #0
 801a196:	d037      	beq.n	801a208 <_vfiprintf_r+0x1f8>
 801a198:	4b26      	ldr	r3, [pc, #152]	; (801a234 <_vfiprintf_r+0x224>)
 801a19a:	bb1b      	cbnz	r3, 801a1e4 <_vfiprintf_r+0x1d4>
 801a19c:	9b03      	ldr	r3, [sp, #12]
 801a19e:	3307      	adds	r3, #7
 801a1a0:	f023 0307 	bic.w	r3, r3, #7
 801a1a4:	3308      	adds	r3, #8
 801a1a6:	9303      	str	r3, [sp, #12]
 801a1a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a1aa:	444b      	add	r3, r9
 801a1ac:	9309      	str	r3, [sp, #36]	; 0x24
 801a1ae:	e750      	b.n	801a052 <_vfiprintf_r+0x42>
 801a1b0:	fb05 3202 	mla	r2, r5, r2, r3
 801a1b4:	2001      	movs	r0, #1
 801a1b6:	4688      	mov	r8, r1
 801a1b8:	e78a      	b.n	801a0d0 <_vfiprintf_r+0xc0>
 801a1ba:	2300      	movs	r3, #0
 801a1bc:	f108 0801 	add.w	r8, r8, #1
 801a1c0:	9305      	str	r3, [sp, #20]
 801a1c2:	4619      	mov	r1, r3
 801a1c4:	250a      	movs	r5, #10
 801a1c6:	4640      	mov	r0, r8
 801a1c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a1cc:	3a30      	subs	r2, #48	; 0x30
 801a1ce:	2a09      	cmp	r2, #9
 801a1d0:	d903      	bls.n	801a1da <_vfiprintf_r+0x1ca>
 801a1d2:	2b00      	cmp	r3, #0
 801a1d4:	d0c3      	beq.n	801a15e <_vfiprintf_r+0x14e>
 801a1d6:	9105      	str	r1, [sp, #20]
 801a1d8:	e7c1      	b.n	801a15e <_vfiprintf_r+0x14e>
 801a1da:	fb05 2101 	mla	r1, r5, r1, r2
 801a1de:	2301      	movs	r3, #1
 801a1e0:	4680      	mov	r8, r0
 801a1e2:	e7f0      	b.n	801a1c6 <_vfiprintf_r+0x1b6>
 801a1e4:	ab03      	add	r3, sp, #12
 801a1e6:	9300      	str	r3, [sp, #0]
 801a1e8:	4622      	mov	r2, r4
 801a1ea:	4b13      	ldr	r3, [pc, #76]	; (801a238 <_vfiprintf_r+0x228>)
 801a1ec:	a904      	add	r1, sp, #16
 801a1ee:	4630      	mov	r0, r6
 801a1f0:	f3af 8000 	nop.w
 801a1f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 801a1f8:	4681      	mov	r9, r0
 801a1fa:	d1d5      	bne.n	801a1a8 <_vfiprintf_r+0x198>
 801a1fc:	89a3      	ldrh	r3, [r4, #12]
 801a1fe:	065b      	lsls	r3, r3, #25
 801a200:	f53f af7e 	bmi.w	801a100 <_vfiprintf_r+0xf0>
 801a204:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a206:	e77d      	b.n	801a104 <_vfiprintf_r+0xf4>
 801a208:	ab03      	add	r3, sp, #12
 801a20a:	9300      	str	r3, [sp, #0]
 801a20c:	4622      	mov	r2, r4
 801a20e:	4b0a      	ldr	r3, [pc, #40]	; (801a238 <_vfiprintf_r+0x228>)
 801a210:	a904      	add	r1, sp, #16
 801a212:	4630      	mov	r0, r6
 801a214:	f000 f888 	bl	801a328 <_printf_i>
 801a218:	e7ec      	b.n	801a1f4 <_vfiprintf_r+0x1e4>
 801a21a:	bf00      	nop
 801a21c:	0801b06c 	.word	0x0801b06c
 801a220:	0801b0ac 	.word	0x0801b0ac
 801a224:	0801b08c 	.word	0x0801b08c
 801a228:	0801b04c 	.word	0x0801b04c
 801a22c:	0801b0b2 	.word	0x0801b0b2
 801a230:	0801b0b6 	.word	0x0801b0b6
 801a234:	00000000 	.word	0x00000000
 801a238:	08019feb 	.word	0x08019feb

0801a23c <_printf_common>:
 801a23c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a240:	4691      	mov	r9, r2
 801a242:	461f      	mov	r7, r3
 801a244:	688a      	ldr	r2, [r1, #8]
 801a246:	690b      	ldr	r3, [r1, #16]
 801a248:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a24c:	4293      	cmp	r3, r2
 801a24e:	bfb8      	it	lt
 801a250:	4613      	movlt	r3, r2
 801a252:	f8c9 3000 	str.w	r3, [r9]
 801a256:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a25a:	4606      	mov	r6, r0
 801a25c:	460c      	mov	r4, r1
 801a25e:	b112      	cbz	r2, 801a266 <_printf_common+0x2a>
 801a260:	3301      	adds	r3, #1
 801a262:	f8c9 3000 	str.w	r3, [r9]
 801a266:	6823      	ldr	r3, [r4, #0]
 801a268:	0699      	lsls	r1, r3, #26
 801a26a:	bf42      	ittt	mi
 801a26c:	f8d9 3000 	ldrmi.w	r3, [r9]
 801a270:	3302      	addmi	r3, #2
 801a272:	f8c9 3000 	strmi.w	r3, [r9]
 801a276:	6825      	ldr	r5, [r4, #0]
 801a278:	f015 0506 	ands.w	r5, r5, #6
 801a27c:	d107      	bne.n	801a28e <_printf_common+0x52>
 801a27e:	f104 0a19 	add.w	sl, r4, #25
 801a282:	68e3      	ldr	r3, [r4, #12]
 801a284:	f8d9 2000 	ldr.w	r2, [r9]
 801a288:	1a9b      	subs	r3, r3, r2
 801a28a:	42ab      	cmp	r3, r5
 801a28c:	dc28      	bgt.n	801a2e0 <_printf_common+0xa4>
 801a28e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801a292:	6822      	ldr	r2, [r4, #0]
 801a294:	3300      	adds	r3, #0
 801a296:	bf18      	it	ne
 801a298:	2301      	movne	r3, #1
 801a29a:	0692      	lsls	r2, r2, #26
 801a29c:	d42d      	bmi.n	801a2fa <_printf_common+0xbe>
 801a29e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a2a2:	4639      	mov	r1, r7
 801a2a4:	4630      	mov	r0, r6
 801a2a6:	47c0      	blx	r8
 801a2a8:	3001      	adds	r0, #1
 801a2aa:	d020      	beq.n	801a2ee <_printf_common+0xb2>
 801a2ac:	6823      	ldr	r3, [r4, #0]
 801a2ae:	68e5      	ldr	r5, [r4, #12]
 801a2b0:	f8d9 2000 	ldr.w	r2, [r9]
 801a2b4:	f003 0306 	and.w	r3, r3, #6
 801a2b8:	2b04      	cmp	r3, #4
 801a2ba:	bf08      	it	eq
 801a2bc:	1aad      	subeq	r5, r5, r2
 801a2be:	68a3      	ldr	r3, [r4, #8]
 801a2c0:	6922      	ldr	r2, [r4, #16]
 801a2c2:	bf0c      	ite	eq
 801a2c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a2c8:	2500      	movne	r5, #0
 801a2ca:	4293      	cmp	r3, r2
 801a2cc:	bfc4      	itt	gt
 801a2ce:	1a9b      	subgt	r3, r3, r2
 801a2d0:	18ed      	addgt	r5, r5, r3
 801a2d2:	f04f 0900 	mov.w	r9, #0
 801a2d6:	341a      	adds	r4, #26
 801a2d8:	454d      	cmp	r5, r9
 801a2da:	d11a      	bne.n	801a312 <_printf_common+0xd6>
 801a2dc:	2000      	movs	r0, #0
 801a2de:	e008      	b.n	801a2f2 <_printf_common+0xb6>
 801a2e0:	2301      	movs	r3, #1
 801a2e2:	4652      	mov	r2, sl
 801a2e4:	4639      	mov	r1, r7
 801a2e6:	4630      	mov	r0, r6
 801a2e8:	47c0      	blx	r8
 801a2ea:	3001      	adds	r0, #1
 801a2ec:	d103      	bne.n	801a2f6 <_printf_common+0xba>
 801a2ee:	f04f 30ff 	mov.w	r0, #4294967295
 801a2f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a2f6:	3501      	adds	r5, #1
 801a2f8:	e7c3      	b.n	801a282 <_printf_common+0x46>
 801a2fa:	18e1      	adds	r1, r4, r3
 801a2fc:	1c5a      	adds	r2, r3, #1
 801a2fe:	2030      	movs	r0, #48	; 0x30
 801a300:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a304:	4422      	add	r2, r4
 801a306:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a30a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a30e:	3302      	adds	r3, #2
 801a310:	e7c5      	b.n	801a29e <_printf_common+0x62>
 801a312:	2301      	movs	r3, #1
 801a314:	4622      	mov	r2, r4
 801a316:	4639      	mov	r1, r7
 801a318:	4630      	mov	r0, r6
 801a31a:	47c0      	blx	r8
 801a31c:	3001      	adds	r0, #1
 801a31e:	d0e6      	beq.n	801a2ee <_printf_common+0xb2>
 801a320:	f109 0901 	add.w	r9, r9, #1
 801a324:	e7d8      	b.n	801a2d8 <_printf_common+0x9c>
	...

0801a328 <_printf_i>:
 801a328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a32c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801a330:	460c      	mov	r4, r1
 801a332:	7e09      	ldrb	r1, [r1, #24]
 801a334:	b085      	sub	sp, #20
 801a336:	296e      	cmp	r1, #110	; 0x6e
 801a338:	4617      	mov	r7, r2
 801a33a:	4606      	mov	r6, r0
 801a33c:	4698      	mov	r8, r3
 801a33e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a340:	f000 80b3 	beq.w	801a4aa <_printf_i+0x182>
 801a344:	d822      	bhi.n	801a38c <_printf_i+0x64>
 801a346:	2963      	cmp	r1, #99	; 0x63
 801a348:	d036      	beq.n	801a3b8 <_printf_i+0x90>
 801a34a:	d80a      	bhi.n	801a362 <_printf_i+0x3a>
 801a34c:	2900      	cmp	r1, #0
 801a34e:	f000 80b9 	beq.w	801a4c4 <_printf_i+0x19c>
 801a352:	2958      	cmp	r1, #88	; 0x58
 801a354:	f000 8083 	beq.w	801a45e <_printf_i+0x136>
 801a358:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a35c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801a360:	e032      	b.n	801a3c8 <_printf_i+0xa0>
 801a362:	2964      	cmp	r1, #100	; 0x64
 801a364:	d001      	beq.n	801a36a <_printf_i+0x42>
 801a366:	2969      	cmp	r1, #105	; 0x69
 801a368:	d1f6      	bne.n	801a358 <_printf_i+0x30>
 801a36a:	6820      	ldr	r0, [r4, #0]
 801a36c:	6813      	ldr	r3, [r2, #0]
 801a36e:	0605      	lsls	r5, r0, #24
 801a370:	f103 0104 	add.w	r1, r3, #4
 801a374:	d52a      	bpl.n	801a3cc <_printf_i+0xa4>
 801a376:	681b      	ldr	r3, [r3, #0]
 801a378:	6011      	str	r1, [r2, #0]
 801a37a:	2b00      	cmp	r3, #0
 801a37c:	da03      	bge.n	801a386 <_printf_i+0x5e>
 801a37e:	222d      	movs	r2, #45	; 0x2d
 801a380:	425b      	negs	r3, r3
 801a382:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801a386:	486f      	ldr	r0, [pc, #444]	; (801a544 <_printf_i+0x21c>)
 801a388:	220a      	movs	r2, #10
 801a38a:	e039      	b.n	801a400 <_printf_i+0xd8>
 801a38c:	2973      	cmp	r1, #115	; 0x73
 801a38e:	f000 809d 	beq.w	801a4cc <_printf_i+0x1a4>
 801a392:	d808      	bhi.n	801a3a6 <_printf_i+0x7e>
 801a394:	296f      	cmp	r1, #111	; 0x6f
 801a396:	d020      	beq.n	801a3da <_printf_i+0xb2>
 801a398:	2970      	cmp	r1, #112	; 0x70
 801a39a:	d1dd      	bne.n	801a358 <_printf_i+0x30>
 801a39c:	6823      	ldr	r3, [r4, #0]
 801a39e:	f043 0320 	orr.w	r3, r3, #32
 801a3a2:	6023      	str	r3, [r4, #0]
 801a3a4:	e003      	b.n	801a3ae <_printf_i+0x86>
 801a3a6:	2975      	cmp	r1, #117	; 0x75
 801a3a8:	d017      	beq.n	801a3da <_printf_i+0xb2>
 801a3aa:	2978      	cmp	r1, #120	; 0x78
 801a3ac:	d1d4      	bne.n	801a358 <_printf_i+0x30>
 801a3ae:	2378      	movs	r3, #120	; 0x78
 801a3b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a3b4:	4864      	ldr	r0, [pc, #400]	; (801a548 <_printf_i+0x220>)
 801a3b6:	e055      	b.n	801a464 <_printf_i+0x13c>
 801a3b8:	6813      	ldr	r3, [r2, #0]
 801a3ba:	1d19      	adds	r1, r3, #4
 801a3bc:	681b      	ldr	r3, [r3, #0]
 801a3be:	6011      	str	r1, [r2, #0]
 801a3c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a3c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a3c8:	2301      	movs	r3, #1
 801a3ca:	e08c      	b.n	801a4e6 <_printf_i+0x1be>
 801a3cc:	681b      	ldr	r3, [r3, #0]
 801a3ce:	6011      	str	r1, [r2, #0]
 801a3d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a3d4:	bf18      	it	ne
 801a3d6:	b21b      	sxthne	r3, r3
 801a3d8:	e7cf      	b.n	801a37a <_printf_i+0x52>
 801a3da:	6813      	ldr	r3, [r2, #0]
 801a3dc:	6825      	ldr	r5, [r4, #0]
 801a3de:	1d18      	adds	r0, r3, #4
 801a3e0:	6010      	str	r0, [r2, #0]
 801a3e2:	0628      	lsls	r0, r5, #24
 801a3e4:	d501      	bpl.n	801a3ea <_printf_i+0xc2>
 801a3e6:	681b      	ldr	r3, [r3, #0]
 801a3e8:	e002      	b.n	801a3f0 <_printf_i+0xc8>
 801a3ea:	0668      	lsls	r0, r5, #25
 801a3ec:	d5fb      	bpl.n	801a3e6 <_printf_i+0xbe>
 801a3ee:	881b      	ldrh	r3, [r3, #0]
 801a3f0:	4854      	ldr	r0, [pc, #336]	; (801a544 <_printf_i+0x21c>)
 801a3f2:	296f      	cmp	r1, #111	; 0x6f
 801a3f4:	bf14      	ite	ne
 801a3f6:	220a      	movne	r2, #10
 801a3f8:	2208      	moveq	r2, #8
 801a3fa:	2100      	movs	r1, #0
 801a3fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a400:	6865      	ldr	r5, [r4, #4]
 801a402:	60a5      	str	r5, [r4, #8]
 801a404:	2d00      	cmp	r5, #0
 801a406:	f2c0 8095 	blt.w	801a534 <_printf_i+0x20c>
 801a40a:	6821      	ldr	r1, [r4, #0]
 801a40c:	f021 0104 	bic.w	r1, r1, #4
 801a410:	6021      	str	r1, [r4, #0]
 801a412:	2b00      	cmp	r3, #0
 801a414:	d13d      	bne.n	801a492 <_printf_i+0x16a>
 801a416:	2d00      	cmp	r5, #0
 801a418:	f040 808e 	bne.w	801a538 <_printf_i+0x210>
 801a41c:	4665      	mov	r5, ip
 801a41e:	2a08      	cmp	r2, #8
 801a420:	d10b      	bne.n	801a43a <_printf_i+0x112>
 801a422:	6823      	ldr	r3, [r4, #0]
 801a424:	07db      	lsls	r3, r3, #31
 801a426:	d508      	bpl.n	801a43a <_printf_i+0x112>
 801a428:	6923      	ldr	r3, [r4, #16]
 801a42a:	6862      	ldr	r2, [r4, #4]
 801a42c:	429a      	cmp	r2, r3
 801a42e:	bfde      	ittt	le
 801a430:	2330      	movle	r3, #48	; 0x30
 801a432:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a436:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a43a:	ebac 0305 	sub.w	r3, ip, r5
 801a43e:	6123      	str	r3, [r4, #16]
 801a440:	f8cd 8000 	str.w	r8, [sp]
 801a444:	463b      	mov	r3, r7
 801a446:	aa03      	add	r2, sp, #12
 801a448:	4621      	mov	r1, r4
 801a44a:	4630      	mov	r0, r6
 801a44c:	f7ff fef6 	bl	801a23c <_printf_common>
 801a450:	3001      	adds	r0, #1
 801a452:	d14d      	bne.n	801a4f0 <_printf_i+0x1c8>
 801a454:	f04f 30ff 	mov.w	r0, #4294967295
 801a458:	b005      	add	sp, #20
 801a45a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a45e:	4839      	ldr	r0, [pc, #228]	; (801a544 <_printf_i+0x21c>)
 801a460:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801a464:	6813      	ldr	r3, [r2, #0]
 801a466:	6821      	ldr	r1, [r4, #0]
 801a468:	1d1d      	adds	r5, r3, #4
 801a46a:	681b      	ldr	r3, [r3, #0]
 801a46c:	6015      	str	r5, [r2, #0]
 801a46e:	060a      	lsls	r2, r1, #24
 801a470:	d50b      	bpl.n	801a48a <_printf_i+0x162>
 801a472:	07ca      	lsls	r2, r1, #31
 801a474:	bf44      	itt	mi
 801a476:	f041 0120 	orrmi.w	r1, r1, #32
 801a47a:	6021      	strmi	r1, [r4, #0]
 801a47c:	b91b      	cbnz	r3, 801a486 <_printf_i+0x15e>
 801a47e:	6822      	ldr	r2, [r4, #0]
 801a480:	f022 0220 	bic.w	r2, r2, #32
 801a484:	6022      	str	r2, [r4, #0]
 801a486:	2210      	movs	r2, #16
 801a488:	e7b7      	b.n	801a3fa <_printf_i+0xd2>
 801a48a:	064d      	lsls	r5, r1, #25
 801a48c:	bf48      	it	mi
 801a48e:	b29b      	uxthmi	r3, r3
 801a490:	e7ef      	b.n	801a472 <_printf_i+0x14a>
 801a492:	4665      	mov	r5, ip
 801a494:	fbb3 f1f2 	udiv	r1, r3, r2
 801a498:	fb02 3311 	mls	r3, r2, r1, r3
 801a49c:	5cc3      	ldrb	r3, [r0, r3]
 801a49e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801a4a2:	460b      	mov	r3, r1
 801a4a4:	2900      	cmp	r1, #0
 801a4a6:	d1f5      	bne.n	801a494 <_printf_i+0x16c>
 801a4a8:	e7b9      	b.n	801a41e <_printf_i+0xf6>
 801a4aa:	6813      	ldr	r3, [r2, #0]
 801a4ac:	6825      	ldr	r5, [r4, #0]
 801a4ae:	6961      	ldr	r1, [r4, #20]
 801a4b0:	1d18      	adds	r0, r3, #4
 801a4b2:	6010      	str	r0, [r2, #0]
 801a4b4:	0628      	lsls	r0, r5, #24
 801a4b6:	681b      	ldr	r3, [r3, #0]
 801a4b8:	d501      	bpl.n	801a4be <_printf_i+0x196>
 801a4ba:	6019      	str	r1, [r3, #0]
 801a4bc:	e002      	b.n	801a4c4 <_printf_i+0x19c>
 801a4be:	066a      	lsls	r2, r5, #25
 801a4c0:	d5fb      	bpl.n	801a4ba <_printf_i+0x192>
 801a4c2:	8019      	strh	r1, [r3, #0]
 801a4c4:	2300      	movs	r3, #0
 801a4c6:	6123      	str	r3, [r4, #16]
 801a4c8:	4665      	mov	r5, ip
 801a4ca:	e7b9      	b.n	801a440 <_printf_i+0x118>
 801a4cc:	6813      	ldr	r3, [r2, #0]
 801a4ce:	1d19      	adds	r1, r3, #4
 801a4d0:	6011      	str	r1, [r2, #0]
 801a4d2:	681d      	ldr	r5, [r3, #0]
 801a4d4:	6862      	ldr	r2, [r4, #4]
 801a4d6:	2100      	movs	r1, #0
 801a4d8:	4628      	mov	r0, r5
 801a4da:	f7e5 ff09 	bl	80002f0 <memchr>
 801a4de:	b108      	cbz	r0, 801a4e4 <_printf_i+0x1bc>
 801a4e0:	1b40      	subs	r0, r0, r5
 801a4e2:	6060      	str	r0, [r4, #4]
 801a4e4:	6863      	ldr	r3, [r4, #4]
 801a4e6:	6123      	str	r3, [r4, #16]
 801a4e8:	2300      	movs	r3, #0
 801a4ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a4ee:	e7a7      	b.n	801a440 <_printf_i+0x118>
 801a4f0:	6923      	ldr	r3, [r4, #16]
 801a4f2:	462a      	mov	r2, r5
 801a4f4:	4639      	mov	r1, r7
 801a4f6:	4630      	mov	r0, r6
 801a4f8:	47c0      	blx	r8
 801a4fa:	3001      	adds	r0, #1
 801a4fc:	d0aa      	beq.n	801a454 <_printf_i+0x12c>
 801a4fe:	6823      	ldr	r3, [r4, #0]
 801a500:	079b      	lsls	r3, r3, #30
 801a502:	d413      	bmi.n	801a52c <_printf_i+0x204>
 801a504:	68e0      	ldr	r0, [r4, #12]
 801a506:	9b03      	ldr	r3, [sp, #12]
 801a508:	4298      	cmp	r0, r3
 801a50a:	bfb8      	it	lt
 801a50c:	4618      	movlt	r0, r3
 801a50e:	e7a3      	b.n	801a458 <_printf_i+0x130>
 801a510:	2301      	movs	r3, #1
 801a512:	464a      	mov	r2, r9
 801a514:	4639      	mov	r1, r7
 801a516:	4630      	mov	r0, r6
 801a518:	47c0      	blx	r8
 801a51a:	3001      	adds	r0, #1
 801a51c:	d09a      	beq.n	801a454 <_printf_i+0x12c>
 801a51e:	3501      	adds	r5, #1
 801a520:	68e3      	ldr	r3, [r4, #12]
 801a522:	9a03      	ldr	r2, [sp, #12]
 801a524:	1a9b      	subs	r3, r3, r2
 801a526:	42ab      	cmp	r3, r5
 801a528:	dcf2      	bgt.n	801a510 <_printf_i+0x1e8>
 801a52a:	e7eb      	b.n	801a504 <_printf_i+0x1dc>
 801a52c:	2500      	movs	r5, #0
 801a52e:	f104 0919 	add.w	r9, r4, #25
 801a532:	e7f5      	b.n	801a520 <_printf_i+0x1f8>
 801a534:	2b00      	cmp	r3, #0
 801a536:	d1ac      	bne.n	801a492 <_printf_i+0x16a>
 801a538:	7803      	ldrb	r3, [r0, #0]
 801a53a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a53e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a542:	e76c      	b.n	801a41e <_printf_i+0xf6>
 801a544:	0801b0bd 	.word	0x0801b0bd
 801a548:	0801b0ce 	.word	0x0801b0ce

0801a54c <__sread>:
 801a54c:	b510      	push	{r4, lr}
 801a54e:	460c      	mov	r4, r1
 801a550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a554:	f000 f8d4 	bl	801a700 <_read_r>
 801a558:	2800      	cmp	r0, #0
 801a55a:	bfab      	itete	ge
 801a55c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a55e:	89a3      	ldrhlt	r3, [r4, #12]
 801a560:	181b      	addge	r3, r3, r0
 801a562:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a566:	bfac      	ite	ge
 801a568:	6563      	strge	r3, [r4, #84]	; 0x54
 801a56a:	81a3      	strhlt	r3, [r4, #12]
 801a56c:	bd10      	pop	{r4, pc}

0801a56e <__swrite>:
 801a56e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a572:	461f      	mov	r7, r3
 801a574:	898b      	ldrh	r3, [r1, #12]
 801a576:	05db      	lsls	r3, r3, #23
 801a578:	4605      	mov	r5, r0
 801a57a:	460c      	mov	r4, r1
 801a57c:	4616      	mov	r6, r2
 801a57e:	d505      	bpl.n	801a58c <__swrite+0x1e>
 801a580:	2302      	movs	r3, #2
 801a582:	2200      	movs	r2, #0
 801a584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a588:	f000 f868 	bl	801a65c <_lseek_r>
 801a58c:	89a3      	ldrh	r3, [r4, #12]
 801a58e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a592:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a596:	81a3      	strh	r3, [r4, #12]
 801a598:	4632      	mov	r2, r6
 801a59a:	463b      	mov	r3, r7
 801a59c:	4628      	mov	r0, r5
 801a59e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a5a2:	f000 b817 	b.w	801a5d4 <_write_r>

0801a5a6 <__sseek>:
 801a5a6:	b510      	push	{r4, lr}
 801a5a8:	460c      	mov	r4, r1
 801a5aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a5ae:	f000 f855 	bl	801a65c <_lseek_r>
 801a5b2:	1c43      	adds	r3, r0, #1
 801a5b4:	89a3      	ldrh	r3, [r4, #12]
 801a5b6:	bf15      	itete	ne
 801a5b8:	6560      	strne	r0, [r4, #84]	; 0x54
 801a5ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a5be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a5c2:	81a3      	strheq	r3, [r4, #12]
 801a5c4:	bf18      	it	ne
 801a5c6:	81a3      	strhne	r3, [r4, #12]
 801a5c8:	bd10      	pop	{r4, pc}

0801a5ca <__sclose>:
 801a5ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a5ce:	f000 b813 	b.w	801a5f8 <_close_r>
	...

0801a5d4 <_write_r>:
 801a5d4:	b538      	push	{r3, r4, r5, lr}
 801a5d6:	4c07      	ldr	r4, [pc, #28]	; (801a5f4 <_write_r+0x20>)
 801a5d8:	4605      	mov	r5, r0
 801a5da:	4608      	mov	r0, r1
 801a5dc:	4611      	mov	r1, r2
 801a5de:	2200      	movs	r2, #0
 801a5e0:	6022      	str	r2, [r4, #0]
 801a5e2:	461a      	mov	r2, r3
 801a5e4:	f7e9 fb47 	bl	8003c76 <_write>
 801a5e8:	1c43      	adds	r3, r0, #1
 801a5ea:	d102      	bne.n	801a5f2 <_write_r+0x1e>
 801a5ec:	6823      	ldr	r3, [r4, #0]
 801a5ee:	b103      	cbz	r3, 801a5f2 <_write_r+0x1e>
 801a5f0:	602b      	str	r3, [r5, #0]
 801a5f2:	bd38      	pop	{r3, r4, r5, pc}
 801a5f4:	240024ac 	.word	0x240024ac

0801a5f8 <_close_r>:
 801a5f8:	b538      	push	{r3, r4, r5, lr}
 801a5fa:	4c06      	ldr	r4, [pc, #24]	; (801a614 <_close_r+0x1c>)
 801a5fc:	2300      	movs	r3, #0
 801a5fe:	4605      	mov	r5, r0
 801a600:	4608      	mov	r0, r1
 801a602:	6023      	str	r3, [r4, #0]
 801a604:	f7e9 fe47 	bl	8004296 <_close>
 801a608:	1c43      	adds	r3, r0, #1
 801a60a:	d102      	bne.n	801a612 <_close_r+0x1a>
 801a60c:	6823      	ldr	r3, [r4, #0]
 801a60e:	b103      	cbz	r3, 801a612 <_close_r+0x1a>
 801a610:	602b      	str	r3, [r5, #0]
 801a612:	bd38      	pop	{r3, r4, r5, pc}
 801a614:	240024ac 	.word	0x240024ac

0801a618 <_fstat_r>:
 801a618:	b538      	push	{r3, r4, r5, lr}
 801a61a:	4c07      	ldr	r4, [pc, #28]	; (801a638 <_fstat_r+0x20>)
 801a61c:	2300      	movs	r3, #0
 801a61e:	4605      	mov	r5, r0
 801a620:	4608      	mov	r0, r1
 801a622:	4611      	mov	r1, r2
 801a624:	6023      	str	r3, [r4, #0]
 801a626:	f7e9 fe42 	bl	80042ae <_fstat>
 801a62a:	1c43      	adds	r3, r0, #1
 801a62c:	d102      	bne.n	801a634 <_fstat_r+0x1c>
 801a62e:	6823      	ldr	r3, [r4, #0]
 801a630:	b103      	cbz	r3, 801a634 <_fstat_r+0x1c>
 801a632:	602b      	str	r3, [r5, #0]
 801a634:	bd38      	pop	{r3, r4, r5, pc}
 801a636:	bf00      	nop
 801a638:	240024ac 	.word	0x240024ac

0801a63c <_isatty_r>:
 801a63c:	b538      	push	{r3, r4, r5, lr}
 801a63e:	4c06      	ldr	r4, [pc, #24]	; (801a658 <_isatty_r+0x1c>)
 801a640:	2300      	movs	r3, #0
 801a642:	4605      	mov	r5, r0
 801a644:	4608      	mov	r0, r1
 801a646:	6023      	str	r3, [r4, #0]
 801a648:	f7e9 fe41 	bl	80042ce <_isatty>
 801a64c:	1c43      	adds	r3, r0, #1
 801a64e:	d102      	bne.n	801a656 <_isatty_r+0x1a>
 801a650:	6823      	ldr	r3, [r4, #0]
 801a652:	b103      	cbz	r3, 801a656 <_isatty_r+0x1a>
 801a654:	602b      	str	r3, [r5, #0]
 801a656:	bd38      	pop	{r3, r4, r5, pc}
 801a658:	240024ac 	.word	0x240024ac

0801a65c <_lseek_r>:
 801a65c:	b538      	push	{r3, r4, r5, lr}
 801a65e:	4c07      	ldr	r4, [pc, #28]	; (801a67c <_lseek_r+0x20>)
 801a660:	4605      	mov	r5, r0
 801a662:	4608      	mov	r0, r1
 801a664:	4611      	mov	r1, r2
 801a666:	2200      	movs	r2, #0
 801a668:	6022      	str	r2, [r4, #0]
 801a66a:	461a      	mov	r2, r3
 801a66c:	f7e9 fe3a 	bl	80042e4 <_lseek>
 801a670:	1c43      	adds	r3, r0, #1
 801a672:	d102      	bne.n	801a67a <_lseek_r+0x1e>
 801a674:	6823      	ldr	r3, [r4, #0]
 801a676:	b103      	cbz	r3, 801a67a <_lseek_r+0x1e>
 801a678:	602b      	str	r3, [r5, #0]
 801a67a:	bd38      	pop	{r3, r4, r5, pc}
 801a67c:	240024ac 	.word	0x240024ac

0801a680 <memmove>:
 801a680:	4288      	cmp	r0, r1
 801a682:	b510      	push	{r4, lr}
 801a684:	eb01 0302 	add.w	r3, r1, r2
 801a688:	d807      	bhi.n	801a69a <memmove+0x1a>
 801a68a:	1e42      	subs	r2, r0, #1
 801a68c:	4299      	cmp	r1, r3
 801a68e:	d00a      	beq.n	801a6a6 <memmove+0x26>
 801a690:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a694:	f802 4f01 	strb.w	r4, [r2, #1]!
 801a698:	e7f8      	b.n	801a68c <memmove+0xc>
 801a69a:	4283      	cmp	r3, r0
 801a69c:	d9f5      	bls.n	801a68a <memmove+0xa>
 801a69e:	1881      	adds	r1, r0, r2
 801a6a0:	1ad2      	subs	r2, r2, r3
 801a6a2:	42d3      	cmn	r3, r2
 801a6a4:	d100      	bne.n	801a6a8 <memmove+0x28>
 801a6a6:	bd10      	pop	{r4, pc}
 801a6a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a6ac:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801a6b0:	e7f7      	b.n	801a6a2 <memmove+0x22>

0801a6b2 <_realloc_r>:
 801a6b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6b4:	4607      	mov	r7, r0
 801a6b6:	4614      	mov	r4, r2
 801a6b8:	460e      	mov	r6, r1
 801a6ba:	b921      	cbnz	r1, 801a6c6 <_realloc_r+0x14>
 801a6bc:	4611      	mov	r1, r2
 801a6be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a6c2:	f7fe bf47 	b.w	8019554 <_malloc_r>
 801a6c6:	b922      	cbnz	r2, 801a6d2 <_realloc_r+0x20>
 801a6c8:	f7fe fef6 	bl	80194b8 <_free_r>
 801a6cc:	4625      	mov	r5, r4
 801a6ce:	4628      	mov	r0, r5
 801a6d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a6d2:	f000 f827 	bl	801a724 <_malloc_usable_size_r>
 801a6d6:	42a0      	cmp	r0, r4
 801a6d8:	d20f      	bcs.n	801a6fa <_realloc_r+0x48>
 801a6da:	4621      	mov	r1, r4
 801a6dc:	4638      	mov	r0, r7
 801a6de:	f7fe ff39 	bl	8019554 <_malloc_r>
 801a6e2:	4605      	mov	r5, r0
 801a6e4:	2800      	cmp	r0, #0
 801a6e6:	d0f2      	beq.n	801a6ce <_realloc_r+0x1c>
 801a6e8:	4631      	mov	r1, r6
 801a6ea:	4622      	mov	r2, r4
 801a6ec:	f7fe fed0 	bl	8019490 <memcpy>
 801a6f0:	4631      	mov	r1, r6
 801a6f2:	4638      	mov	r0, r7
 801a6f4:	f7fe fee0 	bl	80194b8 <_free_r>
 801a6f8:	e7e9      	b.n	801a6ce <_realloc_r+0x1c>
 801a6fa:	4635      	mov	r5, r6
 801a6fc:	e7e7      	b.n	801a6ce <_realloc_r+0x1c>
	...

0801a700 <_read_r>:
 801a700:	b538      	push	{r3, r4, r5, lr}
 801a702:	4c07      	ldr	r4, [pc, #28]	; (801a720 <_read_r+0x20>)
 801a704:	4605      	mov	r5, r0
 801a706:	4608      	mov	r0, r1
 801a708:	4611      	mov	r1, r2
 801a70a:	2200      	movs	r2, #0
 801a70c:	6022      	str	r2, [r4, #0]
 801a70e:	461a      	mov	r2, r3
 801a710:	f7e9 fda4 	bl	800425c <_read>
 801a714:	1c43      	adds	r3, r0, #1
 801a716:	d102      	bne.n	801a71e <_read_r+0x1e>
 801a718:	6823      	ldr	r3, [r4, #0]
 801a71a:	b103      	cbz	r3, 801a71e <_read_r+0x1e>
 801a71c:	602b      	str	r3, [r5, #0]
 801a71e:	bd38      	pop	{r3, r4, r5, pc}
 801a720:	240024ac 	.word	0x240024ac

0801a724 <_malloc_usable_size_r>:
 801a724:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a728:	1f18      	subs	r0, r3, #4
 801a72a:	2b00      	cmp	r3, #0
 801a72c:	bfbc      	itt	lt
 801a72e:	580b      	ldrlt	r3, [r1, r0]
 801a730:	18c0      	addlt	r0, r0, r3
 801a732:	4770      	bx	lr

0801a734 <_init>:
 801a734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a736:	bf00      	nop
 801a738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a73a:	bc08      	pop	{r3}
 801a73c:	469e      	mov	lr, r3
 801a73e:	4770      	bx	lr

0801a740 <_fini>:
 801a740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a742:	bf00      	nop
 801a744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a746:	bc08      	pop	{r3}
 801a748:	469e      	mov	lr, r3
 801a74a:	4770      	bx	lr

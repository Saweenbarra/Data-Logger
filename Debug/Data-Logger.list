
Data-Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000118dc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08011b7c  08011b7c  00021b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011dd4  08011dd4  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  08011dd4  08011dd4  00021dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011ddc  08011ddc  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011ddc  08011ddc  00021ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011de0  08011de0  00021de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  24000000  08011de4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021e0  240001e8  08011fcc  000301e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240023c8  08011fcc  000323c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003a5dd  00000000  00000000  00030216  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006202  00000000  00000000  0006a7f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e00  00000000  00000000  000709f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b98  00000000  00000000  000727f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003faba  00000000  00000000  00074390  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f53f  00000000  00000000  000b3e4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00175845  00000000  00000000  000d3389  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00248bce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008648  00000000  00000000  00248c4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011b64 	.word	0x08011b64

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	08011b64 	.word	0x08011b64

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <gps_msg_config>:
#include <string.h>
#include <stdint.h>
#include <GPS.h>
#include "main.h"

int gps_msg_config(UART_HandleTypeDef *huart, const char *nema, int rus1){
 8000690:	b580      	push	{r7, lr}
 8000692:	b09e      	sub	sp, #120	; 0x78
 8000694:	af02      	add	r7, sp, #8
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
	if (strlen(nema) != 3) return 1;
 800069c:	68b8      	ldr	r0, [r7, #8]
 800069e:	f7ff fe1f 	bl	80002e0 <strlen>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b03      	cmp	r3, #3
 80006a6:	d001      	beq.n	80006ac <gps_msg_config+0x1c>
 80006a8:	2301      	movs	r3, #1
 80006aa:	e052      	b.n	8000752 <gps_msg_config+0xc2>


	char msg[32];
	snprintf(msg, sizeof(msg)-1,"PUBX,40,%s,0,%i,0,0,0,0", nema, rus1);
 80006ac:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	4a29      	ldr	r2, [pc, #164]	; (800075c <gps_msg_config+0xcc>)
 80006b8:	211f      	movs	r1, #31
 80006ba:	f010 fa71 	bl	8010ba0 <sniprintf>

	int checksum_int = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 80006c2:	2300      	movs	r3, #0
 80006c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80006c6:	e00b      	b.n	80006e0 <gps_msg_config+0x50>
		checksum_int ^= (unsigned char)msg[i];
 80006c8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80006cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80006ce:	4413      	add	r3, r2
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	461a      	mov	r2, r3
 80006d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006d6:	4053      	eors	r3, r2
 80006d8:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 80006da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80006dc:	3301      	adds	r3, #1
 80006de:	66bb      	str	r3, [r7, #104]	; 0x68
 80006e0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80006e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80006e6:	4413      	add	r3, r2
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d002      	beq.n	80006f4 <gps_msg_config+0x64>
 80006ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80006f0:	2b1f      	cmp	r3, #31
 80006f2:	dde9      	ble.n	80006c8 <gps_msg_config+0x38>

	char checksum[8];
	snprintf(checksum, sizeof(checksum)-1, "*%.2X", checksum_int);
 80006f4:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80006f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006fa:	4a19      	ldr	r2, [pc, #100]	; (8000760 <gps_msg_config+0xd0>)
 80006fc:	2107      	movs	r1, #7
 80006fe:	f010 fa4f 	bl	8010ba0 <sniprintf>

	char messagetosend[42];
	snprintf(messagetosend, sizeof(messagetosend)-1, "$%s%s\r\n", msg, checksum);
 8000702:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000706:	f107 0014 	add.w	r0, r7, #20
 800070a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	4613      	mov	r3, r2
 8000712:	4a14      	ldr	r2, [pc, #80]	; (8000764 <gps_msg_config+0xd4>)
 8000714:	2129      	movs	r1, #41	; 0x29
 8000716:	f010 fa43 	bl	8010ba0 <sniprintf>
	printf("\n\rSending: ");
 800071a:	4813      	ldr	r0, [pc, #76]	; (8000768 <gps_msg_config+0xd8>)
 800071c:	f010 fa18 	bl	8010b50 <iprintf>
	printf("%s", messagetosend);
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	4619      	mov	r1, r3
 8000726:	4811      	ldr	r0, [pc, #68]	; (800076c <gps_msg_config+0xdc>)
 8000728:	f010 fa12 	bl	8010b50 <iprintf>
	if (HAL_UART_Transmit(huart, messagetosend, strlen(messagetosend), 100) != HAL_OK){
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fdd5 	bl	80002e0 <strlen>
 8000736:	4603      	mov	r3, r0
 8000738:	b29a      	uxth	r2, r3
 800073a:	f107 0114 	add.w	r1, r7, #20
 800073e:	2364      	movs	r3, #100	; 0x64
 8000740:	68f8      	ldr	r0, [r7, #12]
 8000742:	f00a fb26 	bl	800ad92 <HAL_UART_Transmit>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <gps_msg_config+0xc0>
		Error_Handler();
 800074c:	f000 fe66 	bl	800141c <Error_Handler>
	}
	return 0;
 8000750:	2300      	movs	r3, #0
}
 8000752:	4618      	mov	r0, r3
 8000754:	3770      	adds	r7, #112	; 0x70
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	08011b7c 	.word	0x08011b7c
 8000760:	08011b94 	.word	0x08011b94
 8000764:	08011b9c 	.word	0x08011b9c
 8000768:	08011ba4 	.word	0x08011ba4
 800076c:	08011bb0 	.word	0x08011bb0

08000770 <gps_rate_config>:

int gps_rate_config(UART_HandleTypeDef *huart, uint16_t measRate, uint16_t navRate, uint16_t timeRef){
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	; 0x28
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	4608      	mov	r0, r1
 800077a:	4611      	mov	r1, r2
 800077c:	461a      	mov	r2, r3
 800077e:	4603      	mov	r3, r0
 8000780:	817b      	strh	r3, [r7, #10]
 8000782:	460b      	mov	r3, r1
 8000784:	813b      	strh	r3, [r7, #8]
 8000786:	4613      	mov	r3, r2
 8000788:	80fb      	strh	r3, [r7, #6]
		uint16_t length = 6;
 800078a:	2306      	movs	r3, #6
 800078c:	83fb      	strh	r3, [r7, #30]
		uint8_t msg[14];
		msg[0] = 0xb5;
 800078e:	23b5      	movs	r3, #181	; 0xb5
 8000790:	743b      	strb	r3, [r7, #16]
		msg[1] = 0x62;
 8000792:	2362      	movs	r3, #98	; 0x62
 8000794:	747b      	strb	r3, [r7, #17]
		msg[2] = 0x06;
 8000796:	2306      	movs	r3, #6
 8000798:	74bb      	strb	r3, [r7, #18]
		msg[3] = 0x08;
 800079a:	2308      	movs	r3, #8
 800079c:	74fb      	strb	r3, [r7, #19]
		msg[4] = length;
 800079e:	8bfb      	ldrh	r3, [r7, #30]
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	753b      	strb	r3, [r7, #20]
		msg[5] = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	757b      	strb	r3, [r7, #21]
		msg[6] = measRate;
 80007a8:	897b      	ldrh	r3, [r7, #10]
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	75bb      	strb	r3, [r7, #22]
		msg[7] = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	75fb      	strb	r3, [r7, #23]
		msg[8] = navRate;
 80007b2:	893b      	ldrh	r3, [r7, #8]
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	763b      	strb	r3, [r7, #24]
		msg[9] = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	767b      	strb	r3, [r7, #25]
		msg[10] = timeRef;
 80007bc:	88fb      	ldrh	r3, [r7, #6]
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	76bb      	strb	r3, [r7, #26]
		msg[11] = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	76fb      	strb	r3, [r7, #27]

		uint8_t CK_A = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t CK_B = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 80007d2:	2302      	movs	r3, #2
 80007d4:	623b      	str	r3, [r7, #32]
 80007d6:	e013      	b.n	8000800 <gps_rate_config+0x90>
	        CK_A = CK_A + msg[i];
 80007d8:	f107 0210 	add.w	r2, r7, #16
 80007dc:	6a3b      	ldr	r3, [r7, #32]
 80007de:	4413      	add	r3, r2
 80007e0:	781a      	ldrb	r2, [r3, #0]
 80007e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007e6:	4413      	add	r3, r2
 80007e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	        CK_A &= 0xFF;
	        CK_B = CK_B + CK_A;
 80007ec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80007f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007f4:	4413      	add	r3, r2
 80007f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 80007fa:	6a3b      	ldr	r3, [r7, #32]
 80007fc:	3301      	adds	r3, #1
 80007fe:	623b      	str	r3, [r7, #32]
 8000800:	6a3b      	ldr	r3, [r7, #32]
 8000802:	2b0b      	cmp	r3, #11
 8000804:	dde8      	ble.n	80007d8 <gps_rate_config+0x68>
	        CK_B &= 0xFF;
	    }
		msg[12] = CK_A;
 8000806:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800080a:	773b      	strb	r3, [r7, #28]
		msg[13] = CK_B;
 800080c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000810:	777b      	strb	r3, [r7, #29]

		if (HAL_UART_Transmit(huart, msg, sizeof(msg), 100) != HAL_OK){
 8000812:	f107 0110 	add.w	r1, r7, #16
 8000816:	2364      	movs	r3, #100	; 0x64
 8000818:	220e      	movs	r2, #14
 800081a:	68f8      	ldr	r0, [r7, #12]
 800081c:	f00a fab9 	bl	800ad92 <HAL_UART_Transmit>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d003      	beq.n	800082e <gps_rate_config+0xbe>
				Error_Handler();
 8000826:	f000 fdf9 	bl	800141c <Error_Handler>
				return 1;
 800082a:	2301      	movs	r3, #1
 800082c:	e000      	b.n	8000830 <gps_rate_config+0xc0>
			}
		return 0;
 800082e:	2300      	movs	r3, #0
}
 8000830:	4618      	mov	r0, r3
 8000832:	3728      	adds	r7, #40	; 0x28
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000840:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000844:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	2b00      	cmp	r3, #0
 800084e:	d013      	beq.n	8000878 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000850:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000854:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000858:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800085c:	2b00      	cmp	r3, #0
 800085e:	d00b      	beq.n	8000878 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000860:	e000      	b.n	8000864 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000862:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000864:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d0f9      	beq.n	8000862 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800086e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	b2d2      	uxtb	r2, r2
 8000876:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000878:	687b      	ldr	r3, [r7, #4]
}
 800087a:	4618      	mov	r0, r3
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr

08000886 <_write>:
static void MX_USART3_UART_Init(void);
static void MX_SPI1_Init(void);
static void MX_RTC_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b086      	sub	sp, #24
 800088a:	af00      	add	r7, sp, #0
 800088c:	60f8      	str	r0, [r7, #12]
 800088e:	60b9      	str	r1, [r7, #8]
 8000890:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
 800089a:	e009      	b.n	80008b0 <_write+0x2a>
    ITM_SendChar((*ptr++));
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	1c5a      	adds	r2, r3, #1
 80008a0:	60ba      	str	r2, [r7, #8]
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff ffc7 	bl	8000838 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	3301      	adds	r3, #1
 80008ae:	617b      	str	r3, [r7, #20]
 80008b0:	697a      	ldr	r2, [r7, #20]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	dbf1      	blt.n	800089c <_write+0x16>
  return len;
 80008b8:	687b      	ldr	r3, [r7, #4]
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ca:	f001 f969 	bl	8001ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ce:	f000 f91f 	bl	8000b10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d2:	f000 fc55 	bl	8001180 <MX_GPIO_Init>
  MX_DMA_Init();
 80008d6:	f000 fc33 	bl	8001140 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 80008da:	f000 fb21 	bl	8000f20 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80008de:	f00d fd8d 	bl	800e3fc <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80008e2:	f00f fb61 	bl	800ffa8 <MX_USB_DEVICE_Init>
  MX_FDCAN1_Init();
 80008e6:	f000 f9f7 	bl	8000cd8 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80008ea:	f000 fa59 	bl	8000da0 <MX_FDCAN2_Init>
  MX_UART8_Init();
 80008ee:	f000 fb8f 	bl	8001010 <MX_UART8_Init>
  MX_USART3_UART_Init();
 80008f2:	f000 fbd9 	bl	80010a8 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80008f6:	f000 fb35 	bl	8000f64 <MX_SPI1_Init>
  MX_RTC_Init();
 80008fa:	f000 fab5 	bl	8000e68 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */


  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_SET);
 80008fe:	2201      	movs	r2, #1
 8000900:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000904:	4863      	ldr	r0, [pc, #396]	; (8000a94 <main+0x1d0>)
 8000906:	f004 f923 	bl	8004b50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPS_INT_GPIO_Port, GPS_INT_Pin, GPIO_PIN_SET);
 800090a:	2201      	movs	r2, #1
 800090c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000910:	4860      	ldr	r0, [pc, #384]	; (8000a94 <main+0x1d0>)
 8000912:	f004 f91d 	bl	8004b50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000916:	2201      	movs	r2, #1
 8000918:	2101      	movs	r1, #1
 800091a:	485f      	ldr	r0, [pc, #380]	; (8000a98 <main+0x1d4>)
 800091c:	f004 f918 	bl	8004b50 <HAL_GPIO_WritePin>


  HAL_UART_Receive_DMA(&huart3, (uint8_t *)rxBuf, BUFFLENGTH);
 8000920:	2246      	movs	r2, #70	; 0x46
 8000922:	495e      	ldr	r1, [pc, #376]	; (8000a9c <main+0x1d8>)
 8000924:	485e      	ldr	r0, [pc, #376]	; (8000aa0 <main+0x1dc>)
 8000926:	f00a facb 	bl	800aec0 <HAL_UART_Receive_DMA>
  HAL_Delay(1000);
 800092a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800092e:	f001 f9c9 	bl	8001cc4 <HAL_Delay>
  uint16_t measRate = 100;
 8000932:	2364      	movs	r3, #100	; 0x64
 8000934:	81fb      	strh	r3, [r7, #14]
  uint16_t navRate = 1;
 8000936:	2301      	movs	r3, #1
 8000938:	81bb      	strh	r3, [r7, #12]
  uint16_t timeRef = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	817b      	strh	r3, [r7, #10]

  gps_rate_config(&huart3, measRate, navRate, timeRef);
 800093e:	897b      	ldrh	r3, [r7, #10]
 8000940:	89ba      	ldrh	r2, [r7, #12]
 8000942:	89f9      	ldrh	r1, [r7, #14]
 8000944:	4856      	ldr	r0, [pc, #344]	; (8000aa0 <main+0x1dc>)
 8000946:	f7ff ff13 	bl	8000770 <gps_rate_config>

    gps_msg_config(&huart3, "DTM", 0);//ERROR
 800094a:	2200      	movs	r2, #0
 800094c:	4955      	ldr	r1, [pc, #340]	; (8000aa4 <main+0x1e0>)
 800094e:	4854      	ldr	r0, [pc, #336]	; (8000aa0 <main+0x1dc>)
 8000950:	f7ff fe9e 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GAQ", 0);
 8000954:	2200      	movs	r2, #0
 8000956:	4954      	ldr	r1, [pc, #336]	; (8000aa8 <main+0x1e4>)
 8000958:	4851      	ldr	r0, [pc, #324]	; (8000aa0 <main+0x1dc>)
 800095a:	f7ff fe99 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GBQ", 0);
 800095e:	2200      	movs	r2, #0
 8000960:	4952      	ldr	r1, [pc, #328]	; (8000aac <main+0x1e8>)
 8000962:	484f      	ldr	r0, [pc, #316]	; (8000aa0 <main+0x1dc>)
 8000964:	f7ff fe94 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GBS", 0);//ERROR
 8000968:	2200      	movs	r2, #0
 800096a:	4951      	ldr	r1, [pc, #324]	; (8000ab0 <main+0x1ec>)
 800096c:	484c      	ldr	r0, [pc, #304]	; (8000aa0 <main+0x1dc>)
 800096e:	f7ff fe8f 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GGA", 0);//ERROR
 8000972:	2200      	movs	r2, #0
 8000974:	494f      	ldr	r1, [pc, #316]	; (8000ab4 <main+0x1f0>)
 8000976:	484a      	ldr	r0, [pc, #296]	; (8000aa0 <main+0x1dc>)
 8000978:	f7ff fe8a 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GLL", 0);//ERROR
 800097c:	2200      	movs	r2, #0
 800097e:	494e      	ldr	r1, [pc, #312]	; (8000ab8 <main+0x1f4>)
 8000980:	4847      	ldr	r0, [pc, #284]	; (8000aa0 <main+0x1dc>)
 8000982:	f7ff fe85 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GLQ", 0);
 8000986:	2200      	movs	r2, #0
 8000988:	494c      	ldr	r1, [pc, #304]	; (8000abc <main+0x1f8>)
 800098a:	4845      	ldr	r0, [pc, #276]	; (8000aa0 <main+0x1dc>)
 800098c:	f7ff fe80 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GNQ", 0);
 8000990:	2200      	movs	r2, #0
 8000992:	494b      	ldr	r1, [pc, #300]	; (8000ac0 <main+0x1fc>)
 8000994:	4842      	ldr	r0, [pc, #264]	; (8000aa0 <main+0x1dc>)
 8000996:	f7ff fe7b 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GNS", 0);//ERROR
 800099a:	2200      	movs	r2, #0
 800099c:	4949      	ldr	r1, [pc, #292]	; (8000ac4 <main+0x200>)
 800099e:	4840      	ldr	r0, [pc, #256]	; (8000aa0 <main+0x1dc>)
 80009a0:	f7ff fe76 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GPQ", 0);
 80009a4:	2200      	movs	r2, #0
 80009a6:	4948      	ldr	r1, [pc, #288]	; (8000ac8 <main+0x204>)
 80009a8:	483d      	ldr	r0, [pc, #244]	; (8000aa0 <main+0x1dc>)
 80009aa:	f7ff fe71 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GRS", 0);//ERROR
 80009ae:	2200      	movs	r2, #0
 80009b0:	4946      	ldr	r1, [pc, #280]	; (8000acc <main+0x208>)
 80009b2:	483b      	ldr	r0, [pc, #236]	; (8000aa0 <main+0x1dc>)
 80009b4:	f7ff fe6c 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GSA", 0);//ERROR
 80009b8:	2200      	movs	r2, #0
 80009ba:	4945      	ldr	r1, [pc, #276]	; (8000ad0 <main+0x20c>)
 80009bc:	4838      	ldr	r0, [pc, #224]	; (8000aa0 <main+0x1dc>)
 80009be:	f7ff fe67 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GST", 0);//ERROR
 80009c2:	2200      	movs	r2, #0
 80009c4:	4943      	ldr	r1, [pc, #268]	; (8000ad4 <main+0x210>)
 80009c6:	4836      	ldr	r0, [pc, #216]	; (8000aa0 <main+0x1dc>)
 80009c8:	f7ff fe62 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "GSV", 0);//ERROR
 80009cc:	2200      	movs	r2, #0
 80009ce:	4942      	ldr	r1, [pc, #264]	; (8000ad8 <main+0x214>)
 80009d0:	4833      	ldr	r0, [pc, #204]	; (8000aa0 <main+0x1dc>)
 80009d2:	f7ff fe5d 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "RLM", 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	4940      	ldr	r1, [pc, #256]	; (8000adc <main+0x218>)
 80009da:	4831      	ldr	r0, [pc, #196]	; (8000aa0 <main+0x1dc>)
 80009dc:	f7ff fe58 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "RMC", 1);//ERROR
 80009e0:	2201      	movs	r2, #1
 80009e2:	493f      	ldr	r1, [pc, #252]	; (8000ae0 <main+0x21c>)
 80009e4:	482e      	ldr	r0, [pc, #184]	; (8000aa0 <main+0x1dc>)
 80009e6:	f7ff fe53 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "TXT", 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	493d      	ldr	r1, [pc, #244]	; (8000ae4 <main+0x220>)
 80009ee:	482c      	ldr	r0, [pc, #176]	; (8000aa0 <main+0x1dc>)
 80009f0:	f7ff fe4e 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "VLW", 0);//ERROR
 80009f4:	2200      	movs	r2, #0
 80009f6:	493c      	ldr	r1, [pc, #240]	; (8000ae8 <main+0x224>)
 80009f8:	4829      	ldr	r0, [pc, #164]	; (8000aa0 <main+0x1dc>)
 80009fa:	f7ff fe49 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "VTG", 0);//ERROR
 80009fe:	2200      	movs	r2, #0
 8000a00:	493a      	ldr	r1, [pc, #232]	; (8000aec <main+0x228>)
 8000a02:	4827      	ldr	r0, [pc, #156]	; (8000aa0 <main+0x1dc>)
 8000a04:	f7ff fe44 	bl	8000690 <gps_msg_config>
    gps_msg_config(&huart3, "ZDA", 0);//ERROR
 8000a08:	2200      	movs	r2, #0
 8000a0a:	4939      	ldr	r1, [pc, #228]	; (8000af0 <main+0x22c>)
 8000a0c:	4824      	ldr	r0, [pc, #144]	; (8000aa0 <main+0x1dc>)
 8000a0e:	f7ff fe3f 	bl	8000690 <gps_msg_config>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000a12:	2200      	movs	r2, #0
 8000a14:	4937      	ldr	r1, [pc, #220]	; (8000af4 <main+0x230>)
 8000a16:	4838      	ldr	r0, [pc, #224]	; (8000af8 <main+0x234>)
 8000a18:	f008 fa9c 	bl	8008f54 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	4937      	ldr	r1, [pc, #220]	; (8000afc <main+0x238>)
 8000a20:	4835      	ldr	r0, [pc, #212]	; (8000af8 <main+0x234>)
 8000a22:	f008 fb7b 	bl	800911c <HAL_RTC_GetDate>
	  secsy = HAL_GetTick();
 8000a26:	f001 f941 	bl	8001cac <HAL_GetTick>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	607b      	str	r3, [r7, #4]

	  	  printf("Date:%u Month:%u Year:%u\n", sDate.Date, sDate.Month, sDate.Year);
 8000a2e:	4b33      	ldr	r3, [pc, #204]	; (8000afc <main+0x238>)
 8000a30:	789b      	ldrb	r3, [r3, #2]
 8000a32:	4619      	mov	r1, r3
 8000a34:	4b31      	ldr	r3, [pc, #196]	; (8000afc <main+0x238>)
 8000a36:	785b      	ldrb	r3, [r3, #1]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4b30      	ldr	r3, [pc, #192]	; (8000afc <main+0x238>)
 8000a3c:	78db      	ldrb	r3, [r3, #3]
 8000a3e:	4830      	ldr	r0, [pc, #192]	; (8000b00 <main+0x23c>)
 8000a40:	f010 f886 	bl	8010b50 <iprintf>
	  	  printf("Hours:%u Minutes:%u Seconds:%u\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000a44:	4b2b      	ldr	r3, [pc, #172]	; (8000af4 <main+0x230>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4b2a      	ldr	r3, [pc, #168]	; (8000af4 <main+0x230>)
 8000a4c:	785b      	ldrb	r3, [r3, #1]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	4b28      	ldr	r3, [pc, #160]	; (8000af4 <main+0x230>)
 8000a52:	789b      	ldrb	r3, [r3, #2]
 8000a54:	482b      	ldr	r0, [pc, #172]	; (8000b04 <main+0x240>)
 8000a56:	f010 f87b 	bl	8010b50 <iprintf>
	  	  printf("diff: %i\n", (secsy/1000-(sTime.Seconds+sTime.Minutes*60)));
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a2a      	ldr	r2, [pc, #168]	; (8000b08 <main+0x244>)
 8000a5e:	fb82 1203 	smull	r1, r2, r2, r3
 8000a62:	1192      	asrs	r2, r2, #6
 8000a64:	17db      	asrs	r3, r3, #31
 8000a66:	1ad2      	subs	r2, r2, r3
 8000a68:	4b22      	ldr	r3, [pc, #136]	; (8000af4 <main+0x230>)
 8000a6a:	789b      	ldrb	r3, [r3, #2]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <main+0x230>)
 8000a70:	785b      	ldrb	r3, [r3, #1]
 8000a72:	4619      	mov	r1, r3
 8000a74:	460b      	mov	r3, r1
 8000a76:	011b      	lsls	r3, r3, #4
 8000a78:	1a5b      	subs	r3, r3, r1
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	4403      	add	r3, r0
 8000a7e:	1ad3      	subs	r3, r2, r3
 8000a80:	4619      	mov	r1, r3
 8000a82:	4822      	ldr	r0, [pc, #136]	; (8000b0c <main+0x248>)
 8000a84:	f010 f864 	bl	8010b50 <iprintf>

	  	  HAL_Delay(1000);
 8000a88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a8c:	f001 f91a 	bl	8001cc4 <HAL_Delay>
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000a90:	e7bf      	b.n	8000a12 <main+0x14e>
 8000a92:	bf00      	nop
 8000a94:	58020c00 	.word	0x58020c00
 8000a98:	58020400 	.word	0x58020400
 8000a9c:	240003c0 	.word	0x240003c0
 8000aa0:	240002b4 	.word	0x240002b4
 8000aa4:	08011bbc 	.word	0x08011bbc
 8000aa8:	08011bc0 	.word	0x08011bc0
 8000aac:	08011bc4 	.word	0x08011bc4
 8000ab0:	08011bc8 	.word	0x08011bc8
 8000ab4:	08011bcc 	.word	0x08011bcc
 8000ab8:	08011bd0 	.word	0x08011bd0
 8000abc:	08011bd4 	.word	0x08011bd4
 8000ac0:	08011bd8 	.word	0x08011bd8
 8000ac4:	08011bdc 	.word	0x08011bdc
 8000ac8:	08011be0 	.word	0x08011be0
 8000acc:	08011be4 	.word	0x08011be4
 8000ad0:	08011be8 	.word	0x08011be8
 8000ad4:	08011bec 	.word	0x08011bec
 8000ad8:	08011bf0 	.word	0x08011bf0
 8000adc:	08011bf4 	.word	0x08011bf4
 8000ae0:	08011bf8 	.word	0x08011bf8
 8000ae4:	08011bfc 	.word	0x08011bfc
 8000ae8:	08011c00 	.word	0x08011c00
 8000aec:	08011c04 	.word	0x08011c04
 8000af0:	08011c08 	.word	0x08011c08
 8000af4:	24000204 	.word	0x24000204
 8000af8:	24000408 	.word	0x24000408
 8000afc:	24000218 	.word	0x24000218
 8000b00:	08011c0c 	.word	0x08011c0c
 8000b04:	08011c28 	.word	0x08011c28
 8000b08:	10624dd3 	.word	0x10624dd3
 8000b0c:	08011c48 	.word	0x08011c48

08000b10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b0cc      	sub	sp, #304	; 0x130
 8000b14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b16:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000b1a:	224c      	movs	r2, #76	; 0x4c
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f00f ff65 	bl	80109ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b24:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000b28:	2220      	movs	r2, #32
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f00f ff5e 	bl	80109ee <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b32:	f107 0308 	add.w	r3, r7, #8
 8000b36:	4618      	mov	r0, r3
 8000b38:	23bc      	movs	r3, #188	; 0xbc
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	f00f ff56 	bl	80109ee <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_EXTERNAL_SOURCE_SUPPLY);
 8000b42:	2001      	movs	r0, #1
 8000b44:	f005 fa3e 	bl	8005fc4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	4b5e      	ldr	r3, [pc, #376]	; (8000cc8 <SystemClock_Config+0x1b8>)
 8000b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b52:	4a5d      	ldr	r2, [pc, #372]	; (8000cc8 <SystemClock_Config+0x1b8>)
 8000b54:	f023 0301 	bic.w	r3, r3, #1
 8000b58:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b5a:	4b5b      	ldr	r3, [pc, #364]	; (8000cc8 <SystemClock_Config+0x1b8>)
 8000b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b5e:	f003 0201 	and.w	r2, r3, #1
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	4b59      	ldr	r3, [pc, #356]	; (8000ccc <SystemClock_Config+0x1bc>)
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b6e:	4a57      	ldr	r2, [pc, #348]	; (8000ccc <SystemClock_Config+0x1bc>)
 8000b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b74:	6193      	str	r3, [r2, #24]
 8000b76:	4b55      	ldr	r3, [pc, #340]	; (8000ccc <SystemClock_Config+0x1bc>)
 8000b78:	699b      	ldr	r3, [r3, #24]
 8000b7a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b86:	bf00      	nop
 8000b88:	4b50      	ldr	r3, [pc, #320]	; (8000ccc <SystemClock_Config+0x1bc>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b94:	d1f8      	bne.n	8000b88 <SystemClock_Config+0x78>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b96:	f005 fa05 	bl	8005fa4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000b9a:	f001 f8b5 	bl	8001d08 <HAL_GetREVID>
 8000b9e:	4b4c      	ldr	r3, [pc, #304]	; (8000cd0 <SystemClock_Config+0x1c0>)
 8000ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ba2:	4a4b      	ldr	r2, [pc, #300]	; (8000cd0 <SystemClock_Config+0x1c0>)
 8000ba4:	f023 0318 	bic.w	r3, r3, #24
 8000ba8:	6713      	str	r3, [r2, #112]	; 0x70
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000baa:	2307      	movs	r3, #7
 8000bac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bb4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bc4:	2340      	movs	r3, #64	; 0x40
 8000bc6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000bd6:	2305      	movs	r3, #5
 8000bd8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 48;
 8000bdc:	2330      	movs	r3, #48	; 0x30
 8000bde:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000be2:	2302      	movs	r3, #2
 8000be4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000be8:	2305      	movs	r3, #5
 8000bea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000bf4:	2308      	movs	r3, #8
 8000bf6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c06:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f005 fa24 	bl	8006058 <HAL_RCC_OscConfig>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8000c16:	f000 fc01 	bl	800141c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c1a:	233f      	movs	r3, #63	; 0x3f
 8000c1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c20:	2300      	movs	r3, #0
 8000c22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c26:	2300      	movs	r3, #0
 8000c28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000c32:	2300      	movs	r3, #0
 8000c34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c4a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4618      	mov	r0, r3
 8000c52:	f005 fe11 	bl	8006878 <HAL_RCC_ClockConfig>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <SystemClock_Config+0x150>
  {
    Error_Handler();
 8000c5c:	f000 fbde 	bl	800141c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 8000c60:	f107 0308 	add.w	r3, r7, #8
 8000c64:	4a1b      	ldr	r2, [pc, #108]	; (8000cd4 <SystemClock_Config+0x1c4>)
 8000c66:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_FDCAN|RCC_PERIPHCLK_UART8
                              |RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000c68:	f107 0308 	add.w	r3, r7, #8
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000c70:	f107 0308 	add.w	r3, r7, #8
 8000c74:	2200      	movs	r2, #0
 8000c76:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000c78:	f107 0308 	add.w	r3, r7, #8
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c80:	f107 0308 	add.w	r3, r7, #8
 8000c84:	2200      	movs	r2, #0
 8000c86:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000c88:	f107 0308 	add.w	r3, r7, #8
 8000c8c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000c90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000c94:	f107 0308 	add.w	r3, r7, #8
 8000c98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c9c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ca0:	f107 0308 	add.w	r3, r7, #8
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f006 f96b 	bl	8006f80 <HAL_RCCEx_PeriphCLKConfig>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <SystemClock_Config+0x1a4>
  {
    Error_Handler();
 8000cb0:	f000 fbb4 	bl	800141c <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCCEx_EnableLSECSS();
 8000cb4:	f007 fec4 	bl	8008a40 <HAL_RCCEx_EnableLSECSS>
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000cb8:	f005 f9be 	bl	8006038 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000cbc:	bf00      	nop
 8000cbe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	58000400 	.word	0x58000400
 8000ccc:	58024800 	.word	0x58024800
 8000cd0:	58024400 	.word	0x58024400
 8000cd4:	00459002 	.word	0x00459002

08000cd8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000cdc:	4b2e      	ldr	r3, [pc, #184]	; (8000d98 <MX_FDCAN1_Init+0xc0>)
 8000cde:	4a2f      	ldr	r2, [pc, #188]	; (8000d9c <MX_FDCAN1_Init+0xc4>)
 8000ce0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000ce2:	4b2d      	ldr	r3, [pc, #180]	; (8000d98 <MX_FDCAN1_Init+0xc0>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000ce8:	4b2b      	ldr	r3, [pc, #172]	; (8000d98 <MX_FDCAN1_Init+0xc0>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000cee:	4b2a      	ldr	r3, [pc, #168]	; (8000d98 <MX_FDCAN1_Init+0xc0>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000cf4:	4b28      	ldr	r3, [pc, #160]	; (8000d98 <MX_FDCAN1_Init+0xc0>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000cfa:	4b27      	ldr	r3, [pc, #156]	; (8000d98 <MX_FDCAN1_Init+0xc0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000d00:	4b25      	ldr	r3, [pc, #148]	; (8000d98 <MX_FDCAN1_Init+0xc0>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000d06:	4b24      	ldr	r3, [pc, #144]	; (8000d98 <MX_FDCAN1_Init+0xc0>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000d0c:	4b22      	ldr	r3, [pc, #136]	; (8000d98 <MX_FDCAN1_Init+0xc0>)
 8000d0e:	2202      	movs	r2, #2
 8000d10:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000d12:	4b21      	ldr	r3, [pc, #132]	; (8000d98 <MX_FDCAN1_Init+0xc0>)
 8000d14:	2202      	movs	r2, #2
 8000d16:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000d18:	4b1f      	ldr	r3, [pc, #124]	; (8000d98 <MX_FDCAN1_Init+0xc0>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000d1e:	4b1e      	ldr	r3, [pc, #120]	; (8000d98 <MX_FDCAN1_Init+0xc0>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000d24:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <MX_FDCAN1_Init+0xc0>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000d2a:	4b1b      	ldr	r3, [pc, #108]	; (8000d98 <MX_FDCAN1_Init+0xc0>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000d30:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <MX_FDCAN1_Init+0xc0>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000d36:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <MX_FDCAN1_Init+0xc0>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000d3c:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <MX_FDCAN1_Init+0xc0>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000d42:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <MX_FDCAN1_Init+0xc0>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000d48:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <MX_FDCAN1_Init+0xc0>)
 8000d4a:	2204      	movs	r2, #4
 8000d4c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000d4e:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <MX_FDCAN1_Init+0xc0>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000d54:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <MX_FDCAN1_Init+0xc0>)
 8000d56:	2204      	movs	r2, #4
 8000d58:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <MX_FDCAN1_Init+0xc0>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000d60:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <MX_FDCAN1_Init+0xc0>)
 8000d62:	2204      	movs	r2, #4
 8000d64:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <MX_FDCAN1_Init+0xc0>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000d6c:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <MX_FDCAN1_Init+0xc0>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <MX_FDCAN1_Init+0xc0>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000d78:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <MX_FDCAN1_Init+0xc0>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <MX_FDCAN1_Init+0xc0>)
 8000d80:	2204      	movs	r2, #4
 8000d82:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000d84:	4804      	ldr	r0, [pc, #16]	; (8000d98 <MX_FDCAN1_Init+0xc0>)
 8000d86:	f003 f9b3 	bl	80040f0 <HAL_FDCAN_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000d90:	f000 fb44 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	2400042c 	.word	0x2400042c
 8000d9c:	4000a000 	.word	0x4000a000

08000da0 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000da4:	4b2e      	ldr	r3, [pc, #184]	; (8000e60 <MX_FDCAN2_Init+0xc0>)
 8000da6:	4a2f      	ldr	r2, [pc, #188]	; (8000e64 <MX_FDCAN2_Init+0xc4>)
 8000da8:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000daa:	4b2d      	ldr	r3, [pc, #180]	; (8000e60 <MX_FDCAN2_Init+0xc0>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000db0:	4b2b      	ldr	r3, [pc, #172]	; (8000e60 <MX_FDCAN2_Init+0xc0>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000db6:	4b2a      	ldr	r3, [pc, #168]	; (8000e60 <MX_FDCAN2_Init+0xc0>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000dbc:	4b28      	ldr	r3, [pc, #160]	; (8000e60 <MX_FDCAN2_Init+0xc0>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000dc2:	4b27      	ldr	r3, [pc, #156]	; (8000e60 <MX_FDCAN2_Init+0xc0>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000dc8:	4b25      	ldr	r3, [pc, #148]	; (8000e60 <MX_FDCAN2_Init+0xc0>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000dce:	4b24      	ldr	r3, [pc, #144]	; (8000e60 <MX_FDCAN2_Init+0xc0>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000dd4:	4b22      	ldr	r3, [pc, #136]	; (8000e60 <MX_FDCAN2_Init+0xc0>)
 8000dd6:	2202      	movs	r2, #2
 8000dd8:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000dda:	4b21      	ldr	r3, [pc, #132]	; (8000e60 <MX_FDCAN2_Init+0xc0>)
 8000ddc:	2202      	movs	r2, #2
 8000dde:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000de0:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <MX_FDCAN2_Init+0xc0>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000de6:	4b1e      	ldr	r3, [pc, #120]	; (8000e60 <MX_FDCAN2_Init+0xc0>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000dec:	4b1c      	ldr	r3, [pc, #112]	; (8000e60 <MX_FDCAN2_Init+0xc0>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000df2:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <MX_FDCAN2_Init+0xc0>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000df8:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <MX_FDCAN2_Init+0xc0>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000dfe:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <MX_FDCAN2_Init+0xc0>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000e04:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <MX_FDCAN2_Init+0xc0>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <MX_FDCAN2_Init+0xc0>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e10:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <MX_FDCAN2_Init+0xc0>)
 8000e12:	2204      	movs	r2, #4
 8000e14:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000e16:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <MX_FDCAN2_Init+0xc0>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000e1c:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <MX_FDCAN2_Init+0xc0>)
 8000e1e:	2204      	movs	r2, #4
 8000e20:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <MX_FDCAN2_Init+0xc0>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e28:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <MX_FDCAN2_Init+0xc0>)
 8000e2a:	2204      	movs	r2, #4
 8000e2c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <MX_FDCAN2_Init+0xc0>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000e34:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <MX_FDCAN2_Init+0xc0>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <MX_FDCAN2_Init+0xc0>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e40:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <MX_FDCAN2_Init+0xc0>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <MX_FDCAN2_Init+0xc0>)
 8000e48:	2204      	movs	r2, #4
 8000e4a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000e4c:	4804      	ldr	r0, [pc, #16]	; (8000e60 <MX_FDCAN2_Init+0xc0>)
 8000e4e:	f003 f94f 	bl	80040f0 <HAL_FDCAN_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000e58:	f000 fae0 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	240005e0 	.word	0x240005e0
 8000e64:	4000a400 	.word	0x4000a400

08000e68 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e80:	4b25      	ldr	r3, [pc, #148]	; (8000f18 <MX_RTC_Init+0xb0>)
 8000e82:	4a26      	ldr	r2, [pc, #152]	; (8000f1c <MX_RTC_Init+0xb4>)
 8000e84:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e86:	4b24      	ldr	r3, [pc, #144]	; (8000f18 <MX_RTC_Init+0xb0>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e8c:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <MX_RTC_Init+0xb0>)
 8000e8e:	227f      	movs	r2, #127	; 0x7f
 8000e90:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e92:	4b21      	ldr	r3, [pc, #132]	; (8000f18 <MX_RTC_Init+0xb0>)
 8000e94:	22ff      	movs	r2, #255	; 0xff
 8000e96:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e98:	4b1f      	ldr	r3, [pc, #124]	; (8000f18 <MX_RTC_Init+0xb0>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e9e:	4b1e      	ldr	r3, [pc, #120]	; (8000f18 <MX_RTC_Init+0xb0>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ea4:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <MX_RTC_Init+0xb0>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000eaa:	4b1b      	ldr	r3, [pc, #108]	; (8000f18 <MX_RTC_Init+0xb0>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000eb0:	4819      	ldr	r0, [pc, #100]	; (8000f18 <MX_RTC_Init+0xb0>)
 8000eb2:	f007 ff39 	bl	8008d28 <HAL_RTC_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000ebc:	f000 faae 	bl	800141c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	4619      	mov	r1, r3
 8000eda:	480f      	ldr	r0, [pc, #60]	; (8000f18 <MX_RTC_Init+0xb0>)
 8000edc:	f007 ff9c 	bl	8008e18 <HAL_RTC_SetTime>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000ee6:	f000 fa99 	bl	800141c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000eea:	2301      	movs	r3, #1
 8000eec:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000efa:	463b      	mov	r3, r7
 8000efc:	2200      	movs	r2, #0
 8000efe:	4619      	mov	r1, r3
 8000f00:	4805      	ldr	r0, [pc, #20]	; (8000f18 <MX_RTC_Init+0xb0>)
 8000f02:	f008 f883 	bl	800900c <HAL_RTC_SetDate>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000f0c:	f000 fa86 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f10:	bf00      	nop
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	24000408 	.word	0x24000408
 8000f1c:	58004000 	.word	0x58004000

08000f20 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000f24:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <MX_SDMMC1_SD_Init+0x3c>)
 8000f26:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <MX_SDMMC1_SD_Init+0x40>)
 8000f28:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <MX_SDMMC1_SD_Init+0x3c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000f30:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <MX_SDMMC1_SD_Init+0x3c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <MX_SDMMC1_SD_Init+0x3c>)
 8000f38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f3c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000f3e:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <MX_SDMMC1_SD_Init+0x3c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <MX_SDMMC1_SD_Init+0x3c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8000f4a:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <MX_SDMMC1_SD_Init+0x3c>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	24000340 	.word	0x24000340
 8000f60:	52007000 	.word	0x52007000

08000f64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f68:	4b27      	ldr	r3, [pc, #156]	; (8001008 <MX_SPI1_Init+0xa4>)
 8000f6a:	4a28      	ldr	r2, [pc, #160]	; (800100c <MX_SPI1_Init+0xa8>)
 8000f6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f6e:	4b26      	ldr	r3, [pc, #152]	; (8001008 <MX_SPI1_Init+0xa4>)
 8000f70:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000f74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f76:	4b24      	ldr	r3, [pc, #144]	; (8001008 <MX_SPI1_Init+0xa4>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f7c:	4b22      	ldr	r3, [pc, #136]	; (8001008 <MX_SPI1_Init+0xa4>)
 8000f7e:	2207      	movs	r2, #7
 8000f80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f82:	4b21      	ldr	r3, [pc, #132]	; (8001008 <MX_SPI1_Init+0xa4>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f88:	4b1f      	ldr	r3, [pc, #124]	; (8001008 <MX_SPI1_Init+0xa4>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f8e:	4b1e      	ldr	r3, [pc, #120]	; (8001008 <MX_SPI1_Init+0xa4>)
 8000f90:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000f94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f96:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <MX_SPI1_Init+0xa4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f9c:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <MX_SPI1_Init+0xa4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fa2:	4b19      	ldr	r3, [pc, #100]	; (8001008 <MX_SPI1_Init+0xa4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fa8:	4b17      	ldr	r3, [pc, #92]	; (8001008 <MX_SPI1_Init+0xa4>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000fae:	4b16      	ldr	r3, [pc, #88]	; (8001008 <MX_SPI1_Init+0xa4>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fb4:	4b14      	ldr	r3, [pc, #80]	; (8001008 <MX_SPI1_Init+0xa4>)
 8000fb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fba:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <MX_SPI1_Init+0xa4>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000fc2:	4b11      	ldr	r3, [pc, #68]	; (8001008 <MX_SPI1_Init+0xa4>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <MX_SPI1_Init+0xa4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <MX_SPI1_Init+0xa4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <MX_SPI1_Init+0xa4>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000fda:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <MX_SPI1_Init+0xa4>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000fe0:	4b09      	ldr	r3, [pc, #36]	; (8001008 <MX_SPI1_Init+0xa4>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000fe6:	4b08      	ldr	r3, [pc, #32]	; (8001008 <MX_SPI1_Init+0xa4>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <MX_SPI1_Init+0xa4>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ff2:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_SPI1_Init+0xa4>)
 8000ff4:	f009 fd6a 	bl	800aacc <HAL_SPI_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000ffe:	f000 fa0d 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	24000558 	.word	0x24000558
 800100c:	40013000 	.word	0x40013000

08001010 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001014:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <MX_UART8_Init+0x90>)
 8001016:	4a23      	ldr	r2, [pc, #140]	; (80010a4 <MX_UART8_Init+0x94>)
 8001018:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 800101a:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <MX_UART8_Init+0x90>)
 800101c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001020:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001022:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <MX_UART8_Init+0x90>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001028:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <MX_UART8_Init+0x90>)
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800102e:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <MX_UART8_Init+0x90>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001034:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <MX_UART8_Init+0x90>)
 8001036:	220c      	movs	r2, #12
 8001038:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800103a:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <MX_UART8_Init+0x90>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001040:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <MX_UART8_Init+0x90>)
 8001042:	2200      	movs	r2, #0
 8001044:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001046:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <MX_UART8_Init+0x90>)
 8001048:	2200      	movs	r2, #0
 800104a:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800104c:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <MX_UART8_Init+0x90>)
 800104e:	2200      	movs	r2, #0
 8001050:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <MX_UART8_Init+0x90>)
 8001054:	2200      	movs	r2, #0
 8001056:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001058:	4811      	ldr	r0, [pc, #68]	; (80010a0 <MX_UART8_Init+0x90>)
 800105a:	f009 fe4a 	bl	800acf2 <HAL_UART_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8001064:	f000 f9da 	bl	800141c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001068:	2100      	movs	r1, #0
 800106a:	480d      	ldr	r0, [pc, #52]	; (80010a0 <MX_UART8_Init+0x90>)
 800106c:	f00a ffda 	bl	800c024 <HAL_UARTEx_SetTxFifoThreshold>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8001076:	f000 f9d1 	bl	800141c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800107a:	2100      	movs	r1, #0
 800107c:	4808      	ldr	r0, [pc, #32]	; (80010a0 <MX_UART8_Init+0x90>)
 800107e:	f00b f80f 	bl	800c0a0 <HAL_UARTEx_SetRxFifoThreshold>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8001088:	f000 f9c8 	bl	800141c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 800108c:	4804      	ldr	r0, [pc, #16]	; (80010a0 <MX_UART8_Init+0x90>)
 800108e:	f00a ff90 	bl	800bfb2 <HAL_UARTEx_DisableFifoMode>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8001098:	f000 f9c0 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	240004cc 	.word	0x240004cc
 80010a4:	40007c00 	.word	0x40007c00

080010a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010ac:	4b22      	ldr	r3, [pc, #136]	; (8001138 <MX_USART3_UART_Init+0x90>)
 80010ae:	4a23      	ldr	r2, [pc, #140]	; (800113c <MX_USART3_UART_Init+0x94>)
 80010b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80010b2:	4b21      	ldr	r3, [pc, #132]	; (8001138 <MX_USART3_UART_Init+0x90>)
 80010b4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80010b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010ba:	4b1f      	ldr	r3, [pc, #124]	; (8001138 <MX_USART3_UART_Init+0x90>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010c0:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <MX_USART3_UART_Init+0x90>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010c6:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <MX_USART3_UART_Init+0x90>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010cc:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <MX_USART3_UART_Init+0x90>)
 80010ce:	220c      	movs	r2, #12
 80010d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d2:	4b19      	ldr	r3, [pc, #100]	; (8001138 <MX_USART3_UART_Init+0x90>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d8:	4b17      	ldr	r3, [pc, #92]	; (8001138 <MX_USART3_UART_Init+0x90>)
 80010da:	2200      	movs	r2, #0
 80010dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010de:	4b16      	ldr	r3, [pc, #88]	; (8001138 <MX_USART3_UART_Init+0x90>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010e4:	4b14      	ldr	r3, [pc, #80]	; (8001138 <MX_USART3_UART_Init+0x90>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010ea:	4b13      	ldr	r3, [pc, #76]	; (8001138 <MX_USART3_UART_Init+0x90>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010f0:	4811      	ldr	r0, [pc, #68]	; (8001138 <MX_USART3_UART_Init+0x90>)
 80010f2:	f009 fdfe 	bl	800acf2 <HAL_UART_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80010fc:	f000 f98e 	bl	800141c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001100:	2100      	movs	r1, #0
 8001102:	480d      	ldr	r0, [pc, #52]	; (8001138 <MX_USART3_UART_Init+0x90>)
 8001104:	f00a ff8e 	bl	800c024 <HAL_UARTEx_SetTxFifoThreshold>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800110e:	f000 f985 	bl	800141c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001112:	2100      	movs	r1, #0
 8001114:	4808      	ldr	r0, [pc, #32]	; (8001138 <MX_USART3_UART_Init+0x90>)
 8001116:	f00a ffc3 	bl	800c0a0 <HAL_UARTEx_SetRxFifoThreshold>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001120:	f000 f97c 	bl	800141c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001124:	4804      	ldr	r0, [pc, #16]	; (8001138 <MX_USART3_UART_Init+0x90>)
 8001126:	f00a ff44 	bl	800bfb2 <HAL_UARTEx_DisableFifoMode>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001130:	f000 f974 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}
 8001138:	240002b4 	.word	0x240002b4
 800113c:	40004800 	.word	0x40004800

08001140 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001146:	4b0d      	ldr	r3, [pc, #52]	; (800117c <MX_DMA_Init+0x3c>)
 8001148:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800114c:	4a0b      	ldr	r2, [pc, #44]	; (800117c <MX_DMA_Init+0x3c>)
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <MX_DMA_Init+0x3c>)
 8001158:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001164:	2200      	movs	r2, #0
 8001166:	2100      	movs	r1, #0
 8001168:	200b      	movs	r0, #11
 800116a:	f000 feb4 	bl	8001ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800116e:	200b      	movs	r0, #11
 8001170:	f000 fecb 	bl	8001f0a <HAL_NVIC_EnableIRQ>

}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	58024400 	.word	0x58024400

08001180 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08c      	sub	sp, #48	; 0x30
 8001184:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001186:	f107 031c 	add.w	r3, r7, #28
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
 8001194:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001196:	4b74      	ldr	r3, [pc, #464]	; (8001368 <MX_GPIO_Init+0x1e8>)
 8001198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800119c:	4a72      	ldr	r2, [pc, #456]	; (8001368 <MX_GPIO_Init+0x1e8>)
 800119e:	f043 0310 	orr.w	r3, r3, #16
 80011a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011a6:	4b70      	ldr	r3, [pc, #448]	; (8001368 <MX_GPIO_Init+0x1e8>)
 80011a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ac:	f003 0310 	and.w	r3, r3, #16
 80011b0:	61bb      	str	r3, [r7, #24]
 80011b2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b4:	4b6c      	ldr	r3, [pc, #432]	; (8001368 <MX_GPIO_Init+0x1e8>)
 80011b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ba:	4a6b      	ldr	r2, [pc, #428]	; (8001368 <MX_GPIO_Init+0x1e8>)
 80011bc:	f043 0304 	orr.w	r3, r3, #4
 80011c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011c4:	4b68      	ldr	r3, [pc, #416]	; (8001368 <MX_GPIO_Init+0x1e8>)
 80011c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ca:	f003 0304 	and.w	r3, r3, #4
 80011ce:	617b      	str	r3, [r7, #20]
 80011d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011d2:	4b65      	ldr	r3, [pc, #404]	; (8001368 <MX_GPIO_Init+0x1e8>)
 80011d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d8:	4a63      	ldr	r2, [pc, #396]	; (8001368 <MX_GPIO_Init+0x1e8>)
 80011da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011e2:	4b61      	ldr	r3, [pc, #388]	; (8001368 <MX_GPIO_Init+0x1e8>)
 80011e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f0:	4b5d      	ldr	r3, [pc, #372]	; (8001368 <MX_GPIO_Init+0x1e8>)
 80011f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f6:	4a5c      	ldr	r2, [pc, #368]	; (8001368 <MX_GPIO_Init+0x1e8>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001200:	4b59      	ldr	r3, [pc, #356]	; (8001368 <MX_GPIO_Init+0x1e8>)
 8001202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800120e:	4b56      	ldr	r3, [pc, #344]	; (8001368 <MX_GPIO_Init+0x1e8>)
 8001210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001214:	4a54      	ldr	r2, [pc, #336]	; (8001368 <MX_GPIO_Init+0x1e8>)
 8001216:	f043 0302 	orr.w	r3, r3, #2
 800121a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800121e:	4b52      	ldr	r3, [pc, #328]	; (8001368 <MX_GPIO_Init+0x1e8>)
 8001220:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800122c:	4b4e      	ldr	r3, [pc, #312]	; (8001368 <MX_GPIO_Init+0x1e8>)
 800122e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001232:	4a4d      	ldr	r2, [pc, #308]	; (8001368 <MX_GPIO_Init+0x1e8>)
 8001234:	f043 0308 	orr.w	r3, r3, #8
 8001238:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800123c:	4b4a      	ldr	r3, [pc, #296]	; (8001368 <MX_GPIO_Init+0x1e8>)
 800123e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001242:	f003 0308 	and.w	r3, r3, #8
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_485_TX_EN_Pin|RS_485_RX_EN_Pin, GPIO_PIN_RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	210c      	movs	r1, #12
 800124e:	4847      	ldr	r0, [pc, #284]	; (800136c <MX_GPIO_Init+0x1ec>)
 8001250:	f003 fc7e 	bl	8004b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TELE_CE_Pin|TELE_CS_Pin, GPIO_PIN_RESET);
 8001254:	2200      	movs	r2, #0
 8001256:	2103      	movs	r1, #3
 8001258:	4845      	ldr	r0, [pc, #276]	; (8001370 <MX_GPIO_Init+0x1f0>)
 800125a:	f003 fc79 	bl	8004b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	2101      	movs	r1, #1
 8001262:	4844      	ldr	r0, [pc, #272]	; (8001374 <MX_GPIO_Init+0x1f4>)
 8001264:	f003 fc74 	bl	8004b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_SET);
 8001268:	2201      	movs	r2, #1
 800126a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800126e:	4842      	ldr	r0, [pc, #264]	; (8001378 <MX_GPIO_Init+0x1f8>)
 8001270:	f003 fc6e 	bl	8004b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_INT_GPIO_Port, GPS_INT_Pin, GPIO_PIN_RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800127a:	483f      	ldr	r0, [pc, #252]	; (8001378 <MX_GPIO_Init+0x1f8>)
 800127c:	f003 fc68 	bl	8004b50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_485_TX_EN_Pin RS_485_RX_EN_Pin */
  GPIO_InitStruct.Pin = RS_485_TX_EN_Pin|RS_485_RX_EN_Pin;
 8001280:	230c      	movs	r3, #12
 8001282:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001284:	2301      	movs	r3, #1
 8001286:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2300      	movs	r3, #0
 800128e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001290:	f107 031c 	add.w	r3, r7, #28
 8001294:	4619      	mov	r1, r3
 8001296:	4835      	ldr	r0, [pc, #212]	; (800136c <MX_GPIO_Init+0x1ec>)
 8001298:	f003 fa92 	bl	80047c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TELE_CE_Pin TELE_CS_Pin */
  GPIO_InitStruct.Pin = TELE_CE_Pin|TELE_CS_Pin;
 800129c:	2303      	movs	r3, #3
 800129e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a0:	2301      	movs	r3, #1
 80012a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a8:	2300      	movs	r3, #0
 80012aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	4619      	mov	r1, r3
 80012b2:	482f      	ldr	r0, [pc, #188]	; (8001370 <MX_GPIO_Init+0x1f0>)
 80012b4:	f003 fa84 	bl	80047c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TELE_IRQ_Pin */
  GPIO_InitStruct.Pin = TELE_IRQ_Pin;
 80012b8:	2304      	movs	r3, #4
 80012ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012bc:	4b2f      	ldr	r3, [pc, #188]	; (800137c <MX_GPIO_Init+0x1fc>)
 80012be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TELE_IRQ_GPIO_Port, &GPIO_InitStruct);
 80012c4:	f107 031c 	add.w	r3, r7, #28
 80012c8:	4619      	mov	r1, r3
 80012ca:	4829      	ldr	r0, [pc, #164]	; (8001370 <MX_GPIO_Init+0x1f0>)
 80012cc:	f003 fa78 	bl	80047c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80012d0:	2301      	movs	r3, #1
 80012d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d4:	2301      	movs	r3, #1
 80012d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2300      	movs	r3, #0
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80012e0:	f107 031c 	add.w	r3, r7, #28
 80012e4:	4619      	mov	r1, r3
 80012e6:	4823      	ldr	r0, [pc, #140]	; (8001374 <MX_GPIO_Init+0x1f4>)
 80012e8:	f003 fa6a 	bl	80047c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 80012ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012f2:	4b22      	ldr	r3, [pc, #136]	; (800137c <MX_GPIO_Init+0x1fc>)
 80012f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 80012fa:	f107 031c 	add.w	r3, r7, #28
 80012fe:	4619      	mov	r1, r3
 8001300:	481a      	ldr	r0, [pc, #104]	; (800136c <MX_GPIO_Init+0x1ec>)
 8001302:	f003 fa5d 	bl	80047c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPS_RST_Pin GPS_INT_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin|GPS_INT_Pin;
 8001306:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800130a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130c:	2301      	movs	r3, #1
 800130e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001314:	2300      	movs	r3, #0
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001318:	f107 031c 	add.w	r3, r7, #28
 800131c:	4619      	mov	r1, r3
 800131e:	4816      	ldr	r0, [pc, #88]	; (8001378 <MX_GPIO_Init+0x1f8>)
 8001320:	f003 fa4e 	bl	80047c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DET_Pin */
  GPIO_InitStruct.Pin = CARD_DET_Pin;
 8001324:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800132a:	2300      	movs	r3, #0
 800132c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DET_GPIO_Port, &GPIO_InitStruct);
 8001332:	f107 031c 	add.w	r3, r7, #28
 8001336:	4619      	mov	r1, r3
 8001338:	480d      	ldr	r0, [pc, #52]	; (8001370 <MX_GPIO_Init+0x1f0>)
 800133a:	f003 fa41 	bl	80047c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800133e:	2200      	movs	r2, #0
 8001340:	2100      	movs	r1, #0
 8001342:	2008      	movs	r0, #8
 8001344:	f000 fdc7 	bl	8001ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001348:	2008      	movs	r0, #8
 800134a:	f000 fdde 	bl	8001f0a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	2017      	movs	r0, #23
 8001354:	f000 fdbf 	bl	8001ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001358:	2017      	movs	r0, #23
 800135a:	f000 fdd6 	bl	8001f0a <HAL_NVIC_EnableIRQ>

}
 800135e:	bf00      	nop
 8001360:	3730      	adds	r7, #48	; 0x30
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	58024400 	.word	0x58024400
 800136c:	58021000 	.word	0x58021000
 8001370:	58020000 	.word	0x58020000
 8001374:	58020400 	.word	0x58020400
 8001378:	58020c00 	.word	0x58020c00
 800137c:	11110000 	.word	0x11110000

08001380 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /*
  for(int i=0; i<BUFFLENGTH; i++){
	  printf("%c", rxBuf[i]);
  }
	*/
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800139e:	2101      	movs	r1, #1
 80013a0:	481a      	ldr	r0, [pc, #104]	; (800140c <HAL_GPIO_EXTI_Callback+0x78>)
 80013a2:	f003 fbee 	bl	8004b82 <HAL_GPIO_TogglePin>
  sTime.Hours = 0;
 80013a6:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <HAL_GPIO_EXTI_Callback+0x7c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]
    sTime.Minutes = 0;
 80013ac:	4b18      	ldr	r3, [pc, #96]	; (8001410 <HAL_GPIO_EXTI_Callback+0x7c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	705a      	strb	r2, [r3, #1]
    sTime.Seconds = 0;
 80013b2:	4b17      	ldr	r3, [pc, #92]	; (8001410 <HAL_GPIO_EXTI_Callback+0x7c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	709a      	strb	r2, [r3, #2]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013b8:	4b15      	ldr	r3, [pc, #84]	; (8001410 <HAL_GPIO_EXTI_Callback+0x7c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013be:	4b14      	ldr	r3, [pc, #80]	; (8001410 <HAL_GPIO_EXTI_Callback+0x7c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80013c4:	2200      	movs	r2, #0
 80013c6:	4912      	ldr	r1, [pc, #72]	; (8001410 <HAL_GPIO_EXTI_Callback+0x7c>)
 80013c8:	4812      	ldr	r0, [pc, #72]	; (8001414 <HAL_GPIO_EXTI_Callback+0x80>)
 80013ca:	f007 fd25 	bl	8008e18 <HAL_RTC_SetTime>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <HAL_GPIO_EXTI_Callback+0x44>
    {
      Error_Handler();
 80013d4:	f000 f822 	bl	800141c <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <HAL_GPIO_EXTI_Callback+0x84>)
 80013da:	2201      	movs	r2, #1
 80013dc:	701a      	strb	r2, [r3, #0]
    sDate.Month = RTC_MONTH_JANUARY;
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <HAL_GPIO_EXTI_Callback+0x84>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	705a      	strb	r2, [r3, #1]
    sDate.Date = 1;
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <HAL_GPIO_EXTI_Callback+0x84>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	709a      	strb	r2, [r3, #2]
    sDate.Year = 0;
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <HAL_GPIO_EXTI_Callback+0x84>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	70da      	strb	r2, [r3, #3]

    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80013f0:	2200      	movs	r2, #0
 80013f2:	4909      	ldr	r1, [pc, #36]	; (8001418 <HAL_GPIO_EXTI_Callback+0x84>)
 80013f4:	4807      	ldr	r0, [pc, #28]	; (8001414 <HAL_GPIO_EXTI_Callback+0x80>)
 80013f6:	f007 fe09 	bl	800900c <HAL_RTC_SetDate>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <HAL_GPIO_EXTI_Callback+0x70>
    {
      Error_Handler();
 8001400:	f000 f80c 	bl	800141c <Error_Handler>
    }

}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	58020400 	.word	0x58020400
 8001410:	24000204 	.word	0x24000204
 8001414:	24000408 	.word	0x24000408
 8001418:	24000218 	.word	0x24000218

0800141c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001420:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001422:	e7fe      	b.n	8001422 <Error_Handler+0x6>

08001424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142a:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <HAL_MspInit+0x30>)
 800142c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001430:	4a08      	ldr	r2, [pc, #32]	; (8001454 <HAL_MspInit+0x30>)
 8001432:	f043 0302 	orr.w	r3, r3, #2
 8001436:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <HAL_MspInit+0x30>)
 800143c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	58024400 	.word	0x58024400

08001458 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08c      	sub	sp, #48	; 0x30
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 031c 	add.w	r3, r7, #28
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a3d      	ldr	r2, [pc, #244]	; (800156c <HAL_FDCAN_MspInit+0x114>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d138      	bne.n	80014ec <HAL_FDCAN_MspInit+0x94>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800147a:	4b3d      	ldr	r3, [pc, #244]	; (8001570 <HAL_FDCAN_MspInit+0x118>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	3301      	adds	r3, #1
 8001480:	4a3b      	ldr	r2, [pc, #236]	; (8001570 <HAL_FDCAN_MspInit+0x118>)
 8001482:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001484:	4b3a      	ldr	r3, [pc, #232]	; (8001570 <HAL_FDCAN_MspInit+0x118>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d10e      	bne.n	80014aa <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800148c:	4b39      	ldr	r3, [pc, #228]	; (8001574 <HAL_FDCAN_MspInit+0x11c>)
 800148e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001492:	4a38      	ldr	r2, [pc, #224]	; (8001574 <HAL_FDCAN_MspInit+0x11c>)
 8001494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001498:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800149c:	4b35      	ldr	r3, [pc, #212]	; (8001574 <HAL_FDCAN_MspInit+0x11c>)
 800149e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80014a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a6:	61bb      	str	r3, [r7, #24]
 80014a8:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014aa:	4b32      	ldr	r3, [pc, #200]	; (8001574 <HAL_FDCAN_MspInit+0x11c>)
 80014ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b0:	4a30      	ldr	r2, [pc, #192]	; (8001574 <HAL_FDCAN_MspInit+0x11c>)
 80014b2:	f043 0302 	orr.w	r3, r3, #2
 80014b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ba:	4b2e      	ldr	r3, [pc, #184]	; (8001574 <HAL_FDCAN_MspInit+0x11c>)
 80014bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ce:	2302      	movs	r3, #2
 80014d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2300      	movs	r3, #0
 80014d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80014da:	2309      	movs	r3, #9
 80014dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014de:	f107 031c 	add.w	r3, r7, #28
 80014e2:	4619      	mov	r1, r3
 80014e4:	4824      	ldr	r0, [pc, #144]	; (8001578 <HAL_FDCAN_MspInit+0x120>)
 80014e6:	f003 f96b 	bl	80047c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80014ea:	e03b      	b.n	8001564 <HAL_FDCAN_MspInit+0x10c>
  else if(hfdcan->Instance==FDCAN2)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a22      	ldr	r2, [pc, #136]	; (800157c <HAL_FDCAN_MspInit+0x124>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d136      	bne.n	8001564 <HAL_FDCAN_MspInit+0x10c>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80014f6:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <HAL_FDCAN_MspInit+0x118>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	3301      	adds	r3, #1
 80014fc:	4a1c      	ldr	r2, [pc, #112]	; (8001570 <HAL_FDCAN_MspInit+0x118>)
 80014fe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001500:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <HAL_FDCAN_MspInit+0x118>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d10e      	bne.n	8001526 <HAL_FDCAN_MspInit+0xce>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001508:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <HAL_FDCAN_MspInit+0x11c>)
 800150a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800150e:	4a19      	ldr	r2, [pc, #100]	; (8001574 <HAL_FDCAN_MspInit+0x11c>)
 8001510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001514:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001518:	4b16      	ldr	r3, [pc, #88]	; (8001574 <HAL_FDCAN_MspInit+0x11c>)
 800151a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800151e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001526:	4b13      	ldr	r3, [pc, #76]	; (8001574 <HAL_FDCAN_MspInit+0x11c>)
 8001528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800152c:	4a11      	ldr	r2, [pc, #68]	; (8001574 <HAL_FDCAN_MspInit+0x11c>)
 800152e:	f043 0302 	orr.w	r3, r3, #2
 8001532:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001536:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <HAL_FDCAN_MspInit+0x11c>)
 8001538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001544:	2360      	movs	r3, #96	; 0x60
 8001546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	2302      	movs	r3, #2
 800154a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001554:	2309      	movs	r3, #9
 8001556:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001558:	f107 031c 	add.w	r3, r7, #28
 800155c:	4619      	mov	r1, r3
 800155e:	4806      	ldr	r0, [pc, #24]	; (8001578 <HAL_FDCAN_MspInit+0x120>)
 8001560:	f003 f92e 	bl	80047c0 <HAL_GPIO_Init>
}
 8001564:	bf00      	nop
 8001566:	3730      	adds	r7, #48	; 0x30
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	4000a000 	.word	0x4000a000
 8001570:	2400021c 	.word	0x2400021c
 8001574:	58024400 	.word	0x58024400
 8001578:	58020400 	.word	0x58020400
 800157c:	4000a400 	.word	0x4000a400

08001580 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a07      	ldr	r2, [pc, #28]	; (80015ac <HAL_RTC_MspInit+0x2c>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d105      	bne.n	800159e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001592:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <HAL_RTC_MspInit+0x30>)
 8001594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001596:	4a06      	ldr	r2, [pc, #24]	; (80015b0 <HAL_RTC_MspInit+0x30>)
 8001598:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800159c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	58004000 	.word	0x58004000
 80015b0:	58024400 	.word	0x58024400

080015b4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a2a      	ldr	r2, [pc, #168]	; (800167c <HAL_SD_MspInit+0xc8>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d14d      	bne.n	8001672 <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80015d6:	4b2a      	ldr	r3, [pc, #168]	; (8001680 <HAL_SD_MspInit+0xcc>)
 80015d8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80015dc:	4a28      	ldr	r2, [pc, #160]	; (8001680 <HAL_SD_MspInit+0xcc>)
 80015de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80015e6:	4b26      	ldr	r3, [pc, #152]	; (8001680 <HAL_SD_MspInit+0xcc>)
 80015e8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80015ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f4:	4b22      	ldr	r3, [pc, #136]	; (8001680 <HAL_SD_MspInit+0xcc>)
 80015f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015fa:	4a21      	ldr	r2, [pc, #132]	; (8001680 <HAL_SD_MspInit+0xcc>)
 80015fc:	f043 0304 	orr.w	r3, r3, #4
 8001600:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001604:	4b1e      	ldr	r3, [pc, #120]	; (8001680 <HAL_SD_MspInit+0xcc>)
 8001606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800160a:	f003 0304 	and.w	r3, r3, #4
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001612:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <HAL_SD_MspInit+0xcc>)
 8001614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001618:	4a19      	ldr	r2, [pc, #100]	; (8001680 <HAL_SD_MspInit+0xcc>)
 800161a:	f043 0308 	orr.w	r3, r3, #8
 800161e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001622:	4b17      	ldr	r3, [pc, #92]	; (8001680 <HAL_SD_MspInit+0xcc>)
 8001624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001628:	f003 0308 	and.w	r3, r3, #8
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001630:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001634:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001642:	230c      	movs	r3, #12
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4619      	mov	r1, r3
 800164c:	480d      	ldr	r0, [pc, #52]	; (8001684 <HAL_SD_MspInit+0xd0>)
 800164e:	f003 f8b7 	bl	80047c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001652:	2304      	movs	r3, #4
 8001654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165e:	2303      	movs	r3, #3
 8001660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001662:	230c      	movs	r3, #12
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4619      	mov	r1, r3
 800166c:	4806      	ldr	r0, [pc, #24]	; (8001688 <HAL_SD_MspInit+0xd4>)
 800166e:	f003 f8a7 	bl	80047c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001672:	bf00      	nop
 8001674:	3728      	adds	r7, #40	; 0x28
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	52007000 	.word	0x52007000
 8001680:	58024400 	.word	0x58024400
 8001684:	58020800 	.word	0x58020800
 8001688:	58020c00 	.word	0x58020c00

0800168c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	; 0x28
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a1a      	ldr	r2, [pc, #104]	; (8001714 <HAL_SPI_MspInit+0x88>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d12d      	bne.n	800170a <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016ae:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <HAL_SPI_MspInit+0x8c>)
 80016b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016b4:	4a18      	ldr	r2, [pc, #96]	; (8001718 <HAL_SPI_MspInit+0x8c>)
 80016b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80016be:	4b16      	ldr	r3, [pc, #88]	; (8001718 <HAL_SPI_MspInit+0x8c>)
 80016c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <HAL_SPI_MspInit+0x8c>)
 80016ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d2:	4a11      	ldr	r2, [pc, #68]	; (8001718 <HAL_SPI_MspInit+0x8c>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016dc:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <HAL_SPI_MspInit+0x8c>)
 80016de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80016ea:	23e0      	movs	r3, #224	; 0xe0
 80016ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ee:	2302      	movs	r3, #2
 80016f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f6:	2300      	movs	r3, #0
 80016f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016fa:	2305      	movs	r3, #5
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	4619      	mov	r1, r3
 8001704:	4805      	ldr	r0, [pc, #20]	; (800171c <HAL_SPI_MspInit+0x90>)
 8001706:	f003 f85b 	bl	80047c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800170a:	bf00      	nop
 800170c:	3728      	adds	r7, #40	; 0x28
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40013000 	.word	0x40013000
 8001718:	58024400 	.word	0x58024400
 800171c:	58020000 	.word	0x58020000

08001720 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08c      	sub	sp, #48	; 0x30
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 031c 	add.w	r3, r7, #28
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a4b      	ldr	r2, [pc, #300]	; (800186c <HAL_UART_MspInit+0x14c>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d12e      	bne.n	80017a0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8001742:	4b4b      	ldr	r3, [pc, #300]	; (8001870 <HAL_UART_MspInit+0x150>)
 8001744:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001748:	4a49      	ldr	r2, [pc, #292]	; (8001870 <HAL_UART_MspInit+0x150>)
 800174a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800174e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001752:	4b47      	ldr	r3, [pc, #284]	; (8001870 <HAL_UART_MspInit+0x150>)
 8001754:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001758:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800175c:	61bb      	str	r3, [r7, #24]
 800175e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001760:	4b43      	ldr	r3, [pc, #268]	; (8001870 <HAL_UART_MspInit+0x150>)
 8001762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001766:	4a42      	ldr	r2, [pc, #264]	; (8001870 <HAL_UART_MspInit+0x150>)
 8001768:	f043 0310 	orr.w	r3, r3, #16
 800176c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001770:	4b3f      	ldr	r3, [pc, #252]	; (8001870 <HAL_UART_MspInit+0x150>)
 8001772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001776:	f003 0310 	and.w	r3, r3, #16
 800177a:	617b      	str	r3, [r7, #20]
 800177c:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800177e:	2303      	movs	r3, #3
 8001780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178a:	2300      	movs	r3, #0
 800178c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800178e:	2308      	movs	r3, #8
 8001790:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001792:	f107 031c 	add.w	r3, r7, #28
 8001796:	4619      	mov	r1, r3
 8001798:	4836      	ldr	r0, [pc, #216]	; (8001874 <HAL_UART_MspInit+0x154>)
 800179a:	f003 f811 	bl	80047c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800179e:	e061      	b.n	8001864 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a34      	ldr	r2, [pc, #208]	; (8001878 <HAL_UART_MspInit+0x158>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d15c      	bne.n	8001864 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017aa:	4b31      	ldr	r3, [pc, #196]	; (8001870 <HAL_UART_MspInit+0x150>)
 80017ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017b0:	4a2f      	ldr	r2, [pc, #188]	; (8001870 <HAL_UART_MspInit+0x150>)
 80017b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017ba:	4b2d      	ldr	r3, [pc, #180]	; (8001870 <HAL_UART_MspInit+0x150>)
 80017bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017c8:	4b29      	ldr	r3, [pc, #164]	; (8001870 <HAL_UART_MspInit+0x150>)
 80017ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ce:	4a28      	ldr	r2, [pc, #160]	; (8001870 <HAL_UART_MspInit+0x150>)
 80017d0:	f043 0308 	orr.w	r3, r3, #8
 80017d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017d8:	4b25      	ldr	r3, [pc, #148]	; (8001870 <HAL_UART_MspInit+0x150>)
 80017da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017de:	f003 0308 	and.w	r3, r3, #8
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	2302      	movs	r3, #2
 80017ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f4:	2300      	movs	r3, #0
 80017f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017f8:	2307      	movs	r3, #7
 80017fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017fc:	f107 031c 	add.w	r3, r7, #28
 8001800:	4619      	mov	r1, r3
 8001802:	481e      	ldr	r0, [pc, #120]	; (800187c <HAL_UART_MspInit+0x15c>)
 8001804:	f002 ffdc 	bl	80047c0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001808:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <HAL_UART_MspInit+0x160>)
 800180a:	4a1e      	ldr	r2, [pc, #120]	; (8001884 <HAL_UART_MspInit+0x164>)
 800180c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800180e:	4b1c      	ldr	r3, [pc, #112]	; (8001880 <HAL_UART_MspInit+0x160>)
 8001810:	222d      	movs	r2, #45	; 0x2d
 8001812:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001814:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <HAL_UART_MspInit+0x160>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800181a:	4b19      	ldr	r3, [pc, #100]	; (8001880 <HAL_UART_MspInit+0x160>)
 800181c:	2200      	movs	r2, #0
 800181e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001820:	4b17      	ldr	r3, [pc, #92]	; (8001880 <HAL_UART_MspInit+0x160>)
 8001822:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001826:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001828:	4b15      	ldr	r3, [pc, #84]	; (8001880 <HAL_UART_MspInit+0x160>)
 800182a:	2200      	movs	r2, #0
 800182c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800182e:	4b14      	ldr	r3, [pc, #80]	; (8001880 <HAL_UART_MspInit+0x160>)
 8001830:	2200      	movs	r2, #0
 8001832:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001834:	4b12      	ldr	r3, [pc, #72]	; (8001880 <HAL_UART_MspInit+0x160>)
 8001836:	f44f 7280 	mov.w	r2, #256	; 0x100
 800183a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800183c:	4b10      	ldr	r3, [pc, #64]	; (8001880 <HAL_UART_MspInit+0x160>)
 800183e:	2200      	movs	r2, #0
 8001840:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001842:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <HAL_UART_MspInit+0x160>)
 8001844:	2200      	movs	r2, #0
 8001846:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001848:	480d      	ldr	r0, [pc, #52]	; (8001880 <HAL_UART_MspInit+0x160>)
 800184a:	f000 fb79 	bl	8001f40 <HAL_DMA_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <HAL_UART_MspInit+0x138>
      Error_Handler();
 8001854:	f7ff fde2 	bl	800141c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a09      	ldr	r2, [pc, #36]	; (8001880 <HAL_UART_MspInit+0x160>)
 800185c:	679a      	str	r2, [r3, #120]	; 0x78
 800185e:	4a08      	ldr	r2, [pc, #32]	; (8001880 <HAL_UART_MspInit+0x160>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001864:	bf00      	nop
 8001866:	3730      	adds	r7, #48	; 0x30
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40007c00 	.word	0x40007c00
 8001870:	58024400 	.word	0x58024400
 8001874:	58021000 	.word	0x58021000
 8001878:	40004800 	.word	0x40004800
 800187c:	58020c00 	.word	0x58020c00
 8001880:	2400023c 	.word	0x2400023c
 8001884:	40020010 	.word	0x40020010

08001888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800188c:	e7fe      	b.n	800188c <NMI_Handler+0x4>

0800188e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001892:	e7fe      	b.n	8001892 <HardFault_Handler+0x4>

08001894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001898:	e7fe      	b.n	8001898 <MemManage_Handler+0x4>

0800189a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800189e:	e7fe      	b.n	800189e <BusFault_Handler+0x4>

080018a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a4:	e7fe      	b.n	80018a4 <UsageFault_Handler+0x4>

080018a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018d4:	f000 f9d6 	bl	8001c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}

080018dc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80018e0:	2004      	movs	r0, #4
 80018e2:	f003 f969 	bl	8004bb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80018f0:	4802      	ldr	r0, [pc, #8]	; (80018fc <DMA1_Stream0_IRQHandler+0x10>)
 80018f2:	f001 f8eb 	bl	8002acc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	2400023c 	.word	0x2400023c

08001900 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001904:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001908:	f003 f956 	bl	8004bb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}

08001910 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001914:	4802      	ldr	r0, [pc, #8]	; (8001920 <OTG_FS_IRQHandler+0x10>)
 8001916:	f003 fac0 	bl	8004e9a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	24001fbc 	.word	0x24001fbc

08001924 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	e00a      	b.n	800194c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001936:	f3af 8000 	nop.w
 800193a:	4601      	mov	r1, r0
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	1c5a      	adds	r2, r3, #1
 8001940:	60ba      	str	r2, [r7, #8]
 8001942:	b2ca      	uxtb	r2, r1
 8001944:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	3301      	adds	r3, #1
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	429a      	cmp	r2, r3
 8001952:	dbf0      	blt.n	8001936 <_read+0x12>
	}

return len;
 8001954:	687b      	ldr	r3, [r7, #4]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <_close>:
	}
	return len;
}

int _close(int file)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
	return -1;
 8001966:	f04f 33ff 	mov.w	r3, #4294967295
}
 800196a:	4618      	mov	r0, r3
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
 800197e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001986:	605a      	str	r2, [r3, #4]
	return 0;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <_isatty>:

int _isatty(int file)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
	return 1;
 800199e:	2301      	movs	r3, #1
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
	return 0;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
	...

080019c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d0:	4a14      	ldr	r2, [pc, #80]	; (8001a24 <_sbrk+0x5c>)
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <_sbrk+0x60>)
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019dc:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <_sbrk+0x64>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d102      	bne.n	80019ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019e4:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <_sbrk+0x64>)
 80019e6:	4a12      	ldr	r2, [pc, #72]	; (8001a30 <_sbrk+0x68>)
 80019e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ea:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <_sbrk+0x64>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4413      	add	r3, r2
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d207      	bcs.n	8001a08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019f8:	f00e ffb4 	bl	8010964 <__errno>
 80019fc:	4602      	mov	r2, r0
 80019fe:	230c      	movs	r3, #12
 8001a00:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001a02:	f04f 33ff 	mov.w	r3, #4294967295
 8001a06:	e009      	b.n	8001a1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <_sbrk+0x64>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a0e:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <_sbrk+0x64>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	4a05      	ldr	r2, [pc, #20]	; (8001a2c <_sbrk+0x64>)
 8001a18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	24080000 	.word	0x24080000
 8001a28:	00000400 	.word	0x00000400
 8001a2c:	24000220 	.word	0x24000220
 8001a30:	240023c8 	.word	0x240023c8

08001a34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a38:	4b39      	ldr	r3, [pc, #228]	; (8001b20 <SystemInit+0xec>)
 8001a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a3e:	4a38      	ldr	r2, [pc, #224]	; (8001b20 <SystemInit+0xec>)
 8001a40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a48:	4b36      	ldr	r3, [pc, #216]	; (8001b24 <SystemInit+0xf0>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 030f 	and.w	r3, r3, #15
 8001a50:	2b06      	cmp	r3, #6
 8001a52:	d807      	bhi.n	8001a64 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a54:	4b33      	ldr	r3, [pc, #204]	; (8001b24 <SystemInit+0xf0>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f023 030f 	bic.w	r3, r3, #15
 8001a5c:	4a31      	ldr	r2, [pc, #196]	; (8001b24 <SystemInit+0xf0>)
 8001a5e:	f043 0307 	orr.w	r3, r3, #7
 8001a62:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a64:	4b30      	ldr	r3, [pc, #192]	; (8001b28 <SystemInit+0xf4>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a2f      	ldr	r2, [pc, #188]	; (8001b28 <SystemInit+0xf4>)
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a70:	4b2d      	ldr	r3, [pc, #180]	; (8001b28 <SystemInit+0xf4>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a76:	4b2c      	ldr	r3, [pc, #176]	; (8001b28 <SystemInit+0xf4>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	492b      	ldr	r1, [pc, #172]	; (8001b28 <SystemInit+0xf4>)
 8001a7c:	4b2b      	ldr	r3, [pc, #172]	; (8001b2c <SystemInit+0xf8>)
 8001a7e:	4013      	ands	r3, r2
 8001a80:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a82:	4b28      	ldr	r3, [pc, #160]	; (8001b24 <SystemInit+0xf0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	2b07      	cmp	r3, #7
 8001a8c:	d907      	bls.n	8001a9e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a8e:	4b25      	ldr	r3, [pc, #148]	; (8001b24 <SystemInit+0xf0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f023 030f 	bic.w	r3, r3, #15
 8001a96:	4a23      	ldr	r2, [pc, #140]	; (8001b24 <SystemInit+0xf0>)
 8001a98:	f043 0307 	orr.w	r3, r3, #7
 8001a9c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001a9e:	4b22      	ldr	r3, [pc, #136]	; (8001b28 <SystemInit+0xf4>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001aa4:	4b20      	ldr	r3, [pc, #128]	; (8001b28 <SystemInit+0xf4>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001aaa:	4b1f      	ldr	r3, [pc, #124]	; (8001b28 <SystemInit+0xf4>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001ab0:	4b1d      	ldr	r3, [pc, #116]	; (8001b28 <SystemInit+0xf4>)
 8001ab2:	4a1f      	ldr	r2, [pc, #124]	; (8001b30 <SystemInit+0xfc>)
 8001ab4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001ab6:	4b1c      	ldr	r3, [pc, #112]	; (8001b28 <SystemInit+0xf4>)
 8001ab8:	4a1e      	ldr	r2, [pc, #120]	; (8001b34 <SystemInit+0x100>)
 8001aba:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001abc:	4b1a      	ldr	r3, [pc, #104]	; (8001b28 <SystemInit+0xf4>)
 8001abe:	4a1e      	ldr	r2, [pc, #120]	; (8001b38 <SystemInit+0x104>)
 8001ac0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001ac2:	4b19      	ldr	r3, [pc, #100]	; (8001b28 <SystemInit+0xf4>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001ac8:	4b17      	ldr	r3, [pc, #92]	; (8001b28 <SystemInit+0xf4>)
 8001aca:	4a1b      	ldr	r2, [pc, #108]	; (8001b38 <SystemInit+0x104>)
 8001acc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001ace:	4b16      	ldr	r3, [pc, #88]	; (8001b28 <SystemInit+0xf4>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001ad4:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <SystemInit+0xf4>)
 8001ad6:	4a18      	ldr	r2, [pc, #96]	; (8001b38 <SystemInit+0x104>)
 8001ad8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001ada:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <SystemInit+0xf4>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ae0:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <SystemInit+0xf4>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a10      	ldr	r2, [pc, #64]	; (8001b28 <SystemInit+0xf4>)
 8001ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001aea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001aec:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <SystemInit+0xf4>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001af2:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <SystemInit+0x108>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <SystemInit+0x10c>)
 8001af8:	4013      	ands	r3, r2
 8001afa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001afe:	d202      	bcs.n	8001b06 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001b00:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <SystemInit+0x110>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001b06:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <SystemInit+0x114>)
 8001b08:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001b0c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b0e:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <SystemInit+0xec>)
 8001b10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b14:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	e000ed00 	.word	0xe000ed00
 8001b24:	52002000 	.word	0x52002000
 8001b28:	58024400 	.word	0x58024400
 8001b2c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b30:	02020200 	.word	0x02020200
 8001b34:	01ff0000 	.word	0x01ff0000
 8001b38:	01010280 	.word	0x01010280
 8001b3c:	5c001000 	.word	0x5c001000
 8001b40:	ffff0000 	.word	0xffff0000
 8001b44:	51008108 	.word	0x51008108
 8001b48:	52004000 	.word	0x52004000

08001b4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b84 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b50:	f7ff ff70 	bl	8001a34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b54:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b56:	e003      	b.n	8001b60 <LoopCopyDataInit>

08001b58 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b58:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001b5a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b5c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b5e:	3104      	adds	r1, #4

08001b60 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b60:	480a      	ldr	r0, [pc, #40]	; (8001b8c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001b62:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001b64:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b66:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b68:	d3f6      	bcc.n	8001b58 <CopyDataInit>
  ldr  r2, =_sbss
 8001b6a:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001b6c:	e002      	b.n	8001b74 <LoopFillZerobss>

08001b6e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b6e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b70:	f842 3b04 	str.w	r3, [r2], #4

08001b74 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b74:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001b76:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b78:	d3f9      	bcc.n	8001b6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b7a:	f00e fef9 	bl	8010970 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b7e:	f7fe fea1 	bl	80008c4 <main>
  bx  lr    
 8001b82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b84:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001b88:	08011de4 	.word	0x08011de4
  ldr  r0, =_sdata
 8001b8c:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001b90:	240001e8 	.word	0x240001e8
  ldr  r2, =_sbss
 8001b94:	240001e8 	.word	0x240001e8
  ldr  r3, = _ebss
 8001b98:	240023c8 	.word	0x240023c8

08001b9c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b9c:	e7fe      	b.n	8001b9c <ADC3_IRQHandler>
	...

08001ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba6:	2003      	movs	r0, #3
 8001ba8:	f000 f98a 	bl	8001ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001bac:	f005 f81a 	bl	8006be4 <HAL_RCC_GetSysClockFreq>
 8001bb0:	4601      	mov	r1, r0
 8001bb2:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <HAL_Init+0x68>)
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	0a1b      	lsrs	r3, r3, #8
 8001bb8:	f003 030f 	and.w	r3, r3, #15
 8001bbc:	4a13      	ldr	r2, [pc, #76]	; (8001c0c <HAL_Init+0x6c>)
 8001bbe:	5cd3      	ldrb	r3, [r2, r3]
 8001bc0:	f003 031f 	and.w	r3, r3, #31
 8001bc4:	fa21 f303 	lsr.w	r3, r1, r3
 8001bc8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001bca:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <HAL_Init+0x68>)
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	4a0e      	ldr	r2, [pc, #56]	; (8001c0c <HAL_Init+0x6c>)
 8001bd4:	5cd3      	ldrb	r3, [r2, r3]
 8001bd6:	f003 031f 	and.w	r3, r3, #31
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8001be0:	4a0b      	ldr	r2, [pc, #44]	; (8001c10 <HAL_Init+0x70>)
 8001be2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001be4:	4a0b      	ldr	r2, [pc, #44]	; (8001c14 <HAL_Init+0x74>)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bea:	2000      	movs	r0, #0
 8001bec:	f000 f814 	bl	8001c18 <HAL_InitTick>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e002      	b.n	8001c00 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001bfa:	f7ff fc13 	bl	8001424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	58024400 	.word	0x58024400
 8001c0c:	08011cf8 	.word	0x08011cf8
 8001c10:	24000004 	.word	0x24000004
 8001c14:	24000000 	.word	0x24000000

08001c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c20:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <HAL_InitTick+0x60>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e021      	b.n	8001c70 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c2c:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <HAL_InitTick+0x64>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <HAL_InitTick+0x60>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	4619      	mov	r1, r3
 8001c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 f96f 	bl	8001f26 <HAL_SYSTICK_Config>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e00e      	b.n	8001c70 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b0f      	cmp	r3, #15
 8001c56:	d80a      	bhi.n	8001c6e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c60:	f000 f939 	bl	8001ed6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c64:	4a06      	ldr	r2, [pc, #24]	; (8001c80 <HAL_InitTick+0x68>)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	e000      	b.n	8001c70 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	2400000c 	.word	0x2400000c
 8001c7c:	24000000 	.word	0x24000000
 8001c80:	24000008 	.word	0x24000008

08001c84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_IncTick+0x20>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_IncTick+0x24>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4413      	add	r3, r2
 8001c94:	4a04      	ldr	r2, [pc, #16]	; (8001ca8 <HAL_IncTick+0x24>)
 8001c96:	6013      	str	r3, [r2, #0]
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	2400000c 	.word	0x2400000c
 8001ca8:	24000680 	.word	0x24000680

08001cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb0:	4b03      	ldr	r3, [pc, #12]	; (8001cc0 <HAL_GetTick+0x14>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	24000680 	.word	0x24000680

08001cc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ccc:	f7ff ffee 	bl	8001cac <HAL_GetTick>
 8001cd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cdc:	d005      	beq.n	8001cea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cde:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <HAL_Delay+0x40>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cea:	bf00      	nop
 8001cec:	f7ff ffde 	bl	8001cac <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d8f7      	bhi.n	8001cec <HAL_Delay+0x28>
  {
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	2400000c 	.word	0x2400000c

08001d08 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001d0c:	4b03      	ldr	r3, [pc, #12]	; (8001d1c <HAL_GetREVID+0x14>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	0c1b      	lsrs	r3, r3, #16
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	5c001000 	.word	0x5c001000

08001d20 <__NVIC_SetPriorityGrouping>:
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d30:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <__NVIC_SetPriorityGrouping+0x40>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <__NVIC_SetPriorityGrouping+0x44>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d4e:	4a04      	ldr	r2, [pc, #16]	; (8001d60 <__NVIC_SetPriorityGrouping+0x40>)
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	60d3      	str	r3, [r2, #12]
}
 8001d54:	bf00      	nop
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	e000ed00 	.word	0xe000ed00
 8001d64:	05fa0000 	.word	0x05fa0000

08001d68 <__NVIC_GetPriorityGrouping>:
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d6c:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <__NVIC_GetPriorityGrouping+0x18>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	0a1b      	lsrs	r3, r3, #8
 8001d72:	f003 0307 	and.w	r3, r3, #7
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <__NVIC_EnableIRQ>:
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	db0b      	blt.n	8001dae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d96:	88fb      	ldrh	r3, [r7, #6]
 8001d98:	f003 021f 	and.w	r2, r3, #31
 8001d9c:	4907      	ldr	r1, [pc, #28]	; (8001dbc <__NVIC_EnableIRQ+0x38>)
 8001d9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001da2:	095b      	lsrs	r3, r3, #5
 8001da4:	2001      	movs	r0, #1
 8001da6:	fa00 f202 	lsl.w	r2, r0, r2
 8001daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	e000e100 	.word	0xe000e100

08001dc0 <__NVIC_SetPriority>:
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	6039      	str	r1, [r7, #0]
 8001dca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	db0a      	blt.n	8001dea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	490c      	ldr	r1, [pc, #48]	; (8001e0c <__NVIC_SetPriority+0x4c>)
 8001dda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dde:	0112      	lsls	r2, r2, #4
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	440b      	add	r3, r1
 8001de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001de8:	e00a      	b.n	8001e00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	4908      	ldr	r1, [pc, #32]	; (8001e10 <__NVIC_SetPriority+0x50>)
 8001df0:	88fb      	ldrh	r3, [r7, #6]
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	3b04      	subs	r3, #4
 8001df8:	0112      	lsls	r2, r2, #4
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	761a      	strb	r2, [r3, #24]
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000e100 	.word	0xe000e100
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <NVIC_EncodePriority>:
{
 8001e14:	b480      	push	{r7}
 8001e16:	b089      	sub	sp, #36	; 0x24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f1c3 0307 	rsb	r3, r3, #7
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	bf28      	it	cs
 8001e32:	2304      	movcs	r3, #4
 8001e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	3304      	adds	r3, #4
 8001e3a:	2b06      	cmp	r3, #6
 8001e3c:	d902      	bls.n	8001e44 <NVIC_EncodePriority+0x30>
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	3b03      	subs	r3, #3
 8001e42:	e000      	b.n	8001e46 <NVIC_EncodePriority+0x32>
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e48:	f04f 32ff 	mov.w	r2, #4294967295
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43da      	mvns	r2, r3
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	401a      	ands	r2, r3
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	fa01 f303 	lsl.w	r3, r1, r3
 8001e66:	43d9      	mvns	r1, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e6c:	4313      	orrs	r3, r2
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3724      	adds	r7, #36	; 0x24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
	...

08001e7c <SysTick_Config>:
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e8c:	d301      	bcc.n	8001e92 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e00f      	b.n	8001eb2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e92:	4a0a      	ldr	r2, [pc, #40]	; (8001ebc <SysTick_Config+0x40>)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e9a:	210f      	movs	r1, #15
 8001e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea0:	f7ff ff8e 	bl	8001dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea4:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <SysTick_Config+0x40>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eaa:	4b04      	ldr	r3, [pc, #16]	; (8001ebc <SysTick_Config+0x40>)
 8001eac:	2207      	movs	r2, #7
 8001eae:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	e000e010 	.word	0xe000e010

08001ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff ff29 	bl	8001d20 <__NVIC_SetPriorityGrouping>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b086      	sub	sp, #24
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	4603      	mov	r3, r0
 8001ede:	60b9      	str	r1, [r7, #8]
 8001ee0:	607a      	str	r2, [r7, #4]
 8001ee2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ee4:	f7ff ff40 	bl	8001d68 <__NVIC_GetPriorityGrouping>
 8001ee8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	68b9      	ldr	r1, [r7, #8]
 8001eee:	6978      	ldr	r0, [r7, #20]
 8001ef0:	f7ff ff90 	bl	8001e14 <NVIC_EncodePriority>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001efa:	4611      	mov	r1, r2
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff ff5f 	bl	8001dc0 <__NVIC_SetPriority>
}
 8001f02:	bf00      	nop
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	4603      	mov	r3, r0
 8001f12:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff ff33 	bl	8001d84 <__NVIC_EnableIRQ>
}
 8001f1e:	bf00      	nop
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff ffa4 	bl	8001e7c <SysTick_Config>
 8001f34:	4603      	mov	r3, r0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
	...

08001f40 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001f48:	f7ff feb0 	bl	8001cac <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e316      	b.n	8002586 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a66      	ldr	r2, [pc, #408]	; (80020f8 <HAL_DMA_Init+0x1b8>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d04a      	beq.n	8001ff8 <HAL_DMA_Init+0xb8>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a65      	ldr	r2, [pc, #404]	; (80020fc <HAL_DMA_Init+0x1bc>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d045      	beq.n	8001ff8 <HAL_DMA_Init+0xb8>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a63      	ldr	r2, [pc, #396]	; (8002100 <HAL_DMA_Init+0x1c0>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d040      	beq.n	8001ff8 <HAL_DMA_Init+0xb8>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a62      	ldr	r2, [pc, #392]	; (8002104 <HAL_DMA_Init+0x1c4>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d03b      	beq.n	8001ff8 <HAL_DMA_Init+0xb8>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a60      	ldr	r2, [pc, #384]	; (8002108 <HAL_DMA_Init+0x1c8>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d036      	beq.n	8001ff8 <HAL_DMA_Init+0xb8>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a5f      	ldr	r2, [pc, #380]	; (800210c <HAL_DMA_Init+0x1cc>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d031      	beq.n	8001ff8 <HAL_DMA_Init+0xb8>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a5d      	ldr	r2, [pc, #372]	; (8002110 <HAL_DMA_Init+0x1d0>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d02c      	beq.n	8001ff8 <HAL_DMA_Init+0xb8>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a5c      	ldr	r2, [pc, #368]	; (8002114 <HAL_DMA_Init+0x1d4>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d027      	beq.n	8001ff8 <HAL_DMA_Init+0xb8>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a5a      	ldr	r2, [pc, #360]	; (8002118 <HAL_DMA_Init+0x1d8>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d022      	beq.n	8001ff8 <HAL_DMA_Init+0xb8>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a59      	ldr	r2, [pc, #356]	; (800211c <HAL_DMA_Init+0x1dc>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d01d      	beq.n	8001ff8 <HAL_DMA_Init+0xb8>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a57      	ldr	r2, [pc, #348]	; (8002120 <HAL_DMA_Init+0x1e0>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d018      	beq.n	8001ff8 <HAL_DMA_Init+0xb8>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a56      	ldr	r2, [pc, #344]	; (8002124 <HAL_DMA_Init+0x1e4>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d013      	beq.n	8001ff8 <HAL_DMA_Init+0xb8>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a54      	ldr	r2, [pc, #336]	; (8002128 <HAL_DMA_Init+0x1e8>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d00e      	beq.n	8001ff8 <HAL_DMA_Init+0xb8>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a53      	ldr	r2, [pc, #332]	; (800212c <HAL_DMA_Init+0x1ec>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d009      	beq.n	8001ff8 <HAL_DMA_Init+0xb8>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a51      	ldr	r2, [pc, #324]	; (8002130 <HAL_DMA_Init+0x1f0>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d004      	beq.n	8001ff8 <HAL_DMA_Init+0xb8>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a50      	ldr	r2, [pc, #320]	; (8002134 <HAL_DMA_Init+0x1f4>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d101      	bne.n	8001ffc <HAL_DMA_Init+0xbc>
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e000      	b.n	8001ffe <HAL_DMA_Init+0xbe>
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 813b 	beq.w	800227a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2202      	movs	r2, #2
 8002010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a37      	ldr	r2, [pc, #220]	; (80020f8 <HAL_DMA_Init+0x1b8>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d04a      	beq.n	80020b4 <HAL_DMA_Init+0x174>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a36      	ldr	r2, [pc, #216]	; (80020fc <HAL_DMA_Init+0x1bc>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d045      	beq.n	80020b4 <HAL_DMA_Init+0x174>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a34      	ldr	r2, [pc, #208]	; (8002100 <HAL_DMA_Init+0x1c0>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d040      	beq.n	80020b4 <HAL_DMA_Init+0x174>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a33      	ldr	r2, [pc, #204]	; (8002104 <HAL_DMA_Init+0x1c4>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d03b      	beq.n	80020b4 <HAL_DMA_Init+0x174>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a31      	ldr	r2, [pc, #196]	; (8002108 <HAL_DMA_Init+0x1c8>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d036      	beq.n	80020b4 <HAL_DMA_Init+0x174>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a30      	ldr	r2, [pc, #192]	; (800210c <HAL_DMA_Init+0x1cc>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d031      	beq.n	80020b4 <HAL_DMA_Init+0x174>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a2e      	ldr	r2, [pc, #184]	; (8002110 <HAL_DMA_Init+0x1d0>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d02c      	beq.n	80020b4 <HAL_DMA_Init+0x174>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a2d      	ldr	r2, [pc, #180]	; (8002114 <HAL_DMA_Init+0x1d4>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d027      	beq.n	80020b4 <HAL_DMA_Init+0x174>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a2b      	ldr	r2, [pc, #172]	; (8002118 <HAL_DMA_Init+0x1d8>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d022      	beq.n	80020b4 <HAL_DMA_Init+0x174>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a2a      	ldr	r2, [pc, #168]	; (800211c <HAL_DMA_Init+0x1dc>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d01d      	beq.n	80020b4 <HAL_DMA_Init+0x174>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a28      	ldr	r2, [pc, #160]	; (8002120 <HAL_DMA_Init+0x1e0>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d018      	beq.n	80020b4 <HAL_DMA_Init+0x174>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a27      	ldr	r2, [pc, #156]	; (8002124 <HAL_DMA_Init+0x1e4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d013      	beq.n	80020b4 <HAL_DMA_Init+0x174>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a25      	ldr	r2, [pc, #148]	; (8002128 <HAL_DMA_Init+0x1e8>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d00e      	beq.n	80020b4 <HAL_DMA_Init+0x174>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a24      	ldr	r2, [pc, #144]	; (800212c <HAL_DMA_Init+0x1ec>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d009      	beq.n	80020b4 <HAL_DMA_Init+0x174>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a22      	ldr	r2, [pc, #136]	; (8002130 <HAL_DMA_Init+0x1f0>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d004      	beq.n	80020b4 <HAL_DMA_Init+0x174>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a21      	ldr	r2, [pc, #132]	; (8002134 <HAL_DMA_Init+0x1f4>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d108      	bne.n	80020c6 <HAL_DMA_Init+0x186>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0201 	bic.w	r2, r2, #1
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	e007      	b.n	80020d6 <HAL_DMA_Init+0x196>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0201 	bic.w	r2, r2, #1
 80020d4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80020d6:	e02f      	b.n	8002138 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020d8:	f7ff fde8 	bl	8001cac <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b05      	cmp	r3, #5
 80020e4:	d928      	bls.n	8002138 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2220      	movs	r2, #32
 80020ea:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2203      	movs	r2, #3
 80020f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e246      	b.n	8002586 <HAL_DMA_Init+0x646>
 80020f8:	40020010 	.word	0x40020010
 80020fc:	40020028 	.word	0x40020028
 8002100:	40020040 	.word	0x40020040
 8002104:	40020058 	.word	0x40020058
 8002108:	40020070 	.word	0x40020070
 800210c:	40020088 	.word	0x40020088
 8002110:	400200a0 	.word	0x400200a0
 8002114:	400200b8 	.word	0x400200b8
 8002118:	40020410 	.word	0x40020410
 800211c:	40020428 	.word	0x40020428
 8002120:	40020440 	.word	0x40020440
 8002124:	40020458 	.word	0x40020458
 8002128:	40020470 	.word	0x40020470
 800212c:	40020488 	.word	0x40020488
 8002130:	400204a0 	.word	0x400204a0
 8002134:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1c8      	bne.n	80020d8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	4b83      	ldr	r3, [pc, #524]	; (8002360 <HAL_DMA_Init+0x420>)
 8002152:	4013      	ands	r3, r2
 8002154:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800215e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800216a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002176:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	4313      	orrs	r3, r2
 8002182:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	2b04      	cmp	r3, #4
 800218a:	d107      	bne.n	800219c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002194:	4313      	orrs	r3, r2
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	4313      	orrs	r3, r2
 800219a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800219c:	4b71      	ldr	r3, [pc, #452]	; (8002364 <HAL_DMA_Init+0x424>)
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	4b71      	ldr	r3, [pc, #452]	; (8002368 <HAL_DMA_Init+0x428>)
 80021a2:	4013      	ands	r3, r2
 80021a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021a8:	d328      	bcc.n	80021fc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b28      	cmp	r3, #40	; 0x28
 80021b0:	d903      	bls.n	80021ba <HAL_DMA_Init+0x27a>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b2e      	cmp	r3, #46	; 0x2e
 80021b8:	d917      	bls.n	80021ea <HAL_DMA_Init+0x2aa>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b3e      	cmp	r3, #62	; 0x3e
 80021c0:	d903      	bls.n	80021ca <HAL_DMA_Init+0x28a>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b42      	cmp	r3, #66	; 0x42
 80021c8:	d90f      	bls.n	80021ea <HAL_DMA_Init+0x2aa>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b46      	cmp	r3, #70	; 0x46
 80021d0:	d903      	bls.n	80021da <HAL_DMA_Init+0x29a>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2b48      	cmp	r3, #72	; 0x48
 80021d8:	d907      	bls.n	80021ea <HAL_DMA_Init+0x2aa>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b4e      	cmp	r3, #78	; 0x4e
 80021e0:	d905      	bls.n	80021ee <HAL_DMA_Init+0x2ae>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b52      	cmp	r3, #82	; 0x52
 80021e8:	d801      	bhi.n	80021ee <HAL_DMA_Init+0x2ae>
 80021ea:	2301      	movs	r3, #1
 80021ec:	e000      	b.n	80021f0 <HAL_DMA_Init+0x2b0>
 80021ee:	2300      	movs	r3, #0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021fa:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	f023 0307 	bic.w	r3, r3, #7
 8002212:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	4313      	orrs	r3, r2
 800221c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	2b04      	cmp	r3, #4
 8002224:	d117      	bne.n	8002256 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	4313      	orrs	r3, r2
 800222e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00e      	beq.n	8002256 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f001 fdcf 	bl	8003ddc <DMA_CheckFifoParam>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d008      	beq.n	8002256 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2240      	movs	r2, #64	; 0x40
 8002248:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e197      	b.n	8002586 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f001 fd0a 	bl	8003c78 <DMA_CalcBaseAndBitshift>
 8002264:	4603      	mov	r3, r0
 8002266:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226c:	f003 031f 	and.w	r3, r3, #31
 8002270:	223f      	movs	r2, #63	; 0x3f
 8002272:	409a      	lsls	r2, r3
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	e0cd      	b.n	8002416 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a3b      	ldr	r2, [pc, #236]	; (800236c <HAL_DMA_Init+0x42c>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d022      	beq.n	80022ca <HAL_DMA_Init+0x38a>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a39      	ldr	r2, [pc, #228]	; (8002370 <HAL_DMA_Init+0x430>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d01d      	beq.n	80022ca <HAL_DMA_Init+0x38a>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a38      	ldr	r2, [pc, #224]	; (8002374 <HAL_DMA_Init+0x434>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d018      	beq.n	80022ca <HAL_DMA_Init+0x38a>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a36      	ldr	r2, [pc, #216]	; (8002378 <HAL_DMA_Init+0x438>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d013      	beq.n	80022ca <HAL_DMA_Init+0x38a>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a35      	ldr	r2, [pc, #212]	; (800237c <HAL_DMA_Init+0x43c>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d00e      	beq.n	80022ca <HAL_DMA_Init+0x38a>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a33      	ldr	r2, [pc, #204]	; (8002380 <HAL_DMA_Init+0x440>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d009      	beq.n	80022ca <HAL_DMA_Init+0x38a>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a32      	ldr	r2, [pc, #200]	; (8002384 <HAL_DMA_Init+0x444>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d004      	beq.n	80022ca <HAL_DMA_Init+0x38a>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a30      	ldr	r2, [pc, #192]	; (8002388 <HAL_DMA_Init+0x448>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d101      	bne.n	80022ce <HAL_DMA_Init+0x38e>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <HAL_DMA_Init+0x390>
 80022ce:	2300      	movs	r3, #0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 8097 	beq.w	8002404 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a24      	ldr	r2, [pc, #144]	; (800236c <HAL_DMA_Init+0x42c>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d021      	beq.n	8002324 <HAL_DMA_Init+0x3e4>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a22      	ldr	r2, [pc, #136]	; (8002370 <HAL_DMA_Init+0x430>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d01c      	beq.n	8002324 <HAL_DMA_Init+0x3e4>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a21      	ldr	r2, [pc, #132]	; (8002374 <HAL_DMA_Init+0x434>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d017      	beq.n	8002324 <HAL_DMA_Init+0x3e4>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a1f      	ldr	r2, [pc, #124]	; (8002378 <HAL_DMA_Init+0x438>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d012      	beq.n	8002324 <HAL_DMA_Init+0x3e4>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a1e      	ldr	r2, [pc, #120]	; (800237c <HAL_DMA_Init+0x43c>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d00d      	beq.n	8002324 <HAL_DMA_Init+0x3e4>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a1c      	ldr	r2, [pc, #112]	; (8002380 <HAL_DMA_Init+0x440>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d008      	beq.n	8002324 <HAL_DMA_Init+0x3e4>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a1b      	ldr	r2, [pc, #108]	; (8002384 <HAL_DMA_Init+0x444>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d003      	beq.n	8002324 <HAL_DMA_Init+0x3e4>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a19      	ldr	r2, [pc, #100]	; (8002388 <HAL_DMA_Init+0x448>)
 8002322:	4293      	cmp	r3, r2
 8002324:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2202      	movs	r2, #2
 8002332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	4b12      	ldr	r3, [pc, #72]	; (800238c <HAL_DMA_Init+0x44c>)
 8002342:	4013      	ands	r3, r2
 8002344:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	2b40      	cmp	r3, #64	; 0x40
 800234c:	d020      	beq.n	8002390 <HAL_DMA_Init+0x450>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	2b80      	cmp	r3, #128	; 0x80
 8002354:	d102      	bne.n	800235c <HAL_DMA_Init+0x41c>
 8002356:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800235a:	e01a      	b.n	8002392 <HAL_DMA_Init+0x452>
 800235c:	2300      	movs	r3, #0
 800235e:	e018      	b.n	8002392 <HAL_DMA_Init+0x452>
 8002360:	fe10803f 	.word	0xfe10803f
 8002364:	5c001000 	.word	0x5c001000
 8002368:	ffff0000 	.word	0xffff0000
 800236c:	58025408 	.word	0x58025408
 8002370:	5802541c 	.word	0x5802541c
 8002374:	58025430 	.word	0x58025430
 8002378:	58025444 	.word	0x58025444
 800237c:	58025458 	.word	0x58025458
 8002380:	5802546c 	.word	0x5802546c
 8002384:	58025480 	.word	0x58025480
 8002388:	58025494 	.word	0x58025494
 800238c:	fffe000f 	.word	0xfffe000f
 8002390:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	68d2      	ldr	r2, [r2, #12]
 8002396:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002398:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80023a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80023a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80023b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80023b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80023c0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	461a      	mov	r2, r3
 80023d6:	4b6e      	ldr	r3, [pc, #440]	; (8002590 <HAL_DMA_Init+0x650>)
 80023d8:	4413      	add	r3, r2
 80023da:	4a6e      	ldr	r2, [pc, #440]	; (8002594 <HAL_DMA_Init+0x654>)
 80023dc:	fba2 2303 	umull	r2, r3, r2, r3
 80023e0:	091b      	lsrs	r3, r3, #4
 80023e2:	009a      	lsls	r2, r3, #2
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f001 fc45 	bl	8003c78 <DMA_CalcBaseAndBitshift>
 80023ee:	4603      	mov	r3, r0
 80023f0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f6:	f003 031f 	and.w	r3, r3, #31
 80023fa:	2201      	movs	r2, #1
 80023fc:	409a      	lsls	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	e008      	b.n	8002416 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2240      	movs	r2, #64	; 0x40
 8002408:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2203      	movs	r2, #3
 800240e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e0b7      	b.n	8002586 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a5f      	ldr	r2, [pc, #380]	; (8002598 <HAL_DMA_Init+0x658>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d072      	beq.n	8002506 <HAL_DMA_Init+0x5c6>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a5d      	ldr	r2, [pc, #372]	; (800259c <HAL_DMA_Init+0x65c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d06d      	beq.n	8002506 <HAL_DMA_Init+0x5c6>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a5c      	ldr	r2, [pc, #368]	; (80025a0 <HAL_DMA_Init+0x660>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d068      	beq.n	8002506 <HAL_DMA_Init+0x5c6>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a5a      	ldr	r2, [pc, #360]	; (80025a4 <HAL_DMA_Init+0x664>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d063      	beq.n	8002506 <HAL_DMA_Init+0x5c6>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a59      	ldr	r2, [pc, #356]	; (80025a8 <HAL_DMA_Init+0x668>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d05e      	beq.n	8002506 <HAL_DMA_Init+0x5c6>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a57      	ldr	r2, [pc, #348]	; (80025ac <HAL_DMA_Init+0x66c>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d059      	beq.n	8002506 <HAL_DMA_Init+0x5c6>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a56      	ldr	r2, [pc, #344]	; (80025b0 <HAL_DMA_Init+0x670>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d054      	beq.n	8002506 <HAL_DMA_Init+0x5c6>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a54      	ldr	r2, [pc, #336]	; (80025b4 <HAL_DMA_Init+0x674>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d04f      	beq.n	8002506 <HAL_DMA_Init+0x5c6>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a53      	ldr	r2, [pc, #332]	; (80025b8 <HAL_DMA_Init+0x678>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d04a      	beq.n	8002506 <HAL_DMA_Init+0x5c6>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a51      	ldr	r2, [pc, #324]	; (80025bc <HAL_DMA_Init+0x67c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d045      	beq.n	8002506 <HAL_DMA_Init+0x5c6>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a50      	ldr	r2, [pc, #320]	; (80025c0 <HAL_DMA_Init+0x680>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d040      	beq.n	8002506 <HAL_DMA_Init+0x5c6>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a4e      	ldr	r2, [pc, #312]	; (80025c4 <HAL_DMA_Init+0x684>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d03b      	beq.n	8002506 <HAL_DMA_Init+0x5c6>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a4d      	ldr	r2, [pc, #308]	; (80025c8 <HAL_DMA_Init+0x688>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d036      	beq.n	8002506 <HAL_DMA_Init+0x5c6>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a4b      	ldr	r2, [pc, #300]	; (80025cc <HAL_DMA_Init+0x68c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d031      	beq.n	8002506 <HAL_DMA_Init+0x5c6>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a4a      	ldr	r2, [pc, #296]	; (80025d0 <HAL_DMA_Init+0x690>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d02c      	beq.n	8002506 <HAL_DMA_Init+0x5c6>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a48      	ldr	r2, [pc, #288]	; (80025d4 <HAL_DMA_Init+0x694>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d027      	beq.n	8002506 <HAL_DMA_Init+0x5c6>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a47      	ldr	r2, [pc, #284]	; (80025d8 <HAL_DMA_Init+0x698>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d022      	beq.n	8002506 <HAL_DMA_Init+0x5c6>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a45      	ldr	r2, [pc, #276]	; (80025dc <HAL_DMA_Init+0x69c>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d01d      	beq.n	8002506 <HAL_DMA_Init+0x5c6>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a44      	ldr	r2, [pc, #272]	; (80025e0 <HAL_DMA_Init+0x6a0>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d018      	beq.n	8002506 <HAL_DMA_Init+0x5c6>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a42      	ldr	r2, [pc, #264]	; (80025e4 <HAL_DMA_Init+0x6a4>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d013      	beq.n	8002506 <HAL_DMA_Init+0x5c6>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a41      	ldr	r2, [pc, #260]	; (80025e8 <HAL_DMA_Init+0x6a8>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d00e      	beq.n	8002506 <HAL_DMA_Init+0x5c6>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a3f      	ldr	r2, [pc, #252]	; (80025ec <HAL_DMA_Init+0x6ac>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d009      	beq.n	8002506 <HAL_DMA_Init+0x5c6>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a3e      	ldr	r2, [pc, #248]	; (80025f0 <HAL_DMA_Init+0x6b0>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d004      	beq.n	8002506 <HAL_DMA_Init+0x5c6>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a3c      	ldr	r2, [pc, #240]	; (80025f4 <HAL_DMA_Init+0x6b4>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d101      	bne.n	800250a <HAL_DMA_Init+0x5ca>
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <HAL_DMA_Init+0x5cc>
 800250a:	2300      	movs	r3, #0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d032      	beq.n	8002576 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f001 fcdf 	bl	8003ed4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	2b80      	cmp	r3, #128	; 0x80
 800251c:	d102      	bne.n	8002524 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002538:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d010      	beq.n	8002564 <HAL_DMA_Init+0x624>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b08      	cmp	r3, #8
 8002548:	d80c      	bhi.n	8002564 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f001 fd5c 	bl	8004008 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002560:	605a      	str	r2, [r3, #4]
 8002562:	e008      	b.n	8002576 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	a7fdabf8 	.word	0xa7fdabf8
 8002594:	cccccccd 	.word	0xcccccccd
 8002598:	40020010 	.word	0x40020010
 800259c:	40020028 	.word	0x40020028
 80025a0:	40020040 	.word	0x40020040
 80025a4:	40020058 	.word	0x40020058
 80025a8:	40020070 	.word	0x40020070
 80025ac:	40020088 	.word	0x40020088
 80025b0:	400200a0 	.word	0x400200a0
 80025b4:	400200b8 	.word	0x400200b8
 80025b8:	40020410 	.word	0x40020410
 80025bc:	40020428 	.word	0x40020428
 80025c0:	40020440 	.word	0x40020440
 80025c4:	40020458 	.word	0x40020458
 80025c8:	40020470 	.word	0x40020470
 80025cc:	40020488 	.word	0x40020488
 80025d0:	400204a0 	.word	0x400204a0
 80025d4:	400204b8 	.word	0x400204b8
 80025d8:	58025408 	.word	0x58025408
 80025dc:	5802541c 	.word	0x5802541c
 80025e0:	58025430 	.word	0x58025430
 80025e4:	58025444 	.word	0x58025444
 80025e8:	58025458 	.word	0x58025458
 80025ec:	5802546c 	.word	0x5802546c
 80025f0:	58025480 	.word	0x58025480
 80025f4:	58025494 	.word	0x58025494

080025f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
 8002604:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002606:	2300      	movs	r3, #0
 8002608:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e226      	b.n	8002a62 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800261a:	2b01      	cmp	r3, #1
 800261c:	d101      	bne.n	8002622 <HAL_DMA_Start_IT+0x2a>
 800261e:	2302      	movs	r3, #2
 8002620:	e21f      	b.n	8002a62 <HAL_DMA_Start_IT+0x46a>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b01      	cmp	r3, #1
 8002634:	f040 820a 	bne.w	8002a4c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2202      	movs	r2, #2
 800263c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a68      	ldr	r2, [pc, #416]	; (80027ec <HAL_DMA_Start_IT+0x1f4>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d04a      	beq.n	80026e6 <HAL_DMA_Start_IT+0xee>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a66      	ldr	r2, [pc, #408]	; (80027f0 <HAL_DMA_Start_IT+0x1f8>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d045      	beq.n	80026e6 <HAL_DMA_Start_IT+0xee>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a65      	ldr	r2, [pc, #404]	; (80027f4 <HAL_DMA_Start_IT+0x1fc>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d040      	beq.n	80026e6 <HAL_DMA_Start_IT+0xee>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a63      	ldr	r2, [pc, #396]	; (80027f8 <HAL_DMA_Start_IT+0x200>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d03b      	beq.n	80026e6 <HAL_DMA_Start_IT+0xee>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a62      	ldr	r2, [pc, #392]	; (80027fc <HAL_DMA_Start_IT+0x204>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d036      	beq.n	80026e6 <HAL_DMA_Start_IT+0xee>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a60      	ldr	r2, [pc, #384]	; (8002800 <HAL_DMA_Start_IT+0x208>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d031      	beq.n	80026e6 <HAL_DMA_Start_IT+0xee>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a5f      	ldr	r2, [pc, #380]	; (8002804 <HAL_DMA_Start_IT+0x20c>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d02c      	beq.n	80026e6 <HAL_DMA_Start_IT+0xee>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a5d      	ldr	r2, [pc, #372]	; (8002808 <HAL_DMA_Start_IT+0x210>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d027      	beq.n	80026e6 <HAL_DMA_Start_IT+0xee>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a5c      	ldr	r2, [pc, #368]	; (800280c <HAL_DMA_Start_IT+0x214>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d022      	beq.n	80026e6 <HAL_DMA_Start_IT+0xee>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a5a      	ldr	r2, [pc, #360]	; (8002810 <HAL_DMA_Start_IT+0x218>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d01d      	beq.n	80026e6 <HAL_DMA_Start_IT+0xee>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a59      	ldr	r2, [pc, #356]	; (8002814 <HAL_DMA_Start_IT+0x21c>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d018      	beq.n	80026e6 <HAL_DMA_Start_IT+0xee>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a57      	ldr	r2, [pc, #348]	; (8002818 <HAL_DMA_Start_IT+0x220>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d013      	beq.n	80026e6 <HAL_DMA_Start_IT+0xee>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a56      	ldr	r2, [pc, #344]	; (800281c <HAL_DMA_Start_IT+0x224>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d00e      	beq.n	80026e6 <HAL_DMA_Start_IT+0xee>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a54      	ldr	r2, [pc, #336]	; (8002820 <HAL_DMA_Start_IT+0x228>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d009      	beq.n	80026e6 <HAL_DMA_Start_IT+0xee>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a53      	ldr	r2, [pc, #332]	; (8002824 <HAL_DMA_Start_IT+0x22c>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d004      	beq.n	80026e6 <HAL_DMA_Start_IT+0xee>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a51      	ldr	r2, [pc, #324]	; (8002828 <HAL_DMA_Start_IT+0x230>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d108      	bne.n	80026f8 <HAL_DMA_Start_IT+0x100>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f022 0201 	bic.w	r2, r2, #1
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	e007      	b.n	8002708 <HAL_DMA_Start_IT+0x110>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 0201 	bic.w	r2, r2, #1
 8002706:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	68b9      	ldr	r1, [r7, #8]
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f001 f906 	bl	8003920 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a34      	ldr	r2, [pc, #208]	; (80027ec <HAL_DMA_Start_IT+0x1f4>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d04a      	beq.n	80027b4 <HAL_DMA_Start_IT+0x1bc>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a33      	ldr	r2, [pc, #204]	; (80027f0 <HAL_DMA_Start_IT+0x1f8>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d045      	beq.n	80027b4 <HAL_DMA_Start_IT+0x1bc>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a31      	ldr	r2, [pc, #196]	; (80027f4 <HAL_DMA_Start_IT+0x1fc>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d040      	beq.n	80027b4 <HAL_DMA_Start_IT+0x1bc>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a30      	ldr	r2, [pc, #192]	; (80027f8 <HAL_DMA_Start_IT+0x200>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d03b      	beq.n	80027b4 <HAL_DMA_Start_IT+0x1bc>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a2e      	ldr	r2, [pc, #184]	; (80027fc <HAL_DMA_Start_IT+0x204>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d036      	beq.n	80027b4 <HAL_DMA_Start_IT+0x1bc>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a2d      	ldr	r2, [pc, #180]	; (8002800 <HAL_DMA_Start_IT+0x208>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d031      	beq.n	80027b4 <HAL_DMA_Start_IT+0x1bc>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a2b      	ldr	r2, [pc, #172]	; (8002804 <HAL_DMA_Start_IT+0x20c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d02c      	beq.n	80027b4 <HAL_DMA_Start_IT+0x1bc>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a2a      	ldr	r2, [pc, #168]	; (8002808 <HAL_DMA_Start_IT+0x210>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d027      	beq.n	80027b4 <HAL_DMA_Start_IT+0x1bc>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a28      	ldr	r2, [pc, #160]	; (800280c <HAL_DMA_Start_IT+0x214>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d022      	beq.n	80027b4 <HAL_DMA_Start_IT+0x1bc>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a27      	ldr	r2, [pc, #156]	; (8002810 <HAL_DMA_Start_IT+0x218>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d01d      	beq.n	80027b4 <HAL_DMA_Start_IT+0x1bc>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a25      	ldr	r2, [pc, #148]	; (8002814 <HAL_DMA_Start_IT+0x21c>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d018      	beq.n	80027b4 <HAL_DMA_Start_IT+0x1bc>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a24      	ldr	r2, [pc, #144]	; (8002818 <HAL_DMA_Start_IT+0x220>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d013      	beq.n	80027b4 <HAL_DMA_Start_IT+0x1bc>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a22      	ldr	r2, [pc, #136]	; (800281c <HAL_DMA_Start_IT+0x224>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d00e      	beq.n	80027b4 <HAL_DMA_Start_IT+0x1bc>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a21      	ldr	r2, [pc, #132]	; (8002820 <HAL_DMA_Start_IT+0x228>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d009      	beq.n	80027b4 <HAL_DMA_Start_IT+0x1bc>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a1f      	ldr	r2, [pc, #124]	; (8002824 <HAL_DMA_Start_IT+0x22c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d004      	beq.n	80027b4 <HAL_DMA_Start_IT+0x1bc>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a1e      	ldr	r2, [pc, #120]	; (8002828 <HAL_DMA_Start_IT+0x230>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d101      	bne.n	80027b8 <HAL_DMA_Start_IT+0x1c0>
 80027b4:	2301      	movs	r3, #1
 80027b6:	e000      	b.n	80027ba <HAL_DMA_Start_IT+0x1c2>
 80027b8:	2300      	movs	r3, #0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d036      	beq.n	800282c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f023 021e 	bic.w	r2, r3, #30
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f042 0216 	orr.w	r2, r2, #22
 80027d0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d03e      	beq.n	8002858 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f042 0208 	orr.w	r2, r2, #8
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	e035      	b.n	8002858 <HAL_DMA_Start_IT+0x260>
 80027ec:	40020010 	.word	0x40020010
 80027f0:	40020028 	.word	0x40020028
 80027f4:	40020040 	.word	0x40020040
 80027f8:	40020058 	.word	0x40020058
 80027fc:	40020070 	.word	0x40020070
 8002800:	40020088 	.word	0x40020088
 8002804:	400200a0 	.word	0x400200a0
 8002808:	400200b8 	.word	0x400200b8
 800280c:	40020410 	.word	0x40020410
 8002810:	40020428 	.word	0x40020428
 8002814:	40020440 	.word	0x40020440
 8002818:	40020458 	.word	0x40020458
 800281c:	40020470 	.word	0x40020470
 8002820:	40020488 	.word	0x40020488
 8002824:	400204a0 	.word	0x400204a0
 8002828:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f023 020e 	bic.w	r2, r3, #14
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 020a 	orr.w	r2, r2, #10
 800283e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	2b00      	cmp	r3, #0
 8002846:	d007      	beq.n	8002858 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 0204 	orr.w	r2, r2, #4
 8002856:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a83      	ldr	r2, [pc, #524]	; (8002a6c <HAL_DMA_Start_IT+0x474>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d072      	beq.n	8002948 <HAL_DMA_Start_IT+0x350>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a82      	ldr	r2, [pc, #520]	; (8002a70 <HAL_DMA_Start_IT+0x478>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d06d      	beq.n	8002948 <HAL_DMA_Start_IT+0x350>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a80      	ldr	r2, [pc, #512]	; (8002a74 <HAL_DMA_Start_IT+0x47c>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d068      	beq.n	8002948 <HAL_DMA_Start_IT+0x350>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a7f      	ldr	r2, [pc, #508]	; (8002a78 <HAL_DMA_Start_IT+0x480>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d063      	beq.n	8002948 <HAL_DMA_Start_IT+0x350>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a7d      	ldr	r2, [pc, #500]	; (8002a7c <HAL_DMA_Start_IT+0x484>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d05e      	beq.n	8002948 <HAL_DMA_Start_IT+0x350>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a7c      	ldr	r2, [pc, #496]	; (8002a80 <HAL_DMA_Start_IT+0x488>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d059      	beq.n	8002948 <HAL_DMA_Start_IT+0x350>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a7a      	ldr	r2, [pc, #488]	; (8002a84 <HAL_DMA_Start_IT+0x48c>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d054      	beq.n	8002948 <HAL_DMA_Start_IT+0x350>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a79      	ldr	r2, [pc, #484]	; (8002a88 <HAL_DMA_Start_IT+0x490>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d04f      	beq.n	8002948 <HAL_DMA_Start_IT+0x350>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a77      	ldr	r2, [pc, #476]	; (8002a8c <HAL_DMA_Start_IT+0x494>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d04a      	beq.n	8002948 <HAL_DMA_Start_IT+0x350>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a76      	ldr	r2, [pc, #472]	; (8002a90 <HAL_DMA_Start_IT+0x498>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d045      	beq.n	8002948 <HAL_DMA_Start_IT+0x350>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a74      	ldr	r2, [pc, #464]	; (8002a94 <HAL_DMA_Start_IT+0x49c>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d040      	beq.n	8002948 <HAL_DMA_Start_IT+0x350>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a73      	ldr	r2, [pc, #460]	; (8002a98 <HAL_DMA_Start_IT+0x4a0>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d03b      	beq.n	8002948 <HAL_DMA_Start_IT+0x350>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a71      	ldr	r2, [pc, #452]	; (8002a9c <HAL_DMA_Start_IT+0x4a4>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d036      	beq.n	8002948 <HAL_DMA_Start_IT+0x350>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a70      	ldr	r2, [pc, #448]	; (8002aa0 <HAL_DMA_Start_IT+0x4a8>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d031      	beq.n	8002948 <HAL_DMA_Start_IT+0x350>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a6e      	ldr	r2, [pc, #440]	; (8002aa4 <HAL_DMA_Start_IT+0x4ac>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d02c      	beq.n	8002948 <HAL_DMA_Start_IT+0x350>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a6d      	ldr	r2, [pc, #436]	; (8002aa8 <HAL_DMA_Start_IT+0x4b0>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d027      	beq.n	8002948 <HAL_DMA_Start_IT+0x350>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a6b      	ldr	r2, [pc, #428]	; (8002aac <HAL_DMA_Start_IT+0x4b4>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d022      	beq.n	8002948 <HAL_DMA_Start_IT+0x350>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a6a      	ldr	r2, [pc, #424]	; (8002ab0 <HAL_DMA_Start_IT+0x4b8>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d01d      	beq.n	8002948 <HAL_DMA_Start_IT+0x350>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a68      	ldr	r2, [pc, #416]	; (8002ab4 <HAL_DMA_Start_IT+0x4bc>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d018      	beq.n	8002948 <HAL_DMA_Start_IT+0x350>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a67      	ldr	r2, [pc, #412]	; (8002ab8 <HAL_DMA_Start_IT+0x4c0>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d013      	beq.n	8002948 <HAL_DMA_Start_IT+0x350>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a65      	ldr	r2, [pc, #404]	; (8002abc <HAL_DMA_Start_IT+0x4c4>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d00e      	beq.n	8002948 <HAL_DMA_Start_IT+0x350>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a64      	ldr	r2, [pc, #400]	; (8002ac0 <HAL_DMA_Start_IT+0x4c8>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d009      	beq.n	8002948 <HAL_DMA_Start_IT+0x350>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a62      	ldr	r2, [pc, #392]	; (8002ac4 <HAL_DMA_Start_IT+0x4cc>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d004      	beq.n	8002948 <HAL_DMA_Start_IT+0x350>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a61      	ldr	r2, [pc, #388]	; (8002ac8 <HAL_DMA_Start_IT+0x4d0>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d101      	bne.n	800294c <HAL_DMA_Start_IT+0x354>
 8002948:	2301      	movs	r3, #1
 800294a:	e000      	b.n	800294e <HAL_DMA_Start_IT+0x356>
 800294c:	2300      	movs	r3, #0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d01a      	beq.n	8002988 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d007      	beq.n	8002970 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800296a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800296e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002974:	2b00      	cmp	r3, #0
 8002976:	d007      	beq.n	8002988 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002982:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002986:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a37      	ldr	r2, [pc, #220]	; (8002a6c <HAL_DMA_Start_IT+0x474>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d04a      	beq.n	8002a28 <HAL_DMA_Start_IT+0x430>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a36      	ldr	r2, [pc, #216]	; (8002a70 <HAL_DMA_Start_IT+0x478>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d045      	beq.n	8002a28 <HAL_DMA_Start_IT+0x430>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a34      	ldr	r2, [pc, #208]	; (8002a74 <HAL_DMA_Start_IT+0x47c>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d040      	beq.n	8002a28 <HAL_DMA_Start_IT+0x430>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a33      	ldr	r2, [pc, #204]	; (8002a78 <HAL_DMA_Start_IT+0x480>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d03b      	beq.n	8002a28 <HAL_DMA_Start_IT+0x430>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a31      	ldr	r2, [pc, #196]	; (8002a7c <HAL_DMA_Start_IT+0x484>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d036      	beq.n	8002a28 <HAL_DMA_Start_IT+0x430>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a30      	ldr	r2, [pc, #192]	; (8002a80 <HAL_DMA_Start_IT+0x488>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d031      	beq.n	8002a28 <HAL_DMA_Start_IT+0x430>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a2e      	ldr	r2, [pc, #184]	; (8002a84 <HAL_DMA_Start_IT+0x48c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d02c      	beq.n	8002a28 <HAL_DMA_Start_IT+0x430>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a2d      	ldr	r2, [pc, #180]	; (8002a88 <HAL_DMA_Start_IT+0x490>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d027      	beq.n	8002a28 <HAL_DMA_Start_IT+0x430>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a2b      	ldr	r2, [pc, #172]	; (8002a8c <HAL_DMA_Start_IT+0x494>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d022      	beq.n	8002a28 <HAL_DMA_Start_IT+0x430>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a2a      	ldr	r2, [pc, #168]	; (8002a90 <HAL_DMA_Start_IT+0x498>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d01d      	beq.n	8002a28 <HAL_DMA_Start_IT+0x430>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a28      	ldr	r2, [pc, #160]	; (8002a94 <HAL_DMA_Start_IT+0x49c>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d018      	beq.n	8002a28 <HAL_DMA_Start_IT+0x430>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a27      	ldr	r2, [pc, #156]	; (8002a98 <HAL_DMA_Start_IT+0x4a0>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d013      	beq.n	8002a28 <HAL_DMA_Start_IT+0x430>
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a25      	ldr	r2, [pc, #148]	; (8002a9c <HAL_DMA_Start_IT+0x4a4>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d00e      	beq.n	8002a28 <HAL_DMA_Start_IT+0x430>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a24      	ldr	r2, [pc, #144]	; (8002aa0 <HAL_DMA_Start_IT+0x4a8>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d009      	beq.n	8002a28 <HAL_DMA_Start_IT+0x430>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a22      	ldr	r2, [pc, #136]	; (8002aa4 <HAL_DMA_Start_IT+0x4ac>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d004      	beq.n	8002a28 <HAL_DMA_Start_IT+0x430>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a21      	ldr	r2, [pc, #132]	; (8002aa8 <HAL_DMA_Start_IT+0x4b0>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d108      	bne.n	8002a3a <HAL_DMA_Start_IT+0x442>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0201 	orr.w	r2, r2, #1
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	e012      	b.n	8002a60 <HAL_DMA_Start_IT+0x468>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f042 0201 	orr.w	r2, r2, #1
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	e009      	b.n	8002a60 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a5a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40020010 	.word	0x40020010
 8002a70:	40020028 	.word	0x40020028
 8002a74:	40020040 	.word	0x40020040
 8002a78:	40020058 	.word	0x40020058
 8002a7c:	40020070 	.word	0x40020070
 8002a80:	40020088 	.word	0x40020088
 8002a84:	400200a0 	.word	0x400200a0
 8002a88:	400200b8 	.word	0x400200b8
 8002a8c:	40020410 	.word	0x40020410
 8002a90:	40020428 	.word	0x40020428
 8002a94:	40020440 	.word	0x40020440
 8002a98:	40020458 	.word	0x40020458
 8002a9c:	40020470 	.word	0x40020470
 8002aa0:	40020488 	.word	0x40020488
 8002aa4:	400204a0 	.word	0x400204a0
 8002aa8:	400204b8 	.word	0x400204b8
 8002aac:	58025408 	.word	0x58025408
 8002ab0:	5802541c 	.word	0x5802541c
 8002ab4:	58025430 	.word	0x58025430
 8002ab8:	58025444 	.word	0x58025444
 8002abc:	58025458 	.word	0x58025458
 8002ac0:	5802546c 	.word	0x5802546c
 8002ac4:	58025480 	.word	0x58025480
 8002ac8:	58025494 	.word	0x58025494

08002acc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08a      	sub	sp, #40	; 0x28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ad8:	4b67      	ldr	r3, [pc, #412]	; (8002c78 <HAL_DMA_IRQHandler+0x1ac>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a67      	ldr	r2, [pc, #412]	; (8002c7c <HAL_DMA_IRQHandler+0x1b0>)
 8002ade:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae2:	0a9b      	lsrs	r3, r3, #10
 8002ae4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aea:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a5f      	ldr	r2, [pc, #380]	; (8002c80 <HAL_DMA_IRQHandler+0x1b4>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d04a      	beq.n	8002b9e <HAL_DMA_IRQHandler+0xd2>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a5d      	ldr	r2, [pc, #372]	; (8002c84 <HAL_DMA_IRQHandler+0x1b8>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d045      	beq.n	8002b9e <HAL_DMA_IRQHandler+0xd2>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a5c      	ldr	r2, [pc, #368]	; (8002c88 <HAL_DMA_IRQHandler+0x1bc>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d040      	beq.n	8002b9e <HAL_DMA_IRQHandler+0xd2>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a5a      	ldr	r2, [pc, #360]	; (8002c8c <HAL_DMA_IRQHandler+0x1c0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d03b      	beq.n	8002b9e <HAL_DMA_IRQHandler+0xd2>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a59      	ldr	r2, [pc, #356]	; (8002c90 <HAL_DMA_IRQHandler+0x1c4>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d036      	beq.n	8002b9e <HAL_DMA_IRQHandler+0xd2>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a57      	ldr	r2, [pc, #348]	; (8002c94 <HAL_DMA_IRQHandler+0x1c8>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d031      	beq.n	8002b9e <HAL_DMA_IRQHandler+0xd2>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a56      	ldr	r2, [pc, #344]	; (8002c98 <HAL_DMA_IRQHandler+0x1cc>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d02c      	beq.n	8002b9e <HAL_DMA_IRQHandler+0xd2>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a54      	ldr	r2, [pc, #336]	; (8002c9c <HAL_DMA_IRQHandler+0x1d0>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d027      	beq.n	8002b9e <HAL_DMA_IRQHandler+0xd2>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a53      	ldr	r2, [pc, #332]	; (8002ca0 <HAL_DMA_IRQHandler+0x1d4>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d022      	beq.n	8002b9e <HAL_DMA_IRQHandler+0xd2>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a51      	ldr	r2, [pc, #324]	; (8002ca4 <HAL_DMA_IRQHandler+0x1d8>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d01d      	beq.n	8002b9e <HAL_DMA_IRQHandler+0xd2>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a50      	ldr	r2, [pc, #320]	; (8002ca8 <HAL_DMA_IRQHandler+0x1dc>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d018      	beq.n	8002b9e <HAL_DMA_IRQHandler+0xd2>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a4e      	ldr	r2, [pc, #312]	; (8002cac <HAL_DMA_IRQHandler+0x1e0>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d013      	beq.n	8002b9e <HAL_DMA_IRQHandler+0xd2>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a4d      	ldr	r2, [pc, #308]	; (8002cb0 <HAL_DMA_IRQHandler+0x1e4>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d00e      	beq.n	8002b9e <HAL_DMA_IRQHandler+0xd2>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a4b      	ldr	r2, [pc, #300]	; (8002cb4 <HAL_DMA_IRQHandler+0x1e8>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d009      	beq.n	8002b9e <HAL_DMA_IRQHandler+0xd2>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a4a      	ldr	r2, [pc, #296]	; (8002cb8 <HAL_DMA_IRQHandler+0x1ec>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d004      	beq.n	8002b9e <HAL_DMA_IRQHandler+0xd2>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a48      	ldr	r2, [pc, #288]	; (8002cbc <HAL_DMA_IRQHandler+0x1f0>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d101      	bne.n	8002ba2 <HAL_DMA_IRQHandler+0xd6>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <HAL_DMA_IRQHandler+0xd8>
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 842b 	beq.w	8003400 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bae:	f003 031f 	and.w	r3, r3, #31
 8002bb2:	2208      	movs	r2, #8
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 80a2 	beq.w	8002d04 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a2e      	ldr	r2, [pc, #184]	; (8002c80 <HAL_DMA_IRQHandler+0x1b4>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d04a      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x194>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a2d      	ldr	r2, [pc, #180]	; (8002c84 <HAL_DMA_IRQHandler+0x1b8>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d045      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x194>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a2b      	ldr	r2, [pc, #172]	; (8002c88 <HAL_DMA_IRQHandler+0x1bc>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d040      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x194>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a2a      	ldr	r2, [pc, #168]	; (8002c8c <HAL_DMA_IRQHandler+0x1c0>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d03b      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x194>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a28      	ldr	r2, [pc, #160]	; (8002c90 <HAL_DMA_IRQHandler+0x1c4>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d036      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x194>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a27      	ldr	r2, [pc, #156]	; (8002c94 <HAL_DMA_IRQHandler+0x1c8>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d031      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x194>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a25      	ldr	r2, [pc, #148]	; (8002c98 <HAL_DMA_IRQHandler+0x1cc>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d02c      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x194>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a24      	ldr	r2, [pc, #144]	; (8002c9c <HAL_DMA_IRQHandler+0x1d0>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d027      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x194>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a22      	ldr	r2, [pc, #136]	; (8002ca0 <HAL_DMA_IRQHandler+0x1d4>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d022      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x194>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a21      	ldr	r2, [pc, #132]	; (8002ca4 <HAL_DMA_IRQHandler+0x1d8>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d01d      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x194>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a1f      	ldr	r2, [pc, #124]	; (8002ca8 <HAL_DMA_IRQHandler+0x1dc>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d018      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x194>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a1e      	ldr	r2, [pc, #120]	; (8002cac <HAL_DMA_IRQHandler+0x1e0>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d013      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x194>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a1c      	ldr	r2, [pc, #112]	; (8002cb0 <HAL_DMA_IRQHandler+0x1e4>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d00e      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x194>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a1b      	ldr	r2, [pc, #108]	; (8002cb4 <HAL_DMA_IRQHandler+0x1e8>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d009      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x194>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a19      	ldr	r2, [pc, #100]	; (8002cb8 <HAL_DMA_IRQHandler+0x1ec>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d004      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x194>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a18      	ldr	r2, [pc, #96]	; (8002cbc <HAL_DMA_IRQHandler+0x1f0>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d12f      	bne.n	8002cc0 <HAL_DMA_IRQHandler+0x1f4>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0304 	and.w	r3, r3, #4
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	bf14      	ite	ne
 8002c6e:	2301      	movne	r3, #1
 8002c70:	2300      	moveq	r3, #0
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	e02e      	b.n	8002cd4 <HAL_DMA_IRQHandler+0x208>
 8002c76:	bf00      	nop
 8002c78:	24000000 	.word	0x24000000
 8002c7c:	1b4e81b5 	.word	0x1b4e81b5
 8002c80:	40020010 	.word	0x40020010
 8002c84:	40020028 	.word	0x40020028
 8002c88:	40020040 	.word	0x40020040
 8002c8c:	40020058 	.word	0x40020058
 8002c90:	40020070 	.word	0x40020070
 8002c94:	40020088 	.word	0x40020088
 8002c98:	400200a0 	.word	0x400200a0
 8002c9c:	400200b8 	.word	0x400200b8
 8002ca0:	40020410 	.word	0x40020410
 8002ca4:	40020428 	.word	0x40020428
 8002ca8:	40020440 	.word	0x40020440
 8002cac:	40020458 	.word	0x40020458
 8002cb0:	40020470 	.word	0x40020470
 8002cb4:	40020488 	.word	0x40020488
 8002cb8:	400204a0 	.word	0x400204a0
 8002cbc:	400204b8 	.word	0x400204b8
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0308 	and.w	r3, r3, #8
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	bf14      	ite	ne
 8002cce:	2301      	movne	r3, #1
 8002cd0:	2300      	moveq	r3, #0
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d015      	beq.n	8002d04 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0204 	bic.w	r2, r2, #4
 8002ce6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cec:	f003 031f 	and.w	r3, r3, #31
 8002cf0:	2208      	movs	r2, #8
 8002cf2:	409a      	lsls	r2, r3
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfc:	f043 0201 	orr.w	r2, r3, #1
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d08:	f003 031f 	and.w	r3, r3, #31
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d06e      	beq.n	8002df8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a69      	ldr	r2, [pc, #420]	; (8002ec4 <HAL_DMA_IRQHandler+0x3f8>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d04a      	beq.n	8002dba <HAL_DMA_IRQHandler+0x2ee>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a67      	ldr	r2, [pc, #412]	; (8002ec8 <HAL_DMA_IRQHandler+0x3fc>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d045      	beq.n	8002dba <HAL_DMA_IRQHandler+0x2ee>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a66      	ldr	r2, [pc, #408]	; (8002ecc <HAL_DMA_IRQHandler+0x400>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d040      	beq.n	8002dba <HAL_DMA_IRQHandler+0x2ee>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a64      	ldr	r2, [pc, #400]	; (8002ed0 <HAL_DMA_IRQHandler+0x404>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d03b      	beq.n	8002dba <HAL_DMA_IRQHandler+0x2ee>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a63      	ldr	r2, [pc, #396]	; (8002ed4 <HAL_DMA_IRQHandler+0x408>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d036      	beq.n	8002dba <HAL_DMA_IRQHandler+0x2ee>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a61      	ldr	r2, [pc, #388]	; (8002ed8 <HAL_DMA_IRQHandler+0x40c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d031      	beq.n	8002dba <HAL_DMA_IRQHandler+0x2ee>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a60      	ldr	r2, [pc, #384]	; (8002edc <HAL_DMA_IRQHandler+0x410>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d02c      	beq.n	8002dba <HAL_DMA_IRQHandler+0x2ee>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a5e      	ldr	r2, [pc, #376]	; (8002ee0 <HAL_DMA_IRQHandler+0x414>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d027      	beq.n	8002dba <HAL_DMA_IRQHandler+0x2ee>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a5d      	ldr	r2, [pc, #372]	; (8002ee4 <HAL_DMA_IRQHandler+0x418>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d022      	beq.n	8002dba <HAL_DMA_IRQHandler+0x2ee>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a5b      	ldr	r2, [pc, #364]	; (8002ee8 <HAL_DMA_IRQHandler+0x41c>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d01d      	beq.n	8002dba <HAL_DMA_IRQHandler+0x2ee>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a5a      	ldr	r2, [pc, #360]	; (8002eec <HAL_DMA_IRQHandler+0x420>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d018      	beq.n	8002dba <HAL_DMA_IRQHandler+0x2ee>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a58      	ldr	r2, [pc, #352]	; (8002ef0 <HAL_DMA_IRQHandler+0x424>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d013      	beq.n	8002dba <HAL_DMA_IRQHandler+0x2ee>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a57      	ldr	r2, [pc, #348]	; (8002ef4 <HAL_DMA_IRQHandler+0x428>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d00e      	beq.n	8002dba <HAL_DMA_IRQHandler+0x2ee>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a55      	ldr	r2, [pc, #340]	; (8002ef8 <HAL_DMA_IRQHandler+0x42c>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d009      	beq.n	8002dba <HAL_DMA_IRQHandler+0x2ee>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a54      	ldr	r2, [pc, #336]	; (8002efc <HAL_DMA_IRQHandler+0x430>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d004      	beq.n	8002dba <HAL_DMA_IRQHandler+0x2ee>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a52      	ldr	r2, [pc, #328]	; (8002f00 <HAL_DMA_IRQHandler+0x434>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d10a      	bne.n	8002dd0 <HAL_DMA_IRQHandler+0x304>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	bf14      	ite	ne
 8002dc8:	2301      	movne	r3, #1
 8002dca:	2300      	moveq	r3, #0
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	e003      	b.n	8002dd8 <HAL_DMA_IRQHandler+0x30c>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00d      	beq.n	8002df8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de0:	f003 031f 	and.w	r3, r3, #31
 8002de4:	2201      	movs	r2, #1
 8002de6:	409a      	lsls	r2, r3
 8002de8:	6a3b      	ldr	r3, [r7, #32]
 8002dea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df0:	f043 0202 	orr.w	r2, r3, #2
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dfc:	f003 031f 	and.w	r3, r3, #31
 8002e00:	2204      	movs	r2, #4
 8002e02:	409a      	lsls	r2, r3
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	4013      	ands	r3, r2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 808f 	beq.w	8002f2c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a2c      	ldr	r2, [pc, #176]	; (8002ec4 <HAL_DMA_IRQHandler+0x3f8>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d04a      	beq.n	8002eae <HAL_DMA_IRQHandler+0x3e2>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a2a      	ldr	r2, [pc, #168]	; (8002ec8 <HAL_DMA_IRQHandler+0x3fc>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d045      	beq.n	8002eae <HAL_DMA_IRQHandler+0x3e2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a29      	ldr	r2, [pc, #164]	; (8002ecc <HAL_DMA_IRQHandler+0x400>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d040      	beq.n	8002eae <HAL_DMA_IRQHandler+0x3e2>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a27      	ldr	r2, [pc, #156]	; (8002ed0 <HAL_DMA_IRQHandler+0x404>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d03b      	beq.n	8002eae <HAL_DMA_IRQHandler+0x3e2>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a26      	ldr	r2, [pc, #152]	; (8002ed4 <HAL_DMA_IRQHandler+0x408>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d036      	beq.n	8002eae <HAL_DMA_IRQHandler+0x3e2>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a24      	ldr	r2, [pc, #144]	; (8002ed8 <HAL_DMA_IRQHandler+0x40c>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d031      	beq.n	8002eae <HAL_DMA_IRQHandler+0x3e2>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a23      	ldr	r2, [pc, #140]	; (8002edc <HAL_DMA_IRQHandler+0x410>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d02c      	beq.n	8002eae <HAL_DMA_IRQHandler+0x3e2>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a21      	ldr	r2, [pc, #132]	; (8002ee0 <HAL_DMA_IRQHandler+0x414>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d027      	beq.n	8002eae <HAL_DMA_IRQHandler+0x3e2>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a20      	ldr	r2, [pc, #128]	; (8002ee4 <HAL_DMA_IRQHandler+0x418>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d022      	beq.n	8002eae <HAL_DMA_IRQHandler+0x3e2>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a1e      	ldr	r2, [pc, #120]	; (8002ee8 <HAL_DMA_IRQHandler+0x41c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d01d      	beq.n	8002eae <HAL_DMA_IRQHandler+0x3e2>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a1d      	ldr	r2, [pc, #116]	; (8002eec <HAL_DMA_IRQHandler+0x420>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d018      	beq.n	8002eae <HAL_DMA_IRQHandler+0x3e2>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a1b      	ldr	r2, [pc, #108]	; (8002ef0 <HAL_DMA_IRQHandler+0x424>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d013      	beq.n	8002eae <HAL_DMA_IRQHandler+0x3e2>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a1a      	ldr	r2, [pc, #104]	; (8002ef4 <HAL_DMA_IRQHandler+0x428>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d00e      	beq.n	8002eae <HAL_DMA_IRQHandler+0x3e2>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a18      	ldr	r2, [pc, #96]	; (8002ef8 <HAL_DMA_IRQHandler+0x42c>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d009      	beq.n	8002eae <HAL_DMA_IRQHandler+0x3e2>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a17      	ldr	r2, [pc, #92]	; (8002efc <HAL_DMA_IRQHandler+0x430>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d004      	beq.n	8002eae <HAL_DMA_IRQHandler+0x3e2>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a15      	ldr	r2, [pc, #84]	; (8002f00 <HAL_DMA_IRQHandler+0x434>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d12a      	bne.n	8002f04 <HAL_DMA_IRQHandler+0x438>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	bf14      	ite	ne
 8002ebc:	2301      	movne	r3, #1
 8002ebe:	2300      	moveq	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	e023      	b.n	8002f0c <HAL_DMA_IRQHandler+0x440>
 8002ec4:	40020010 	.word	0x40020010
 8002ec8:	40020028 	.word	0x40020028
 8002ecc:	40020040 	.word	0x40020040
 8002ed0:	40020058 	.word	0x40020058
 8002ed4:	40020070 	.word	0x40020070
 8002ed8:	40020088 	.word	0x40020088
 8002edc:	400200a0 	.word	0x400200a0
 8002ee0:	400200b8 	.word	0x400200b8
 8002ee4:	40020410 	.word	0x40020410
 8002ee8:	40020428 	.word	0x40020428
 8002eec:	40020440 	.word	0x40020440
 8002ef0:	40020458 	.word	0x40020458
 8002ef4:	40020470 	.word	0x40020470
 8002ef8:	40020488 	.word	0x40020488
 8002efc:	400204a0 	.word	0x400204a0
 8002f00:	400204b8 	.word	0x400204b8
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00d      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f14:	f003 031f 	and.w	r3, r3, #31
 8002f18:	2204      	movs	r2, #4
 8002f1a:	409a      	lsls	r2, r3
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f24:	f043 0204 	orr.w	r2, r3, #4
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f30:	f003 031f 	and.w	r3, r3, #31
 8002f34:	2210      	movs	r2, #16
 8002f36:	409a      	lsls	r2, r3
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f000 80a6 	beq.w	800308e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a85      	ldr	r2, [pc, #532]	; (800315c <HAL_DMA_IRQHandler+0x690>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d04a      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x516>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a83      	ldr	r2, [pc, #524]	; (8003160 <HAL_DMA_IRQHandler+0x694>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d045      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x516>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a82      	ldr	r2, [pc, #520]	; (8003164 <HAL_DMA_IRQHandler+0x698>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d040      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x516>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a80      	ldr	r2, [pc, #512]	; (8003168 <HAL_DMA_IRQHandler+0x69c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d03b      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x516>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a7f      	ldr	r2, [pc, #508]	; (800316c <HAL_DMA_IRQHandler+0x6a0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d036      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x516>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a7d      	ldr	r2, [pc, #500]	; (8003170 <HAL_DMA_IRQHandler+0x6a4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d031      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x516>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a7c      	ldr	r2, [pc, #496]	; (8003174 <HAL_DMA_IRQHandler+0x6a8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d02c      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x516>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a7a      	ldr	r2, [pc, #488]	; (8003178 <HAL_DMA_IRQHandler+0x6ac>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d027      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x516>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a79      	ldr	r2, [pc, #484]	; (800317c <HAL_DMA_IRQHandler+0x6b0>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d022      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x516>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a77      	ldr	r2, [pc, #476]	; (8003180 <HAL_DMA_IRQHandler+0x6b4>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d01d      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x516>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a76      	ldr	r2, [pc, #472]	; (8003184 <HAL_DMA_IRQHandler+0x6b8>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d018      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x516>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a74      	ldr	r2, [pc, #464]	; (8003188 <HAL_DMA_IRQHandler+0x6bc>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d013      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x516>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a73      	ldr	r2, [pc, #460]	; (800318c <HAL_DMA_IRQHandler+0x6c0>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d00e      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x516>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a71      	ldr	r2, [pc, #452]	; (8003190 <HAL_DMA_IRQHandler+0x6c4>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d009      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x516>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a70      	ldr	r2, [pc, #448]	; (8003194 <HAL_DMA_IRQHandler+0x6c8>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d004      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x516>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a6e      	ldr	r2, [pc, #440]	; (8003198 <HAL_DMA_IRQHandler+0x6cc>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d10a      	bne.n	8002ff8 <HAL_DMA_IRQHandler+0x52c>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0308 	and.w	r3, r3, #8
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	bf14      	ite	ne
 8002ff0:	2301      	movne	r3, #1
 8002ff2:	2300      	moveq	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	e009      	b.n	800300c <HAL_DMA_IRQHandler+0x540>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	2b00      	cmp	r3, #0
 8003004:	bf14      	ite	ne
 8003006:	2301      	movne	r3, #1
 8003008:	2300      	moveq	r3, #0
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b00      	cmp	r3, #0
 800300e:	d03e      	beq.n	800308e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003014:	f003 031f 	and.w	r3, r3, #31
 8003018:	2210      	movs	r2, #16
 800301a:	409a      	lsls	r2, r3
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d018      	beq.n	8003060 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d108      	bne.n	800304e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	2b00      	cmp	r3, #0
 8003042:	d024      	beq.n	800308e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	4798      	blx	r3
 800304c:	e01f      	b.n	800308e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003052:	2b00      	cmp	r3, #0
 8003054:	d01b      	beq.n	800308e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	4798      	blx	r3
 800305e:	e016      	b.n	800308e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306a:	2b00      	cmp	r3, #0
 800306c:	d107      	bne.n	800307e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 0208 	bic.w	r2, r2, #8
 800307c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003092:	f003 031f 	and.w	r3, r3, #31
 8003096:	2220      	movs	r2, #32
 8003098:	409a      	lsls	r2, r3
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	4013      	ands	r3, r2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 8110 	beq.w	80032c4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a2c      	ldr	r2, [pc, #176]	; (800315c <HAL_DMA_IRQHandler+0x690>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d04a      	beq.n	8003144 <HAL_DMA_IRQHandler+0x678>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a2b      	ldr	r2, [pc, #172]	; (8003160 <HAL_DMA_IRQHandler+0x694>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d045      	beq.n	8003144 <HAL_DMA_IRQHandler+0x678>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a29      	ldr	r2, [pc, #164]	; (8003164 <HAL_DMA_IRQHandler+0x698>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d040      	beq.n	8003144 <HAL_DMA_IRQHandler+0x678>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a28      	ldr	r2, [pc, #160]	; (8003168 <HAL_DMA_IRQHandler+0x69c>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d03b      	beq.n	8003144 <HAL_DMA_IRQHandler+0x678>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a26      	ldr	r2, [pc, #152]	; (800316c <HAL_DMA_IRQHandler+0x6a0>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d036      	beq.n	8003144 <HAL_DMA_IRQHandler+0x678>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a25      	ldr	r2, [pc, #148]	; (8003170 <HAL_DMA_IRQHandler+0x6a4>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d031      	beq.n	8003144 <HAL_DMA_IRQHandler+0x678>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a23      	ldr	r2, [pc, #140]	; (8003174 <HAL_DMA_IRQHandler+0x6a8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d02c      	beq.n	8003144 <HAL_DMA_IRQHandler+0x678>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a22      	ldr	r2, [pc, #136]	; (8003178 <HAL_DMA_IRQHandler+0x6ac>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d027      	beq.n	8003144 <HAL_DMA_IRQHandler+0x678>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a20      	ldr	r2, [pc, #128]	; (800317c <HAL_DMA_IRQHandler+0x6b0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d022      	beq.n	8003144 <HAL_DMA_IRQHandler+0x678>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a1f      	ldr	r2, [pc, #124]	; (8003180 <HAL_DMA_IRQHandler+0x6b4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d01d      	beq.n	8003144 <HAL_DMA_IRQHandler+0x678>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a1d      	ldr	r2, [pc, #116]	; (8003184 <HAL_DMA_IRQHandler+0x6b8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d018      	beq.n	8003144 <HAL_DMA_IRQHandler+0x678>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a1c      	ldr	r2, [pc, #112]	; (8003188 <HAL_DMA_IRQHandler+0x6bc>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d013      	beq.n	8003144 <HAL_DMA_IRQHandler+0x678>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a1a      	ldr	r2, [pc, #104]	; (800318c <HAL_DMA_IRQHandler+0x6c0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d00e      	beq.n	8003144 <HAL_DMA_IRQHandler+0x678>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a19      	ldr	r2, [pc, #100]	; (8003190 <HAL_DMA_IRQHandler+0x6c4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d009      	beq.n	8003144 <HAL_DMA_IRQHandler+0x678>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a17      	ldr	r2, [pc, #92]	; (8003194 <HAL_DMA_IRQHandler+0x6c8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d004      	beq.n	8003144 <HAL_DMA_IRQHandler+0x678>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a16      	ldr	r2, [pc, #88]	; (8003198 <HAL_DMA_IRQHandler+0x6cc>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d12b      	bne.n	800319c <HAL_DMA_IRQHandler+0x6d0>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0310 	and.w	r3, r3, #16
 800314e:	2b00      	cmp	r3, #0
 8003150:	bf14      	ite	ne
 8003152:	2301      	movne	r3, #1
 8003154:	2300      	moveq	r3, #0
 8003156:	b2db      	uxtb	r3, r3
 8003158:	e02a      	b.n	80031b0 <HAL_DMA_IRQHandler+0x6e4>
 800315a:	bf00      	nop
 800315c:	40020010 	.word	0x40020010
 8003160:	40020028 	.word	0x40020028
 8003164:	40020040 	.word	0x40020040
 8003168:	40020058 	.word	0x40020058
 800316c:	40020070 	.word	0x40020070
 8003170:	40020088 	.word	0x40020088
 8003174:	400200a0 	.word	0x400200a0
 8003178:	400200b8 	.word	0x400200b8
 800317c:	40020410 	.word	0x40020410
 8003180:	40020428 	.word	0x40020428
 8003184:	40020440 	.word	0x40020440
 8003188:	40020458 	.word	0x40020458
 800318c:	40020470 	.word	0x40020470
 8003190:	40020488 	.word	0x40020488
 8003194:	400204a0 	.word	0x400204a0
 8003198:	400204b8 	.word	0x400204b8
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	bf14      	ite	ne
 80031aa:	2301      	movne	r3, #1
 80031ac:	2300      	moveq	r3, #0
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 8087 	beq.w	80032c4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ba:	f003 031f 	and.w	r3, r3, #31
 80031be:	2220      	movs	r2, #32
 80031c0:	409a      	lsls	r2, r3
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d139      	bne.n	8003246 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0216 	bic.w	r2, r2, #22
 80031e0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695a      	ldr	r2, [r3, #20]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031f0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d103      	bne.n	8003202 <HAL_DMA_IRQHandler+0x736>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d007      	beq.n	8003212 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0208 	bic.w	r2, r2, #8
 8003210:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003216:	f003 031f 	and.w	r3, r3, #31
 800321a:	223f      	movs	r2, #63	; 0x3f
 800321c:	409a      	lsls	r2, r3
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 834a 	beq.w	80038d0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	4798      	blx	r3
          }
          return;
 8003244:	e344      	b.n	80038d0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d018      	beq.n	8003286 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d108      	bne.n	8003274 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003266:	2b00      	cmp	r3, #0
 8003268:	d02c      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	4798      	blx	r3
 8003272:	e027      	b.n	80032c4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003278:	2b00      	cmp	r3, #0
 800327a:	d023      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	4798      	blx	r3
 8003284:	e01e      	b.n	80032c4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10f      	bne.n	80032b4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0210 	bic.w	r2, r2, #16
 80032a2:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 8306 	beq.w	80038da <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 8088 	beq.w	80033ec <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2204      	movs	r2, #4
 80032e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a7a      	ldr	r2, [pc, #488]	; (80034d4 <HAL_DMA_IRQHandler+0xa08>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d04a      	beq.n	8003384 <HAL_DMA_IRQHandler+0x8b8>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a79      	ldr	r2, [pc, #484]	; (80034d8 <HAL_DMA_IRQHandler+0xa0c>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d045      	beq.n	8003384 <HAL_DMA_IRQHandler+0x8b8>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a77      	ldr	r2, [pc, #476]	; (80034dc <HAL_DMA_IRQHandler+0xa10>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d040      	beq.n	8003384 <HAL_DMA_IRQHandler+0x8b8>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a76      	ldr	r2, [pc, #472]	; (80034e0 <HAL_DMA_IRQHandler+0xa14>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d03b      	beq.n	8003384 <HAL_DMA_IRQHandler+0x8b8>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a74      	ldr	r2, [pc, #464]	; (80034e4 <HAL_DMA_IRQHandler+0xa18>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d036      	beq.n	8003384 <HAL_DMA_IRQHandler+0x8b8>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a73      	ldr	r2, [pc, #460]	; (80034e8 <HAL_DMA_IRQHandler+0xa1c>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d031      	beq.n	8003384 <HAL_DMA_IRQHandler+0x8b8>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a71      	ldr	r2, [pc, #452]	; (80034ec <HAL_DMA_IRQHandler+0xa20>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d02c      	beq.n	8003384 <HAL_DMA_IRQHandler+0x8b8>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a70      	ldr	r2, [pc, #448]	; (80034f0 <HAL_DMA_IRQHandler+0xa24>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d027      	beq.n	8003384 <HAL_DMA_IRQHandler+0x8b8>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a6e      	ldr	r2, [pc, #440]	; (80034f4 <HAL_DMA_IRQHandler+0xa28>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d022      	beq.n	8003384 <HAL_DMA_IRQHandler+0x8b8>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a6d      	ldr	r2, [pc, #436]	; (80034f8 <HAL_DMA_IRQHandler+0xa2c>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d01d      	beq.n	8003384 <HAL_DMA_IRQHandler+0x8b8>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a6b      	ldr	r2, [pc, #428]	; (80034fc <HAL_DMA_IRQHandler+0xa30>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d018      	beq.n	8003384 <HAL_DMA_IRQHandler+0x8b8>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a6a      	ldr	r2, [pc, #424]	; (8003500 <HAL_DMA_IRQHandler+0xa34>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d013      	beq.n	8003384 <HAL_DMA_IRQHandler+0x8b8>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a68      	ldr	r2, [pc, #416]	; (8003504 <HAL_DMA_IRQHandler+0xa38>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d00e      	beq.n	8003384 <HAL_DMA_IRQHandler+0x8b8>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a67      	ldr	r2, [pc, #412]	; (8003508 <HAL_DMA_IRQHandler+0xa3c>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d009      	beq.n	8003384 <HAL_DMA_IRQHandler+0x8b8>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a65      	ldr	r2, [pc, #404]	; (800350c <HAL_DMA_IRQHandler+0xa40>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d004      	beq.n	8003384 <HAL_DMA_IRQHandler+0x8b8>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a64      	ldr	r2, [pc, #400]	; (8003510 <HAL_DMA_IRQHandler+0xa44>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d108      	bne.n	8003396 <HAL_DMA_IRQHandler+0x8ca>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 0201 	bic.w	r2, r2, #1
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	e007      	b.n	80033a6 <HAL_DMA_IRQHandler+0x8da>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 0201 	bic.w	r2, r2, #1
 80033a4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	3301      	adds	r3, #1
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d307      	bcc.n	80033c2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1f2      	bne.n	80033a6 <HAL_DMA_IRQHandler+0x8da>
 80033c0:	e000      	b.n	80033c4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80033c2:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d004      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2203      	movs	r2, #3
 80033de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80033e2:	e003      	b.n	80033ec <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 8272 	beq.w	80038da <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	4798      	blx	r3
 80033fe:	e26c      	b.n	80038da <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a43      	ldr	r2, [pc, #268]	; (8003514 <HAL_DMA_IRQHandler+0xa48>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d022      	beq.n	8003450 <HAL_DMA_IRQHandler+0x984>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a42      	ldr	r2, [pc, #264]	; (8003518 <HAL_DMA_IRQHandler+0xa4c>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d01d      	beq.n	8003450 <HAL_DMA_IRQHandler+0x984>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a40      	ldr	r2, [pc, #256]	; (800351c <HAL_DMA_IRQHandler+0xa50>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d018      	beq.n	8003450 <HAL_DMA_IRQHandler+0x984>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a3f      	ldr	r2, [pc, #252]	; (8003520 <HAL_DMA_IRQHandler+0xa54>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d013      	beq.n	8003450 <HAL_DMA_IRQHandler+0x984>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a3d      	ldr	r2, [pc, #244]	; (8003524 <HAL_DMA_IRQHandler+0xa58>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d00e      	beq.n	8003450 <HAL_DMA_IRQHandler+0x984>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a3c      	ldr	r2, [pc, #240]	; (8003528 <HAL_DMA_IRQHandler+0xa5c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d009      	beq.n	8003450 <HAL_DMA_IRQHandler+0x984>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a3a      	ldr	r2, [pc, #232]	; (800352c <HAL_DMA_IRQHandler+0xa60>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d004      	beq.n	8003450 <HAL_DMA_IRQHandler+0x984>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a39      	ldr	r2, [pc, #228]	; (8003530 <HAL_DMA_IRQHandler+0xa64>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d101      	bne.n	8003454 <HAL_DMA_IRQHandler+0x988>
 8003450:	2301      	movs	r3, #1
 8003452:	e000      	b.n	8003456 <HAL_DMA_IRQHandler+0x98a>
 8003454:	2300      	movs	r3, #0
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 823f 	beq.w	80038da <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003468:	f003 031f 	and.w	r3, r3, #31
 800346c:	2204      	movs	r2, #4
 800346e:	409a      	lsls	r2, r3
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	4013      	ands	r3, r2
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 80cd 	beq.w	8003614 <HAL_DMA_IRQHandler+0xb48>
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 80c7 	beq.w	8003614 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348a:	f003 031f 	and.w	r3, r3, #31
 800348e:	2204      	movs	r2, #4
 8003490:	409a      	lsls	r2, r3
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d049      	beq.n	8003534 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d109      	bne.n	80034be <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 8210 	beq.w	80038d4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034bc:	e20a      	b.n	80038d4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 8206 	beq.w	80038d4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034d0:	e200      	b.n	80038d4 <HAL_DMA_IRQHandler+0xe08>
 80034d2:	bf00      	nop
 80034d4:	40020010 	.word	0x40020010
 80034d8:	40020028 	.word	0x40020028
 80034dc:	40020040 	.word	0x40020040
 80034e0:	40020058 	.word	0x40020058
 80034e4:	40020070 	.word	0x40020070
 80034e8:	40020088 	.word	0x40020088
 80034ec:	400200a0 	.word	0x400200a0
 80034f0:	400200b8 	.word	0x400200b8
 80034f4:	40020410 	.word	0x40020410
 80034f8:	40020428 	.word	0x40020428
 80034fc:	40020440 	.word	0x40020440
 8003500:	40020458 	.word	0x40020458
 8003504:	40020470 	.word	0x40020470
 8003508:	40020488 	.word	0x40020488
 800350c:	400204a0 	.word	0x400204a0
 8003510:	400204b8 	.word	0x400204b8
 8003514:	58025408 	.word	0x58025408
 8003518:	5802541c 	.word	0x5802541c
 800351c:	58025430 	.word	0x58025430
 8003520:	58025444 	.word	0x58025444
 8003524:	58025458 	.word	0x58025458
 8003528:	5802546c 	.word	0x5802546c
 800352c:	58025480 	.word	0x58025480
 8003530:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f003 0320 	and.w	r3, r3, #32
 800353a:	2b00      	cmp	r3, #0
 800353c:	d160      	bne.n	8003600 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a8c      	ldr	r2, [pc, #560]	; (8003774 <HAL_DMA_IRQHandler+0xca8>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d04a      	beq.n	80035de <HAL_DMA_IRQHandler+0xb12>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a8a      	ldr	r2, [pc, #552]	; (8003778 <HAL_DMA_IRQHandler+0xcac>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d045      	beq.n	80035de <HAL_DMA_IRQHandler+0xb12>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a89      	ldr	r2, [pc, #548]	; (800377c <HAL_DMA_IRQHandler+0xcb0>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d040      	beq.n	80035de <HAL_DMA_IRQHandler+0xb12>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a87      	ldr	r2, [pc, #540]	; (8003780 <HAL_DMA_IRQHandler+0xcb4>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d03b      	beq.n	80035de <HAL_DMA_IRQHandler+0xb12>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a86      	ldr	r2, [pc, #536]	; (8003784 <HAL_DMA_IRQHandler+0xcb8>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d036      	beq.n	80035de <HAL_DMA_IRQHandler+0xb12>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a84      	ldr	r2, [pc, #528]	; (8003788 <HAL_DMA_IRQHandler+0xcbc>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d031      	beq.n	80035de <HAL_DMA_IRQHandler+0xb12>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a83      	ldr	r2, [pc, #524]	; (800378c <HAL_DMA_IRQHandler+0xcc0>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d02c      	beq.n	80035de <HAL_DMA_IRQHandler+0xb12>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a81      	ldr	r2, [pc, #516]	; (8003790 <HAL_DMA_IRQHandler+0xcc4>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d027      	beq.n	80035de <HAL_DMA_IRQHandler+0xb12>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a80      	ldr	r2, [pc, #512]	; (8003794 <HAL_DMA_IRQHandler+0xcc8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d022      	beq.n	80035de <HAL_DMA_IRQHandler+0xb12>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a7e      	ldr	r2, [pc, #504]	; (8003798 <HAL_DMA_IRQHandler+0xccc>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d01d      	beq.n	80035de <HAL_DMA_IRQHandler+0xb12>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a7d      	ldr	r2, [pc, #500]	; (800379c <HAL_DMA_IRQHandler+0xcd0>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d018      	beq.n	80035de <HAL_DMA_IRQHandler+0xb12>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a7b      	ldr	r2, [pc, #492]	; (80037a0 <HAL_DMA_IRQHandler+0xcd4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d013      	beq.n	80035de <HAL_DMA_IRQHandler+0xb12>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a7a      	ldr	r2, [pc, #488]	; (80037a4 <HAL_DMA_IRQHandler+0xcd8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d00e      	beq.n	80035de <HAL_DMA_IRQHandler+0xb12>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a78      	ldr	r2, [pc, #480]	; (80037a8 <HAL_DMA_IRQHandler+0xcdc>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d009      	beq.n	80035de <HAL_DMA_IRQHandler+0xb12>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a77      	ldr	r2, [pc, #476]	; (80037ac <HAL_DMA_IRQHandler+0xce0>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d004      	beq.n	80035de <HAL_DMA_IRQHandler+0xb12>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a75      	ldr	r2, [pc, #468]	; (80037b0 <HAL_DMA_IRQHandler+0xce4>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d108      	bne.n	80035f0 <HAL_DMA_IRQHandler+0xb24>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0208 	bic.w	r2, r2, #8
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	e007      	b.n	8003600 <HAL_DMA_IRQHandler+0xb34>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0204 	bic.w	r2, r2, #4
 80035fe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 8165 	beq.w	80038d4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003612:	e15f      	b.n	80038d4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003618:	f003 031f 	and.w	r3, r3, #31
 800361c:	2202      	movs	r2, #2
 800361e:	409a      	lsls	r2, r3
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	4013      	ands	r3, r2
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 80c5 	beq.w	80037b4 <HAL_DMA_IRQHandler+0xce8>
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 80bf 	beq.w	80037b4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363a:	f003 031f 	and.w	r3, r3, #31
 800363e:	2202      	movs	r2, #2
 8003640:	409a      	lsls	r2, r3
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d018      	beq.n	8003682 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d109      	bne.n	800366e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 813a 	beq.w	80038d8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800366c:	e134      	b.n	80038d8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003672:	2b00      	cmp	r3, #0
 8003674:	f000 8130 	beq.w	80038d8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003680:	e12a      	b.n	80038d8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	f003 0320 	and.w	r3, r3, #32
 8003688:	2b00      	cmp	r3, #0
 800368a:	d168      	bne.n	800375e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a38      	ldr	r2, [pc, #224]	; (8003774 <HAL_DMA_IRQHandler+0xca8>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d04a      	beq.n	800372c <HAL_DMA_IRQHandler+0xc60>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a37      	ldr	r2, [pc, #220]	; (8003778 <HAL_DMA_IRQHandler+0xcac>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d045      	beq.n	800372c <HAL_DMA_IRQHandler+0xc60>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a35      	ldr	r2, [pc, #212]	; (800377c <HAL_DMA_IRQHandler+0xcb0>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d040      	beq.n	800372c <HAL_DMA_IRQHandler+0xc60>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a34      	ldr	r2, [pc, #208]	; (8003780 <HAL_DMA_IRQHandler+0xcb4>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d03b      	beq.n	800372c <HAL_DMA_IRQHandler+0xc60>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a32      	ldr	r2, [pc, #200]	; (8003784 <HAL_DMA_IRQHandler+0xcb8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d036      	beq.n	800372c <HAL_DMA_IRQHandler+0xc60>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a31      	ldr	r2, [pc, #196]	; (8003788 <HAL_DMA_IRQHandler+0xcbc>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d031      	beq.n	800372c <HAL_DMA_IRQHandler+0xc60>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a2f      	ldr	r2, [pc, #188]	; (800378c <HAL_DMA_IRQHandler+0xcc0>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d02c      	beq.n	800372c <HAL_DMA_IRQHandler+0xc60>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a2e      	ldr	r2, [pc, #184]	; (8003790 <HAL_DMA_IRQHandler+0xcc4>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d027      	beq.n	800372c <HAL_DMA_IRQHandler+0xc60>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a2c      	ldr	r2, [pc, #176]	; (8003794 <HAL_DMA_IRQHandler+0xcc8>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d022      	beq.n	800372c <HAL_DMA_IRQHandler+0xc60>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a2b      	ldr	r2, [pc, #172]	; (8003798 <HAL_DMA_IRQHandler+0xccc>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d01d      	beq.n	800372c <HAL_DMA_IRQHandler+0xc60>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a29      	ldr	r2, [pc, #164]	; (800379c <HAL_DMA_IRQHandler+0xcd0>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d018      	beq.n	800372c <HAL_DMA_IRQHandler+0xc60>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a28      	ldr	r2, [pc, #160]	; (80037a0 <HAL_DMA_IRQHandler+0xcd4>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d013      	beq.n	800372c <HAL_DMA_IRQHandler+0xc60>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a26      	ldr	r2, [pc, #152]	; (80037a4 <HAL_DMA_IRQHandler+0xcd8>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d00e      	beq.n	800372c <HAL_DMA_IRQHandler+0xc60>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a25      	ldr	r2, [pc, #148]	; (80037a8 <HAL_DMA_IRQHandler+0xcdc>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d009      	beq.n	800372c <HAL_DMA_IRQHandler+0xc60>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a23      	ldr	r2, [pc, #140]	; (80037ac <HAL_DMA_IRQHandler+0xce0>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d004      	beq.n	800372c <HAL_DMA_IRQHandler+0xc60>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a22      	ldr	r2, [pc, #136]	; (80037b0 <HAL_DMA_IRQHandler+0xce4>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d108      	bne.n	800373e <HAL_DMA_IRQHandler+0xc72>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0214 	bic.w	r2, r2, #20
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	e007      	b.n	800374e <HAL_DMA_IRQHandler+0xc82>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 020a 	bic.w	r2, r2, #10
 800374c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003762:	2b00      	cmp	r3, #0
 8003764:	f000 80b8 	beq.w	80038d8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003770:	e0b2      	b.n	80038d8 <HAL_DMA_IRQHandler+0xe0c>
 8003772:	bf00      	nop
 8003774:	40020010 	.word	0x40020010
 8003778:	40020028 	.word	0x40020028
 800377c:	40020040 	.word	0x40020040
 8003780:	40020058 	.word	0x40020058
 8003784:	40020070 	.word	0x40020070
 8003788:	40020088 	.word	0x40020088
 800378c:	400200a0 	.word	0x400200a0
 8003790:	400200b8 	.word	0x400200b8
 8003794:	40020410 	.word	0x40020410
 8003798:	40020428 	.word	0x40020428
 800379c:	40020440 	.word	0x40020440
 80037a0:	40020458 	.word	0x40020458
 80037a4:	40020470 	.word	0x40020470
 80037a8:	40020488 	.word	0x40020488
 80037ac:	400204a0 	.word	0x400204a0
 80037b0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b8:	f003 031f 	and.w	r3, r3, #31
 80037bc:	2208      	movs	r2, #8
 80037be:	409a      	lsls	r2, r3
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	4013      	ands	r3, r2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 8088 	beq.w	80038da <HAL_DMA_IRQHandler+0xe0e>
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f003 0308 	and.w	r3, r3, #8
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 8082 	beq.w	80038da <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a41      	ldr	r2, [pc, #260]	; (80038e0 <HAL_DMA_IRQHandler+0xe14>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d04a      	beq.n	8003876 <HAL_DMA_IRQHandler+0xdaa>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a3f      	ldr	r2, [pc, #252]	; (80038e4 <HAL_DMA_IRQHandler+0xe18>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d045      	beq.n	8003876 <HAL_DMA_IRQHandler+0xdaa>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a3e      	ldr	r2, [pc, #248]	; (80038e8 <HAL_DMA_IRQHandler+0xe1c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d040      	beq.n	8003876 <HAL_DMA_IRQHandler+0xdaa>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a3c      	ldr	r2, [pc, #240]	; (80038ec <HAL_DMA_IRQHandler+0xe20>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d03b      	beq.n	8003876 <HAL_DMA_IRQHandler+0xdaa>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a3b      	ldr	r2, [pc, #236]	; (80038f0 <HAL_DMA_IRQHandler+0xe24>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d036      	beq.n	8003876 <HAL_DMA_IRQHandler+0xdaa>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a39      	ldr	r2, [pc, #228]	; (80038f4 <HAL_DMA_IRQHandler+0xe28>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d031      	beq.n	8003876 <HAL_DMA_IRQHandler+0xdaa>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a38      	ldr	r2, [pc, #224]	; (80038f8 <HAL_DMA_IRQHandler+0xe2c>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d02c      	beq.n	8003876 <HAL_DMA_IRQHandler+0xdaa>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a36      	ldr	r2, [pc, #216]	; (80038fc <HAL_DMA_IRQHandler+0xe30>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d027      	beq.n	8003876 <HAL_DMA_IRQHandler+0xdaa>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a35      	ldr	r2, [pc, #212]	; (8003900 <HAL_DMA_IRQHandler+0xe34>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d022      	beq.n	8003876 <HAL_DMA_IRQHandler+0xdaa>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a33      	ldr	r2, [pc, #204]	; (8003904 <HAL_DMA_IRQHandler+0xe38>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d01d      	beq.n	8003876 <HAL_DMA_IRQHandler+0xdaa>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a32      	ldr	r2, [pc, #200]	; (8003908 <HAL_DMA_IRQHandler+0xe3c>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d018      	beq.n	8003876 <HAL_DMA_IRQHandler+0xdaa>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a30      	ldr	r2, [pc, #192]	; (800390c <HAL_DMA_IRQHandler+0xe40>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d013      	beq.n	8003876 <HAL_DMA_IRQHandler+0xdaa>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a2f      	ldr	r2, [pc, #188]	; (8003910 <HAL_DMA_IRQHandler+0xe44>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d00e      	beq.n	8003876 <HAL_DMA_IRQHandler+0xdaa>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a2d      	ldr	r2, [pc, #180]	; (8003914 <HAL_DMA_IRQHandler+0xe48>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d009      	beq.n	8003876 <HAL_DMA_IRQHandler+0xdaa>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a2c      	ldr	r2, [pc, #176]	; (8003918 <HAL_DMA_IRQHandler+0xe4c>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d004      	beq.n	8003876 <HAL_DMA_IRQHandler+0xdaa>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a2a      	ldr	r2, [pc, #168]	; (800391c <HAL_DMA_IRQHandler+0xe50>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d108      	bne.n	8003888 <HAL_DMA_IRQHandler+0xdbc>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 021c 	bic.w	r2, r2, #28
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	e007      	b.n	8003898 <HAL_DMA_IRQHandler+0xdcc>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 020e 	bic.w	r2, r2, #14
 8003896:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389c:	f003 031f 	and.w	r3, r3, #31
 80038a0:	2201      	movs	r2, #1
 80038a2:	409a      	lsls	r2, r3
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d009      	beq.n	80038da <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	4798      	blx	r3
 80038ce:	e004      	b.n	80038da <HAL_DMA_IRQHandler+0xe0e>
          return;
 80038d0:	bf00      	nop
 80038d2:	e002      	b.n	80038da <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038d4:	bf00      	nop
 80038d6:	e000      	b.n	80038da <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038d8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80038da:	3728      	adds	r7, #40	; 0x28
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40020010 	.word	0x40020010
 80038e4:	40020028 	.word	0x40020028
 80038e8:	40020040 	.word	0x40020040
 80038ec:	40020058 	.word	0x40020058
 80038f0:	40020070 	.word	0x40020070
 80038f4:	40020088 	.word	0x40020088
 80038f8:	400200a0 	.word	0x400200a0
 80038fc:	400200b8 	.word	0x400200b8
 8003900:	40020410 	.word	0x40020410
 8003904:	40020428 	.word	0x40020428
 8003908:	40020440 	.word	0x40020440
 800390c:	40020458 	.word	0x40020458
 8003910:	40020470 	.word	0x40020470
 8003914:	40020488 	.word	0x40020488
 8003918:	400204a0 	.word	0x400204a0
 800391c:	400204b8 	.word	0x400204b8

08003920 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
 800392c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003932:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003938:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a84      	ldr	r2, [pc, #528]	; (8003b50 <DMA_SetConfig+0x230>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d072      	beq.n	8003a2a <DMA_SetConfig+0x10a>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a82      	ldr	r2, [pc, #520]	; (8003b54 <DMA_SetConfig+0x234>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d06d      	beq.n	8003a2a <DMA_SetConfig+0x10a>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a81      	ldr	r2, [pc, #516]	; (8003b58 <DMA_SetConfig+0x238>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d068      	beq.n	8003a2a <DMA_SetConfig+0x10a>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a7f      	ldr	r2, [pc, #508]	; (8003b5c <DMA_SetConfig+0x23c>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d063      	beq.n	8003a2a <DMA_SetConfig+0x10a>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a7e      	ldr	r2, [pc, #504]	; (8003b60 <DMA_SetConfig+0x240>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d05e      	beq.n	8003a2a <DMA_SetConfig+0x10a>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a7c      	ldr	r2, [pc, #496]	; (8003b64 <DMA_SetConfig+0x244>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d059      	beq.n	8003a2a <DMA_SetConfig+0x10a>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a7b      	ldr	r2, [pc, #492]	; (8003b68 <DMA_SetConfig+0x248>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d054      	beq.n	8003a2a <DMA_SetConfig+0x10a>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a79      	ldr	r2, [pc, #484]	; (8003b6c <DMA_SetConfig+0x24c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d04f      	beq.n	8003a2a <DMA_SetConfig+0x10a>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a78      	ldr	r2, [pc, #480]	; (8003b70 <DMA_SetConfig+0x250>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d04a      	beq.n	8003a2a <DMA_SetConfig+0x10a>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a76      	ldr	r2, [pc, #472]	; (8003b74 <DMA_SetConfig+0x254>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d045      	beq.n	8003a2a <DMA_SetConfig+0x10a>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a75      	ldr	r2, [pc, #468]	; (8003b78 <DMA_SetConfig+0x258>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d040      	beq.n	8003a2a <DMA_SetConfig+0x10a>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a73      	ldr	r2, [pc, #460]	; (8003b7c <DMA_SetConfig+0x25c>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d03b      	beq.n	8003a2a <DMA_SetConfig+0x10a>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a72      	ldr	r2, [pc, #456]	; (8003b80 <DMA_SetConfig+0x260>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d036      	beq.n	8003a2a <DMA_SetConfig+0x10a>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a70      	ldr	r2, [pc, #448]	; (8003b84 <DMA_SetConfig+0x264>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d031      	beq.n	8003a2a <DMA_SetConfig+0x10a>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a6f      	ldr	r2, [pc, #444]	; (8003b88 <DMA_SetConfig+0x268>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d02c      	beq.n	8003a2a <DMA_SetConfig+0x10a>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a6d      	ldr	r2, [pc, #436]	; (8003b8c <DMA_SetConfig+0x26c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d027      	beq.n	8003a2a <DMA_SetConfig+0x10a>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a6c      	ldr	r2, [pc, #432]	; (8003b90 <DMA_SetConfig+0x270>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d022      	beq.n	8003a2a <DMA_SetConfig+0x10a>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a6a      	ldr	r2, [pc, #424]	; (8003b94 <DMA_SetConfig+0x274>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d01d      	beq.n	8003a2a <DMA_SetConfig+0x10a>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a69      	ldr	r2, [pc, #420]	; (8003b98 <DMA_SetConfig+0x278>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d018      	beq.n	8003a2a <DMA_SetConfig+0x10a>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a67      	ldr	r2, [pc, #412]	; (8003b9c <DMA_SetConfig+0x27c>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d013      	beq.n	8003a2a <DMA_SetConfig+0x10a>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a66      	ldr	r2, [pc, #408]	; (8003ba0 <DMA_SetConfig+0x280>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d00e      	beq.n	8003a2a <DMA_SetConfig+0x10a>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a64      	ldr	r2, [pc, #400]	; (8003ba4 <DMA_SetConfig+0x284>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d009      	beq.n	8003a2a <DMA_SetConfig+0x10a>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a63      	ldr	r2, [pc, #396]	; (8003ba8 <DMA_SetConfig+0x288>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d004      	beq.n	8003a2a <DMA_SetConfig+0x10a>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a61      	ldr	r2, [pc, #388]	; (8003bac <DMA_SetConfig+0x28c>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d101      	bne.n	8003a2e <DMA_SetConfig+0x10e>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <DMA_SetConfig+0x110>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00d      	beq.n	8003a50 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003a3c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d004      	beq.n	8003a50 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003a4e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a3e      	ldr	r2, [pc, #248]	; (8003b50 <DMA_SetConfig+0x230>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d04a      	beq.n	8003af0 <DMA_SetConfig+0x1d0>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a3d      	ldr	r2, [pc, #244]	; (8003b54 <DMA_SetConfig+0x234>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d045      	beq.n	8003af0 <DMA_SetConfig+0x1d0>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a3b      	ldr	r2, [pc, #236]	; (8003b58 <DMA_SetConfig+0x238>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d040      	beq.n	8003af0 <DMA_SetConfig+0x1d0>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a3a      	ldr	r2, [pc, #232]	; (8003b5c <DMA_SetConfig+0x23c>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d03b      	beq.n	8003af0 <DMA_SetConfig+0x1d0>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a38      	ldr	r2, [pc, #224]	; (8003b60 <DMA_SetConfig+0x240>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d036      	beq.n	8003af0 <DMA_SetConfig+0x1d0>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a37      	ldr	r2, [pc, #220]	; (8003b64 <DMA_SetConfig+0x244>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d031      	beq.n	8003af0 <DMA_SetConfig+0x1d0>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a35      	ldr	r2, [pc, #212]	; (8003b68 <DMA_SetConfig+0x248>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d02c      	beq.n	8003af0 <DMA_SetConfig+0x1d0>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a34      	ldr	r2, [pc, #208]	; (8003b6c <DMA_SetConfig+0x24c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d027      	beq.n	8003af0 <DMA_SetConfig+0x1d0>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a32      	ldr	r2, [pc, #200]	; (8003b70 <DMA_SetConfig+0x250>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d022      	beq.n	8003af0 <DMA_SetConfig+0x1d0>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a31      	ldr	r2, [pc, #196]	; (8003b74 <DMA_SetConfig+0x254>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d01d      	beq.n	8003af0 <DMA_SetConfig+0x1d0>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a2f      	ldr	r2, [pc, #188]	; (8003b78 <DMA_SetConfig+0x258>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d018      	beq.n	8003af0 <DMA_SetConfig+0x1d0>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a2e      	ldr	r2, [pc, #184]	; (8003b7c <DMA_SetConfig+0x25c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d013      	beq.n	8003af0 <DMA_SetConfig+0x1d0>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a2c      	ldr	r2, [pc, #176]	; (8003b80 <DMA_SetConfig+0x260>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d00e      	beq.n	8003af0 <DMA_SetConfig+0x1d0>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a2b      	ldr	r2, [pc, #172]	; (8003b84 <DMA_SetConfig+0x264>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d009      	beq.n	8003af0 <DMA_SetConfig+0x1d0>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a29      	ldr	r2, [pc, #164]	; (8003b88 <DMA_SetConfig+0x268>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d004      	beq.n	8003af0 <DMA_SetConfig+0x1d0>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a28      	ldr	r2, [pc, #160]	; (8003b8c <DMA_SetConfig+0x26c>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d101      	bne.n	8003af4 <DMA_SetConfig+0x1d4>
 8003af0:	2301      	movs	r3, #1
 8003af2:	e000      	b.n	8003af6 <DMA_SetConfig+0x1d6>
 8003af4:	2300      	movs	r3, #0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d05a      	beq.n	8003bb0 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003afe:	f003 031f 	and.w	r3, r3, #31
 8003b02:	223f      	movs	r2, #63	; 0x3f
 8003b04:	409a      	lsls	r2, r3
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b18:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	2b40      	cmp	r3, #64	; 0x40
 8003b28:	d108      	bne.n	8003b3c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003b3a:	e087      	b.n	8003c4c <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	60da      	str	r2, [r3, #12]
}
 8003b4c:	e07e      	b.n	8003c4c <DMA_SetConfig+0x32c>
 8003b4e:	bf00      	nop
 8003b50:	40020010 	.word	0x40020010
 8003b54:	40020028 	.word	0x40020028
 8003b58:	40020040 	.word	0x40020040
 8003b5c:	40020058 	.word	0x40020058
 8003b60:	40020070 	.word	0x40020070
 8003b64:	40020088 	.word	0x40020088
 8003b68:	400200a0 	.word	0x400200a0
 8003b6c:	400200b8 	.word	0x400200b8
 8003b70:	40020410 	.word	0x40020410
 8003b74:	40020428 	.word	0x40020428
 8003b78:	40020440 	.word	0x40020440
 8003b7c:	40020458 	.word	0x40020458
 8003b80:	40020470 	.word	0x40020470
 8003b84:	40020488 	.word	0x40020488
 8003b88:	400204a0 	.word	0x400204a0
 8003b8c:	400204b8 	.word	0x400204b8
 8003b90:	58025408 	.word	0x58025408
 8003b94:	5802541c 	.word	0x5802541c
 8003b98:	58025430 	.word	0x58025430
 8003b9c:	58025444 	.word	0x58025444
 8003ba0:	58025458 	.word	0x58025458
 8003ba4:	5802546c 	.word	0x5802546c
 8003ba8:	58025480 	.word	0x58025480
 8003bac:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a28      	ldr	r2, [pc, #160]	; (8003c58 <DMA_SetConfig+0x338>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d022      	beq.n	8003c00 <DMA_SetConfig+0x2e0>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a27      	ldr	r2, [pc, #156]	; (8003c5c <DMA_SetConfig+0x33c>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d01d      	beq.n	8003c00 <DMA_SetConfig+0x2e0>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a25      	ldr	r2, [pc, #148]	; (8003c60 <DMA_SetConfig+0x340>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d018      	beq.n	8003c00 <DMA_SetConfig+0x2e0>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a24      	ldr	r2, [pc, #144]	; (8003c64 <DMA_SetConfig+0x344>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d013      	beq.n	8003c00 <DMA_SetConfig+0x2e0>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a22      	ldr	r2, [pc, #136]	; (8003c68 <DMA_SetConfig+0x348>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d00e      	beq.n	8003c00 <DMA_SetConfig+0x2e0>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a21      	ldr	r2, [pc, #132]	; (8003c6c <DMA_SetConfig+0x34c>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d009      	beq.n	8003c00 <DMA_SetConfig+0x2e0>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a1f      	ldr	r2, [pc, #124]	; (8003c70 <DMA_SetConfig+0x350>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d004      	beq.n	8003c00 <DMA_SetConfig+0x2e0>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a1e      	ldr	r2, [pc, #120]	; (8003c74 <DMA_SetConfig+0x354>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d101      	bne.n	8003c04 <DMA_SetConfig+0x2e4>
 8003c00:	2301      	movs	r3, #1
 8003c02:	e000      	b.n	8003c06 <DMA_SetConfig+0x2e6>
 8003c04:	2300      	movs	r3, #0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d020      	beq.n	8003c4c <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c0e:	f003 031f 	and.w	r3, r3, #31
 8003c12:	2201      	movs	r2, #1
 8003c14:	409a      	lsls	r2, r3
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	2b40      	cmp	r3, #64	; 0x40
 8003c28:	d108      	bne.n	8003c3c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	60da      	str	r2, [r3, #12]
}
 8003c3a:	e007      	b.n	8003c4c <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	60da      	str	r2, [r3, #12]
}
 8003c4c:	bf00      	nop
 8003c4e:	371c      	adds	r7, #28
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	58025408 	.word	0x58025408
 8003c5c:	5802541c 	.word	0x5802541c
 8003c60:	58025430 	.word	0x58025430
 8003c64:	58025444 	.word	0x58025444
 8003c68:	58025458 	.word	0x58025458
 8003c6c:	5802546c 	.word	0x5802546c
 8003c70:	58025480 	.word	0x58025480
 8003c74:	58025494 	.word	0x58025494

08003c78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a42      	ldr	r2, [pc, #264]	; (8003d90 <DMA_CalcBaseAndBitshift+0x118>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d04a      	beq.n	8003d20 <DMA_CalcBaseAndBitshift+0xa8>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a41      	ldr	r2, [pc, #260]	; (8003d94 <DMA_CalcBaseAndBitshift+0x11c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d045      	beq.n	8003d20 <DMA_CalcBaseAndBitshift+0xa8>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a3f      	ldr	r2, [pc, #252]	; (8003d98 <DMA_CalcBaseAndBitshift+0x120>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d040      	beq.n	8003d20 <DMA_CalcBaseAndBitshift+0xa8>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a3e      	ldr	r2, [pc, #248]	; (8003d9c <DMA_CalcBaseAndBitshift+0x124>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d03b      	beq.n	8003d20 <DMA_CalcBaseAndBitshift+0xa8>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a3c      	ldr	r2, [pc, #240]	; (8003da0 <DMA_CalcBaseAndBitshift+0x128>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d036      	beq.n	8003d20 <DMA_CalcBaseAndBitshift+0xa8>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a3b      	ldr	r2, [pc, #236]	; (8003da4 <DMA_CalcBaseAndBitshift+0x12c>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d031      	beq.n	8003d20 <DMA_CalcBaseAndBitshift+0xa8>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a39      	ldr	r2, [pc, #228]	; (8003da8 <DMA_CalcBaseAndBitshift+0x130>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d02c      	beq.n	8003d20 <DMA_CalcBaseAndBitshift+0xa8>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a38      	ldr	r2, [pc, #224]	; (8003dac <DMA_CalcBaseAndBitshift+0x134>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d027      	beq.n	8003d20 <DMA_CalcBaseAndBitshift+0xa8>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a36      	ldr	r2, [pc, #216]	; (8003db0 <DMA_CalcBaseAndBitshift+0x138>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d022      	beq.n	8003d20 <DMA_CalcBaseAndBitshift+0xa8>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a35      	ldr	r2, [pc, #212]	; (8003db4 <DMA_CalcBaseAndBitshift+0x13c>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d01d      	beq.n	8003d20 <DMA_CalcBaseAndBitshift+0xa8>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a33      	ldr	r2, [pc, #204]	; (8003db8 <DMA_CalcBaseAndBitshift+0x140>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d018      	beq.n	8003d20 <DMA_CalcBaseAndBitshift+0xa8>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a32      	ldr	r2, [pc, #200]	; (8003dbc <DMA_CalcBaseAndBitshift+0x144>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d013      	beq.n	8003d20 <DMA_CalcBaseAndBitshift+0xa8>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a30      	ldr	r2, [pc, #192]	; (8003dc0 <DMA_CalcBaseAndBitshift+0x148>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d00e      	beq.n	8003d20 <DMA_CalcBaseAndBitshift+0xa8>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a2f      	ldr	r2, [pc, #188]	; (8003dc4 <DMA_CalcBaseAndBitshift+0x14c>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d009      	beq.n	8003d20 <DMA_CalcBaseAndBitshift+0xa8>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a2d      	ldr	r2, [pc, #180]	; (8003dc8 <DMA_CalcBaseAndBitshift+0x150>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d004      	beq.n	8003d20 <DMA_CalcBaseAndBitshift+0xa8>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a2c      	ldr	r2, [pc, #176]	; (8003dcc <DMA_CalcBaseAndBitshift+0x154>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d101      	bne.n	8003d24 <DMA_CalcBaseAndBitshift+0xac>
 8003d20:	2301      	movs	r3, #1
 8003d22:	e000      	b.n	8003d26 <DMA_CalcBaseAndBitshift+0xae>
 8003d24:	2300      	movs	r3, #0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d024      	beq.n	8003d74 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	3b10      	subs	r3, #16
 8003d32:	4a27      	ldr	r2, [pc, #156]	; (8003dd0 <DMA_CalcBaseAndBitshift+0x158>)
 8003d34:	fba2 2303 	umull	r2, r3, r2, r3
 8003d38:	091b      	lsrs	r3, r3, #4
 8003d3a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f003 0307 	and.w	r3, r3, #7
 8003d42:	4a24      	ldr	r2, [pc, #144]	; (8003dd4 <DMA_CalcBaseAndBitshift+0x15c>)
 8003d44:	5cd3      	ldrb	r3, [r2, r3]
 8003d46:	461a      	mov	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2b03      	cmp	r3, #3
 8003d50:	d908      	bls.n	8003d64 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	4b1f      	ldr	r3, [pc, #124]	; (8003dd8 <DMA_CalcBaseAndBitshift+0x160>)
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	1d1a      	adds	r2, r3, #4
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	659a      	str	r2, [r3, #88]	; 0x58
 8003d62:	e00d      	b.n	8003d80 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	461a      	mov	r2, r3
 8003d6a:	4b1b      	ldr	r3, [pc, #108]	; (8003dd8 <DMA_CalcBaseAndBitshift+0x160>)
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	6593      	str	r3, [r2, #88]	; 0x58
 8003d72:	e005      	b.n	8003d80 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	40020010 	.word	0x40020010
 8003d94:	40020028 	.word	0x40020028
 8003d98:	40020040 	.word	0x40020040
 8003d9c:	40020058 	.word	0x40020058
 8003da0:	40020070 	.word	0x40020070
 8003da4:	40020088 	.word	0x40020088
 8003da8:	400200a0 	.word	0x400200a0
 8003dac:	400200b8 	.word	0x400200b8
 8003db0:	40020410 	.word	0x40020410
 8003db4:	40020428 	.word	0x40020428
 8003db8:	40020440 	.word	0x40020440
 8003dbc:	40020458 	.word	0x40020458
 8003dc0:	40020470 	.word	0x40020470
 8003dc4:	40020488 	.word	0x40020488
 8003dc8:	400204a0 	.word	0x400204a0
 8003dcc:	400204b8 	.word	0x400204b8
 8003dd0:	aaaaaaab 	.word	0xaaaaaaab
 8003dd4:	08011d08 	.word	0x08011d08
 8003dd8:	fffffc00 	.word	0xfffffc00

08003ddc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003de4:	2300      	movs	r3, #0
 8003de6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d120      	bne.n	8003e32 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df4:	2b03      	cmp	r3, #3
 8003df6:	d858      	bhi.n	8003eaa <DMA_CheckFifoParam+0xce>
 8003df8:	a201      	add	r2, pc, #4	; (adr r2, 8003e00 <DMA_CheckFifoParam+0x24>)
 8003dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfe:	bf00      	nop
 8003e00:	08003e11 	.word	0x08003e11
 8003e04:	08003e23 	.word	0x08003e23
 8003e08:	08003e11 	.word	0x08003e11
 8003e0c:	08003eab 	.word	0x08003eab
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d048      	beq.n	8003eae <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e20:	e045      	b.n	8003eae <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e26:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e2a:	d142      	bne.n	8003eb2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e30:	e03f      	b.n	8003eb2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e3a:	d123      	bne.n	8003e84 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e40:	2b03      	cmp	r3, #3
 8003e42:	d838      	bhi.n	8003eb6 <DMA_CheckFifoParam+0xda>
 8003e44:	a201      	add	r2, pc, #4	; (adr r2, 8003e4c <DMA_CheckFifoParam+0x70>)
 8003e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4a:	bf00      	nop
 8003e4c:	08003e5d 	.word	0x08003e5d
 8003e50:	08003e63 	.word	0x08003e63
 8003e54:	08003e5d 	.word	0x08003e5d
 8003e58:	08003e75 	.word	0x08003e75
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	73fb      	strb	r3, [r7, #15]
        break;
 8003e60:	e030      	b.n	8003ec4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d025      	beq.n	8003eba <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e72:	e022      	b.n	8003eba <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e78:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e7c:	d11f      	bne.n	8003ebe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e82:	e01c      	b.n	8003ebe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d902      	bls.n	8003e92 <DMA_CheckFifoParam+0xb6>
 8003e8c:	2b03      	cmp	r3, #3
 8003e8e:	d003      	beq.n	8003e98 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003e90:	e018      	b.n	8003ec4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	73fb      	strb	r3, [r7, #15]
        break;
 8003e96:	e015      	b.n	8003ec4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00e      	beq.n	8003ec2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	73fb      	strb	r3, [r7, #15]
    break;
 8003ea8:	e00b      	b.n	8003ec2 <DMA_CheckFifoParam+0xe6>
        break;
 8003eaa:	bf00      	nop
 8003eac:	e00a      	b.n	8003ec4 <DMA_CheckFifoParam+0xe8>
        break;
 8003eae:	bf00      	nop
 8003eb0:	e008      	b.n	8003ec4 <DMA_CheckFifoParam+0xe8>
        break;
 8003eb2:	bf00      	nop
 8003eb4:	e006      	b.n	8003ec4 <DMA_CheckFifoParam+0xe8>
        break;
 8003eb6:	bf00      	nop
 8003eb8:	e004      	b.n	8003ec4 <DMA_CheckFifoParam+0xe8>
        break;
 8003eba:	bf00      	nop
 8003ebc:	e002      	b.n	8003ec4 <DMA_CheckFifoParam+0xe8>
        break;
 8003ebe:	bf00      	nop
 8003ec0:	e000      	b.n	8003ec4 <DMA_CheckFifoParam+0xe8>
    break;
 8003ec2:	bf00      	nop
    }
  }

  return status;
 8003ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop

08003ed4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a38      	ldr	r2, [pc, #224]	; (8003fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d022      	beq.n	8003f32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a36      	ldr	r2, [pc, #216]	; (8003fcc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d01d      	beq.n	8003f32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a35      	ldr	r2, [pc, #212]	; (8003fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d018      	beq.n	8003f32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a33      	ldr	r2, [pc, #204]	; (8003fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d013      	beq.n	8003f32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a32      	ldr	r2, [pc, #200]	; (8003fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d00e      	beq.n	8003f32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a30      	ldr	r2, [pc, #192]	; (8003fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d009      	beq.n	8003f32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a2f      	ldr	r2, [pc, #188]	; (8003fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d004      	beq.n	8003f32 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a2d      	ldr	r2, [pc, #180]	; (8003fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d101      	bne.n	8003f36 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003f32:	2301      	movs	r3, #1
 8003f34:	e000      	b.n	8003f38 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003f36:	2300      	movs	r3, #0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d01a      	beq.n	8003f72 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	3b08      	subs	r3, #8
 8003f44:	4a28      	ldr	r2, [pc, #160]	; (8003fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003f46:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4a:	091b      	lsrs	r3, r3, #4
 8003f4c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	4b26      	ldr	r3, [pc, #152]	; (8003fec <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003f52:	4413      	add	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	461a      	mov	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a24      	ldr	r2, [pc, #144]	; (8003ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003f60:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f003 031f 	and.w	r3, r3, #31
 8003f68:	2201      	movs	r2, #1
 8003f6a:	409a      	lsls	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003f70:	e024      	b.n	8003fbc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	3b10      	subs	r3, #16
 8003f7a:	4a1e      	ldr	r2, [pc, #120]	; (8003ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f80:	091b      	lsrs	r3, r3, #4
 8003f82:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	4a1c      	ldr	r2, [pc, #112]	; (8003ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d806      	bhi.n	8003f9a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	4a1b      	ldr	r2, [pc, #108]	; (8003ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d902      	bls.n	8003f9a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	3308      	adds	r3, #8
 8003f98:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	4b18      	ldr	r3, [pc, #96]	; (8004000 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003f9e:	4413      	add	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a16      	ldr	r2, [pc, #88]	; (8004004 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003fac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f003 031f 	and.w	r3, r3, #31
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	409a      	lsls	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003fbc:	bf00      	nop
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	58025408 	.word	0x58025408
 8003fcc:	5802541c 	.word	0x5802541c
 8003fd0:	58025430 	.word	0x58025430
 8003fd4:	58025444 	.word	0x58025444
 8003fd8:	58025458 	.word	0x58025458
 8003fdc:	5802546c 	.word	0x5802546c
 8003fe0:	58025480 	.word	0x58025480
 8003fe4:	58025494 	.word	0x58025494
 8003fe8:	cccccccd 	.word	0xcccccccd
 8003fec:	16009600 	.word	0x16009600
 8003ff0:	58025880 	.word	0x58025880
 8003ff4:	aaaaaaab 	.word	0xaaaaaaab
 8003ff8:	400204b8 	.word	0x400204b8
 8003ffc:	4002040f 	.word	0x4002040f
 8004000:	10008200 	.word	0x10008200
 8004004:	40020880 	.word	0x40020880

08004008 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	b2db      	uxtb	r3, r3
 8004016:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d04a      	beq.n	80040b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2b08      	cmp	r3, #8
 8004022:	d847      	bhi.n	80040b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a25      	ldr	r2, [pc, #148]	; (80040c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d022      	beq.n	8004074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a24      	ldr	r2, [pc, #144]	; (80040c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d01d      	beq.n	8004074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a22      	ldr	r2, [pc, #136]	; (80040c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d018      	beq.n	8004074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a21      	ldr	r2, [pc, #132]	; (80040cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d013      	beq.n	8004074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a1f      	ldr	r2, [pc, #124]	; (80040d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d00e      	beq.n	8004074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a1e      	ldr	r2, [pc, #120]	; (80040d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d009      	beq.n	8004074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a1c      	ldr	r2, [pc, #112]	; (80040d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d004      	beq.n	8004074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a1b      	ldr	r2, [pc, #108]	; (80040dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d101      	bne.n	8004078 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004074:	2301      	movs	r3, #1
 8004076:	e000      	b.n	800407a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004078:	2300      	movs	r3, #0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00a      	beq.n	8004094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	4b17      	ldr	r3, [pc, #92]	; (80040e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004082:	4413      	add	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	461a      	mov	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a15      	ldr	r2, [pc, #84]	; (80040e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004090:	671a      	str	r2, [r3, #112]	; 0x70
 8004092:	e009      	b.n	80040a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4b14      	ldr	r3, [pc, #80]	; (80040e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004098:	4413      	add	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	461a      	mov	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a11      	ldr	r2, [pc, #68]	; (80040ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80040a6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	3b01      	subs	r3, #1
 80040ac:	2201      	movs	r2, #1
 80040ae:	409a      	lsls	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80040b4:	bf00      	nop
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	58025408 	.word	0x58025408
 80040c4:	5802541c 	.word	0x5802541c
 80040c8:	58025430 	.word	0x58025430
 80040cc:	58025444 	.word	0x58025444
 80040d0:	58025458 	.word	0x58025458
 80040d4:	5802546c 	.word	0x5802546c
 80040d8:	58025480 	.word	0x58025480
 80040dc:	58025494 	.word	0x58025494
 80040e0:	1600963f 	.word	0x1600963f
 80040e4:	58025940 	.word	0x58025940
 80040e8:	1000823f 	.word	0x1000823f
 80040ec:	40020940 	.word	0x40020940

080040f0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b098      	sub	sp, #96	; 0x60
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80040f8:	4a84      	ldr	r2, [pc, #528]	; (800430c <HAL_FDCAN_Init+0x21c>)
 80040fa:	f107 030c 	add.w	r3, r7, #12
 80040fe:	4611      	mov	r1, r2
 8004100:	224c      	movs	r2, #76	; 0x4c
 8004102:	4618      	mov	r0, r3
 8004104:	f00c fc68 	bl	80109d8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e1ca      	b.n	80044a8 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a7e      	ldr	r2, [pc, #504]	; (8004310 <HAL_FDCAN_Init+0x220>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d106      	bne.n	800412a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004124:	461a      	mov	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d106      	bne.n	8004144 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7fd f98a 	bl	8001458 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	699a      	ldr	r2, [r3, #24]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f022 0210 	bic.w	r2, r2, #16
 8004152:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004154:	f7fd fdaa 	bl	8001cac <HAL_GetTick>
 8004158:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800415a:	e014      	b.n	8004186 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800415c:	f7fd fda6 	bl	8001cac <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b0a      	cmp	r3, #10
 8004168:	d90d      	bls.n	8004186 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004170:	f043 0201 	orr.w	r2, r3, #1
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2203      	movs	r2, #3
 800417e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e190      	b.n	80044a8 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	f003 0308 	and.w	r3, r3, #8
 8004190:	2b08      	cmp	r3, #8
 8004192:	d0e3      	beq.n	800415c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699a      	ldr	r2, [r3, #24]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f042 0201 	orr.w	r2, r2, #1
 80041a2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041a4:	f7fd fd82 	bl	8001cac <HAL_GetTick>
 80041a8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80041aa:	e014      	b.n	80041d6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80041ac:	f7fd fd7e 	bl	8001cac <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b0a      	cmp	r3, #10
 80041b8:	d90d      	bls.n	80041d6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041c0:	f043 0201 	orr.w	r2, r3, #1
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2203      	movs	r2, #3
 80041ce:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e168      	b.n	80044a8 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0e3      	beq.n	80041ac <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	699a      	ldr	r2, [r3, #24]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0202 	orr.w	r2, r2, #2
 80041f2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	7c1b      	ldrb	r3, [r3, #16]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d108      	bne.n	800420e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	699a      	ldr	r2, [r3, #24]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800420a:	619a      	str	r2, [r3, #24]
 800420c:	e007      	b.n	800421e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	699a      	ldr	r2, [r3, #24]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800421c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	7c5b      	ldrb	r3, [r3, #17]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d108      	bne.n	8004238 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	699a      	ldr	r2, [r3, #24]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004234:	619a      	str	r2, [r3, #24]
 8004236:	e007      	b.n	8004248 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	699a      	ldr	r2, [r3, #24]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004246:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	7c9b      	ldrb	r3, [r3, #18]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d108      	bne.n	8004262 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	699a      	ldr	r2, [r3, #24]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800425e:	619a      	str	r2, [r3, #24]
 8004260:	e007      	b.n	8004272 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	699a      	ldr	r2, [r3, #24]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004270:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	430a      	orrs	r2, r1
 8004286:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	699a      	ldr	r2, [r3, #24]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004296:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	691a      	ldr	r2, [r3, #16]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f022 0210 	bic.w	r2, r2, #16
 80042a6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d108      	bne.n	80042c2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	699a      	ldr	r2, [r3, #24]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0204 	orr.w	r2, r2, #4
 80042be:	619a      	str	r2, [r3, #24]
 80042c0:	e030      	b.n	8004324 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d02c      	beq.n	8004324 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d020      	beq.n	8004314 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	699a      	ldr	r2, [r3, #24]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80042e0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	691a      	ldr	r2, [r3, #16]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f042 0210 	orr.w	r2, r2, #16
 80042f0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	2b03      	cmp	r3, #3
 80042f8:	d114      	bne.n	8004324 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	699a      	ldr	r2, [r3, #24]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f042 0220 	orr.w	r2, r2, #32
 8004308:	619a      	str	r2, [r3, #24]
 800430a:	e00b      	b.n	8004324 <HAL_FDCAN_Init+0x234>
 800430c:	08011c54 	.word	0x08011c54
 8004310:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699a      	ldr	r2, [r3, #24]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0220 	orr.w	r2, r2, #32
 8004322:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	3b01      	subs	r3, #1
 800432a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	69db      	ldr	r3, [r3, #28]
 8004330:	3b01      	subs	r3, #1
 8004332:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004334:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800433c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	3b01      	subs	r3, #1
 8004346:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800434c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800434e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004358:	d115      	bne.n	8004386 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800435e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004364:	3b01      	subs	r3, #1
 8004366:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004368:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436e:	3b01      	subs	r3, #1
 8004370:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004372:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	3b01      	subs	r3, #1
 800437c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004382:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004384:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00a      	beq.n	80043a4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ac:	4413      	add	r3, r2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d012      	beq.n	80043d8 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80043ba:	f023 0107 	bic.w	r1, r3, #7
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80043c8:	4413      	add	r3, r2
 80043ca:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d012      	beq.n	8004406 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80043e8:	f023 0107 	bic.w	r1, r3, #7
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80043f6:	4413      	add	r3, r2
 80043f8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	430a      	orrs	r2, r1
 8004402:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800440a:	2b00      	cmp	r3, #0
 800440c:	d013      	beq.n	8004436 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004416:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004424:	4413      	add	r3, r2
 8004426:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800442a:	011a      	lsls	r2, r3, #4
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	430a      	orrs	r2, r1
 8004432:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800443a:	2b00      	cmp	r3, #0
 800443c:	d013      	beq.n	8004466 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004446:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004454:	4413      	add	r3, r2
 8004456:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800445a:	021a      	lsls	r2, r3, #8
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a11      	ldr	r2, [pc, #68]	; (80044b0 <HAL_FDCAN_Init+0x3c0>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d107      	bne.n	8004480 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f022 0203 	bic.w	r2, r2, #3
 800447e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 f80b 	bl	80044b4 <FDCAN_CalcultateRamBlockAddresses>
 800449e:	4603      	mov	r3, r0
 80044a0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80044a4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3760      	adds	r7, #96	; 0x60
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	4000a000 	.word	0x4000a000

080044b4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80044ca:	4ba7      	ldr	r3, [pc, #668]	; (8004768 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80044cc:	4013      	ands	r3, r2
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	0091      	lsls	r1, r2, #2
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	6812      	ldr	r2, [r2, #0]
 80044d6:	430b      	orrs	r3, r1
 80044d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044e4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ec:	041a      	lsls	r2, r3, #16
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	430a      	orrs	r2, r1
 80044f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	4413      	add	r3, r2
 8004500:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800450a:	4b97      	ldr	r3, [pc, #604]	; (8004768 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800450c:	4013      	ands	r3, r2
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	0091      	lsls	r1, r2, #2
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	6812      	ldr	r2, [r2, #0]
 8004516:	430b      	orrs	r3, r1
 8004518:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004524:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800452c:	041a      	lsls	r2, r3, #16
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	430a      	orrs	r2, r1
 8004534:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	4413      	add	r3, r2
 8004542:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800454c:	4b86      	ldr	r3, [pc, #536]	; (8004768 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800454e:	4013      	ands	r3, r2
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	0091      	lsls	r1, r2, #2
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	6812      	ldr	r2, [r2, #0]
 8004558:	430b      	orrs	r3, r1
 800455a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004566:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	041a      	lsls	r2, r3, #16
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	430a      	orrs	r2, r1
 8004576:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004582:	fb02 f303 	mul.w	r3, r2, r3
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	4413      	add	r3, r2
 800458a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004594:	4b74      	ldr	r3, [pc, #464]	; (8004768 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004596:	4013      	ands	r3, r2
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	0091      	lsls	r1, r2, #2
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	6812      	ldr	r2, [r2, #0]
 80045a0:	430b      	orrs	r3, r1
 80045a2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045ae:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045b6:	041a      	lsls	r2, r3, #16
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80045ca:	fb02 f303 	mul.w	r3, r2, r3
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	4413      	add	r3, r2
 80045d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80045dc:	4b62      	ldr	r3, [pc, #392]	; (8004768 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80045de:	4013      	ands	r3, r2
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	0091      	lsls	r1, r2, #2
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	6812      	ldr	r2, [r2, #0]
 80045e8:	430b      	orrs	r3, r1
 80045ea:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80045f6:	fb02 f303 	mul.w	r3, r2, r3
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	4413      	add	r3, r2
 80045fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004608:	4b57      	ldr	r3, [pc, #348]	; (8004768 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800460a:	4013      	ands	r3, r2
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	0091      	lsls	r1, r2, #2
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6812      	ldr	r2, [r2, #0]
 8004614:	430b      	orrs	r3, r1
 8004616:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004622:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800462a:	041a      	lsls	r2, r3, #16
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	4413      	add	r3, r2
 8004640:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800464a:	4b47      	ldr	r3, [pc, #284]	; (8004768 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800464c:	4013      	ands	r3, r2
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	0091      	lsls	r1, r2, #2
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	6812      	ldr	r2, [r2, #0]
 8004656:	430b      	orrs	r3, r1
 8004658:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004664:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466c:	041a      	lsls	r2, r3, #16
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004680:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004688:	061a      	lsls	r2, r3, #24
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004698:	4b34      	ldr	r3, [pc, #208]	; (800476c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800469a:	4413      	add	r3, r2
 800469c:	009a      	lsls	r2, r3, #2
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	441a      	add	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	441a      	add	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	6879      	ldr	r1, [r7, #4]
 80046cc:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80046ce:	fb01 f303 	mul.w	r3, r1, r3
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	441a      	add	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e2:	6879      	ldr	r1, [r7, #4]
 80046e4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80046e6:	fb01 f303 	mul.w	r3, r1, r3
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	441a      	add	r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046fa:	6879      	ldr	r1, [r7, #4]
 80046fc:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80046fe:	fb01 f303 	mul.w	r3, r1, r3
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	441a      	add	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	441a      	add	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800472e:	fb01 f303 	mul.w	r3, r1, r3
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	441a      	add	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004746:	6879      	ldr	r1, [r7, #4]
 8004748:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800474a:	fb01 f303 	mul.w	r3, r1, r3
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	441a      	add	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475e:	4a04      	ldr	r2, [pc, #16]	; (8004770 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d915      	bls.n	8004790 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004764:	e006      	b.n	8004774 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004766:	bf00      	nop
 8004768:	ffff0003 	.word	0xffff0003
 800476c:	10002b00 	.word	0x10002b00
 8004770:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800477a:	f043 0220 	orr.w	r2, r3, #32
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2203      	movs	r2, #3
 8004788:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e010      	b.n	80047b2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004794:	60fb      	str	r3, [r7, #12]
 8004796:	e005      	b.n	80047a4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	3304      	adds	r3, #4
 80047a2:	60fb      	str	r3, [r7, #12]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d3f3      	bcc.n	8004798 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3714      	adds	r7, #20
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop

080047c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b089      	sub	sp, #36	; 0x24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80047ce:	4b89      	ldr	r3, [pc, #548]	; (80049f4 <HAL_GPIO_Init+0x234>)
 80047d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80047d2:	e194      	b.n	8004afe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	2101      	movs	r1, #1
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	fa01 f303 	lsl.w	r3, r1, r3
 80047e0:	4013      	ands	r3, r2
 80047e2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f000 8186 	beq.w	8004af8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d00b      	beq.n	800480c <HAL_GPIO_Init+0x4c>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d007      	beq.n	800480c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004800:	2b11      	cmp	r3, #17
 8004802:	d003      	beq.n	800480c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	2b12      	cmp	r3, #18
 800480a:	d130      	bne.n	800486e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	2203      	movs	r2, #3
 8004818:	fa02 f303 	lsl.w	r3, r2, r3
 800481c:	43db      	mvns	r3, r3
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	4013      	ands	r3, r2
 8004822:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	68da      	ldr	r2, [r3, #12]
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	005b      	lsls	r3, r3, #1
 800482c:	fa02 f303 	lsl.w	r3, r2, r3
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	4313      	orrs	r3, r2
 8004834:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	69ba      	ldr	r2, [r7, #24]
 800483a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004842:	2201      	movs	r2, #1
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	fa02 f303 	lsl.w	r3, r2, r3
 800484a:	43db      	mvns	r3, r3
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	4013      	ands	r3, r2
 8004850:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	091b      	lsrs	r3, r3, #4
 8004858:	f003 0201 	and.w	r2, r3, #1
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	fa02 f303 	lsl.w	r3, r2, r3
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	4313      	orrs	r3, r2
 8004866:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	2203      	movs	r2, #3
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	43db      	mvns	r3, r3
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	4013      	ands	r3, r2
 8004884:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	689a      	ldr	r2, [r3, #8]
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	4313      	orrs	r3, r2
 8004896:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d003      	beq.n	80048ae <HAL_GPIO_Init+0xee>
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2b12      	cmp	r3, #18
 80048ac:	d123      	bne.n	80048f6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	08da      	lsrs	r2, r3, #3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	3208      	adds	r2, #8
 80048b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	f003 0307 	and.w	r3, r3, #7
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	220f      	movs	r2, #15
 80048c6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ca:	43db      	mvns	r3, r3
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	4013      	ands	r3, r2
 80048d0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	691a      	ldr	r2, [r3, #16]
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	f003 0307 	and.w	r3, r3, #7
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	fa02 f303 	lsl.w	r3, r2, r3
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	08da      	lsrs	r2, r3, #3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	3208      	adds	r2, #8
 80048f0:	69b9      	ldr	r1, [r7, #24]
 80048f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	2203      	movs	r2, #3
 8004902:	fa02 f303 	lsl.w	r3, r2, r3
 8004906:	43db      	mvns	r3, r3
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	4013      	ands	r3, r2
 800490c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f003 0203 	and.w	r2, r3, #3
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	fa02 f303 	lsl.w	r3, r2, r3
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	4313      	orrs	r3, r2
 8004922:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 80e0 	beq.w	8004af8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004938:	4b2f      	ldr	r3, [pc, #188]	; (80049f8 <HAL_GPIO_Init+0x238>)
 800493a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800493e:	4a2e      	ldr	r2, [pc, #184]	; (80049f8 <HAL_GPIO_Init+0x238>)
 8004940:	f043 0302 	orr.w	r3, r3, #2
 8004944:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004948:	4b2b      	ldr	r3, [pc, #172]	; (80049f8 <HAL_GPIO_Init+0x238>)
 800494a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	60fb      	str	r3, [r7, #12]
 8004954:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004956:	4a29      	ldr	r2, [pc, #164]	; (80049fc <HAL_GPIO_Init+0x23c>)
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	089b      	lsrs	r3, r3, #2
 800495c:	3302      	adds	r3, #2
 800495e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004962:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	f003 0303 	and.w	r3, r3, #3
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	220f      	movs	r2, #15
 800496e:	fa02 f303 	lsl.w	r3, r2, r3
 8004972:	43db      	mvns	r3, r3
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	4013      	ands	r3, r2
 8004978:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a20      	ldr	r2, [pc, #128]	; (8004a00 <HAL_GPIO_Init+0x240>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d052      	beq.n	8004a28 <HAL_GPIO_Init+0x268>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a1f      	ldr	r2, [pc, #124]	; (8004a04 <HAL_GPIO_Init+0x244>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d031      	beq.n	80049ee <HAL_GPIO_Init+0x22e>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a1e      	ldr	r2, [pc, #120]	; (8004a08 <HAL_GPIO_Init+0x248>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d02b      	beq.n	80049ea <HAL_GPIO_Init+0x22a>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a1d      	ldr	r2, [pc, #116]	; (8004a0c <HAL_GPIO_Init+0x24c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d025      	beq.n	80049e6 <HAL_GPIO_Init+0x226>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a1c      	ldr	r2, [pc, #112]	; (8004a10 <HAL_GPIO_Init+0x250>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d01f      	beq.n	80049e2 <HAL_GPIO_Init+0x222>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a1b      	ldr	r2, [pc, #108]	; (8004a14 <HAL_GPIO_Init+0x254>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d019      	beq.n	80049de <HAL_GPIO_Init+0x21e>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a1a      	ldr	r2, [pc, #104]	; (8004a18 <HAL_GPIO_Init+0x258>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d013      	beq.n	80049da <HAL_GPIO_Init+0x21a>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a19      	ldr	r2, [pc, #100]	; (8004a1c <HAL_GPIO_Init+0x25c>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d00d      	beq.n	80049d6 <HAL_GPIO_Init+0x216>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a18      	ldr	r2, [pc, #96]	; (8004a20 <HAL_GPIO_Init+0x260>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d007      	beq.n	80049d2 <HAL_GPIO_Init+0x212>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a17      	ldr	r2, [pc, #92]	; (8004a24 <HAL_GPIO_Init+0x264>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d101      	bne.n	80049ce <HAL_GPIO_Init+0x20e>
 80049ca:	2309      	movs	r3, #9
 80049cc:	e02d      	b.n	8004a2a <HAL_GPIO_Init+0x26a>
 80049ce:	230a      	movs	r3, #10
 80049d0:	e02b      	b.n	8004a2a <HAL_GPIO_Init+0x26a>
 80049d2:	2308      	movs	r3, #8
 80049d4:	e029      	b.n	8004a2a <HAL_GPIO_Init+0x26a>
 80049d6:	2307      	movs	r3, #7
 80049d8:	e027      	b.n	8004a2a <HAL_GPIO_Init+0x26a>
 80049da:	2306      	movs	r3, #6
 80049dc:	e025      	b.n	8004a2a <HAL_GPIO_Init+0x26a>
 80049de:	2305      	movs	r3, #5
 80049e0:	e023      	b.n	8004a2a <HAL_GPIO_Init+0x26a>
 80049e2:	2304      	movs	r3, #4
 80049e4:	e021      	b.n	8004a2a <HAL_GPIO_Init+0x26a>
 80049e6:	2303      	movs	r3, #3
 80049e8:	e01f      	b.n	8004a2a <HAL_GPIO_Init+0x26a>
 80049ea:	2302      	movs	r3, #2
 80049ec:	e01d      	b.n	8004a2a <HAL_GPIO_Init+0x26a>
 80049ee:	2301      	movs	r3, #1
 80049f0:	e01b      	b.n	8004a2a <HAL_GPIO_Init+0x26a>
 80049f2:	bf00      	nop
 80049f4:	58000080 	.word	0x58000080
 80049f8:	58024400 	.word	0x58024400
 80049fc:	58000400 	.word	0x58000400
 8004a00:	58020000 	.word	0x58020000
 8004a04:	58020400 	.word	0x58020400
 8004a08:	58020800 	.word	0x58020800
 8004a0c:	58020c00 	.word	0x58020c00
 8004a10:	58021000 	.word	0x58021000
 8004a14:	58021400 	.word	0x58021400
 8004a18:	58021800 	.word	0x58021800
 8004a1c:	58021c00 	.word	0x58021c00
 8004a20:	58022000 	.word	0x58022000
 8004a24:	58022400 	.word	0x58022400
 8004a28:	2300      	movs	r3, #0
 8004a2a:	69fa      	ldr	r2, [r7, #28]
 8004a2c:	f002 0203 	and.w	r2, r2, #3
 8004a30:	0092      	lsls	r2, r2, #2
 8004a32:	4093      	lsls	r3, r2
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a3a:	4938      	ldr	r1, [pc, #224]	; (8004b1c <HAL_GPIO_Init+0x35c>)
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	089b      	lsrs	r3, r3, #2
 8004a40:	3302      	adds	r3, #2
 8004a42:	69ba      	ldr	r2, [r7, #24]
 8004a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	43db      	mvns	r3, r3
 8004a52:	69ba      	ldr	r2, [r7, #24]
 8004a54:	4013      	ands	r3, r2
 8004a56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d003      	beq.n	8004a6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	69ba      	ldr	r2, [r7, #24]
 8004a70:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	43db      	mvns	r3, r3
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	4013      	ands	r3, r2
 8004a80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	43db      	mvns	r3, r3
 8004aa8:	69ba      	ldr	r2, [r7, #24]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004aba:	69ba      	ldr	r2, [r7, #24]
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004ac2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	43db      	mvns	r3, r3
 8004ad6:	69ba      	ldr	r2, [r7, #24]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d003      	beq.n	8004af0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004af0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	3301      	adds	r3, #1
 8004afc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	fa22 f303 	lsr.w	r3, r2, r3
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f47f ae63 	bne.w	80047d4 <HAL_GPIO_Init+0x14>
  }
}
 8004b0e:	bf00      	nop
 8004b10:	3724      	adds	r7, #36	; 0x24
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	58000400 	.word	0x58000400

08004b20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	460b      	mov	r3, r1
 8004b2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	691a      	ldr	r2, [r3, #16]
 8004b30:	887b      	ldrh	r3, [r7, #2]
 8004b32:	4013      	ands	r3, r2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	73fb      	strb	r3, [r7, #15]
 8004b3c:	e001      	b.n	8004b42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	460b      	mov	r3, r1
 8004b5a:	807b      	strh	r3, [r7, #2]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b60:	787b      	ldrb	r3, [r7, #1]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b66:	887a      	ldrh	r2, [r7, #2]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004b6c:	e003      	b.n	8004b76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004b6e:	887b      	ldrh	r3, [r7, #2]
 8004b70:	041a      	lsls	r2, r3, #16
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	619a      	str	r2, [r3, #24]
}
 8004b76:	bf00      	nop
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b083      	sub	sp, #12
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	695a      	ldr	r2, [r3, #20]
 8004b92:	887b      	ldrh	r3, [r7, #2]
 8004b94:	401a      	ands	r2, r3
 8004b96:	887b      	ldrh	r3, [r7, #2]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d104      	bne.n	8004ba6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004b9c:	887b      	ldrh	r3, [r7, #2]
 8004b9e:	041a      	lsls	r2, r3, #16
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004ba4:	e002      	b.n	8004bac <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004ba6:	887a      	ldrh	r2, [r7, #2]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	619a      	str	r2, [r3, #24]
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bc6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004bca:	88fb      	ldrh	r3, [r7, #6]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d008      	beq.n	8004be4 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004bd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bd6:	88fb      	ldrh	r3, [r7, #6]
 8004bd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004bdc:	88fb      	ldrh	r3, [r7, #6]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7fc fbd8 	bl	8001394 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004be4:	bf00      	nop
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bee:	b08f      	sub	sp, #60	; 0x3c
 8004bf0:	af0a      	add	r7, sp, #40	; 0x28
 8004bf2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d101      	bne.n	8004bfe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e116      	b.n	8004e2c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d106      	bne.n	8004c1e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f00b fba5 	bl	8010368 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2203      	movs	r2, #3
 8004c22:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d102      	bne.n	8004c38 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f008 f9d6 	bl	800cfee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	603b      	str	r3, [r7, #0]
 8004c48:	687e      	ldr	r6, [r7, #4]
 8004c4a:	466d      	mov	r5, sp
 8004c4c:	f106 0410 	add.w	r4, r6, #16
 8004c50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004c5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004c60:	1d33      	adds	r3, r6, #4
 8004c62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c64:	6838      	ldr	r0, [r7, #0]
 8004c66:	f008 f8ad 	bl	800cdc4 <USB_CoreInit>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d005      	beq.n	8004c7c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2202      	movs	r2, #2
 8004c74:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e0d7      	b.n	8004e2c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2100      	movs	r1, #0
 8004c82:	4618      	mov	r0, r3
 8004c84:	f008 f9c4 	bl	800d010 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c88:	2300      	movs	r3, #0
 8004c8a:	73fb      	strb	r3, [r7, #15]
 8004c8c:	e04a      	b.n	8004d24 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004c8e:	7bfa      	ldrb	r2, [r7, #15]
 8004c90:	6879      	ldr	r1, [r7, #4]
 8004c92:	4613      	mov	r3, r2
 8004c94:	00db      	lsls	r3, r3, #3
 8004c96:	1a9b      	subs	r3, r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	440b      	add	r3, r1
 8004c9c:	333d      	adds	r3, #61	; 0x3d
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004ca2:	7bfa      	ldrb	r2, [r7, #15]
 8004ca4:	6879      	ldr	r1, [r7, #4]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	00db      	lsls	r3, r3, #3
 8004caa:	1a9b      	subs	r3, r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	440b      	add	r3, r1
 8004cb0:	333c      	adds	r3, #60	; 0x3c
 8004cb2:	7bfa      	ldrb	r2, [r7, #15]
 8004cb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004cb6:	7bfa      	ldrb	r2, [r7, #15]
 8004cb8:	7bfb      	ldrb	r3, [r7, #15]
 8004cba:	b298      	uxth	r0, r3
 8004cbc:	6879      	ldr	r1, [r7, #4]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	00db      	lsls	r3, r3, #3
 8004cc2:	1a9b      	subs	r3, r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	440b      	add	r3, r1
 8004cc8:	3342      	adds	r3, #66	; 0x42
 8004cca:	4602      	mov	r2, r0
 8004ccc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004cce:	7bfa      	ldrb	r2, [r7, #15]
 8004cd0:	6879      	ldr	r1, [r7, #4]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	00db      	lsls	r3, r3, #3
 8004cd6:	1a9b      	subs	r3, r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	440b      	add	r3, r1
 8004cdc:	333f      	adds	r3, #63	; 0x3f
 8004cde:	2200      	movs	r2, #0
 8004ce0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004ce2:	7bfa      	ldrb	r2, [r7, #15]
 8004ce4:	6879      	ldr	r1, [r7, #4]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	00db      	lsls	r3, r3, #3
 8004cea:	1a9b      	subs	r3, r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	440b      	add	r3, r1
 8004cf0:	3344      	adds	r3, #68	; 0x44
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004cf6:	7bfa      	ldrb	r2, [r7, #15]
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	00db      	lsls	r3, r3, #3
 8004cfe:	1a9b      	subs	r3, r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	440b      	add	r3, r1
 8004d04:	3348      	adds	r3, #72	; 0x48
 8004d06:	2200      	movs	r2, #0
 8004d08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004d0a:	7bfa      	ldrb	r2, [r7, #15]
 8004d0c:	6879      	ldr	r1, [r7, #4]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	00db      	lsls	r3, r3, #3
 8004d12:	1a9b      	subs	r3, r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	440b      	add	r3, r1
 8004d18:	3350      	adds	r3, #80	; 0x50
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
 8004d20:	3301      	adds	r3, #1
 8004d22:	73fb      	strb	r3, [r7, #15]
 8004d24:	7bfa      	ldrb	r2, [r7, #15]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d3af      	bcc.n	8004c8e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d2e:	2300      	movs	r3, #0
 8004d30:	73fb      	strb	r3, [r7, #15]
 8004d32:	e044      	b.n	8004dbe <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004d34:	7bfa      	ldrb	r2, [r7, #15]
 8004d36:	6879      	ldr	r1, [r7, #4]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	1a9b      	subs	r3, r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	440b      	add	r3, r1
 8004d42:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004d46:	2200      	movs	r2, #0
 8004d48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004d4a:	7bfa      	ldrb	r2, [r7, #15]
 8004d4c:	6879      	ldr	r1, [r7, #4]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	00db      	lsls	r3, r3, #3
 8004d52:	1a9b      	subs	r3, r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	440b      	add	r3, r1
 8004d58:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004d5c:	7bfa      	ldrb	r2, [r7, #15]
 8004d5e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004d60:	7bfa      	ldrb	r2, [r7, #15]
 8004d62:	6879      	ldr	r1, [r7, #4]
 8004d64:	4613      	mov	r3, r2
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	1a9b      	subs	r3, r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	440b      	add	r3, r1
 8004d6e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004d72:	2200      	movs	r2, #0
 8004d74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004d76:	7bfa      	ldrb	r2, [r7, #15]
 8004d78:	6879      	ldr	r1, [r7, #4]
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	00db      	lsls	r3, r3, #3
 8004d7e:	1a9b      	subs	r3, r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	440b      	add	r3, r1
 8004d84:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004d8c:	7bfa      	ldrb	r2, [r7, #15]
 8004d8e:	6879      	ldr	r1, [r7, #4]
 8004d90:	4613      	mov	r3, r2
 8004d92:	00db      	lsls	r3, r3, #3
 8004d94:	1a9b      	subs	r3, r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	440b      	add	r3, r1
 8004d9a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004d9e:	2200      	movs	r2, #0
 8004da0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004da2:	7bfa      	ldrb	r2, [r7, #15]
 8004da4:	6879      	ldr	r1, [r7, #4]
 8004da6:	4613      	mov	r3, r2
 8004da8:	00db      	lsls	r3, r3, #3
 8004daa:	1a9b      	subs	r3, r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	440b      	add	r3, r1
 8004db0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004db4:	2200      	movs	r2, #0
 8004db6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004db8:	7bfb      	ldrb	r3, [r7, #15]
 8004dba:	3301      	adds	r3, #1
 8004dbc:	73fb      	strb	r3, [r7, #15]
 8004dbe:	7bfa      	ldrb	r2, [r7, #15]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d3b5      	bcc.n	8004d34 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	603b      	str	r3, [r7, #0]
 8004dce:	687e      	ldr	r6, [r7, #4]
 8004dd0:	466d      	mov	r5, sp
 8004dd2:	f106 0410 	add.w	r4, r6, #16
 8004dd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004dd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004dda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ddc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004dde:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004de2:	e885 0003 	stmia.w	r5, {r0, r1}
 8004de6:	1d33      	adds	r3, r6, #4
 8004de8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004dea:	6838      	ldr	r0, [r7, #0]
 8004dec:	f008 f93a 	bl	800d064 <USB_DevInit>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d005      	beq.n	8004e02 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2202      	movs	r2, #2
 8004dfa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e014      	b.n	8004e2c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d102      	bne.n	8004e20 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f001 f892 	bl	8005f44 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f009 f979 	bl	800e11c <USB_DevDisconnect>

  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3714      	adds	r7, #20
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e34 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d101      	bne.n	8004e50 <HAL_PCD_Start+0x1c>
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	e020      	b.n	8004e92 <HAL_PCD_Start+0x5e>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d109      	bne.n	8004e74 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d005      	beq.n	8004e74 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f009 f937 	bl	800e0ec <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f008 f8a2 	bl	800cfcc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004e9a:	b590      	push	{r4, r7, lr}
 8004e9c:	b08d      	sub	sp, #52	; 0x34
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
 8004eaa:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f009 f9de 	bl	800e272 <USB_GetMode>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f040 83ca 	bne.w	8005652 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f009 f942 	bl	800e14c <USB_ReadInterrupts>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	f000 83c0 	beq.w	8005650 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f009 f939 	bl	800e14c <USB_ReadInterrupts>
 8004eda:	4603      	mov	r3, r0
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d107      	bne.n	8004ef4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	695a      	ldr	r2, [r3, #20]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f002 0202 	and.w	r2, r2, #2
 8004ef2:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f009 f927 	bl	800e14c <USB_ReadInterrupts>
 8004efe:	4603      	mov	r3, r0
 8004f00:	f003 0310 	and.w	r3, r3, #16
 8004f04:	2b10      	cmp	r3, #16
 8004f06:	d161      	bne.n	8004fcc <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	699a      	ldr	r2, [r3, #24]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f022 0210 	bic.w	r2, r2, #16
 8004f16:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004f18:	6a3b      	ldr	r3, [r7, #32]
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	f003 020f 	and.w	r2, r3, #15
 8004f24:	4613      	mov	r3, r2
 8004f26:	00db      	lsls	r3, r3, #3
 8004f28:	1a9b      	subs	r3, r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	4413      	add	r3, r2
 8004f34:	3304      	adds	r3, #4
 8004f36:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	0c5b      	lsrs	r3, r3, #17
 8004f3c:	f003 030f 	and.w	r3, r3, #15
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d124      	bne.n	8004f8e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d035      	beq.n	8004fbc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	091b      	lsrs	r3, r3, #4
 8004f58:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004f5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	461a      	mov	r2, r3
 8004f62:	6a38      	ldr	r0, [r7, #32]
 8004f64:	f008 ff9f 	bl	800dea6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	68da      	ldr	r2, [r3, #12]
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	091b      	lsrs	r3, r3, #4
 8004f70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f74:	441a      	add	r2, r3
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	699a      	ldr	r2, [r3, #24]
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	091b      	lsrs	r3, r3, #4
 8004f82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f86:	441a      	add	r2, r3
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	619a      	str	r2, [r3, #24]
 8004f8c:	e016      	b.n	8004fbc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	0c5b      	lsrs	r3, r3, #17
 8004f92:	f003 030f 	and.w	r3, r3, #15
 8004f96:	2b06      	cmp	r3, #6
 8004f98:	d110      	bne.n	8004fbc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004fa0:	2208      	movs	r2, #8
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	6a38      	ldr	r0, [r7, #32]
 8004fa6:	f008 ff7e 	bl	800dea6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	699a      	ldr	r2, [r3, #24]
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	091b      	lsrs	r3, r3, #4
 8004fb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004fb6:	441a      	add	r2, r3
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	699a      	ldr	r2, [r3, #24]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f042 0210 	orr.w	r2, r2, #16
 8004fca:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f009 f8bb 	bl	800e14c <USB_ReadInterrupts>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fdc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004fe0:	d16e      	bne.n	80050c0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f009 f8c1 	bl	800e172 <USB_ReadDevAllOutEpInterrupt>
 8004ff0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004ff2:	e062      	b.n	80050ba <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d057      	beq.n	80050ae <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005004:	b2d2      	uxtb	r2, r2
 8005006:	4611      	mov	r1, r2
 8005008:	4618      	mov	r0, r3
 800500a:	f009 f8e6 	bl	800e1da <USB_ReadDevOutEPInterrupt>
 800500e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00c      	beq.n	8005034 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800501a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	4413      	add	r3, r2
 8005022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005026:	461a      	mov	r2, r3
 8005028:	2301      	movs	r3, #1
 800502a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800502c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 fdde 	bl	8005bf0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	f003 0308 	and.w	r3, r3, #8
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00c      	beq.n	8005058 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800503e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005040:	015a      	lsls	r2, r3, #5
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	4413      	add	r3, r2
 8005046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800504a:	461a      	mov	r2, r3
 800504c:	2308      	movs	r3, #8
 800504e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005050:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 fed8 	bl	8005e08 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	f003 0310 	and.w	r3, r3, #16
 800505e:	2b00      	cmp	r3, #0
 8005060:	d008      	beq.n	8005074 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005064:	015a      	lsls	r2, r3, #5
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	4413      	add	r3, r2
 800506a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800506e:	461a      	mov	r2, r3
 8005070:	2310      	movs	r3, #16
 8005072:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	f003 0320 	and.w	r3, r3, #32
 800507a:	2b00      	cmp	r3, #0
 800507c:	d008      	beq.n	8005090 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	015a      	lsls	r2, r3, #5
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	4413      	add	r3, r2
 8005086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800508a:	461a      	mov	r2, r3
 800508c:	2320      	movs	r3, #32
 800508e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d009      	beq.n	80050ae <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800509a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509c:	015a      	lsls	r2, r3, #5
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	4413      	add	r3, r2
 80050a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a6:	461a      	mov	r2, r3
 80050a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80050ac:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	3301      	adds	r3, #1
 80050b2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80050b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b6:	085b      	lsrs	r3, r3, #1
 80050b8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80050ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d199      	bne.n	8004ff4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f009 f841 	bl	800e14c <USB_ReadInterrupts>
 80050ca:	4603      	mov	r3, r0
 80050cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80050d4:	f040 80c0 	bne.w	8005258 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4618      	mov	r0, r3
 80050de:	f009 f862 	bl	800e1a6 <USB_ReadDevAllInEpInterrupt>
 80050e2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80050e4:	2300      	movs	r3, #0
 80050e6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80050e8:	e0b2      	b.n	8005250 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80050ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f000 80a7 	beq.w	8005244 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050fc:	b2d2      	uxtb	r2, r2
 80050fe:	4611      	mov	r1, r2
 8005100:	4618      	mov	r0, r3
 8005102:	f009 f888 	bl	800e216 <USB_ReadDevInEPInterrupt>
 8005106:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b00      	cmp	r3, #0
 8005110:	d057      	beq.n	80051c2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	f003 030f 	and.w	r3, r3, #15
 8005118:	2201      	movs	r2, #1
 800511a:	fa02 f303 	lsl.w	r3, r2, r3
 800511e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005126:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	43db      	mvns	r3, r3
 800512c:	69f9      	ldr	r1, [r7, #28]
 800512e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005132:	4013      	ands	r3, r2
 8005134:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005138:	015a      	lsls	r2, r3, #5
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	4413      	add	r3, r2
 800513e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005142:	461a      	mov	r2, r3
 8005144:	2301      	movs	r3, #1
 8005146:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d132      	bne.n	80051b6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005150:	6879      	ldr	r1, [r7, #4]
 8005152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005154:	4613      	mov	r3, r2
 8005156:	00db      	lsls	r3, r3, #3
 8005158:	1a9b      	subs	r3, r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	440b      	add	r3, r1
 800515e:	3348      	adds	r3, #72	; 0x48
 8005160:	6819      	ldr	r1, [r3, #0]
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005166:	4613      	mov	r3, r2
 8005168:	00db      	lsls	r3, r3, #3
 800516a:	1a9b      	subs	r3, r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4403      	add	r3, r0
 8005170:	3344      	adds	r3, #68	; 0x44
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4419      	add	r1, r3
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800517a:	4613      	mov	r3, r2
 800517c:	00db      	lsls	r3, r3, #3
 800517e:	1a9b      	subs	r3, r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4403      	add	r3, r0
 8005184:	3348      	adds	r3, #72	; 0x48
 8005186:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518a:	2b00      	cmp	r3, #0
 800518c:	d113      	bne.n	80051b6 <HAL_PCD_IRQHandler+0x31c>
 800518e:	6879      	ldr	r1, [r7, #4]
 8005190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005192:	4613      	mov	r3, r2
 8005194:	00db      	lsls	r3, r3, #3
 8005196:	1a9b      	subs	r3, r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	440b      	add	r3, r1
 800519c:	3350      	adds	r3, #80	; 0x50
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d108      	bne.n	80051b6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6818      	ldr	r0, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80051ae:	461a      	mov	r2, r3
 80051b0:	2101      	movs	r1, #1
 80051b2:	f009 f891 	bl	800e2d8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80051b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	4619      	mov	r1, r3
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f00b f952 	bl	8010466 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	f003 0308 	and.w	r3, r3, #8
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d008      	beq.n	80051de <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	015a      	lsls	r2, r3, #5
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	4413      	add	r3, r2
 80051d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d8:	461a      	mov	r2, r3
 80051da:	2308      	movs	r3, #8
 80051dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	f003 0310 	and.w	r3, r3, #16
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d008      	beq.n	80051fa <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f4:	461a      	mov	r2, r3
 80051f6:	2310      	movs	r3, #16
 80051f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005200:	2b00      	cmp	r3, #0
 8005202:	d008      	beq.n	8005216 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	4413      	add	r3, r2
 800520c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005210:	461a      	mov	r2, r3
 8005212:	2340      	movs	r3, #64	; 0x40
 8005214:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	f003 0302 	and.w	r3, r3, #2
 800521c:	2b00      	cmp	r3, #0
 800521e:	d008      	beq.n	8005232 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800522c:	461a      	mov	r2, r3
 800522e:	2302      	movs	r3, #2
 8005230:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005238:	2b00      	cmp	r3, #0
 800523a:	d003      	beq.n	8005244 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800523c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 fc48 	bl	8005ad4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005246:	3301      	adds	r3, #1
 8005248:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800524a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524c:	085b      	lsrs	r3, r3, #1
 800524e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005252:	2b00      	cmp	r3, #0
 8005254:	f47f af49 	bne.w	80050ea <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4618      	mov	r0, r3
 800525e:	f008 ff75 	bl	800e14c <USB_ReadInterrupts>
 8005262:	4603      	mov	r3, r0
 8005264:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005268:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800526c:	d122      	bne.n	80052b4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	69fa      	ldr	r2, [r7, #28]
 8005278:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800527c:	f023 0301 	bic.w	r3, r3, #1
 8005280:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005288:	2b01      	cmp	r3, #1
 800528a:	d108      	bne.n	800529e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005294:	2100      	movs	r1, #0
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 fe78 	bl	8005f8c <HAL_PCDEx_LPM_Callback>
 800529c:	e002      	b.n	80052a4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f00b f958 	bl	8010554 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	695a      	ldr	r2, [r3, #20]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80052b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4618      	mov	r0, r3
 80052ba:	f008 ff47 	bl	800e14c <USB_ReadInterrupts>
 80052be:	4603      	mov	r3, r0
 80052c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052c8:	d112      	bne.n	80052f0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d102      	bne.n	80052e0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f00b f914 	bl	8010508 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	695a      	ldr	r2, [r3, #20]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80052ee:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4618      	mov	r0, r3
 80052f6:	f008 ff29 	bl	800e14c <USB_ReadInterrupts>
 80052fa:	4603      	mov	r3, r0
 80052fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005300:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005304:	d121      	bne.n	800534a <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	695a      	ldr	r2, [r3, #20]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005314:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800531c:	2b00      	cmp	r3, #0
 800531e:	d111      	bne.n	8005344 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800532e:	089b      	lsrs	r3, r3, #2
 8005330:	f003 020f 	and.w	r2, r3, #15
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800533a:	2101      	movs	r1, #1
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 fe25 	bl	8005f8c <HAL_PCDEx_LPM_Callback>
 8005342:	e002      	b.n	800534a <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f00b f8df 	bl	8010508 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4618      	mov	r0, r3
 8005350:	f008 fefc 	bl	800e14c <USB_ReadInterrupts>
 8005354:	4603      	mov	r3, r0
 8005356:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800535a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800535e:	f040 80c7 	bne.w	80054f0 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	69fa      	ldr	r2, [r7, #28]
 800536c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005370:	f023 0301 	bic.w	r3, r3, #1
 8005374:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2110      	movs	r1, #16
 800537c:	4618      	mov	r0, r3
 800537e:	f007 ffcf 	bl	800d320 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005382:	2300      	movs	r3, #0
 8005384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005386:	e056      	b.n	8005436 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	4413      	add	r3, r2
 8005390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005394:	461a      	mov	r2, r3
 8005396:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800539a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800539c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053ac:	0151      	lsls	r1, r2, #5
 80053ae:	69fa      	ldr	r2, [r7, #28]
 80053b0:	440a      	add	r2, r1
 80053b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053ba:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80053bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053cc:	0151      	lsls	r1, r2, #5
 80053ce:	69fa      	ldr	r2, [r7, #28]
 80053d0:	440a      	add	r2, r1
 80053d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80053da:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80053dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e8:	461a      	mov	r2, r3
 80053ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80053ee:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80053f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005400:	0151      	lsls	r1, r2, #5
 8005402:	69fa      	ldr	r2, [r7, #28]
 8005404:	440a      	add	r2, r1
 8005406:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800540a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800540e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	4413      	add	r3, r2
 8005418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005420:	0151      	lsls	r1, r2, #5
 8005422:	69fa      	ldr	r2, [r7, #28]
 8005424:	440a      	add	r2, r1
 8005426:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800542a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800542e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005432:	3301      	adds	r3, #1
 8005434:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800543c:	429a      	cmp	r2, r3
 800543e:	d3a3      	bcc.n	8005388 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005446:	69db      	ldr	r3, [r3, #28]
 8005448:	69fa      	ldr	r2, [r7, #28]
 800544a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800544e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005452:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005458:	2b00      	cmp	r3, #0
 800545a:	d016      	beq.n	800548a <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005462:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005466:	69fa      	ldr	r2, [r7, #28]
 8005468:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800546c:	f043 030b 	orr.w	r3, r3, #11
 8005470:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800547a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800547c:	69fa      	ldr	r2, [r7, #28]
 800547e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005482:	f043 030b 	orr.w	r3, r3, #11
 8005486:	6453      	str	r3, [r2, #68]	; 0x44
 8005488:	e015      	b.n	80054b6 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005490:	695a      	ldr	r2, [r3, #20]
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005498:	4619      	mov	r1, r3
 800549a:	f242 032b 	movw	r3, #8235	; 0x202b
 800549e:	4313      	orrs	r3, r2
 80054a0:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	69fa      	ldr	r2, [r7, #28]
 80054ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054b0:	f043 030b 	orr.w	r3, r3, #11
 80054b4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	69fa      	ldr	r2, [r7, #28]
 80054c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054c4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80054c8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6818      	ldr	r0, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80054da:	461a      	mov	r2, r3
 80054dc:	f008 fefc 	bl	800e2d8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	695a      	ldr	r2, [r3, #20]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80054ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f008 fe29 	bl	800e14c <USB_ReadInterrupts>
 80054fa:	4603      	mov	r3, r0
 80054fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005500:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005504:	d124      	bne.n	8005550 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4618      	mov	r0, r3
 800550c:	f008 fec0 	bl	800e290 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4618      	mov	r0, r3
 8005516:	f007 ff64 	bl	800d3e2 <USB_GetDevSpeed>
 800551a:	4603      	mov	r3, r0
 800551c:	461a      	mov	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681c      	ldr	r4, [r3, #0]
 8005526:	f001 fccf 	bl	8006ec8 <HAL_RCC_GetHCLKFreq>
 800552a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005530:	b2db      	uxtb	r3, r3
 8005532:	461a      	mov	r2, r3
 8005534:	4620      	mov	r0, r4
 8005536:	f007 fca7 	bl	800ce88 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f00a ffbb 	bl	80104b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	695a      	ldr	r2, [r3, #20]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800554e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4618      	mov	r0, r3
 8005556:	f008 fdf9 	bl	800e14c <USB_ReadInterrupts>
 800555a:	4603      	mov	r3, r0
 800555c:	f003 0308 	and.w	r3, r3, #8
 8005560:	2b08      	cmp	r3, #8
 8005562:	d10a      	bne.n	800557a <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f00a ff98 	bl	801049a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	695a      	ldr	r2, [r3, #20]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f002 0208 	and.w	r2, r2, #8
 8005578:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4618      	mov	r0, r3
 8005580:	f008 fde4 	bl	800e14c <USB_ReadInterrupts>
 8005584:	4603      	mov	r3, r0
 8005586:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800558a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800558e:	d10f      	bne.n	80055b0 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005590:	2300      	movs	r3, #0
 8005592:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005596:	b2db      	uxtb	r3, r3
 8005598:	4619      	mov	r1, r3
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f00a fffa 	bl	8010594 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	695a      	ldr	r2, [r3, #20]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80055ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f008 fdc9 	bl	800e14c <USB_ReadInterrupts>
 80055ba:	4603      	mov	r3, r0
 80055bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055c4:	d10f      	bne.n	80055e6 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80055c6:	2300      	movs	r3, #0
 80055c8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80055ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	4619      	mov	r1, r3
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f00a ffcd 	bl	8010570 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	695a      	ldr	r2, [r3, #20]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80055e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f008 fdae 	bl	800e14c <USB_ReadInterrupts>
 80055f0:	4603      	mov	r3, r0
 80055f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80055f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055fa:	d10a      	bne.n	8005612 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f00a ffdb 	bl	80105b8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	695a      	ldr	r2, [r3, #20]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005610:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4618      	mov	r0, r3
 8005618:	f008 fd98 	bl	800e14c <USB_ReadInterrupts>
 800561c:	4603      	mov	r3, r0
 800561e:	f003 0304 	and.w	r3, r3, #4
 8005622:	2b04      	cmp	r3, #4
 8005624:	d115      	bne.n	8005652 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	f003 0304 	and.w	r3, r3, #4
 8005634:	2b00      	cmp	r3, #0
 8005636:	d002      	beq.n	800563e <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f00a ffcb 	bl	80105d4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6859      	ldr	r1, [r3, #4]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	69ba      	ldr	r2, [r7, #24]
 800564a:	430a      	orrs	r2, r1
 800564c:	605a      	str	r2, [r3, #4]
 800564e:	e000      	b.n	8005652 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8005650:	bf00      	nop
    }
  }
}
 8005652:	3734      	adds	r7, #52	; 0x34
 8005654:	46bd      	mov	sp, r7
 8005656:	bd90      	pop	{r4, r7, pc}

08005658 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	460b      	mov	r3, r1
 8005662:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800566a:	2b01      	cmp	r3, #1
 800566c:	d101      	bne.n	8005672 <HAL_PCD_SetAddress+0x1a>
 800566e:	2302      	movs	r3, #2
 8005670:	e013      	b.n	800569a <HAL_PCD_SetAddress+0x42>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	78fa      	ldrb	r2, [r7, #3]
 800567e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	78fa      	ldrb	r2, [r7, #3]
 8005688:	4611      	mov	r1, r2
 800568a:	4618      	mov	r0, r3
 800568c:	f008 fd08 	bl	800e0a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3708      	adds	r7, #8
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b084      	sub	sp, #16
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	4608      	mov	r0, r1
 80056ac:	4611      	mov	r1, r2
 80056ae:	461a      	mov	r2, r3
 80056b0:	4603      	mov	r3, r0
 80056b2:	70fb      	strb	r3, [r7, #3]
 80056b4:	460b      	mov	r3, r1
 80056b6:	803b      	strh	r3, [r7, #0]
 80056b8:	4613      	mov	r3, r2
 80056ba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80056bc:	2300      	movs	r3, #0
 80056be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80056c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	da0f      	bge.n	80056e8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056c8:	78fb      	ldrb	r3, [r7, #3]
 80056ca:	f003 020f 	and.w	r2, r3, #15
 80056ce:	4613      	mov	r3, r2
 80056d0:	00db      	lsls	r3, r3, #3
 80056d2:	1a9b      	subs	r3, r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	3338      	adds	r3, #56	; 0x38
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	4413      	add	r3, r2
 80056dc:	3304      	adds	r3, #4
 80056de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2201      	movs	r2, #1
 80056e4:	705a      	strb	r2, [r3, #1]
 80056e6:	e00f      	b.n	8005708 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056e8:	78fb      	ldrb	r3, [r7, #3]
 80056ea:	f003 020f 	and.w	r2, r3, #15
 80056ee:	4613      	mov	r3, r2
 80056f0:	00db      	lsls	r3, r3, #3
 80056f2:	1a9b      	subs	r3, r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	4413      	add	r3, r2
 80056fe:	3304      	adds	r3, #4
 8005700:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005708:	78fb      	ldrb	r3, [r7, #3]
 800570a:	f003 030f 	and.w	r3, r3, #15
 800570e:	b2da      	uxtb	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005714:	883a      	ldrh	r2, [r7, #0]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	78ba      	ldrb	r2, [r7, #2]
 800571e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	785b      	ldrb	r3, [r3, #1]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d004      	beq.n	8005732 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	b29a      	uxth	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005732:	78bb      	ldrb	r3, [r7, #2]
 8005734:	2b02      	cmp	r3, #2
 8005736:	d102      	bne.n	800573e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005744:	2b01      	cmp	r3, #1
 8005746:	d101      	bne.n	800574c <HAL_PCD_EP_Open+0xaa>
 8005748:	2302      	movs	r3, #2
 800574a:	e00e      	b.n	800576a <HAL_PCD_EP_Open+0xc8>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68f9      	ldr	r1, [r7, #12]
 800575a:	4618      	mov	r0, r3
 800575c:	f007 fe66 	bl	800d42c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005768:	7afb      	ldrb	r3, [r7, #11]
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005772:	b580      	push	{r7, lr}
 8005774:	b084      	sub	sp, #16
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
 800577a:	460b      	mov	r3, r1
 800577c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800577e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005782:	2b00      	cmp	r3, #0
 8005784:	da0f      	bge.n	80057a6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005786:	78fb      	ldrb	r3, [r7, #3]
 8005788:	f003 020f 	and.w	r2, r3, #15
 800578c:	4613      	mov	r3, r2
 800578e:	00db      	lsls	r3, r3, #3
 8005790:	1a9b      	subs	r3, r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	3338      	adds	r3, #56	; 0x38
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	4413      	add	r3, r2
 800579a:	3304      	adds	r3, #4
 800579c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2201      	movs	r2, #1
 80057a2:	705a      	strb	r2, [r3, #1]
 80057a4:	e00f      	b.n	80057c6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057a6:	78fb      	ldrb	r3, [r7, #3]
 80057a8:	f003 020f 	and.w	r2, r3, #15
 80057ac:	4613      	mov	r3, r2
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	1a9b      	subs	r3, r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	4413      	add	r3, r2
 80057bc:	3304      	adds	r3, #4
 80057be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80057c6:	78fb      	ldrb	r3, [r7, #3]
 80057c8:	f003 030f 	and.w	r3, r3, #15
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d101      	bne.n	80057e0 <HAL_PCD_EP_Close+0x6e>
 80057dc:	2302      	movs	r3, #2
 80057de:	e00e      	b.n	80057fe <HAL_PCD_EP_Close+0x8c>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68f9      	ldr	r1, [r7, #12]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f007 fea4 	bl	800d53c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005806:	b580      	push	{r7, lr}
 8005808:	b086      	sub	sp, #24
 800580a:	af00      	add	r7, sp, #0
 800580c:	60f8      	str	r0, [r7, #12]
 800580e:	607a      	str	r2, [r7, #4]
 8005810:	603b      	str	r3, [r7, #0]
 8005812:	460b      	mov	r3, r1
 8005814:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005816:	7afb      	ldrb	r3, [r7, #11]
 8005818:	f003 020f 	and.w	r2, r3, #15
 800581c:	4613      	mov	r3, r2
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	1a9b      	subs	r3, r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	4413      	add	r3, r2
 800582c:	3304      	adds	r3, #4
 800582e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	683a      	ldr	r2, [r7, #0]
 800583a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	2200      	movs	r2, #0
 8005840:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	2200      	movs	r2, #0
 8005846:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005848:	7afb      	ldrb	r3, [r7, #11]
 800584a:	f003 030f 	and.w	r3, r3, #15
 800584e:	b2da      	uxtb	r2, r3
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d102      	bne.n	8005862 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005862:	7afb      	ldrb	r3, [r7, #11]
 8005864:	f003 030f 	and.w	r3, r3, #15
 8005868:	2b00      	cmp	r3, #0
 800586a:	d109      	bne.n	8005880 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6818      	ldr	r0, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	b2db      	uxtb	r3, r3
 8005876:	461a      	mov	r2, r3
 8005878:	6979      	ldr	r1, [r7, #20]
 800587a:	f008 f987 	bl	800db8c <USB_EP0StartXfer>
 800587e:	e008      	b.n	8005892 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6818      	ldr	r0, [r3, #0]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	b2db      	uxtb	r3, r3
 800588a:	461a      	mov	r2, r3
 800588c:	6979      	ldr	r1, [r7, #20]
 800588e:	f007 ff31 	bl	800d6f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005892:	2300      	movs	r3, #0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3718      	adds	r7, #24
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	460b      	mov	r3, r1
 80058a6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80058a8:	78fb      	ldrb	r3, [r7, #3]
 80058aa:	f003 020f 	and.w	r2, r3, #15
 80058ae:	6879      	ldr	r1, [r7, #4]
 80058b0:	4613      	mov	r3, r2
 80058b2:	00db      	lsls	r3, r3, #3
 80058b4:	1a9b      	subs	r3, r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	440b      	add	r3, r1
 80058ba:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80058be:	681b      	ldr	r3, [r3, #0]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	607a      	str	r2, [r7, #4]
 80058d6:	603b      	str	r3, [r7, #0]
 80058d8:	460b      	mov	r3, r1
 80058da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058dc:	7afb      	ldrb	r3, [r7, #11]
 80058de:	f003 020f 	and.w	r2, r3, #15
 80058e2:	4613      	mov	r3, r2
 80058e4:	00db      	lsls	r3, r3, #3
 80058e6:	1a9b      	subs	r3, r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	3338      	adds	r3, #56	; 0x38
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	4413      	add	r3, r2
 80058f0:	3304      	adds	r3, #4
 80058f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	683a      	ldr	r2, [r7, #0]
 80058fe:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	2200      	movs	r2, #0
 8005904:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	2201      	movs	r2, #1
 800590a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800590c:	7afb      	ldrb	r3, [r7, #11]
 800590e:	f003 030f 	and.w	r3, r3, #15
 8005912:	b2da      	uxtb	r2, r3
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d102      	bne.n	8005926 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005926:	7afb      	ldrb	r3, [r7, #11]
 8005928:	f003 030f 	and.w	r3, r3, #15
 800592c:	2b00      	cmp	r3, #0
 800592e:	d109      	bne.n	8005944 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6818      	ldr	r0, [r3, #0]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	b2db      	uxtb	r3, r3
 800593a:	461a      	mov	r2, r3
 800593c:	6979      	ldr	r1, [r7, #20]
 800593e:	f008 f925 	bl	800db8c <USB_EP0StartXfer>
 8005942:	e008      	b.n	8005956 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6818      	ldr	r0, [r3, #0]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	b2db      	uxtb	r3, r3
 800594e:	461a      	mov	r2, r3
 8005950:	6979      	ldr	r1, [r7, #20]
 8005952:	f007 fecf 	bl	800d6f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	3718      	adds	r7, #24
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	460b      	mov	r3, r1
 800596a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800596c:	78fb      	ldrb	r3, [r7, #3]
 800596e:	f003 020f 	and.w	r2, r3, #15
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	429a      	cmp	r2, r3
 8005978:	d901      	bls.n	800597e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e050      	b.n	8005a20 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800597e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005982:	2b00      	cmp	r3, #0
 8005984:	da0f      	bge.n	80059a6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005986:	78fb      	ldrb	r3, [r7, #3]
 8005988:	f003 020f 	and.w	r2, r3, #15
 800598c:	4613      	mov	r3, r2
 800598e:	00db      	lsls	r3, r3, #3
 8005990:	1a9b      	subs	r3, r3, r2
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	3338      	adds	r3, #56	; 0x38
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	4413      	add	r3, r2
 800599a:	3304      	adds	r3, #4
 800599c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2201      	movs	r2, #1
 80059a2:	705a      	strb	r2, [r3, #1]
 80059a4:	e00d      	b.n	80059c2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80059a6:	78fa      	ldrb	r2, [r7, #3]
 80059a8:	4613      	mov	r3, r2
 80059aa:	00db      	lsls	r3, r3, #3
 80059ac:	1a9b      	subs	r3, r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	4413      	add	r3, r2
 80059b8:	3304      	adds	r3, #4
 80059ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2201      	movs	r2, #1
 80059c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059c8:	78fb      	ldrb	r3, [r7, #3]
 80059ca:	f003 030f 	and.w	r3, r3, #15
 80059ce:	b2da      	uxtb	r2, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d101      	bne.n	80059e2 <HAL_PCD_EP_SetStall+0x82>
 80059de:	2302      	movs	r3, #2
 80059e0:	e01e      	b.n	8005a20 <HAL_PCD_EP_SetStall+0xc0>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68f9      	ldr	r1, [r7, #12]
 80059f0:	4618      	mov	r0, r3
 80059f2:	f008 fa81 	bl	800def8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80059f6:	78fb      	ldrb	r3, [r7, #3]
 80059f8:	f003 030f 	and.w	r3, r3, #15
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10a      	bne.n	8005a16 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6818      	ldr	r0, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	b2d9      	uxtb	r1, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005a10:	461a      	mov	r2, r3
 8005a12:	f008 fc61 	bl	800e2d8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	460b      	mov	r3, r1
 8005a32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005a34:	78fb      	ldrb	r3, [r7, #3]
 8005a36:	f003 020f 	and.w	r2, r3, #15
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d901      	bls.n	8005a46 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e042      	b.n	8005acc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005a46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	da0f      	bge.n	8005a6e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a4e:	78fb      	ldrb	r3, [r7, #3]
 8005a50:	f003 020f 	and.w	r2, r3, #15
 8005a54:	4613      	mov	r3, r2
 8005a56:	00db      	lsls	r3, r3, #3
 8005a58:	1a9b      	subs	r3, r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	3338      	adds	r3, #56	; 0x38
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	4413      	add	r3, r2
 8005a62:	3304      	adds	r3, #4
 8005a64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	705a      	strb	r2, [r3, #1]
 8005a6c:	e00f      	b.n	8005a8e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a6e:	78fb      	ldrb	r3, [r7, #3]
 8005a70:	f003 020f 	and.w	r2, r3, #15
 8005a74:	4613      	mov	r3, r2
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	1a9b      	subs	r3, r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	4413      	add	r3, r2
 8005a84:	3304      	adds	r3, #4
 8005a86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a94:	78fb      	ldrb	r3, [r7, #3]
 8005a96:	f003 030f 	and.w	r3, r3, #15
 8005a9a:	b2da      	uxtb	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d101      	bne.n	8005aae <HAL_PCD_EP_ClrStall+0x86>
 8005aaa:	2302      	movs	r3, #2
 8005aac:	e00e      	b.n	8005acc <HAL_PCD_EP_ClrStall+0xa4>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68f9      	ldr	r1, [r7, #12]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f008 fa89 	bl	800dfd4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3710      	adds	r7, #16
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b08a      	sub	sp, #40	; 0x28
 8005ad8:	af02      	add	r7, sp, #8
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005ae8:	683a      	ldr	r2, [r7, #0]
 8005aea:	4613      	mov	r3, r2
 8005aec:	00db      	lsls	r3, r3, #3
 8005aee:	1a9b      	subs	r3, r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	3338      	adds	r3, #56	; 0x38
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	4413      	add	r3, r2
 8005af8:	3304      	adds	r3, #4
 8005afa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	699a      	ldr	r2, [r3, #24]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d901      	bls.n	8005b0c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e06c      	b.n	8005be6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	695a      	ldr	r2, [r3, #20]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	69fa      	ldr	r2, [r7, #28]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d902      	bls.n	8005b28 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	3303      	adds	r3, #3
 8005b2c:	089b      	lsrs	r3, r3, #2
 8005b2e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b30:	e02b      	b.n	8005b8a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	695a      	ldr	r2, [r3, #20]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	69fa      	ldr	r2, [r7, #28]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d902      	bls.n	8005b4e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	3303      	adds	r3, #3
 8005b52:	089b      	lsrs	r3, r3, #2
 8005b54:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	68d9      	ldr	r1, [r3, #12]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	9300      	str	r3, [sp, #0]
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	6978      	ldr	r0, [r7, #20]
 8005b6e:	f008 f965 	bl	800de3c <USB_WritePacket>

    ep->xfer_buff  += len;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	68da      	ldr	r2, [r3, #12]
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	441a      	add	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	699a      	ldr	r2, [r3, #24]
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	441a      	add	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	015a      	lsls	r2, r3, #5
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	4413      	add	r3, r2
 8005b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	69ba      	ldr	r2, [r7, #24]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d809      	bhi.n	8005bb4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	699a      	ldr	r2, [r3, #24]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d203      	bcs.n	8005bb4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1be      	bne.n	8005b32 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	695a      	ldr	r2, [r3, #20]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d811      	bhi.n	8005be4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	f003 030f 	and.w	r3, r3, #15
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bcc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	43db      	mvns	r3, r3
 8005bda:	6939      	ldr	r1, [r7, #16]
 8005bdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005be0:	4013      	ands	r3, r2
 8005be2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3720      	adds	r7, #32
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
	...

08005bf0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	333c      	adds	r3, #60	; 0x3c
 8005c08:	3304      	adds	r3, #4
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	f040 80a0 	bne.w	8005d68 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	f003 0308 	and.w	r3, r3, #8
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d015      	beq.n	8005c5e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	4a72      	ldr	r2, [pc, #456]	; (8005e00 <PCD_EP_OutXfrComplete_int+0x210>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	f240 80dd 	bls.w	8005df6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f000 80d7 	beq.w	8005df6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c54:	461a      	mov	r2, r3
 8005c56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c5a:	6093      	str	r3, [r2, #8]
 8005c5c:	e0cb      	b.n	8005df6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	f003 0320 	and.w	r3, r3, #32
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d009      	beq.n	8005c7c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	015a      	lsls	r2, r3, #5
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c74:	461a      	mov	r2, r3
 8005c76:	2320      	movs	r3, #32
 8005c78:	6093      	str	r3, [r2, #8]
 8005c7a:	e0bc      	b.n	8005df6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f040 80b7 	bne.w	8005df6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	4a5d      	ldr	r2, [pc, #372]	; (8005e00 <PCD_EP_OutXfrComplete_int+0x210>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d90f      	bls.n	8005cb0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00a      	beq.n	8005cb0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cac:	6093      	str	r3, [r2, #8]
 8005cae:	e0a2      	b.n	8005df6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005cb0:	6879      	ldr	r1, [r7, #4]
 8005cb2:	683a      	ldr	r2, [r7, #0]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	00db      	lsls	r3, r3, #3
 8005cb8:	1a9b      	subs	r3, r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	440b      	add	r3, r1
 8005cbe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005cc2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	0159      	lsls	r1, r3, #5
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	440b      	add	r3, r1
 8005ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005cd6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	683a      	ldr	r2, [r7, #0]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	00db      	lsls	r3, r3, #3
 8005ce0:	1a9b      	subs	r3, r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	4403      	add	r3, r0
 8005ce6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005cea:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005cec:	6879      	ldr	r1, [r7, #4]
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	00db      	lsls	r3, r3, #3
 8005cf4:	1a9b      	subs	r3, r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	440b      	add	r3, r1
 8005cfa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005cfe:	6819      	ldr	r1, [r3, #0]
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	683a      	ldr	r2, [r7, #0]
 8005d04:	4613      	mov	r3, r2
 8005d06:	00db      	lsls	r3, r3, #3
 8005d08:	1a9b      	subs	r3, r3, r2
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	4403      	add	r3, r0
 8005d0e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4419      	add	r1, r3
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	683a      	ldr	r2, [r7, #0]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	00db      	lsls	r3, r3, #3
 8005d1e:	1a9b      	subs	r3, r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	4403      	add	r3, r0
 8005d24:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005d28:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d114      	bne.n	8005d5a <PCD_EP_OutXfrComplete_int+0x16a>
 8005d30:	6879      	ldr	r1, [r7, #4]
 8005d32:	683a      	ldr	r2, [r7, #0]
 8005d34:	4613      	mov	r3, r2
 8005d36:	00db      	lsls	r3, r3, #3
 8005d38:	1a9b      	subs	r3, r3, r2
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	440b      	add	r3, r1
 8005d3e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d108      	bne.n	8005d5a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6818      	ldr	r0, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005d52:	461a      	mov	r2, r3
 8005d54:	2101      	movs	r1, #1
 8005d56:	f008 fabf 	bl	800e2d8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	4619      	mov	r1, r3
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f00a fb65 	bl	8010430 <HAL_PCD_DataOutStageCallback>
 8005d66:	e046      	b.n	8005df6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	4a26      	ldr	r2, [pc, #152]	; (8005e04 <PCD_EP_OutXfrComplete_int+0x214>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d124      	bne.n	8005dba <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00a      	beq.n	8005d90 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	015a      	lsls	r2, r3, #5
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	4413      	add	r3, r2
 8005d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d86:	461a      	mov	r2, r3
 8005d88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d8c:	6093      	str	r3, [r2, #8]
 8005d8e:	e032      	b.n	8005df6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	f003 0320 	and.w	r3, r3, #32
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d008      	beq.n	8005dac <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	015a      	lsls	r2, r3, #5
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	4413      	add	r3, r2
 8005da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da6:	461a      	mov	r2, r3
 8005da8:	2320      	movs	r3, #32
 8005daa:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	4619      	mov	r1, r3
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f00a fb3c 	bl	8010430 <HAL_PCD_DataOutStageCallback>
 8005db8:	e01d      	b.n	8005df6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d114      	bne.n	8005dea <PCD_EP_OutXfrComplete_int+0x1fa>
 8005dc0:	6879      	ldr	r1, [r7, #4]
 8005dc2:	683a      	ldr	r2, [r7, #0]
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	00db      	lsls	r3, r3, #3
 8005dc8:	1a9b      	subs	r3, r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	440b      	add	r3, r1
 8005dce:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d108      	bne.n	8005dea <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6818      	ldr	r0, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005de2:	461a      	mov	r2, r3
 8005de4:	2100      	movs	r1, #0
 8005de6:	f008 fa77 	bl	800e2d8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	4619      	mov	r1, r3
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f00a fb1d 	bl	8010430 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3718      	adds	r7, #24
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	4f54300a 	.word	0x4f54300a
 8005e04:	4f54310a 	.word	0x4f54310a

08005e08 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	333c      	adds	r3, #60	; 0x3c
 8005e20:	3304      	adds	r3, #4
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	015a      	lsls	r2, r3, #5
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	4a15      	ldr	r2, [pc, #84]	; (8005e90 <PCD_EP_OutSetupPacket_int+0x88>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d90e      	bls.n	8005e5c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d009      	beq.n	8005e5c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	015a      	lsls	r2, r3, #5
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	4413      	add	r3, r2
 8005e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e54:	461a      	mov	r2, r3
 8005e56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e5a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f00a fad5 	bl	801040c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	4a0a      	ldr	r2, [pc, #40]	; (8005e90 <PCD_EP_OutSetupPacket_int+0x88>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d90c      	bls.n	8005e84 <PCD_EP_OutSetupPacket_int+0x7c>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d108      	bne.n	8005e84 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6818      	ldr	r0, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	2101      	movs	r1, #1
 8005e80:	f008 fa2a 	bl	800e2d8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3718      	adds	r7, #24
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	4f54300a 	.word	0x4f54300a

08005e94 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	70fb      	strb	r3, [r7, #3]
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eaa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005eac:	78fb      	ldrb	r3, [r7, #3]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d107      	bne.n	8005ec2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005eb2:	883b      	ldrh	r3, [r7, #0]
 8005eb4:	0419      	lsls	r1, r3, #16
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	629a      	str	r2, [r3, #40]	; 0x28
 8005ec0:	e028      	b.n	8005f14 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec8:	0c1b      	lsrs	r3, r3, #16
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	4413      	add	r3, r2
 8005ece:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	73fb      	strb	r3, [r7, #15]
 8005ed4:	e00d      	b.n	8005ef2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	7bfb      	ldrb	r3, [r7, #15]
 8005edc:	3340      	adds	r3, #64	; 0x40
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	4413      	add	r3, r2
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	0c1b      	lsrs	r3, r3, #16
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	4413      	add	r3, r2
 8005eea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005eec:	7bfb      	ldrb	r3, [r7, #15]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	73fb      	strb	r3, [r7, #15]
 8005ef2:	7bfa      	ldrb	r2, [r7, #15]
 8005ef4:	78fb      	ldrb	r3, [r7, #3]
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d3ec      	bcc.n	8005ed6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005efc:	883b      	ldrh	r3, [r7, #0]
 8005efe:	0418      	lsls	r0, r3, #16
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6819      	ldr	r1, [r3, #0]
 8005f04:	78fb      	ldrb	r3, [r7, #3]
 8005f06:	3b01      	subs	r3, #1
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	4302      	orrs	r2, r0
 8005f0c:	3340      	adds	r3, #64	; 0x40
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	440b      	add	r3, r1
 8005f12:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3714      	adds	r7, #20
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b083      	sub	sp, #12
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	887a      	ldrh	r2, [r7, #2]
 8005f34:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f72:	4b05      	ldr	r3, [pc, #20]	; (8005f88 <HAL_PCDEx_ActivateLPM+0x44>)
 8005f74:	4313      	orrs	r3, r2
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3714      	adds	r7, #20
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr
 8005f88:	10000003 	.word	0x10000003

08005f8c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	460b      	mov	r3, r1
 8005f96:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8005fa8:	4b05      	ldr	r3, [pc, #20]	; (8005fc0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a04      	ldr	r2, [pc, #16]	; (8005fc0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fb2:	6013      	str	r3, [r2, #0]
}
 8005fb4:	bf00      	nop
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	58024800 	.word	0x58024800

08005fc4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005fcc:	4b19      	ldr	r3, [pc, #100]	; (8006034 <HAL_PWREx_ConfigSupply+0x70>)
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	f003 0304 	and.w	r3, r3, #4
 8005fd4:	2b04      	cmp	r3, #4
 8005fd6:	d00a      	beq.n	8005fee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005fd8:	4b16      	ldr	r3, [pc, #88]	; (8006034 <HAL_PWREx_ConfigSupply+0x70>)
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	f003 0307 	and.w	r3, r3, #7
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d001      	beq.n	8005fea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e01f      	b.n	800602a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005fea:	2300      	movs	r3, #0
 8005fec:	e01d      	b.n	800602a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005fee:	4b11      	ldr	r3, [pc, #68]	; (8006034 <HAL_PWREx_ConfigSupply+0x70>)
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	f023 0207 	bic.w	r2, r3, #7
 8005ff6:	490f      	ldr	r1, [pc, #60]	; (8006034 <HAL_PWREx_ConfigSupply+0x70>)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005ffe:	f7fb fe55 	bl	8001cac <HAL_GetTick>
 8006002:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006004:	e009      	b.n	800601a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006006:	f7fb fe51 	bl	8001cac <HAL_GetTick>
 800600a:	4602      	mov	r2, r0
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006014:	d901      	bls.n	800601a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e007      	b.n	800602a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800601a:	4b06      	ldr	r3, [pc, #24]	; (8006034 <HAL_PWREx_ConfigSupply+0x70>)
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006026:	d1ee      	bne.n	8006006 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	58024800 	.word	0x58024800

08006038 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006038:	b480      	push	{r7}
 800603a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800603c:	4b05      	ldr	r3, [pc, #20]	; (8006054 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	4a04      	ldr	r2, [pc, #16]	; (8006054 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006042:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006046:	60d3      	str	r3, [r2, #12]
}
 8006048:	bf00      	nop
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop
 8006054:	58024800 	.word	0x58024800

08006058 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b08c      	sub	sp, #48	; 0x30
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d101      	bne.n	800606a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e3ff      	b.n	800686a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	2b00      	cmp	r3, #0
 8006074:	f000 8087 	beq.w	8006186 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006078:	4b99      	ldr	r3, [pc, #612]	; (80062e0 <HAL_RCC_OscConfig+0x288>)
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006080:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006082:	4b97      	ldr	r3, [pc, #604]	; (80062e0 <HAL_RCC_OscConfig+0x288>)
 8006084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006086:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608a:	2b10      	cmp	r3, #16
 800608c:	d007      	beq.n	800609e <HAL_RCC_OscConfig+0x46>
 800608e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006090:	2b18      	cmp	r3, #24
 8006092:	d110      	bne.n	80060b6 <HAL_RCC_OscConfig+0x5e>
 8006094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006096:	f003 0303 	and.w	r3, r3, #3
 800609a:	2b02      	cmp	r3, #2
 800609c:	d10b      	bne.n	80060b6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800609e:	4b90      	ldr	r3, [pc, #576]	; (80062e0 <HAL_RCC_OscConfig+0x288>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d06c      	beq.n	8006184 <HAL_RCC_OscConfig+0x12c>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d168      	bne.n	8006184 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e3d9      	b.n	800686a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060be:	d106      	bne.n	80060ce <HAL_RCC_OscConfig+0x76>
 80060c0:	4b87      	ldr	r3, [pc, #540]	; (80062e0 <HAL_RCC_OscConfig+0x288>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a86      	ldr	r2, [pc, #536]	; (80062e0 <HAL_RCC_OscConfig+0x288>)
 80060c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060ca:	6013      	str	r3, [r2, #0]
 80060cc:	e02e      	b.n	800612c <HAL_RCC_OscConfig+0xd4>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10c      	bne.n	80060f0 <HAL_RCC_OscConfig+0x98>
 80060d6:	4b82      	ldr	r3, [pc, #520]	; (80062e0 <HAL_RCC_OscConfig+0x288>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a81      	ldr	r2, [pc, #516]	; (80062e0 <HAL_RCC_OscConfig+0x288>)
 80060dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060e0:	6013      	str	r3, [r2, #0]
 80060e2:	4b7f      	ldr	r3, [pc, #508]	; (80062e0 <HAL_RCC_OscConfig+0x288>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a7e      	ldr	r2, [pc, #504]	; (80062e0 <HAL_RCC_OscConfig+0x288>)
 80060e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060ec:	6013      	str	r3, [r2, #0]
 80060ee:	e01d      	b.n	800612c <HAL_RCC_OscConfig+0xd4>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060f8:	d10c      	bne.n	8006114 <HAL_RCC_OscConfig+0xbc>
 80060fa:	4b79      	ldr	r3, [pc, #484]	; (80062e0 <HAL_RCC_OscConfig+0x288>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a78      	ldr	r2, [pc, #480]	; (80062e0 <HAL_RCC_OscConfig+0x288>)
 8006100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006104:	6013      	str	r3, [r2, #0]
 8006106:	4b76      	ldr	r3, [pc, #472]	; (80062e0 <HAL_RCC_OscConfig+0x288>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a75      	ldr	r2, [pc, #468]	; (80062e0 <HAL_RCC_OscConfig+0x288>)
 800610c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006110:	6013      	str	r3, [r2, #0]
 8006112:	e00b      	b.n	800612c <HAL_RCC_OscConfig+0xd4>
 8006114:	4b72      	ldr	r3, [pc, #456]	; (80062e0 <HAL_RCC_OscConfig+0x288>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a71      	ldr	r2, [pc, #452]	; (80062e0 <HAL_RCC_OscConfig+0x288>)
 800611a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800611e:	6013      	str	r3, [r2, #0]
 8006120:	4b6f      	ldr	r3, [pc, #444]	; (80062e0 <HAL_RCC_OscConfig+0x288>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a6e      	ldr	r2, [pc, #440]	; (80062e0 <HAL_RCC_OscConfig+0x288>)
 8006126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800612a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d013      	beq.n	800615c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006134:	f7fb fdba 	bl	8001cac <HAL_GetTick>
 8006138:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800613a:	e008      	b.n	800614e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800613c:	f7fb fdb6 	bl	8001cac <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	2b64      	cmp	r3, #100	; 0x64
 8006148:	d901      	bls.n	800614e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e38d      	b.n	800686a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800614e:	4b64      	ldr	r3, [pc, #400]	; (80062e0 <HAL_RCC_OscConfig+0x288>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d0f0      	beq.n	800613c <HAL_RCC_OscConfig+0xe4>
 800615a:	e014      	b.n	8006186 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800615c:	f7fb fda6 	bl	8001cac <HAL_GetTick>
 8006160:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006162:	e008      	b.n	8006176 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006164:	f7fb fda2 	bl	8001cac <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	2b64      	cmp	r3, #100	; 0x64
 8006170:	d901      	bls.n	8006176 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e379      	b.n	800686a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006176:	4b5a      	ldr	r3, [pc, #360]	; (80062e0 <HAL_RCC_OscConfig+0x288>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1f0      	bne.n	8006164 <HAL_RCC_OscConfig+0x10c>
 8006182:	e000      	b.n	8006186 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b00      	cmp	r3, #0
 8006190:	f000 80ae 	beq.w	80062f0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006194:	4b52      	ldr	r3, [pc, #328]	; (80062e0 <HAL_RCC_OscConfig+0x288>)
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800619c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800619e:	4b50      	ldr	r3, [pc, #320]	; (80062e0 <HAL_RCC_OscConfig+0x288>)
 80061a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80061a4:	6a3b      	ldr	r3, [r7, #32]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d007      	beq.n	80061ba <HAL_RCC_OscConfig+0x162>
 80061aa:	6a3b      	ldr	r3, [r7, #32]
 80061ac:	2b18      	cmp	r3, #24
 80061ae:	d13a      	bne.n	8006226 <HAL_RCC_OscConfig+0x1ce>
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	f003 0303 	and.w	r3, r3, #3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d135      	bne.n	8006226 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061ba:	4b49      	ldr	r3, [pc, #292]	; (80062e0 <HAL_RCC_OscConfig+0x288>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0304 	and.w	r3, r3, #4
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d005      	beq.n	80061d2 <HAL_RCC_OscConfig+0x17a>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e34b      	b.n	800686a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061d2:	f7fb fd99 	bl	8001d08 <HAL_GetREVID>
 80061d6:	4602      	mov	r2, r0
 80061d8:	f241 0303 	movw	r3, #4099	; 0x1003
 80061dc:	429a      	cmp	r2, r3
 80061de:	d817      	bhi.n	8006210 <HAL_RCC_OscConfig+0x1b8>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	2b40      	cmp	r3, #64	; 0x40
 80061e6:	d108      	bne.n	80061fa <HAL_RCC_OscConfig+0x1a2>
 80061e8:	4b3d      	ldr	r3, [pc, #244]	; (80062e0 <HAL_RCC_OscConfig+0x288>)
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80061f0:	4a3b      	ldr	r2, [pc, #236]	; (80062e0 <HAL_RCC_OscConfig+0x288>)
 80061f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061f6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061f8:	e07a      	b.n	80062f0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061fa:	4b39      	ldr	r3, [pc, #228]	; (80062e0 <HAL_RCC_OscConfig+0x288>)
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	031b      	lsls	r3, r3, #12
 8006208:	4935      	ldr	r1, [pc, #212]	; (80062e0 <HAL_RCC_OscConfig+0x288>)
 800620a:	4313      	orrs	r3, r2
 800620c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800620e:	e06f      	b.n	80062f0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006210:	4b33      	ldr	r3, [pc, #204]	; (80062e0 <HAL_RCC_OscConfig+0x288>)
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	061b      	lsls	r3, r3, #24
 800621e:	4930      	ldr	r1, [pc, #192]	; (80062e0 <HAL_RCC_OscConfig+0x288>)
 8006220:	4313      	orrs	r3, r2
 8006222:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006224:	e064      	b.n	80062f0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d045      	beq.n	80062ba <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800622e:	4b2c      	ldr	r3, [pc, #176]	; (80062e0 <HAL_RCC_OscConfig+0x288>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f023 0219 	bic.w	r2, r3, #25
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	4929      	ldr	r1, [pc, #164]	; (80062e0 <HAL_RCC_OscConfig+0x288>)
 800623c:	4313      	orrs	r3, r2
 800623e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006240:	f7fb fd34 	bl	8001cac <HAL_GetTick>
 8006244:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006246:	e008      	b.n	800625a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006248:	f7fb fd30 	bl	8001cac <HAL_GetTick>
 800624c:	4602      	mov	r2, r0
 800624e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	2b02      	cmp	r3, #2
 8006254:	d901      	bls.n	800625a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e307      	b.n	800686a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800625a:	4b21      	ldr	r3, [pc, #132]	; (80062e0 <HAL_RCC_OscConfig+0x288>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 0304 	and.w	r3, r3, #4
 8006262:	2b00      	cmp	r3, #0
 8006264:	d0f0      	beq.n	8006248 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006266:	f7fb fd4f 	bl	8001d08 <HAL_GetREVID>
 800626a:	4602      	mov	r2, r0
 800626c:	f241 0303 	movw	r3, #4099	; 0x1003
 8006270:	429a      	cmp	r2, r3
 8006272:	d817      	bhi.n	80062a4 <HAL_RCC_OscConfig+0x24c>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	2b40      	cmp	r3, #64	; 0x40
 800627a:	d108      	bne.n	800628e <HAL_RCC_OscConfig+0x236>
 800627c:	4b18      	ldr	r3, [pc, #96]	; (80062e0 <HAL_RCC_OscConfig+0x288>)
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006284:	4a16      	ldr	r2, [pc, #88]	; (80062e0 <HAL_RCC_OscConfig+0x288>)
 8006286:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800628a:	6053      	str	r3, [r2, #4]
 800628c:	e030      	b.n	80062f0 <HAL_RCC_OscConfig+0x298>
 800628e:	4b14      	ldr	r3, [pc, #80]	; (80062e0 <HAL_RCC_OscConfig+0x288>)
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	031b      	lsls	r3, r3, #12
 800629c:	4910      	ldr	r1, [pc, #64]	; (80062e0 <HAL_RCC_OscConfig+0x288>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	604b      	str	r3, [r1, #4]
 80062a2:	e025      	b.n	80062f0 <HAL_RCC_OscConfig+0x298>
 80062a4:	4b0e      	ldr	r3, [pc, #56]	; (80062e0 <HAL_RCC_OscConfig+0x288>)
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	061b      	lsls	r3, r3, #24
 80062b2:	490b      	ldr	r1, [pc, #44]	; (80062e0 <HAL_RCC_OscConfig+0x288>)
 80062b4:	4313      	orrs	r3, r2
 80062b6:	604b      	str	r3, [r1, #4]
 80062b8:	e01a      	b.n	80062f0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062ba:	4b09      	ldr	r3, [pc, #36]	; (80062e0 <HAL_RCC_OscConfig+0x288>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a08      	ldr	r2, [pc, #32]	; (80062e0 <HAL_RCC_OscConfig+0x288>)
 80062c0:	f023 0301 	bic.w	r3, r3, #1
 80062c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c6:	f7fb fcf1 	bl	8001cac <HAL_GetTick>
 80062ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80062cc:	e00a      	b.n	80062e4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062ce:	f7fb fced 	bl	8001cac <HAL_GetTick>
 80062d2:	4602      	mov	r2, r0
 80062d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d903      	bls.n	80062e4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e2c4      	b.n	800686a <HAL_RCC_OscConfig+0x812>
 80062e0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80062e4:	4ba4      	ldr	r3, [pc, #656]	; (8006578 <HAL_RCC_OscConfig+0x520>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0304 	and.w	r3, r3, #4
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1ee      	bne.n	80062ce <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0310 	and.w	r3, r3, #16
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f000 80a9 	beq.w	8006450 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062fe:	4b9e      	ldr	r3, [pc, #632]	; (8006578 <HAL_RCC_OscConfig+0x520>)
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006306:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006308:	4b9b      	ldr	r3, [pc, #620]	; (8006578 <HAL_RCC_OscConfig+0x520>)
 800630a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800630c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	2b08      	cmp	r3, #8
 8006312:	d007      	beq.n	8006324 <HAL_RCC_OscConfig+0x2cc>
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	2b18      	cmp	r3, #24
 8006318:	d13a      	bne.n	8006390 <HAL_RCC_OscConfig+0x338>
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f003 0303 	and.w	r3, r3, #3
 8006320:	2b01      	cmp	r3, #1
 8006322:	d135      	bne.n	8006390 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006324:	4b94      	ldr	r3, [pc, #592]	; (8006578 <HAL_RCC_OscConfig+0x520>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800632c:	2b00      	cmp	r3, #0
 800632e:	d005      	beq.n	800633c <HAL_RCC_OscConfig+0x2e4>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	69db      	ldr	r3, [r3, #28]
 8006334:	2b80      	cmp	r3, #128	; 0x80
 8006336:	d001      	beq.n	800633c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e296      	b.n	800686a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800633c:	f7fb fce4 	bl	8001d08 <HAL_GetREVID>
 8006340:	4602      	mov	r2, r0
 8006342:	f241 0303 	movw	r3, #4099	; 0x1003
 8006346:	429a      	cmp	r2, r3
 8006348:	d817      	bhi.n	800637a <HAL_RCC_OscConfig+0x322>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	2b20      	cmp	r3, #32
 8006350:	d108      	bne.n	8006364 <HAL_RCC_OscConfig+0x30c>
 8006352:	4b89      	ldr	r3, [pc, #548]	; (8006578 <HAL_RCC_OscConfig+0x520>)
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800635a:	4a87      	ldr	r2, [pc, #540]	; (8006578 <HAL_RCC_OscConfig+0x520>)
 800635c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006360:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006362:	e075      	b.n	8006450 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006364:	4b84      	ldr	r3, [pc, #528]	; (8006578 <HAL_RCC_OscConfig+0x520>)
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a1b      	ldr	r3, [r3, #32]
 8006370:	069b      	lsls	r3, r3, #26
 8006372:	4981      	ldr	r1, [pc, #516]	; (8006578 <HAL_RCC_OscConfig+0x520>)
 8006374:	4313      	orrs	r3, r2
 8006376:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006378:	e06a      	b.n	8006450 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800637a:	4b7f      	ldr	r3, [pc, #508]	; (8006578 <HAL_RCC_OscConfig+0x520>)
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	061b      	lsls	r3, r3, #24
 8006388:	497b      	ldr	r1, [pc, #492]	; (8006578 <HAL_RCC_OscConfig+0x520>)
 800638a:	4313      	orrs	r3, r2
 800638c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800638e:	e05f      	b.n	8006450 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	69db      	ldr	r3, [r3, #28]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d042      	beq.n	800641e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006398:	4b77      	ldr	r3, [pc, #476]	; (8006578 <HAL_RCC_OscConfig+0x520>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a76      	ldr	r2, [pc, #472]	; (8006578 <HAL_RCC_OscConfig+0x520>)
 800639e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063a4:	f7fb fc82 	bl	8001cac <HAL_GetTick>
 80063a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80063aa:	e008      	b.n	80063be <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80063ac:	f7fb fc7e 	bl	8001cac <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d901      	bls.n	80063be <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e255      	b.n	800686a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80063be:	4b6e      	ldr	r3, [pc, #440]	; (8006578 <HAL_RCC_OscConfig+0x520>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d0f0      	beq.n	80063ac <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80063ca:	f7fb fc9d 	bl	8001d08 <HAL_GetREVID>
 80063ce:	4602      	mov	r2, r0
 80063d0:	f241 0303 	movw	r3, #4099	; 0x1003
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d817      	bhi.n	8006408 <HAL_RCC_OscConfig+0x3b0>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a1b      	ldr	r3, [r3, #32]
 80063dc:	2b20      	cmp	r3, #32
 80063de:	d108      	bne.n	80063f2 <HAL_RCC_OscConfig+0x39a>
 80063e0:	4b65      	ldr	r3, [pc, #404]	; (8006578 <HAL_RCC_OscConfig+0x520>)
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80063e8:	4a63      	ldr	r2, [pc, #396]	; (8006578 <HAL_RCC_OscConfig+0x520>)
 80063ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063ee:	6053      	str	r3, [r2, #4]
 80063f0:	e02e      	b.n	8006450 <HAL_RCC_OscConfig+0x3f8>
 80063f2:	4b61      	ldr	r3, [pc, #388]	; (8006578 <HAL_RCC_OscConfig+0x520>)
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	069b      	lsls	r3, r3, #26
 8006400:	495d      	ldr	r1, [pc, #372]	; (8006578 <HAL_RCC_OscConfig+0x520>)
 8006402:	4313      	orrs	r3, r2
 8006404:	604b      	str	r3, [r1, #4]
 8006406:	e023      	b.n	8006450 <HAL_RCC_OscConfig+0x3f8>
 8006408:	4b5b      	ldr	r3, [pc, #364]	; (8006578 <HAL_RCC_OscConfig+0x520>)
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a1b      	ldr	r3, [r3, #32]
 8006414:	061b      	lsls	r3, r3, #24
 8006416:	4958      	ldr	r1, [pc, #352]	; (8006578 <HAL_RCC_OscConfig+0x520>)
 8006418:	4313      	orrs	r3, r2
 800641a:	60cb      	str	r3, [r1, #12]
 800641c:	e018      	b.n	8006450 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800641e:	4b56      	ldr	r3, [pc, #344]	; (8006578 <HAL_RCC_OscConfig+0x520>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a55      	ldr	r2, [pc, #340]	; (8006578 <HAL_RCC_OscConfig+0x520>)
 8006424:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006428:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800642a:	f7fb fc3f 	bl	8001cac <HAL_GetTick>
 800642e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006430:	e008      	b.n	8006444 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006432:	f7fb fc3b 	bl	8001cac <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	2b02      	cmp	r3, #2
 800643e:	d901      	bls.n	8006444 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e212      	b.n	800686a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006444:	4b4c      	ldr	r3, [pc, #304]	; (8006578 <HAL_RCC_OscConfig+0x520>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1f0      	bne.n	8006432 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0308 	and.w	r3, r3, #8
 8006458:	2b00      	cmp	r3, #0
 800645a:	d036      	beq.n	80064ca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	695b      	ldr	r3, [r3, #20]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d019      	beq.n	8006498 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006464:	4b44      	ldr	r3, [pc, #272]	; (8006578 <HAL_RCC_OscConfig+0x520>)
 8006466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006468:	4a43      	ldr	r2, [pc, #268]	; (8006578 <HAL_RCC_OscConfig+0x520>)
 800646a:	f043 0301 	orr.w	r3, r3, #1
 800646e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006470:	f7fb fc1c 	bl	8001cac <HAL_GetTick>
 8006474:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006476:	e008      	b.n	800648a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006478:	f7fb fc18 	bl	8001cac <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	2b02      	cmp	r3, #2
 8006484:	d901      	bls.n	800648a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e1ef      	b.n	800686a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800648a:	4b3b      	ldr	r3, [pc, #236]	; (8006578 <HAL_RCC_OscConfig+0x520>)
 800648c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800648e:	f003 0302 	and.w	r3, r3, #2
 8006492:	2b00      	cmp	r3, #0
 8006494:	d0f0      	beq.n	8006478 <HAL_RCC_OscConfig+0x420>
 8006496:	e018      	b.n	80064ca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006498:	4b37      	ldr	r3, [pc, #220]	; (8006578 <HAL_RCC_OscConfig+0x520>)
 800649a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800649c:	4a36      	ldr	r2, [pc, #216]	; (8006578 <HAL_RCC_OscConfig+0x520>)
 800649e:	f023 0301 	bic.w	r3, r3, #1
 80064a2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064a4:	f7fb fc02 	bl	8001cac <HAL_GetTick>
 80064a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80064aa:	e008      	b.n	80064be <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064ac:	f7fb fbfe 	bl	8001cac <HAL_GetTick>
 80064b0:	4602      	mov	r2, r0
 80064b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d901      	bls.n	80064be <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e1d5      	b.n	800686a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80064be:	4b2e      	ldr	r3, [pc, #184]	; (8006578 <HAL_RCC_OscConfig+0x520>)
 80064c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064c2:	f003 0302 	and.w	r3, r3, #2
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1f0      	bne.n	80064ac <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 0320 	and.w	r3, r3, #32
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d036      	beq.n	8006544 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d019      	beq.n	8006512 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80064de:	4b26      	ldr	r3, [pc, #152]	; (8006578 <HAL_RCC_OscConfig+0x520>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a25      	ldr	r2, [pc, #148]	; (8006578 <HAL_RCC_OscConfig+0x520>)
 80064e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80064e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80064ea:	f7fb fbdf 	bl	8001cac <HAL_GetTick>
 80064ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80064f0:	e008      	b.n	8006504 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80064f2:	f7fb fbdb 	bl	8001cac <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d901      	bls.n	8006504 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e1b2      	b.n	800686a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006504:	4b1c      	ldr	r3, [pc, #112]	; (8006578 <HAL_RCC_OscConfig+0x520>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d0f0      	beq.n	80064f2 <HAL_RCC_OscConfig+0x49a>
 8006510:	e018      	b.n	8006544 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006512:	4b19      	ldr	r3, [pc, #100]	; (8006578 <HAL_RCC_OscConfig+0x520>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a18      	ldr	r2, [pc, #96]	; (8006578 <HAL_RCC_OscConfig+0x520>)
 8006518:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800651c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800651e:	f7fb fbc5 	bl	8001cac <HAL_GetTick>
 8006522:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006524:	e008      	b.n	8006538 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006526:	f7fb fbc1 	bl	8001cac <HAL_GetTick>
 800652a:	4602      	mov	r2, r0
 800652c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	2b02      	cmp	r3, #2
 8006532:	d901      	bls.n	8006538 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8006534:	2303      	movs	r3, #3
 8006536:	e198      	b.n	800686a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006538:	4b0f      	ldr	r3, [pc, #60]	; (8006578 <HAL_RCC_OscConfig+0x520>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1f0      	bne.n	8006526 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0304 	and.w	r3, r3, #4
 800654c:	2b00      	cmp	r3, #0
 800654e:	f000 8085 	beq.w	800665c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006552:	4b0a      	ldr	r3, [pc, #40]	; (800657c <HAL_RCC_OscConfig+0x524>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a09      	ldr	r2, [pc, #36]	; (800657c <HAL_RCC_OscConfig+0x524>)
 8006558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800655c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800655e:	f7fb fba5 	bl	8001cac <HAL_GetTick>
 8006562:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006564:	e00c      	b.n	8006580 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006566:	f7fb fba1 	bl	8001cac <HAL_GetTick>
 800656a:	4602      	mov	r2, r0
 800656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656e:	1ad3      	subs	r3, r2, r3
 8006570:	2b64      	cmp	r3, #100	; 0x64
 8006572:	d905      	bls.n	8006580 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006574:	2303      	movs	r3, #3
 8006576:	e178      	b.n	800686a <HAL_RCC_OscConfig+0x812>
 8006578:	58024400 	.word	0x58024400
 800657c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006580:	4b96      	ldr	r3, [pc, #600]	; (80067dc <HAL_RCC_OscConfig+0x784>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006588:	2b00      	cmp	r3, #0
 800658a:	d0ec      	beq.n	8006566 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d106      	bne.n	80065a2 <HAL_RCC_OscConfig+0x54a>
 8006594:	4b92      	ldr	r3, [pc, #584]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 8006596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006598:	4a91      	ldr	r2, [pc, #580]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 800659a:	f043 0301 	orr.w	r3, r3, #1
 800659e:	6713      	str	r3, [r2, #112]	; 0x70
 80065a0:	e02d      	b.n	80065fe <HAL_RCC_OscConfig+0x5a6>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10c      	bne.n	80065c4 <HAL_RCC_OscConfig+0x56c>
 80065aa:	4b8d      	ldr	r3, [pc, #564]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 80065ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ae:	4a8c      	ldr	r2, [pc, #560]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 80065b0:	f023 0301 	bic.w	r3, r3, #1
 80065b4:	6713      	str	r3, [r2, #112]	; 0x70
 80065b6:	4b8a      	ldr	r3, [pc, #552]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 80065b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ba:	4a89      	ldr	r2, [pc, #548]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 80065bc:	f023 0304 	bic.w	r3, r3, #4
 80065c0:	6713      	str	r3, [r2, #112]	; 0x70
 80065c2:	e01c      	b.n	80065fe <HAL_RCC_OscConfig+0x5a6>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	2b05      	cmp	r3, #5
 80065ca:	d10c      	bne.n	80065e6 <HAL_RCC_OscConfig+0x58e>
 80065cc:	4b84      	ldr	r3, [pc, #528]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 80065ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d0:	4a83      	ldr	r2, [pc, #524]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 80065d2:	f043 0304 	orr.w	r3, r3, #4
 80065d6:	6713      	str	r3, [r2, #112]	; 0x70
 80065d8:	4b81      	ldr	r3, [pc, #516]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 80065da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065dc:	4a80      	ldr	r2, [pc, #512]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 80065de:	f043 0301 	orr.w	r3, r3, #1
 80065e2:	6713      	str	r3, [r2, #112]	; 0x70
 80065e4:	e00b      	b.n	80065fe <HAL_RCC_OscConfig+0x5a6>
 80065e6:	4b7e      	ldr	r3, [pc, #504]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 80065e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ea:	4a7d      	ldr	r2, [pc, #500]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 80065ec:	f023 0301 	bic.w	r3, r3, #1
 80065f0:	6713      	str	r3, [r2, #112]	; 0x70
 80065f2:	4b7b      	ldr	r3, [pc, #492]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 80065f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f6:	4a7a      	ldr	r2, [pc, #488]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 80065f8:	f023 0304 	bic.w	r3, r3, #4
 80065fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d015      	beq.n	8006632 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006606:	f7fb fb51 	bl	8001cac <HAL_GetTick>
 800660a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800660c:	e00a      	b.n	8006624 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800660e:	f7fb fb4d 	bl	8001cac <HAL_GetTick>
 8006612:	4602      	mov	r2, r0
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	f241 3288 	movw	r2, #5000	; 0x1388
 800661c:	4293      	cmp	r3, r2
 800661e:	d901      	bls.n	8006624 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	e122      	b.n	800686a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006624:	4b6e      	ldr	r3, [pc, #440]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 8006626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006628:	f003 0302 	and.w	r3, r3, #2
 800662c:	2b00      	cmp	r3, #0
 800662e:	d0ee      	beq.n	800660e <HAL_RCC_OscConfig+0x5b6>
 8006630:	e014      	b.n	800665c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006632:	f7fb fb3b 	bl	8001cac <HAL_GetTick>
 8006636:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006638:	e00a      	b.n	8006650 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800663a:	f7fb fb37 	bl	8001cac <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	f241 3288 	movw	r2, #5000	; 0x1388
 8006648:	4293      	cmp	r3, r2
 800664a:	d901      	bls.n	8006650 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e10c      	b.n	800686a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006650:	4b63      	ldr	r3, [pc, #396]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 8006652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006654:	f003 0302 	and.w	r3, r3, #2
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1ee      	bne.n	800663a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006660:	2b00      	cmp	r3, #0
 8006662:	f000 8101 	beq.w	8006868 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006666:	4b5e      	ldr	r3, [pc, #376]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800666e:	2b18      	cmp	r3, #24
 8006670:	f000 80bc 	beq.w	80067ec <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006678:	2b02      	cmp	r3, #2
 800667a:	f040 8095 	bne.w	80067a8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800667e:	4b58      	ldr	r3, [pc, #352]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a57      	ldr	r2, [pc, #348]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 8006684:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800668a:	f7fb fb0f 	bl	8001cac <HAL_GetTick>
 800668e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006690:	e008      	b.n	80066a4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006692:	f7fb fb0b 	bl	8001cac <HAL_GetTick>
 8006696:	4602      	mov	r2, r0
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	2b02      	cmp	r3, #2
 800669e:	d901      	bls.n	80066a4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80066a0:	2303      	movs	r3, #3
 80066a2:	e0e2      	b.n	800686a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80066a4:	4b4e      	ldr	r3, [pc, #312]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1f0      	bne.n	8006692 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066b0:	4b4b      	ldr	r3, [pc, #300]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 80066b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066b4:	4b4b      	ldr	r3, [pc, #300]	; (80067e4 <HAL_RCC_OscConfig+0x78c>)
 80066b6:	4013      	ands	r3, r2
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80066c0:	0112      	lsls	r2, r2, #4
 80066c2:	430a      	orrs	r2, r1
 80066c4:	4946      	ldr	r1, [pc, #280]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	628b      	str	r3, [r1, #40]	; 0x28
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ce:	3b01      	subs	r3, #1
 80066d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d8:	3b01      	subs	r3, #1
 80066da:	025b      	lsls	r3, r3, #9
 80066dc:	b29b      	uxth	r3, r3
 80066de:	431a      	orrs	r2, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e4:	3b01      	subs	r3, #1
 80066e6:	041b      	lsls	r3, r3, #16
 80066e8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80066ec:	431a      	orrs	r2, r3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066f2:	3b01      	subs	r3, #1
 80066f4:	061b      	lsls	r3, r3, #24
 80066f6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80066fa:	4939      	ldr	r1, [pc, #228]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 80066fc:	4313      	orrs	r3, r2
 80066fe:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006700:	4b37      	ldr	r3, [pc, #220]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 8006702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006704:	4a36      	ldr	r2, [pc, #216]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 8006706:	f023 0301 	bic.w	r3, r3, #1
 800670a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800670c:	4b34      	ldr	r3, [pc, #208]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 800670e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006710:	4b35      	ldr	r3, [pc, #212]	; (80067e8 <HAL_RCC_OscConfig+0x790>)
 8006712:	4013      	ands	r3, r2
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006718:	00d2      	lsls	r2, r2, #3
 800671a:	4931      	ldr	r1, [pc, #196]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 800671c:	4313      	orrs	r3, r2
 800671e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006720:	4b2f      	ldr	r3, [pc, #188]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 8006722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006724:	f023 020c 	bic.w	r2, r3, #12
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672c:	492c      	ldr	r1, [pc, #176]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 800672e:	4313      	orrs	r3, r2
 8006730:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006732:	4b2b      	ldr	r3, [pc, #172]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 8006734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006736:	f023 0202 	bic.w	r2, r3, #2
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800673e:	4928      	ldr	r1, [pc, #160]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 8006740:	4313      	orrs	r3, r2
 8006742:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006744:	4b26      	ldr	r3, [pc, #152]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 8006746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006748:	4a25      	ldr	r2, [pc, #148]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 800674a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800674e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006750:	4b23      	ldr	r3, [pc, #140]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 8006752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006754:	4a22      	ldr	r2, [pc, #136]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 8006756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800675a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800675c:	4b20      	ldr	r3, [pc, #128]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 800675e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006760:	4a1f      	ldr	r2, [pc, #124]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 8006762:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006766:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006768:	4b1d      	ldr	r3, [pc, #116]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 800676a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676c:	4a1c      	ldr	r2, [pc, #112]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 800676e:	f043 0301 	orr.w	r3, r3, #1
 8006772:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006774:	4b1a      	ldr	r3, [pc, #104]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a19      	ldr	r2, [pc, #100]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 800677a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800677e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006780:	f7fb fa94 	bl	8001cac <HAL_GetTick>
 8006784:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006786:	e008      	b.n	800679a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006788:	f7fb fa90 	bl	8001cac <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	2b02      	cmp	r3, #2
 8006794:	d901      	bls.n	800679a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e067      	b.n	800686a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800679a:	4b11      	ldr	r3, [pc, #68]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d0f0      	beq.n	8006788 <HAL_RCC_OscConfig+0x730>
 80067a6:	e05f      	b.n	8006868 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067a8:	4b0d      	ldr	r3, [pc, #52]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a0c      	ldr	r2, [pc, #48]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 80067ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067b4:	f7fb fa7a 	bl	8001cac <HAL_GetTick>
 80067b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067ba:	e008      	b.n	80067ce <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067bc:	f7fb fa76 	bl	8001cac <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d901      	bls.n	80067ce <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e04d      	b.n	800686a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067ce:	4b04      	ldr	r3, [pc, #16]	; (80067e0 <HAL_RCC_OscConfig+0x788>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1f0      	bne.n	80067bc <HAL_RCC_OscConfig+0x764>
 80067da:	e045      	b.n	8006868 <HAL_RCC_OscConfig+0x810>
 80067dc:	58024800 	.word	0x58024800
 80067e0:	58024400 	.word	0x58024400
 80067e4:	fffffc0c 	.word	0xfffffc0c
 80067e8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80067ec:	4b21      	ldr	r3, [pc, #132]	; (8006874 <HAL_RCC_OscConfig+0x81c>)
 80067ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80067f2:	4b20      	ldr	r3, [pc, #128]	; (8006874 <HAL_RCC_OscConfig+0x81c>)
 80067f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d031      	beq.n	8006864 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	f003 0203 	and.w	r2, r3, #3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800680a:	429a      	cmp	r2, r3
 800680c:	d12a      	bne.n	8006864 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	091b      	lsrs	r3, r3, #4
 8006812:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800681a:	429a      	cmp	r2, r3
 800681c:	d122      	bne.n	8006864 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006828:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800682a:	429a      	cmp	r2, r3
 800682c:	d11a      	bne.n	8006864 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	0a5b      	lsrs	r3, r3, #9
 8006832:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800683a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800683c:	429a      	cmp	r2, r3
 800683e:	d111      	bne.n	8006864 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	0c1b      	lsrs	r3, r3, #16
 8006844:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800684e:	429a      	cmp	r2, r3
 8006850:	d108      	bne.n	8006864 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	0e1b      	lsrs	r3, r3, #24
 8006856:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800685e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006860:	429a      	cmp	r2, r3
 8006862:	d001      	beq.n	8006868 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e000      	b.n	800686a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3730      	adds	r7, #48	; 0x30
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	58024400 	.word	0x58024400

08006878 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b086      	sub	sp, #24
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d101      	bne.n	800688c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e19c      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800688c:	4b8a      	ldr	r3, [pc, #552]	; (8006ab8 <HAL_RCC_ClockConfig+0x240>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 030f 	and.w	r3, r3, #15
 8006894:	683a      	ldr	r2, [r7, #0]
 8006896:	429a      	cmp	r2, r3
 8006898:	d910      	bls.n	80068bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800689a:	4b87      	ldr	r3, [pc, #540]	; (8006ab8 <HAL_RCC_ClockConfig+0x240>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f023 020f 	bic.w	r2, r3, #15
 80068a2:	4985      	ldr	r1, [pc, #532]	; (8006ab8 <HAL_RCC_ClockConfig+0x240>)
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068aa:	4b83      	ldr	r3, [pc, #524]	; (8006ab8 <HAL_RCC_ClockConfig+0x240>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 030f 	and.w	r3, r3, #15
 80068b2:	683a      	ldr	r2, [r7, #0]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d001      	beq.n	80068bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e184      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0304 	and.w	r3, r3, #4
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d010      	beq.n	80068ea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	691a      	ldr	r2, [r3, #16]
 80068cc:	4b7b      	ldr	r3, [pc, #492]	; (8006abc <HAL_RCC_ClockConfig+0x244>)
 80068ce:	699b      	ldr	r3, [r3, #24]
 80068d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d908      	bls.n	80068ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80068d8:	4b78      	ldr	r3, [pc, #480]	; (8006abc <HAL_RCC_ClockConfig+0x244>)
 80068da:	699b      	ldr	r3, [r3, #24]
 80068dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	4975      	ldr	r1, [pc, #468]	; (8006abc <HAL_RCC_ClockConfig+0x244>)
 80068e6:	4313      	orrs	r3, r2
 80068e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0308 	and.w	r3, r3, #8
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d010      	beq.n	8006918 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	695a      	ldr	r2, [r3, #20]
 80068fa:	4b70      	ldr	r3, [pc, #448]	; (8006abc <HAL_RCC_ClockConfig+0x244>)
 80068fc:	69db      	ldr	r3, [r3, #28]
 80068fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006902:	429a      	cmp	r2, r3
 8006904:	d908      	bls.n	8006918 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006906:	4b6d      	ldr	r3, [pc, #436]	; (8006abc <HAL_RCC_ClockConfig+0x244>)
 8006908:	69db      	ldr	r3, [r3, #28]
 800690a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	695b      	ldr	r3, [r3, #20]
 8006912:	496a      	ldr	r1, [pc, #424]	; (8006abc <HAL_RCC_ClockConfig+0x244>)
 8006914:	4313      	orrs	r3, r2
 8006916:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0310 	and.w	r3, r3, #16
 8006920:	2b00      	cmp	r3, #0
 8006922:	d010      	beq.n	8006946 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	699a      	ldr	r2, [r3, #24]
 8006928:	4b64      	ldr	r3, [pc, #400]	; (8006abc <HAL_RCC_ClockConfig+0x244>)
 800692a:	69db      	ldr	r3, [r3, #28]
 800692c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006930:	429a      	cmp	r2, r3
 8006932:	d908      	bls.n	8006946 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006934:	4b61      	ldr	r3, [pc, #388]	; (8006abc <HAL_RCC_ClockConfig+0x244>)
 8006936:	69db      	ldr	r3, [r3, #28]
 8006938:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	495e      	ldr	r1, [pc, #376]	; (8006abc <HAL_RCC_ClockConfig+0x244>)
 8006942:	4313      	orrs	r3, r2
 8006944:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0320 	and.w	r3, r3, #32
 800694e:	2b00      	cmp	r3, #0
 8006950:	d010      	beq.n	8006974 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	69da      	ldr	r2, [r3, #28]
 8006956:	4b59      	ldr	r3, [pc, #356]	; (8006abc <HAL_RCC_ClockConfig+0x244>)
 8006958:	6a1b      	ldr	r3, [r3, #32]
 800695a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800695e:	429a      	cmp	r2, r3
 8006960:	d908      	bls.n	8006974 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006962:	4b56      	ldr	r3, [pc, #344]	; (8006abc <HAL_RCC_ClockConfig+0x244>)
 8006964:	6a1b      	ldr	r3, [r3, #32]
 8006966:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	69db      	ldr	r3, [r3, #28]
 800696e:	4953      	ldr	r1, [pc, #332]	; (8006abc <HAL_RCC_ClockConfig+0x244>)
 8006970:	4313      	orrs	r3, r2
 8006972:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0302 	and.w	r3, r3, #2
 800697c:	2b00      	cmp	r3, #0
 800697e:	d010      	beq.n	80069a2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	68da      	ldr	r2, [r3, #12]
 8006984:	4b4d      	ldr	r3, [pc, #308]	; (8006abc <HAL_RCC_ClockConfig+0x244>)
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	f003 030f 	and.w	r3, r3, #15
 800698c:	429a      	cmp	r2, r3
 800698e:	d908      	bls.n	80069a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006990:	4b4a      	ldr	r3, [pc, #296]	; (8006abc <HAL_RCC_ClockConfig+0x244>)
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	f023 020f 	bic.w	r2, r3, #15
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	4947      	ldr	r1, [pc, #284]	; (8006abc <HAL_RCC_ClockConfig+0x244>)
 800699e:	4313      	orrs	r3, r2
 80069a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 0301 	and.w	r3, r3, #1
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d055      	beq.n	8006a5a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80069ae:	4b43      	ldr	r3, [pc, #268]	; (8006abc <HAL_RCC_ClockConfig+0x244>)
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	4940      	ldr	r1, [pc, #256]	; (8006abc <HAL_RCC_ClockConfig+0x244>)
 80069bc:	4313      	orrs	r3, r2
 80069be:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d107      	bne.n	80069d8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80069c8:	4b3c      	ldr	r3, [pc, #240]	; (8006abc <HAL_RCC_ClockConfig+0x244>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d121      	bne.n	8006a18 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e0f6      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	2b03      	cmp	r3, #3
 80069de:	d107      	bne.n	80069f0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80069e0:	4b36      	ldr	r3, [pc, #216]	; (8006abc <HAL_RCC_ClockConfig+0x244>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d115      	bne.n	8006a18 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e0ea      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d107      	bne.n	8006a08 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80069f8:	4b30      	ldr	r3, [pc, #192]	; (8006abc <HAL_RCC_ClockConfig+0x244>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d109      	bne.n	8006a18 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e0de      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a08:	4b2c      	ldr	r3, [pc, #176]	; (8006abc <HAL_RCC_ClockConfig+0x244>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0304 	and.w	r3, r3, #4
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d101      	bne.n	8006a18 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e0d6      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006a18:	4b28      	ldr	r3, [pc, #160]	; (8006abc <HAL_RCC_ClockConfig+0x244>)
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	f023 0207 	bic.w	r2, r3, #7
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	4925      	ldr	r1, [pc, #148]	; (8006abc <HAL_RCC_ClockConfig+0x244>)
 8006a26:	4313      	orrs	r3, r2
 8006a28:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a2a:	f7fb f93f 	bl	8001cac <HAL_GetTick>
 8006a2e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a30:	e00a      	b.n	8006a48 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a32:	f7fb f93b 	bl	8001cac <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d901      	bls.n	8006a48 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006a44:	2303      	movs	r3, #3
 8006a46:	e0be      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a48:	4b1c      	ldr	r3, [pc, #112]	; (8006abc <HAL_RCC_ClockConfig+0x244>)
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	00db      	lsls	r3, r3, #3
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d1eb      	bne.n	8006a32 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 0302 	and.w	r3, r3, #2
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d010      	beq.n	8006a88 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	68da      	ldr	r2, [r3, #12]
 8006a6a:	4b14      	ldr	r3, [pc, #80]	; (8006abc <HAL_RCC_ClockConfig+0x244>)
 8006a6c:	699b      	ldr	r3, [r3, #24]
 8006a6e:	f003 030f 	and.w	r3, r3, #15
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d208      	bcs.n	8006a88 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a76:	4b11      	ldr	r3, [pc, #68]	; (8006abc <HAL_RCC_ClockConfig+0x244>)
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	f023 020f 	bic.w	r2, r3, #15
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	490e      	ldr	r1, [pc, #56]	; (8006abc <HAL_RCC_ClockConfig+0x244>)
 8006a84:	4313      	orrs	r3, r2
 8006a86:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a88:	4b0b      	ldr	r3, [pc, #44]	; (8006ab8 <HAL_RCC_ClockConfig+0x240>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 030f 	and.w	r3, r3, #15
 8006a90:	683a      	ldr	r2, [r7, #0]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d214      	bcs.n	8006ac0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a96:	4b08      	ldr	r3, [pc, #32]	; (8006ab8 <HAL_RCC_ClockConfig+0x240>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f023 020f 	bic.w	r2, r3, #15
 8006a9e:	4906      	ldr	r1, [pc, #24]	; (8006ab8 <HAL_RCC_ClockConfig+0x240>)
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aa6:	4b04      	ldr	r3, [pc, #16]	; (8006ab8 <HAL_RCC_ClockConfig+0x240>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 030f 	and.w	r3, r3, #15
 8006aae:	683a      	ldr	r2, [r7, #0]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d005      	beq.n	8006ac0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e086      	b.n	8006bc6 <HAL_RCC_ClockConfig+0x34e>
 8006ab8:	52002000 	.word	0x52002000
 8006abc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0304 	and.w	r3, r3, #4
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d010      	beq.n	8006aee <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	691a      	ldr	r2, [r3, #16]
 8006ad0:	4b3f      	ldr	r3, [pc, #252]	; (8006bd0 <HAL_RCC_ClockConfig+0x358>)
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d208      	bcs.n	8006aee <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006adc:	4b3c      	ldr	r3, [pc, #240]	; (8006bd0 <HAL_RCC_ClockConfig+0x358>)
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	4939      	ldr	r1, [pc, #228]	; (8006bd0 <HAL_RCC_ClockConfig+0x358>)
 8006aea:	4313      	orrs	r3, r2
 8006aec:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0308 	and.w	r3, r3, #8
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d010      	beq.n	8006b1c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	695a      	ldr	r2, [r3, #20]
 8006afe:	4b34      	ldr	r3, [pc, #208]	; (8006bd0 <HAL_RCC_ClockConfig+0x358>)
 8006b00:	69db      	ldr	r3, [r3, #28]
 8006b02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d208      	bcs.n	8006b1c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006b0a:	4b31      	ldr	r3, [pc, #196]	; (8006bd0 <HAL_RCC_ClockConfig+0x358>)
 8006b0c:	69db      	ldr	r3, [r3, #28]
 8006b0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	695b      	ldr	r3, [r3, #20]
 8006b16:	492e      	ldr	r1, [pc, #184]	; (8006bd0 <HAL_RCC_ClockConfig+0x358>)
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 0310 	and.w	r3, r3, #16
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d010      	beq.n	8006b4a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	699a      	ldr	r2, [r3, #24]
 8006b2c:	4b28      	ldr	r3, [pc, #160]	; (8006bd0 <HAL_RCC_ClockConfig+0x358>)
 8006b2e:	69db      	ldr	r3, [r3, #28]
 8006b30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d208      	bcs.n	8006b4a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006b38:	4b25      	ldr	r3, [pc, #148]	; (8006bd0 <HAL_RCC_ClockConfig+0x358>)
 8006b3a:	69db      	ldr	r3, [r3, #28]
 8006b3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	4922      	ldr	r1, [pc, #136]	; (8006bd0 <HAL_RCC_ClockConfig+0x358>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0320 	and.w	r3, r3, #32
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d010      	beq.n	8006b78 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	69da      	ldr	r2, [r3, #28]
 8006b5a:	4b1d      	ldr	r3, [pc, #116]	; (8006bd0 <HAL_RCC_ClockConfig+0x358>)
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d208      	bcs.n	8006b78 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006b66:	4b1a      	ldr	r3, [pc, #104]	; (8006bd0 <HAL_RCC_ClockConfig+0x358>)
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	69db      	ldr	r3, [r3, #28]
 8006b72:	4917      	ldr	r1, [pc, #92]	; (8006bd0 <HAL_RCC_ClockConfig+0x358>)
 8006b74:	4313      	orrs	r3, r2
 8006b76:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006b78:	f000 f834 	bl	8006be4 <HAL_RCC_GetSysClockFreq>
 8006b7c:	4601      	mov	r1, r0
 8006b7e:	4b14      	ldr	r3, [pc, #80]	; (8006bd0 <HAL_RCC_ClockConfig+0x358>)
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	0a1b      	lsrs	r3, r3, #8
 8006b84:	f003 030f 	and.w	r3, r3, #15
 8006b88:	4a12      	ldr	r2, [pc, #72]	; (8006bd4 <HAL_RCC_ClockConfig+0x35c>)
 8006b8a:	5cd3      	ldrb	r3, [r2, r3]
 8006b8c:	f003 031f 	and.w	r3, r3, #31
 8006b90:	fa21 f303 	lsr.w	r3, r1, r3
 8006b94:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b96:	4b0e      	ldr	r3, [pc, #56]	; (8006bd0 <HAL_RCC_ClockConfig+0x358>)
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	f003 030f 	and.w	r3, r3, #15
 8006b9e:	4a0d      	ldr	r2, [pc, #52]	; (8006bd4 <HAL_RCC_ClockConfig+0x35c>)
 8006ba0:	5cd3      	ldrb	r3, [r2, r3]
 8006ba2:	f003 031f 	and.w	r3, r3, #31
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bac:	4a0a      	ldr	r2, [pc, #40]	; (8006bd8 <HAL_RCC_ClockConfig+0x360>)
 8006bae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006bb0:	4a0a      	ldr	r2, [pc, #40]	; (8006bdc <HAL_RCC_ClockConfig+0x364>)
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006bb6:	4b0a      	ldr	r3, [pc, #40]	; (8006be0 <HAL_RCC_ClockConfig+0x368>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7fb f82c 	bl	8001c18 <HAL_InitTick>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3718      	adds	r7, #24
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	58024400 	.word	0x58024400
 8006bd4:	08011cf8 	.word	0x08011cf8
 8006bd8:	24000004 	.word	0x24000004
 8006bdc:	24000000 	.word	0x24000000
 8006be0:	24000008 	.word	0x24000008

08006be4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b089      	sub	sp, #36	; 0x24
 8006be8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006bea:	4baf      	ldr	r3, [pc, #700]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bf2:	2b18      	cmp	r3, #24
 8006bf4:	f200 814e 	bhi.w	8006e94 <HAL_RCC_GetSysClockFreq+0x2b0>
 8006bf8:	a201      	add	r2, pc, #4	; (adr r2, 8006c00 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bfe:	bf00      	nop
 8006c00:	08006c65 	.word	0x08006c65
 8006c04:	08006e95 	.word	0x08006e95
 8006c08:	08006e95 	.word	0x08006e95
 8006c0c:	08006e95 	.word	0x08006e95
 8006c10:	08006e95 	.word	0x08006e95
 8006c14:	08006e95 	.word	0x08006e95
 8006c18:	08006e95 	.word	0x08006e95
 8006c1c:	08006e95 	.word	0x08006e95
 8006c20:	08006c8b 	.word	0x08006c8b
 8006c24:	08006e95 	.word	0x08006e95
 8006c28:	08006e95 	.word	0x08006e95
 8006c2c:	08006e95 	.word	0x08006e95
 8006c30:	08006e95 	.word	0x08006e95
 8006c34:	08006e95 	.word	0x08006e95
 8006c38:	08006e95 	.word	0x08006e95
 8006c3c:	08006e95 	.word	0x08006e95
 8006c40:	08006c91 	.word	0x08006c91
 8006c44:	08006e95 	.word	0x08006e95
 8006c48:	08006e95 	.word	0x08006e95
 8006c4c:	08006e95 	.word	0x08006e95
 8006c50:	08006e95 	.word	0x08006e95
 8006c54:	08006e95 	.word	0x08006e95
 8006c58:	08006e95 	.word	0x08006e95
 8006c5c:	08006e95 	.word	0x08006e95
 8006c60:	08006c97 	.word	0x08006c97
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c64:	4b90      	ldr	r3, [pc, #576]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 0320 	and.w	r3, r3, #32
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d009      	beq.n	8006c84 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c70:	4b8d      	ldr	r3, [pc, #564]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	08db      	lsrs	r3, r3, #3
 8006c76:	f003 0303 	and.w	r3, r3, #3
 8006c7a:	4a8c      	ldr	r2, [pc, #560]	; (8006eac <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c80:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006c82:	e10a      	b.n	8006e9a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006c84:	4b89      	ldr	r3, [pc, #548]	; (8006eac <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006c86:	61bb      	str	r3, [r7, #24]
    break;
 8006c88:	e107      	b.n	8006e9a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006c8a:	4b89      	ldr	r3, [pc, #548]	; (8006eb0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006c8c:	61bb      	str	r3, [r7, #24]
    break;
 8006c8e:	e104      	b.n	8006e9a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006c90:	4b88      	ldr	r3, [pc, #544]	; (8006eb4 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8006c92:	61bb      	str	r3, [r7, #24]
    break;
 8006c94:	e101      	b.n	8006e9a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c96:	4b84      	ldr	r3, [pc, #528]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c9a:	f003 0303 	and.w	r3, r3, #3
 8006c9e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006ca0:	4b81      	ldr	r3, [pc, #516]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca4:	091b      	lsrs	r3, r3, #4
 8006ca6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006caa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006cac:	4b7e      	ldr	r3, [pc, #504]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb0:	f003 0301 	and.w	r3, r3, #1
 8006cb4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006cb6:	4b7c      	ldr	r3, [pc, #496]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cba:	08db      	lsrs	r3, r3, #3
 8006cbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	fb02 f303 	mul.w	r3, r2, r3
 8006cc6:	ee07 3a90 	vmov	s15, r3
 8006cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cce:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f000 80da 	beq.w	8006e8e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d05a      	beq.n	8006d96 <HAL_RCC_GetSysClockFreq+0x1b2>
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d302      	bcc.n	8006cea <HAL_RCC_GetSysClockFreq+0x106>
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d078      	beq.n	8006dda <HAL_RCC_GetSysClockFreq+0x1f6>
 8006ce8:	e099      	b.n	8006e1e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cea:	4b6f      	ldr	r3, [pc, #444]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0320 	and.w	r3, r3, #32
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d02d      	beq.n	8006d52 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006cf6:	4b6c      	ldr	r3, [pc, #432]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	08db      	lsrs	r3, r3, #3
 8006cfc:	f003 0303 	and.w	r3, r3, #3
 8006d00:	4a6a      	ldr	r2, [pc, #424]	; (8006eac <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006d02:	fa22 f303 	lsr.w	r3, r2, r3
 8006d06:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	ee07 3a90 	vmov	s15, r3
 8006d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	ee07 3a90 	vmov	s15, r3
 8006d18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d20:	4b61      	ldr	r3, [pc, #388]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d28:	ee07 3a90 	vmov	s15, r3
 8006d2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d30:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d34:	eddf 5a60 	vldr	s11, [pc, #384]	; 8006eb8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006d38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d4c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006d50:	e087      	b.n	8006e62 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	ee07 3a90 	vmov	s15, r3
 8006d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d5c:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006ebc <HAL_RCC_GetSysClockFreq+0x2d8>
 8006d60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d64:	4b50      	ldr	r3, [pc, #320]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d6c:	ee07 3a90 	vmov	s15, r3
 8006d70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d74:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d78:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8006eb8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006d7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d90:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d94:	e065      	b.n	8006e62 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	ee07 3a90 	vmov	s15, r3
 8006d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006da0:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006ec0 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006da4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006da8:	4b3f      	ldr	r3, [pc, #252]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006db0:	ee07 3a90 	vmov	s15, r3
 8006db4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006db8:	ed97 6a02 	vldr	s12, [r7, #8]
 8006dbc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006eb8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006dc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dd4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dd8:	e043      	b.n	8006e62 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	ee07 3a90 	vmov	s15, r3
 8006de0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006de4:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006ec4 <HAL_RCC_GetSysClockFreq+0x2e0>
 8006de8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dec:	4b2e      	ldr	r3, [pc, #184]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006df4:	ee07 3a90 	vmov	s15, r3
 8006df8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dfc:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e00:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006eb8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006e04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e18:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e1c:	e021      	b.n	8006e62 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	ee07 3a90 	vmov	s15, r3
 8006e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e28:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006ec0 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006e2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e30:	4b1d      	ldr	r3, [pc, #116]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e38:	ee07 3a90 	vmov	s15, r3
 8006e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e40:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e44:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8006eb8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006e48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e5c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e60:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006e62:	4b11      	ldr	r3, [pc, #68]	; (8006ea8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e66:	0a5b      	lsrs	r3, r3, #9
 8006e68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	ee07 3a90 	vmov	s15, r3
 8006e76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e86:	ee17 3a90 	vmov	r3, s15
 8006e8a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006e8c:	e005      	b.n	8006e9a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	61bb      	str	r3, [r7, #24]
    break;
 8006e92:	e002      	b.n	8006e9a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006e94:	4b06      	ldr	r3, [pc, #24]	; (8006eb0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006e96:	61bb      	str	r3, [r7, #24]
    break;
 8006e98:	bf00      	nop
  }

  return sysclockfreq;
 8006e9a:	69bb      	ldr	r3, [r7, #24]
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3724      	adds	r7, #36	; 0x24
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	58024400 	.word	0x58024400
 8006eac:	03d09000 	.word	0x03d09000
 8006eb0:	003d0900 	.word	0x003d0900
 8006eb4:	017d7840 	.word	0x017d7840
 8006eb8:	46000000 	.word	0x46000000
 8006ebc:	4c742400 	.word	0x4c742400
 8006ec0:	4a742400 	.word	0x4a742400
 8006ec4:	4bbebc20 	.word	0x4bbebc20

08006ec8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006ece:	f7ff fe89 	bl	8006be4 <HAL_RCC_GetSysClockFreq>
 8006ed2:	4601      	mov	r1, r0
 8006ed4:	4b10      	ldr	r3, [pc, #64]	; (8006f18 <HAL_RCC_GetHCLKFreq+0x50>)
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	0a1b      	lsrs	r3, r3, #8
 8006eda:	f003 030f 	and.w	r3, r3, #15
 8006ede:	4a0f      	ldr	r2, [pc, #60]	; (8006f1c <HAL_RCC_GetHCLKFreq+0x54>)
 8006ee0:	5cd3      	ldrb	r3, [r2, r3]
 8006ee2:	f003 031f 	and.w	r3, r3, #31
 8006ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8006eea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006eec:	4b0a      	ldr	r3, [pc, #40]	; (8006f18 <HAL_RCC_GetHCLKFreq+0x50>)
 8006eee:	699b      	ldr	r3, [r3, #24]
 8006ef0:	f003 030f 	and.w	r3, r3, #15
 8006ef4:	4a09      	ldr	r2, [pc, #36]	; (8006f1c <HAL_RCC_GetHCLKFreq+0x54>)
 8006ef6:	5cd3      	ldrb	r3, [r2, r3]
 8006ef8:	f003 031f 	and.w	r3, r3, #31
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	fa22 f303 	lsr.w	r3, r2, r3
 8006f02:	4a07      	ldr	r2, [pc, #28]	; (8006f20 <HAL_RCC_GetHCLKFreq+0x58>)
 8006f04:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006f06:	4a07      	ldr	r2, [pc, #28]	; (8006f24 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006f0c:	4b04      	ldr	r3, [pc, #16]	; (8006f20 <HAL_RCC_GetHCLKFreq+0x58>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3708      	adds	r7, #8
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	58024400 	.word	0x58024400
 8006f1c:	08011cf8 	.word	0x08011cf8
 8006f20:	24000004 	.word	0x24000004
 8006f24:	24000000 	.word	0x24000000

08006f28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006f2c:	f7ff ffcc 	bl	8006ec8 <HAL_RCC_GetHCLKFreq>
 8006f30:	4601      	mov	r1, r0
 8006f32:	4b06      	ldr	r3, [pc, #24]	; (8006f4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f34:	69db      	ldr	r3, [r3, #28]
 8006f36:	091b      	lsrs	r3, r3, #4
 8006f38:	f003 0307 	and.w	r3, r3, #7
 8006f3c:	4a04      	ldr	r2, [pc, #16]	; (8006f50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006f3e:	5cd3      	ldrb	r3, [r2, r3]
 8006f40:	f003 031f 	and.w	r3, r3, #31
 8006f44:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	58024400 	.word	0x58024400
 8006f50:	08011cf8 	.word	0x08011cf8

08006f54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006f58:	f7ff ffb6 	bl	8006ec8 <HAL_RCC_GetHCLKFreq>
 8006f5c:	4601      	mov	r1, r0
 8006f5e:	4b06      	ldr	r3, [pc, #24]	; (8006f78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f60:	69db      	ldr	r3, [r3, #28]
 8006f62:	0a1b      	lsrs	r3, r3, #8
 8006f64:	f003 0307 	and.w	r3, r3, #7
 8006f68:	4a04      	ldr	r2, [pc, #16]	; (8006f7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006f6a:	5cd3      	ldrb	r3, [r2, r3]
 8006f6c:	f003 031f 	and.w	r3, r3, #31
 8006f70:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	58024400 	.word	0x58024400
 8006f7c:	08011cf8 	.word	0x08011cf8

08006f80 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b086      	sub	sp, #24
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f88:	2300      	movs	r3, #0
 8006f8a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d03d      	beq.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fa0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fa4:	d013      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006fa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006faa:	d802      	bhi.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d007      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006fb0:	e01f      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006fb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006fb6:	d013      	beq.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006fb8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006fbc:	d01c      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006fbe:	e018      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fc0:	4baf      	ldr	r3, [pc, #700]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc4:	4aae      	ldr	r2, [pc, #696]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006fc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006fcc:	e015      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	3304      	adds	r3, #4
 8006fd2:	2102      	movs	r1, #2
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f001 fd43 	bl	8008a60 <RCCEx_PLL2_Config>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006fde:	e00c      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	3324      	adds	r3, #36	; 0x24
 8006fe4:	2102      	movs	r1, #2
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f001 fdec 	bl	8008bc4 <RCCEx_PLL3_Config>
 8006fec:	4603      	mov	r3, r0
 8006fee:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006ff0:	e003      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ff6:	e000      	b.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006ff8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ffa:	7dfb      	ldrb	r3, [r7, #23]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d109      	bne.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007000:	4b9f      	ldr	r3, [pc, #636]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007004:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800700c:	499c      	ldr	r1, [pc, #624]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800700e:	4313      	orrs	r3, r2
 8007010:	650b      	str	r3, [r1, #80]	; 0x50
 8007012:	e001      	b.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007014:	7dfb      	ldrb	r3, [r7, #23]
 8007016:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007020:	2b00      	cmp	r3, #0
 8007022:	d03d      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007028:	2b04      	cmp	r3, #4
 800702a:	d826      	bhi.n	800707a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800702c:	a201      	add	r2, pc, #4	; (adr r2, 8007034 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800702e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007032:	bf00      	nop
 8007034:	08007049 	.word	0x08007049
 8007038:	08007057 	.word	0x08007057
 800703c:	08007069 	.word	0x08007069
 8007040:	08007081 	.word	0x08007081
 8007044:	08007081 	.word	0x08007081
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007048:	4b8d      	ldr	r3, [pc, #564]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800704a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704c:	4a8c      	ldr	r2, [pc, #560]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800704e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007052:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007054:	e015      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	3304      	adds	r3, #4
 800705a:	2100      	movs	r1, #0
 800705c:	4618      	mov	r0, r3
 800705e:	f001 fcff 	bl	8008a60 <RCCEx_PLL2_Config>
 8007062:	4603      	mov	r3, r0
 8007064:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007066:	e00c      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	3324      	adds	r3, #36	; 0x24
 800706c:	2100      	movs	r1, #0
 800706e:	4618      	mov	r0, r3
 8007070:	f001 fda8 	bl	8008bc4 <RCCEx_PLL3_Config>
 8007074:	4603      	mov	r3, r0
 8007076:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007078:	e003      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	75fb      	strb	r3, [r7, #23]
      break;
 800707e:	e000      	b.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8007080:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007082:	7dfb      	ldrb	r3, [r7, #23]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d109      	bne.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007088:	4b7d      	ldr	r3, [pc, #500]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800708a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800708c:	f023 0207 	bic.w	r2, r3, #7
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007094:	497a      	ldr	r1, [pc, #488]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007096:	4313      	orrs	r3, r2
 8007098:	650b      	str	r3, [r1, #80]	; 0x50
 800709a:	e001      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800709c:	7dfb      	ldrb	r3, [r7, #23]
 800709e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d03e      	beq.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070b0:	2b80      	cmp	r3, #128	; 0x80
 80070b2:	d01c      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80070b4:	2b80      	cmp	r3, #128	; 0x80
 80070b6:	d804      	bhi.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d008      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80070bc:	2b40      	cmp	r3, #64	; 0x40
 80070be:	d00d      	beq.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80070c0:	e01e      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80070c2:	2bc0      	cmp	r3, #192	; 0xc0
 80070c4:	d01f      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80070c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070ca:	d01e      	beq.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80070cc:	e018      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070ce:	4b6c      	ldr	r3, [pc, #432]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80070d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d2:	4a6b      	ldr	r2, [pc, #428]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80070d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80070da:	e017      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	3304      	adds	r3, #4
 80070e0:	2100      	movs	r1, #0
 80070e2:	4618      	mov	r0, r3
 80070e4:	f001 fcbc 	bl	8008a60 <RCCEx_PLL2_Config>
 80070e8:	4603      	mov	r3, r0
 80070ea:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80070ec:	e00e      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	3324      	adds	r3, #36	; 0x24
 80070f2:	2100      	movs	r1, #0
 80070f4:	4618      	mov	r0, r3
 80070f6:	f001 fd65 	bl	8008bc4 <RCCEx_PLL3_Config>
 80070fa:	4603      	mov	r3, r0
 80070fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80070fe:	e005      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	75fb      	strb	r3, [r7, #23]
      break;
 8007104:	e002      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8007106:	bf00      	nop
 8007108:	e000      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800710a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800710c:	7dfb      	ldrb	r3, [r7, #23]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d109      	bne.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007112:	4b5b      	ldr	r3, [pc, #364]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007116:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800711e:	4958      	ldr	r1, [pc, #352]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007120:	4313      	orrs	r3, r2
 8007122:	650b      	str	r3, [r1, #80]	; 0x50
 8007124:	e001      	b.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007126:	7dfb      	ldrb	r3, [r7, #23]
 8007128:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007132:	2b00      	cmp	r3, #0
 8007134:	d044      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800713c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007140:	d01f      	beq.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007142:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007146:	d805      	bhi.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00a      	beq.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800714c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007150:	d00e      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8007152:	e01f      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8007154:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007158:	d01f      	beq.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800715a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800715e:	d01e      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007160:	e018      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007162:	4b47      	ldr	r3, [pc, #284]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007166:	4a46      	ldr	r2, [pc, #280]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800716c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800716e:	e017      	b.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	3304      	adds	r3, #4
 8007174:	2100      	movs	r1, #0
 8007176:	4618      	mov	r0, r3
 8007178:	f001 fc72 	bl	8008a60 <RCCEx_PLL2_Config>
 800717c:	4603      	mov	r3, r0
 800717e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007180:	e00e      	b.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	3324      	adds	r3, #36	; 0x24
 8007186:	2100      	movs	r1, #0
 8007188:	4618      	mov	r0, r3
 800718a:	f001 fd1b 	bl	8008bc4 <RCCEx_PLL3_Config>
 800718e:	4603      	mov	r3, r0
 8007190:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007192:	e005      	b.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	75fb      	strb	r3, [r7, #23]
      break;
 8007198:	e002      	b.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800719a:	bf00      	nop
 800719c:	e000      	b.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800719e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071a0:	7dfb      	ldrb	r3, [r7, #23]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10a      	bne.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80071a6:	4b36      	ldr	r3, [pc, #216]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80071a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071aa:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80071b4:	4932      	ldr	r1, [pc, #200]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80071b6:	4313      	orrs	r3, r2
 80071b8:	658b      	str	r3, [r1, #88]	; 0x58
 80071ba:	e001      	b.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071bc:	7dfb      	ldrb	r3, [r7, #23]
 80071be:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d044      	beq.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80071d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071d6:	d01f      	beq.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80071d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071dc:	d805      	bhi.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00a      	beq.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80071e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80071e6:	d00e      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80071e8:	e01f      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80071ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80071ee:	d01f      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80071f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071f4:	d01e      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80071f6:	e018      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071f8:	4b21      	ldr	r3, [pc, #132]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80071fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fc:	4a20      	ldr	r2, [pc, #128]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80071fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007202:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007204:	e017      	b.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	3304      	adds	r3, #4
 800720a:	2100      	movs	r1, #0
 800720c:	4618      	mov	r0, r3
 800720e:	f001 fc27 	bl	8008a60 <RCCEx_PLL2_Config>
 8007212:	4603      	mov	r3, r0
 8007214:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007216:	e00e      	b.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	3324      	adds	r3, #36	; 0x24
 800721c:	2100      	movs	r1, #0
 800721e:	4618      	mov	r0, r3
 8007220:	f001 fcd0 	bl	8008bc4 <RCCEx_PLL3_Config>
 8007224:	4603      	mov	r3, r0
 8007226:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007228:	e005      	b.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	75fb      	strb	r3, [r7, #23]
      break;
 800722e:	e002      	b.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007230:	bf00      	nop
 8007232:	e000      	b.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007234:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007236:	7dfb      	ldrb	r3, [r7, #23]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d10a      	bne.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800723c:	4b10      	ldr	r3, [pc, #64]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800723e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007240:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800724a:	490d      	ldr	r1, [pc, #52]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800724c:	4313      	orrs	r3, r2
 800724e:	658b      	str	r3, [r1, #88]	; 0x58
 8007250:	e001      	b.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007252:	7dfb      	ldrb	r3, [r7, #23]
 8007254:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800725e:	2b00      	cmp	r3, #0
 8007260:	d035      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007266:	2b10      	cmp	r3, #16
 8007268:	d00c      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800726a:	2b10      	cmp	r3, #16
 800726c:	d802      	bhi.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800726e:	2b00      	cmp	r3, #0
 8007270:	d01b      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8007272:	e017      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007274:	2b20      	cmp	r3, #32
 8007276:	d00c      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8007278:	2b30      	cmp	r3, #48	; 0x30
 800727a:	d018      	beq.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800727c:	e012      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800727e:	bf00      	nop
 8007280:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007284:	4baf      	ldr	r3, [pc, #700]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007288:	4aae      	ldr	r2, [pc, #696]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800728a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800728e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007290:	e00e      	b.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	3304      	adds	r3, #4
 8007296:	2102      	movs	r1, #2
 8007298:	4618      	mov	r0, r3
 800729a:	f001 fbe1 	bl	8008a60 <RCCEx_PLL2_Config>
 800729e:	4603      	mov	r3, r0
 80072a0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80072a2:	e005      	b.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	75fb      	strb	r3, [r7, #23]
      break;
 80072a8:	e002      	b.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80072aa:	bf00      	nop
 80072ac:	e000      	b.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80072ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072b0:	7dfb      	ldrb	r3, [r7, #23]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d109      	bne.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80072b6:	4ba3      	ldr	r3, [pc, #652]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80072b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072ba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072c2:	49a0      	ldr	r1, [pc, #640]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80072c4:	4313      	orrs	r3, r2
 80072c6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80072c8:	e001      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072ca:	7dfb      	ldrb	r3, [r7, #23]
 80072cc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d042      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072e2:	d01f      	beq.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80072e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072e8:	d805      	bhi.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00a      	beq.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80072ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072f2:	d00e      	beq.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80072f4:	e01f      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80072f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80072fa:	d01f      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80072fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007300:	d01e      	beq.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8007302:	e018      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007304:	4b8f      	ldr	r3, [pc, #572]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007308:	4a8e      	ldr	r2, [pc, #568]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800730a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800730e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007310:	e017      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	3304      	adds	r3, #4
 8007316:	2100      	movs	r1, #0
 8007318:	4618      	mov	r0, r3
 800731a:	f001 fba1 	bl	8008a60 <RCCEx_PLL2_Config>
 800731e:	4603      	mov	r3, r0
 8007320:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007322:	e00e      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	3324      	adds	r3, #36	; 0x24
 8007328:	2100      	movs	r1, #0
 800732a:	4618      	mov	r0, r3
 800732c:	f001 fc4a 	bl	8008bc4 <RCCEx_PLL3_Config>
 8007330:	4603      	mov	r3, r0
 8007332:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007334:	e005      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	75fb      	strb	r3, [r7, #23]
      break;
 800733a:	e002      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800733c:	bf00      	nop
 800733e:	e000      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007340:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007342:	7dfb      	ldrb	r3, [r7, #23]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d109      	bne.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007348:	4b7e      	ldr	r3, [pc, #504]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800734a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800734c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007354:	497b      	ldr	r1, [pc, #492]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007356:	4313      	orrs	r3, r2
 8007358:	650b      	str	r3, [r1, #80]	; 0x50
 800735a:	e001      	b.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800735c:	7dfb      	ldrb	r3, [r7, #23]
 800735e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007368:	2b00      	cmp	r3, #0
 800736a:	d042      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007370:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007374:	d01b      	beq.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007376:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800737a:	d805      	bhi.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800737c:	2b00      	cmp	r3, #0
 800737e:	d022      	beq.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8007380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007384:	d00a      	beq.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007386:	e01b      	b.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8007388:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800738c:	d01d      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800738e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007392:	d01c      	beq.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8007394:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007398:	d01b      	beq.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800739a:	e011      	b.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	3304      	adds	r3, #4
 80073a0:	2101      	movs	r1, #1
 80073a2:	4618      	mov	r0, r3
 80073a4:	f001 fb5c 	bl	8008a60 <RCCEx_PLL2_Config>
 80073a8:	4603      	mov	r3, r0
 80073aa:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80073ac:	e012      	b.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	3324      	adds	r3, #36	; 0x24
 80073b2:	2101      	movs	r1, #1
 80073b4:	4618      	mov	r0, r3
 80073b6:	f001 fc05 	bl	8008bc4 <RCCEx_PLL3_Config>
 80073ba:	4603      	mov	r3, r0
 80073bc:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80073be:	e009      	b.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	75fb      	strb	r3, [r7, #23]
      break;
 80073c4:	e006      	b.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80073c6:	bf00      	nop
 80073c8:	e004      	b.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80073ca:	bf00      	nop
 80073cc:	e002      	b.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80073ce:	bf00      	nop
 80073d0:	e000      	b.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80073d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073d4:	7dfb      	ldrb	r3, [r7, #23]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d109      	bne.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80073da:	4b5a      	ldr	r3, [pc, #360]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80073dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073de:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073e6:	4957      	ldr	r1, [pc, #348]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80073e8:	4313      	orrs	r3, r2
 80073ea:	650b      	str	r3, [r1, #80]	; 0x50
 80073ec:	e001      	b.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ee:	7dfb      	ldrb	r3, [r7, #23]
 80073f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d044      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007404:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007408:	d01b      	beq.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800740a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800740e:	d805      	bhi.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8007410:	2b00      	cmp	r3, #0
 8007412:	d022      	beq.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007414:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007418:	d00a      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800741a:	e01b      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800741c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007420:	d01d      	beq.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007422:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007426:	d01c      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8007428:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800742c:	d01b      	beq.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800742e:	e011      	b.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	3304      	adds	r3, #4
 8007434:	2101      	movs	r1, #1
 8007436:	4618      	mov	r0, r3
 8007438:	f001 fb12 	bl	8008a60 <RCCEx_PLL2_Config>
 800743c:	4603      	mov	r3, r0
 800743e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007440:	e012      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	3324      	adds	r3, #36	; 0x24
 8007446:	2101      	movs	r1, #1
 8007448:	4618      	mov	r0, r3
 800744a:	f001 fbbb 	bl	8008bc4 <RCCEx_PLL3_Config>
 800744e:	4603      	mov	r3, r0
 8007450:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007452:	e009      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	75fb      	strb	r3, [r7, #23]
      break;
 8007458:	e006      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800745a:	bf00      	nop
 800745c:	e004      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800745e:	bf00      	nop
 8007460:	e002      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007462:	bf00      	nop
 8007464:	e000      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007466:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007468:	7dfb      	ldrb	r3, [r7, #23]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10a      	bne.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800746e:	4b35      	ldr	r3, [pc, #212]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007472:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800747c:	4931      	ldr	r1, [pc, #196]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800747e:	4313      	orrs	r3, r2
 8007480:	658b      	str	r3, [r1, #88]	; 0x58
 8007482:	e001      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007484:	7dfb      	ldrb	r3, [r7, #23]
 8007486:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007490:	2b00      	cmp	r3, #0
 8007492:	d02d      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007498:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800749c:	d005      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800749e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074a2:	d009      	beq.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d013      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80074a8:	e00f      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074aa:	4b26      	ldr	r3, [pc, #152]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80074ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ae:	4a25      	ldr	r2, [pc, #148]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80074b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80074b6:	e00c      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	3304      	adds	r3, #4
 80074bc:	2101      	movs	r1, #1
 80074be:	4618      	mov	r0, r3
 80074c0:	f001 face 	bl	8008a60 <RCCEx_PLL2_Config>
 80074c4:	4603      	mov	r3, r0
 80074c6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80074c8:	e003      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	75fb      	strb	r3, [r7, #23]
      break;
 80074ce:	e000      	b.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80074d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074d2:	7dfb      	ldrb	r3, [r7, #23]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d109      	bne.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80074d8:	4b1a      	ldr	r3, [pc, #104]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80074da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074dc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074e4:	4917      	ldr	r1, [pc, #92]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80074e6:	4313      	orrs	r3, r2
 80074e8:	650b      	str	r3, [r1, #80]	; 0x50
 80074ea:	e001      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ec:	7dfb      	ldrb	r3, [r7, #23]
 80074ee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d035      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007500:	2b03      	cmp	r3, #3
 8007502:	d81b      	bhi.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007504:	a201      	add	r2, pc, #4	; (adr r2, 800750c <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8007506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750a:	bf00      	nop
 800750c:	08007549 	.word	0x08007549
 8007510:	0800751d 	.word	0x0800751d
 8007514:	0800752b 	.word	0x0800752b
 8007518:	08007549 	.word	0x08007549
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800751c:	4b09      	ldr	r3, [pc, #36]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800751e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007520:	4a08      	ldr	r2, [pc, #32]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007522:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007526:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007528:	e00f      	b.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	3304      	adds	r3, #4
 800752e:	2102      	movs	r1, #2
 8007530:	4618      	mov	r0, r3
 8007532:	f001 fa95 	bl	8008a60 <RCCEx_PLL2_Config>
 8007536:	4603      	mov	r3, r0
 8007538:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800753a:	e006      	b.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	75fb      	strb	r3, [r7, #23]
      break;
 8007540:	e003      	b.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8007542:	bf00      	nop
 8007544:	58024400 	.word	0x58024400
      break;
 8007548:	bf00      	nop
    }

    if(ret == HAL_OK)
 800754a:	7dfb      	ldrb	r3, [r7, #23]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d109      	bne.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007550:	4bba      	ldr	r3, [pc, #744]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007554:	f023 0203 	bic.w	r2, r3, #3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800755c:	49b7      	ldr	r1, [pc, #732]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800755e:	4313      	orrs	r3, r2
 8007560:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007562:	e001      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007564:	7dfb      	ldrb	r3, [r7, #23]
 8007566:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007570:	2b00      	cmp	r3, #0
 8007572:	f000 8086 	beq.w	8007682 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007576:	4bb2      	ldr	r3, [pc, #712]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4ab1      	ldr	r2, [pc, #708]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800757c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007580:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007582:	f7fa fb93 	bl	8001cac <HAL_GetTick>
 8007586:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007588:	e009      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800758a:	f7fa fb8f 	bl	8001cac <HAL_GetTick>
 800758e:	4602      	mov	r2, r0
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	1ad3      	subs	r3, r2, r3
 8007594:	2b64      	cmp	r3, #100	; 0x64
 8007596:	d902      	bls.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8007598:	2303      	movs	r3, #3
 800759a:	75fb      	strb	r3, [r7, #23]
        break;
 800759c:	e005      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800759e:	4ba8      	ldr	r3, [pc, #672]	; (8007840 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d0ef      	beq.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80075aa:	7dfb      	ldrb	r3, [r7, #23]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d166      	bne.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80075b0:	4ba2      	ldr	r3, [pc, #648]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80075b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80075ba:	4053      	eors	r3, r2
 80075bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d013      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80075c4:	4b9d      	ldr	r3, [pc, #628]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80075c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075cc:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80075ce:	4b9b      	ldr	r3, [pc, #620]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80075d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075d2:	4a9a      	ldr	r2, [pc, #616]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80075d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075d8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80075da:	4b98      	ldr	r3, [pc, #608]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80075dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075de:	4a97      	ldr	r2, [pc, #604]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80075e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075e4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80075e6:	4a95      	ldr	r2, [pc, #596]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80075f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075f6:	d115      	bne.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075f8:	f7fa fb58 	bl	8001cac <HAL_GetTick>
 80075fc:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075fe:	e00b      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007600:	f7fa fb54 	bl	8001cac <HAL_GetTick>
 8007604:	4602      	mov	r2, r0
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	f241 3288 	movw	r2, #5000	; 0x1388
 800760e:	4293      	cmp	r3, r2
 8007610:	d902      	bls.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	75fb      	strb	r3, [r7, #23]
            break;
 8007616:	e005      	b.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007618:	4b88      	ldr	r3, [pc, #544]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800761a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800761c:	f003 0302 	and.w	r3, r3, #2
 8007620:	2b00      	cmp	r3, #0
 8007622:	d0ed      	beq.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8007624:	7dfb      	ldrb	r3, [r7, #23]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d126      	bne.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007630:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007634:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007638:	d10d      	bne.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800763a:	4b80      	ldr	r3, [pc, #512]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007648:	0919      	lsrs	r1, r3, #4
 800764a:	4b7e      	ldr	r3, [pc, #504]	; (8007844 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800764c:	400b      	ands	r3, r1
 800764e:	497b      	ldr	r1, [pc, #492]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007650:	4313      	orrs	r3, r2
 8007652:	610b      	str	r3, [r1, #16]
 8007654:	e005      	b.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8007656:	4b79      	ldr	r3, [pc, #484]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	4a78      	ldr	r2, [pc, #480]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800765c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007660:	6113      	str	r3, [r2, #16]
 8007662:	4b76      	ldr	r3, [pc, #472]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007664:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800766c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007670:	4972      	ldr	r1, [pc, #456]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007672:	4313      	orrs	r3, r2
 8007674:	670b      	str	r3, [r1, #112]	; 0x70
 8007676:	e004      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007678:	7dfb      	ldrb	r3, [r7, #23]
 800767a:	75bb      	strb	r3, [r7, #22]
 800767c:	e001      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800767e:	7dfb      	ldrb	r3, [r7, #23]
 8007680:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0301 	and.w	r3, r3, #1
 800768a:	2b00      	cmp	r3, #0
 800768c:	d07d      	beq.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007692:	2b28      	cmp	r3, #40	; 0x28
 8007694:	d866      	bhi.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8007696:	a201      	add	r2, pc, #4	; (adr r2, 800769c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800769c:	0800776b 	.word	0x0800776b
 80076a0:	08007765 	.word	0x08007765
 80076a4:	08007765 	.word	0x08007765
 80076a8:	08007765 	.word	0x08007765
 80076ac:	08007765 	.word	0x08007765
 80076b0:	08007765 	.word	0x08007765
 80076b4:	08007765 	.word	0x08007765
 80076b8:	08007765 	.word	0x08007765
 80076bc:	08007741 	.word	0x08007741
 80076c0:	08007765 	.word	0x08007765
 80076c4:	08007765 	.word	0x08007765
 80076c8:	08007765 	.word	0x08007765
 80076cc:	08007765 	.word	0x08007765
 80076d0:	08007765 	.word	0x08007765
 80076d4:	08007765 	.word	0x08007765
 80076d8:	08007765 	.word	0x08007765
 80076dc:	08007753 	.word	0x08007753
 80076e0:	08007765 	.word	0x08007765
 80076e4:	08007765 	.word	0x08007765
 80076e8:	08007765 	.word	0x08007765
 80076ec:	08007765 	.word	0x08007765
 80076f0:	08007765 	.word	0x08007765
 80076f4:	08007765 	.word	0x08007765
 80076f8:	08007765 	.word	0x08007765
 80076fc:	0800776b 	.word	0x0800776b
 8007700:	08007765 	.word	0x08007765
 8007704:	08007765 	.word	0x08007765
 8007708:	08007765 	.word	0x08007765
 800770c:	08007765 	.word	0x08007765
 8007710:	08007765 	.word	0x08007765
 8007714:	08007765 	.word	0x08007765
 8007718:	08007765 	.word	0x08007765
 800771c:	0800776b 	.word	0x0800776b
 8007720:	08007765 	.word	0x08007765
 8007724:	08007765 	.word	0x08007765
 8007728:	08007765 	.word	0x08007765
 800772c:	08007765 	.word	0x08007765
 8007730:	08007765 	.word	0x08007765
 8007734:	08007765 	.word	0x08007765
 8007738:	08007765 	.word	0x08007765
 800773c:	0800776b 	.word	0x0800776b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	3304      	adds	r3, #4
 8007744:	2101      	movs	r1, #1
 8007746:	4618      	mov	r0, r3
 8007748:	f001 f98a 	bl	8008a60 <RCCEx_PLL2_Config>
 800774c:	4603      	mov	r3, r0
 800774e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007750:	e00c      	b.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	3324      	adds	r3, #36	; 0x24
 8007756:	2101      	movs	r1, #1
 8007758:	4618      	mov	r0, r3
 800775a:	f001 fa33 	bl	8008bc4 <RCCEx_PLL3_Config>
 800775e:	4603      	mov	r3, r0
 8007760:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007762:	e003      	b.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	75fb      	strb	r3, [r7, #23]
      break;
 8007768:	e000      	b.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800776a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800776c:	7dfb      	ldrb	r3, [r7, #23]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d109      	bne.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007772:	4b32      	ldr	r3, [pc, #200]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007776:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800777e:	492f      	ldr	r1, [pc, #188]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007780:	4313      	orrs	r3, r2
 8007782:	654b      	str	r3, [r1, #84]	; 0x54
 8007784:	e001      	b.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007786:	7dfb      	ldrb	r3, [r7, #23]
 8007788:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 0302 	and.w	r3, r3, #2
 8007792:	2b00      	cmp	r3, #0
 8007794:	d037      	beq.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800779a:	2b05      	cmp	r3, #5
 800779c:	d820      	bhi.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800779e:	a201      	add	r2, pc, #4	; (adr r2, 80077a4 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80077a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a4:	080077e7 	.word	0x080077e7
 80077a8:	080077bd 	.word	0x080077bd
 80077ac:	080077cf 	.word	0x080077cf
 80077b0:	080077e7 	.word	0x080077e7
 80077b4:	080077e7 	.word	0x080077e7
 80077b8:	080077e7 	.word	0x080077e7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	3304      	adds	r3, #4
 80077c0:	2101      	movs	r1, #1
 80077c2:	4618      	mov	r0, r3
 80077c4:	f001 f94c 	bl	8008a60 <RCCEx_PLL2_Config>
 80077c8:	4603      	mov	r3, r0
 80077ca:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80077cc:	e00c      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	3324      	adds	r3, #36	; 0x24
 80077d2:	2101      	movs	r1, #1
 80077d4:	4618      	mov	r0, r3
 80077d6:	f001 f9f5 	bl	8008bc4 <RCCEx_PLL3_Config>
 80077da:	4603      	mov	r3, r0
 80077dc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80077de:	e003      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	75fb      	strb	r3, [r7, #23]
      break;
 80077e4:	e000      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80077e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077e8:	7dfb      	ldrb	r3, [r7, #23]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d109      	bne.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80077ee:	4b13      	ldr	r3, [pc, #76]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80077f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077f2:	f023 0207 	bic.w	r2, r3, #7
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077fa:	4910      	ldr	r1, [pc, #64]	; (800783c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80077fc:	4313      	orrs	r3, r2
 80077fe:	654b      	str	r3, [r1, #84]	; 0x54
 8007800:	e001      	b.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007802:	7dfb      	ldrb	r3, [r7, #23]
 8007804:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 0304 	and.w	r3, r3, #4
 800780e:	2b00      	cmp	r3, #0
 8007810:	d040      	beq.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007818:	2b05      	cmp	r3, #5
 800781a:	d827      	bhi.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800781c:	a201      	add	r2, pc, #4	; (adr r2, 8007824 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800781e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007822:	bf00      	nop
 8007824:	08007873 	.word	0x08007873
 8007828:	08007849 	.word	0x08007849
 800782c:	0800785b 	.word	0x0800785b
 8007830:	08007873 	.word	0x08007873
 8007834:	08007873 	.word	0x08007873
 8007838:	08007873 	.word	0x08007873
 800783c:	58024400 	.word	0x58024400
 8007840:	58024800 	.word	0x58024800
 8007844:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	3304      	adds	r3, #4
 800784c:	2101      	movs	r1, #1
 800784e:	4618      	mov	r0, r3
 8007850:	f001 f906 	bl	8008a60 <RCCEx_PLL2_Config>
 8007854:	4603      	mov	r3, r0
 8007856:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007858:	e00c      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	3324      	adds	r3, #36	; 0x24
 800785e:	2101      	movs	r1, #1
 8007860:	4618      	mov	r0, r3
 8007862:	f001 f9af 	bl	8008bc4 <RCCEx_PLL3_Config>
 8007866:	4603      	mov	r3, r0
 8007868:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800786a:	e003      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	75fb      	strb	r3, [r7, #23]
      break;
 8007870:	e000      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8007872:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007874:	7dfb      	ldrb	r3, [r7, #23]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10a      	bne.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800787a:	4bb2      	ldr	r3, [pc, #712]	; (8007b44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800787c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800787e:	f023 0207 	bic.w	r2, r3, #7
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007888:	49ae      	ldr	r1, [pc, #696]	; (8007b44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800788a:	4313      	orrs	r3, r2
 800788c:	658b      	str	r3, [r1, #88]	; 0x58
 800788e:	e001      	b.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007890:	7dfb      	ldrb	r3, [r7, #23]
 8007892:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 0320 	and.w	r3, r3, #32
 800789c:	2b00      	cmp	r3, #0
 800789e:	d044      	beq.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078aa:	d01b      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80078ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078b0:	d805      	bhi.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d022      	beq.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80078b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078ba:	d00a      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x952>
 80078bc:	e01b      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80078be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078c2:	d01d      	beq.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80078c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078c8:	d01c      	beq.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80078ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80078ce:	d01b      	beq.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80078d0:	e011      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	3304      	adds	r3, #4
 80078d6:	2100      	movs	r1, #0
 80078d8:	4618      	mov	r0, r3
 80078da:	f001 f8c1 	bl	8008a60 <RCCEx_PLL2_Config>
 80078de:	4603      	mov	r3, r0
 80078e0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80078e2:	e012      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	3324      	adds	r3, #36	; 0x24
 80078e8:	2102      	movs	r1, #2
 80078ea:	4618      	mov	r0, r3
 80078ec:	f001 f96a 	bl	8008bc4 <RCCEx_PLL3_Config>
 80078f0:	4603      	mov	r3, r0
 80078f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80078f4:	e009      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	75fb      	strb	r3, [r7, #23]
      break;
 80078fa:	e006      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80078fc:	bf00      	nop
 80078fe:	e004      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007900:	bf00      	nop
 8007902:	e002      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007904:	bf00      	nop
 8007906:	e000      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8007908:	bf00      	nop
    }

    if(ret == HAL_OK)
 800790a:	7dfb      	ldrb	r3, [r7, #23]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d10a      	bne.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007910:	4b8c      	ldr	r3, [pc, #560]	; (8007b44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007914:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800791e:	4989      	ldr	r1, [pc, #548]	; (8007b44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007920:	4313      	orrs	r3, r2
 8007922:	654b      	str	r3, [r1, #84]	; 0x54
 8007924:	e001      	b.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007926:	7dfb      	ldrb	r3, [r7, #23]
 8007928:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007932:	2b00      	cmp	r3, #0
 8007934:	d044      	beq.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800793c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007940:	d01b      	beq.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8007942:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007946:	d805      	bhi.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8007948:	2b00      	cmp	r3, #0
 800794a:	d022      	beq.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800794c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007950:	d00a      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8007952:	e01b      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8007954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007958:	d01d      	beq.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800795a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800795e:	d01c      	beq.n	800799a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8007960:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007964:	d01b      	beq.n	800799e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8007966:	e011      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	3304      	adds	r3, #4
 800796c:	2100      	movs	r1, #0
 800796e:	4618      	mov	r0, r3
 8007970:	f001 f876 	bl	8008a60 <RCCEx_PLL2_Config>
 8007974:	4603      	mov	r3, r0
 8007976:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007978:	e012      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	3324      	adds	r3, #36	; 0x24
 800797e:	2102      	movs	r1, #2
 8007980:	4618      	mov	r0, r3
 8007982:	f001 f91f 	bl	8008bc4 <RCCEx_PLL3_Config>
 8007986:	4603      	mov	r3, r0
 8007988:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800798a:	e009      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800798c:	2301      	movs	r3, #1
 800798e:	75fb      	strb	r3, [r7, #23]
      break;
 8007990:	e006      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007992:	bf00      	nop
 8007994:	e004      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8007996:	bf00      	nop
 8007998:	e002      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800799a:	bf00      	nop
 800799c:	e000      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800799e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079a0:	7dfb      	ldrb	r3, [r7, #23]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d10a      	bne.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80079a6:	4b67      	ldr	r3, [pc, #412]	; (8007b44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80079a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079aa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80079b4:	4963      	ldr	r1, [pc, #396]	; (8007b44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80079b6:	4313      	orrs	r3, r2
 80079b8:	658b      	str	r3, [r1, #88]	; 0x58
 80079ba:	e001      	b.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079bc:	7dfb      	ldrb	r3, [r7, #23]
 80079be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d044      	beq.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079d6:	d01b      	beq.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80079d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079dc:	d805      	bhi.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d022      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80079e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079e6:	d00a      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80079e8:	e01b      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80079ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079ee:	d01d      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80079f0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80079f4:	d01c      	beq.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80079f6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80079fa:	d01b      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80079fc:	e011      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	3304      	adds	r3, #4
 8007a02:	2100      	movs	r1, #0
 8007a04:	4618      	mov	r0, r3
 8007a06:	f001 f82b 	bl	8008a60 <RCCEx_PLL2_Config>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007a0e:	e012      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	3324      	adds	r3, #36	; 0x24
 8007a14:	2102      	movs	r1, #2
 8007a16:	4618      	mov	r0, r3
 8007a18:	f001 f8d4 	bl	8008bc4 <RCCEx_PLL3_Config>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007a20:	e009      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	75fb      	strb	r3, [r7, #23]
      break;
 8007a26:	e006      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007a28:	bf00      	nop
 8007a2a:	e004      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007a2c:	bf00      	nop
 8007a2e:	e002      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007a30:	bf00      	nop
 8007a32:	e000      	b.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8007a34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a36:	7dfb      	ldrb	r3, [r7, #23]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d10a      	bne.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007a3c:	4b41      	ldr	r3, [pc, #260]	; (8007b44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a40:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a4a:	493e      	ldr	r1, [pc, #248]	; (8007b44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	658b      	str	r3, [r1, #88]	; 0x58
 8007a50:	e001      	b.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a52:	7dfb      	ldrb	r3, [r7, #23]
 8007a54:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f003 0308 	and.w	r3, r3, #8
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d01a      	beq.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a6c:	d10a      	bne.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	3324      	adds	r3, #36	; 0x24
 8007a72:	2102      	movs	r1, #2
 8007a74:	4618      	mov	r0, r3
 8007a76:	f001 f8a5 	bl	8008bc4 <RCCEx_PLL3_Config>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d001      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007a84:	4b2f      	ldr	r3, [pc, #188]	; (8007b44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a88:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a92:	492c      	ldr	r1, [pc, #176]	; (8007b44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007a94:	4313      	orrs	r3, r2
 8007a96:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 0310 	and.w	r3, r3, #16
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d01a      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007aaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007aae:	d10a      	bne.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	3324      	adds	r3, #36	; 0x24
 8007ab4:	2102      	movs	r1, #2
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f001 f884 	bl	8008bc4 <RCCEx_PLL3_Config>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d001      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007ac6:	4b1f      	ldr	r3, [pc, #124]	; (8007b44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ad4:	491b      	ldr	r1, [pc, #108]	; (8007b44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d032      	beq.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007af0:	d00d      	beq.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8007af2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007af6:	d016      	beq.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d111      	bne.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	3304      	adds	r3, #4
 8007b00:	2100      	movs	r1, #0
 8007b02:	4618      	mov	r0, r3
 8007b04:	f000 ffac 	bl	8008a60 <RCCEx_PLL2_Config>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007b0c:	e00c      	b.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	3324      	adds	r3, #36	; 0x24
 8007b12:	2102      	movs	r1, #2
 8007b14:	4618      	mov	r0, r3
 8007b16:	f001 f855 	bl	8008bc4 <RCCEx_PLL3_Config>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007b1e:	e003      	b.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	75fb      	strb	r3, [r7, #23]
      break;
 8007b24:	e000      	b.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8007b26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b28:	7dfb      	ldrb	r3, [r7, #23]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d10c      	bne.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007b2e:	4b05      	ldr	r3, [pc, #20]	; (8007b44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b32:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007b3c:	4901      	ldr	r1, [pc, #4]	; (8007b44 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	658b      	str	r3, [r1, #88]	; 0x58
 8007b42:	e003      	b.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8007b44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b48:	7dfb      	ldrb	r3, [r7, #23]
 8007b4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d02f      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b62:	d00c      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007b64:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b68:	d015      	beq.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8007b6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b6e:	d10f      	bne.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b70:	4b79      	ldr	r3, [pc, #484]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b74:	4a78      	ldr	r2, [pc, #480]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007b7c:	e00c      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	3324      	adds	r3, #36	; 0x24
 8007b82:	2101      	movs	r1, #1
 8007b84:	4618      	mov	r0, r3
 8007b86:	f001 f81d 	bl	8008bc4 <RCCEx_PLL3_Config>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007b8e:	e003      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	75fb      	strb	r3, [r7, #23]
      break;
 8007b94:	e000      	b.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8007b96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b98:	7dfb      	ldrb	r3, [r7, #23]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d10a      	bne.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b9e:	4b6e      	ldr	r3, [pc, #440]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ba2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bac:	496a      	ldr	r1, [pc, #424]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	654b      	str	r3, [r1, #84]	; 0x54
 8007bb2:	e001      	b.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bb4:	7dfb      	ldrb	r3, [r7, #23]
 8007bb6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d029      	beq.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d003      	beq.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8007bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bd0:	d007      	beq.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8007bd2:	e00f      	b.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bd4:	4b60      	ldr	r3, [pc, #384]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd8:	4a5f      	ldr	r2, [pc, #380]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007bda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bde:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007be0:	e00b      	b.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	3304      	adds	r3, #4
 8007be6:	2102      	movs	r1, #2
 8007be8:	4618      	mov	r0, r3
 8007bea:	f000 ff39 	bl	8008a60 <RCCEx_PLL2_Config>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007bf2:	e002      	b.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	75fb      	strb	r3, [r7, #23]
      break;
 8007bf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bfa:	7dfb      	ldrb	r3, [r7, #23]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d109      	bne.n	8007c14 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007c00:	4b55      	ldr	r3, [pc, #340]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c0c:	4952      	ldr	r1, [pc, #328]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007c12:	e001      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c14:	7dfb      	ldrb	r3, [r7, #23]
 8007c16:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d00a      	beq.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	3324      	adds	r3, #36	; 0x24
 8007c28:	2102      	movs	r1, #2
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f000 ffca 	bl	8008bc4 <RCCEx_PLL3_Config>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d001      	beq.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d02f      	beq.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c4e:	d00c      	beq.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007c50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c54:	d802      	bhi.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d011      	beq.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8007c5a:	e00d      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8007c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c60:	d00f      	beq.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8007c62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c66:	d00e      	beq.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8007c68:	e006      	b.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c6a:	4b3b      	ldr	r3, [pc, #236]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6e:	4a3a      	ldr	r2, [pc, #232]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007c76:	e007      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	75fb      	strb	r3, [r7, #23]
      break;
 8007c7c:	e004      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007c7e:	bf00      	nop
 8007c80:	e002      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007c82:	bf00      	nop
 8007c84:	e000      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007c86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c88:	7dfb      	ldrb	r3, [r7, #23]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d109      	bne.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007c8e:	4b32      	ldr	r3, [pc, #200]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c9a:	492f      	ldr	r1, [pc, #188]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	654b      	str	r3, [r1, #84]	; 0x54
 8007ca0:	e001      	b.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca2:	7dfb      	ldrb	r3, [r7, #23]
 8007ca4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d008      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007cb2:	4b29      	ldr	r3, [pc, #164]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cb6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cbe:	4926      	ldr	r1, [pc, #152]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d009      	beq.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007cd0:	4b21      	ldr	r3, [pc, #132]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007cde:	491e      	ldr	r1, [pc, #120]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d008      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007cf0:	4b19      	ldr	r3, [pc, #100]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cf4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cfc:	4916      	ldr	r1, [pc, #88]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00d      	beq.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007d0e:	4b12      	ldr	r3, [pc, #72]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007d10:	691b      	ldr	r3, [r3, #16]
 8007d12:	4a11      	ldr	r2, [pc, #68]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007d14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d18:	6113      	str	r3, [r2, #16]
 8007d1a:	4b0f      	ldr	r3, [pc, #60]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007d1c:	691a      	ldr	r2, [r3, #16]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007d24:	490c      	ldr	r1, [pc, #48]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007d26:	4313      	orrs	r3, r2
 8007d28:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	da08      	bge.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007d32:	4b09      	ldr	r3, [pc, #36]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d36:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d3e:	4906      	ldr	r1, [pc, #24]	; (8007d58 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007d40:	4313      	orrs	r3, r2
 8007d42:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007d44:	7dbb      	ldrb	r3, [r7, #22]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d101      	bne.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	e000      	b.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3718      	adds	r7, #24
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	58024400 	.word	0x58024400

08007d5c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b090      	sub	sp, #64	; 0x40
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d6a:	d150      	bne.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8007d6c:	4ba1      	ldr	r3, [pc, #644]	; (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d70:	f003 0307 	and.w	r3, r3, #7
 8007d74:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d78:	2b04      	cmp	r3, #4
 8007d7a:	d844      	bhi.n	8007e06 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8007d7c:	a201      	add	r2, pc, #4	; (adr r2, 8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8007d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d82:	bf00      	nop
 8007d84:	08007d99 	.word	0x08007d99
 8007d88:	08007da9 	.word	0x08007da9
 8007d8c:	08007db9 	.word	0x08007db9
 8007d90:	08007e01 	.word	0x08007e01
 8007d94:	08007dc9 	.word	0x08007dc9
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f000 fd03 	bl	80087a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007da6:	e241      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007da8:	f107 0318 	add.w	r3, r7, #24
 8007dac:	4618      	mov	r0, r3
 8007dae:	f000 fa63 	bl	8008278 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007db6:	e239      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007db8:	f107 030c 	add.w	r3, r7, #12
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f000 fba7 	bl	8008510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dc6:	e231      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007dc8:	4b8a      	ldr	r3, [pc, #552]	; (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dcc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007dd0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d102      	bne.n	8007dde <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007dd8:	4b87      	ldr	r3, [pc, #540]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007dda:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007ddc:	e226      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007de0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007de4:	d102      	bne.n	8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8007de6:	4b85      	ldr	r3, [pc, #532]	; (8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007de8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dea:	e21f      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007df2:	d102      	bne.n	8007dfa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8007df4:	4b82      	ldr	r3, [pc, #520]	; (8008000 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007df6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007df8:	e218      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007dfe:	e215      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007e00:	4b80      	ldr	r3, [pc, #512]	; (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007e02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e04:	e212      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007e06:	2300      	movs	r3, #0
 8007e08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e0a:	bf00      	nop
 8007e0c:	e20e      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e14:	d14f      	bne.n	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8007e16:	4b77      	ldr	r3, [pc, #476]	; (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e1a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007e1e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e22:	2b80      	cmp	r3, #128	; 0x80
 8007e24:	d01c      	beq.n	8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8007e26:	2b80      	cmp	r3, #128	; 0x80
 8007e28:	d804      	bhi.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d008      	beq.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8007e2e:	2b40      	cmp	r3, #64	; 0x40
 8007e30:	d00e      	beq.n	8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8007e32:	e03c      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8007e34:	2bc0      	cmp	r3, #192	; 0xc0
 8007e36:	d037      	beq.n	8007ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8007e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e3c:	d018      	beq.n	8007e70 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8007e3e:	e036      	b.n	8007eae <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e44:	4618      	mov	r0, r3
 8007e46:	f000 fcaf 	bl	80087a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e4e:	e1ed      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e50:	f107 0318 	add.w	r3, r7, #24
 8007e54:	4618      	mov	r0, r3
 8007e56:	f000 fa0f 	bl	8008278 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e5e:	e1e5      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e60:	f107 030c 	add.w	r3, r7, #12
 8007e64:	4618      	mov	r0, r3
 8007e66:	f000 fb53 	bl	8008510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e6e:	e1dd      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007e70:	4b60      	ldr	r3, [pc, #384]	; (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007e78:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d102      	bne.n	8007e86 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007e80:	4b5d      	ldr	r3, [pc, #372]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007e82:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007e84:	e1d2      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e8c:	d102      	bne.n	8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8007e8e:	4b5b      	ldr	r3, [pc, #364]	; (8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007e90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007e92:	e1cb      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e9a:	d102      	bne.n	8007ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8007e9c:	4b58      	ldr	r3, [pc, #352]	; (8008000 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ea0:	e1c4      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ea6:	e1c1      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007ea8:	4b56      	ldr	r3, [pc, #344]	; (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007eac:	e1be      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007eb2:	bf00      	nop
 8007eb4:	e1ba      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ebc:	d153      	bne.n	8007f66 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007ebe:	4b4d      	ldr	r3, [pc, #308]	; (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ec2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8007ec6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ece:	d01f      	beq.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8007ed0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ed4:	d805      	bhi.n	8007ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00a      	beq.n	8007ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8007eda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ede:	d00f      	beq.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8007ee0:	e03d      	b.n	8007f5e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8007ee2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007ee6:	d037      	beq.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8007ee8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007eec:	d018      	beq.n	8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8007eee:	e036      	b.n	8007f5e <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f000 fc57 	bl	80087a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007efe:	e195      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f00:	f107 0318 	add.w	r3, r7, #24
 8007f04:	4618      	mov	r0, r3
 8007f06:	f000 f9b7 	bl	8008278 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f0e:	e18d      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f10:	f107 030c 	add.w	r3, r7, #12
 8007f14:	4618      	mov	r0, r3
 8007f16:	f000 fafb 	bl	8008510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f1e:	e185      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007f20:	4b34      	ldr	r3, [pc, #208]	; (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f28:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d102      	bne.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007f30:	4b31      	ldr	r3, [pc, #196]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007f32:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007f34:	e17a      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f3c:	d102      	bne.n	8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8007f3e:	4b2f      	ldr	r3, [pc, #188]	; (8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007f40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f42:	e173      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f4a:	d102      	bne.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8007f4c:	4b2c      	ldr	r3, [pc, #176]	; (8008000 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f50:	e16c      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007f52:	2300      	movs	r3, #0
 8007f54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f56:	e169      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007f58:	4b2a      	ldr	r3, [pc, #168]	; (8008004 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f5c:	e166      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007f62:	bf00      	nop
 8007f64:	e162      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f6c:	d15d      	bne.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8007f6e:	4b21      	ldr	r3, [pc, #132]	; (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f72:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007f76:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f7e:	d01f      	beq.n	8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007f80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f84:	d805      	bhi.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00a      	beq.n	8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007f8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f8e:	d00f      	beq.n	8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8007f90:	e047      	b.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8007f92:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007f96:	d041      	beq.n	800801c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8007f98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f9c:	d018      	beq.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8007f9e:	e040      	b.n	8008022 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f000 fbff 	bl	80087a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fae:	e13d      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fb0:	f107 0318 	add.w	r3, r7, #24
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f000 f95f 	bl	8008278 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fbe:	e135      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fc0:	f107 030c 	add.w	r3, r7, #12
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f000 faa3 	bl	8008510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007fce:	e12d      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007fd0:	4b08      	ldr	r3, [pc, #32]	; (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007fd8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d102      	bne.n	8007fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007fe0:	4b05      	ldr	r3, [pc, #20]	; (8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007fe4:	e122      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fe8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fec:	d10c      	bne.n	8008008 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8007fee:	4b03      	ldr	r3, [pc, #12]	; (8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ff2:	e11b      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007ff4:	58024400 	.word	0x58024400
 8007ff8:	03d09000 	.word	0x03d09000
 8007ffc:	003d0900 	.word	0x003d0900
 8008000:	017d7840 	.word	0x017d7840
 8008004:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800800a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800800e:	d102      	bne.n	8008016 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8008010:	4b89      	ldr	r3, [pc, #548]	; (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008012:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008014:	e10a      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008016:	2300      	movs	r3, #0
 8008018:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800801a:	e107      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800801c:	4b87      	ldr	r3, [pc, #540]	; (800823c <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800801e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008020:	e104      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008022:	2300      	movs	r3, #0
 8008024:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008026:	bf00      	nop
 8008028:	e100      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008030:	d153      	bne.n	80080da <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008032:	4b83      	ldr	r3, [pc, #524]	; (8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008036:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800803a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800803c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800803e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008042:	d01f      	beq.n	8008084 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8008044:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008048:	d805      	bhi.n	8008056 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800804a:	2b00      	cmp	r3, #0
 800804c:	d00a      	beq.n	8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800804e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008052:	d00f      	beq.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8008054:	e03d      	b.n	80080d2 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8008056:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800805a:	d037      	beq.n	80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800805c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008060:	d018      	beq.n	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8008062:	e036      	b.n	80080d2 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008068:	4618      	mov	r0, r3
 800806a:	f000 fb9d 	bl	80087a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800806e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008070:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008072:	e0db      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008074:	f107 0318 	add.w	r3, r7, #24
 8008078:	4618      	mov	r0, r3
 800807a:	f000 f8fd 	bl	8008278 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008082:	e0d3      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008084:	f107 030c 	add.w	r3, r7, #12
 8008088:	4618      	mov	r0, r3
 800808a:	f000 fa41 	bl	8008510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008092:	e0cb      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008094:	4b6a      	ldr	r3, [pc, #424]	; (8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008098:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800809c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800809e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d102      	bne.n	80080aa <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80080a4:	4b67      	ldr	r3, [pc, #412]	; (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80080a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80080a8:	e0c0      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80080aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080b0:	d102      	bne.n	80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 80080b2:	4b65      	ldr	r3, [pc, #404]	; (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80080b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080b6:	e0b9      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80080b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080be:	d102      	bne.n	80080c6 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 80080c0:	4b5d      	ldr	r3, [pc, #372]	; (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80080c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080c4:	e0b2      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80080c6:	2300      	movs	r3, #0
 80080c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080ca:	e0af      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80080cc:	4b5b      	ldr	r3, [pc, #364]	; (800823c <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 80080ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080d0:	e0ac      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80080d2:	2300      	movs	r3, #0
 80080d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80080d6:	bf00      	nop
 80080d8:	e0a8      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80080e0:	d13d      	bne.n	800815e <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80080e2:	4b57      	ldr	r3, [pc, #348]	; (8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80080e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80080ea:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80080ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080f2:	d00c      	beq.n	800810e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80080f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080f8:	d011      	beq.n	800811e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d12b      	bne.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080fe:	f107 0318 	add.w	r3, r7, #24
 8008102:	4618      	mov	r0, r3
 8008104:	f000 f8b8 	bl	8008278 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800810c:	e08e      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800810e:	f107 030c 	add.w	r3, r7, #12
 8008112:	4618      	mov	r0, r3
 8008114:	f000 f9fc 	bl	8008510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800811c:	e086      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800811e:	4b48      	ldr	r3, [pc, #288]	; (8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008122:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008126:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800812a:	2b00      	cmp	r3, #0
 800812c:	d102      	bne.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800812e:	4b45      	ldr	r3, [pc, #276]	; (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008130:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008132:	e07b      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008136:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800813a:	d102      	bne.n	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 800813c:	4b42      	ldr	r3, [pc, #264]	; (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800813e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008140:	e074      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008144:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008148:	d102      	bne.n	8008150 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800814a:	4b3b      	ldr	r3, [pc, #236]	; (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800814c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800814e:	e06d      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008150:	2300      	movs	r3, #0
 8008152:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008154:	e06a      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008156:	2300      	movs	r3, #0
 8008158:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800815a:	bf00      	nop
 800815c:	e066      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008164:	d11f      	bne.n	80081a6 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008166:	4b36      	ldr	r3, [pc, #216]	; (8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800816a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800816e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008172:	2b00      	cmp	r3, #0
 8008174:	d003      	beq.n	800817e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8008176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800817a:	d008      	beq.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800817c:	e00f      	b.n	800819e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800817e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008182:	4618      	mov	r0, r3
 8008184:	f000 fb10 	bl	80087a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800818c:	e04e      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800818e:	f107 0318 	add.w	r3, r7, #24
 8008192:	4618      	mov	r0, r3
 8008194:	f000 f870 	bl	8008278 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008198:	6a3b      	ldr	r3, [r7, #32]
 800819a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800819c:	e046      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800819e:	2300      	movs	r3, #0
 80081a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081a2:	bf00      	nop
 80081a4:	e042      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081ac:	d13c      	bne.n	8008228 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80081ae:	4b24      	ldr	r3, [pc, #144]	; (8008240 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80081b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081b2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80081b6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80081b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081be:	d01e      	beq.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 80081c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081c4:	d805      	bhi.n	80081d2 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d00d      	beq.n	80081e6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80081ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081ce:	d00e      	beq.n	80081ee <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 80081d0:	e026      	b.n	8008220 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 80081d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081d6:	d01d      	beq.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 80081d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80081dc:	d01d      	beq.n	800821a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80081de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80081e2:	d014      	beq.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80081e4:	e01c      	b.n	8008220 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80081e6:	f000 f831 	bl	800824c <HAL_RCCEx_GetD3PCLK1Freq>
 80081ea:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80081ec:	e01e      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081ee:	f107 0318 	add.w	r3, r7, #24
 80081f2:	4618      	mov	r0, r3
 80081f4:	f000 f840 	bl	8008278 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80081fc:	e016      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081fe:	f107 030c 	add.w	r3, r7, #12
 8008202:	4618      	mov	r0, r3
 8008204:	f000 f984 	bl	8008510 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800820c:	e00e      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800820e:	4b0d      	ldr	r3, [pc, #52]	; (8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008210:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008212:	e00b      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8008214:	4b0c      	ldr	r3, [pc, #48]	; (8008248 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008216:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008218:	e008      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800821a:	4b07      	ldr	r3, [pc, #28]	; (8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800821c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800821e:	e005      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008220:	2300      	movs	r3, #0
 8008222:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008224:	bf00      	nop
 8008226:	e001      	b.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8008228:	2300      	movs	r3, #0
 800822a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800822c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800822e:	4618      	mov	r0, r3
 8008230:	3740      	adds	r7, #64	; 0x40
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	017d7840 	.word	0x017d7840
 800823c:	00bb8000 	.word	0x00bb8000
 8008240:	58024400 	.word	0x58024400
 8008244:	03d09000 	.word	0x03d09000
 8008248:	003d0900 	.word	0x003d0900

0800824c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008250:	f7fe fe3a 	bl	8006ec8 <HAL_RCC_GetHCLKFreq>
 8008254:	4601      	mov	r1, r0
 8008256:	4b06      	ldr	r3, [pc, #24]	; (8008270 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008258:	6a1b      	ldr	r3, [r3, #32]
 800825a:	091b      	lsrs	r3, r3, #4
 800825c:	f003 0307 	and.w	r3, r3, #7
 8008260:	4a04      	ldr	r2, [pc, #16]	; (8008274 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008262:	5cd3      	ldrb	r3, [r2, r3]
 8008264:	f003 031f 	and.w	r3, r3, #31
 8008268:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800826c:	4618      	mov	r0, r3
 800826e:	bd80      	pop	{r7, pc}
 8008270:	58024400 	.word	0x58024400
 8008274:	08011cf8 	.word	0x08011cf8

08008278 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008278:	b480      	push	{r7}
 800827a:	b089      	sub	sp, #36	; 0x24
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008280:	4b9d      	ldr	r3, [pc, #628]	; (80084f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008284:	f003 0303 	and.w	r3, r3, #3
 8008288:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800828a:	4b9b      	ldr	r3, [pc, #620]	; (80084f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800828c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800828e:	0b1b      	lsrs	r3, r3, #12
 8008290:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008294:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008296:	4b98      	ldr	r3, [pc, #608]	; (80084f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800829a:	091b      	lsrs	r3, r3, #4
 800829c:	f003 0301 	and.w	r3, r3, #1
 80082a0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80082a2:	4b95      	ldr	r3, [pc, #596]	; (80084f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80082a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082a6:	08db      	lsrs	r3, r3, #3
 80082a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80082ac:	693a      	ldr	r2, [r7, #16]
 80082ae:	fb02 f303 	mul.w	r3, r2, r3
 80082b2:	ee07 3a90 	vmov	s15, r3
 80082b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f000 810a 	beq.w	80084da <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80082c6:	69bb      	ldr	r3, [r7, #24]
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d05a      	beq.n	8008382 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d302      	bcc.n	80082d6 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 80082d0:	2b02      	cmp	r3, #2
 80082d2:	d078      	beq.n	80083c6 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 80082d4:	e099      	b.n	800840a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082d6:	4b88      	ldr	r3, [pc, #544]	; (80084f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f003 0320 	and.w	r3, r3, #32
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d02d      	beq.n	800833e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80082e2:	4b85      	ldr	r3, [pc, #532]	; (80084f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	08db      	lsrs	r3, r3, #3
 80082e8:	f003 0303 	and.w	r3, r3, #3
 80082ec:	4a83      	ldr	r2, [pc, #524]	; (80084fc <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 80082ee:	fa22 f303 	lsr.w	r3, r2, r3
 80082f2:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	ee07 3a90 	vmov	s15, r3
 80082fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	ee07 3a90 	vmov	s15, r3
 8008304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008308:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800830c:	4b7a      	ldr	r3, [pc, #488]	; (80084f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800830e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008314:	ee07 3a90 	vmov	s15, r3
 8008318:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800831c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008320:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008500 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008324:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008328:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800832c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008330:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008338:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800833c:	e087      	b.n	800844e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	ee07 3a90 	vmov	s15, r3
 8008344:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008348:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008504 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800834c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008350:	4b69      	ldr	r3, [pc, #420]	; (80084f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008358:	ee07 3a90 	vmov	s15, r3
 800835c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008360:	ed97 6a03 	vldr	s12, [r7, #12]
 8008364:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008500 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008368:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800836c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008370:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008374:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800837c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008380:	e065      	b.n	800844e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	ee07 3a90 	vmov	s15, r3
 8008388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800838c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008508 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008390:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008394:	4b58      	ldr	r3, [pc, #352]	; (80084f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800839c:	ee07 3a90 	vmov	s15, r3
 80083a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80083a8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008500 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80083ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083c4:	e043      	b.n	800844e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	ee07 3a90 	vmov	s15, r3
 80083cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083d0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800850c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80083d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083d8:	4b47      	ldr	r3, [pc, #284]	; (80084f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80083da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083e0:	ee07 3a90 	vmov	s15, r3
 80083e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80083ec:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008500 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80083f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008404:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008408:	e021      	b.n	800844e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	ee07 3a90 	vmov	s15, r3
 8008410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008414:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008508 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008418:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800841c:	4b36      	ldr	r3, [pc, #216]	; (80084f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800841e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008424:	ee07 3a90 	vmov	s15, r3
 8008428:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800842c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008430:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008500 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008434:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008438:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800843c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008440:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008444:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008448:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800844c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800844e:	4b2a      	ldr	r3, [pc, #168]	; (80084f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008452:	0a5b      	lsrs	r3, r3, #9
 8008454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008458:	ee07 3a90 	vmov	s15, r3
 800845c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008460:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008464:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008468:	edd7 6a07 	vldr	s13, [r7, #28]
 800846c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008470:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008474:	ee17 2a90 	vmov	r2, s15
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800847c:	4b1e      	ldr	r3, [pc, #120]	; (80084f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800847e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008480:	0c1b      	lsrs	r3, r3, #16
 8008482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008486:	ee07 3a90 	vmov	s15, r3
 800848a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800848e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008492:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008496:	edd7 6a07 	vldr	s13, [r7, #28]
 800849a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800849e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084a2:	ee17 2a90 	vmov	r2, s15
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80084aa:	4b13      	ldr	r3, [pc, #76]	; (80084f8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80084ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ae:	0e1b      	lsrs	r3, r3, #24
 80084b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084b4:	ee07 3a90 	vmov	s15, r3
 80084b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80084c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084d0:	ee17 2a90 	vmov	r2, s15
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80084d8:	e008      	b.n	80084ec <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	609a      	str	r2, [r3, #8]
}
 80084ec:	bf00      	nop
 80084ee:	3724      	adds	r7, #36	; 0x24
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr
 80084f8:	58024400 	.word	0x58024400
 80084fc:	03d09000 	.word	0x03d09000
 8008500:	46000000 	.word	0x46000000
 8008504:	4c742400 	.word	0x4c742400
 8008508:	4a742400 	.word	0x4a742400
 800850c:	4bbebc20 	.word	0x4bbebc20

08008510 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008510:	b480      	push	{r7}
 8008512:	b089      	sub	sp, #36	; 0x24
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008518:	4b9d      	ldr	r3, [pc, #628]	; (8008790 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800851a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800851c:	f003 0303 	and.w	r3, r3, #3
 8008520:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008522:	4b9b      	ldr	r3, [pc, #620]	; (8008790 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008526:	0d1b      	lsrs	r3, r3, #20
 8008528:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800852c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800852e:	4b98      	ldr	r3, [pc, #608]	; (8008790 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008532:	0a1b      	lsrs	r3, r3, #8
 8008534:	f003 0301 	and.w	r3, r3, #1
 8008538:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800853a:	4b95      	ldr	r3, [pc, #596]	; (8008790 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800853c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800853e:	08db      	lsrs	r3, r3, #3
 8008540:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008544:	693a      	ldr	r2, [r7, #16]
 8008546:	fb02 f303 	mul.w	r3, r2, r3
 800854a:	ee07 3a90 	vmov	s15, r3
 800854e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008552:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	2b00      	cmp	r3, #0
 800855a:	f000 810a 	beq.w	8008772 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	2b01      	cmp	r3, #1
 8008562:	d05a      	beq.n	800861a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8008564:	2b01      	cmp	r3, #1
 8008566:	d302      	bcc.n	800856e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8008568:	2b02      	cmp	r3, #2
 800856a:	d078      	beq.n	800865e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800856c:	e099      	b.n	80086a2 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800856e:	4b88      	ldr	r3, [pc, #544]	; (8008790 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f003 0320 	and.w	r3, r3, #32
 8008576:	2b00      	cmp	r3, #0
 8008578:	d02d      	beq.n	80085d6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800857a:	4b85      	ldr	r3, [pc, #532]	; (8008790 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	08db      	lsrs	r3, r3, #3
 8008580:	f003 0303 	and.w	r3, r3, #3
 8008584:	4a83      	ldr	r2, [pc, #524]	; (8008794 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8008586:	fa22 f303 	lsr.w	r3, r2, r3
 800858a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	ee07 3a90 	vmov	s15, r3
 8008592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	ee07 3a90 	vmov	s15, r3
 800859c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085a4:	4b7a      	ldr	r3, [pc, #488]	; (8008790 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80085a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ac:	ee07 3a90 	vmov	s15, r3
 80085b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80085b8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008798 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80085bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085d0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80085d4:	e087      	b.n	80086e6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	ee07 3a90 	vmov	s15, r3
 80085dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085e0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800879c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80085e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085e8:	4b69      	ldr	r3, [pc, #420]	; (8008790 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80085ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085f0:	ee07 3a90 	vmov	s15, r3
 80085f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80085fc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008798 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008600:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008604:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008608:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800860c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008614:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008618:	e065      	b.n	80086e6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	ee07 3a90 	vmov	s15, r3
 8008620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008624:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80087a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008628:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800862c:	4b58      	ldr	r3, [pc, #352]	; (8008790 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800862e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008634:	ee07 3a90 	vmov	s15, r3
 8008638:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800863c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008640:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008798 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008644:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008648:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800864c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008650:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008658:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800865c:	e043      	b.n	80086e6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	ee07 3a90 	vmov	s15, r3
 8008664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008668:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80087a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800866c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008670:	4b47      	ldr	r3, [pc, #284]	; (8008790 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008678:	ee07 3a90 	vmov	s15, r3
 800867c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008680:	ed97 6a03 	vldr	s12, [r7, #12]
 8008684:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008798 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008688:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800868c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008690:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008694:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800869c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086a0:	e021      	b.n	80086e6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	ee07 3a90 	vmov	s15, r3
 80086a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ac:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80087a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80086b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086b4:	4b36      	ldr	r3, [pc, #216]	; (8008790 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80086b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086bc:	ee07 3a90 	vmov	s15, r3
 80086c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80086c8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008798 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80086cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086e4:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80086e6:	4b2a      	ldr	r3, [pc, #168]	; (8008790 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80086e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ea:	0a5b      	lsrs	r3, r3, #9
 80086ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086f0:	ee07 3a90 	vmov	s15, r3
 80086f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008700:	edd7 6a07 	vldr	s13, [r7, #28]
 8008704:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800870c:	ee17 2a90 	vmov	r2, s15
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008714:	4b1e      	ldr	r3, [pc, #120]	; (8008790 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008718:	0c1b      	lsrs	r3, r3, #16
 800871a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800871e:	ee07 3a90 	vmov	s15, r3
 8008722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008726:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800872a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800872e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008732:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008736:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800873a:	ee17 2a90 	vmov	r2, s15
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008742:	4b13      	ldr	r3, [pc, #76]	; (8008790 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008746:	0e1b      	lsrs	r3, r3, #24
 8008748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800874c:	ee07 3a90 	vmov	s15, r3
 8008750:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008754:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008758:	ee37 7a87 	vadd.f32	s14, s15, s14
 800875c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008760:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008764:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008768:	ee17 2a90 	vmov	r2, s15
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008770:	e008      	b.n	8008784 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2200      	movs	r2, #0
 8008782:	609a      	str	r2, [r3, #8]
}
 8008784:	bf00      	nop
 8008786:	3724      	adds	r7, #36	; 0x24
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr
 8008790:	58024400 	.word	0x58024400
 8008794:	03d09000 	.word	0x03d09000
 8008798:	46000000 	.word	0x46000000
 800879c:	4c742400 	.word	0x4c742400
 80087a0:	4a742400 	.word	0x4a742400
 80087a4:	4bbebc20 	.word	0x4bbebc20

080087a8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b089      	sub	sp, #36	; 0x24
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80087b0:	4b9d      	ldr	r3, [pc, #628]	; (8008a28 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80087b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b4:	f003 0303 	and.w	r3, r3, #3
 80087b8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80087ba:	4b9b      	ldr	r3, [pc, #620]	; (8008a28 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80087bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087be:	091b      	lsrs	r3, r3, #4
 80087c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087c4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80087c6:	4b98      	ldr	r3, [pc, #608]	; (8008a28 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80087c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ca:	f003 0301 	and.w	r3, r3, #1
 80087ce:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80087d0:	4b95      	ldr	r3, [pc, #596]	; (8008a28 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80087d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087d4:	08db      	lsrs	r3, r3, #3
 80087d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087da:	693a      	ldr	r2, [r7, #16]
 80087dc:	fb02 f303 	mul.w	r3, r2, r3
 80087e0:	ee07 3a90 	vmov	s15, r3
 80087e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087e8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f000 810a 	beq.w	8008a08 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d05a      	beq.n	80088b0 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d302      	bcc.n	8008804 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 80087fe:	2b02      	cmp	r3, #2
 8008800:	d078      	beq.n	80088f4 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8008802:	e099      	b.n	8008938 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008804:	4b88      	ldr	r3, [pc, #544]	; (8008a28 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f003 0320 	and.w	r3, r3, #32
 800880c:	2b00      	cmp	r3, #0
 800880e:	d02d      	beq.n	800886c <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008810:	4b85      	ldr	r3, [pc, #532]	; (8008a28 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	08db      	lsrs	r3, r3, #3
 8008816:	f003 0303 	and.w	r3, r3, #3
 800881a:	4a84      	ldr	r2, [pc, #528]	; (8008a2c <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800881c:	fa22 f303 	lsr.w	r3, r2, r3
 8008820:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	ee07 3a90 	vmov	s15, r3
 8008828:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	ee07 3a90 	vmov	s15, r3
 8008832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800883a:	4b7b      	ldr	r3, [pc, #492]	; (8008a28 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800883c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800883e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008842:	ee07 3a90 	vmov	s15, r3
 8008846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800884a:	ed97 6a03 	vldr	s12, [r7, #12]
 800884e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008a30 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800885a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800885e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008866:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800886a:	e087      	b.n	800897c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	ee07 3a90 	vmov	s15, r3
 8008872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008876:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008a34 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800887a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800887e:	4b6a      	ldr	r3, [pc, #424]	; (8008a28 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008886:	ee07 3a90 	vmov	s15, r3
 800888a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800888e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008892:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008a30 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800889a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800889e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088ae:	e065      	b.n	800897c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	ee07 3a90 	vmov	s15, r3
 80088b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008a38 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80088be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088c2:	4b59      	ldr	r3, [pc, #356]	; (8008a28 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80088c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ca:	ee07 3a90 	vmov	s15, r3
 80088ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80088d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008a30 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80088da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088f2:	e043      	b.n	800897c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	ee07 3a90 	vmov	s15, r3
 80088fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008a3c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008906:	4b48      	ldr	r3, [pc, #288]	; (8008a28 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8008908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800890a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800890e:	ee07 3a90 	vmov	s15, r3
 8008912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008916:	ed97 6a03 	vldr	s12, [r7, #12]
 800891a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008a30 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800891e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008926:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800892a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800892e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008932:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008936:	e021      	b.n	800897c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	ee07 3a90 	vmov	s15, r3
 800893e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008942:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008a38 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8008946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800894a:	4b37      	ldr	r3, [pc, #220]	; (8008a28 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800894c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800894e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008952:	ee07 3a90 	vmov	s15, r3
 8008956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800895a:	ed97 6a03 	vldr	s12, [r7, #12]
 800895e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008a30 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8008962:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800896a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800896e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008976:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800897a:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800897c:	4b2a      	ldr	r3, [pc, #168]	; (8008a28 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800897e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008980:	0a5b      	lsrs	r3, r3, #9
 8008982:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008986:	ee07 3a90 	vmov	s15, r3
 800898a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800898e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008992:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008996:	edd7 6a07 	vldr	s13, [r7, #28]
 800899a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800899e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089a2:	ee17 2a90 	vmov	r2, s15
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80089aa:	4b1f      	ldr	r3, [pc, #124]	; (8008a28 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80089ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ae:	0c1b      	lsrs	r3, r3, #16
 80089b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089b4:	ee07 3a90 	vmov	s15, r3
 80089b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80089c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089d0:	ee17 2a90 	vmov	r2, s15
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80089d8:	4b13      	ldr	r3, [pc, #76]	; (8008a28 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80089da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089dc:	0e1b      	lsrs	r3, r3, #24
 80089de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089e2:	ee07 3a90 	vmov	s15, r3
 80089e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80089f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089fe:	ee17 2a90 	vmov	r2, s15
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008a06:	e008      	b.n	8008a1a <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	609a      	str	r2, [r3, #8]
}
 8008a1a:	bf00      	nop
 8008a1c:	3724      	adds	r7, #36	; 0x24
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop
 8008a28:	58024400 	.word	0x58024400
 8008a2c:	03d09000 	.word	0x03d09000
 8008a30:	46000000 	.word	0x46000000
 8008a34:	4c742400 	.word	0x4c742400
 8008a38:	4a742400 	.word	0x4a742400
 8008a3c:	4bbebc20 	.word	0x4bbebc20

08008a40 <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
 8008a40:	b480      	push	{r7}
 8008a42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
 8008a44:	4b05      	ldr	r3, [pc, #20]	; (8008a5c <HAL_RCCEx_EnableLSECSS+0x1c>)
 8008a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a48:	4a04      	ldr	r2, [pc, #16]	; (8008a5c <HAL_RCCEx_EnableLSECSS+0x1c>)
 8008a4a:	f043 0320 	orr.w	r3, r3, #32
 8008a4e:	6713      	str	r3, [r2, #112]	; 0x70
}
 8008a50:	bf00      	nop
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop
 8008a5c:	58024400 	.word	0x58024400

08008a60 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008a6e:	4b53      	ldr	r3, [pc, #332]	; (8008bbc <RCCEx_PLL2_Config+0x15c>)
 8008a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a72:	f003 0303 	and.w	r3, r3, #3
 8008a76:	2b03      	cmp	r3, #3
 8008a78:	d101      	bne.n	8008a7e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	e099      	b.n	8008bb2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008a7e:	4b4f      	ldr	r3, [pc, #316]	; (8008bbc <RCCEx_PLL2_Config+0x15c>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a4e      	ldr	r2, [pc, #312]	; (8008bbc <RCCEx_PLL2_Config+0x15c>)
 8008a84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008a88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a8a:	f7f9 f90f 	bl	8001cac <HAL_GetTick>
 8008a8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008a90:	e008      	b.n	8008aa4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008a92:	f7f9 f90b 	bl	8001cac <HAL_GetTick>
 8008a96:	4602      	mov	r2, r0
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	1ad3      	subs	r3, r2, r3
 8008a9c:	2b02      	cmp	r3, #2
 8008a9e:	d901      	bls.n	8008aa4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008aa0:	2303      	movs	r3, #3
 8008aa2:	e086      	b.n	8008bb2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008aa4:	4b45      	ldr	r3, [pc, #276]	; (8008bbc <RCCEx_PLL2_Config+0x15c>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d1f0      	bne.n	8008a92 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008ab0:	4b42      	ldr	r3, [pc, #264]	; (8008bbc <RCCEx_PLL2_Config+0x15c>)
 8008ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	031b      	lsls	r3, r3, #12
 8008abe:	493f      	ldr	r1, [pc, #252]	; (8008bbc <RCCEx_PLL2_Config+0x15c>)
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	628b      	str	r3, [r1, #40]	; 0x28
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	025b      	lsls	r3, r3, #9
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	431a      	orrs	r2, r3
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	041b      	lsls	r3, r3, #16
 8008ae2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008ae6:	431a      	orrs	r2, r3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	691b      	ldr	r3, [r3, #16]
 8008aec:	3b01      	subs	r3, #1
 8008aee:	061b      	lsls	r3, r3, #24
 8008af0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008af4:	4931      	ldr	r1, [pc, #196]	; (8008bbc <RCCEx_PLL2_Config+0x15c>)
 8008af6:	4313      	orrs	r3, r2
 8008af8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008afa:	4b30      	ldr	r3, [pc, #192]	; (8008bbc <RCCEx_PLL2_Config+0x15c>)
 8008afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008afe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	695b      	ldr	r3, [r3, #20]
 8008b06:	492d      	ldr	r1, [pc, #180]	; (8008bbc <RCCEx_PLL2_Config+0x15c>)
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008b0c:	4b2b      	ldr	r3, [pc, #172]	; (8008bbc <RCCEx_PLL2_Config+0x15c>)
 8008b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b10:	f023 0220 	bic.w	r2, r3, #32
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	699b      	ldr	r3, [r3, #24]
 8008b18:	4928      	ldr	r1, [pc, #160]	; (8008bbc <RCCEx_PLL2_Config+0x15c>)
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008b1e:	4b27      	ldr	r3, [pc, #156]	; (8008bbc <RCCEx_PLL2_Config+0x15c>)
 8008b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b22:	4a26      	ldr	r2, [pc, #152]	; (8008bbc <RCCEx_PLL2_Config+0x15c>)
 8008b24:	f023 0310 	bic.w	r3, r3, #16
 8008b28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008b2a:	4b24      	ldr	r3, [pc, #144]	; (8008bbc <RCCEx_PLL2_Config+0x15c>)
 8008b2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b2e:	4b24      	ldr	r3, [pc, #144]	; (8008bc0 <RCCEx_PLL2_Config+0x160>)
 8008b30:	4013      	ands	r3, r2
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	69d2      	ldr	r2, [r2, #28]
 8008b36:	00d2      	lsls	r2, r2, #3
 8008b38:	4920      	ldr	r1, [pc, #128]	; (8008bbc <RCCEx_PLL2_Config+0x15c>)
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008b3e:	4b1f      	ldr	r3, [pc, #124]	; (8008bbc <RCCEx_PLL2_Config+0x15c>)
 8008b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b42:	4a1e      	ldr	r2, [pc, #120]	; (8008bbc <RCCEx_PLL2_Config+0x15c>)
 8008b44:	f043 0310 	orr.w	r3, r3, #16
 8008b48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d106      	bne.n	8008b5e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008b50:	4b1a      	ldr	r3, [pc, #104]	; (8008bbc <RCCEx_PLL2_Config+0x15c>)
 8008b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b54:	4a19      	ldr	r2, [pc, #100]	; (8008bbc <RCCEx_PLL2_Config+0x15c>)
 8008b56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008b5c:	e00f      	b.n	8008b7e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d106      	bne.n	8008b72 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008b64:	4b15      	ldr	r3, [pc, #84]	; (8008bbc <RCCEx_PLL2_Config+0x15c>)
 8008b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b68:	4a14      	ldr	r2, [pc, #80]	; (8008bbc <RCCEx_PLL2_Config+0x15c>)
 8008b6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008b70:	e005      	b.n	8008b7e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008b72:	4b12      	ldr	r3, [pc, #72]	; (8008bbc <RCCEx_PLL2_Config+0x15c>)
 8008b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b76:	4a11      	ldr	r2, [pc, #68]	; (8008bbc <RCCEx_PLL2_Config+0x15c>)
 8008b78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008b7e:	4b0f      	ldr	r3, [pc, #60]	; (8008bbc <RCCEx_PLL2_Config+0x15c>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a0e      	ldr	r2, [pc, #56]	; (8008bbc <RCCEx_PLL2_Config+0x15c>)
 8008b84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008b88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b8a:	f7f9 f88f 	bl	8001cac <HAL_GetTick>
 8008b8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008b90:	e008      	b.n	8008ba4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008b92:	f7f9 f88b 	bl	8001cac <HAL_GetTick>
 8008b96:	4602      	mov	r2, r0
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	1ad3      	subs	r3, r2, r3
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d901      	bls.n	8008ba4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008ba0:	2303      	movs	r3, #3
 8008ba2:	e006      	b.n	8008bb2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008ba4:	4b05      	ldr	r3, [pc, #20]	; (8008bbc <RCCEx_PLL2_Config+0x15c>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d0f0      	beq.n	8008b92 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	58024400 	.word	0x58024400
 8008bc0:	ffff0007 	.word	0xffff0007

08008bc4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008bd2:	4b53      	ldr	r3, [pc, #332]	; (8008d20 <RCCEx_PLL3_Config+0x15c>)
 8008bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd6:	f003 0303 	and.w	r3, r3, #3
 8008bda:	2b03      	cmp	r3, #3
 8008bdc:	d101      	bne.n	8008be2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e099      	b.n	8008d16 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008be2:	4b4f      	ldr	r3, [pc, #316]	; (8008d20 <RCCEx_PLL3_Config+0x15c>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a4e      	ldr	r2, [pc, #312]	; (8008d20 <RCCEx_PLL3_Config+0x15c>)
 8008be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bee:	f7f9 f85d 	bl	8001cac <HAL_GetTick>
 8008bf2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008bf4:	e008      	b.n	8008c08 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008bf6:	f7f9 f859 	bl	8001cac <HAL_GetTick>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	1ad3      	subs	r3, r2, r3
 8008c00:	2b02      	cmp	r3, #2
 8008c02:	d901      	bls.n	8008c08 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008c04:	2303      	movs	r3, #3
 8008c06:	e086      	b.n	8008d16 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c08:	4b45      	ldr	r3, [pc, #276]	; (8008d20 <RCCEx_PLL3_Config+0x15c>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1f0      	bne.n	8008bf6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008c14:	4b42      	ldr	r3, [pc, #264]	; (8008d20 <RCCEx_PLL3_Config+0x15c>)
 8008c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c18:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	051b      	lsls	r3, r3, #20
 8008c22:	493f      	ldr	r1, [pc, #252]	; (8008d20 <RCCEx_PLL3_Config+0x15c>)
 8008c24:	4313      	orrs	r3, r2
 8008c26:	628b      	str	r3, [r1, #40]	; 0x28
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	3b01      	subs	r3, #1
 8008c2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	3b01      	subs	r3, #1
 8008c38:	025b      	lsls	r3, r3, #9
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	431a      	orrs	r2, r3
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	68db      	ldr	r3, [r3, #12]
 8008c42:	3b01      	subs	r3, #1
 8008c44:	041b      	lsls	r3, r3, #16
 8008c46:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008c4a:	431a      	orrs	r2, r3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	691b      	ldr	r3, [r3, #16]
 8008c50:	3b01      	subs	r3, #1
 8008c52:	061b      	lsls	r3, r3, #24
 8008c54:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008c58:	4931      	ldr	r1, [pc, #196]	; (8008d20 <RCCEx_PLL3_Config+0x15c>)
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008c5e:	4b30      	ldr	r3, [pc, #192]	; (8008d20 <RCCEx_PLL3_Config+0x15c>)
 8008c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	695b      	ldr	r3, [r3, #20]
 8008c6a:	492d      	ldr	r1, [pc, #180]	; (8008d20 <RCCEx_PLL3_Config+0x15c>)
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008c70:	4b2b      	ldr	r3, [pc, #172]	; (8008d20 <RCCEx_PLL3_Config+0x15c>)
 8008c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c74:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	699b      	ldr	r3, [r3, #24]
 8008c7c:	4928      	ldr	r1, [pc, #160]	; (8008d20 <RCCEx_PLL3_Config+0x15c>)
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008c82:	4b27      	ldr	r3, [pc, #156]	; (8008d20 <RCCEx_PLL3_Config+0x15c>)
 8008c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c86:	4a26      	ldr	r2, [pc, #152]	; (8008d20 <RCCEx_PLL3_Config+0x15c>)
 8008c88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008c8e:	4b24      	ldr	r3, [pc, #144]	; (8008d20 <RCCEx_PLL3_Config+0x15c>)
 8008c90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c92:	4b24      	ldr	r3, [pc, #144]	; (8008d24 <RCCEx_PLL3_Config+0x160>)
 8008c94:	4013      	ands	r3, r2
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	69d2      	ldr	r2, [r2, #28]
 8008c9a:	00d2      	lsls	r2, r2, #3
 8008c9c:	4920      	ldr	r1, [pc, #128]	; (8008d20 <RCCEx_PLL3_Config+0x15c>)
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008ca2:	4b1f      	ldr	r3, [pc, #124]	; (8008d20 <RCCEx_PLL3_Config+0x15c>)
 8008ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca6:	4a1e      	ldr	r2, [pc, #120]	; (8008d20 <RCCEx_PLL3_Config+0x15c>)
 8008ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d106      	bne.n	8008cc2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008cb4:	4b1a      	ldr	r3, [pc, #104]	; (8008d20 <RCCEx_PLL3_Config+0x15c>)
 8008cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb8:	4a19      	ldr	r2, [pc, #100]	; (8008d20 <RCCEx_PLL3_Config+0x15c>)
 8008cba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008cbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008cc0:	e00f      	b.n	8008ce2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d106      	bne.n	8008cd6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008cc8:	4b15      	ldr	r3, [pc, #84]	; (8008d20 <RCCEx_PLL3_Config+0x15c>)
 8008cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ccc:	4a14      	ldr	r2, [pc, #80]	; (8008d20 <RCCEx_PLL3_Config+0x15c>)
 8008cce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008cd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008cd4:	e005      	b.n	8008ce2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008cd6:	4b12      	ldr	r3, [pc, #72]	; (8008d20 <RCCEx_PLL3_Config+0x15c>)
 8008cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cda:	4a11      	ldr	r2, [pc, #68]	; (8008d20 <RCCEx_PLL3_Config+0x15c>)
 8008cdc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008ce0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008ce2:	4b0f      	ldr	r3, [pc, #60]	; (8008d20 <RCCEx_PLL3_Config+0x15c>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a0e      	ldr	r2, [pc, #56]	; (8008d20 <RCCEx_PLL3_Config+0x15c>)
 8008ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cee:	f7f8 ffdd 	bl	8001cac <HAL_GetTick>
 8008cf2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008cf4:	e008      	b.n	8008d08 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008cf6:	f7f8 ffd9 	bl	8001cac <HAL_GetTick>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	1ad3      	subs	r3, r2, r3
 8008d00:	2b02      	cmp	r3, #2
 8008d02:	d901      	bls.n	8008d08 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008d04:	2303      	movs	r3, #3
 8008d06:	e006      	b.n	8008d16 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008d08:	4b05      	ldr	r3, [pc, #20]	; (8008d20 <RCCEx_PLL3_Config+0x15c>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d0f0      	beq.n	8008cf6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3710      	adds	r7, #16
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	58024400 	.word	0x58024400
 8008d24:	ffff0007 	.word	0xffff0007

08008d28 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008d30:	2301      	movs	r3, #1
 8008d32:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d067      	beq.n	8008e0a <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d106      	bne.n	8008d54 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f7f8 fc16 	bl	8001580 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2202      	movs	r2, #2
 8008d58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	22ca      	movs	r2, #202	; 0xca
 8008d62:	625a      	str	r2, [r3, #36]	; 0x24
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	2253      	movs	r2, #83	; 0x53
 8008d6a:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 fa49 	bl	8009204 <RTC_EnterInitMode>
 8008d72:	4603      	mov	r3, r0
 8008d74:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8008d76:	7bfb      	ldrb	r3, [r7, #15]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d13b      	bne.n	8008df4 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	6899      	ldr	r1, [r3, #8]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	4b23      	ldr	r3, [pc, #140]	; (8008e14 <HAL_RTC_Init+0xec>)
 8008d88:	400b      	ands	r3, r1
 8008d8a:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	6899      	ldr	r1, [r3, #8]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	685a      	ldr	r2, [r3, #4]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	691b      	ldr	r3, [r3, #16]
 8008d9a:	431a      	orrs	r2, r3
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	699b      	ldr	r3, [r3, #24]
 8008da0:	431a      	orrs	r2, r3
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	430a      	orrs	r2, r1
 8008da8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	0419      	lsls	r1, r3, #16
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	68da      	ldr	r2, [r3, #12]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	430a      	orrs	r2, r1
 8008dba:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 fa51 	bl	8009264 <RTC_ExitInitMode>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 8008dc6:	7bfb      	ldrb	r3, [r7, #15]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d113      	bne.n	8008df4 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f022 0203 	bic.w	r2, r2, #3
 8008dda:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	69da      	ldr	r2, [r3, #28]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	695b      	ldr	r3, [r3, #20]
 8008dea:	431a      	orrs	r2, r3
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	430a      	orrs	r2, r1
 8008df2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	22ff      	movs	r2, #255	; 0xff
 8008dfa:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8008dfc:	7bfb      	ldrb	r3, [r7, #15]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d103      	bne.n	8008e0a <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2201      	movs	r2, #1
 8008e06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8008e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3710      	adds	r7, #16
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}
 8008e14:	ff8fffbf 	.word	0xff8fffbf

08008e18 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008e18:	b590      	push	{r4, r7, lr}
 8008e1a:	b087      	sub	sp, #28
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	60b9      	str	r1, [r7, #8]
 8008e22:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d101      	bne.n	8008e32 <HAL_RTC_SetTime+0x1a>
 8008e2e:	2302      	movs	r3, #2
 8008e30:	e089      	b.n	8008f46 <HAL_RTC_SetTime+0x12e>
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2201      	movs	r2, #1
 8008e36:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2202      	movs	r2, #2
 8008e3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	22ca      	movs	r2, #202	; 0xca
 8008e48:	625a      	str	r2, [r3, #36]	; 0x24
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	2253      	movs	r2, #83	; 0x53
 8008e50:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008e52:	68f8      	ldr	r0, [r7, #12]
 8008e54:	f000 f9d6 	bl	8009204 <RTC_EnterInitMode>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008e5c:	7cfb      	ldrb	r3, [r7, #19]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d161      	bne.n	8008f26 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d126      	bne.n	8008eb6 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d102      	bne.n	8008e7c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	4618      	mov	r0, r3
 8008e82:	f000 fa2d 	bl	80092e0 <RTC_ByteToBcd2>
 8008e86:	4603      	mov	r3, r0
 8008e88:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	785b      	ldrb	r3, [r3, #1]
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f000 fa26 	bl	80092e0 <RTC_ByteToBcd2>
 8008e94:	4603      	mov	r3, r0
 8008e96:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008e98:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	789b      	ldrb	r3, [r3, #2]
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f000 fa1e 	bl	80092e0 <RTC_ByteToBcd2>
 8008ea4:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008ea6:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	78db      	ldrb	r3, [r3, #3]
 8008eae:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	617b      	str	r3, [r7, #20]
 8008eb4:	e018      	b.n	8008ee8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d102      	bne.n	8008eca <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	785b      	ldrb	r3, [r3, #1]
 8008ed4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008ed6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8008ed8:	68ba      	ldr	r2, [r7, #8]
 8008eda:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008edc:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	78db      	ldrb	r3, [r3, #3]
 8008ee2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681a      	ldr	r2, [r3, #0]
 8008eec:	6979      	ldr	r1, [r7, #20]
 8008eee:	4b18      	ldr	r3, [pc, #96]	; (8008f50 <HAL_RTC_SetTime+0x138>)
 8008ef0:	400b      	ands	r3, r1
 8008ef2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	689a      	ldr	r2, [r3, #8]
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008f02:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	6899      	ldr	r1, [r3, #8]
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	68da      	ldr	r2, [r3, #12]
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	691b      	ldr	r3, [r3, #16]
 8008f12:	431a      	orrs	r2, r3
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	430a      	orrs	r2, r1
 8008f1a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008f1c:	68f8      	ldr	r0, [r7, #12]
 8008f1e:	f000 f9a1 	bl	8009264 <RTC_ExitInitMode>
 8008f22:	4603      	mov	r3, r0
 8008f24:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	22ff      	movs	r2, #255	; 0xff
 8008f2c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8008f2e:	7cfb      	ldrb	r3, [r7, #19]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d103      	bne.n	8008f3c <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2201      	movs	r2, #1
 8008f38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008f44:	7cfb      	ldrb	r3, [r7, #19]
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	371c      	adds	r7, #28
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd90      	pop	{r4, r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	007f7f7f 	.word	0x007f7f7f

08008f54 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b086      	sub	sp, #24
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	691b      	ldr	r3, [r3, #16]
 8008f70:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	4b22      	ldr	r3, [pc, #136]	; (8009008 <HAL_RTC_GetTime+0xb4>)
 8008f80:	4013      	ands	r3, r2
 8008f82:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	0c1b      	lsrs	r3, r3, #16
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f8e:	b2da      	uxtb	r2, r3
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	0a1b      	lsrs	r3, r3, #8
 8008f98:	b2db      	uxtb	r3, r3
 8008f9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f9e:	b2da      	uxtb	r2, r3
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	b2db      	uxtb	r3, r3
 8008fa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fac:	b2da      	uxtb	r2, r3
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	0d9b      	lsrs	r3, r3, #22
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	f003 0301 	and.w	r3, r3, #1
 8008fbc:	b2da      	uxtb	r2, r3
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d11a      	bne.n	8008ffe <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	781b      	ldrb	r3, [r3, #0]
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f000 f9a7 	bl	8009320 <RTC_Bcd2ToByte>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	785b      	ldrb	r3, [r3, #1]
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f000 f99e 	bl	8009320 <RTC_Bcd2ToByte>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	789b      	ldrb	r3, [r3, #2]
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f000 f995 	bl	8009320 <RTC_Bcd2ToByte>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	461a      	mov	r2, r3
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008ffe:	2300      	movs	r3, #0
}
 8009000:	4618      	mov	r0, r3
 8009002:	3718      	adds	r7, #24
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}
 8009008:	007f7f7f 	.word	0x007f7f7f

0800900c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800900c:	b590      	push	{r4, r7, lr}
 800900e:	b087      	sub	sp, #28
 8009010:	af00      	add	r7, sp, #0
 8009012:	60f8      	str	r0, [r7, #12]
 8009014:	60b9      	str	r1, [r7, #8]
 8009016:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800901e:	2b01      	cmp	r3, #1
 8009020:	d101      	bne.n	8009026 <HAL_RTC_SetDate+0x1a>
 8009022:	2302      	movs	r3, #2
 8009024:	e073      	b.n	800910e <HAL_RTC_SetDate+0x102>
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2201      	movs	r2, #1
 800902a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2202      	movs	r2, #2
 8009032:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d10e      	bne.n	800905a <HAL_RTC_SetDate+0x4e>
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	785b      	ldrb	r3, [r3, #1]
 8009040:	f003 0310 	and.w	r3, r3, #16
 8009044:	2b00      	cmp	r3, #0
 8009046:	d008      	beq.n	800905a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	785b      	ldrb	r3, [r3, #1]
 800904c:	f023 0310 	bic.w	r3, r3, #16
 8009050:	b2db      	uxtb	r3, r3
 8009052:	330a      	adds	r3, #10
 8009054:	b2da      	uxtb	r2, r3
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d11c      	bne.n	800909a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	78db      	ldrb	r3, [r3, #3]
 8009064:	4618      	mov	r0, r3
 8009066:	f000 f93b 	bl	80092e0 <RTC_ByteToBcd2>
 800906a:	4603      	mov	r3, r0
 800906c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	785b      	ldrb	r3, [r3, #1]
 8009072:	4618      	mov	r0, r3
 8009074:	f000 f934 	bl	80092e0 <RTC_ByteToBcd2>
 8009078:	4603      	mov	r3, r0
 800907a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800907c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	789b      	ldrb	r3, [r3, #2]
 8009082:	4618      	mov	r0, r3
 8009084:	f000 f92c 	bl	80092e0 <RTC_ByteToBcd2>
 8009088:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800908a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009094:	4313      	orrs	r3, r2
 8009096:	617b      	str	r3, [r7, #20]
 8009098:	e00e      	b.n	80090b8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	78db      	ldrb	r3, [r3, #3]
 800909e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	785b      	ldrb	r3, [r3, #1]
 80090a4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80090a6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 80090a8:	68ba      	ldr	r2, [r7, #8]
 80090aa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80090ac:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	781b      	ldrb	r3, [r3, #0]
 80090b2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80090b4:	4313      	orrs	r3, r2
 80090b6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	22ca      	movs	r2, #202	; 0xca
 80090be:	625a      	str	r2, [r3, #36]	; 0x24
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	2253      	movs	r2, #83	; 0x53
 80090c6:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	f000 f89b 	bl	8009204 <RTC_EnterInitMode>
 80090ce:	4603      	mov	r3, r0
 80090d0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80090d2:	7cfb      	ldrb	r3, [r7, #19]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d10a      	bne.n	80090ee <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	6979      	ldr	r1, [r7, #20]
 80090de:	4b0e      	ldr	r3, [pc, #56]	; (8009118 <HAL_RTC_SetDate+0x10c>)
 80090e0:	400b      	ands	r3, r1
 80090e2:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80090e4:	68f8      	ldr	r0, [r7, #12]
 80090e6:	f000 f8bd 	bl	8009264 <RTC_ExitInitMode>
 80090ea:	4603      	mov	r3, r0
 80090ec:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	22ff      	movs	r2, #255	; 0xff
 80090f4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80090f6:	7cfb      	ldrb	r3, [r7, #19]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d103      	bne.n	8009104 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2201      	movs	r2, #1
 8009100:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2200      	movs	r2, #0
 8009108:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800910c:	7cfb      	ldrb	r3, [r7, #19]


}
 800910e:	4618      	mov	r0, r3
 8009110:	371c      	adds	r7, #28
 8009112:	46bd      	mov	sp, r7
 8009114:	bd90      	pop	{r4, r7, pc}
 8009116:	bf00      	nop
 8009118:	00ffff3f 	.word	0x00ffff3f

0800911c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b086      	sub	sp, #24
 8009120:	af00      	add	r7, sp, #0
 8009122:	60f8      	str	r0, [r7, #12]
 8009124:	60b9      	str	r1, [r7, #8]
 8009126:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	685a      	ldr	r2, [r3, #4]
 800912e:	4b21      	ldr	r3, [pc, #132]	; (80091b4 <HAL_RTC_GetDate+0x98>)
 8009130:	4013      	ands	r3, r2
 8009132:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	0c1b      	lsrs	r3, r3, #16
 8009138:	b2da      	uxtb	r2, r3
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	0a1b      	lsrs	r3, r3, #8
 8009142:	b2db      	uxtb	r3, r3
 8009144:	f003 031f 	and.w	r3, r3, #31
 8009148:	b2da      	uxtb	r2, r3
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	b2db      	uxtb	r3, r3
 8009152:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009156:	b2da      	uxtb	r2, r3
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	0b5b      	lsrs	r3, r3, #13
 8009160:	b2db      	uxtb	r3, r3
 8009162:	f003 0307 	and.w	r3, r3, #7
 8009166:	b2da      	uxtb	r2, r3
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d11a      	bne.n	80091a8 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	78db      	ldrb	r3, [r3, #3]
 8009176:	4618      	mov	r0, r3
 8009178:	f000 f8d2 	bl	8009320 <RTC_Bcd2ToByte>
 800917c:	4603      	mov	r3, r0
 800917e:	461a      	mov	r2, r3
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	785b      	ldrb	r3, [r3, #1]
 8009188:	4618      	mov	r0, r3
 800918a:	f000 f8c9 	bl	8009320 <RTC_Bcd2ToByte>
 800918e:	4603      	mov	r3, r0
 8009190:	461a      	mov	r2, r3
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	789b      	ldrb	r3, [r3, #2]
 800919a:	4618      	mov	r0, r3
 800919c:	f000 f8c0 	bl	8009320 <RTC_Bcd2ToByte>
 80091a0:	4603      	mov	r3, r0
 80091a2:	461a      	mov	r2, r3
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3718      	adds	r7, #24
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	00ffff3f 	.word	0x00ffff3f

080091b8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	68da      	ldr	r2, [r3, #12]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80091ce:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 80091d0:	f7f8 fd6c 	bl	8001cac <HAL_GetTick>
 80091d4:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80091d6:	e009      	b.n	80091ec <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80091d8:	f7f8 fd68 	bl	8001cac <HAL_GetTick>
 80091dc:	4602      	mov	r2, r0
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	1ad3      	subs	r3, r2, r3
 80091e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091e6:	d901      	bls.n	80091ec <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 80091e8:	2303      	movs	r3, #3
 80091ea:	e007      	b.n	80091fc <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	f003 0320 	and.w	r3, r3, #32
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d0ee      	beq.n	80091d8 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 80091fa:	2300      	movs	r3, #0
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3710      	adds	r7, #16
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800920c:	2300      	movs	r3, #0
 800920e:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	68db      	ldr	r3, [r3, #12]
 8009216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800921a:	2b00      	cmp	r3, #0
 800921c:	d11d      	bne.n	800925a <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f04f 32ff 	mov.w	r2, #4294967295
 8009226:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009228:	f7f8 fd40 	bl	8001cac <HAL_GetTick>
 800922c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800922e:	e00d      	b.n	800924c <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009230:	f7f8 fd3c 	bl	8001cac <HAL_GetTick>
 8009234:	4602      	mov	r2, r0
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	1ad3      	subs	r3, r2, r3
 800923a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800923e:	d905      	bls.n	800924c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009240:	2303      	movs	r3, #3
 8009242:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2203      	movs	r2, #3
 8009248:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009256:	2b00      	cmp	r3, #0
 8009258:	d0ea      	beq.n	8009230 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800925a:	7bfb      	ldrb	r3, [r7, #15]
}
 800925c:	4618      	mov	r0, r3
 800925e:	3710      	adds	r7, #16
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800926c:	2300      	movs	r3, #0
 800926e:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8009270:	4b1a      	ldr	r3, [pc, #104]	; (80092dc <RTC_ExitInitMode+0x78>)
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	4a19      	ldr	r2, [pc, #100]	; (80092dc <RTC_ExitInitMode+0x78>)
 8009276:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800927a:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800927c:	4b17      	ldr	r3, [pc, #92]	; (80092dc <RTC_ExitInitMode+0x78>)
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	f003 0320 	and.w	r3, r3, #32
 8009284:	2b00      	cmp	r3, #0
 8009286:	d10c      	bne.n	80092a2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f7ff ff95 	bl	80091b8 <HAL_RTC_WaitForSynchro>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d01e      	beq.n	80092d2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2203      	movs	r2, #3
 8009298:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800929c:	2303      	movs	r3, #3
 800929e:	73fb      	strb	r3, [r7, #15]
 80092a0:	e017      	b.n	80092d2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80092a2:	4b0e      	ldr	r3, [pc, #56]	; (80092dc <RTC_ExitInitMode+0x78>)
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	4a0d      	ldr	r2, [pc, #52]	; (80092dc <RTC_ExitInitMode+0x78>)
 80092a8:	f023 0320 	bic.w	r3, r3, #32
 80092ac:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f7ff ff82 	bl	80091b8 <HAL_RTC_WaitForSynchro>
 80092b4:	4603      	mov	r3, r0
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d005      	beq.n	80092c6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2203      	movs	r2, #3
 80092be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80092c2:	2303      	movs	r3, #3
 80092c4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80092c6:	4b05      	ldr	r3, [pc, #20]	; (80092dc <RTC_ExitInitMode+0x78>)
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	4a04      	ldr	r2, [pc, #16]	; (80092dc <RTC_ExitInitMode+0x78>)
 80092cc:	f043 0320 	orr.w	r3, r3, #32
 80092d0:	6093      	str	r3, [r2, #8]
  }

  return status;
 80092d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3710      	adds	r7, #16
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}
 80092dc:	58004000 	.word	0x58004000

080092e0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b085      	sub	sp, #20
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	4603      	mov	r3, r0
 80092e8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80092ea:	2300      	movs	r3, #0
 80092ec:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 80092ee:	79fb      	ldrb	r3, [r7, #7]
 80092f0:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 80092f2:	e005      	b.n	8009300 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	3301      	adds	r3, #1
 80092f8:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 80092fa:	7afb      	ldrb	r3, [r7, #11]
 80092fc:	3b0a      	subs	r3, #10
 80092fe:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8009300:	7afb      	ldrb	r3, [r7, #11]
 8009302:	2b09      	cmp	r3, #9
 8009304:	d8f6      	bhi.n	80092f4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	b2db      	uxtb	r3, r3
 800930a:	011b      	lsls	r3, r3, #4
 800930c:	b2da      	uxtb	r2, r3
 800930e:	7afb      	ldrb	r3, [r7, #11]
 8009310:	4313      	orrs	r3, r2
 8009312:	b2db      	uxtb	r3, r3
}
 8009314:	4618      	mov	r0, r3
 8009316:	3714      	adds	r7, #20
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009320:	b480      	push	{r7}
 8009322:	b085      	sub	sp, #20
 8009324:	af00      	add	r7, sp, #0
 8009326:	4603      	mov	r3, r0
 8009328:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800932a:	79fb      	ldrb	r3, [r7, #7]
 800932c:	091b      	lsrs	r3, r3, #4
 800932e:	b2db      	uxtb	r3, r3
 8009330:	461a      	mov	r2, r3
 8009332:	0092      	lsls	r2, r2, #2
 8009334:	4413      	add	r3, r2
 8009336:	005b      	lsls	r3, r3, #1
 8009338:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800933a:	79fb      	ldrb	r3, [r7, #7]
 800933c:	f003 030f 	and.w	r3, r3, #15
 8009340:	b2da      	uxtb	r2, r3
 8009342:	7bfb      	ldrb	r3, [r7, #15]
 8009344:	4413      	add	r3, r2
 8009346:	b2db      	uxtb	r3, r3
}
 8009348:	4618      	mov	r0, r3
 800934a:	3714      	adds	r7, #20
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr

08009354 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b08a      	sub	sp, #40	; 0x28
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d101      	bne.n	8009366 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009362:	2301      	movs	r3, #1
 8009364:	e07c      	b.n	8009460 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800936c:	b2db      	uxtb	r3, r3
 800936e:	2b00      	cmp	r3, #0
 8009370:	d10c      	bne.n	800938c <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2200      	movs	r2, #0
 8009376:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	699b      	ldr	r3, [r3, #24]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d102      	bne.n	8009386 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2202      	movs	r2, #2
 8009384:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f7f8 f914 	bl	80015b4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2203      	movs	r2, #3
 8009390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 f867 	bl	8009468 <HAL_SD_InitCard>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d001      	beq.n	80093a4 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 80093a0:	2301      	movs	r3, #1
 80093a2:	e05d      	b.n	8009460 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80093a4:	f107 0308 	add.w	r3, r7, #8
 80093a8:	4619      	mov	r1, r3
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 fdbe 	bl	8009f2c <HAL_SD_GetCardStatus>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d001      	beq.n	80093ba <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 80093b6:	2301      	movs	r3, #1
 80093b8:	e052      	b.n	8009460 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80093ba:	7e3b      	ldrb	r3, [r7, #24]
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80093c0:	7e7b      	ldrb	r3, [r7, #25]
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d10a      	bne.n	80093e4 <HAL_SD_Init+0x90>
 80093ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d102      	bne.n	80093da <HAL_SD_Init+0x86>
 80093d4:	6a3b      	ldr	r3, [r7, #32]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d004      	beq.n	80093e4 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80093e2:	e00b      	b.n	80093fc <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d104      	bne.n	80093f6 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80093f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80093f4:	e002      	b.n	80093fc <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2200      	movs	r2, #0
 80093fa:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	68db      	ldr	r3, [r3, #12]
 8009400:	4619      	mov	r1, r3
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f000 fe74 	bl	800a0f0 <HAL_SD_ConfigWideBusOperation>
 8009408:	4603      	mov	r3, r0
 800940a:	2b00      	cmp	r3, #0
 800940c:	d001      	beq.n	8009412 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800940e:	2301      	movs	r3, #1
 8009410:	e026      	b.n	8009460 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8009412:	f7f8 fc4b 	bl	8001cac <HAL_GetTick>
 8009416:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009418:	e011      	b.n	800943e <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800941a:	f7f8 fc47 	bl	8001cac <HAL_GetTick>
 800941e:	4602      	mov	r2, r0
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	1ad3      	subs	r3, r2, r3
 8009424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009428:	d109      	bne.n	800943e <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009430:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2201      	movs	r2, #1
 8009436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800943a:	2303      	movs	r3, #3
 800943c:	e010      	b.n	8009460 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 ff00 	bl	800a244 <HAL_SD_GetCardState>
 8009444:	4603      	mov	r3, r0
 8009446:	2b04      	cmp	r3, #4
 8009448:	d1e7      	bne.n	800941a <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2201      	movs	r2, #1
 800945a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800945e:	2300      	movs	r3, #0
}
 8009460:	4618      	mov	r0, r3
 8009462:	3728      	adds	r7, #40	; 0x28
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009468:	b5b0      	push	{r4, r5, r7, lr}
 800946a:	b08e      	sub	sp, #56	; 0x38
 800946c:	af04      	add	r7, sp, #16
 800946e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009470:	2300      	movs	r3, #0
 8009472:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009474:	2300      	movs	r3, #0
 8009476:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009478:	2300      	movs	r3, #0
 800947a:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800947c:	2300      	movs	r3, #0
 800947e:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009480:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009484:	f7fe fc6a 	bl	8007d5c <HAL_RCCEx_GetPeriphCLKFreq>
 8009488:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800948a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948c:	0a1b      	lsrs	r3, r3, #8
 800948e:	4a40      	ldr	r2, [pc, #256]	; (8009590 <HAL_SD_InitCard+0x128>)
 8009490:	fba2 2303 	umull	r2, r3, r2, r3
 8009494:	091b      	lsrs	r3, r3, #4
 8009496:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	699b      	ldr	r3, [r3, #24]
 800949c:	2b02      	cmp	r3, #2
 800949e:	d107      	bne.n	80094b0 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f042 0210 	orr.w	r2, r2, #16
 80094ae:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681d      	ldr	r5, [r3, #0]
 80094b4:	466c      	mov	r4, sp
 80094b6:	f107 0314 	add.w	r3, r7, #20
 80094ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80094be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80094c2:	f107 0308 	add.w	r3, r7, #8
 80094c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80094c8:	4628      	mov	r0, r5
 80094ca:	f002 fe8f 	bl	800c1ec <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4618      	mov	r0, r3
 80094d4:	f002 fed2 	bl	800c27c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 80094d8:	69bb      	ldr	r3, [r7, #24]
 80094da:	005b      	lsls	r3, r3, #1
 80094dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094de:	fbb2 f3f3 	udiv	r3, r2, r3
 80094e2:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 80094e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d008      	beq.n	80094fc <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 80094ea:	4a2a      	ldr	r2, [pc, #168]	; (8009594 <HAL_SD_InitCard+0x12c>)
 80094ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80094f2:	3301      	adds	r3, #1
 80094f4:	4618      	mov	r0, r3
 80094f6:	f7f8 fbe5 	bl	8001cc4 <HAL_Delay>
 80094fa:	e002      	b.n	8009502 <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 80094fc:	2002      	movs	r0, #2
 80094fe:	f7f8 fbe1 	bl	8001cc4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 ff7c 	bl	800a400 <SD_PowerON>
 8009508:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800950a:	6a3b      	ldr	r3, [r7, #32]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d00b      	beq.n	8009528 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800951c:	6a3b      	ldr	r3, [r7, #32]
 800951e:	431a      	orrs	r2, r3
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009524:	2301      	movs	r3, #1
 8009526:	e02e      	b.n	8009586 <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 feab 	bl	800a284 <SD_InitCard>
 800952e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009530:	6a3b      	ldr	r3, [r7, #32]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d00b      	beq.n	800954e <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2201      	movs	r2, #1
 800953a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009542:	6a3b      	ldr	r3, [r7, #32]
 8009544:	431a      	orrs	r2, r3
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800954a:	2301      	movs	r3, #1
 800954c:	e01b      	b.n	8009586 <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009556:	4618      	mov	r0, r3
 8009558:	f002 ff26 	bl	800c3a8 <SDMMC_CmdBlockLength>
 800955c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800955e:	6a3b      	ldr	r3, [r7, #32]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d00f      	beq.n	8009584 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a0b      	ldr	r2, [pc, #44]	; (8009598 <HAL_SD_InitCard+0x130>)
 800956a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009570:	6a3b      	ldr	r3, [r7, #32]
 8009572:	431a      	orrs	r2, r3
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2201      	movs	r2, #1
 800957c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	e000      	b.n	8009586 <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 8009584:	2300      	movs	r3, #0
}
 8009586:	4618      	mov	r0, r3
 8009588:	3728      	adds	r7, #40	; 0x28
 800958a:	46bd      	mov	sp, r7
 800958c:	bdb0      	pop	{r4, r5, r7, pc}
 800958e:	bf00      	nop
 8009590:	014f8b59 	.word	0x014f8b59
 8009594:	00012110 	.word	0x00012110
 8009598:	1fe00fff 	.word	0x1fe00fff

0800959c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b092      	sub	sp, #72	; 0x48
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	60f8      	str	r0, [r7, #12]
 80095a4:	60b9      	str	r1, [r7, #8]
 80095a6:	607a      	str	r2, [r7, #4]
 80095a8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80095aa:	f7f8 fb7f 	bl	8001cac <HAL_GetTick>
 80095ae:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d107      	bne.n	80095ce <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095c2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80095ca:	2301      	movs	r3, #1
 80095cc:	e167      	b.n	800989e <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	f040 815a 	bne.w	8009890 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2200      	movs	r2, #0
 80095e0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80095e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	441a      	add	r2, r3
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d907      	bls.n	8009600 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80095fc:	2301      	movs	r3, #1
 80095fe:	e14e      	b.n	800989e <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2203      	movs	r2, #3
 8009604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	2200      	movs	r2, #0
 800960e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009614:	2b01      	cmp	r3, #1
 8009616:	d002      	beq.n	800961e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8009618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800961a:	025b      	lsls	r3, r3, #9
 800961c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800961e:	f04f 33ff 	mov.w	r3, #4294967295
 8009622:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	025b      	lsls	r3, r3, #9
 8009628:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800962a:	2390      	movs	r3, #144	; 0x90
 800962c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800962e:	2302      	movs	r3, #2
 8009630:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009632:	2300      	movs	r3, #0
 8009634:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009636:	2300      	movs	r3, #0
 8009638:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f107 0214 	add.w	r2, r7, #20
 8009642:	4611      	mov	r1, r2
 8009644:	4618      	mov	r0, r3
 8009646:	f002 fe83 	bl	800c350 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	68da      	ldr	r2, [r3, #12]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009658:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	2b01      	cmp	r3, #1
 800965e:	d90a      	bls.n	8009676 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2202      	movs	r2, #2
 8009664:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800966c:	4618      	mov	r0, r3
 800966e:	f002 fee1 	bl	800c434 <SDMMC_CmdReadMultiBlock>
 8009672:	6478      	str	r0, [r7, #68]	; 0x44
 8009674:	e009      	b.n	800968a <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2201      	movs	r2, #1
 800967a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009682:	4618      	mov	r0, r3
 8009684:	f002 feb3 	bl	800c3ee <SDMMC_CmdReadSingleBlock>
 8009688:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800968a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800968c:	2b00      	cmp	r3, #0
 800968e:	d012      	beq.n	80096b6 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a84      	ldr	r2, [pc, #528]	; (80098a8 <HAL_SD_ReadBlocks+0x30c>)
 8009696:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800969c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800969e:	431a      	orrs	r2, r3
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2201      	movs	r2, #1
 80096a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2200      	movs	r2, #0
 80096b0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80096b2:	2301      	movs	r3, #1
 80096b4:	e0f3      	b.n	800989e <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 80096b6:	69bb      	ldr	r3, [r7, #24]
 80096b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80096ba:	e058      	b.n	800976e <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d033      	beq.n	8009732 <HAL_SD_ReadBlocks+0x196>
 80096ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096cc:	2b1f      	cmp	r3, #31
 80096ce:	d930      	bls.n	8009732 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80096d0:	2300      	movs	r3, #0
 80096d2:	643b      	str	r3, [r7, #64]	; 0x40
 80096d4:	e027      	b.n	8009726 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4618      	mov	r0, r3
 80096dc:	f002 fdb0 	bl	800c240 <SDMMC_ReadFIFO>
 80096e0:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80096e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e4:	b2da      	uxtb	r2, r3
 80096e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096e8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80096ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ec:	3301      	adds	r3, #1
 80096ee:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80096f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f2:	0a1b      	lsrs	r3, r3, #8
 80096f4:	b2da      	uxtb	r2, r3
 80096f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096f8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80096fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096fc:	3301      	adds	r3, #1
 80096fe:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009702:	0c1b      	lsrs	r3, r3, #16
 8009704:	b2da      	uxtb	r2, r3
 8009706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009708:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800970a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800970c:	3301      	adds	r3, #1
 800970e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009712:	0e1b      	lsrs	r3, r3, #24
 8009714:	b2da      	uxtb	r2, r3
 8009716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009718:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800971a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800971c:	3301      	adds	r3, #1
 800971e:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 8009720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009722:	3301      	adds	r3, #1
 8009724:	643b      	str	r3, [r7, #64]	; 0x40
 8009726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009728:	2b07      	cmp	r3, #7
 800972a:	d9d4      	bls.n	80096d6 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800972c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800972e:	3b20      	subs	r3, #32
 8009730:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009732:	f7f8 fabb 	bl	8001cac <HAL_GetTick>
 8009736:	4602      	mov	r2, r0
 8009738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800973a:	1ad3      	subs	r3, r2, r3
 800973c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800973e:	429a      	cmp	r2, r3
 8009740:	d902      	bls.n	8009748 <HAL_SD_ReadBlocks+0x1ac>
 8009742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009744:	2b00      	cmp	r3, #0
 8009746:	d112      	bne.n	800976e <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a56      	ldr	r2, [pc, #344]	; (80098a8 <HAL_SD_ReadBlocks+0x30c>)
 800974e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009754:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2201      	movs	r2, #1
 8009760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2200      	movs	r2, #0
 8009768:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800976a:	2303      	movs	r3, #3
 800976c:	e097      	b.n	800989e <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009774:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009778:	2b00      	cmp	r3, #0
 800977a:	d09f      	beq.n	80096bc <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	68da      	ldr	r2, [r3, #12]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800978a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009796:	2b00      	cmp	r3, #0
 8009798:	d022      	beq.n	80097e0 <HAL_SD_ReadBlocks+0x244>
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	2b01      	cmp	r3, #1
 800979e:	d91f      	bls.n	80097e0 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097a4:	2b03      	cmp	r3, #3
 80097a6:	d01b      	beq.n	80097e0 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4618      	mov	r0, r3
 80097ae:	f002 feab 	bl	800c508 <SDMMC_CmdStopTransfer>
 80097b2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80097b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d012      	beq.n	80097e0 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4a3a      	ldr	r2, [pc, #232]	; (80098a8 <HAL_SD_ReadBlocks+0x30c>)
 80097c0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097c8:	431a      	orrs	r2, r3
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2201      	movs	r2, #1
 80097d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2200      	movs	r2, #0
 80097da:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80097dc:	2301      	movs	r3, #1
 80097de:	e05e      	b.n	800989e <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097e6:	f003 0308 	and.w	r3, r3, #8
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d012      	beq.n	8009814 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4a2d      	ldr	r2, [pc, #180]	; (80098a8 <HAL_SD_ReadBlocks+0x30c>)
 80097f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097fa:	f043 0208 	orr.w	r2, r3, #8
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2201      	movs	r2, #1
 8009806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2200      	movs	r2, #0
 800980e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009810:	2301      	movs	r3, #1
 8009812:	e044      	b.n	800989e <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800981a:	f003 0302 	and.w	r3, r3, #2
 800981e:	2b00      	cmp	r3, #0
 8009820:	d012      	beq.n	8009848 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a20      	ldr	r2, [pc, #128]	; (80098a8 <HAL_SD_ReadBlocks+0x30c>)
 8009828:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800982e:	f043 0202 	orr.w	r2, r3, #2
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2201      	movs	r2, #1
 800983a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2200      	movs	r2, #0
 8009842:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009844:	2301      	movs	r3, #1
 8009846:	e02a      	b.n	800989e <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800984e:	f003 0320 	and.w	r3, r3, #32
 8009852:	2b00      	cmp	r3, #0
 8009854:	d012      	beq.n	800987c <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a13      	ldr	r2, [pc, #76]	; (80098a8 <HAL_SD_ReadBlocks+0x30c>)
 800985c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009862:	f043 0220 	orr.w	r2, r3, #32
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2201      	movs	r2, #1
 800986e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2200      	movs	r2, #0
 8009876:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009878:	2301      	movs	r3, #1
 800987a:	e010      	b.n	800989e <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a0a      	ldr	r2, [pc, #40]	; (80098ac <HAL_SD_ReadBlocks+0x310>)
 8009882:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2201      	movs	r2, #1
 8009888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800988c:	2300      	movs	r3, #0
 800988e:	e006      	b.n	800989e <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009894:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800989c:	2301      	movs	r3, #1
  }
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3748      	adds	r7, #72	; 0x48
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	1fe00fff 	.word	0x1fe00fff
 80098ac:	18000f3a 	.word	0x18000f3a

080098b0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b092      	sub	sp, #72	; 0x48
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	607a      	str	r2, [r7, #4]
 80098bc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80098be:	f7f8 f9f5 	bl	8001cac <HAL_GetTick>
 80098c2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d107      	bne.n	80098e2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80098de:	2301      	movs	r3, #1
 80098e0:	e16b      	b.n	8009bba <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	f040 815e 	bne.w	8009bac <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2200      	movs	r2, #0
 80098f4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80098f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	441a      	add	r2, r3
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009900:	429a      	cmp	r2, r3
 8009902:	d907      	bls.n	8009914 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009908:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009910:	2301      	movs	r3, #1
 8009912:	e152      	b.n	8009bba <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2203      	movs	r2, #3
 8009918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2200      	movs	r2, #0
 8009922:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009928:	2b01      	cmp	r3, #1
 800992a:	d002      	beq.n	8009932 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800992c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800992e:	025b      	lsls	r3, r3, #9
 8009930:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009932:	f04f 33ff 	mov.w	r3, #4294967295
 8009936:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	025b      	lsls	r3, r3, #9
 800993c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800993e:	2390      	movs	r3, #144	; 0x90
 8009940:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009942:	2300      	movs	r3, #0
 8009944:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009946:	2300      	movs	r3, #0
 8009948:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800994a:	2300      	movs	r3, #0
 800994c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f107 0218 	add.w	r2, r7, #24
 8009956:	4611      	mov	r1, r2
 8009958:	4618      	mov	r0, r3
 800995a:	f002 fcf9 	bl	800c350 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	68da      	ldr	r2, [r3, #12]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800996c:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	2b01      	cmp	r3, #1
 8009972:	d90a      	bls.n	800998a <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2220      	movs	r2, #32
 8009978:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009980:	4618      	mov	r0, r3
 8009982:	f002 fd9d 	bl	800c4c0 <SDMMC_CmdWriteMultiBlock>
 8009986:	6478      	str	r0, [r7, #68]	; 0x44
 8009988:	e009      	b.n	800999e <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2210      	movs	r2, #16
 800998e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009996:	4618      	mov	r0, r3
 8009998:	f002 fd6f 	bl	800c47a <SDMMC_CmdWriteSingleBlock>
 800999c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800999e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d012      	beq.n	80099ca <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4a86      	ldr	r2, [pc, #536]	; (8009bc4 <HAL_SD_WriteBlocks+0x314>)
 80099aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099b2:	431a      	orrs	r2, r3
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2201      	movs	r2, #1
 80099bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2200      	movs	r2, #0
 80099c4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80099c6:	2301      	movs	r3, #1
 80099c8:	e0f7      	b.n	8009bba <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80099ca:	69fb      	ldr	r3, [r7, #28]
 80099cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80099ce:	e05c      	b.n	8009a8a <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d037      	beq.n	8009a4e <HAL_SD_WriteBlocks+0x19e>
 80099de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099e0:	2b1f      	cmp	r3, #31
 80099e2:	d934      	bls.n	8009a4e <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80099e4:	2300      	movs	r3, #0
 80099e6:	643b      	str	r3, [r7, #64]	; 0x40
 80099e8:	e02b      	b.n	8009a42 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 80099ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80099f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099f2:	3301      	adds	r3, #1
 80099f4:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 80099f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	021a      	lsls	r2, r3, #8
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	4313      	orrs	r3, r2
 8009a00:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a04:	3301      	adds	r3, #1
 8009a06:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8009a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	041a      	lsls	r2, r3, #16
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	4313      	orrs	r3, r2
 8009a12:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a16:	3301      	adds	r3, #1
 8009a18:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	061a      	lsls	r2, r3, #24
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	4313      	orrs	r3, r2
 8009a24:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a28:	3301      	adds	r3, #1
 8009a2a:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f107 0214 	add.w	r2, r7, #20
 8009a34:	4611      	mov	r1, r2
 8009a36:	4618      	mov	r0, r3
 8009a38:	f002 fc0f 	bl	800c25a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8009a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a3e:	3301      	adds	r3, #1
 8009a40:	643b      	str	r3, [r7, #64]	; 0x40
 8009a42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a44:	2b07      	cmp	r3, #7
 8009a46:	d9d0      	bls.n	80099ea <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8009a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a4a:	3b20      	subs	r3, #32
 8009a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009a4e:	f7f8 f92d 	bl	8001cac <HAL_GetTick>
 8009a52:	4602      	mov	r2, r0
 8009a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a56:	1ad3      	subs	r3, r2, r3
 8009a58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d902      	bls.n	8009a64 <HAL_SD_WriteBlocks+0x1b4>
 8009a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d112      	bne.n	8009a8a <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a56      	ldr	r2, [pc, #344]	; (8009bc4 <HAL_SD_WriteBlocks+0x314>)
 8009a6a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a72:	431a      	orrs	r2, r3
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2200      	movs	r2, #0
 8009a84:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009a86:	2303      	movs	r3, #3
 8009a88:	e097      	b.n	8009bba <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a90:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d09b      	beq.n	80099d0 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	68da      	ldr	r2, [r3, #12]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009aa6:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d022      	beq.n	8009afc <HAL_SD_WriteBlocks+0x24c>
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d91f      	bls.n	8009afc <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ac0:	2b03      	cmp	r3, #3
 8009ac2:	d01b      	beq.n	8009afc <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f002 fd1d 	bl	800c508 <SDMMC_CmdStopTransfer>
 8009ace:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d012      	beq.n	8009afc <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a3a      	ldr	r2, [pc, #232]	; (8009bc4 <HAL_SD_WriteBlocks+0x314>)
 8009adc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ae2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ae4:	431a      	orrs	r2, r3
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2201      	movs	r2, #1
 8009aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2200      	movs	r2, #0
 8009af6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8009af8:	2301      	movs	r3, #1
 8009afa:	e05e      	b.n	8009bba <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b02:	f003 0308 	and.w	r3, r3, #8
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d012      	beq.n	8009b30 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a2d      	ldr	r2, [pc, #180]	; (8009bc4 <HAL_SD_WriteBlocks+0x314>)
 8009b10:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b16:	f043 0208 	orr.w	r2, r3, #8
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2201      	movs	r2, #1
 8009b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	e044      	b.n	8009bba <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b36:	f003 0302 	and.w	r3, r3, #2
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d012      	beq.n	8009b64 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4a20      	ldr	r2, [pc, #128]	; (8009bc4 <HAL_SD_WriteBlocks+0x314>)
 8009b44:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b4a:	f043 0202 	orr.w	r2, r3, #2
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2201      	movs	r2, #1
 8009b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009b60:	2301      	movs	r3, #1
 8009b62:	e02a      	b.n	8009bba <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b6a:	f003 0310 	and.w	r3, r3, #16
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d012      	beq.n	8009b98 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a13      	ldr	r2, [pc, #76]	; (8009bc4 <HAL_SD_WriteBlocks+0x314>)
 8009b78:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b7e:	f043 0210 	orr.w	r2, r3, #16
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2201      	movs	r2, #1
 8009b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2200      	movs	r2, #0
 8009b92:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009b94:	2301      	movs	r3, #1
 8009b96:	e010      	b.n	8009bba <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a0a      	ldr	r2, [pc, #40]	; (8009bc8 <HAL_SD_WriteBlocks+0x318>)
 8009b9e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	e006      	b.n	8009bba <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009bb8:	2301      	movs	r3, #1
  }
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3748      	adds	r7, #72	; 0x48
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	1fe00fff 	.word	0x1fe00fff
 8009bc8:	18000f3a 	.word	0x18000f3a

08009bcc <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 8009bd6:	bf00      	nop
 8009bd8:	370c      	adds	r7, #12
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be0:	4770      	bx	lr
	...

08009be4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b083      	sub	sp, #12
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bf2:	0f9b      	lsrs	r3, r3, #30
 8009bf4:	b2da      	uxtb	r2, r3
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bfe:	0e9b      	lsrs	r3, r3, #26
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	f003 030f 	and.w	r3, r3, #15
 8009c06:	b2da      	uxtb	r2, r3
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c10:	0e1b      	lsrs	r3, r3, #24
 8009c12:	b2db      	uxtb	r3, r3
 8009c14:	f003 0303 	and.w	r3, r3, #3
 8009c18:	b2da      	uxtb	r2, r3
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c22:	0c1b      	lsrs	r3, r3, #16
 8009c24:	b2da      	uxtb	r2, r3
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c2e:	0a1b      	lsrs	r3, r3, #8
 8009c30:	b2da      	uxtb	r2, r3
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c3a:	b2da      	uxtb	r2, r3
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c44:	0d1b      	lsrs	r3, r3, #20
 8009c46:	b29a      	uxth	r2, r3
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c50:	0c1b      	lsrs	r3, r3, #16
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	f003 030f 	and.w	r3, r3, #15
 8009c58:	b2da      	uxtb	r2, r3
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c62:	0bdb      	lsrs	r3, r3, #15
 8009c64:	b2db      	uxtb	r3, r3
 8009c66:	f003 0301 	and.w	r3, r3, #1
 8009c6a:	b2da      	uxtb	r2, r3
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c74:	0b9b      	lsrs	r3, r3, #14
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	f003 0301 	and.w	r3, r3, #1
 8009c7c:	b2da      	uxtb	r2, r3
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c86:	0b5b      	lsrs	r3, r3, #13
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	f003 0301 	and.w	r3, r3, #1
 8009c8e:	b2da      	uxtb	r2, r3
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c98:	0b1b      	lsrs	r3, r3, #12
 8009c9a:	b2db      	uxtb	r3, r3
 8009c9c:	f003 0301 	and.w	r3, r3, #1
 8009ca0:	b2da      	uxtb	r2, r3
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d163      	bne.n	8009d7c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009cb8:	009a      	lsls	r2, r3, #2
 8009cba:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009cbe:	4013      	ands	r3, r2
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009cc4:	0f92      	lsrs	r2, r2, #30
 8009cc6:	431a      	orrs	r2, r3
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009cd0:	0edb      	lsrs	r3, r3, #27
 8009cd2:	b2db      	uxtb	r3, r3
 8009cd4:	f003 0307 	and.w	r3, r3, #7
 8009cd8:	b2da      	uxtb	r2, r3
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ce2:	0e1b      	lsrs	r3, r3, #24
 8009ce4:	b2db      	uxtb	r3, r3
 8009ce6:	f003 0307 	and.w	r3, r3, #7
 8009cea:	b2da      	uxtb	r2, r3
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009cf4:	0d5b      	lsrs	r3, r3, #21
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	f003 0307 	and.w	r3, r3, #7
 8009cfc:	b2da      	uxtb	r2, r3
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d06:	0c9b      	lsrs	r3, r3, #18
 8009d08:	b2db      	uxtb	r3, r3
 8009d0a:	f003 0307 	and.w	r3, r3, #7
 8009d0e:	b2da      	uxtb	r2, r3
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d18:	0bdb      	lsrs	r3, r3, #15
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	f003 0307 	and.w	r3, r3, #7
 8009d20:	b2da      	uxtb	r2, r3
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	691b      	ldr	r3, [r3, #16]
 8009d2a:	1c5a      	adds	r2, r3, #1
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	7e1b      	ldrb	r3, [r3, #24]
 8009d34:	b2db      	uxtb	r3, r3
 8009d36:	f003 0307 	and.w	r3, r3, #7
 8009d3a:	3302      	adds	r3, #2
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009d46:	fb02 f203 	mul.w	r2, r2, r3
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	7a1b      	ldrb	r3, [r3, #8]
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	f003 030f 	and.w	r3, r3, #15
 8009d58:	2201      	movs	r2, #1
 8009d5a:	409a      	lsls	r2, r3
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009d68:	0a52      	lsrs	r2, r2, #9
 8009d6a:	fb02 f203 	mul.w	r2, r2, r3
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d78:	659a      	str	r2, [r3, #88]	; 0x58
 8009d7a:	e031      	b.n	8009de0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d11d      	bne.n	8009dc0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d88:	041b      	lsls	r3, r3, #16
 8009d8a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d92:	0c1b      	lsrs	r3, r3, #16
 8009d94:	431a      	orrs	r2, r3
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	691b      	ldr	r3, [r3, #16]
 8009d9e:	3301      	adds	r3, #1
 8009da0:	029a      	lsls	r2, r3, #10
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009db4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	659a      	str	r2, [r3, #88]	; 0x58
 8009dbe:	e00f      	b.n	8009de0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4a58      	ldr	r2, [pc, #352]	; (8009f28 <HAL_SD_GetCardCSD+0x344>)
 8009dc6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dcc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	e09d      	b.n	8009f1c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009de4:	0b9b      	lsrs	r3, r3, #14
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	f003 0301 	and.w	r3, r3, #1
 8009dec:	b2da      	uxtb	r2, r3
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009df6:	09db      	lsrs	r3, r3, #7
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dfe:	b2da      	uxtb	r2, r3
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e08:	b2db      	uxtb	r3, r3
 8009e0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e0e:	b2da      	uxtb	r2, r3
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e18:	0fdb      	lsrs	r3, r3, #31
 8009e1a:	b2da      	uxtb	r2, r3
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e24:	0f5b      	lsrs	r3, r3, #29
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	f003 0303 	and.w	r3, r3, #3
 8009e2c:	b2da      	uxtb	r2, r3
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e36:	0e9b      	lsrs	r3, r3, #26
 8009e38:	b2db      	uxtb	r3, r3
 8009e3a:	f003 0307 	and.w	r3, r3, #7
 8009e3e:	b2da      	uxtb	r2, r3
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e48:	0d9b      	lsrs	r3, r3, #22
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	f003 030f 	and.w	r3, r3, #15
 8009e50:	b2da      	uxtb	r2, r3
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e5a:	0d5b      	lsrs	r3, r3, #21
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	f003 0301 	and.w	r3, r3, #1
 8009e62:	b2da      	uxtb	r2, r3
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e76:	0c1b      	lsrs	r3, r3, #16
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	f003 0301 	and.w	r3, r3, #1
 8009e7e:	b2da      	uxtb	r2, r3
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e8a:	0bdb      	lsrs	r3, r3, #15
 8009e8c:	b2db      	uxtb	r3, r3
 8009e8e:	f003 0301 	and.w	r3, r3, #1
 8009e92:	b2da      	uxtb	r2, r3
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e9e:	0b9b      	lsrs	r3, r3, #14
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	f003 0301 	and.w	r3, r3, #1
 8009ea6:	b2da      	uxtb	r2, r3
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009eb2:	0b5b      	lsrs	r3, r3, #13
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	f003 0301 	and.w	r3, r3, #1
 8009eba:	b2da      	uxtb	r2, r3
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ec6:	0b1b      	lsrs	r3, r3, #12
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	f003 0301 	and.w	r3, r3, #1
 8009ece:	b2da      	uxtb	r2, r3
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009eda:	0a9b      	lsrs	r3, r3, #10
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	f003 0303 	and.w	r3, r3, #3
 8009ee2:	b2da      	uxtb	r2, r3
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009eee:	0a1b      	lsrs	r3, r3, #8
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	f003 0303 	and.w	r3, r3, #3
 8009ef6:	b2da      	uxtb	r2, r3
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f02:	085b      	lsrs	r3, r3, #1
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f0a:	b2da      	uxtb	r2, r3
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	2201      	movs	r2, #1
 8009f16:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009f1a:	2300      	movs	r3, #0
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	370c      	adds	r7, #12
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr
 8009f28:	1fe00fff 	.word	0x1fe00fff

08009f2c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b094      	sub	sp, #80	; 0x50
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009f36:	2300      	movs	r3, #0
 8009f38:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8009f3c:	f107 0308 	add.w	r3, r7, #8
 8009f40:	4619      	mov	r1, r3
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 fb64 	bl	800a610 <SD_SendSDStatus>
 8009f48:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d011      	beq.n	8009f74 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4a4f      	ldr	r2, [pc, #316]	; (800a094 <HAL_SD_GetCardStatus+0x168>)
 8009f56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f5e:	431a      	orrs	r2, r3
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2201      	movs	r2, #1
 8009f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8009f72:	e070      	b.n	800a056 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	099b      	lsrs	r3, r3, #6
 8009f78:	b2db      	uxtb	r3, r3
 8009f7a:	f003 0303 	and.w	r3, r3, #3
 8009f7e:	b2da      	uxtb	r2, r3
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	095b      	lsrs	r3, r3, #5
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	f003 0301 	and.w	r3, r3, #1
 8009f8e:	b2da      	uxtb	r2, r3
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	0a1b      	lsrs	r3, r3, #8
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009f9e:	b29a      	uxth	r2, r3
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	0e1b      	lsrs	r3, r3, #24
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	b29a      	uxth	r2, r3
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	061a      	lsls	r2, r3, #24
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	021b      	lsls	r3, r3, #8
 8009fb6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009fba:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	0a1b      	lsrs	r3, r3, #8
 8009fc0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009fc4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	0e1b      	lsrs	r3, r3, #24
 8009fca:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	b2da      	uxtb	r2, r3
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	0a1b      	lsrs	r3, r3, #8
 8009fdc:	b2da      	uxtb	r2, r3
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	0d1b      	lsrs	r3, r3, #20
 8009fe6:	b2db      	uxtb	r3, r3
 8009fe8:	f003 030f 	and.w	r3, r3, #15
 8009fec:	b2da      	uxtb	r2, r3
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	0c1b      	lsrs	r3, r3, #16
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009ffc:	b29a      	uxth	r2, r3
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	b29b      	uxth	r3, r3
 800a002:	b2db      	uxtb	r3, r3
 800a004:	b29b      	uxth	r3, r3
 800a006:	4313      	orrs	r3, r2
 800a008:	b29a      	uxth	r2, r3
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	0a9b      	lsrs	r3, r3, #10
 800a012:	b2db      	uxtb	r3, r3
 800a014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a018:	b2da      	uxtb	r2, r3
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	0a1b      	lsrs	r3, r3, #8
 800a022:	b2db      	uxtb	r3, r3
 800a024:	f003 0303 	and.w	r3, r3, #3
 800a028:	b2da      	uxtb	r2, r3
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	091b      	lsrs	r3, r3, #4
 800a032:	b2db      	uxtb	r3, r3
 800a034:	f003 030f 	and.w	r3, r3, #15
 800a038:	b2da      	uxtb	r2, r3
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	b2db      	uxtb	r3, r3
 800a042:	f003 030f 	and.w	r3, r3, #15
 800a046:	b2da      	uxtb	r2, r3
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800a04c:	69bb      	ldr	r3, [r7, #24]
 800a04e:	0e1b      	lsrs	r3, r3, #24
 800a050:	b2da      	uxtb	r2, r3
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a05e:	4618      	mov	r0, r3
 800a060:	f002 f9a2 	bl	800c3a8 <SDMMC_CmdBlockLength>
 800a064:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800a066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d00d      	beq.n	800a088 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a08      	ldr	r2, [pc, #32]	; (800a094 <HAL_SD_GetCardStatus+0x168>)
 800a072:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a078:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2201      	movs	r2, #1
 800a07e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800a082:	2301      	movs	r3, #1
 800a084:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800a088:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3750      	adds	r7, #80	; 0x50
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}
 800a094:	1fe00fff 	.word	0x1fe00fff

0800a098 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a0e2:	2300      	movs	r3, #0
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	370c      	adds	r7, #12
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a0f0:	b5b0      	push	{r4, r5, r7, lr}
 800a0f2:	b08e      	sub	sp, #56	; 0x38
 800a0f4:	af04      	add	r7, sp, #16
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2203      	movs	r2, #3
 800a104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a10c:	2b03      	cmp	r3, #3
 800a10e:	d02e      	beq.n	800a16e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a116:	d106      	bne.n	800a126 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a11c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	639a      	str	r2, [r3, #56]	; 0x38
 800a124:	e029      	b.n	800a17a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a12c:	d10a      	bne.n	800a144 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 fb66 	bl	800a800 <SD_WideBus_Enable>
 800a134:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a13a:	6a3b      	ldr	r3, [r7, #32]
 800a13c:	431a      	orrs	r2, r3
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	639a      	str	r2, [r3, #56]	; 0x38
 800a142:	e01a      	b.n	800a17a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d10a      	bne.n	800a160 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f000 fba3 	bl	800a896 <SD_WideBus_Disable>
 800a150:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a156:	6a3b      	ldr	r3, [r7, #32]
 800a158:	431a      	orrs	r2, r3
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	639a      	str	r2, [r3, #56]	; 0x38
 800a15e:	e00c      	b.n	800a17a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a164:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	639a      	str	r2, [r3, #56]	; 0x38
 800a16c:	e005      	b.n	800a17a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a172:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d007      	beq.n	800a192 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a2e      	ldr	r2, [pc, #184]	; (800a240 <HAL_SD_ConfigWideBusOperation+0x150>)
 800a188:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a18a:	2301      	movs	r3, #1
 800a18c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a190:	e034      	b.n	800a1fc <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	689b      	ldr	r3, [r3, #8]
 800a19c:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	691b      	ldr	r3, [r3, #16]
 800a1a6:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	695b      	ldr	r3, [r3, #20]
 800a1ac:	2b03      	cmp	r3, #3
 800a1ae:	d903      	bls.n	800a1b8 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	695b      	ldr	r3, [r3, #20]
 800a1b4:	61bb      	str	r3, [r7, #24]
 800a1b6:	e012      	b.n	800a1de <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1c0:	d103      	bne.n	800a1ca <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	695b      	ldr	r3, [r3, #20]
 800a1c6:	61bb      	str	r3, [r7, #24]
 800a1c8:	e009      	b.n	800a1de <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1d2:	d102      	bne.n	800a1da <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800a1d4:	2302      	movs	r3, #2
 800a1d6:	61bb      	str	r3, [r7, #24]
 800a1d8:	e001      	b.n	800a1de <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800a1da:	2304      	movs	r3, #4
 800a1dc:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681d      	ldr	r5, [r3, #0]
 800a1e2:	466c      	mov	r4, sp
 800a1e4:	f107 0314 	add.w	r3, r7, #20
 800a1e8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a1ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a1f0:	f107 0308 	add.w	r3, r7, #8
 800a1f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a1f6:	4628      	mov	r0, r5
 800a1f8:	f001 fff8 	bl	800c1ec <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a204:	4618      	mov	r0, r3
 800a206:	f002 f8cf 	bl	800c3a8 <SDMMC_CmdBlockLength>
 800a20a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a20c:	6a3b      	ldr	r3, [r7, #32]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d00c      	beq.n	800a22c <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4a0a      	ldr	r2, [pc, #40]	; (800a240 <HAL_SD_ConfigWideBusOperation+0x150>)
 800a218:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a21e:	6a3b      	ldr	r3, [r7, #32]
 800a220:	431a      	orrs	r2, r3
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a226:	2301      	movs	r3, #1
 800a228:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2201      	movs	r2, #1
 800a230:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800a234:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3728      	adds	r7, #40	; 0x28
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bdb0      	pop	{r4, r5, r7, pc}
 800a240:	1fe00fff 	.word	0x1fe00fff

0800a244 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b086      	sub	sp, #24
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a24c:	2300      	movs	r3, #0
 800a24e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a250:	f107 030c 	add.w	r3, r7, #12
 800a254:	4619      	mov	r1, r3
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f000 faaa 	bl	800a7b0 <SD_SendStatus>
 800a25c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d005      	beq.n	800a270 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	431a      	orrs	r2, r3
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	0a5b      	lsrs	r3, r3, #9
 800a274:	f003 030f 	and.w	r3, r3, #15
 800a278:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a27a:	693b      	ldr	r3, [r7, #16]
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3718      	adds	r7, #24
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a284:	b590      	push	{r4, r7, lr}
 800a286:	b091      	sub	sp, #68	; 0x44
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a28c:	2301      	movs	r3, #1
 800a28e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4618      	mov	r0, r3
 800a296:	f002 f802 	bl	800c29e <SDMMC_GetPowerState>
 800a29a:	4603      	mov	r3, r0
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d102      	bne.n	800a2a6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a2a0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a2a4:	e0a8      	b.n	800a3f8 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2aa:	2b03      	cmp	r3, #3
 800a2ac:	d02e      	beq.n	800a30c <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f002 fa4e 	bl	800c754 <SDMMC_CmdSendCID>
 800a2b8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a2ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d001      	beq.n	800a2c4 <SD_InitCard+0x40>
    {
      return errorstate;
 800a2c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2c2:	e099      	b.n	800a3f8 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	2100      	movs	r1, #0
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f002 f82d 	bl	800c32a <SDMMC_GetResponse>
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	2104      	movs	r1, #4
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f002 f824 	bl	800c32a <SDMMC_GetResponse>
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	2108      	movs	r1, #8
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f002 f81b 	bl	800c32a <SDMMC_GetResponse>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	210c      	movs	r1, #12
 800a300:	4618      	mov	r0, r3
 800a302:	f002 f812 	bl	800c32a <SDMMC_GetResponse>
 800a306:	4602      	mov	r2, r0
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a310:	2b03      	cmp	r3, #3
 800a312:	d00d      	beq.n	800a330 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f107 020e 	add.w	r2, r7, #14
 800a31c:	4611      	mov	r1, r2
 800a31e:	4618      	mov	r0, r3
 800a320:	f002 fa57 	bl	800c7d2 <SDMMC_CmdSetRelAdd>
 800a324:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d001      	beq.n	800a330 <SD_InitCard+0xac>
    {
      return errorstate;
 800a32c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a32e:	e063      	b.n	800a3f8 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a334:	2b03      	cmp	r3, #3
 800a336:	d036      	beq.n	800a3a6 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a338:	89fb      	ldrh	r3, [r7, #14]
 800a33a:	461a      	mov	r2, r3
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681a      	ldr	r2, [r3, #0]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a348:	041b      	lsls	r3, r3, #16
 800a34a:	4619      	mov	r1, r3
 800a34c:	4610      	mov	r0, r2
 800a34e:	f002 fa20 	bl	800c792 <SDMMC_CmdSendCSD>
 800a352:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a356:	2b00      	cmp	r3, #0
 800a358:	d001      	beq.n	800a35e <SD_InitCard+0xda>
    {
      return errorstate;
 800a35a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a35c:	e04c      	b.n	800a3f8 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	2100      	movs	r1, #0
 800a364:	4618      	mov	r0, r3
 800a366:	f001 ffe0 	bl	800c32a <SDMMC_GetResponse>
 800a36a:	4602      	mov	r2, r0
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	2104      	movs	r1, #4
 800a376:	4618      	mov	r0, r3
 800a378:	f001 ffd7 	bl	800c32a <SDMMC_GetResponse>
 800a37c:	4602      	mov	r2, r0
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2108      	movs	r1, #8
 800a388:	4618      	mov	r0, r3
 800a38a:	f001 ffce 	bl	800c32a <SDMMC_GetResponse>
 800a38e:	4602      	mov	r2, r0
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	210c      	movs	r1, #12
 800a39a:	4618      	mov	r0, r3
 800a39c:	f001 ffc5 	bl	800c32a <SDMMC_GetResponse>
 800a3a0:	4602      	mov	r2, r0
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	2104      	movs	r1, #4
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f001 ffbc 	bl	800c32a <SDMMC_GetResponse>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	0d1a      	lsrs	r2, r3, #20
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a3ba:	f107 0310 	add.w	r3, r7, #16
 800a3be:	4619      	mov	r1, r3
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f7ff fc0f 	bl	8009be4 <HAL_SD_GetCardCSD>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d002      	beq.n	800a3d2 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a3cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a3d0:	e012      	b.n	800a3f8 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6819      	ldr	r1, [r3, #0]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3da:	041b      	lsls	r3, r3, #16
 800a3dc:	f04f 0400 	mov.w	r4, #0
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	4623      	mov	r3, r4
 800a3e4:	4608      	mov	r0, r1
 800a3e6:	f002 f8cb 	bl	800c580 <SDMMC_CmdSelDesel>
 800a3ea:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a3ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d001      	beq.n	800a3f6 <SD_InitCard+0x172>
  {
    return errorstate;
 800a3f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3f4:	e000      	b.n	800a3f8 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a3f6:	2300      	movs	r3, #0
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3744      	adds	r7, #68	; 0x44
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd90      	pop	{r4, r7, pc}

0800a400 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b088      	sub	sp, #32
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a408:	2300      	movs	r3, #0
 800a40a:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800a40c:	2300      	movs	r3, #0
 800a40e:	61fb      	str	r3, [r7, #28]
 800a410:	2300      	movs	r3, #0
 800a412:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800a414:	f7f7 fc4a 	bl	8001cac <HAL_GetTick>
 800a418:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4618      	mov	r0, r3
 800a420:	f002 f8d2 	bl	800c5c8 <SDMMC_CmdGoIdleState>
 800a424:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d001      	beq.n	800a430 <SD_PowerON+0x30>
  {
    return errorstate;
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	e0e9      	b.n	800a604 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4618      	mov	r0, r3
 800a436:	f002 f8e5 	bl	800c604 <SDMMC_CmdOperCond>
 800a43a:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d00d      	beq.n	800a45e <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2200      	movs	r2, #0
 800a446:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4618      	mov	r0, r3
 800a44e:	f002 f8bb 	bl	800c5c8 <SDMMC_CmdGoIdleState>
 800a452:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d004      	beq.n	800a464 <SD_PowerON+0x64>
    {
      return errorstate;
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	e0d2      	b.n	800a604 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2201      	movs	r2, #1
 800a462:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d137      	bne.n	800a4dc <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2100      	movs	r1, #0
 800a472:	4618      	mov	r0, r3
 800a474:	f002 f8e6 	bl	800c644 <SDMMC_CmdAppCommand>
 800a478:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d02d      	beq.n	800a4dc <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a480:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a484:	e0be      	b.n	800a604 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	2100      	movs	r1, #0
 800a48c:	4618      	mov	r0, r3
 800a48e:	f002 f8d9 	bl	800c644 <SDMMC_CmdAppCommand>
 800a492:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d001      	beq.n	800a49e <SD_PowerON+0x9e>
    {
      return errorstate;
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	e0b2      	b.n	800a604 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	495a      	ldr	r1, [pc, #360]	; (800a60c <SD_PowerON+0x20c>)
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f002 f8f0 	bl	800c68a <SDMMC_CmdAppOperCommand>
 800a4aa:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d002      	beq.n	800a4b8 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a4b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a4b6:	e0a5      	b.n	800a604 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	2100      	movs	r1, #0
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f001 ff33 	bl	800c32a <SDMMC_GetResponse>
 800a4c4:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a4c6:	69fb      	ldr	r3, [r7, #28]
 800a4c8:	0fdb      	lsrs	r3, r3, #31
 800a4ca:	2b01      	cmp	r3, #1
 800a4cc:	d101      	bne.n	800a4d2 <SD_PowerON+0xd2>
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	e000      	b.n	800a4d4 <SD_PowerON+0xd4>
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	61bb      	str	r3, [r7, #24]

    count++;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	3301      	adds	r3, #1
 800a4da:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d802      	bhi.n	800a4ec <SD_PowerON+0xec>
 800a4e6:	69bb      	ldr	r3, [r7, #24]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d0cc      	beq.n	800a486 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d902      	bls.n	800a4fc <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a4f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a4fa:	e083      	b.n	800a604 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a4fc:	69fb      	ldr	r3, [r7, #28]
 800a4fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a502:	2b00      	cmp	r3, #0
 800a504:	d07d      	beq.n	800a602 <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2201      	movs	r2, #1
 800a50a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	699b      	ldr	r3, [r3, #24]
 800a510:	2b02      	cmp	r3, #2
 800a512:	d176      	bne.n	800a602 <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800a514:	69fb      	ldr	r3, [r7, #28]
 800a516:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d071      	beq.n	800a602 <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a524:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f042 0208 	orr.w	r2, r2, #8
 800a534:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4618      	mov	r0, r3
 800a53c:	f002 f9b0 	bl	800c8a0 <SDMMC_CmdVoltageSwitch>
 800a540:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d00c      	beq.n	800a562 <SD_PowerON+0x162>
        {
          return errorstate;
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	e05b      	b.n	800a604 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a54c:	f7f7 fbae 	bl	8001cac <HAL_GetTick>
 800a550:	4602      	mov	r2, r0
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	1ad3      	subs	r3, r2, r3
 800a556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a55a:	d102      	bne.n	800a562 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800a55c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a560:	e050      	b.n	800a604 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a568:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a56c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a570:	d1ec      	bne.n	800a54c <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800a57a:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a582:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a586:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a58a:	d002      	beq.n	800a592 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800a58c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a590:	e038      	b.n	800a604 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800a592:	2001      	movs	r0, #1
 800a594:	f7ff fb1a 	bl	8009bcc <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f042 0204 	orr.w	r2, r2, #4
 800a5a6:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800a5a8:	e00a      	b.n	800a5c0 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a5aa:	f7f7 fb7f 	bl	8001cac <HAL_GetTick>
 800a5ae:	4602      	mov	r2, r0
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	1ad3      	subs	r3, r2, r3
 800a5b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5b8:	d102      	bne.n	800a5c0 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800a5ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a5be:	e021      	b.n	800a604 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a5ce:	d1ec      	bne.n	800a5aa <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a5d8:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a5e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5e8:	d102      	bne.n	800a5f0 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a5ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a5ee:	e009      	b.n	800a604 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	2213      	movs	r2, #19
 800a5f6:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f04f 32ff 	mov.w	r2, #4294967295
 800a600:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800a602:	2300      	movs	r3, #0
}
 800a604:	4618      	mov	r0, r3
 800a606:	3720      	adds	r7, #32
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}
 800a60c:	c1100000 	.word	0xc1100000

0800a610 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b08c      	sub	sp, #48	; 0x30
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a61a:	f7f7 fb47 	bl	8001cac <HAL_GetTick>
 800a61e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	2100      	movs	r1, #0
 800a62a:	4618      	mov	r0, r3
 800a62c:	f001 fe7d 	bl	800c32a <SDMMC_GetResponse>
 800a630:	4603      	mov	r3, r0
 800a632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a636:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a63a:	d102      	bne.n	800a642 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a63c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a640:	e0b0      	b.n	800a7a4 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	2140      	movs	r1, #64	; 0x40
 800a648:	4618      	mov	r0, r3
 800a64a:	f001 fead 	bl	800c3a8 <SDMMC_CmdBlockLength>
 800a64e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a650:	6a3b      	ldr	r3, [r7, #32]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d005      	beq.n	800a662 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800a65e:	6a3b      	ldr	r3, [r7, #32]
 800a660:	e0a0      	b.n	800a7a4 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a66a:	041b      	lsls	r3, r3, #16
 800a66c:	4619      	mov	r1, r3
 800a66e:	4610      	mov	r0, r2
 800a670:	f001 ffe8 	bl	800c644 <SDMMC_CmdAppCommand>
 800a674:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a676:	6a3b      	ldr	r3, [r7, #32]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d005      	beq.n	800a688 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800a684:	6a3b      	ldr	r3, [r7, #32]
 800a686:	e08d      	b.n	800a7a4 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a688:	f04f 33ff 	mov.w	r3, #4294967295
 800a68c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800a68e:	2340      	movs	r3, #64	; 0x40
 800a690:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800a692:	2360      	movs	r3, #96	; 0x60
 800a694:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a696:	2302      	movs	r3, #2
 800a698:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a69a:	2300      	movs	r3, #0
 800a69c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a69e:	2301      	movs	r3, #1
 800a6a0:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f107 0208 	add.w	r2, r7, #8
 800a6aa:	4611      	mov	r1, r2
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f001 fe4f 	bl	800c350 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f002 f8d0 	bl	800c85c <SDMMC_CmdStatusRegister>
 800a6bc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a6be:	6a3b      	ldr	r3, [r7, #32]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d02b      	beq.n	800a71c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800a6cc:	6a3b      	ldr	r3, [r7, #32]
 800a6ce:	e069      	b.n	800a7a4 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d013      	beq.n	800a706 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800a6de:	2300      	movs	r3, #0
 800a6e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6e2:	e00d      	b.n	800a700 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f001 fda9 	bl	800c240 <SDMMC_ReadFIFO>
 800a6ee:	4602      	mov	r2, r0
 800a6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f2:	601a      	str	r2, [r3, #0]
        pData++;
 800a6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f6:	3304      	adds	r3, #4
 800a6f8:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800a6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6fc:	3301      	adds	r3, #1
 800a6fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a702:	2b07      	cmp	r3, #7
 800a704:	d9ee      	bls.n	800a6e4 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a706:	f7f7 fad1 	bl	8001cac <HAL_GetTick>
 800a70a:	4602      	mov	r2, r0
 800a70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a70e:	1ad3      	subs	r3, r2, r3
 800a710:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a714:	d102      	bne.n	800a71c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a716:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a71a:	e043      	b.n	800a7a4 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a722:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800a726:	2b00      	cmp	r3, #0
 800a728:	d0d2      	beq.n	800a6d0 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a730:	f003 0308 	and.w	r3, r3, #8
 800a734:	2b00      	cmp	r3, #0
 800a736:	d001      	beq.n	800a73c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a738:	2308      	movs	r3, #8
 800a73a:	e033      	b.n	800a7a4 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a742:	f003 0302 	and.w	r3, r3, #2
 800a746:	2b00      	cmp	r3, #0
 800a748:	d001      	beq.n	800a74e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a74a:	2302      	movs	r3, #2
 800a74c:	e02a      	b.n	800a7a4 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a754:	f003 0320 	and.w	r3, r3, #32
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d017      	beq.n	800a78c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800a75c:	2320      	movs	r3, #32
 800a75e:	e021      	b.n	800a7a4 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4618      	mov	r0, r3
 800a766:	f001 fd6b 	bl	800c240 <SDMMC_ReadFIFO>
 800a76a:	4602      	mov	r2, r0
 800a76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76e:	601a      	str	r2, [r3, #0]
    pData++;
 800a770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a772:	3304      	adds	r3, #4
 800a774:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a776:	f7f7 fa99 	bl	8001cac <HAL_GetTick>
 800a77a:	4602      	mov	r2, r0
 800a77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77e:	1ad3      	subs	r3, r2, r3
 800a780:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a784:	d102      	bne.n	800a78c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a786:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a78a:	e00b      	b.n	800a7a4 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a792:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a796:	2b00      	cmp	r3, #0
 800a798:	d1e2      	bne.n	800a760 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4a03      	ldr	r2, [pc, #12]	; (800a7ac <SD_SendSDStatus+0x19c>)
 800a7a0:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800a7a2:	2300      	movs	r3, #0
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3730      	adds	r7, #48	; 0x30
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}
 800a7ac:	18000f3a 	.word	0x18000f3a

0800a7b0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d102      	bne.n	800a7c6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a7c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a7c4:	e018      	b.n	800a7f8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681a      	ldr	r2, [r3, #0]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7ce:	041b      	lsls	r3, r3, #16
 800a7d0:	4619      	mov	r1, r3
 800a7d2:	4610      	mov	r0, r2
 800a7d4:	f002 f81f 	bl	800c816 <SDMMC_CmdSendStatus>
 800a7d8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d001      	beq.n	800a7e4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	e009      	b.n	800a7f8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	2100      	movs	r1, #0
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f001 fd9d 	bl	800c32a <SDMMC_GetResponse>
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a7f6:	2300      	movs	r3, #0
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3710      	adds	r7, #16
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b086      	sub	sp, #24
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a808:	2300      	movs	r3, #0
 800a80a:	60fb      	str	r3, [r7, #12]
 800a80c:	2300      	movs	r3, #0
 800a80e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	2100      	movs	r1, #0
 800a816:	4618      	mov	r0, r3
 800a818:	f001 fd87 	bl	800c32a <SDMMC_GetResponse>
 800a81c:	4603      	mov	r3, r0
 800a81e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a822:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a826:	d102      	bne.n	800a82e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a828:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a82c:	e02f      	b.n	800a88e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a82e:	f107 030c 	add.w	r3, r7, #12
 800a832:	4619      	mov	r1, r3
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f000 f879 	bl	800a92c <SD_FindSCR>
 800a83a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d001      	beq.n	800a846 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	e023      	b.n	800a88e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d01c      	beq.n	800a88a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a858:	041b      	lsls	r3, r3, #16
 800a85a:	4619      	mov	r1, r3
 800a85c:	4610      	mov	r0, r2
 800a85e:	f001 fef1 	bl	800c644 <SDMMC_CmdAppCommand>
 800a862:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d001      	beq.n	800a86e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	e00f      	b.n	800a88e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	2102      	movs	r1, #2
 800a874:	4618      	mov	r0, r3
 800a876:	f001 ff28 	bl	800c6ca <SDMMC_CmdBusWidth>
 800a87a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d001      	beq.n	800a886 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	e003      	b.n	800a88e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a886:	2300      	movs	r3, #0
 800a888:	e001      	b.n	800a88e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a88a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3718      	adds	r7, #24
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}

0800a896 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a896:	b580      	push	{r7, lr}
 800a898:	b086      	sub	sp, #24
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a89e:	2300      	movs	r3, #0
 800a8a0:	60fb      	str	r3, [r7, #12]
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	2100      	movs	r1, #0
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f001 fd3c 	bl	800c32a <SDMMC_GetResponse>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a8bc:	d102      	bne.n	800a8c4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a8be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a8c2:	e02f      	b.n	800a924 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a8c4:	f107 030c 	add.w	r3, r7, #12
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f000 f82e 	bl	800a92c <SD_FindSCR>
 800a8d0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d001      	beq.n	800a8dc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	e023      	b.n	800a924 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d01c      	beq.n	800a920 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681a      	ldr	r2, [r3, #0]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8ee:	041b      	lsls	r3, r3, #16
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	4610      	mov	r0, r2
 800a8f4:	f001 fea6 	bl	800c644 <SDMMC_CmdAppCommand>
 800a8f8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d001      	beq.n	800a904 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	e00f      	b.n	800a924 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	2100      	movs	r1, #0
 800a90a:	4618      	mov	r0, r3
 800a90c:	f001 fedd 	bl	800c6ca <SDMMC_CmdBusWidth>
 800a910:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d001      	beq.n	800a91c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	e003      	b.n	800a924 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a91c:	2300      	movs	r3, #0
 800a91e:	e001      	b.n	800a924 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a920:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a924:	4618      	mov	r0, r3
 800a926:	3718      	adds	r7, #24
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b08e      	sub	sp, #56	; 0x38
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a936:	f7f7 f9b9 	bl	8001cac <HAL_GetTick>
 800a93a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a93c:	2300      	movs	r3, #0
 800a93e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800a940:	2300      	movs	r3, #0
 800a942:	60bb      	str	r3, [r7, #8]
 800a944:	2300      	movs	r3, #0
 800a946:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	2108      	movs	r1, #8
 800a952:	4618      	mov	r0, r3
 800a954:	f001 fd28 	bl	800c3a8 <SDMMC_CmdBlockLength>
 800a958:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d001      	beq.n	800a964 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a962:	e0ad      	b.n	800aac0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681a      	ldr	r2, [r3, #0]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a96c:	041b      	lsls	r3, r3, #16
 800a96e:	4619      	mov	r1, r3
 800a970:	4610      	mov	r0, r2
 800a972:	f001 fe67 	bl	800c644 <SDMMC_CmdAppCommand>
 800a976:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d001      	beq.n	800a982 <SD_FindSCR+0x56>
  {
    return errorstate;
 800a97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a980:	e09e      	b.n	800aac0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a982:	f04f 33ff 	mov.w	r3, #4294967295
 800a986:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a988:	2308      	movs	r3, #8
 800a98a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800a98c:	2330      	movs	r3, #48	; 0x30
 800a98e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a990:	2302      	movs	r3, #2
 800a992:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a994:	2300      	movs	r3, #0
 800a996:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a998:	2301      	movs	r3, #1
 800a99a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f107 0210 	add.w	r2, r7, #16
 800a9a4:	4611      	mov	r1, r2
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f001 fcd2 	bl	800c350 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f001 fead 	bl	800c710 <SDMMC_CmdSendSCR>
 800a9b6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d027      	beq.n	800aa0e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800a9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c0:	e07e      	b.n	800aac0 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d113      	bne.n	800a9f8 <SD_FindSCR+0xcc>
 800a9d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d110      	bne.n	800a9f8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f001 fc30 	bl	800c240 <SDMMC_ReadFIFO>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f001 fc29 	bl	800c240 <SDMMC_ReadFIFO>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	60fb      	str	r3, [r7, #12]
      index++;
 800a9f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a9f8:	f7f7 f958 	bl	8001cac <HAL_GetTick>
 800a9fc:	4602      	mov	r2, r0
 800a9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa00:	1ad3      	subs	r3, r2, r3
 800aa02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa06:	d102      	bne.n	800aa0e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800aa08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aa0c:	e058      	b.n	800aac0 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa14:	f240 532a 	movw	r3, #1322	; 0x52a
 800aa18:	4013      	ands	r3, r2
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d0d1      	beq.n	800a9c2 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa24:	f003 0308 	and.w	r3, r3, #8
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d005      	beq.n	800aa38 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	2208      	movs	r2, #8
 800aa32:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800aa34:	2308      	movs	r3, #8
 800aa36:	e043      	b.n	800aac0 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa3e:	f003 0302 	and.w	r3, r3, #2
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d005      	beq.n	800aa52 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	2202      	movs	r2, #2
 800aa4c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800aa4e:	2302      	movs	r3, #2
 800aa50:	e036      	b.n	800aac0 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa58:	f003 0320 	and.w	r3, r3, #32
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d005      	beq.n	800aa6c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	2220      	movs	r2, #32
 800aa66:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800aa68:	2320      	movs	r3, #32
 800aa6a:	e029      	b.n	800aac0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a15      	ldr	r2, [pc, #84]	; (800aac8 <SD_FindSCR+0x19c>)
 800aa72:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	061a      	lsls	r2, r3, #24
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	021b      	lsls	r3, r3, #8
 800aa7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aa80:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	0a1b      	lsrs	r3, r3, #8
 800aa86:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800aa8a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	0e1b      	lsrs	r3, r3, #24
 800aa90:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800aa92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa94:	601a      	str	r2, [r3, #0]
    scr++;
 800aa96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa98:	3304      	adds	r3, #4
 800aa9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	061a      	lsls	r2, r3, #24
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	021b      	lsls	r3, r3, #8
 800aaa4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aaa8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	0a1b      	lsrs	r3, r3, #8
 800aaae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800aab2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	0e1b      	lsrs	r3, r3, #24
 800aab8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800aaba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aabc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800aabe:	2300      	movs	r3, #0
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3738      	adds	r7, #56	; 0x38
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}
 800aac8:	18000f3a 	.word	0x18000f3a

0800aacc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800aad4:	2300      	movs	r3, #0
 800aad6:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d101      	bne.n	800aae2 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800aade:	2301      	movs	r3, #1
 800aae0:	e0e2      	b.n	800aca8 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2200      	movs	r2, #0
 800aae6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	4a70      	ldr	r2, [pc, #448]	; (800acb0 <HAL_SPI_Init+0x1e4>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d00f      	beq.n	800ab12 <HAL_SPI_Init+0x46>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	4a6f      	ldr	r2, [pc, #444]	; (800acb4 <HAL_SPI_Init+0x1e8>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d00a      	beq.n	800ab12 <HAL_SPI_Init+0x46>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4a6d      	ldr	r2, [pc, #436]	; (800acb8 <HAL_SPI_Init+0x1ec>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d005      	beq.n	800ab12 <HAL_SPI_Init+0x46>
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	68db      	ldr	r3, [r3, #12]
 800ab0a:	2b0f      	cmp	r3, #15
 800ab0c:	d901      	bls.n	800ab12 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800ab0e:	2301      	movs	r3, #1
 800ab10:	e0ca      	b.n	800aca8 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f000 f8d2 	bl	800acbc <SPI_GetPacketSize>
 800ab18:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	4a64      	ldr	r2, [pc, #400]	; (800acb0 <HAL_SPI_Init+0x1e4>)
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d00c      	beq.n	800ab3e <HAL_SPI_Init+0x72>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	4a62      	ldr	r2, [pc, #392]	; (800acb4 <HAL_SPI_Init+0x1e8>)
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d007      	beq.n	800ab3e <HAL_SPI_Init+0x72>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	4a61      	ldr	r2, [pc, #388]	; (800acb8 <HAL_SPI_Init+0x1ec>)
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d002      	beq.n	800ab3e <HAL_SPI_Init+0x72>
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	2b08      	cmp	r3, #8
 800ab3c:	d811      	bhi.n	800ab62 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ab42:	4a5b      	ldr	r2, [pc, #364]	; (800acb0 <HAL_SPI_Init+0x1e4>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d009      	beq.n	800ab5c <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a59      	ldr	r2, [pc, #356]	; (800acb4 <HAL_SPI_Init+0x1e8>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d004      	beq.n	800ab5c <HAL_SPI_Init+0x90>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	4a58      	ldr	r2, [pc, #352]	; (800acb8 <HAL_SPI_Init+0x1ec>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d104      	bne.n	800ab66 <HAL_SPI_Init+0x9a>
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	2b10      	cmp	r3, #16
 800ab60:	d901      	bls.n	800ab66 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800ab62:	2301      	movs	r3, #1
 800ab64:	e0a0      	b.n	800aca8 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ab6c:	b2db      	uxtb	r3, r3
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d106      	bne.n	800ab80 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2200      	movs	r2, #0
 800ab76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f7f6 fd86 	bl	800168c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2202      	movs	r2, #2
 800ab84:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	681a      	ldr	r2, [r3, #0]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f022 0201 	bic.w	r2, r2, #1
 800ab96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	699b      	ldr	r3, [r3, #24]
 800ab9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aba0:	d110      	bne.n	800abc4 <HAL_SPI_Init+0xf8>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	685b      	ldr	r3, [r3, #4]
 800aba6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800abaa:	d10b      	bne.n	800abc4 <HAL_SPI_Init+0xf8>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d107      	bne.n	800abc4 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800abc2:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	69da      	ldr	r2, [r3, #28]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abcc:	431a      	orrs	r2, r3
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	431a      	orrs	r2, r3
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abd6:	ea42 0103 	orr.w	r1, r2, r3
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	68da      	ldr	r2, [r3, #12]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	430a      	orrs	r2, r1
 800abe4:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abee:	431a      	orrs	r2, r3
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abf4:	431a      	orrs	r2, r3
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	699b      	ldr	r3, [r3, #24]
 800abfa:	431a      	orrs	r2, r3
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	691b      	ldr	r3, [r3, #16]
 800ac00:	431a      	orrs	r2, r3
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	695b      	ldr	r3, [r3, #20]
 800ac06:	431a      	orrs	r2, r3
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6a1b      	ldr	r3, [r3, #32]
 800ac0c:	431a      	orrs	r2, r3
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	431a      	orrs	r2, r3
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac18:	431a      	orrs	r2, r3
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	689b      	ldr	r3, [r3, #8]
 800ac1e:	431a      	orrs	r2, r3
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac24:	ea42 0103 	orr.w	r1, r2, r3
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	430a      	orrs	r2, r1
 800ac32:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d113      	bne.n	800ac64 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	689b      	ldr	r3, [r3, #8]
 800ac42:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac4e:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	689b      	ldr	r3, [r3, #8]
 800ac56:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ac62:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f022 0201 	bic.w	r2, r2, #1
 800ac72:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d00a      	beq.n	800ac96 <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	68db      	ldr	r3, [r3, #12]
 800ac86:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	430a      	orrs	r2, r1
 800ac94:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2201      	movs	r2, #1
 800aca2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800aca6:	2300      	movs	r3, #0
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3710      	adds	r7, #16
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}
 800acb0:	40013000 	.word	0x40013000
 800acb4:	40003800 	.word	0x40003800
 800acb8:	40003c00 	.word	0x40003c00

0800acbc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b085      	sub	sp, #20
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acc8:	095b      	lsrs	r3, r3, #5
 800acca:	3301      	adds	r3, #1
 800accc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	68db      	ldr	r3, [r3, #12]
 800acd2:	3301      	adds	r3, #1
 800acd4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	3307      	adds	r3, #7
 800acda:	08db      	lsrs	r3, r3, #3
 800acdc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	68fa      	ldr	r2, [r7, #12]
 800ace2:	fb02 f303 	mul.w	r3, r2, r3
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3714      	adds	r7, #20
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr

0800acf2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800acf2:	b580      	push	{r7, lr}
 800acf4:	b082      	sub	sp, #8
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d101      	bne.n	800ad04 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad00:	2301      	movs	r3, #1
 800ad02:	e042      	b.n	800ad8a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d106      	bne.n	800ad1c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2200      	movs	r2, #0
 800ad12:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f7f6 fd02 	bl	8001720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2224      	movs	r2, #36	; 0x24
 800ad20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	681a      	ldr	r2, [r3, #0]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f022 0201 	bic.w	r2, r2, #1
 800ad32:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f000 f95f 	bl	800aff8 <UART_SetConfig>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b01      	cmp	r3, #1
 800ad3e:	d101      	bne.n	800ad44 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ad40:	2301      	movs	r3, #1
 800ad42:	e022      	b.n	800ad8a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d002      	beq.n	800ad52 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f000 ff03 	bl	800bb58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	685a      	ldr	r2, [r3, #4]
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ad60:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	689a      	ldr	r2, [r3, #8]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ad70:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	681a      	ldr	r2, [r3, #0]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f042 0201 	orr.w	r2, r2, #1
 800ad80:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f000 ff8a 	bl	800bc9c <UART_CheckIdleState>
 800ad88:	4603      	mov	r3, r0
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3708      	adds	r7, #8
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}

0800ad92 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad92:	b580      	push	{r7, lr}
 800ad94:	b08a      	sub	sp, #40	; 0x28
 800ad96:	af02      	add	r7, sp, #8
 800ad98:	60f8      	str	r0, [r7, #12]
 800ad9a:	60b9      	str	r1, [r7, #8]
 800ad9c:	603b      	str	r3, [r7, #0]
 800ad9e:	4613      	mov	r3, r2
 800ada0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ada8:	2b20      	cmp	r3, #32
 800adaa:	f040 8083 	bne.w	800aeb4 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d002      	beq.n	800adba <HAL_UART_Transmit+0x28>
 800adb4:	88fb      	ldrh	r3, [r7, #6]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d101      	bne.n	800adbe <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800adba:	2301      	movs	r3, #1
 800adbc:	e07b      	b.n	800aeb6 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800adc4:	2b01      	cmp	r3, #1
 800adc6:	d101      	bne.n	800adcc <HAL_UART_Transmit+0x3a>
 800adc8:	2302      	movs	r3, #2
 800adca:	e074      	b.n	800aeb6 <HAL_UART_Transmit+0x124>
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2201      	movs	r2, #1
 800add0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	2200      	movs	r2, #0
 800add8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2221      	movs	r2, #33	; 0x21
 800ade0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800ade4:	f7f6 ff62 	bl	8001cac <HAL_GetTick>
 800ade8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	88fa      	ldrh	r2, [r7, #6]
 800adee:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	88fa      	ldrh	r2, [r7, #6]
 800adf6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	689b      	ldr	r3, [r3, #8]
 800adfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae02:	d108      	bne.n	800ae16 <HAL_UART_Transmit+0x84>
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	691b      	ldr	r3, [r3, #16]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d104      	bne.n	800ae16 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	61bb      	str	r3, [r7, #24]
 800ae14:	e003      	b.n	800ae1e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2200      	movs	r2, #0
 800ae22:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800ae26:	e02c      	b.n	800ae82 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	9300      	str	r3, [sp, #0]
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	2180      	movs	r1, #128	; 0x80
 800ae32:	68f8      	ldr	r0, [r7, #12]
 800ae34:	f000 ff7a 	bl	800bd2c <UART_WaitOnFlagUntilTimeout>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d001      	beq.n	800ae42 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800ae3e:	2303      	movs	r3, #3
 800ae40:	e039      	b.n	800aeb6 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800ae42:	69fb      	ldr	r3, [r7, #28]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d10b      	bne.n	800ae60 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ae48:	69bb      	ldr	r3, [r7, #24]
 800ae4a:	881b      	ldrh	r3, [r3, #0]
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae56:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ae58:	69bb      	ldr	r3, [r7, #24]
 800ae5a:	3302      	adds	r3, #2
 800ae5c:	61bb      	str	r3, [r7, #24]
 800ae5e:	e007      	b.n	800ae70 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ae60:	69fb      	ldr	r3, [r7, #28]
 800ae62:	781a      	ldrb	r2, [r3, #0]
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ae6a:	69fb      	ldr	r3, [r7, #28]
 800ae6c:	3301      	adds	r3, #1
 800ae6e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	3b01      	subs	r3, #1
 800ae7a:	b29a      	uxth	r2, r3
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ae88:	b29b      	uxth	r3, r3
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d1cc      	bne.n	800ae28 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	9300      	str	r3, [sp, #0]
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	2200      	movs	r2, #0
 800ae96:	2140      	movs	r1, #64	; 0x40
 800ae98:	68f8      	ldr	r0, [r7, #12]
 800ae9a:	f000 ff47 	bl	800bd2c <UART_WaitOnFlagUntilTimeout>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d001      	beq.n	800aea8 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800aea4:	2303      	movs	r3, #3
 800aea6:	e006      	b.n	800aeb6 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	2220      	movs	r2, #32
 800aeac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	e000      	b.n	800aeb6 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800aeb4:	2302      	movs	r3, #2
  }
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3720      	adds	r7, #32
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
	...

0800aec0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b084      	sub	sp, #16
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	60f8      	str	r0, [r7, #12]
 800aec8:	60b9      	str	r1, [r7, #8]
 800aeca:	4613      	mov	r3, r2
 800aecc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aed4:	2b20      	cmp	r3, #32
 800aed6:	d170      	bne.n	800afba <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d002      	beq.n	800aee4 <HAL_UART_Receive_DMA+0x24>
 800aede:	88fb      	ldrh	r3, [r7, #6]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d101      	bne.n	800aee8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800aee4:	2301      	movs	r3, #1
 800aee6:	e069      	b.n	800afbc <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	d101      	bne.n	800aef6 <HAL_UART_Receive_DMA+0x36>
 800aef2:	2302      	movs	r3, #2
 800aef4:	e062      	b.n	800afbc <HAL_UART_Receive_DMA+0xfc>
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2201      	movs	r2, #1
 800aefa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	68ba      	ldr	r2, [r7, #8]
 800af02:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	88fa      	ldrh	r2, [r7, #6]
 800af08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2200      	movs	r2, #0
 800af10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	2222      	movs	r2, #34	; 0x22
 800af18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af20:	2b00      	cmp	r3, #0
 800af22:	d02c      	beq.n	800af7e <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af28:	4a26      	ldr	r2, [pc, #152]	; (800afc4 <HAL_UART_Receive_DMA+0x104>)
 800af2a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af30:	4a25      	ldr	r2, [pc, #148]	; (800afc8 <HAL_UART_Receive_DMA+0x108>)
 800af32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af38:	4a24      	ldr	r2, [pc, #144]	; (800afcc <HAL_UART_Receive_DMA+0x10c>)
 800af3a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af40:	2200      	movs	r2, #0
 800af42:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	3324      	adds	r3, #36	; 0x24
 800af4e:	4619      	mov	r1, r3
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af54:	461a      	mov	r2, r3
 800af56:	88fb      	ldrh	r3, [r7, #6]
 800af58:	f7f7 fb4e 	bl	80025f8 <HAL_DMA_Start_IT>
 800af5c:	4603      	mov	r3, r0
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d00d      	beq.n	800af7e <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	2210      	movs	r2, #16
 800af66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2200      	movs	r2, #0
 800af6e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	2220      	movs	r2, #32
 800af76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800af7a:	2301      	movs	r3, #1
 800af7c:	e01e      	b.n	800afbc <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2200      	movs	r2, #0
 800af82:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	681a      	ldr	r2, [r3, #0]
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af94:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	689a      	ldr	r2, [r3, #8]
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f042 0201 	orr.w	r2, r2, #1
 800afa4:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	689a      	ldr	r2, [r3, #8]
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800afb4:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800afb6:	2300      	movs	r3, #0
 800afb8:	e000      	b.n	800afbc <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800afba:	2302      	movs	r3, #2
  }
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3710      	adds	r7, #16
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}
 800afc4:	0800beb1 	.word	0x0800beb1
 800afc8:	0800bf17 	.word	0x0800bf17
 800afcc:	0800bf33 	.word	0x0800bf33

0800afd0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b083      	sub	sp, #12
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800afd8:	bf00      	nop
 800afda:	370c      	adds	r7, #12
 800afdc:	46bd      	mov	sp, r7
 800afde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe2:	4770      	bx	lr

0800afe4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b083      	sub	sp, #12
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800afec:	bf00      	nop
 800afee:	370c      	adds	r7, #12
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr

0800aff8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aff8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800affc:	b08e      	sub	sp, #56	; 0x38
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b002:	2300      	movs	r3, #0
 800b004:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	689a      	ldr	r2, [r3, #8]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	691b      	ldr	r3, [r3, #16]
 800b010:	431a      	orrs	r2, r3
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	695b      	ldr	r3, [r3, #20]
 800b016:	431a      	orrs	r2, r3
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	69db      	ldr	r3, [r3, #28]
 800b01c:	4313      	orrs	r3, r2
 800b01e:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b024:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b026:	4313      	orrs	r3, r2
 800b028:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	681a      	ldr	r2, [r3, #0]
 800b030:	4bc1      	ldr	r3, [pc, #772]	; (800b338 <UART_SetConfig+0x340>)
 800b032:	4013      	ands	r3, r2
 800b034:	687a      	ldr	r2, [r7, #4]
 800b036:	6812      	ldr	r2, [r2, #0]
 800b038:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b03a:	430b      	orrs	r3, r1
 800b03c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	68da      	ldr	r2, [r3, #12]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	430a      	orrs	r2, r1
 800b052:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	699b      	ldr	r3, [r3, #24]
 800b058:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	4ab7      	ldr	r2, [pc, #732]	; (800b33c <UART_SetConfig+0x344>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d004      	beq.n	800b06e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6a1b      	ldr	r3, [r3, #32]
 800b068:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b06a:	4313      	orrs	r3, r2
 800b06c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	689a      	ldr	r2, [r3, #8]
 800b074:	4bb2      	ldr	r3, [pc, #712]	; (800b340 <UART_SetConfig+0x348>)
 800b076:	4013      	ands	r3, r2
 800b078:	687a      	ldr	r2, [r7, #4]
 800b07a:	6812      	ldr	r2, [r2, #0]
 800b07c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b07e:	430b      	orrs	r3, r1
 800b080:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b088:	f023 010f 	bic.w	r1, r3, #15
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	430a      	orrs	r2, r1
 800b096:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4aa9      	ldr	r2, [pc, #676]	; (800b344 <UART_SetConfig+0x34c>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d177      	bne.n	800b192 <UART_SetConfig+0x19a>
 800b0a2:	4ba9      	ldr	r3, [pc, #676]	; (800b348 <UART_SetConfig+0x350>)
 800b0a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b0aa:	2b28      	cmp	r3, #40	; 0x28
 800b0ac:	d86c      	bhi.n	800b188 <UART_SetConfig+0x190>
 800b0ae:	a201      	add	r2, pc, #4	; (adr r2, 800b0b4 <UART_SetConfig+0xbc>)
 800b0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0b4:	0800b159 	.word	0x0800b159
 800b0b8:	0800b189 	.word	0x0800b189
 800b0bc:	0800b189 	.word	0x0800b189
 800b0c0:	0800b189 	.word	0x0800b189
 800b0c4:	0800b189 	.word	0x0800b189
 800b0c8:	0800b189 	.word	0x0800b189
 800b0cc:	0800b189 	.word	0x0800b189
 800b0d0:	0800b189 	.word	0x0800b189
 800b0d4:	0800b161 	.word	0x0800b161
 800b0d8:	0800b189 	.word	0x0800b189
 800b0dc:	0800b189 	.word	0x0800b189
 800b0e0:	0800b189 	.word	0x0800b189
 800b0e4:	0800b189 	.word	0x0800b189
 800b0e8:	0800b189 	.word	0x0800b189
 800b0ec:	0800b189 	.word	0x0800b189
 800b0f0:	0800b189 	.word	0x0800b189
 800b0f4:	0800b169 	.word	0x0800b169
 800b0f8:	0800b189 	.word	0x0800b189
 800b0fc:	0800b189 	.word	0x0800b189
 800b100:	0800b189 	.word	0x0800b189
 800b104:	0800b189 	.word	0x0800b189
 800b108:	0800b189 	.word	0x0800b189
 800b10c:	0800b189 	.word	0x0800b189
 800b110:	0800b189 	.word	0x0800b189
 800b114:	0800b171 	.word	0x0800b171
 800b118:	0800b189 	.word	0x0800b189
 800b11c:	0800b189 	.word	0x0800b189
 800b120:	0800b189 	.word	0x0800b189
 800b124:	0800b189 	.word	0x0800b189
 800b128:	0800b189 	.word	0x0800b189
 800b12c:	0800b189 	.word	0x0800b189
 800b130:	0800b189 	.word	0x0800b189
 800b134:	0800b179 	.word	0x0800b179
 800b138:	0800b189 	.word	0x0800b189
 800b13c:	0800b189 	.word	0x0800b189
 800b140:	0800b189 	.word	0x0800b189
 800b144:	0800b189 	.word	0x0800b189
 800b148:	0800b189 	.word	0x0800b189
 800b14c:	0800b189 	.word	0x0800b189
 800b150:	0800b189 	.word	0x0800b189
 800b154:	0800b181 	.word	0x0800b181
 800b158:	2301      	movs	r3, #1
 800b15a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b15e:	e233      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b160:	2304      	movs	r3, #4
 800b162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b166:	e22f      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b168:	2308      	movs	r3, #8
 800b16a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b16e:	e22b      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b170:	2310      	movs	r3, #16
 800b172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b176:	e227      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b178:	2320      	movs	r3, #32
 800b17a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b17e:	e223      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b180:	2340      	movs	r3, #64	; 0x40
 800b182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b186:	e21f      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b188:	2380      	movs	r3, #128	; 0x80
 800b18a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b18e:	bf00      	nop
 800b190:	e21a      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	4a6d      	ldr	r2, [pc, #436]	; (800b34c <UART_SetConfig+0x354>)
 800b198:	4293      	cmp	r3, r2
 800b19a:	d132      	bne.n	800b202 <UART_SetConfig+0x20a>
 800b19c:	4b6a      	ldr	r3, [pc, #424]	; (800b348 <UART_SetConfig+0x350>)
 800b19e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1a0:	f003 0307 	and.w	r3, r3, #7
 800b1a4:	2b05      	cmp	r3, #5
 800b1a6:	d827      	bhi.n	800b1f8 <UART_SetConfig+0x200>
 800b1a8:	a201      	add	r2, pc, #4	; (adr r2, 800b1b0 <UART_SetConfig+0x1b8>)
 800b1aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ae:	bf00      	nop
 800b1b0:	0800b1c9 	.word	0x0800b1c9
 800b1b4:	0800b1d1 	.word	0x0800b1d1
 800b1b8:	0800b1d9 	.word	0x0800b1d9
 800b1bc:	0800b1e1 	.word	0x0800b1e1
 800b1c0:	0800b1e9 	.word	0x0800b1e9
 800b1c4:	0800b1f1 	.word	0x0800b1f1
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1ce:	e1fb      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b1d0:	2304      	movs	r3, #4
 800b1d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1d6:	e1f7      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b1d8:	2308      	movs	r3, #8
 800b1da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1de:	e1f3      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b1e0:	2310      	movs	r3, #16
 800b1e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1e6:	e1ef      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b1e8:	2320      	movs	r3, #32
 800b1ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1ee:	e1eb      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b1f0:	2340      	movs	r3, #64	; 0x40
 800b1f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1f6:	e1e7      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b1f8:	2380      	movs	r3, #128	; 0x80
 800b1fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1fe:	bf00      	nop
 800b200:	e1e2      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4a52      	ldr	r2, [pc, #328]	; (800b350 <UART_SetConfig+0x358>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d132      	bne.n	800b272 <UART_SetConfig+0x27a>
 800b20c:	4b4e      	ldr	r3, [pc, #312]	; (800b348 <UART_SetConfig+0x350>)
 800b20e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b210:	f003 0307 	and.w	r3, r3, #7
 800b214:	2b05      	cmp	r3, #5
 800b216:	d827      	bhi.n	800b268 <UART_SetConfig+0x270>
 800b218:	a201      	add	r2, pc, #4	; (adr r2, 800b220 <UART_SetConfig+0x228>)
 800b21a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b21e:	bf00      	nop
 800b220:	0800b239 	.word	0x0800b239
 800b224:	0800b241 	.word	0x0800b241
 800b228:	0800b249 	.word	0x0800b249
 800b22c:	0800b251 	.word	0x0800b251
 800b230:	0800b259 	.word	0x0800b259
 800b234:	0800b261 	.word	0x0800b261
 800b238:	2300      	movs	r3, #0
 800b23a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b23e:	e1c3      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b240:	2304      	movs	r3, #4
 800b242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b246:	e1bf      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b248:	2308      	movs	r3, #8
 800b24a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b24e:	e1bb      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b250:	2310      	movs	r3, #16
 800b252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b256:	e1b7      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b258:	2320      	movs	r3, #32
 800b25a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b25e:	e1b3      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b260:	2340      	movs	r3, #64	; 0x40
 800b262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b266:	e1af      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b268:	2380      	movs	r3, #128	; 0x80
 800b26a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b26e:	bf00      	nop
 800b270:	e1aa      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	4a37      	ldr	r2, [pc, #220]	; (800b354 <UART_SetConfig+0x35c>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d132      	bne.n	800b2e2 <UART_SetConfig+0x2ea>
 800b27c:	4b32      	ldr	r3, [pc, #200]	; (800b348 <UART_SetConfig+0x350>)
 800b27e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b280:	f003 0307 	and.w	r3, r3, #7
 800b284:	2b05      	cmp	r3, #5
 800b286:	d827      	bhi.n	800b2d8 <UART_SetConfig+0x2e0>
 800b288:	a201      	add	r2, pc, #4	; (adr r2, 800b290 <UART_SetConfig+0x298>)
 800b28a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b28e:	bf00      	nop
 800b290:	0800b2a9 	.word	0x0800b2a9
 800b294:	0800b2b1 	.word	0x0800b2b1
 800b298:	0800b2b9 	.word	0x0800b2b9
 800b29c:	0800b2c1 	.word	0x0800b2c1
 800b2a0:	0800b2c9 	.word	0x0800b2c9
 800b2a4:	0800b2d1 	.word	0x0800b2d1
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2ae:	e18b      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b2b0:	2304      	movs	r3, #4
 800b2b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2b6:	e187      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b2b8:	2308      	movs	r3, #8
 800b2ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2be:	e183      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b2c0:	2310      	movs	r3, #16
 800b2c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2c6:	e17f      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b2c8:	2320      	movs	r3, #32
 800b2ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2ce:	e17b      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b2d0:	2340      	movs	r3, #64	; 0x40
 800b2d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2d6:	e177      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b2d8:	2380      	movs	r3, #128	; 0x80
 800b2da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2de:	bf00      	nop
 800b2e0:	e172      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	4a1c      	ldr	r2, [pc, #112]	; (800b358 <UART_SetConfig+0x360>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d144      	bne.n	800b376 <UART_SetConfig+0x37e>
 800b2ec:	4b16      	ldr	r3, [pc, #88]	; (800b348 <UART_SetConfig+0x350>)
 800b2ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2f0:	f003 0307 	and.w	r3, r3, #7
 800b2f4:	2b05      	cmp	r3, #5
 800b2f6:	d839      	bhi.n	800b36c <UART_SetConfig+0x374>
 800b2f8:	a201      	add	r2, pc, #4	; (adr r2, 800b300 <UART_SetConfig+0x308>)
 800b2fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2fe:	bf00      	nop
 800b300:	0800b319 	.word	0x0800b319
 800b304:	0800b321 	.word	0x0800b321
 800b308:	0800b329 	.word	0x0800b329
 800b30c:	0800b331 	.word	0x0800b331
 800b310:	0800b35d 	.word	0x0800b35d
 800b314:	0800b365 	.word	0x0800b365
 800b318:	2300      	movs	r3, #0
 800b31a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b31e:	e153      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b320:	2304      	movs	r3, #4
 800b322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b326:	e14f      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b328:	2308      	movs	r3, #8
 800b32a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b32e:	e14b      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b330:	2310      	movs	r3, #16
 800b332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b336:	e147      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b338:	cfff69f3 	.word	0xcfff69f3
 800b33c:	58000c00 	.word	0x58000c00
 800b340:	11fff4ff 	.word	0x11fff4ff
 800b344:	40011000 	.word	0x40011000
 800b348:	58024400 	.word	0x58024400
 800b34c:	40004400 	.word	0x40004400
 800b350:	40004800 	.word	0x40004800
 800b354:	40004c00 	.word	0x40004c00
 800b358:	40005000 	.word	0x40005000
 800b35c:	2320      	movs	r3, #32
 800b35e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b362:	e131      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b364:	2340      	movs	r3, #64	; 0x40
 800b366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b36a:	e12d      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b36c:	2380      	movs	r3, #128	; 0x80
 800b36e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b372:	bf00      	nop
 800b374:	e128      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	4ab6      	ldr	r2, [pc, #728]	; (800b654 <UART_SetConfig+0x65c>)
 800b37c:	4293      	cmp	r3, r2
 800b37e:	d178      	bne.n	800b472 <UART_SetConfig+0x47a>
 800b380:	4bb5      	ldr	r3, [pc, #724]	; (800b658 <UART_SetConfig+0x660>)
 800b382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b384:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b388:	2b28      	cmp	r3, #40	; 0x28
 800b38a:	d86d      	bhi.n	800b468 <UART_SetConfig+0x470>
 800b38c:	a201      	add	r2, pc, #4	; (adr r2, 800b394 <UART_SetConfig+0x39c>)
 800b38e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b392:	bf00      	nop
 800b394:	0800b439 	.word	0x0800b439
 800b398:	0800b469 	.word	0x0800b469
 800b39c:	0800b469 	.word	0x0800b469
 800b3a0:	0800b469 	.word	0x0800b469
 800b3a4:	0800b469 	.word	0x0800b469
 800b3a8:	0800b469 	.word	0x0800b469
 800b3ac:	0800b469 	.word	0x0800b469
 800b3b0:	0800b469 	.word	0x0800b469
 800b3b4:	0800b441 	.word	0x0800b441
 800b3b8:	0800b469 	.word	0x0800b469
 800b3bc:	0800b469 	.word	0x0800b469
 800b3c0:	0800b469 	.word	0x0800b469
 800b3c4:	0800b469 	.word	0x0800b469
 800b3c8:	0800b469 	.word	0x0800b469
 800b3cc:	0800b469 	.word	0x0800b469
 800b3d0:	0800b469 	.word	0x0800b469
 800b3d4:	0800b449 	.word	0x0800b449
 800b3d8:	0800b469 	.word	0x0800b469
 800b3dc:	0800b469 	.word	0x0800b469
 800b3e0:	0800b469 	.word	0x0800b469
 800b3e4:	0800b469 	.word	0x0800b469
 800b3e8:	0800b469 	.word	0x0800b469
 800b3ec:	0800b469 	.word	0x0800b469
 800b3f0:	0800b469 	.word	0x0800b469
 800b3f4:	0800b451 	.word	0x0800b451
 800b3f8:	0800b469 	.word	0x0800b469
 800b3fc:	0800b469 	.word	0x0800b469
 800b400:	0800b469 	.word	0x0800b469
 800b404:	0800b469 	.word	0x0800b469
 800b408:	0800b469 	.word	0x0800b469
 800b40c:	0800b469 	.word	0x0800b469
 800b410:	0800b469 	.word	0x0800b469
 800b414:	0800b459 	.word	0x0800b459
 800b418:	0800b469 	.word	0x0800b469
 800b41c:	0800b469 	.word	0x0800b469
 800b420:	0800b469 	.word	0x0800b469
 800b424:	0800b469 	.word	0x0800b469
 800b428:	0800b469 	.word	0x0800b469
 800b42c:	0800b469 	.word	0x0800b469
 800b430:	0800b469 	.word	0x0800b469
 800b434:	0800b461 	.word	0x0800b461
 800b438:	2301      	movs	r3, #1
 800b43a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b43e:	e0c3      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b440:	2304      	movs	r3, #4
 800b442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b446:	e0bf      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b448:	2308      	movs	r3, #8
 800b44a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b44e:	e0bb      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b450:	2310      	movs	r3, #16
 800b452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b456:	e0b7      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b458:	2320      	movs	r3, #32
 800b45a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b45e:	e0b3      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b460:	2340      	movs	r3, #64	; 0x40
 800b462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b466:	e0af      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b468:	2380      	movs	r3, #128	; 0x80
 800b46a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b46e:	bf00      	nop
 800b470:	e0aa      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	4a79      	ldr	r2, [pc, #484]	; (800b65c <UART_SetConfig+0x664>)
 800b478:	4293      	cmp	r3, r2
 800b47a:	d132      	bne.n	800b4e2 <UART_SetConfig+0x4ea>
 800b47c:	4b76      	ldr	r3, [pc, #472]	; (800b658 <UART_SetConfig+0x660>)
 800b47e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b480:	f003 0307 	and.w	r3, r3, #7
 800b484:	2b05      	cmp	r3, #5
 800b486:	d827      	bhi.n	800b4d8 <UART_SetConfig+0x4e0>
 800b488:	a201      	add	r2, pc, #4	; (adr r2, 800b490 <UART_SetConfig+0x498>)
 800b48a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b48e:	bf00      	nop
 800b490:	0800b4a9 	.word	0x0800b4a9
 800b494:	0800b4b1 	.word	0x0800b4b1
 800b498:	0800b4b9 	.word	0x0800b4b9
 800b49c:	0800b4c1 	.word	0x0800b4c1
 800b4a0:	0800b4c9 	.word	0x0800b4c9
 800b4a4:	0800b4d1 	.word	0x0800b4d1
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4ae:	e08b      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b4b0:	2304      	movs	r3, #4
 800b4b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4b6:	e087      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b4b8:	2308      	movs	r3, #8
 800b4ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4be:	e083      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b4c0:	2310      	movs	r3, #16
 800b4c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4c6:	e07f      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b4c8:	2320      	movs	r3, #32
 800b4ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4ce:	e07b      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b4d0:	2340      	movs	r3, #64	; 0x40
 800b4d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4d6:	e077      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b4d8:	2380      	movs	r3, #128	; 0x80
 800b4da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4de:	bf00      	nop
 800b4e0:	e072      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4a5e      	ldr	r2, [pc, #376]	; (800b660 <UART_SetConfig+0x668>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d132      	bne.n	800b552 <UART_SetConfig+0x55a>
 800b4ec:	4b5a      	ldr	r3, [pc, #360]	; (800b658 <UART_SetConfig+0x660>)
 800b4ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4f0:	f003 0307 	and.w	r3, r3, #7
 800b4f4:	2b05      	cmp	r3, #5
 800b4f6:	d827      	bhi.n	800b548 <UART_SetConfig+0x550>
 800b4f8:	a201      	add	r2, pc, #4	; (adr r2, 800b500 <UART_SetConfig+0x508>)
 800b4fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4fe:	bf00      	nop
 800b500:	0800b519 	.word	0x0800b519
 800b504:	0800b521 	.word	0x0800b521
 800b508:	0800b529 	.word	0x0800b529
 800b50c:	0800b531 	.word	0x0800b531
 800b510:	0800b539 	.word	0x0800b539
 800b514:	0800b541 	.word	0x0800b541
 800b518:	2300      	movs	r3, #0
 800b51a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b51e:	e053      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b520:	2304      	movs	r3, #4
 800b522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b526:	e04f      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b528:	2308      	movs	r3, #8
 800b52a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b52e:	e04b      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b530:	2310      	movs	r3, #16
 800b532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b536:	e047      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b538:	2320      	movs	r3, #32
 800b53a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b53e:	e043      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b540:	2340      	movs	r3, #64	; 0x40
 800b542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b546:	e03f      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b548:	2380      	movs	r3, #128	; 0x80
 800b54a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b54e:	bf00      	nop
 800b550:	e03a      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	4a43      	ldr	r2, [pc, #268]	; (800b664 <UART_SetConfig+0x66c>)
 800b558:	4293      	cmp	r3, r2
 800b55a:	d132      	bne.n	800b5c2 <UART_SetConfig+0x5ca>
 800b55c:	4b3e      	ldr	r3, [pc, #248]	; (800b658 <UART_SetConfig+0x660>)
 800b55e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b560:	f003 0307 	and.w	r3, r3, #7
 800b564:	2b05      	cmp	r3, #5
 800b566:	d827      	bhi.n	800b5b8 <UART_SetConfig+0x5c0>
 800b568:	a201      	add	r2, pc, #4	; (adr r2, 800b570 <UART_SetConfig+0x578>)
 800b56a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b56e:	bf00      	nop
 800b570:	0800b589 	.word	0x0800b589
 800b574:	0800b591 	.word	0x0800b591
 800b578:	0800b599 	.word	0x0800b599
 800b57c:	0800b5a1 	.word	0x0800b5a1
 800b580:	0800b5a9 	.word	0x0800b5a9
 800b584:	0800b5b1 	.word	0x0800b5b1
 800b588:	2302      	movs	r3, #2
 800b58a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b58e:	e01b      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b590:	2304      	movs	r3, #4
 800b592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b596:	e017      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b598:	2308      	movs	r3, #8
 800b59a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b59e:	e013      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b5a0:	2310      	movs	r3, #16
 800b5a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5a6:	e00f      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b5a8:	2320      	movs	r3, #32
 800b5aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5ae:	e00b      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b5b0:	2340      	movs	r3, #64	; 0x40
 800b5b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5b6:	e007      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b5b8:	2380      	movs	r3, #128	; 0x80
 800b5ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b5be:	bf00      	nop
 800b5c0:	e002      	b.n	800b5c8 <UART_SetConfig+0x5d0>
 800b5c2:	2380      	movs	r3, #128	; 0x80
 800b5c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	4a25      	ldr	r2, [pc, #148]	; (800b664 <UART_SetConfig+0x66c>)
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	f040 80b8 	bne.w	800b744 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b5d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b5d8:	2b08      	cmp	r3, #8
 800b5da:	d019      	beq.n	800b610 <UART_SetConfig+0x618>
 800b5dc:	2b08      	cmp	r3, #8
 800b5de:	dc04      	bgt.n	800b5ea <UART_SetConfig+0x5f2>
 800b5e0:	2b02      	cmp	r3, #2
 800b5e2:	d009      	beq.n	800b5f8 <UART_SetConfig+0x600>
 800b5e4:	2b04      	cmp	r3, #4
 800b5e6:	d00b      	beq.n	800b600 <UART_SetConfig+0x608>
 800b5e8:	e042      	b.n	800b670 <UART_SetConfig+0x678>
 800b5ea:	2b20      	cmp	r3, #32
 800b5ec:	d02b      	beq.n	800b646 <UART_SetConfig+0x64e>
 800b5ee:	2b40      	cmp	r3, #64	; 0x40
 800b5f0:	d02c      	beq.n	800b64c <UART_SetConfig+0x654>
 800b5f2:	2b10      	cmp	r3, #16
 800b5f4:	d014      	beq.n	800b620 <UART_SetConfig+0x628>
 800b5f6:	e03b      	b.n	800b670 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b5f8:	f7fc fe28 	bl	800824c <HAL_RCCEx_GetD3PCLK1Freq>
 800b5fc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b5fe:	e03d      	b.n	800b67c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b600:	f107 0314 	add.w	r3, r7, #20
 800b604:	4618      	mov	r0, r3
 800b606:	f7fc fe37 	bl	8008278 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b60a:	69bb      	ldr	r3, [r7, #24]
 800b60c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b60e:	e035      	b.n	800b67c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b610:	f107 0308 	add.w	r3, r7, #8
 800b614:	4618      	mov	r0, r3
 800b616:	f7fc ff7b 	bl	8008510 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b61e:	e02d      	b.n	800b67c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b620:	4b0d      	ldr	r3, [pc, #52]	; (800b658 <UART_SetConfig+0x660>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f003 0320 	and.w	r3, r3, #32
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d009      	beq.n	800b640 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b62c:	4b0a      	ldr	r3, [pc, #40]	; (800b658 <UART_SetConfig+0x660>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	08db      	lsrs	r3, r3, #3
 800b632:	f003 0303 	and.w	r3, r3, #3
 800b636:	4a0c      	ldr	r2, [pc, #48]	; (800b668 <UART_SetConfig+0x670>)
 800b638:	fa22 f303 	lsr.w	r3, r2, r3
 800b63c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b63e:	e01d      	b.n	800b67c <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800b640:	4b09      	ldr	r3, [pc, #36]	; (800b668 <UART_SetConfig+0x670>)
 800b642:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b644:	e01a      	b.n	800b67c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b646:	4b09      	ldr	r3, [pc, #36]	; (800b66c <UART_SetConfig+0x674>)
 800b648:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b64a:	e017      	b.n	800b67c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b64c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b650:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b652:	e013      	b.n	800b67c <UART_SetConfig+0x684>
 800b654:	40011400 	.word	0x40011400
 800b658:	58024400 	.word	0x58024400
 800b65c:	40007800 	.word	0x40007800
 800b660:	40007c00 	.word	0x40007c00
 800b664:	58000c00 	.word	0x58000c00
 800b668:	03d09000 	.word	0x03d09000
 800b66c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800b670:	2300      	movs	r3, #0
 800b672:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b674:	2301      	movs	r3, #1
 800b676:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b67a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b67e:	2b00      	cmp	r3, #0
 800b680:	f000 824d 	beq.w	800bb1e <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b688:	4aad      	ldr	r2, [pc, #692]	; (800b940 <UART_SetConfig+0x948>)
 800b68a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b68e:	461a      	mov	r2, r3
 800b690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b692:	fbb3 f3f2 	udiv	r3, r3, r2
 800b696:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	685a      	ldr	r2, [r3, #4]
 800b69c:	4613      	mov	r3, r2
 800b69e:	005b      	lsls	r3, r3, #1
 800b6a0:	4413      	add	r3, r2
 800b6a2:	6a3a      	ldr	r2, [r7, #32]
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d305      	bcc.n	800b6b4 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	685b      	ldr	r3, [r3, #4]
 800b6ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b6ae:	6a3a      	ldr	r2, [r7, #32]
 800b6b0:	429a      	cmp	r2, r3
 800b6b2:	d903      	bls.n	800b6bc <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b6ba:	e230      	b.n	800bb1e <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f04f 0100 	mov.w	r1, #0
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c8:	4a9d      	ldr	r2, [pc, #628]	; (800b940 <UART_SetConfig+0x948>)
 800b6ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	f04f 0400 	mov.w	r4, #0
 800b6d4:	461a      	mov	r2, r3
 800b6d6:	4623      	mov	r3, r4
 800b6d8:	f7f4 fe5a 	bl	8000390 <__aeabi_uldivmod>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	460c      	mov	r4, r1
 800b6e0:	4619      	mov	r1, r3
 800b6e2:	4622      	mov	r2, r4
 800b6e4:	f04f 0300 	mov.w	r3, #0
 800b6e8:	f04f 0400 	mov.w	r4, #0
 800b6ec:	0214      	lsls	r4, r2, #8
 800b6ee:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800b6f2:	020b      	lsls	r3, r1, #8
 800b6f4:	687a      	ldr	r2, [r7, #4]
 800b6f6:	6852      	ldr	r2, [r2, #4]
 800b6f8:	0852      	lsrs	r2, r2, #1
 800b6fa:	4611      	mov	r1, r2
 800b6fc:	f04f 0200 	mov.w	r2, #0
 800b700:	eb13 0b01 	adds.w	fp, r3, r1
 800b704:	eb44 0c02 	adc.w	ip, r4, r2
 800b708:	4658      	mov	r0, fp
 800b70a:	4661      	mov	r1, ip
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	f04f 0400 	mov.w	r4, #0
 800b714:	461a      	mov	r2, r3
 800b716:	4623      	mov	r3, r4
 800b718:	f7f4 fe3a 	bl	8000390 <__aeabi_uldivmod>
 800b71c:	4603      	mov	r3, r0
 800b71e:	460c      	mov	r4, r1
 800b720:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b724:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b728:	d308      	bcc.n	800b73c <UART_SetConfig+0x744>
 800b72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b72c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b730:	d204      	bcs.n	800b73c <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b738:	60da      	str	r2, [r3, #12]
 800b73a:	e1f0      	b.n	800bb1e <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800b73c:	2301      	movs	r3, #1
 800b73e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b742:	e1ec      	b.n	800bb1e <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	69db      	ldr	r3, [r3, #28]
 800b748:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b74c:	f040 8100 	bne.w	800b950 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800b750:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b754:	2b40      	cmp	r3, #64	; 0x40
 800b756:	f200 80b7 	bhi.w	800b8c8 <UART_SetConfig+0x8d0>
 800b75a:	a201      	add	r2, pc, #4	; (adr r2, 800b760 <UART_SetConfig+0x768>)
 800b75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b760:	0800b865 	.word	0x0800b865
 800b764:	0800b86d 	.word	0x0800b86d
 800b768:	0800b8c9 	.word	0x0800b8c9
 800b76c:	0800b8c9 	.word	0x0800b8c9
 800b770:	0800b875 	.word	0x0800b875
 800b774:	0800b8c9 	.word	0x0800b8c9
 800b778:	0800b8c9 	.word	0x0800b8c9
 800b77c:	0800b8c9 	.word	0x0800b8c9
 800b780:	0800b885 	.word	0x0800b885
 800b784:	0800b8c9 	.word	0x0800b8c9
 800b788:	0800b8c9 	.word	0x0800b8c9
 800b78c:	0800b8c9 	.word	0x0800b8c9
 800b790:	0800b8c9 	.word	0x0800b8c9
 800b794:	0800b8c9 	.word	0x0800b8c9
 800b798:	0800b8c9 	.word	0x0800b8c9
 800b79c:	0800b8c9 	.word	0x0800b8c9
 800b7a0:	0800b895 	.word	0x0800b895
 800b7a4:	0800b8c9 	.word	0x0800b8c9
 800b7a8:	0800b8c9 	.word	0x0800b8c9
 800b7ac:	0800b8c9 	.word	0x0800b8c9
 800b7b0:	0800b8c9 	.word	0x0800b8c9
 800b7b4:	0800b8c9 	.word	0x0800b8c9
 800b7b8:	0800b8c9 	.word	0x0800b8c9
 800b7bc:	0800b8c9 	.word	0x0800b8c9
 800b7c0:	0800b8c9 	.word	0x0800b8c9
 800b7c4:	0800b8c9 	.word	0x0800b8c9
 800b7c8:	0800b8c9 	.word	0x0800b8c9
 800b7cc:	0800b8c9 	.word	0x0800b8c9
 800b7d0:	0800b8c9 	.word	0x0800b8c9
 800b7d4:	0800b8c9 	.word	0x0800b8c9
 800b7d8:	0800b8c9 	.word	0x0800b8c9
 800b7dc:	0800b8c9 	.word	0x0800b8c9
 800b7e0:	0800b8bb 	.word	0x0800b8bb
 800b7e4:	0800b8c9 	.word	0x0800b8c9
 800b7e8:	0800b8c9 	.word	0x0800b8c9
 800b7ec:	0800b8c9 	.word	0x0800b8c9
 800b7f0:	0800b8c9 	.word	0x0800b8c9
 800b7f4:	0800b8c9 	.word	0x0800b8c9
 800b7f8:	0800b8c9 	.word	0x0800b8c9
 800b7fc:	0800b8c9 	.word	0x0800b8c9
 800b800:	0800b8c9 	.word	0x0800b8c9
 800b804:	0800b8c9 	.word	0x0800b8c9
 800b808:	0800b8c9 	.word	0x0800b8c9
 800b80c:	0800b8c9 	.word	0x0800b8c9
 800b810:	0800b8c9 	.word	0x0800b8c9
 800b814:	0800b8c9 	.word	0x0800b8c9
 800b818:	0800b8c9 	.word	0x0800b8c9
 800b81c:	0800b8c9 	.word	0x0800b8c9
 800b820:	0800b8c9 	.word	0x0800b8c9
 800b824:	0800b8c9 	.word	0x0800b8c9
 800b828:	0800b8c9 	.word	0x0800b8c9
 800b82c:	0800b8c9 	.word	0x0800b8c9
 800b830:	0800b8c9 	.word	0x0800b8c9
 800b834:	0800b8c9 	.word	0x0800b8c9
 800b838:	0800b8c9 	.word	0x0800b8c9
 800b83c:	0800b8c9 	.word	0x0800b8c9
 800b840:	0800b8c9 	.word	0x0800b8c9
 800b844:	0800b8c9 	.word	0x0800b8c9
 800b848:	0800b8c9 	.word	0x0800b8c9
 800b84c:	0800b8c9 	.word	0x0800b8c9
 800b850:	0800b8c9 	.word	0x0800b8c9
 800b854:	0800b8c9 	.word	0x0800b8c9
 800b858:	0800b8c9 	.word	0x0800b8c9
 800b85c:	0800b8c9 	.word	0x0800b8c9
 800b860:	0800b8c1 	.word	0x0800b8c1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b864:	f7fb fb60 	bl	8006f28 <HAL_RCC_GetPCLK1Freq>
 800b868:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b86a:	e033      	b.n	800b8d4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b86c:	f7fb fb72 	bl	8006f54 <HAL_RCC_GetPCLK2Freq>
 800b870:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b872:	e02f      	b.n	800b8d4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b874:	f107 0314 	add.w	r3, r7, #20
 800b878:	4618      	mov	r0, r3
 800b87a:	f7fc fcfd 	bl	8008278 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b87e:	69bb      	ldr	r3, [r7, #24]
 800b880:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b882:	e027      	b.n	800b8d4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b884:	f107 0308 	add.w	r3, r7, #8
 800b888:	4618      	mov	r0, r3
 800b88a:	f7fc fe41 	bl	8008510 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b892:	e01f      	b.n	800b8d4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b894:	4b2b      	ldr	r3, [pc, #172]	; (800b944 <UART_SetConfig+0x94c>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f003 0320 	and.w	r3, r3, #32
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d009      	beq.n	800b8b4 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b8a0:	4b28      	ldr	r3, [pc, #160]	; (800b944 <UART_SetConfig+0x94c>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	08db      	lsrs	r3, r3, #3
 800b8a6:	f003 0303 	and.w	r3, r3, #3
 800b8aa:	4a27      	ldr	r2, [pc, #156]	; (800b948 <UART_SetConfig+0x950>)
 800b8ac:	fa22 f303 	lsr.w	r3, r2, r3
 800b8b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b8b2:	e00f      	b.n	800b8d4 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800b8b4:	4b24      	ldr	r3, [pc, #144]	; (800b948 <UART_SetConfig+0x950>)
 800b8b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b8b8:	e00c      	b.n	800b8d4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b8ba:	4b24      	ldr	r3, [pc, #144]	; (800b94c <UART_SetConfig+0x954>)
 800b8bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b8be:	e009      	b.n	800b8d4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b8c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b8c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b8c6:	e005      	b.n	800b8d4 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b8d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	f000 8121 	beq.w	800bb1e <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8e0:	4a17      	ldr	r2, [pc, #92]	; (800b940 <UART_SetConfig+0x948>)
 800b8e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8e6:	461a      	mov	r2, r3
 800b8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ea:	fbb3 f3f2 	udiv	r3, r3, r2
 800b8ee:	005a      	lsls	r2, r3, #1
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	085b      	lsrs	r3, r3, #1
 800b8f6:	441a      	add	r2, r3
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	685b      	ldr	r3, [r3, #4]
 800b8fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b900:	b29b      	uxth	r3, r3
 800b902:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b906:	2b0f      	cmp	r3, #15
 800b908:	d916      	bls.n	800b938 <UART_SetConfig+0x940>
 800b90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b90c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b910:	d212      	bcs.n	800b938 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b914:	b29b      	uxth	r3, r3
 800b916:	f023 030f 	bic.w	r3, r3, #15
 800b91a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b91e:	085b      	lsrs	r3, r3, #1
 800b920:	b29b      	uxth	r3, r3
 800b922:	f003 0307 	and.w	r3, r3, #7
 800b926:	b29a      	uxth	r2, r3
 800b928:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b92a:	4313      	orrs	r3, r2
 800b92c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b934:	60da      	str	r2, [r3, #12]
 800b936:	e0f2      	b.n	800bb1e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800b938:	2301      	movs	r3, #1
 800b93a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b93e:	e0ee      	b.n	800bb1e <UART_SetConfig+0xb26>
 800b940:	08011d10 	.word	0x08011d10
 800b944:	58024400 	.word	0x58024400
 800b948:	03d09000 	.word	0x03d09000
 800b94c:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800b950:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b954:	2b40      	cmp	r3, #64	; 0x40
 800b956:	f200 80b7 	bhi.w	800bac8 <UART_SetConfig+0xad0>
 800b95a:	a201      	add	r2, pc, #4	; (adr r2, 800b960 <UART_SetConfig+0x968>)
 800b95c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b960:	0800ba65 	.word	0x0800ba65
 800b964:	0800ba6d 	.word	0x0800ba6d
 800b968:	0800bac9 	.word	0x0800bac9
 800b96c:	0800bac9 	.word	0x0800bac9
 800b970:	0800ba75 	.word	0x0800ba75
 800b974:	0800bac9 	.word	0x0800bac9
 800b978:	0800bac9 	.word	0x0800bac9
 800b97c:	0800bac9 	.word	0x0800bac9
 800b980:	0800ba85 	.word	0x0800ba85
 800b984:	0800bac9 	.word	0x0800bac9
 800b988:	0800bac9 	.word	0x0800bac9
 800b98c:	0800bac9 	.word	0x0800bac9
 800b990:	0800bac9 	.word	0x0800bac9
 800b994:	0800bac9 	.word	0x0800bac9
 800b998:	0800bac9 	.word	0x0800bac9
 800b99c:	0800bac9 	.word	0x0800bac9
 800b9a0:	0800ba95 	.word	0x0800ba95
 800b9a4:	0800bac9 	.word	0x0800bac9
 800b9a8:	0800bac9 	.word	0x0800bac9
 800b9ac:	0800bac9 	.word	0x0800bac9
 800b9b0:	0800bac9 	.word	0x0800bac9
 800b9b4:	0800bac9 	.word	0x0800bac9
 800b9b8:	0800bac9 	.word	0x0800bac9
 800b9bc:	0800bac9 	.word	0x0800bac9
 800b9c0:	0800bac9 	.word	0x0800bac9
 800b9c4:	0800bac9 	.word	0x0800bac9
 800b9c8:	0800bac9 	.word	0x0800bac9
 800b9cc:	0800bac9 	.word	0x0800bac9
 800b9d0:	0800bac9 	.word	0x0800bac9
 800b9d4:	0800bac9 	.word	0x0800bac9
 800b9d8:	0800bac9 	.word	0x0800bac9
 800b9dc:	0800bac9 	.word	0x0800bac9
 800b9e0:	0800babb 	.word	0x0800babb
 800b9e4:	0800bac9 	.word	0x0800bac9
 800b9e8:	0800bac9 	.word	0x0800bac9
 800b9ec:	0800bac9 	.word	0x0800bac9
 800b9f0:	0800bac9 	.word	0x0800bac9
 800b9f4:	0800bac9 	.word	0x0800bac9
 800b9f8:	0800bac9 	.word	0x0800bac9
 800b9fc:	0800bac9 	.word	0x0800bac9
 800ba00:	0800bac9 	.word	0x0800bac9
 800ba04:	0800bac9 	.word	0x0800bac9
 800ba08:	0800bac9 	.word	0x0800bac9
 800ba0c:	0800bac9 	.word	0x0800bac9
 800ba10:	0800bac9 	.word	0x0800bac9
 800ba14:	0800bac9 	.word	0x0800bac9
 800ba18:	0800bac9 	.word	0x0800bac9
 800ba1c:	0800bac9 	.word	0x0800bac9
 800ba20:	0800bac9 	.word	0x0800bac9
 800ba24:	0800bac9 	.word	0x0800bac9
 800ba28:	0800bac9 	.word	0x0800bac9
 800ba2c:	0800bac9 	.word	0x0800bac9
 800ba30:	0800bac9 	.word	0x0800bac9
 800ba34:	0800bac9 	.word	0x0800bac9
 800ba38:	0800bac9 	.word	0x0800bac9
 800ba3c:	0800bac9 	.word	0x0800bac9
 800ba40:	0800bac9 	.word	0x0800bac9
 800ba44:	0800bac9 	.word	0x0800bac9
 800ba48:	0800bac9 	.word	0x0800bac9
 800ba4c:	0800bac9 	.word	0x0800bac9
 800ba50:	0800bac9 	.word	0x0800bac9
 800ba54:	0800bac9 	.word	0x0800bac9
 800ba58:	0800bac9 	.word	0x0800bac9
 800ba5c:	0800bac9 	.word	0x0800bac9
 800ba60:	0800bac1 	.word	0x0800bac1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba64:	f7fb fa60 	bl	8006f28 <HAL_RCC_GetPCLK1Freq>
 800ba68:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ba6a:	e033      	b.n	800bad4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba6c:	f7fb fa72 	bl	8006f54 <HAL_RCC_GetPCLK2Freq>
 800ba70:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ba72:	e02f      	b.n	800bad4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba74:	f107 0314 	add.w	r3, r7, #20
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f7fc fbfd 	bl	8008278 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ba7e:	69bb      	ldr	r3, [r7, #24]
 800ba80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba82:	e027      	b.n	800bad4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba84:	f107 0308 	add.w	r3, r7, #8
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f7fc fd41 	bl	8008510 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ba92:	e01f      	b.n	800bad4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba94:	4b2c      	ldr	r3, [pc, #176]	; (800bb48 <UART_SetConfig+0xb50>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f003 0320 	and.w	r3, r3, #32
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d009      	beq.n	800bab4 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800baa0:	4b29      	ldr	r3, [pc, #164]	; (800bb48 <UART_SetConfig+0xb50>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	08db      	lsrs	r3, r3, #3
 800baa6:	f003 0303 	and.w	r3, r3, #3
 800baaa:	4a28      	ldr	r2, [pc, #160]	; (800bb4c <UART_SetConfig+0xb54>)
 800baac:	fa22 f303 	lsr.w	r3, r2, r3
 800bab0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bab2:	e00f      	b.n	800bad4 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800bab4:	4b25      	ldr	r3, [pc, #148]	; (800bb4c <UART_SetConfig+0xb54>)
 800bab6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bab8:	e00c      	b.n	800bad4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800baba:	4b25      	ldr	r3, [pc, #148]	; (800bb50 <UART_SetConfig+0xb58>)
 800babc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800babe:	e009      	b.n	800bad4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bac0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bac4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bac6:	e005      	b.n	800bad4 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800bac8:	2300      	movs	r3, #0
 800baca:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800bacc:	2301      	movs	r3, #1
 800bace:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800bad2:	bf00      	nop
    }

    if (pclk != 0U)
 800bad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d021      	beq.n	800bb1e <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bade:	4a1d      	ldr	r2, [pc, #116]	; (800bb54 <UART_SetConfig+0xb5c>)
 800bae0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bae4:	461a      	mov	r2, r3
 800bae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bae8:	fbb3 f2f2 	udiv	r2, r3, r2
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	085b      	lsrs	r3, r3, #1
 800baf2:	441a      	add	r2, r3
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	685b      	ldr	r3, [r3, #4]
 800baf8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bafc:	b29b      	uxth	r3, r3
 800bafe:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb02:	2b0f      	cmp	r3, #15
 800bb04:	d908      	bls.n	800bb18 <UART_SetConfig+0xb20>
 800bb06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb0c:	d204      	bcs.n	800bb18 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb14:	60da      	str	r2, [r3, #12]
 800bb16:	e002      	b.n	800bb1e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800bb18:	2301      	movs	r3, #1
 800bb1a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2201      	movs	r2, #1
 800bb22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2201      	movs	r2, #1
 800bb2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2200      	movs	r2, #0
 800bb32:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2200      	movs	r2, #0
 800bb38:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800bb3a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3738      	adds	r7, #56	; 0x38
 800bb42:	46bd      	mov	sp, r7
 800bb44:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800bb48:	58024400 	.word	0x58024400
 800bb4c:	03d09000 	.word	0x03d09000
 800bb50:	003d0900 	.word	0x003d0900
 800bb54:	08011d10 	.word	0x08011d10

0800bb58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b083      	sub	sp, #12
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb64:	f003 0301 	and.w	r3, r3, #1
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d00a      	beq.n	800bb82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	430a      	orrs	r2, r1
 800bb80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb86:	f003 0302 	and.w	r3, r3, #2
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d00a      	beq.n	800bba4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	685b      	ldr	r3, [r3, #4]
 800bb94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	430a      	orrs	r2, r1
 800bba2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bba8:	f003 0304 	and.w	r3, r3, #4
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d00a      	beq.n	800bbc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	685b      	ldr	r3, [r3, #4]
 800bbb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	430a      	orrs	r2, r1
 800bbc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbca:	f003 0308 	and.w	r3, r3, #8
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d00a      	beq.n	800bbe8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	685b      	ldr	r3, [r3, #4]
 800bbd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	430a      	orrs	r2, r1
 800bbe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbec:	f003 0310 	and.w	r3, r3, #16
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d00a      	beq.n	800bc0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	689b      	ldr	r3, [r3, #8]
 800bbfa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	430a      	orrs	r2, r1
 800bc08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc0e:	f003 0320 	and.w	r3, r3, #32
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d00a      	beq.n	800bc2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	689b      	ldr	r3, [r3, #8]
 800bc1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	430a      	orrs	r2, r1
 800bc2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d01a      	beq.n	800bc6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	685b      	ldr	r3, [r3, #4]
 800bc3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	430a      	orrs	r2, r1
 800bc4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc56:	d10a      	bne.n	800bc6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	685b      	ldr	r3, [r3, #4]
 800bc5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	430a      	orrs	r2, r1
 800bc6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d00a      	beq.n	800bc90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	685b      	ldr	r3, [r3, #4]
 800bc80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	430a      	orrs	r2, r1
 800bc8e:	605a      	str	r2, [r3, #4]
  }
}
 800bc90:	bf00      	nop
 800bc92:	370c      	adds	r7, #12
 800bc94:	46bd      	mov	sp, r7
 800bc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9a:	4770      	bx	lr

0800bc9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b086      	sub	sp, #24
 800bca0:	af02      	add	r7, sp, #8
 800bca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2200      	movs	r2, #0
 800bca8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800bcac:	f7f5 fffe 	bl	8001cac <HAL_GetTick>
 800bcb0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f003 0308 	and.w	r3, r3, #8
 800bcbc:	2b08      	cmp	r3, #8
 800bcbe:	d10e      	bne.n	800bcde <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bcc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bcc4:	9300      	str	r3, [sp, #0]
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f000 f82c 	bl	800bd2c <UART_WaitOnFlagUntilTimeout>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d001      	beq.n	800bcde <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bcda:	2303      	movs	r3, #3
 800bcdc:	e022      	b.n	800bd24 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f003 0304 	and.w	r3, r3, #4
 800bce8:	2b04      	cmp	r3, #4
 800bcea:	d10e      	bne.n	800bd0a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bcec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bcf0:	9300      	str	r3, [sp, #0]
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f000 f816 	bl	800bd2c <UART_WaitOnFlagUntilTimeout>
 800bd00:	4603      	mov	r3, r0
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d001      	beq.n	800bd0a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bd06:	2303      	movs	r3, #3
 800bd08:	e00c      	b.n	800bd24 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2220      	movs	r2, #32
 800bd0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2220      	movs	r2, #32
 800bd16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800bd22:	2300      	movs	r3, #0
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	3710      	adds	r7, #16
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b084      	sub	sp, #16
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	60f8      	str	r0, [r7, #12]
 800bd34:	60b9      	str	r1, [r7, #8]
 800bd36:	603b      	str	r3, [r7, #0]
 800bd38:	4613      	mov	r3, r2
 800bd3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd3c:	e062      	b.n	800be04 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd3e:	69bb      	ldr	r3, [r7, #24]
 800bd40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd44:	d05e      	beq.n	800be04 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd46:	f7f5 ffb1 	bl	8001cac <HAL_GetTick>
 800bd4a:	4602      	mov	r2, r0
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	1ad3      	subs	r3, r2, r3
 800bd50:	69ba      	ldr	r2, [r7, #24]
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d302      	bcc.n	800bd5c <UART_WaitOnFlagUntilTimeout+0x30>
 800bd56:	69bb      	ldr	r3, [r7, #24]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d11d      	bne.n	800bd98 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	681a      	ldr	r2, [r3, #0]
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bd6a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	689a      	ldr	r2, [r3, #8]
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f022 0201 	bic.w	r2, r2, #1
 800bd7a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	2220      	movs	r2, #32
 800bd80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	2220      	movs	r2, #32
 800bd88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800bd94:	2303      	movs	r3, #3
 800bd96:	e045      	b.n	800be24 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f003 0304 	and.w	r3, r3, #4
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d02e      	beq.n	800be04 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	69db      	ldr	r3, [r3, #28]
 800bdac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bdb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bdb4:	d126      	bne.n	800be04 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bdbe:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	681a      	ldr	r2, [r3, #0]
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bdce:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	689a      	ldr	r2, [r3, #8]
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f022 0201 	bic.w	r2, r2, #1
 800bdde:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	2220      	movs	r2, #32
 800bde4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	2220      	movs	r2, #32
 800bdec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	2220      	movs	r2, #32
 800bdf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800be00:	2303      	movs	r3, #3
 800be02:	e00f      	b.n	800be24 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	69da      	ldr	r2, [r3, #28]
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	4013      	ands	r3, r2
 800be0e:	68ba      	ldr	r2, [r7, #8]
 800be10:	429a      	cmp	r2, r3
 800be12:	bf0c      	ite	eq
 800be14:	2301      	moveq	r3, #1
 800be16:	2300      	movne	r3, #0
 800be18:	b2db      	uxtb	r3, r3
 800be1a:	461a      	mov	r2, r3
 800be1c:	79fb      	ldrb	r3, [r7, #7]
 800be1e:	429a      	cmp	r2, r3
 800be20:	d08d      	beq.n	800bd3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800be22:	2300      	movs	r3, #0
}
 800be24:	4618      	mov	r0, r3
 800be26:	3710      	adds	r7, #16
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}

0800be2c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b083      	sub	sp, #12
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	681a      	ldr	r2, [r3, #0]
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800be42:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	689a      	ldr	r2, [r3, #8]
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800be52:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2220      	movs	r2, #32
 800be58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800be5c:	bf00      	nop
 800be5e:	370c      	adds	r7, #12
 800be60:	46bd      	mov	sp, r7
 800be62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be66:	4770      	bx	lr

0800be68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800be68:	b480      	push	{r7}
 800be6a:	b083      	sub	sp, #12
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	681a      	ldr	r2, [r3, #0]
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800be7e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	6899      	ldr	r1, [r3, #8]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681a      	ldr	r2, [r3, #0]
 800be8a:	4b08      	ldr	r3, [pc, #32]	; (800beac <UART_EndRxTransfer+0x44>)
 800be8c:	400b      	ands	r3, r1
 800be8e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2220      	movs	r2, #32
 800be94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2200      	movs	r2, #0
 800be9c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800be9e:	bf00      	nop
 800bea0:	370c      	adds	r7, #12
 800bea2:	46bd      	mov	sp, r7
 800bea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea8:	4770      	bx	lr
 800beaa:	bf00      	nop
 800beac:	effffffe 	.word	0xeffffffe

0800beb0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b084      	sub	sp, #16
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bebc:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	69db      	ldr	r3, [r3, #28]
 800bec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bec6:	d01f      	beq.n	800bf08 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2200      	movs	r2, #0
 800becc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	681a      	ldr	r2, [r3, #0]
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bede:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	689a      	ldr	r2, [r3, #8]
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f022 0201 	bic.w	r2, r2, #1
 800beee:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	689a      	ldr	r2, [r3, #8]
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800befe:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2220      	movs	r2, #32
 800bf04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800bf08:	68f8      	ldr	r0, [r7, #12]
 800bf0a:	f7f5 fa39 	bl	8001380 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf0e:	bf00      	nop
 800bf10:	3710      	adds	r7, #16
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}

0800bf16 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bf16:	b580      	push	{r7, lr}
 800bf18:	b084      	sub	sp, #16
 800bf1a:	af00      	add	r7, sp, #0
 800bf1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf22:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800bf24:	68f8      	ldr	r0, [r7, #12]
 800bf26:	f7ff f853 	bl	800afd0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf2a:	bf00      	nop
 800bf2c:	3710      	adds	r7, #16
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}

0800bf32 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bf32:	b580      	push	{r7, lr}
 800bf34:	b086      	sub	sp, #24
 800bf36:	af00      	add	r7, sp, #0
 800bf38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf3e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf46:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf4e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	689b      	ldr	r3, [r3, #8]
 800bf56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf5a:	2b80      	cmp	r3, #128	; 0x80
 800bf5c:	d109      	bne.n	800bf72 <UART_DMAError+0x40>
 800bf5e:	693b      	ldr	r3, [r7, #16]
 800bf60:	2b21      	cmp	r3, #33	; 0x21
 800bf62:	d106      	bne.n	800bf72 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	2200      	movs	r2, #0
 800bf68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800bf6c:	6978      	ldr	r0, [r7, #20]
 800bf6e:	f7ff ff5d 	bl	800be2c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	689b      	ldr	r3, [r3, #8]
 800bf78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf7c:	2b40      	cmp	r3, #64	; 0x40
 800bf7e:	d109      	bne.n	800bf94 <UART_DMAError+0x62>
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	2b22      	cmp	r3, #34	; 0x22
 800bf84:	d106      	bne.n	800bf94 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	2200      	movs	r2, #0
 800bf8a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800bf8e:	6978      	ldr	r0, [r7, #20]
 800bf90:	f7ff ff6a 	bl	800be68 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bf94:	697b      	ldr	r3, [r7, #20]
 800bf96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf9a:	f043 0210 	orr.w	r2, r3, #16
 800bf9e:	697b      	ldr	r3, [r7, #20]
 800bfa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bfa4:	6978      	ldr	r0, [r7, #20]
 800bfa6:	f7ff f81d 	bl	800afe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bfaa:	bf00      	nop
 800bfac:	3718      	adds	r7, #24
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}

0800bfb2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bfb2:	b480      	push	{r7}
 800bfb4:	b085      	sub	sp, #20
 800bfb6:	af00      	add	r7, sp, #0
 800bfb8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bfc0:	2b01      	cmp	r3, #1
 800bfc2:	d101      	bne.n	800bfc8 <HAL_UARTEx_DisableFifoMode+0x16>
 800bfc4:	2302      	movs	r3, #2
 800bfc6:	e027      	b.n	800c018 <HAL_UARTEx_DisableFifoMode+0x66>
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2201      	movs	r2, #1
 800bfcc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2224      	movs	r2, #36	; 0x24
 800bfd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	681a      	ldr	r2, [r3, #0]
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f022 0201 	bic.w	r2, r2, #1
 800bfee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bff6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2200      	movs	r2, #0
 800bffc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	68fa      	ldr	r2, [r7, #12]
 800c004:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2220      	movs	r2, #32
 800c00a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2200      	movs	r2, #0
 800c012:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c016:	2300      	movs	r3, #0
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3714      	adds	r7, #20
 800c01c:	46bd      	mov	sp, r7
 800c01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c022:	4770      	bx	lr

0800c024 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c034:	2b01      	cmp	r3, #1
 800c036:	d101      	bne.n	800c03c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c038:	2302      	movs	r3, #2
 800c03a:	e02d      	b.n	800c098 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2201      	movs	r2, #1
 800c040:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2224      	movs	r2, #36	; 0x24
 800c048:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	681a      	ldr	r2, [r3, #0]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f022 0201 	bic.w	r2, r2, #1
 800c062:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	689b      	ldr	r3, [r3, #8]
 800c06a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	683a      	ldr	r2, [r7, #0]
 800c074:	430a      	orrs	r2, r1
 800c076:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f000 f84f 	bl	800c11c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	68fa      	ldr	r2, [r7, #12]
 800c084:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2220      	movs	r2, #32
 800c08a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2200      	movs	r2, #0
 800c092:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c096:	2300      	movs	r3, #0
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3710      	adds	r7, #16
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b084      	sub	sp, #16
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c0b0:	2b01      	cmp	r3, #1
 800c0b2:	d101      	bne.n	800c0b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c0b4:	2302      	movs	r3, #2
 800c0b6:	e02d      	b.n	800c114 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2201      	movs	r2, #1
 800c0bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2224      	movs	r2, #36	; 0x24
 800c0c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	681a      	ldr	r2, [r3, #0]
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f022 0201 	bic.w	r2, r2, #1
 800c0de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	689b      	ldr	r3, [r3, #8]
 800c0e6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	683a      	ldr	r2, [r7, #0]
 800c0f0:	430a      	orrs	r2, r1
 800c0f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f000 f811 	bl	800c11c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	68fa      	ldr	r2, [r7, #12]
 800c100:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2220      	movs	r2, #32
 800c106:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2200      	movs	r2, #0
 800c10e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800c112:	2300      	movs	r3, #0
}
 800c114:	4618      	mov	r0, r3
 800c116:	3710      	adds	r7, #16
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b089      	sub	sp, #36	; 0x24
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800c124:	4a2f      	ldr	r2, [pc, #188]	; (800c1e4 <UARTEx_SetNbDataToProcess+0xc8>)
 800c126:	f107 0314 	add.w	r3, r7, #20
 800c12a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c12e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800c132:	4a2d      	ldr	r2, [pc, #180]	; (800c1e8 <UARTEx_SetNbDataToProcess+0xcc>)
 800c134:	f107 030c 	add.w	r3, r7, #12
 800c138:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c13c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c144:	2b00      	cmp	r3, #0
 800c146:	d108      	bne.n	800c15a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2201      	movs	r2, #1
 800c14c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2201      	movs	r2, #1
 800c154:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c158:	e03d      	b.n	800c1d6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c15a:	2310      	movs	r3, #16
 800c15c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c15e:	2310      	movs	r3, #16
 800c160:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	689b      	ldr	r3, [r3, #8]
 800c168:	0e5b      	lsrs	r3, r3, #25
 800c16a:	b2db      	uxtb	r3, r3
 800c16c:	f003 0307 	and.w	r3, r3, #7
 800c170:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	689b      	ldr	r3, [r3, #8]
 800c178:	0f5b      	lsrs	r3, r3, #29
 800c17a:	b2db      	uxtb	r3, r3
 800c17c:	f003 0307 	and.w	r3, r3, #7
 800c180:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800c182:	7fbb      	ldrb	r3, [r7, #30]
 800c184:	7f3a      	ldrb	r2, [r7, #28]
 800c186:	f107 0120 	add.w	r1, r7, #32
 800c18a:	440a      	add	r2, r1
 800c18c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c190:	fb02 f303 	mul.w	r3, r2, r3
 800c194:	7f3a      	ldrb	r2, [r7, #28]
 800c196:	f107 0120 	add.w	r1, r7, #32
 800c19a:	440a      	add	r2, r1
 800c19c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c1a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c1a4:	b29a      	uxth	r2, r3
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800c1ac:	7ffb      	ldrb	r3, [r7, #31]
 800c1ae:	7f7a      	ldrb	r2, [r7, #29]
 800c1b0:	f107 0120 	add.w	r1, r7, #32
 800c1b4:	440a      	add	r2, r1
 800c1b6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800c1ba:	fb02 f303 	mul.w	r3, r2, r3
 800c1be:	7f7a      	ldrb	r2, [r7, #29]
 800c1c0:	f107 0120 	add.w	r1, r7, #32
 800c1c4:	440a      	add	r2, r1
 800c1c6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800c1ca:	fb93 f3f2 	sdiv	r3, r3, r2
 800c1ce:	b29a      	uxth	r2, r3
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c1d6:	bf00      	nop
 800c1d8:	3724      	adds	r7, #36	; 0x24
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e0:	4770      	bx	lr
 800c1e2:	bf00      	nop
 800c1e4:	08011ca0 	.word	0x08011ca0
 800c1e8:	08011ca8 	.word	0x08011ca8

0800c1ec <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c1ec:	b084      	sub	sp, #16
 800c1ee:	b480      	push	{r7}
 800c1f0:	b085      	sub	sp, #20
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	6078      	str	r0, [r7, #4]
 800c1f6:	f107 001c 	add.w	r0, r7, #28
 800c1fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c1fe:	2300      	movs	r3, #0
 800c200:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c202:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800c204:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c206:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800c20a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800c20e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800c212:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c214:	68fa      	ldr	r2, [r7, #12]
 800c216:	4313      	orrs	r3, r2
 800c218:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	685a      	ldr	r2, [r3, #4]
 800c21e:	4b07      	ldr	r3, [pc, #28]	; (800c23c <SDMMC_Init+0x50>)
 800c220:	4013      	ands	r3, r2
 800c222:	68fa      	ldr	r2, [r7, #12]
 800c224:	431a      	orrs	r2, r3
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c22a:	2300      	movs	r3, #0
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3714      	adds	r7, #20
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	b004      	add	sp, #16
 800c238:	4770      	bx	lr
 800c23a:	bf00      	nop
 800c23c:	ffc02c00 	.word	0xffc02c00

0800c240 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c240:	b480      	push	{r7}
 800c242:	b083      	sub	sp, #12
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c24e:	4618      	mov	r0, r3
 800c250:	370c      	adds	r7, #12
 800c252:	46bd      	mov	sp, r7
 800c254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c258:	4770      	bx	lr

0800c25a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800c25a:	b480      	push	{r7}
 800c25c:	b083      	sub	sp, #12
 800c25e:	af00      	add	r7, sp, #0
 800c260:	6078      	str	r0, [r7, #4]
 800c262:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	681a      	ldr	r2, [r3, #0]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c26e:	2300      	movs	r3, #0
}
 800c270:	4618      	mov	r0, r3
 800c272:	370c      	adds	r7, #12
 800c274:	46bd      	mov	sp, r7
 800c276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27a:	4770      	bx	lr

0800c27c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800c27c:	b480      	push	{r7}
 800c27e:	b083      	sub	sp, #12
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	f043 0203 	orr.w	r2, r3, #3
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c290:	2300      	movs	r3, #0
}
 800c292:	4618      	mov	r0, r3
 800c294:	370c      	adds	r7, #12
 800c296:	46bd      	mov	sp, r7
 800c298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29c:	4770      	bx	lr

0800c29e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800c29e:	b480      	push	{r7}
 800c2a0:	b083      	sub	sp, #12
 800c2a2:	af00      	add	r7, sp, #0
 800c2a4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	f003 0303 	and.w	r3, r3, #3
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	370c      	adds	r7, #12
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b8:	4770      	bx	lr
	...

0800c2bc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c2bc:	b480      	push	{r7}
 800c2be:	b085      	sub	sp, #20
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	681a      	ldr	r2, [r3, #0]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c2da:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c2e0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c2e6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c2e8:	68fa      	ldr	r2, [r7, #12]
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	68da      	ldr	r2, [r3, #12]
 800c2f2:	4b06      	ldr	r3, [pc, #24]	; (800c30c <SDMMC_SendCommand+0x50>)
 800c2f4:	4013      	ands	r3, r2
 800c2f6:	68fa      	ldr	r2, [r7, #12]
 800c2f8:	431a      	orrs	r2, r3
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c2fe:	2300      	movs	r3, #0
}
 800c300:	4618      	mov	r0, r3
 800c302:	3714      	adds	r7, #20
 800c304:	46bd      	mov	sp, r7
 800c306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30a:	4770      	bx	lr
 800c30c:	fffee0c0 	.word	0xfffee0c0

0800c310 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c310:	b480      	push	{r7}
 800c312:	b083      	sub	sp, #12
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	691b      	ldr	r3, [r3, #16]
 800c31c:	b2db      	uxtb	r3, r3
}
 800c31e:	4618      	mov	r0, r3
 800c320:	370c      	adds	r7, #12
 800c322:	46bd      	mov	sp, r7
 800c324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c328:	4770      	bx	lr

0800c32a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c32a:	b480      	push	{r7}
 800c32c:	b085      	sub	sp, #20
 800c32e:	af00      	add	r7, sp, #0
 800c330:	6078      	str	r0, [r7, #4]
 800c332:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	3314      	adds	r3, #20
 800c338:	461a      	mov	r2, r3
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	4413      	add	r3, r2
 800c33e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	681b      	ldr	r3, [r3, #0]
}
 800c344:	4618      	mov	r0, r3
 800c346:	3714      	adds	r7, #20
 800c348:	46bd      	mov	sp, r7
 800c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34e:	4770      	bx	lr

0800c350 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800c350:	b480      	push	{r7}
 800c352:	b085      	sub	sp, #20
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
 800c358:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c35a:	2300      	movs	r3, #0
 800c35c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	681a      	ldr	r2, [r3, #0]
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	685a      	ldr	r2, [r3, #4]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c376:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c37c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c382:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c384:	68fa      	ldr	r2, [r7, #12]
 800c386:	4313      	orrs	r3, r2
 800c388:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c38e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	431a      	orrs	r2, r3
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c39a:	2300      	movs	r3, #0

}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3714      	adds	r7, #20
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr

0800c3a8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b088      	sub	sp, #32
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c3b6:	2310      	movs	r3, #16
 800c3b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c3ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c3be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c3c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c3c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c3ca:	f107 0308 	add.w	r3, r7, #8
 800c3ce:	4619      	mov	r1, r3
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f7ff ff73 	bl	800c2bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c3d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3da:	2110      	movs	r1, #16
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f000 faaf 	bl	800c940 <SDMMC_GetCmdResp1>
 800c3e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c3e4:	69fb      	ldr	r3, [r7, #28]
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3720      	adds	r7, #32
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}

0800c3ee <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c3ee:	b580      	push	{r7, lr}
 800c3f0:	b088      	sub	sp, #32
 800c3f2:	af00      	add	r7, sp, #0
 800c3f4:	6078      	str	r0, [r7, #4]
 800c3f6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c3fc:	2311      	movs	r3, #17
 800c3fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c400:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c404:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c406:	2300      	movs	r3, #0
 800c408:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c40a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c40e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c410:	f107 0308 	add.w	r3, r7, #8
 800c414:	4619      	mov	r1, r3
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f7ff ff50 	bl	800c2bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c41c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c420:	2111      	movs	r1, #17
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f000 fa8c 	bl	800c940 <SDMMC_GetCmdResp1>
 800c428:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c42a:	69fb      	ldr	r3, [r7, #28]
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	3720      	adds	r7, #32
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}

0800c434 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b088      	sub	sp, #32
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
 800c43c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c442:	2312      	movs	r3, #18
 800c444:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c446:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c44a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c44c:	2300      	movs	r3, #0
 800c44e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c450:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c454:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c456:	f107 0308 	add.w	r3, r7, #8
 800c45a:	4619      	mov	r1, r3
 800c45c:	6878      	ldr	r0, [r7, #4]
 800c45e:	f7ff ff2d 	bl	800c2bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c462:	f241 3288 	movw	r2, #5000	; 0x1388
 800c466:	2112      	movs	r1, #18
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f000 fa69 	bl	800c940 <SDMMC_GetCmdResp1>
 800c46e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c470:	69fb      	ldr	r3, [r7, #28]
}
 800c472:	4618      	mov	r0, r3
 800c474:	3720      	adds	r7, #32
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}

0800c47a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c47a:	b580      	push	{r7, lr}
 800c47c:	b088      	sub	sp, #32
 800c47e:	af00      	add	r7, sp, #0
 800c480:	6078      	str	r0, [r7, #4]
 800c482:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c488:	2318      	movs	r3, #24
 800c48a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c48c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c490:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c492:	2300      	movs	r3, #0
 800c494:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c496:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c49a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c49c:	f107 0308 	add.w	r3, r7, #8
 800c4a0:	4619      	mov	r1, r3
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f7ff ff0a 	bl	800c2bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c4a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4ac:	2118      	movs	r1, #24
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f000 fa46 	bl	800c940 <SDMMC_GetCmdResp1>
 800c4b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c4b6:	69fb      	ldr	r3, [r7, #28]
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3720      	adds	r7, #32
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}

0800c4c0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b088      	sub	sp, #32
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c4ce:	2319      	movs	r3, #25
 800c4d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c4d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c4d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c4d8:	2300      	movs	r3, #0
 800c4da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c4dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c4e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c4e2:	f107 0308 	add.w	r3, r7, #8
 800c4e6:	4619      	mov	r1, r3
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f7ff fee7 	bl	800c2bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c4ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4f2:	2119      	movs	r1, #25
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f000 fa23 	bl	800c940 <SDMMC_GetCmdResp1>
 800c4fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c4fc:	69fb      	ldr	r3, [r7, #28]
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3720      	adds	r7, #32
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}
	...

0800c508 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b088      	sub	sp, #32
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c510:	2300      	movs	r3, #0
 800c512:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c514:	230c      	movs	r3, #12
 800c516:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c518:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c51c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c51e:	2300      	movs	r3, #0
 800c520:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c522:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c526:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	68db      	ldr	r3, [r3, #12]
 800c52c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	68db      	ldr	r3, [r3, #12]
 800c538:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c540:	f107 0308 	add.w	r3, r7, #8
 800c544:	4619      	mov	r1, r3
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f7ff feb8 	bl	800c2bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c54c:	4a0b      	ldr	r2, [pc, #44]	; (800c57c <SDMMC_CmdStopTransfer+0x74>)
 800c54e:	210c      	movs	r1, #12
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f000 f9f5 	bl	800c940 <SDMMC_GetCmdResp1>
 800c556:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	68db      	ldr	r3, [r3, #12]
 800c55c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800c564:	69fb      	ldr	r3, [r7, #28]
 800c566:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c56a:	d101      	bne.n	800c570 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800c56c:	2300      	movs	r3, #0
 800c56e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800c570:	69fb      	ldr	r3, [r7, #28]
}
 800c572:	4618      	mov	r0, r3
 800c574:	3720      	adds	r7, #32
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}
 800c57a:	bf00      	nop
 800c57c:	05f5e100 	.word	0x05f5e100

0800c580 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b08a      	sub	sp, #40	; 0x28
 800c584:	af00      	add	r7, sp, #0
 800c586:	60f8      	str	r0, [r7, #12]
 800c588:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c590:	2307      	movs	r3, #7
 800c592:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c594:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c598:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c59a:	2300      	movs	r3, #0
 800c59c:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c59e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c5a2:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c5a4:	f107 0310 	add.w	r3, r7, #16
 800c5a8:	4619      	mov	r1, r3
 800c5aa:	68f8      	ldr	r0, [r7, #12]
 800c5ac:	f7ff fe86 	bl	800c2bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c5b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5b4:	2107      	movs	r1, #7
 800c5b6:	68f8      	ldr	r0, [r7, #12]
 800c5b8:	f000 f9c2 	bl	800c940 <SDMMC_GetCmdResp1>
 800c5bc:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3728      	adds	r7, #40	; 0x28
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}

0800c5c8 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b088      	sub	sp, #32
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c5d8:	2300      	movs	r3, #0
 800c5da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c5e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c5e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c5e6:	f107 0308 	add.w	r3, r7, #8
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f7ff fe65 	bl	800c2bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f000 f976 	bl	800c8e4 <SDMMC_GetCmdError>
 800c5f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c5fa:	69fb      	ldr	r3, [r7, #28]
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3720      	adds	r7, #32
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}

0800c604 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b088      	sub	sp, #32
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c60c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c610:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c612:	2308      	movs	r3, #8
 800c614:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c616:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c61a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c61c:	2300      	movs	r3, #0
 800c61e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c624:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c626:	f107 0308 	add.w	r3, r7, #8
 800c62a:	4619      	mov	r1, r3
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f7ff fe45 	bl	800c2bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f000 fb78 	bl	800cd28 <SDMMC_GetCmdResp7>
 800c638:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c63a:	69fb      	ldr	r3, [r7, #28]
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	3720      	adds	r7, #32
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}

0800c644 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b088      	sub	sp, #32
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
 800c64c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c652:	2337      	movs	r3, #55	; 0x37
 800c654:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c656:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c65a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c65c:	2300      	movs	r3, #0
 800c65e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c664:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c666:	f107 0308 	add.w	r3, r7, #8
 800c66a:	4619      	mov	r1, r3
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f7ff fe25 	bl	800c2bc <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c672:	f241 3288 	movw	r2, #5000	; 0x1388
 800c676:	2137      	movs	r1, #55	; 0x37
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f000 f961 	bl	800c940 <SDMMC_GetCmdResp1>
 800c67e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c680:	69fb      	ldr	r3, [r7, #28]
}
 800c682:	4618      	mov	r0, r3
 800c684:	3720      	adds	r7, #32
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}

0800c68a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c68a:	b580      	push	{r7, lr}
 800c68c:	b088      	sub	sp, #32
 800c68e:	af00      	add	r7, sp, #0
 800c690:	6078      	str	r0, [r7, #4]
 800c692:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c698:	2329      	movs	r3, #41	; 0x29
 800c69a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c69c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c6a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c6a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c6aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c6ac:	f107 0308 	add.w	r3, r7, #8
 800c6b0:	4619      	mov	r1, r3
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	f7ff fe02 	bl	800c2bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f000 fa7d 	bl	800cbb8 <SDMMC_GetCmdResp3>
 800c6be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c6c0:	69fb      	ldr	r3, [r7, #28]
}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	3720      	adds	r7, #32
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}

0800c6ca <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c6ca:	b580      	push	{r7, lr}
 800c6cc:	b088      	sub	sp, #32
 800c6ce:	af00      	add	r7, sp, #0
 800c6d0:	6078      	str	r0, [r7, #4]
 800c6d2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c6d8:	2306      	movs	r3, #6
 800c6da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c6dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c6e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c6e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c6ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c6ec:	f107 0308 	add.w	r3, r7, #8
 800c6f0:	4619      	mov	r1, r3
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f7ff fde2 	bl	800c2bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c6f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6fc:	2106      	movs	r1, #6
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f000 f91e 	bl	800c940 <SDMMC_GetCmdResp1>
 800c704:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c706:	69fb      	ldr	r3, [r7, #28]
}
 800c708:	4618      	mov	r0, r3
 800c70a:	3720      	adds	r7, #32
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b088      	sub	sp, #32
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c718:	2300      	movs	r3, #0
 800c71a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c71c:	2333      	movs	r3, #51	; 0x33
 800c71e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c720:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c724:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c726:	2300      	movs	r3, #0
 800c728:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c72a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c72e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c730:	f107 0308 	add.w	r3, r7, #8
 800c734:	4619      	mov	r1, r3
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f7ff fdc0 	bl	800c2bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c73c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c740:	2133      	movs	r1, #51	; 0x33
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f000 f8fc 	bl	800c940 <SDMMC_GetCmdResp1>
 800c748:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c74a:	69fb      	ldr	r3, [r7, #28]
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3720      	adds	r7, #32
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}

0800c754 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b088      	sub	sp, #32
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c75c:	2300      	movs	r3, #0
 800c75e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c760:	2302      	movs	r3, #2
 800c762:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c764:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c768:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c76a:	2300      	movs	r3, #0
 800c76c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c76e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c772:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c774:	f107 0308 	add.w	r3, r7, #8
 800c778:	4619      	mov	r1, r3
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f7ff fd9e 	bl	800c2bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f000 f9cf 	bl	800cb24 <SDMMC_GetCmdResp2>
 800c786:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c788:	69fb      	ldr	r3, [r7, #28]
}
 800c78a:	4618      	mov	r0, r3
 800c78c:	3720      	adds	r7, #32
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}

0800c792 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c792:	b580      	push	{r7, lr}
 800c794:	b088      	sub	sp, #32
 800c796:	af00      	add	r7, sp, #0
 800c798:	6078      	str	r0, [r7, #4]
 800c79a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c7a0:	2309      	movs	r3, #9
 800c7a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c7a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c7a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c7ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c7b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c7b4:	f107 0308 	add.w	r3, r7, #8
 800c7b8:	4619      	mov	r1, r3
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f7ff fd7e 	bl	800c2bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f000 f9af 	bl	800cb24 <SDMMC_GetCmdResp2>
 800c7c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7c8:	69fb      	ldr	r3, [r7, #28]
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3720      	adds	r7, #32
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}

0800c7d2 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c7d2:	b580      	push	{r7, lr}
 800c7d4:	b088      	sub	sp, #32
 800c7d6:	af00      	add	r7, sp, #0
 800c7d8:	6078      	str	r0, [r7, #4]
 800c7da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c7dc:	2300      	movs	r3, #0
 800c7de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c7e0:	2303      	movs	r3, #3
 800c7e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c7e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c7e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c7ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c7f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c7f4:	f107 0308 	add.w	r3, r7, #8
 800c7f8:	4619      	mov	r1, r3
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f7ff fd5e 	bl	800c2bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c800:	683a      	ldr	r2, [r7, #0]
 800c802:	2103      	movs	r1, #3
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f000 fa17 	bl	800cc38 <SDMMC_GetCmdResp6>
 800c80a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c80c:	69fb      	ldr	r3, [r7, #28]
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3720      	adds	r7, #32
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}

0800c816 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c816:	b580      	push	{r7, lr}
 800c818:	b088      	sub	sp, #32
 800c81a:	af00      	add	r7, sp, #0
 800c81c:	6078      	str	r0, [r7, #4]
 800c81e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c824:	230d      	movs	r3, #13
 800c826:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c828:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c82c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c82e:	2300      	movs	r3, #0
 800c830:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c836:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c838:	f107 0308 	add.w	r3, r7, #8
 800c83c:	4619      	mov	r1, r3
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f7ff fd3c 	bl	800c2bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c844:	f241 3288 	movw	r2, #5000	; 0x1388
 800c848:	210d      	movs	r1, #13
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f000 f878 	bl	800c940 <SDMMC_GetCmdResp1>
 800c850:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c852:	69fb      	ldr	r3, [r7, #28]
}
 800c854:	4618      	mov	r0, r3
 800c856:	3720      	adds	r7, #32
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}

0800c85c <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b088      	sub	sp, #32
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c864:	2300      	movs	r3, #0
 800c866:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800c868:	230d      	movs	r3, #13
 800c86a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c86c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c870:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c872:	2300      	movs	r3, #0
 800c874:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c87a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c87c:	f107 0308 	add.w	r3, r7, #8
 800c880:	4619      	mov	r1, r3
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f7ff fd1a 	bl	800c2bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800c888:	f241 3288 	movw	r2, #5000	; 0x1388
 800c88c:	210d      	movs	r1, #13
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f000 f856 	bl	800c940 <SDMMC_GetCmdResp1>
 800c894:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c896:	69fb      	ldr	r3, [r7, #28]
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3720      	adds	r7, #32
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}

0800c8a0 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b088      	sub	sp, #32
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800c8ac:	230b      	movs	r3, #11
 800c8ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c8b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c8b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c8ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c8be:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c8c0:	f107 0308 	add.w	r3, r7, #8
 800c8c4:	4619      	mov	r1, r3
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f7ff fcf8 	bl	800c2bc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800c8cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8d0:	210b      	movs	r1, #11
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f000 f834 	bl	800c940 <SDMMC_GetCmdResp1>
 800c8d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8da:	69fb      	ldr	r3, [r7, #28]
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3720      	adds	r7, #32
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}

0800c8e4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b085      	sub	sp, #20
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c8ec:	4b11      	ldr	r3, [pc, #68]	; (800c934 <SDMMC_GetCmdError+0x50>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	4a11      	ldr	r2, [pc, #68]	; (800c938 <SDMMC_GetCmdError+0x54>)
 800c8f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c8f6:	0a5b      	lsrs	r3, r3, #9
 800c8f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8fc:	fb02 f303 	mul.w	r3, r2, r3
 800c900:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	1e5a      	subs	r2, r3, #1
 800c906:	60fa      	str	r2, [r7, #12]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d102      	bne.n	800c912 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c90c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c910:	e009      	b.n	800c926 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d0f1      	beq.n	800c902 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	4a06      	ldr	r2, [pc, #24]	; (800c93c <SDMMC_GetCmdError+0x58>)
 800c922:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800c924:	2300      	movs	r3, #0
}
 800c926:	4618      	mov	r0, r3
 800c928:	3714      	adds	r7, #20
 800c92a:	46bd      	mov	sp, r7
 800c92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c930:	4770      	bx	lr
 800c932:	bf00      	nop
 800c934:	24000000 	.word	0x24000000
 800c938:	10624dd3 	.word	0x10624dd3
 800c93c:	002000c5 	.word	0x002000c5

0800c940 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b088      	sub	sp, #32
 800c944:	af00      	add	r7, sp, #0
 800c946:	60f8      	str	r0, [r7, #12]
 800c948:	460b      	mov	r3, r1
 800c94a:	607a      	str	r2, [r7, #4]
 800c94c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c94e:	4b70      	ldr	r3, [pc, #448]	; (800cb10 <SDMMC_GetCmdResp1+0x1d0>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	4a70      	ldr	r2, [pc, #448]	; (800cb14 <SDMMC_GetCmdResp1+0x1d4>)
 800c954:	fba2 2303 	umull	r2, r3, r2, r3
 800c958:	0a5a      	lsrs	r2, r3, #9
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	fb02 f303 	mul.w	r3, r2, r3
 800c960:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c962:	69fb      	ldr	r3, [r7, #28]
 800c964:	1e5a      	subs	r2, r3, #1
 800c966:	61fa      	str	r2, [r7, #28]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d102      	bne.n	800c972 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c96c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c970:	e0c9      	b.n	800cb06 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c976:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c978:	69ba      	ldr	r2, [r7, #24]
 800c97a:	4b67      	ldr	r3, [pc, #412]	; (800cb18 <SDMMC_GetCmdResp1+0x1d8>)
 800c97c:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d0ef      	beq.n	800c962 <SDMMC_GetCmdResp1+0x22>
 800c982:	69bb      	ldr	r3, [r7, #24]
 800c984:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d1ea      	bne.n	800c962 <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c990:	f003 0304 	and.w	r3, r3, #4
 800c994:	2b00      	cmp	r3, #0
 800c996:	d004      	beq.n	800c9a2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	2204      	movs	r2, #4
 800c99c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c99e:	2304      	movs	r3, #4
 800c9a0:	e0b1      	b.n	800cb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9a6:	f003 0301 	and.w	r3, r3, #1
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d004      	beq.n	800c9b8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	2201      	movs	r2, #1
 800c9b2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	e0a6      	b.n	800cb06 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	4a58      	ldr	r2, [pc, #352]	; (800cb1c <SDMMC_GetCmdResp1+0x1dc>)
 800c9bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c9be:	68f8      	ldr	r0, [r7, #12]
 800c9c0:	f7ff fca6 	bl	800c310 <SDMMC_GetCommandResponse>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	461a      	mov	r2, r3
 800c9c8:	7afb      	ldrb	r3, [r7, #11]
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	d001      	beq.n	800c9d2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	e099      	b.n	800cb06 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c9d2:	2100      	movs	r1, #0
 800c9d4:	68f8      	ldr	r0, [r7, #12]
 800c9d6:	f7ff fca8 	bl	800c32a <SDMMC_GetResponse>
 800c9da:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c9dc:	697a      	ldr	r2, [r7, #20]
 800c9de:	4b50      	ldr	r3, [pc, #320]	; (800cb20 <SDMMC_GetCmdResp1+0x1e0>)
 800c9e0:	4013      	ands	r3, r2
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d101      	bne.n	800c9ea <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	e08d      	b.n	800cb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	da02      	bge.n	800c9f6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c9f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c9f4:	e087      	b.n	800cb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c9f6:	697b      	ldr	r3, [r7, #20]
 800c9f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d001      	beq.n	800ca04 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ca00:	2340      	movs	r3, #64	; 0x40
 800ca02:	e080      	b.n	800cb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ca04:	697b      	ldr	r3, [r7, #20]
 800ca06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d001      	beq.n	800ca12 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ca0e:	2380      	movs	r3, #128	; 0x80
 800ca10:	e079      	b.n	800cb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d002      	beq.n	800ca22 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ca1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ca20:	e071      	b.n	800cb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d002      	beq.n	800ca32 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ca2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca30:	e069      	b.n	800cb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d002      	beq.n	800ca42 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ca3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca40:	e061      	b.n	800cb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ca42:	697b      	ldr	r3, [r7, #20]
 800ca44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d002      	beq.n	800ca52 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ca4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ca50:	e059      	b.n	800cb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d002      	beq.n	800ca62 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ca5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ca60:	e051      	b.n	800cb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d002      	beq.n	800ca72 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ca6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ca70:	e049      	b.n	800cb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d002      	beq.n	800ca82 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ca7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ca80:	e041      	b.n	800cb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d002      	beq.n	800ca92 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ca8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca90:	e039      	b.n	800cb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d002      	beq.n	800caa2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ca9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800caa0:	e031      	b.n	800cb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d002      	beq.n	800cab2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800caac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cab0:	e029      	b.n	800cb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cab2:	697b      	ldr	r3, [r7, #20]
 800cab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d002      	beq.n	800cac2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cabc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cac0:	e021      	b.n	800cb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d002      	beq.n	800cad2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cacc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cad0:	e019      	b.n	800cb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cad2:	697b      	ldr	r3, [r7, #20]
 800cad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d002      	beq.n	800cae2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cadc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cae0:	e011      	b.n	800cb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d002      	beq.n	800caf2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800caec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800caf0:	e009      	b.n	800cb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	f003 0308 	and.w	r3, r3, #8
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d002      	beq.n	800cb02 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cafc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cb00:	e001      	b.n	800cb06 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cb02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	3720      	adds	r7, #32
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}
 800cb0e:	bf00      	nop
 800cb10:	24000000 	.word	0x24000000
 800cb14:	10624dd3 	.word	0x10624dd3
 800cb18:	00200045 	.word	0x00200045
 800cb1c:	002000c5 	.word	0x002000c5
 800cb20:	fdffe008 	.word	0xfdffe008

0800cb24 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800cb24:	b480      	push	{r7}
 800cb26:	b085      	sub	sp, #20
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cb2c:	4b1f      	ldr	r3, [pc, #124]	; (800cbac <SDMMC_GetCmdResp2+0x88>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	4a1f      	ldr	r2, [pc, #124]	; (800cbb0 <SDMMC_GetCmdResp2+0x8c>)
 800cb32:	fba2 2303 	umull	r2, r3, r2, r3
 800cb36:	0a5b      	lsrs	r3, r3, #9
 800cb38:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb3c:	fb02 f303 	mul.w	r3, r2, r3
 800cb40:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	1e5a      	subs	r2, r3, #1
 800cb46:	60fa      	str	r2, [r7, #12]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d102      	bne.n	800cb52 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cb4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cb50:	e026      	b.n	800cba0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb56:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cb58:	68bb      	ldr	r3, [r7, #8]
 800cb5a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d0ef      	beq.n	800cb42 <SDMMC_GetCmdResp2+0x1e>
 800cb62:	68bb      	ldr	r3, [r7, #8]
 800cb64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d1ea      	bne.n	800cb42 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb70:	f003 0304 	and.w	r3, r3, #4
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d004      	beq.n	800cb82 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2204      	movs	r2, #4
 800cb7c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cb7e:	2304      	movs	r3, #4
 800cb80:	e00e      	b.n	800cba0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb86:	f003 0301 	and.w	r3, r3, #1
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d004      	beq.n	800cb98 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2201      	movs	r2, #1
 800cb92:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cb94:	2301      	movs	r3, #1
 800cb96:	e003      	b.n	800cba0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	4a06      	ldr	r2, [pc, #24]	; (800cbb4 <SDMMC_GetCmdResp2+0x90>)
 800cb9c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800cb9e:	2300      	movs	r3, #0
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3714      	adds	r7, #20
 800cba4:	46bd      	mov	sp, r7
 800cba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbaa:	4770      	bx	lr
 800cbac:	24000000 	.word	0x24000000
 800cbb0:	10624dd3 	.word	0x10624dd3
 800cbb4:	002000c5 	.word	0x002000c5

0800cbb8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800cbb8:	b480      	push	{r7}
 800cbba:	b085      	sub	sp, #20
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cbc0:	4b1a      	ldr	r3, [pc, #104]	; (800cc2c <SDMMC_GetCmdResp3+0x74>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	4a1a      	ldr	r2, [pc, #104]	; (800cc30 <SDMMC_GetCmdResp3+0x78>)
 800cbc6:	fba2 2303 	umull	r2, r3, r2, r3
 800cbca:	0a5b      	lsrs	r3, r3, #9
 800cbcc:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbd0:	fb02 f303 	mul.w	r3, r2, r3
 800cbd4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	1e5a      	subs	r2, r3, #1
 800cbda:	60fa      	str	r2, [r7, #12]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d102      	bne.n	800cbe6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cbe0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cbe4:	e01b      	b.n	800cc1e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d0ef      	beq.n	800cbd6 <SDMMC_GetCmdResp3+0x1e>
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d1ea      	bne.n	800cbd6 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc04:	f003 0304 	and.w	r3, r3, #4
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d004      	beq.n	800cc16 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2204      	movs	r2, #4
 800cc10:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cc12:	2304      	movs	r3, #4
 800cc14:	e003      	b.n	800cc1e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	4a06      	ldr	r2, [pc, #24]	; (800cc34 <SDMMC_GetCmdResp3+0x7c>)
 800cc1a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800cc1c:	2300      	movs	r3, #0
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3714      	adds	r7, #20
 800cc22:	46bd      	mov	sp, r7
 800cc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc28:	4770      	bx	lr
 800cc2a:	bf00      	nop
 800cc2c:	24000000 	.word	0x24000000
 800cc30:	10624dd3 	.word	0x10624dd3
 800cc34:	002000c5 	.word	0x002000c5

0800cc38 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b088      	sub	sp, #32
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	60f8      	str	r0, [r7, #12]
 800cc40:	460b      	mov	r3, r1
 800cc42:	607a      	str	r2, [r7, #4]
 800cc44:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cc46:	4b35      	ldr	r3, [pc, #212]	; (800cd1c <SDMMC_GetCmdResp6+0xe4>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	4a35      	ldr	r2, [pc, #212]	; (800cd20 <SDMMC_GetCmdResp6+0xe8>)
 800cc4c:	fba2 2303 	umull	r2, r3, r2, r3
 800cc50:	0a5b      	lsrs	r3, r3, #9
 800cc52:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc56:	fb02 f303 	mul.w	r3, r2, r3
 800cc5a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800cc5c:	69fb      	ldr	r3, [r7, #28]
 800cc5e:	1e5a      	subs	r2, r3, #1
 800cc60:	61fa      	str	r2, [r7, #28]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d102      	bne.n	800cc6c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cc66:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cc6a:	e052      	b.n	800cd12 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc70:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cc72:	69bb      	ldr	r3, [r7, #24]
 800cc74:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d0ef      	beq.n	800cc5c <SDMMC_GetCmdResp6+0x24>
 800cc7c:	69bb      	ldr	r3, [r7, #24]
 800cc7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d1ea      	bne.n	800cc5c <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc8a:	f003 0304 	and.w	r3, r3, #4
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d004      	beq.n	800cc9c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	2204      	movs	r2, #4
 800cc96:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cc98:	2304      	movs	r3, #4
 800cc9a:	e03a      	b.n	800cd12 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cca0:	f003 0301 	and.w	r3, r3, #1
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d004      	beq.n	800ccb2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	2201      	movs	r2, #1
 800ccac:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ccae:	2301      	movs	r3, #1
 800ccb0:	e02f      	b.n	800cd12 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ccb2:	68f8      	ldr	r0, [r7, #12]
 800ccb4:	f7ff fb2c 	bl	800c310 <SDMMC_GetCommandResponse>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	461a      	mov	r2, r3
 800ccbc:	7afb      	ldrb	r3, [r7, #11]
 800ccbe:	4293      	cmp	r3, r2
 800ccc0:	d001      	beq.n	800ccc6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	e025      	b.n	800cd12 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	4a16      	ldr	r2, [pc, #88]	; (800cd24 <SDMMC_GetCmdResp6+0xec>)
 800ccca:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cccc:	2100      	movs	r1, #0
 800ccce:	68f8      	ldr	r0, [r7, #12]
 800ccd0:	f7ff fb2b 	bl	800c32a <SDMMC_GetResponse>
 800ccd4:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ccd6:	697b      	ldr	r3, [r7, #20]
 800ccd8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d106      	bne.n	800ccee <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	0c1b      	lsrs	r3, r3, #16
 800cce4:	b29a      	uxth	r2, r3
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800ccea:	2300      	movs	r3, #0
 800ccec:	e011      	b.n	800cd12 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ccee:	697b      	ldr	r3, [r7, #20]
 800ccf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d002      	beq.n	800ccfe <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ccf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ccfc:	e009      	b.n	800cd12 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d002      	beq.n	800cd0e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cd08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd0c:	e001      	b.n	800cd12 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cd0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	3720      	adds	r7, #32
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}
 800cd1a:	bf00      	nop
 800cd1c:	24000000 	.word	0x24000000
 800cd20:	10624dd3 	.word	0x10624dd3
 800cd24:	002000c5 	.word	0x002000c5

0800cd28 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800cd28:	b480      	push	{r7}
 800cd2a:	b085      	sub	sp, #20
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cd30:	4b22      	ldr	r3, [pc, #136]	; (800cdbc <SDMMC_GetCmdResp7+0x94>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	4a22      	ldr	r2, [pc, #136]	; (800cdc0 <SDMMC_GetCmdResp7+0x98>)
 800cd36:	fba2 2303 	umull	r2, r3, r2, r3
 800cd3a:	0a5b      	lsrs	r3, r3, #9
 800cd3c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd40:	fb02 f303 	mul.w	r3, r2, r3
 800cd44:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	1e5a      	subs	r2, r3, #1
 800cd4a:	60fa      	str	r2, [r7, #12]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d102      	bne.n	800cd56 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cd50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cd54:	e02c      	b.n	800cdb0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd5a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d0ef      	beq.n	800cd46 <SDMMC_GetCmdResp7+0x1e>
 800cd66:	68bb      	ldr	r3, [r7, #8]
 800cd68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d1ea      	bne.n	800cd46 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd74:	f003 0304 	and.w	r3, r3, #4
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d004      	beq.n	800cd86 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2204      	movs	r2, #4
 800cd80:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cd82:	2304      	movs	r3, #4
 800cd84:	e014      	b.n	800cdb0 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd8a:	f003 0301 	and.w	r3, r3, #1
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d004      	beq.n	800cd9c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2201      	movs	r2, #1
 800cd96:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cd98:	2301      	movs	r3, #1
 800cd9a:	e009      	b.n	800cdb0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cda0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d002      	beq.n	800cdae <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2240      	movs	r2, #64	; 0x40
 800cdac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800cdae:	2300      	movs	r3, #0

}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	3714      	adds	r7, #20
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdba:	4770      	bx	lr
 800cdbc:	24000000 	.word	0x24000000
 800cdc0:	10624dd3 	.word	0x10624dd3

0800cdc4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cdc4:	b084      	sub	sp, #16
 800cdc6:	b580      	push	{r7, lr}
 800cdc8:	b084      	sub	sp, #16
 800cdca:	af00      	add	r7, sp, #0
 800cdcc:	6078      	str	r0, [r7, #4]
 800cdce:	f107 001c 	add.w	r0, r7, #28
 800cdd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cdd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd8:	2b01      	cmp	r3, #1
 800cdda:	d120      	bne.n	800ce1e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cde0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	68da      	ldr	r2, [r3, #12]
 800cdec:	4b25      	ldr	r3, [pc, #148]	; (800ce84 <USB_CoreInit+0xc0>)
 800cdee:	4013      	ands	r3, r2
 800cdf0:	687a      	ldr	r2, [r7, #4]
 800cdf2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	68db      	ldr	r3, [r3, #12]
 800cdf8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ce00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce02:	2b01      	cmp	r3, #1
 800ce04:	d105      	bne.n	800ce12 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	68db      	ldr	r3, [r3, #12]
 800ce0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f001 fabe 	bl	800e394 <USB_CoreReset>
 800ce18:	4603      	mov	r3, r0
 800ce1a:	73fb      	strb	r3, [r7, #15]
 800ce1c:	e01a      	b.n	800ce54 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	68db      	ldr	r3, [r3, #12]
 800ce22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f001 fab2 	bl	800e394 <USB_CoreReset>
 800ce30:	4603      	mov	r3, r0
 800ce32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ce34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d106      	bne.n	800ce48 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	639a      	str	r2, [r3, #56]	; 0x38
 800ce46:	e005      	b.n	800ce54 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ce54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce56:	2b01      	cmp	r3, #1
 800ce58:	d10b      	bne.n	800ce72 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	689b      	ldr	r3, [r3, #8]
 800ce5e:	f043 0206 	orr.w	r2, r3, #6
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	689b      	ldr	r3, [r3, #8]
 800ce6a:	f043 0220 	orr.w	r2, r3, #32
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ce72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3710      	adds	r7, #16
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ce7e:	b004      	add	sp, #16
 800ce80:	4770      	bx	lr
 800ce82:	bf00      	nop
 800ce84:	ffbdffbf 	.word	0xffbdffbf

0800ce88 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ce88:	b480      	push	{r7}
 800ce8a:	b087      	sub	sp, #28
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	60f8      	str	r0, [r7, #12]
 800ce90:	60b9      	str	r1, [r7, #8]
 800ce92:	4613      	mov	r3, r2
 800ce94:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ce96:	79fb      	ldrb	r3, [r7, #7]
 800ce98:	2b02      	cmp	r3, #2
 800ce9a:	d165      	bne.n	800cf68 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ce9c:	68bb      	ldr	r3, [r7, #8]
 800ce9e:	4a41      	ldr	r2, [pc, #260]	; (800cfa4 <USB_SetTurnaroundTime+0x11c>)
 800cea0:	4293      	cmp	r3, r2
 800cea2:	d906      	bls.n	800ceb2 <USB_SetTurnaroundTime+0x2a>
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	4a40      	ldr	r2, [pc, #256]	; (800cfa8 <USB_SetTurnaroundTime+0x120>)
 800cea8:	4293      	cmp	r3, r2
 800ceaa:	d802      	bhi.n	800ceb2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ceac:	230f      	movs	r3, #15
 800ceae:	617b      	str	r3, [r7, #20]
 800ceb0:	e062      	b.n	800cf78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ceb2:	68bb      	ldr	r3, [r7, #8]
 800ceb4:	4a3c      	ldr	r2, [pc, #240]	; (800cfa8 <USB_SetTurnaroundTime+0x120>)
 800ceb6:	4293      	cmp	r3, r2
 800ceb8:	d906      	bls.n	800cec8 <USB_SetTurnaroundTime+0x40>
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	4a3b      	ldr	r2, [pc, #236]	; (800cfac <USB_SetTurnaroundTime+0x124>)
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d802      	bhi.n	800cec8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800cec2:	230e      	movs	r3, #14
 800cec4:	617b      	str	r3, [r7, #20]
 800cec6:	e057      	b.n	800cf78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	4a38      	ldr	r2, [pc, #224]	; (800cfac <USB_SetTurnaroundTime+0x124>)
 800cecc:	4293      	cmp	r3, r2
 800cece:	d906      	bls.n	800cede <USB_SetTurnaroundTime+0x56>
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	4a37      	ldr	r2, [pc, #220]	; (800cfb0 <USB_SetTurnaroundTime+0x128>)
 800ced4:	4293      	cmp	r3, r2
 800ced6:	d802      	bhi.n	800cede <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ced8:	230d      	movs	r3, #13
 800ceda:	617b      	str	r3, [r7, #20]
 800cedc:	e04c      	b.n	800cf78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800cede:	68bb      	ldr	r3, [r7, #8]
 800cee0:	4a33      	ldr	r2, [pc, #204]	; (800cfb0 <USB_SetTurnaroundTime+0x128>)
 800cee2:	4293      	cmp	r3, r2
 800cee4:	d906      	bls.n	800cef4 <USB_SetTurnaroundTime+0x6c>
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	4a32      	ldr	r2, [pc, #200]	; (800cfb4 <USB_SetTurnaroundTime+0x12c>)
 800ceea:	4293      	cmp	r3, r2
 800ceec:	d802      	bhi.n	800cef4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ceee:	230c      	movs	r3, #12
 800cef0:	617b      	str	r3, [r7, #20]
 800cef2:	e041      	b.n	800cf78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	4a2f      	ldr	r2, [pc, #188]	; (800cfb4 <USB_SetTurnaroundTime+0x12c>)
 800cef8:	4293      	cmp	r3, r2
 800cefa:	d906      	bls.n	800cf0a <USB_SetTurnaroundTime+0x82>
 800cefc:	68bb      	ldr	r3, [r7, #8]
 800cefe:	4a2e      	ldr	r2, [pc, #184]	; (800cfb8 <USB_SetTurnaroundTime+0x130>)
 800cf00:	4293      	cmp	r3, r2
 800cf02:	d802      	bhi.n	800cf0a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800cf04:	230b      	movs	r3, #11
 800cf06:	617b      	str	r3, [r7, #20]
 800cf08:	e036      	b.n	800cf78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	4a2a      	ldr	r2, [pc, #168]	; (800cfb8 <USB_SetTurnaroundTime+0x130>)
 800cf0e:	4293      	cmp	r3, r2
 800cf10:	d906      	bls.n	800cf20 <USB_SetTurnaroundTime+0x98>
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	4a29      	ldr	r2, [pc, #164]	; (800cfbc <USB_SetTurnaroundTime+0x134>)
 800cf16:	4293      	cmp	r3, r2
 800cf18:	d802      	bhi.n	800cf20 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800cf1a:	230a      	movs	r3, #10
 800cf1c:	617b      	str	r3, [r7, #20]
 800cf1e:	e02b      	b.n	800cf78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	4a26      	ldr	r2, [pc, #152]	; (800cfbc <USB_SetTurnaroundTime+0x134>)
 800cf24:	4293      	cmp	r3, r2
 800cf26:	d906      	bls.n	800cf36 <USB_SetTurnaroundTime+0xae>
 800cf28:	68bb      	ldr	r3, [r7, #8]
 800cf2a:	4a25      	ldr	r2, [pc, #148]	; (800cfc0 <USB_SetTurnaroundTime+0x138>)
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d802      	bhi.n	800cf36 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800cf30:	2309      	movs	r3, #9
 800cf32:	617b      	str	r3, [r7, #20]
 800cf34:	e020      	b.n	800cf78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	4a21      	ldr	r2, [pc, #132]	; (800cfc0 <USB_SetTurnaroundTime+0x138>)
 800cf3a:	4293      	cmp	r3, r2
 800cf3c:	d906      	bls.n	800cf4c <USB_SetTurnaroundTime+0xc4>
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	4a20      	ldr	r2, [pc, #128]	; (800cfc4 <USB_SetTurnaroundTime+0x13c>)
 800cf42:	4293      	cmp	r3, r2
 800cf44:	d802      	bhi.n	800cf4c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800cf46:	2308      	movs	r3, #8
 800cf48:	617b      	str	r3, [r7, #20]
 800cf4a:	e015      	b.n	800cf78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	4a1d      	ldr	r2, [pc, #116]	; (800cfc4 <USB_SetTurnaroundTime+0x13c>)
 800cf50:	4293      	cmp	r3, r2
 800cf52:	d906      	bls.n	800cf62 <USB_SetTurnaroundTime+0xda>
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	4a1c      	ldr	r2, [pc, #112]	; (800cfc8 <USB_SetTurnaroundTime+0x140>)
 800cf58:	4293      	cmp	r3, r2
 800cf5a:	d802      	bhi.n	800cf62 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800cf5c:	2307      	movs	r3, #7
 800cf5e:	617b      	str	r3, [r7, #20]
 800cf60:	e00a      	b.n	800cf78 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800cf62:	2306      	movs	r3, #6
 800cf64:	617b      	str	r3, [r7, #20]
 800cf66:	e007      	b.n	800cf78 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800cf68:	79fb      	ldrb	r3, [r7, #7]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d102      	bne.n	800cf74 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800cf6e:	2309      	movs	r3, #9
 800cf70:	617b      	str	r3, [r7, #20]
 800cf72:	e001      	b.n	800cf78 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800cf74:	2309      	movs	r3, #9
 800cf76:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	68db      	ldr	r3, [r3, #12]
 800cf7c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	68da      	ldr	r2, [r3, #12]
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	029b      	lsls	r3, r3, #10
 800cf8c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800cf90:	431a      	orrs	r2, r3
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cf96:	2300      	movs	r3, #0
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	371c      	adds	r7, #28
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa2:	4770      	bx	lr
 800cfa4:	00d8acbf 	.word	0x00d8acbf
 800cfa8:	00e4e1bf 	.word	0x00e4e1bf
 800cfac:	00f423ff 	.word	0x00f423ff
 800cfb0:	0106737f 	.word	0x0106737f
 800cfb4:	011a499f 	.word	0x011a499f
 800cfb8:	01312cff 	.word	0x01312cff
 800cfbc:	014ca43f 	.word	0x014ca43f
 800cfc0:	016e35ff 	.word	0x016e35ff
 800cfc4:	01a6ab1f 	.word	0x01a6ab1f
 800cfc8:	01e847ff 	.word	0x01e847ff

0800cfcc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cfcc:	b480      	push	{r7}
 800cfce:	b083      	sub	sp, #12
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	689b      	ldr	r3, [r3, #8]
 800cfd8:	f043 0201 	orr.w	r2, r3, #1
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cfe0:	2300      	movs	r3, #0
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	370c      	adds	r7, #12
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfec:	4770      	bx	lr

0800cfee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cfee:	b480      	push	{r7}
 800cff0:	b083      	sub	sp, #12
 800cff2:	af00      	add	r7, sp, #0
 800cff4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	689b      	ldr	r3, [r3, #8]
 800cffa:	f023 0201 	bic.w	r2, r3, #1
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d002:	2300      	movs	r3, #0
}
 800d004:	4618      	mov	r0, r3
 800d006:	370c      	adds	r7, #12
 800d008:	46bd      	mov	sp, r7
 800d00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00e:	4770      	bx	lr

0800d010 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b082      	sub	sp, #8
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	460b      	mov	r3, r1
 800d01a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	68db      	ldr	r3, [r3, #12]
 800d020:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d028:	78fb      	ldrb	r3, [r7, #3]
 800d02a:	2b01      	cmp	r3, #1
 800d02c:	d106      	bne.n	800d03c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	68db      	ldr	r3, [r3, #12]
 800d032:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	60da      	str	r2, [r3, #12]
 800d03a:	e00b      	b.n	800d054 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800d03c:	78fb      	ldrb	r3, [r7, #3]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d106      	bne.n	800d050 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	68db      	ldr	r3, [r3, #12]
 800d046:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	60da      	str	r2, [r3, #12]
 800d04e:	e001      	b.n	800d054 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800d050:	2301      	movs	r3, #1
 800d052:	e003      	b.n	800d05c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800d054:	2032      	movs	r0, #50	; 0x32
 800d056:	f7f4 fe35 	bl	8001cc4 <HAL_Delay>

  return HAL_OK;
 800d05a:	2300      	movs	r3, #0
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	3708      	adds	r7, #8
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}

0800d064 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d064:	b084      	sub	sp, #16
 800d066:	b580      	push	{r7, lr}
 800d068:	b086      	sub	sp, #24
 800d06a:	af00      	add	r7, sp, #0
 800d06c:	6078      	str	r0, [r7, #4]
 800d06e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d072:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d076:	2300      	movs	r3, #0
 800d078:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d07e:	2300      	movs	r3, #0
 800d080:	613b      	str	r3, [r7, #16]
 800d082:	e009      	b.n	800d098 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d084:	687a      	ldr	r2, [r7, #4]
 800d086:	693b      	ldr	r3, [r7, #16]
 800d088:	3340      	adds	r3, #64	; 0x40
 800d08a:	009b      	lsls	r3, r3, #2
 800d08c:	4413      	add	r3, r2
 800d08e:	2200      	movs	r2, #0
 800d090:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d092:	693b      	ldr	r3, [r7, #16]
 800d094:	3301      	adds	r3, #1
 800d096:	613b      	str	r3, [r7, #16]
 800d098:	693b      	ldr	r3, [r7, #16]
 800d09a:	2b0e      	cmp	r3, #14
 800d09c:	d9f2      	bls.n	800d084 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d09e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d11c      	bne.n	800d0de <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0aa:	685b      	ldr	r3, [r3, #4]
 800d0ac:	68fa      	ldr	r2, [r7, #12]
 800d0ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d0b2:	f043 0302 	orr.w	r3, r3, #2
 800d0b6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0bc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	601a      	str	r2, [r3, #0]
 800d0dc:	e005      	b.n	800d0ea <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d0f0:	461a      	mov	r2, r3
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0fc:	4619      	mov	r1, r3
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d104:	461a      	mov	r2, r3
 800d106:	680b      	ldr	r3, [r1, #0]
 800d108:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d10c:	2b01      	cmp	r3, #1
 800d10e:	d10c      	bne.n	800d12a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d112:	2b00      	cmp	r3, #0
 800d114:	d104      	bne.n	800d120 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d116:	2100      	movs	r1, #0
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	f000 f949 	bl	800d3b0 <USB_SetDevSpeed>
 800d11e:	e008      	b.n	800d132 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d120:	2101      	movs	r1, #1
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f000 f944 	bl	800d3b0 <USB_SetDevSpeed>
 800d128:	e003      	b.n	800d132 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d12a:	2103      	movs	r1, #3
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f000 f93f 	bl	800d3b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d132:	2110      	movs	r1, #16
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f000 f8f3 	bl	800d320 <USB_FlushTxFifo>
 800d13a:	4603      	mov	r3, r0
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d001      	beq.n	800d144 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800d140:	2301      	movs	r3, #1
 800d142:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f000 f911 	bl	800d36c <USB_FlushRxFifo>
 800d14a:	4603      	mov	r3, r0
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d001      	beq.n	800d154 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800d150:	2301      	movs	r3, #1
 800d152:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d15a:	461a      	mov	r2, r3
 800d15c:	2300      	movs	r3, #0
 800d15e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d166:	461a      	mov	r2, r3
 800d168:	2300      	movs	r3, #0
 800d16a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d172:	461a      	mov	r2, r3
 800d174:	2300      	movs	r3, #0
 800d176:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d178:	2300      	movs	r3, #0
 800d17a:	613b      	str	r3, [r7, #16]
 800d17c:	e043      	b.n	800d206 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d17e:	693b      	ldr	r3, [r7, #16]
 800d180:	015a      	lsls	r2, r3, #5
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	4413      	add	r3, r2
 800d186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d190:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d194:	d118      	bne.n	800d1c8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800d196:	693b      	ldr	r3, [r7, #16]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d10a      	bne.n	800d1b2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d19c:	693b      	ldr	r3, [r7, #16]
 800d19e:	015a      	lsls	r2, r3, #5
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	4413      	add	r3, r2
 800d1a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1a8:	461a      	mov	r2, r3
 800d1aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d1ae:	6013      	str	r3, [r2, #0]
 800d1b0:	e013      	b.n	800d1da <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	015a      	lsls	r2, r3, #5
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	4413      	add	r3, r2
 800d1ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1be:	461a      	mov	r2, r3
 800d1c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d1c4:	6013      	str	r3, [r2, #0]
 800d1c6:	e008      	b.n	800d1da <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d1c8:	693b      	ldr	r3, [r7, #16]
 800d1ca:	015a      	lsls	r2, r3, #5
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	4413      	add	r3, r2
 800d1d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1d4:	461a      	mov	r2, r3
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	015a      	lsls	r2, r3, #5
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	4413      	add	r3, r2
 800d1e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1e6:	461a      	mov	r2, r3
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	015a      	lsls	r2, r3, #5
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	4413      	add	r3, r2
 800d1f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1f8:	461a      	mov	r2, r3
 800d1fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d1fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	3301      	adds	r3, #1
 800d204:	613b      	str	r3, [r7, #16]
 800d206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d208:	693a      	ldr	r2, [r7, #16]
 800d20a:	429a      	cmp	r2, r3
 800d20c:	d3b7      	bcc.n	800d17e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d20e:	2300      	movs	r3, #0
 800d210:	613b      	str	r3, [r7, #16]
 800d212:	e043      	b.n	800d29c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d214:	693b      	ldr	r3, [r7, #16]
 800d216:	015a      	lsls	r2, r3, #5
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	4413      	add	r3, r2
 800d21c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d226:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d22a:	d118      	bne.n	800d25e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d10a      	bne.n	800d248 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d232:	693b      	ldr	r3, [r7, #16]
 800d234:	015a      	lsls	r2, r3, #5
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	4413      	add	r3, r2
 800d23a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d23e:	461a      	mov	r2, r3
 800d240:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d244:	6013      	str	r3, [r2, #0]
 800d246:	e013      	b.n	800d270 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d248:	693b      	ldr	r3, [r7, #16]
 800d24a:	015a      	lsls	r2, r3, #5
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	4413      	add	r3, r2
 800d250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d254:	461a      	mov	r2, r3
 800d256:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d25a:	6013      	str	r3, [r2, #0]
 800d25c:	e008      	b.n	800d270 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d25e:	693b      	ldr	r3, [r7, #16]
 800d260:	015a      	lsls	r2, r3, #5
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	4413      	add	r3, r2
 800d266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d26a:	461a      	mov	r2, r3
 800d26c:	2300      	movs	r3, #0
 800d26e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d270:	693b      	ldr	r3, [r7, #16]
 800d272:	015a      	lsls	r2, r3, #5
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	4413      	add	r3, r2
 800d278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d27c:	461a      	mov	r2, r3
 800d27e:	2300      	movs	r3, #0
 800d280:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d282:	693b      	ldr	r3, [r7, #16]
 800d284:	015a      	lsls	r2, r3, #5
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	4413      	add	r3, r2
 800d28a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d28e:	461a      	mov	r2, r3
 800d290:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d294:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	3301      	adds	r3, #1
 800d29a:	613b      	str	r3, [r7, #16]
 800d29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d29e:	693a      	ldr	r2, [r7, #16]
 800d2a0:	429a      	cmp	r2, r3
 800d2a2:	d3b7      	bcc.n	800d214 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2aa:	691b      	ldr	r3, [r3, #16]
 800d2ac:	68fa      	ldr	r2, [r7, #12]
 800d2ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d2b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d2b6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d2c4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d105      	bne.n	800d2d8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	699b      	ldr	r3, [r3, #24]
 800d2d0:	f043 0210 	orr.w	r2, r3, #16
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	699a      	ldr	r2, [r3, #24]
 800d2dc:	4b0e      	ldr	r3, [pc, #56]	; (800d318 <USB_DevInit+0x2b4>)
 800d2de:	4313      	orrs	r3, r2
 800d2e0:	687a      	ldr	r2, [r7, #4]
 800d2e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d2e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d005      	beq.n	800d2f6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	699b      	ldr	r3, [r3, #24]
 800d2ee:	f043 0208 	orr.w	r2, r3, #8
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d2f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2f8:	2b01      	cmp	r3, #1
 800d2fa:	d105      	bne.n	800d308 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	699a      	ldr	r2, [r3, #24]
 800d300:	4b06      	ldr	r3, [pc, #24]	; (800d31c <USB_DevInit+0x2b8>)
 800d302:	4313      	orrs	r3, r2
 800d304:	687a      	ldr	r2, [r7, #4]
 800d306:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d308:	7dfb      	ldrb	r3, [r7, #23]
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	3718      	adds	r7, #24
 800d30e:	46bd      	mov	sp, r7
 800d310:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d314:	b004      	add	sp, #16
 800d316:	4770      	bx	lr
 800d318:	803c3800 	.word	0x803c3800
 800d31c:	40000004 	.word	0x40000004

0800d320 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d320:	b480      	push	{r7}
 800d322:	b085      	sub	sp, #20
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
 800d328:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800d32a:	2300      	movs	r3, #0
 800d32c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	019b      	lsls	r3, r3, #6
 800d332:	f043 0220 	orr.w	r2, r3, #32
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	3301      	adds	r3, #1
 800d33e:	60fb      	str	r3, [r7, #12]
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	4a09      	ldr	r2, [pc, #36]	; (800d368 <USB_FlushTxFifo+0x48>)
 800d344:	4293      	cmp	r3, r2
 800d346:	d901      	bls.n	800d34c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800d348:	2303      	movs	r3, #3
 800d34a:	e006      	b.n	800d35a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	691b      	ldr	r3, [r3, #16]
 800d350:	f003 0320 	and.w	r3, r3, #32
 800d354:	2b20      	cmp	r3, #32
 800d356:	d0f0      	beq.n	800d33a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d358:	2300      	movs	r3, #0
}
 800d35a:	4618      	mov	r0, r3
 800d35c:	3714      	adds	r7, #20
 800d35e:	46bd      	mov	sp, r7
 800d360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d364:	4770      	bx	lr
 800d366:	bf00      	nop
 800d368:	00030d40 	.word	0x00030d40

0800d36c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d36c:	b480      	push	{r7}
 800d36e:	b085      	sub	sp, #20
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800d374:	2300      	movs	r3, #0
 800d376:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2210      	movs	r2, #16
 800d37c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	3301      	adds	r3, #1
 800d382:	60fb      	str	r3, [r7, #12]
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	4a09      	ldr	r2, [pc, #36]	; (800d3ac <USB_FlushRxFifo+0x40>)
 800d388:	4293      	cmp	r3, r2
 800d38a:	d901      	bls.n	800d390 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800d38c:	2303      	movs	r3, #3
 800d38e:	e006      	b.n	800d39e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	691b      	ldr	r3, [r3, #16]
 800d394:	f003 0310 	and.w	r3, r3, #16
 800d398:	2b10      	cmp	r3, #16
 800d39a:	d0f0      	beq.n	800d37e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d39c:	2300      	movs	r3, #0
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	3714      	adds	r7, #20
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a8:	4770      	bx	lr
 800d3aa:	bf00      	nop
 800d3ac:	00030d40 	.word	0x00030d40

0800d3b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d3b0:	b480      	push	{r7}
 800d3b2:	b085      	sub	sp, #20
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
 800d3b8:	460b      	mov	r3, r1
 800d3ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3c6:	681a      	ldr	r2, [r3, #0]
 800d3c8:	78fb      	ldrb	r3, [r7, #3]
 800d3ca:	68f9      	ldr	r1, [r7, #12]
 800d3cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d3d0:	4313      	orrs	r3, r2
 800d3d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d3d4:	2300      	movs	r3, #0
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	3714      	adds	r7, #20
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e0:	4770      	bx	lr

0800d3e2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d3e2:	b480      	push	{r7}
 800d3e4:	b087      	sub	sp, #28
 800d3e6:	af00      	add	r7, sp, #0
 800d3e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d3ee:	693b      	ldr	r3, [r7, #16]
 800d3f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3f4:	689b      	ldr	r3, [r3, #8]
 800d3f6:	f003 0306 	and.w	r3, r3, #6
 800d3fa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d102      	bne.n	800d408 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800d402:	2300      	movs	r3, #0
 800d404:	75fb      	strb	r3, [r7, #23]
 800d406:	e00a      	b.n	800d41e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2b02      	cmp	r3, #2
 800d40c:	d002      	beq.n	800d414 <USB_GetDevSpeed+0x32>
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	2b06      	cmp	r3, #6
 800d412:	d102      	bne.n	800d41a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d414:	2302      	movs	r3, #2
 800d416:	75fb      	strb	r3, [r7, #23]
 800d418:	e001      	b.n	800d41e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d41a:	230f      	movs	r3, #15
 800d41c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d41e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d420:	4618      	mov	r0, r3
 800d422:	371c      	adds	r7, #28
 800d424:	46bd      	mov	sp, r7
 800d426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42a:	4770      	bx	lr

0800d42c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d42c:	b480      	push	{r7}
 800d42e:	b085      	sub	sp, #20
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
 800d434:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	781b      	ldrb	r3, [r3, #0]
 800d43e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	785b      	ldrb	r3, [r3, #1]
 800d444:	2b01      	cmp	r3, #1
 800d446:	d139      	bne.n	800d4bc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d44e:	69da      	ldr	r2, [r3, #28]
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	781b      	ldrb	r3, [r3, #0]
 800d454:	f003 030f 	and.w	r3, r3, #15
 800d458:	2101      	movs	r1, #1
 800d45a:	fa01 f303 	lsl.w	r3, r1, r3
 800d45e:	b29b      	uxth	r3, r3
 800d460:	68f9      	ldr	r1, [r7, #12]
 800d462:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d466:	4313      	orrs	r3, r2
 800d468:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	015a      	lsls	r2, r3, #5
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	4413      	add	r3, r2
 800d472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d153      	bne.n	800d528 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	015a      	lsls	r2, r3, #5
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	4413      	add	r3, r2
 800d488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d48c:	681a      	ldr	r2, [r3, #0]
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	689b      	ldr	r3, [r3, #8]
 800d492:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	78db      	ldrb	r3, [r3, #3]
 800d49a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d49c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	059b      	lsls	r3, r3, #22
 800d4a2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d4a4:	431a      	orrs	r2, r3
 800d4a6:	68bb      	ldr	r3, [r7, #8]
 800d4a8:	0159      	lsls	r1, r3, #5
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	440b      	add	r3, r1
 800d4ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4b2:	4619      	mov	r1, r3
 800d4b4:	4b20      	ldr	r3, [pc, #128]	; (800d538 <USB_ActivateEndpoint+0x10c>)
 800d4b6:	4313      	orrs	r3, r2
 800d4b8:	600b      	str	r3, [r1, #0]
 800d4ba:	e035      	b.n	800d528 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4c2:	69da      	ldr	r2, [r3, #28]
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	781b      	ldrb	r3, [r3, #0]
 800d4c8:	f003 030f 	and.w	r3, r3, #15
 800d4cc:	2101      	movs	r1, #1
 800d4ce:	fa01 f303 	lsl.w	r3, r1, r3
 800d4d2:	041b      	lsls	r3, r3, #16
 800d4d4:	68f9      	ldr	r1, [r7, #12]
 800d4d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d4da:	4313      	orrs	r3, r2
 800d4dc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	015a      	lsls	r2, r3, #5
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	4413      	add	r3, r2
 800d4e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d119      	bne.n	800d528 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	015a      	lsls	r2, r3, #5
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	4413      	add	r3, r2
 800d4fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d500:	681a      	ldr	r2, [r3, #0]
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	689b      	ldr	r3, [r3, #8]
 800d506:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	78db      	ldrb	r3, [r3, #3]
 800d50e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d510:	430b      	orrs	r3, r1
 800d512:	431a      	orrs	r2, r3
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	0159      	lsls	r1, r3, #5
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	440b      	add	r3, r1
 800d51c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d520:	4619      	mov	r1, r3
 800d522:	4b05      	ldr	r3, [pc, #20]	; (800d538 <USB_ActivateEndpoint+0x10c>)
 800d524:	4313      	orrs	r3, r2
 800d526:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d528:	2300      	movs	r3, #0
}
 800d52a:	4618      	mov	r0, r3
 800d52c:	3714      	adds	r7, #20
 800d52e:	46bd      	mov	sp, r7
 800d530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d534:	4770      	bx	lr
 800d536:	bf00      	nop
 800d538:	10008000 	.word	0x10008000

0800d53c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d53c:	b480      	push	{r7}
 800d53e:	b085      	sub	sp, #20
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
 800d544:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	781b      	ldrb	r3, [r3, #0]
 800d54e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	785b      	ldrb	r3, [r3, #1]
 800d554:	2b01      	cmp	r3, #1
 800d556:	d161      	bne.n	800d61c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	015a      	lsls	r2, r3, #5
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	4413      	add	r3, r2
 800d560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d56a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d56e:	d11f      	bne.n	800d5b0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d570:	68bb      	ldr	r3, [r7, #8]
 800d572:	015a      	lsls	r2, r3, #5
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	4413      	add	r3, r2
 800d578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	68ba      	ldr	r2, [r7, #8]
 800d580:	0151      	lsls	r1, r2, #5
 800d582:	68fa      	ldr	r2, [r7, #12]
 800d584:	440a      	add	r2, r1
 800d586:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d58a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d58e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	015a      	lsls	r2, r3, #5
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	4413      	add	r3, r2
 800d598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	68ba      	ldr	r2, [r7, #8]
 800d5a0:	0151      	lsls	r1, r2, #5
 800d5a2:	68fa      	ldr	r2, [r7, #12]
 800d5a4:	440a      	add	r2, r1
 800d5a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d5ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	781b      	ldrb	r3, [r3, #0]
 800d5bc:	f003 030f 	and.w	r3, r3, #15
 800d5c0:	2101      	movs	r1, #1
 800d5c2:	fa01 f303 	lsl.w	r3, r1, r3
 800d5c6:	b29b      	uxth	r3, r3
 800d5c8:	43db      	mvns	r3, r3
 800d5ca:	68f9      	ldr	r1, [r7, #12]
 800d5cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d5d0:	4013      	ands	r3, r2
 800d5d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5da:	69da      	ldr	r2, [r3, #28]
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	781b      	ldrb	r3, [r3, #0]
 800d5e0:	f003 030f 	and.w	r3, r3, #15
 800d5e4:	2101      	movs	r1, #1
 800d5e6:	fa01 f303 	lsl.w	r3, r1, r3
 800d5ea:	b29b      	uxth	r3, r3
 800d5ec:	43db      	mvns	r3, r3
 800d5ee:	68f9      	ldr	r1, [r7, #12]
 800d5f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d5f4:	4013      	ands	r3, r2
 800d5f6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	015a      	lsls	r2, r3, #5
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	4413      	add	r3, r2
 800d600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d604:	681a      	ldr	r2, [r3, #0]
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	0159      	lsls	r1, r3, #5
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	440b      	add	r3, r1
 800d60e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d612:	4619      	mov	r1, r3
 800d614:	4b35      	ldr	r3, [pc, #212]	; (800d6ec <USB_DeactivateEndpoint+0x1b0>)
 800d616:	4013      	ands	r3, r2
 800d618:	600b      	str	r3, [r1, #0]
 800d61a:	e060      	b.n	800d6de <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	015a      	lsls	r2, r3, #5
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	4413      	add	r3, r2
 800d624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d62e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d632:	d11f      	bne.n	800d674 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	015a      	lsls	r2, r3, #5
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	4413      	add	r3, r2
 800d63c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	68ba      	ldr	r2, [r7, #8]
 800d644:	0151      	lsls	r1, r2, #5
 800d646:	68fa      	ldr	r2, [r7, #12]
 800d648:	440a      	add	r2, r1
 800d64a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d64e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d652:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	015a      	lsls	r2, r3, #5
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	4413      	add	r3, r2
 800d65c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	68ba      	ldr	r2, [r7, #8]
 800d664:	0151      	lsls	r1, r2, #5
 800d666:	68fa      	ldr	r2, [r7, #12]
 800d668:	440a      	add	r2, r1
 800d66a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d66e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d672:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d67a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	781b      	ldrb	r3, [r3, #0]
 800d680:	f003 030f 	and.w	r3, r3, #15
 800d684:	2101      	movs	r1, #1
 800d686:	fa01 f303 	lsl.w	r3, r1, r3
 800d68a:	041b      	lsls	r3, r3, #16
 800d68c:	43db      	mvns	r3, r3
 800d68e:	68f9      	ldr	r1, [r7, #12]
 800d690:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d694:	4013      	ands	r3, r2
 800d696:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d69e:	69da      	ldr	r2, [r3, #28]
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	781b      	ldrb	r3, [r3, #0]
 800d6a4:	f003 030f 	and.w	r3, r3, #15
 800d6a8:	2101      	movs	r1, #1
 800d6aa:	fa01 f303 	lsl.w	r3, r1, r3
 800d6ae:	041b      	lsls	r3, r3, #16
 800d6b0:	43db      	mvns	r3, r3
 800d6b2:	68f9      	ldr	r1, [r7, #12]
 800d6b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d6b8:	4013      	ands	r3, r2
 800d6ba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	015a      	lsls	r2, r3, #5
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	4413      	add	r3, r2
 800d6c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6c8:	681a      	ldr	r2, [r3, #0]
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	0159      	lsls	r1, r3, #5
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	440b      	add	r3, r1
 800d6d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6d6:	4619      	mov	r1, r3
 800d6d8:	4b05      	ldr	r3, [pc, #20]	; (800d6f0 <USB_DeactivateEndpoint+0x1b4>)
 800d6da:	4013      	ands	r3, r2
 800d6dc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d6de:	2300      	movs	r3, #0
}
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	3714      	adds	r7, #20
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ea:	4770      	bx	lr
 800d6ec:	ec337800 	.word	0xec337800
 800d6f0:	eff37800 	.word	0xeff37800

0800d6f4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b08a      	sub	sp, #40	; 0x28
 800d6f8:	af02      	add	r7, sp, #8
 800d6fa:	60f8      	str	r0, [r7, #12]
 800d6fc:	60b9      	str	r1, [r7, #8]
 800d6fe:	4613      	mov	r3, r2
 800d700:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	781b      	ldrb	r3, [r3, #0]
 800d70a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	785b      	ldrb	r3, [r3, #1]
 800d710:	2b01      	cmp	r3, #1
 800d712:	f040 8163 	bne.w	800d9dc <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	695b      	ldr	r3, [r3, #20]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d132      	bne.n	800d784 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d71e:	69bb      	ldr	r3, [r7, #24]
 800d720:	015a      	lsls	r2, r3, #5
 800d722:	69fb      	ldr	r3, [r7, #28]
 800d724:	4413      	add	r3, r2
 800d726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d72a:	691a      	ldr	r2, [r3, #16]
 800d72c:	69bb      	ldr	r3, [r7, #24]
 800d72e:	0159      	lsls	r1, r3, #5
 800d730:	69fb      	ldr	r3, [r7, #28]
 800d732:	440b      	add	r3, r1
 800d734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d738:	4619      	mov	r1, r3
 800d73a:	4ba5      	ldr	r3, [pc, #660]	; (800d9d0 <USB_EPStartXfer+0x2dc>)
 800d73c:	4013      	ands	r3, r2
 800d73e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d740:	69bb      	ldr	r3, [r7, #24]
 800d742:	015a      	lsls	r2, r3, #5
 800d744:	69fb      	ldr	r3, [r7, #28]
 800d746:	4413      	add	r3, r2
 800d748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d74c:	691b      	ldr	r3, [r3, #16]
 800d74e:	69ba      	ldr	r2, [r7, #24]
 800d750:	0151      	lsls	r1, r2, #5
 800d752:	69fa      	ldr	r2, [r7, #28]
 800d754:	440a      	add	r2, r1
 800d756:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d75a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d75e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d760:	69bb      	ldr	r3, [r7, #24]
 800d762:	015a      	lsls	r2, r3, #5
 800d764:	69fb      	ldr	r3, [r7, #28]
 800d766:	4413      	add	r3, r2
 800d768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d76c:	691a      	ldr	r2, [r3, #16]
 800d76e:	69bb      	ldr	r3, [r7, #24]
 800d770:	0159      	lsls	r1, r3, #5
 800d772:	69fb      	ldr	r3, [r7, #28]
 800d774:	440b      	add	r3, r1
 800d776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d77a:	4619      	mov	r1, r3
 800d77c:	4b95      	ldr	r3, [pc, #596]	; (800d9d4 <USB_EPStartXfer+0x2e0>)
 800d77e:	4013      	ands	r3, r2
 800d780:	610b      	str	r3, [r1, #16]
 800d782:	e074      	b.n	800d86e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d784:	69bb      	ldr	r3, [r7, #24]
 800d786:	015a      	lsls	r2, r3, #5
 800d788:	69fb      	ldr	r3, [r7, #28]
 800d78a:	4413      	add	r3, r2
 800d78c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d790:	691a      	ldr	r2, [r3, #16]
 800d792:	69bb      	ldr	r3, [r7, #24]
 800d794:	0159      	lsls	r1, r3, #5
 800d796:	69fb      	ldr	r3, [r7, #28]
 800d798:	440b      	add	r3, r1
 800d79a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d79e:	4619      	mov	r1, r3
 800d7a0:	4b8c      	ldr	r3, [pc, #560]	; (800d9d4 <USB_EPStartXfer+0x2e0>)
 800d7a2:	4013      	ands	r3, r2
 800d7a4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d7a6:	69bb      	ldr	r3, [r7, #24]
 800d7a8:	015a      	lsls	r2, r3, #5
 800d7aa:	69fb      	ldr	r3, [r7, #28]
 800d7ac:	4413      	add	r3, r2
 800d7ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7b2:	691a      	ldr	r2, [r3, #16]
 800d7b4:	69bb      	ldr	r3, [r7, #24]
 800d7b6:	0159      	lsls	r1, r3, #5
 800d7b8:	69fb      	ldr	r3, [r7, #28]
 800d7ba:	440b      	add	r3, r1
 800d7bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7c0:	4619      	mov	r1, r3
 800d7c2:	4b83      	ldr	r3, [pc, #524]	; (800d9d0 <USB_EPStartXfer+0x2dc>)
 800d7c4:	4013      	ands	r3, r2
 800d7c6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d7c8:	69bb      	ldr	r3, [r7, #24]
 800d7ca:	015a      	lsls	r2, r3, #5
 800d7cc:	69fb      	ldr	r3, [r7, #28]
 800d7ce:	4413      	add	r3, r2
 800d7d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7d4:	691a      	ldr	r2, [r3, #16]
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	6959      	ldr	r1, [r3, #20]
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	689b      	ldr	r3, [r3, #8]
 800d7de:	440b      	add	r3, r1
 800d7e0:	1e59      	subs	r1, r3, #1
 800d7e2:	68bb      	ldr	r3, [r7, #8]
 800d7e4:	689b      	ldr	r3, [r3, #8]
 800d7e6:	fbb1 f3f3 	udiv	r3, r1, r3
 800d7ea:	04d9      	lsls	r1, r3, #19
 800d7ec:	4b7a      	ldr	r3, [pc, #488]	; (800d9d8 <USB_EPStartXfer+0x2e4>)
 800d7ee:	400b      	ands	r3, r1
 800d7f0:	69b9      	ldr	r1, [r7, #24]
 800d7f2:	0148      	lsls	r0, r1, #5
 800d7f4:	69f9      	ldr	r1, [r7, #28]
 800d7f6:	4401      	add	r1, r0
 800d7f8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d7fc:	4313      	orrs	r3, r2
 800d7fe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d800:	69bb      	ldr	r3, [r7, #24]
 800d802:	015a      	lsls	r2, r3, #5
 800d804:	69fb      	ldr	r3, [r7, #28]
 800d806:	4413      	add	r3, r2
 800d808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d80c:	691a      	ldr	r2, [r3, #16]
 800d80e:	68bb      	ldr	r3, [r7, #8]
 800d810:	695b      	ldr	r3, [r3, #20]
 800d812:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d816:	69b9      	ldr	r1, [r7, #24]
 800d818:	0148      	lsls	r0, r1, #5
 800d81a:	69f9      	ldr	r1, [r7, #28]
 800d81c:	4401      	add	r1, r0
 800d81e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d822:	4313      	orrs	r3, r2
 800d824:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d826:	68bb      	ldr	r3, [r7, #8]
 800d828:	78db      	ldrb	r3, [r3, #3]
 800d82a:	2b01      	cmp	r3, #1
 800d82c:	d11f      	bne.n	800d86e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d82e:	69bb      	ldr	r3, [r7, #24]
 800d830:	015a      	lsls	r2, r3, #5
 800d832:	69fb      	ldr	r3, [r7, #28]
 800d834:	4413      	add	r3, r2
 800d836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d83a:	691b      	ldr	r3, [r3, #16]
 800d83c:	69ba      	ldr	r2, [r7, #24]
 800d83e:	0151      	lsls	r1, r2, #5
 800d840:	69fa      	ldr	r2, [r7, #28]
 800d842:	440a      	add	r2, r1
 800d844:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d848:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d84c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d84e:	69bb      	ldr	r3, [r7, #24]
 800d850:	015a      	lsls	r2, r3, #5
 800d852:	69fb      	ldr	r3, [r7, #28]
 800d854:	4413      	add	r3, r2
 800d856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d85a:	691b      	ldr	r3, [r3, #16]
 800d85c:	69ba      	ldr	r2, [r7, #24]
 800d85e:	0151      	lsls	r1, r2, #5
 800d860:	69fa      	ldr	r2, [r7, #28]
 800d862:	440a      	add	r2, r1
 800d864:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d868:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d86c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800d86e:	79fb      	ldrb	r3, [r7, #7]
 800d870:	2b01      	cmp	r3, #1
 800d872:	d14b      	bne.n	800d90c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	691b      	ldr	r3, [r3, #16]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d009      	beq.n	800d890 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d87c:	69bb      	ldr	r3, [r7, #24]
 800d87e:	015a      	lsls	r2, r3, #5
 800d880:	69fb      	ldr	r3, [r7, #28]
 800d882:	4413      	add	r3, r2
 800d884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d888:	461a      	mov	r2, r3
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	691b      	ldr	r3, [r3, #16]
 800d88e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	78db      	ldrb	r3, [r3, #3]
 800d894:	2b01      	cmp	r3, #1
 800d896:	d128      	bne.n	800d8ea <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d898:	69fb      	ldr	r3, [r7, #28]
 800d89a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d89e:	689b      	ldr	r3, [r3, #8]
 800d8a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d110      	bne.n	800d8ca <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d8a8:	69bb      	ldr	r3, [r7, #24]
 800d8aa:	015a      	lsls	r2, r3, #5
 800d8ac:	69fb      	ldr	r3, [r7, #28]
 800d8ae:	4413      	add	r3, r2
 800d8b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	69ba      	ldr	r2, [r7, #24]
 800d8b8:	0151      	lsls	r1, r2, #5
 800d8ba:	69fa      	ldr	r2, [r7, #28]
 800d8bc:	440a      	add	r2, r1
 800d8be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d8c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d8c6:	6013      	str	r3, [r2, #0]
 800d8c8:	e00f      	b.n	800d8ea <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d8ca:	69bb      	ldr	r3, [r7, #24]
 800d8cc:	015a      	lsls	r2, r3, #5
 800d8ce:	69fb      	ldr	r3, [r7, #28]
 800d8d0:	4413      	add	r3, r2
 800d8d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	69ba      	ldr	r2, [r7, #24]
 800d8da:	0151      	lsls	r1, r2, #5
 800d8dc:	69fa      	ldr	r2, [r7, #28]
 800d8de:	440a      	add	r2, r1
 800d8e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d8e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d8e8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d8ea:	69bb      	ldr	r3, [r7, #24]
 800d8ec:	015a      	lsls	r2, r3, #5
 800d8ee:	69fb      	ldr	r3, [r7, #28]
 800d8f0:	4413      	add	r3, r2
 800d8f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	69ba      	ldr	r2, [r7, #24]
 800d8fa:	0151      	lsls	r1, r2, #5
 800d8fc:	69fa      	ldr	r2, [r7, #28]
 800d8fe:	440a      	add	r2, r1
 800d900:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d904:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d908:	6013      	str	r3, [r2, #0]
 800d90a:	e133      	b.n	800db74 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d90c:	69bb      	ldr	r3, [r7, #24]
 800d90e:	015a      	lsls	r2, r3, #5
 800d910:	69fb      	ldr	r3, [r7, #28]
 800d912:	4413      	add	r3, r2
 800d914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	69ba      	ldr	r2, [r7, #24]
 800d91c:	0151      	lsls	r1, r2, #5
 800d91e:	69fa      	ldr	r2, [r7, #28]
 800d920:	440a      	add	r2, r1
 800d922:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d926:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d92a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d92c:	68bb      	ldr	r3, [r7, #8]
 800d92e:	78db      	ldrb	r3, [r3, #3]
 800d930:	2b01      	cmp	r3, #1
 800d932:	d015      	beq.n	800d960 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	695b      	ldr	r3, [r3, #20]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	f000 811b 	beq.w	800db74 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d93e:	69fb      	ldr	r3, [r7, #28]
 800d940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d944:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d946:	68bb      	ldr	r3, [r7, #8]
 800d948:	781b      	ldrb	r3, [r3, #0]
 800d94a:	f003 030f 	and.w	r3, r3, #15
 800d94e:	2101      	movs	r1, #1
 800d950:	fa01 f303 	lsl.w	r3, r1, r3
 800d954:	69f9      	ldr	r1, [r7, #28]
 800d956:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d95a:	4313      	orrs	r3, r2
 800d95c:	634b      	str	r3, [r1, #52]	; 0x34
 800d95e:	e109      	b.n	800db74 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d960:	69fb      	ldr	r3, [r7, #28]
 800d962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d966:	689b      	ldr	r3, [r3, #8]
 800d968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d110      	bne.n	800d992 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d970:	69bb      	ldr	r3, [r7, #24]
 800d972:	015a      	lsls	r2, r3, #5
 800d974:	69fb      	ldr	r3, [r7, #28]
 800d976:	4413      	add	r3, r2
 800d978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	69ba      	ldr	r2, [r7, #24]
 800d980:	0151      	lsls	r1, r2, #5
 800d982:	69fa      	ldr	r2, [r7, #28]
 800d984:	440a      	add	r2, r1
 800d986:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d98a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d98e:	6013      	str	r3, [r2, #0]
 800d990:	e00f      	b.n	800d9b2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d992:	69bb      	ldr	r3, [r7, #24]
 800d994:	015a      	lsls	r2, r3, #5
 800d996:	69fb      	ldr	r3, [r7, #28]
 800d998:	4413      	add	r3, r2
 800d99a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	69ba      	ldr	r2, [r7, #24]
 800d9a2:	0151      	lsls	r1, r2, #5
 800d9a4:	69fa      	ldr	r2, [r7, #28]
 800d9a6:	440a      	add	r2, r1
 800d9a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d9ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d9b0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	68d9      	ldr	r1, [r3, #12]
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	781a      	ldrb	r2, [r3, #0]
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	695b      	ldr	r3, [r3, #20]
 800d9be:	b298      	uxth	r0, r3
 800d9c0:	79fb      	ldrb	r3, [r7, #7]
 800d9c2:	9300      	str	r3, [sp, #0]
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	68f8      	ldr	r0, [r7, #12]
 800d9c8:	f000 fa38 	bl	800de3c <USB_WritePacket>
 800d9cc:	e0d2      	b.n	800db74 <USB_EPStartXfer+0x480>
 800d9ce:	bf00      	nop
 800d9d0:	e007ffff 	.word	0xe007ffff
 800d9d4:	fff80000 	.word	0xfff80000
 800d9d8:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d9dc:	69bb      	ldr	r3, [r7, #24]
 800d9de:	015a      	lsls	r2, r3, #5
 800d9e0:	69fb      	ldr	r3, [r7, #28]
 800d9e2:	4413      	add	r3, r2
 800d9e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9e8:	691a      	ldr	r2, [r3, #16]
 800d9ea:	69bb      	ldr	r3, [r7, #24]
 800d9ec:	0159      	lsls	r1, r3, #5
 800d9ee:	69fb      	ldr	r3, [r7, #28]
 800d9f0:	440b      	add	r3, r1
 800d9f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9f6:	4619      	mov	r1, r3
 800d9f8:	4b61      	ldr	r3, [pc, #388]	; (800db80 <USB_EPStartXfer+0x48c>)
 800d9fa:	4013      	ands	r3, r2
 800d9fc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d9fe:	69bb      	ldr	r3, [r7, #24]
 800da00:	015a      	lsls	r2, r3, #5
 800da02:	69fb      	ldr	r3, [r7, #28]
 800da04:	4413      	add	r3, r2
 800da06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da0a:	691a      	ldr	r2, [r3, #16]
 800da0c:	69bb      	ldr	r3, [r7, #24]
 800da0e:	0159      	lsls	r1, r3, #5
 800da10:	69fb      	ldr	r3, [r7, #28]
 800da12:	440b      	add	r3, r1
 800da14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da18:	4619      	mov	r1, r3
 800da1a:	4b5a      	ldr	r3, [pc, #360]	; (800db84 <USB_EPStartXfer+0x490>)
 800da1c:	4013      	ands	r3, r2
 800da1e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800da20:	68bb      	ldr	r3, [r7, #8]
 800da22:	695b      	ldr	r3, [r3, #20]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d123      	bne.n	800da70 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800da28:	69bb      	ldr	r3, [r7, #24]
 800da2a:	015a      	lsls	r2, r3, #5
 800da2c:	69fb      	ldr	r3, [r7, #28]
 800da2e:	4413      	add	r3, r2
 800da30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da34:	691a      	ldr	r2, [r3, #16]
 800da36:	68bb      	ldr	r3, [r7, #8]
 800da38:	689b      	ldr	r3, [r3, #8]
 800da3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800da3e:	69b9      	ldr	r1, [r7, #24]
 800da40:	0148      	lsls	r0, r1, #5
 800da42:	69f9      	ldr	r1, [r7, #28]
 800da44:	4401      	add	r1, r0
 800da46:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800da4a:	4313      	orrs	r3, r2
 800da4c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800da4e:	69bb      	ldr	r3, [r7, #24]
 800da50:	015a      	lsls	r2, r3, #5
 800da52:	69fb      	ldr	r3, [r7, #28]
 800da54:	4413      	add	r3, r2
 800da56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da5a:	691b      	ldr	r3, [r3, #16]
 800da5c:	69ba      	ldr	r2, [r7, #24]
 800da5e:	0151      	lsls	r1, r2, #5
 800da60:	69fa      	ldr	r2, [r7, #28]
 800da62:	440a      	add	r2, r1
 800da64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800da6c:	6113      	str	r3, [r2, #16]
 800da6e:	e033      	b.n	800dad8 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	695a      	ldr	r2, [r3, #20]
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	689b      	ldr	r3, [r3, #8]
 800da78:	4413      	add	r3, r2
 800da7a:	1e5a      	subs	r2, r3, #1
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	689b      	ldr	r3, [r3, #8]
 800da80:	fbb2 f3f3 	udiv	r3, r2, r3
 800da84:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800da86:	69bb      	ldr	r3, [r7, #24]
 800da88:	015a      	lsls	r2, r3, #5
 800da8a:	69fb      	ldr	r3, [r7, #28]
 800da8c:	4413      	add	r3, r2
 800da8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da92:	691a      	ldr	r2, [r3, #16]
 800da94:	8afb      	ldrh	r3, [r7, #22]
 800da96:	04d9      	lsls	r1, r3, #19
 800da98:	4b3b      	ldr	r3, [pc, #236]	; (800db88 <USB_EPStartXfer+0x494>)
 800da9a:	400b      	ands	r3, r1
 800da9c:	69b9      	ldr	r1, [r7, #24]
 800da9e:	0148      	lsls	r0, r1, #5
 800daa0:	69f9      	ldr	r1, [r7, #28]
 800daa2:	4401      	add	r1, r0
 800daa4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800daa8:	4313      	orrs	r3, r2
 800daaa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800daac:	69bb      	ldr	r3, [r7, #24]
 800daae:	015a      	lsls	r2, r3, #5
 800dab0:	69fb      	ldr	r3, [r7, #28]
 800dab2:	4413      	add	r3, r2
 800dab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dab8:	691a      	ldr	r2, [r3, #16]
 800daba:	68bb      	ldr	r3, [r7, #8]
 800dabc:	689b      	ldr	r3, [r3, #8]
 800dabe:	8af9      	ldrh	r1, [r7, #22]
 800dac0:	fb01 f303 	mul.w	r3, r1, r3
 800dac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dac8:	69b9      	ldr	r1, [r7, #24]
 800daca:	0148      	lsls	r0, r1, #5
 800dacc:	69f9      	ldr	r1, [r7, #28]
 800dace:	4401      	add	r1, r0
 800dad0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dad4:	4313      	orrs	r3, r2
 800dad6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800dad8:	79fb      	ldrb	r3, [r7, #7]
 800dada:	2b01      	cmp	r3, #1
 800dadc:	d10d      	bne.n	800dafa <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800dade:	68bb      	ldr	r3, [r7, #8]
 800dae0:	68db      	ldr	r3, [r3, #12]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d009      	beq.n	800dafa <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	68d9      	ldr	r1, [r3, #12]
 800daea:	69bb      	ldr	r3, [r7, #24]
 800daec:	015a      	lsls	r2, r3, #5
 800daee:	69fb      	ldr	r3, [r7, #28]
 800daf0:	4413      	add	r3, r2
 800daf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800daf6:	460a      	mov	r2, r1
 800daf8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	78db      	ldrb	r3, [r3, #3]
 800dafe:	2b01      	cmp	r3, #1
 800db00:	d128      	bne.n	800db54 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800db02:	69fb      	ldr	r3, [r7, #28]
 800db04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db08:	689b      	ldr	r3, [r3, #8]
 800db0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d110      	bne.n	800db34 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800db12:	69bb      	ldr	r3, [r7, #24]
 800db14:	015a      	lsls	r2, r3, #5
 800db16:	69fb      	ldr	r3, [r7, #28]
 800db18:	4413      	add	r3, r2
 800db1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	69ba      	ldr	r2, [r7, #24]
 800db22:	0151      	lsls	r1, r2, #5
 800db24:	69fa      	ldr	r2, [r7, #28]
 800db26:	440a      	add	r2, r1
 800db28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db2c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800db30:	6013      	str	r3, [r2, #0]
 800db32:	e00f      	b.n	800db54 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800db34:	69bb      	ldr	r3, [r7, #24]
 800db36:	015a      	lsls	r2, r3, #5
 800db38:	69fb      	ldr	r3, [r7, #28]
 800db3a:	4413      	add	r3, r2
 800db3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	69ba      	ldr	r2, [r7, #24]
 800db44:	0151      	lsls	r1, r2, #5
 800db46:	69fa      	ldr	r2, [r7, #28]
 800db48:	440a      	add	r2, r1
 800db4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800db52:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800db54:	69bb      	ldr	r3, [r7, #24]
 800db56:	015a      	lsls	r2, r3, #5
 800db58:	69fb      	ldr	r3, [r7, #28]
 800db5a:	4413      	add	r3, r2
 800db5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	69ba      	ldr	r2, [r7, #24]
 800db64:	0151      	lsls	r1, r2, #5
 800db66:	69fa      	ldr	r2, [r7, #28]
 800db68:	440a      	add	r2, r1
 800db6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800db72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800db74:	2300      	movs	r3, #0
}
 800db76:	4618      	mov	r0, r3
 800db78:	3720      	adds	r7, #32
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}
 800db7e:	bf00      	nop
 800db80:	fff80000 	.word	0xfff80000
 800db84:	e007ffff 	.word	0xe007ffff
 800db88:	1ff80000 	.word	0x1ff80000

0800db8c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800db8c:	b480      	push	{r7}
 800db8e:	b087      	sub	sp, #28
 800db90:	af00      	add	r7, sp, #0
 800db92:	60f8      	str	r0, [r7, #12]
 800db94:	60b9      	str	r1, [r7, #8]
 800db96:	4613      	mov	r3, r2
 800db98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800db9e:	68bb      	ldr	r3, [r7, #8]
 800dba0:	781b      	ldrb	r3, [r3, #0]
 800dba2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dba4:	68bb      	ldr	r3, [r7, #8]
 800dba6:	785b      	ldrb	r3, [r3, #1]
 800dba8:	2b01      	cmp	r3, #1
 800dbaa:	f040 80cd 	bne.w	800dd48 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	695b      	ldr	r3, [r3, #20]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d132      	bne.n	800dc1c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dbb6:	693b      	ldr	r3, [r7, #16]
 800dbb8:	015a      	lsls	r2, r3, #5
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	4413      	add	r3, r2
 800dbbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbc2:	691a      	ldr	r2, [r3, #16]
 800dbc4:	693b      	ldr	r3, [r7, #16]
 800dbc6:	0159      	lsls	r1, r3, #5
 800dbc8:	697b      	ldr	r3, [r7, #20]
 800dbca:	440b      	add	r3, r1
 800dbcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbd0:	4619      	mov	r1, r3
 800dbd2:	4b98      	ldr	r3, [pc, #608]	; (800de34 <USB_EP0StartXfer+0x2a8>)
 800dbd4:	4013      	ands	r3, r2
 800dbd6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	015a      	lsls	r2, r3, #5
 800dbdc:	697b      	ldr	r3, [r7, #20]
 800dbde:	4413      	add	r3, r2
 800dbe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbe4:	691b      	ldr	r3, [r3, #16]
 800dbe6:	693a      	ldr	r2, [r7, #16]
 800dbe8:	0151      	lsls	r1, r2, #5
 800dbea:	697a      	ldr	r2, [r7, #20]
 800dbec:	440a      	add	r2, r1
 800dbee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dbf2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dbf6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dbf8:	693b      	ldr	r3, [r7, #16]
 800dbfa:	015a      	lsls	r2, r3, #5
 800dbfc:	697b      	ldr	r3, [r7, #20]
 800dbfe:	4413      	add	r3, r2
 800dc00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc04:	691a      	ldr	r2, [r3, #16]
 800dc06:	693b      	ldr	r3, [r7, #16]
 800dc08:	0159      	lsls	r1, r3, #5
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	440b      	add	r3, r1
 800dc0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc12:	4619      	mov	r1, r3
 800dc14:	4b88      	ldr	r3, [pc, #544]	; (800de38 <USB_EP0StartXfer+0x2ac>)
 800dc16:	4013      	ands	r3, r2
 800dc18:	610b      	str	r3, [r1, #16]
 800dc1a:	e04e      	b.n	800dcba <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dc1c:	693b      	ldr	r3, [r7, #16]
 800dc1e:	015a      	lsls	r2, r3, #5
 800dc20:	697b      	ldr	r3, [r7, #20]
 800dc22:	4413      	add	r3, r2
 800dc24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc28:	691a      	ldr	r2, [r3, #16]
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	0159      	lsls	r1, r3, #5
 800dc2e:	697b      	ldr	r3, [r7, #20]
 800dc30:	440b      	add	r3, r1
 800dc32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc36:	4619      	mov	r1, r3
 800dc38:	4b7f      	ldr	r3, [pc, #508]	; (800de38 <USB_EP0StartXfer+0x2ac>)
 800dc3a:	4013      	ands	r3, r2
 800dc3c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dc3e:	693b      	ldr	r3, [r7, #16]
 800dc40:	015a      	lsls	r2, r3, #5
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	4413      	add	r3, r2
 800dc46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc4a:	691a      	ldr	r2, [r3, #16]
 800dc4c:	693b      	ldr	r3, [r7, #16]
 800dc4e:	0159      	lsls	r1, r3, #5
 800dc50:	697b      	ldr	r3, [r7, #20]
 800dc52:	440b      	add	r3, r1
 800dc54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc58:	4619      	mov	r1, r3
 800dc5a:	4b76      	ldr	r3, [pc, #472]	; (800de34 <USB_EP0StartXfer+0x2a8>)
 800dc5c:	4013      	ands	r3, r2
 800dc5e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800dc60:	68bb      	ldr	r3, [r7, #8]
 800dc62:	695a      	ldr	r2, [r3, #20]
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	689b      	ldr	r3, [r3, #8]
 800dc68:	429a      	cmp	r2, r3
 800dc6a:	d903      	bls.n	800dc74 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	689a      	ldr	r2, [r3, #8]
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dc74:	693b      	ldr	r3, [r7, #16]
 800dc76:	015a      	lsls	r2, r3, #5
 800dc78:	697b      	ldr	r3, [r7, #20]
 800dc7a:	4413      	add	r3, r2
 800dc7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc80:	691b      	ldr	r3, [r3, #16]
 800dc82:	693a      	ldr	r2, [r7, #16]
 800dc84:	0151      	lsls	r1, r2, #5
 800dc86:	697a      	ldr	r2, [r7, #20]
 800dc88:	440a      	add	r2, r1
 800dc8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dc92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800dc94:	693b      	ldr	r3, [r7, #16]
 800dc96:	015a      	lsls	r2, r3, #5
 800dc98:	697b      	ldr	r3, [r7, #20]
 800dc9a:	4413      	add	r3, r2
 800dc9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dca0:	691a      	ldr	r2, [r3, #16]
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	695b      	ldr	r3, [r3, #20]
 800dca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dcaa:	6939      	ldr	r1, [r7, #16]
 800dcac:	0148      	lsls	r0, r1, #5
 800dcae:	6979      	ldr	r1, [r7, #20]
 800dcb0:	4401      	add	r1, r0
 800dcb2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800dcb6:	4313      	orrs	r3, r2
 800dcb8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800dcba:	79fb      	ldrb	r3, [r7, #7]
 800dcbc:	2b01      	cmp	r3, #1
 800dcbe:	d11e      	bne.n	800dcfe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	691b      	ldr	r3, [r3, #16]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d009      	beq.n	800dcdc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800dcc8:	693b      	ldr	r3, [r7, #16]
 800dcca:	015a      	lsls	r2, r3, #5
 800dccc:	697b      	ldr	r3, [r7, #20]
 800dcce:	4413      	add	r3, r2
 800dcd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcd4:	461a      	mov	r2, r3
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	691b      	ldr	r3, [r3, #16]
 800dcda:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dcdc:	693b      	ldr	r3, [r7, #16]
 800dcde:	015a      	lsls	r2, r3, #5
 800dce0:	697b      	ldr	r3, [r7, #20]
 800dce2:	4413      	add	r3, r2
 800dce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	693a      	ldr	r2, [r7, #16]
 800dcec:	0151      	lsls	r1, r2, #5
 800dcee:	697a      	ldr	r2, [r7, #20]
 800dcf0:	440a      	add	r2, r1
 800dcf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dcf6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dcfa:	6013      	str	r3, [r2, #0]
 800dcfc:	e092      	b.n	800de24 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	015a      	lsls	r2, r3, #5
 800dd02:	697b      	ldr	r3, [r7, #20]
 800dd04:	4413      	add	r3, r2
 800dd06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	693a      	ldr	r2, [r7, #16]
 800dd0e:	0151      	lsls	r1, r2, #5
 800dd10:	697a      	ldr	r2, [r7, #20]
 800dd12:	440a      	add	r2, r1
 800dd14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd18:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dd1c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	695b      	ldr	r3, [r3, #20]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d07e      	beq.n	800de24 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800dd26:	697b      	ldr	r3, [r7, #20]
 800dd28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd2e:	68bb      	ldr	r3, [r7, #8]
 800dd30:	781b      	ldrb	r3, [r3, #0]
 800dd32:	f003 030f 	and.w	r3, r3, #15
 800dd36:	2101      	movs	r1, #1
 800dd38:	fa01 f303 	lsl.w	r3, r1, r3
 800dd3c:	6979      	ldr	r1, [r7, #20]
 800dd3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dd42:	4313      	orrs	r3, r2
 800dd44:	634b      	str	r3, [r1, #52]	; 0x34
 800dd46:	e06d      	b.n	800de24 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800dd48:	693b      	ldr	r3, [r7, #16]
 800dd4a:	015a      	lsls	r2, r3, #5
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	4413      	add	r3, r2
 800dd50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd54:	691a      	ldr	r2, [r3, #16]
 800dd56:	693b      	ldr	r3, [r7, #16]
 800dd58:	0159      	lsls	r1, r3, #5
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	440b      	add	r3, r1
 800dd5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd62:	4619      	mov	r1, r3
 800dd64:	4b34      	ldr	r3, [pc, #208]	; (800de38 <USB_EP0StartXfer+0x2ac>)
 800dd66:	4013      	ands	r3, r2
 800dd68:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800dd6a:	693b      	ldr	r3, [r7, #16]
 800dd6c:	015a      	lsls	r2, r3, #5
 800dd6e:	697b      	ldr	r3, [r7, #20]
 800dd70:	4413      	add	r3, r2
 800dd72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd76:	691a      	ldr	r2, [r3, #16]
 800dd78:	693b      	ldr	r3, [r7, #16]
 800dd7a:	0159      	lsls	r1, r3, #5
 800dd7c:	697b      	ldr	r3, [r7, #20]
 800dd7e:	440b      	add	r3, r1
 800dd80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd84:	4619      	mov	r1, r3
 800dd86:	4b2b      	ldr	r3, [pc, #172]	; (800de34 <USB_EP0StartXfer+0x2a8>)
 800dd88:	4013      	ands	r3, r2
 800dd8a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	695b      	ldr	r3, [r3, #20]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d003      	beq.n	800dd9c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	689a      	ldr	r2, [r3, #8]
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dd9c:	693b      	ldr	r3, [r7, #16]
 800dd9e:	015a      	lsls	r2, r3, #5
 800dda0:	697b      	ldr	r3, [r7, #20]
 800dda2:	4413      	add	r3, r2
 800dda4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dda8:	691b      	ldr	r3, [r3, #16]
 800ddaa:	693a      	ldr	r2, [r7, #16]
 800ddac:	0151      	lsls	r1, r2, #5
 800ddae:	697a      	ldr	r2, [r7, #20]
 800ddb0:	440a      	add	r2, r1
 800ddb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ddb6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ddba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800ddbc:	693b      	ldr	r3, [r7, #16]
 800ddbe:	015a      	lsls	r2, r3, #5
 800ddc0:	697b      	ldr	r3, [r7, #20]
 800ddc2:	4413      	add	r3, r2
 800ddc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddc8:	691a      	ldr	r2, [r3, #16]
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	689b      	ldr	r3, [r3, #8]
 800ddce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ddd2:	6939      	ldr	r1, [r7, #16]
 800ddd4:	0148      	lsls	r0, r1, #5
 800ddd6:	6979      	ldr	r1, [r7, #20]
 800ddd8:	4401      	add	r1, r0
 800ddda:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ddde:	4313      	orrs	r3, r2
 800dde0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800dde2:	79fb      	ldrb	r3, [r7, #7]
 800dde4:	2b01      	cmp	r3, #1
 800dde6:	d10d      	bne.n	800de04 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	68db      	ldr	r3, [r3, #12]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d009      	beq.n	800de04 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ddf0:	68bb      	ldr	r3, [r7, #8]
 800ddf2:	68d9      	ldr	r1, [r3, #12]
 800ddf4:	693b      	ldr	r3, [r7, #16]
 800ddf6:	015a      	lsls	r2, r3, #5
 800ddf8:	697b      	ldr	r3, [r7, #20]
 800ddfa:	4413      	add	r3, r2
 800ddfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de00:	460a      	mov	r2, r1
 800de02:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800de04:	693b      	ldr	r3, [r7, #16]
 800de06:	015a      	lsls	r2, r3, #5
 800de08:	697b      	ldr	r3, [r7, #20]
 800de0a:	4413      	add	r3, r2
 800de0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	693a      	ldr	r2, [r7, #16]
 800de14:	0151      	lsls	r1, r2, #5
 800de16:	697a      	ldr	r2, [r7, #20]
 800de18:	440a      	add	r2, r1
 800de1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800de22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800de24:	2300      	movs	r3, #0
}
 800de26:	4618      	mov	r0, r3
 800de28:	371c      	adds	r7, #28
 800de2a:	46bd      	mov	sp, r7
 800de2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de30:	4770      	bx	lr
 800de32:	bf00      	nop
 800de34:	e007ffff 	.word	0xe007ffff
 800de38:	fff80000 	.word	0xfff80000

0800de3c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800de3c:	b480      	push	{r7}
 800de3e:	b089      	sub	sp, #36	; 0x24
 800de40:	af00      	add	r7, sp, #0
 800de42:	60f8      	str	r0, [r7, #12]
 800de44:	60b9      	str	r1, [r7, #8]
 800de46:	4611      	mov	r1, r2
 800de48:	461a      	mov	r2, r3
 800de4a:	460b      	mov	r3, r1
 800de4c:	71fb      	strb	r3, [r7, #7]
 800de4e:	4613      	mov	r3, r2
 800de50:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800de5a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d11a      	bne.n	800de98 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800de62:	88bb      	ldrh	r3, [r7, #4]
 800de64:	3303      	adds	r3, #3
 800de66:	089b      	lsrs	r3, r3, #2
 800de68:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800de6a:	2300      	movs	r3, #0
 800de6c:	61bb      	str	r3, [r7, #24]
 800de6e:	e00f      	b.n	800de90 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800de70:	79fb      	ldrb	r3, [r7, #7]
 800de72:	031a      	lsls	r2, r3, #12
 800de74:	697b      	ldr	r3, [r7, #20]
 800de76:	4413      	add	r3, r2
 800de78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de7c:	461a      	mov	r2, r3
 800de7e:	69fb      	ldr	r3, [r7, #28]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	6013      	str	r3, [r2, #0]
      pSrc++;
 800de84:	69fb      	ldr	r3, [r7, #28]
 800de86:	3304      	adds	r3, #4
 800de88:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800de8a:	69bb      	ldr	r3, [r7, #24]
 800de8c:	3301      	adds	r3, #1
 800de8e:	61bb      	str	r3, [r7, #24]
 800de90:	69ba      	ldr	r2, [r7, #24]
 800de92:	693b      	ldr	r3, [r7, #16]
 800de94:	429a      	cmp	r2, r3
 800de96:	d3eb      	bcc.n	800de70 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800de98:	2300      	movs	r3, #0
}
 800de9a:	4618      	mov	r0, r3
 800de9c:	3724      	adds	r7, #36	; 0x24
 800de9e:	46bd      	mov	sp, r7
 800dea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea4:	4770      	bx	lr

0800dea6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800dea6:	b480      	push	{r7}
 800dea8:	b089      	sub	sp, #36	; 0x24
 800deaa:	af00      	add	r7, sp, #0
 800deac:	60f8      	str	r0, [r7, #12]
 800deae:	60b9      	str	r1, [r7, #8]
 800deb0:	4613      	mov	r3, r2
 800deb2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800debc:	88fb      	ldrh	r3, [r7, #6]
 800debe:	3303      	adds	r3, #3
 800dec0:	089b      	lsrs	r3, r3, #2
 800dec2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800dec4:	2300      	movs	r3, #0
 800dec6:	61bb      	str	r3, [r7, #24]
 800dec8:	e00b      	b.n	800dee2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ded0:	681a      	ldr	r2, [r3, #0]
 800ded2:	69fb      	ldr	r3, [r7, #28]
 800ded4:	601a      	str	r2, [r3, #0]
    pDest++;
 800ded6:	69fb      	ldr	r3, [r7, #28]
 800ded8:	3304      	adds	r3, #4
 800deda:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800dedc:	69bb      	ldr	r3, [r7, #24]
 800dede:	3301      	adds	r3, #1
 800dee0:	61bb      	str	r3, [r7, #24]
 800dee2:	69ba      	ldr	r2, [r7, #24]
 800dee4:	693b      	ldr	r3, [r7, #16]
 800dee6:	429a      	cmp	r2, r3
 800dee8:	d3ef      	bcc.n	800deca <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800deea:	69fb      	ldr	r3, [r7, #28]
}
 800deec:	4618      	mov	r0, r3
 800deee:	3724      	adds	r7, #36	; 0x24
 800def0:	46bd      	mov	sp, r7
 800def2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def6:	4770      	bx	lr

0800def8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800def8:	b480      	push	{r7}
 800defa:	b085      	sub	sp, #20
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
 800df00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	781b      	ldrb	r3, [r3, #0]
 800df0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	785b      	ldrb	r3, [r3, #1]
 800df10:	2b01      	cmp	r3, #1
 800df12:	d12c      	bne.n	800df6e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800df14:	68bb      	ldr	r3, [r7, #8]
 800df16:	015a      	lsls	r2, r3, #5
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	4413      	add	r3, r2
 800df1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	2b00      	cmp	r3, #0
 800df24:	db12      	blt.n	800df4c <USB_EPSetStall+0x54>
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d00f      	beq.n	800df4c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	015a      	lsls	r2, r3, #5
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	4413      	add	r3, r2
 800df34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	68ba      	ldr	r2, [r7, #8]
 800df3c:	0151      	lsls	r1, r2, #5
 800df3e:	68fa      	ldr	r2, [r7, #12]
 800df40:	440a      	add	r2, r1
 800df42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df46:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800df4a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800df4c:	68bb      	ldr	r3, [r7, #8]
 800df4e:	015a      	lsls	r2, r3, #5
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	4413      	add	r3, r2
 800df54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	68ba      	ldr	r2, [r7, #8]
 800df5c:	0151      	lsls	r1, r2, #5
 800df5e:	68fa      	ldr	r2, [r7, #12]
 800df60:	440a      	add	r2, r1
 800df62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800df6a:	6013      	str	r3, [r2, #0]
 800df6c:	e02b      	b.n	800dfc6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	015a      	lsls	r2, r3, #5
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	4413      	add	r3, r2
 800df76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	db12      	blt.n	800dfa6 <USB_EPSetStall+0xae>
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d00f      	beq.n	800dfa6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	015a      	lsls	r2, r3, #5
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	4413      	add	r3, r2
 800df8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	68ba      	ldr	r2, [r7, #8]
 800df96:	0151      	lsls	r1, r2, #5
 800df98:	68fa      	ldr	r2, [r7, #12]
 800df9a:	440a      	add	r2, r1
 800df9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dfa0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800dfa4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800dfa6:	68bb      	ldr	r3, [r7, #8]
 800dfa8:	015a      	lsls	r2, r3, #5
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	4413      	add	r3, r2
 800dfae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	68ba      	ldr	r2, [r7, #8]
 800dfb6:	0151      	lsls	r1, r2, #5
 800dfb8:	68fa      	ldr	r2, [r7, #12]
 800dfba:	440a      	add	r2, r1
 800dfbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dfc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dfc4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dfc6:	2300      	movs	r3, #0
}
 800dfc8:	4618      	mov	r0, r3
 800dfca:	3714      	adds	r7, #20
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd2:	4770      	bx	lr

0800dfd4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dfd4:	b480      	push	{r7}
 800dfd6:	b085      	sub	sp, #20
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
 800dfdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	781b      	ldrb	r3, [r3, #0]
 800dfe6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	785b      	ldrb	r3, [r3, #1]
 800dfec:	2b01      	cmp	r3, #1
 800dfee:	d128      	bne.n	800e042 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800dff0:	68bb      	ldr	r3, [r7, #8]
 800dff2:	015a      	lsls	r2, r3, #5
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	4413      	add	r3, r2
 800dff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	68ba      	ldr	r2, [r7, #8]
 800e000:	0151      	lsls	r1, r2, #5
 800e002:	68fa      	ldr	r2, [r7, #12]
 800e004:	440a      	add	r2, r1
 800e006:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e00a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e00e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	78db      	ldrb	r3, [r3, #3]
 800e014:	2b03      	cmp	r3, #3
 800e016:	d003      	beq.n	800e020 <USB_EPClearStall+0x4c>
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	78db      	ldrb	r3, [r3, #3]
 800e01c:	2b02      	cmp	r3, #2
 800e01e:	d138      	bne.n	800e092 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e020:	68bb      	ldr	r3, [r7, #8]
 800e022:	015a      	lsls	r2, r3, #5
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	4413      	add	r3, r2
 800e028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	68ba      	ldr	r2, [r7, #8]
 800e030:	0151      	lsls	r1, r2, #5
 800e032:	68fa      	ldr	r2, [r7, #12]
 800e034:	440a      	add	r2, r1
 800e036:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e03a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e03e:	6013      	str	r3, [r2, #0]
 800e040:	e027      	b.n	800e092 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	015a      	lsls	r2, r3, #5
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	4413      	add	r3, r2
 800e04a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	68ba      	ldr	r2, [r7, #8]
 800e052:	0151      	lsls	r1, r2, #5
 800e054:	68fa      	ldr	r2, [r7, #12]
 800e056:	440a      	add	r2, r1
 800e058:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e05c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e060:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	78db      	ldrb	r3, [r3, #3]
 800e066:	2b03      	cmp	r3, #3
 800e068:	d003      	beq.n	800e072 <USB_EPClearStall+0x9e>
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	78db      	ldrb	r3, [r3, #3]
 800e06e:	2b02      	cmp	r3, #2
 800e070:	d10f      	bne.n	800e092 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	015a      	lsls	r2, r3, #5
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	4413      	add	r3, r2
 800e07a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	68ba      	ldr	r2, [r7, #8]
 800e082:	0151      	lsls	r1, r2, #5
 800e084:	68fa      	ldr	r2, [r7, #12]
 800e086:	440a      	add	r2, r1
 800e088:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e08c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e090:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e092:	2300      	movs	r3, #0
}
 800e094:	4618      	mov	r0, r3
 800e096:	3714      	adds	r7, #20
 800e098:	46bd      	mov	sp, r7
 800e09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09e:	4770      	bx	lr

0800e0a0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e0a0:	b480      	push	{r7}
 800e0a2:	b085      	sub	sp, #20
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
 800e0a8:	460b      	mov	r3, r1
 800e0aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	68fa      	ldr	r2, [r7, #12]
 800e0ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e0be:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e0c2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0ca:	681a      	ldr	r2, [r3, #0]
 800e0cc:	78fb      	ldrb	r3, [r7, #3]
 800e0ce:	011b      	lsls	r3, r3, #4
 800e0d0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e0d4:	68f9      	ldr	r1, [r7, #12]
 800e0d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e0da:	4313      	orrs	r3, r2
 800e0dc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e0de:	2300      	movs	r3, #0
}
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	3714      	adds	r7, #20
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ea:	4770      	bx	lr

0800e0ec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b084      	sub	sp, #16
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0fe:	685b      	ldr	r3, [r3, #4]
 800e100:	68fa      	ldr	r2, [r7, #12]
 800e102:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e106:	f023 0302 	bic.w	r3, r3, #2
 800e10a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800e10c:	2003      	movs	r0, #3
 800e10e:	f7f3 fdd9 	bl	8001cc4 <HAL_Delay>

  return HAL_OK;
 800e112:	2300      	movs	r3, #0
}
 800e114:	4618      	mov	r0, r3
 800e116:	3710      	adds	r7, #16
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}

0800e11c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b084      	sub	sp, #16
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e12e:	685b      	ldr	r3, [r3, #4]
 800e130:	68fa      	ldr	r2, [r7, #12]
 800e132:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e136:	f043 0302 	orr.w	r3, r3, #2
 800e13a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800e13c:	2003      	movs	r0, #3
 800e13e:	f7f3 fdc1 	bl	8001cc4 <HAL_Delay>

  return HAL_OK;
 800e142:	2300      	movs	r3, #0
}
 800e144:	4618      	mov	r0, r3
 800e146:	3710      	adds	r7, #16
 800e148:	46bd      	mov	sp, r7
 800e14a:	bd80      	pop	{r7, pc}

0800e14c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e14c:	b480      	push	{r7}
 800e14e:	b085      	sub	sp, #20
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	695b      	ldr	r3, [r3, #20]
 800e158:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	699b      	ldr	r3, [r3, #24]
 800e15e:	68fa      	ldr	r2, [r7, #12]
 800e160:	4013      	ands	r3, r2
 800e162:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e164:	68fb      	ldr	r3, [r7, #12]
}
 800e166:	4618      	mov	r0, r3
 800e168:	3714      	adds	r7, #20
 800e16a:	46bd      	mov	sp, r7
 800e16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e170:	4770      	bx	lr

0800e172 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e172:	b480      	push	{r7}
 800e174:	b085      	sub	sp, #20
 800e176:	af00      	add	r7, sp, #0
 800e178:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e184:	699b      	ldr	r3, [r3, #24]
 800e186:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e18e:	69db      	ldr	r3, [r3, #28]
 800e190:	68ba      	ldr	r2, [r7, #8]
 800e192:	4013      	ands	r3, r2
 800e194:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	0c1b      	lsrs	r3, r3, #16
}
 800e19a:	4618      	mov	r0, r3
 800e19c:	3714      	adds	r7, #20
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a4:	4770      	bx	lr

0800e1a6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e1a6:	b480      	push	{r7}
 800e1a8:	b085      	sub	sp, #20
 800e1aa:	af00      	add	r7, sp, #0
 800e1ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1b8:	699b      	ldr	r3, [r3, #24]
 800e1ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1c2:	69db      	ldr	r3, [r3, #28]
 800e1c4:	68ba      	ldr	r2, [r7, #8]
 800e1c6:	4013      	ands	r3, r2
 800e1c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e1ca:	68bb      	ldr	r3, [r7, #8]
 800e1cc:	b29b      	uxth	r3, r3
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	3714      	adds	r7, #20
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d8:	4770      	bx	lr

0800e1da <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e1da:	b480      	push	{r7}
 800e1dc:	b085      	sub	sp, #20
 800e1de:	af00      	add	r7, sp, #0
 800e1e0:	6078      	str	r0, [r7, #4]
 800e1e2:	460b      	mov	r3, r1
 800e1e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e1ea:	78fb      	ldrb	r3, [r7, #3]
 800e1ec:	015a      	lsls	r2, r3, #5
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	4413      	add	r3, r2
 800e1f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e1f6:	689b      	ldr	r3, [r3, #8]
 800e1f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e200:	695b      	ldr	r3, [r3, #20]
 800e202:	68ba      	ldr	r2, [r7, #8]
 800e204:	4013      	ands	r3, r2
 800e206:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e208:	68bb      	ldr	r3, [r7, #8]
}
 800e20a:	4618      	mov	r0, r3
 800e20c:	3714      	adds	r7, #20
 800e20e:	46bd      	mov	sp, r7
 800e210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e214:	4770      	bx	lr

0800e216 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e216:	b480      	push	{r7}
 800e218:	b087      	sub	sp, #28
 800e21a:	af00      	add	r7, sp, #0
 800e21c:	6078      	str	r0, [r7, #4]
 800e21e:	460b      	mov	r3, r1
 800e220:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e226:	697b      	ldr	r3, [r7, #20]
 800e228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e22c:	691b      	ldr	r3, [r3, #16]
 800e22e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e230:	697b      	ldr	r3, [r7, #20]
 800e232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e238:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e23a:	78fb      	ldrb	r3, [r7, #3]
 800e23c:	f003 030f 	and.w	r3, r3, #15
 800e240:	68fa      	ldr	r2, [r7, #12]
 800e242:	fa22 f303 	lsr.w	r3, r2, r3
 800e246:	01db      	lsls	r3, r3, #7
 800e248:	b2db      	uxtb	r3, r3
 800e24a:	693a      	ldr	r2, [r7, #16]
 800e24c:	4313      	orrs	r3, r2
 800e24e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e250:	78fb      	ldrb	r3, [r7, #3]
 800e252:	015a      	lsls	r2, r3, #5
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	4413      	add	r3, r2
 800e258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e25c:	689b      	ldr	r3, [r3, #8]
 800e25e:	693a      	ldr	r2, [r7, #16]
 800e260:	4013      	ands	r3, r2
 800e262:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e264:	68bb      	ldr	r3, [r7, #8]
}
 800e266:	4618      	mov	r0, r3
 800e268:	371c      	adds	r7, #28
 800e26a:	46bd      	mov	sp, r7
 800e26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e270:	4770      	bx	lr

0800e272 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e272:	b480      	push	{r7}
 800e274:	b083      	sub	sp, #12
 800e276:	af00      	add	r7, sp, #0
 800e278:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	695b      	ldr	r3, [r3, #20]
 800e27e:	f003 0301 	and.w	r3, r3, #1
}
 800e282:	4618      	mov	r0, r3
 800e284:	370c      	adds	r7, #12
 800e286:	46bd      	mov	sp, r7
 800e288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28c:	4770      	bx	lr
	...

0800e290 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800e290:	b480      	push	{r7}
 800e292:	b085      	sub	sp, #20
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2a2:	681a      	ldr	r2, [r3, #0]
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2aa:	4619      	mov	r1, r3
 800e2ac:	4b09      	ldr	r3, [pc, #36]	; (800e2d4 <USB_ActivateSetup+0x44>)
 800e2ae:	4013      	ands	r3, r2
 800e2b0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2b8:	685b      	ldr	r3, [r3, #4]
 800e2ba:	68fa      	ldr	r2, [r7, #12]
 800e2bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e2c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e2c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e2c6:	2300      	movs	r3, #0
}
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	3714      	adds	r7, #20
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d2:	4770      	bx	lr
 800e2d4:	fffff800 	.word	0xfffff800

0800e2d8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800e2d8:	b480      	push	{r7}
 800e2da:	b087      	sub	sp, #28
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	60f8      	str	r0, [r7, #12]
 800e2e0:	460b      	mov	r3, r1
 800e2e2:	607a      	str	r2, [r7, #4]
 800e2e4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	333c      	adds	r3, #60	; 0x3c
 800e2ee:	3304      	adds	r3, #4
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e2f4:	693b      	ldr	r3, [r7, #16]
 800e2f6:	4a26      	ldr	r2, [pc, #152]	; (800e390 <USB_EP0_OutStart+0xb8>)
 800e2f8:	4293      	cmp	r3, r2
 800e2fa:	d90a      	bls.n	800e312 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e308:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e30c:	d101      	bne.n	800e312 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e30e:	2300      	movs	r3, #0
 800e310:	e037      	b.n	800e382 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e312:	697b      	ldr	r3, [r7, #20]
 800e314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e318:	461a      	mov	r2, r3
 800e31a:	2300      	movs	r3, #0
 800e31c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e31e:	697b      	ldr	r3, [r7, #20]
 800e320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e324:	691b      	ldr	r3, [r3, #16]
 800e326:	697a      	ldr	r2, [r7, #20]
 800e328:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e32c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e330:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e332:	697b      	ldr	r3, [r7, #20]
 800e334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e338:	691b      	ldr	r3, [r3, #16]
 800e33a:	697a      	ldr	r2, [r7, #20]
 800e33c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e340:	f043 0318 	orr.w	r3, r3, #24
 800e344:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e346:	697b      	ldr	r3, [r7, #20]
 800e348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e34c:	691b      	ldr	r3, [r3, #16]
 800e34e:	697a      	ldr	r2, [r7, #20]
 800e350:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e354:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800e358:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e35a:	7afb      	ldrb	r3, [r7, #11]
 800e35c:	2b01      	cmp	r3, #1
 800e35e:	d10f      	bne.n	800e380 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e360:	697b      	ldr	r3, [r7, #20]
 800e362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e366:	461a      	mov	r2, r3
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e36c:	697b      	ldr	r3, [r7, #20]
 800e36e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	697a      	ldr	r2, [r7, #20]
 800e376:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e37a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800e37e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e380:	2300      	movs	r3, #0
}
 800e382:	4618      	mov	r0, r3
 800e384:	371c      	adds	r7, #28
 800e386:	46bd      	mov	sp, r7
 800e388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38c:	4770      	bx	lr
 800e38e:	bf00      	nop
 800e390:	4f54300a 	.word	0x4f54300a

0800e394 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e394:	b480      	push	{r7}
 800e396:	b085      	sub	sp, #20
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800e39c:	2300      	movs	r3, #0
 800e39e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	3301      	adds	r3, #1
 800e3a4:	60fb      	str	r3, [r7, #12]
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	4a13      	ldr	r2, [pc, #76]	; (800e3f8 <USB_CoreReset+0x64>)
 800e3aa:	4293      	cmp	r3, r2
 800e3ac:	d901      	bls.n	800e3b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e3ae:	2303      	movs	r3, #3
 800e3b0:	e01b      	b.n	800e3ea <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	691b      	ldr	r3, [r3, #16]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	daf2      	bge.n	800e3a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	691b      	ldr	r3, [r3, #16]
 800e3c2:	f043 0201 	orr.w	r2, r3, #1
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	3301      	adds	r3, #1
 800e3ce:	60fb      	str	r3, [r7, #12]
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	4a09      	ldr	r2, [pc, #36]	; (800e3f8 <USB_CoreReset+0x64>)
 800e3d4:	4293      	cmp	r3, r2
 800e3d6:	d901      	bls.n	800e3dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e3d8:	2303      	movs	r3, #3
 800e3da:	e006      	b.n	800e3ea <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	691b      	ldr	r3, [r3, #16]
 800e3e0:	f003 0301 	and.w	r3, r3, #1
 800e3e4:	2b01      	cmp	r3, #1
 800e3e6:	d0f0      	beq.n	800e3ca <USB_CoreReset+0x36>

  return HAL_OK;
 800e3e8:	2300      	movs	r3, #0
}
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	3714      	adds	r7, #20
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f4:	4770      	bx	lr
 800e3f6:	bf00      	nop
 800e3f8:	00030d40 	.word	0x00030d40

0800e3fc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e400:	4904      	ldr	r1, [pc, #16]	; (800e414 <MX_FATFS_Init+0x18>)
 800e402:	4805      	ldr	r0, [pc, #20]	; (800e418 <MX_FATFS_Init+0x1c>)
 800e404:	f001 fdc0 	bl	800ff88 <FATFS_LinkDriver>
 800e408:	4603      	mov	r3, r0
 800e40a:	461a      	mov	r2, r3
 800e40c:	4b03      	ldr	r3, [pc, #12]	; (800e41c <MX_FATFS_Init+0x20>)
 800e40e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e410:	bf00      	nop
 800e412:	bd80      	pop	{r7, pc}
 800e414:	24000688 	.word	0x24000688
 800e418:	08011d28 	.word	0x08011d28
 800e41c:	24000684 	.word	0x24000684

0800e420 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b082      	sub	sp, #8
 800e424:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e426:	2300      	movs	r3, #0
 800e428:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e42a:	f000 f879 	bl	800e520 <BSP_SD_IsDetected>
 800e42e:	4603      	mov	r3, r0
 800e430:	2b01      	cmp	r3, #1
 800e432:	d001      	beq.n	800e438 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800e434:	2302      	movs	r3, #2
 800e436:	e012      	b.n	800e45e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800e438:	480b      	ldr	r0, [pc, #44]	; (800e468 <BSP_SD_Init+0x48>)
 800e43a:	f7fa ff8b 	bl	8009354 <HAL_SD_Init>
 800e43e:	4603      	mov	r3, r0
 800e440:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800e442:	79fb      	ldrb	r3, [r7, #7]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d109      	bne.n	800e45c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800e448:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800e44c:	4806      	ldr	r0, [pc, #24]	; (800e468 <BSP_SD_Init+0x48>)
 800e44e:	f7fb fe4f 	bl	800a0f0 <HAL_SD_ConfigWideBusOperation>
 800e452:	4603      	mov	r3, r0
 800e454:	2b00      	cmp	r3, #0
 800e456:	d001      	beq.n	800e45c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800e458:	2301      	movs	r3, #1
 800e45a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800e45c:	79fb      	ldrb	r3, [r7, #7]
}
 800e45e:	4618      	mov	r0, r3
 800e460:	3708      	adds	r7, #8
 800e462:	46bd      	mov	sp, r7
 800e464:	bd80      	pop	{r7, pc}
 800e466:	bf00      	nop
 800e468:	24000340 	.word	0x24000340

0800e46c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b088      	sub	sp, #32
 800e470:	af02      	add	r7, sp, #8
 800e472:	60f8      	str	r0, [r7, #12]
 800e474:	60b9      	str	r1, [r7, #8]
 800e476:	607a      	str	r2, [r7, #4]
 800e478:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800e47a:	2300      	movs	r3, #0
 800e47c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	9300      	str	r3, [sp, #0]
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	68ba      	ldr	r2, [r7, #8]
 800e486:	68f9      	ldr	r1, [r7, #12]
 800e488:	4806      	ldr	r0, [pc, #24]	; (800e4a4 <BSP_SD_ReadBlocks+0x38>)
 800e48a:	f7fb f887 	bl	800959c <HAL_SD_ReadBlocks>
 800e48e:	4603      	mov	r3, r0
 800e490:	2b00      	cmp	r3, #0
 800e492:	d001      	beq.n	800e498 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800e494:	2301      	movs	r3, #1
 800e496:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e498:	7dfb      	ldrb	r3, [r7, #23]
}
 800e49a:	4618      	mov	r0, r3
 800e49c:	3718      	adds	r7, #24
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	bd80      	pop	{r7, pc}
 800e4a2:	bf00      	nop
 800e4a4:	24000340 	.word	0x24000340

0800e4a8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b088      	sub	sp, #32
 800e4ac:	af02      	add	r7, sp, #8
 800e4ae:	60f8      	str	r0, [r7, #12]
 800e4b0:	60b9      	str	r1, [r7, #8]
 800e4b2:	607a      	str	r2, [r7, #4]
 800e4b4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	9300      	str	r3, [sp, #0]
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	68ba      	ldr	r2, [r7, #8]
 800e4c2:	68f9      	ldr	r1, [r7, #12]
 800e4c4:	4806      	ldr	r0, [pc, #24]	; (800e4e0 <BSP_SD_WriteBlocks+0x38>)
 800e4c6:	f7fb f9f3 	bl	80098b0 <HAL_SD_WriteBlocks>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d001      	beq.n	800e4d4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800e4d0:	2301      	movs	r3, #1
 800e4d2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e4d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	3718      	adds	r7, #24
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	bd80      	pop	{r7, pc}
 800e4de:	bf00      	nop
 800e4e0:	24000340 	.word	0x24000340

0800e4e4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e4e8:	4805      	ldr	r0, [pc, #20]	; (800e500 <BSP_SD_GetCardState+0x1c>)
 800e4ea:	f7fb feab 	bl	800a244 <HAL_SD_GetCardState>
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	2b04      	cmp	r3, #4
 800e4f2:	bf14      	ite	ne
 800e4f4:	2301      	movne	r3, #1
 800e4f6:	2300      	moveq	r3, #0
 800e4f8:	b2db      	uxtb	r3, r3
}
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	bd80      	pop	{r7, pc}
 800e4fe:	bf00      	nop
 800e500:	24000340 	.word	0x24000340

0800e504 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b082      	sub	sp, #8
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800e50c:	6879      	ldr	r1, [r7, #4]
 800e50e:	4803      	ldr	r0, [pc, #12]	; (800e51c <BSP_SD_GetCardInfo+0x18>)
 800e510:	f7fb fdc2 	bl	800a098 <HAL_SD_GetCardInfo>
}
 800e514:	bf00      	nop
 800e516:	3708      	adds	r7, #8
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}
 800e51c:	24000340 	.word	0x24000340

0800e520 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b082      	sub	sp, #8
 800e524:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e526:	2301      	movs	r3, #1
 800e528:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800e52a:	f000 f80b 	bl	800e544 <BSP_PlatformIsDetected>
 800e52e:	4603      	mov	r3, r0
 800e530:	2b00      	cmp	r3, #0
 800e532:	d101      	bne.n	800e538 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800e534:	2300      	movs	r3, #0
 800e536:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800e538:	79fb      	ldrb	r3, [r7, #7]
 800e53a:	b2db      	uxtb	r3, r3
}
 800e53c:	4618      	mov	r0, r3
 800e53e:	3708      	adds	r7, #8
 800e540:	46bd      	mov	sp, r7
 800e542:	bd80      	pop	{r7, pc}

0800e544 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800e544:	b580      	push	{r7, lr}
 800e546:	b082      	sub	sp, #8
 800e548:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800e54a:	2301      	movs	r3, #1
 800e54c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800e54e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e552:	4806      	ldr	r0, [pc, #24]	; (800e56c <BSP_PlatformIsDetected+0x28>)
 800e554:	f7f6 fae4 	bl	8004b20 <HAL_GPIO_ReadPin>
 800e558:	4603      	mov	r3, r0
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d001      	beq.n	800e562 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800e55e:	2300      	movs	r3, #0
 800e560:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800e562:	79fb      	ldrb	r3, [r7, #7]
}
 800e564:	4618      	mov	r0, r3
 800e566:	3708      	adds	r7, #8
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}
 800e56c:	58020000 	.word	0x58020000

0800e570 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b082      	sub	sp, #8
 800e574:	af00      	add	r7, sp, #0
 800e576:	4603      	mov	r3, r0
 800e578:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e57a:	4b0b      	ldr	r3, [pc, #44]	; (800e5a8 <SD_CheckStatus+0x38>)
 800e57c:	2201      	movs	r2, #1
 800e57e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800e580:	f7ff ffb0 	bl	800e4e4 <BSP_SD_GetCardState>
 800e584:	4603      	mov	r3, r0
 800e586:	2b00      	cmp	r3, #0
 800e588:	d107      	bne.n	800e59a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e58a:	4b07      	ldr	r3, [pc, #28]	; (800e5a8 <SD_CheckStatus+0x38>)
 800e58c:	781b      	ldrb	r3, [r3, #0]
 800e58e:	b2db      	uxtb	r3, r3
 800e590:	f023 0301 	bic.w	r3, r3, #1
 800e594:	b2da      	uxtb	r2, r3
 800e596:	4b04      	ldr	r3, [pc, #16]	; (800e5a8 <SD_CheckStatus+0x38>)
 800e598:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e59a:	4b03      	ldr	r3, [pc, #12]	; (800e5a8 <SD_CheckStatus+0x38>)
 800e59c:	781b      	ldrb	r3, [r3, #0]
 800e59e:	b2db      	uxtb	r3, r3
}
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	3708      	adds	r7, #8
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}
 800e5a8:	2400000d 	.word	0x2400000d

0800e5ac <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b082      	sub	sp, #8
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800e5b6:	4b0b      	ldr	r3, [pc, #44]	; (800e5e4 <SD_initialize+0x38>)
 800e5b8:	2201      	movs	r2, #1
 800e5ba:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800e5bc:	f7ff ff30 	bl	800e420 <BSP_SD_Init>
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d107      	bne.n	800e5d6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800e5c6:	79fb      	ldrb	r3, [r7, #7]
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	f7ff ffd1 	bl	800e570 <SD_CheckStatus>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	461a      	mov	r2, r3
 800e5d2:	4b04      	ldr	r3, [pc, #16]	; (800e5e4 <SD_initialize+0x38>)
 800e5d4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800e5d6:	4b03      	ldr	r3, [pc, #12]	; (800e5e4 <SD_initialize+0x38>)
 800e5d8:	781b      	ldrb	r3, [r3, #0]
 800e5da:	b2db      	uxtb	r3, r3
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	3708      	adds	r7, #8
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}
 800e5e4:	2400000d 	.word	0x2400000d

0800e5e8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b082      	sub	sp, #8
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e5f2:	79fb      	ldrb	r3, [r7, #7]
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	f7ff ffbb 	bl	800e570 <SD_CheckStatus>
 800e5fa:	4603      	mov	r3, r0
}
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	3708      	adds	r7, #8
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}

0800e604 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b086      	sub	sp, #24
 800e608:	af00      	add	r7, sp, #0
 800e60a:	60b9      	str	r1, [r7, #8]
 800e60c:	607a      	str	r2, [r7, #4]
 800e60e:	603b      	str	r3, [r7, #0]
 800e610:	4603      	mov	r3, r0
 800e612:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e614:	2301      	movs	r3, #1
 800e616:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800e618:	f04f 33ff 	mov.w	r3, #4294967295
 800e61c:	683a      	ldr	r2, [r7, #0]
 800e61e:	6879      	ldr	r1, [r7, #4]
 800e620:	68b8      	ldr	r0, [r7, #8]
 800e622:	f7ff ff23 	bl	800e46c <BSP_SD_ReadBlocks>
 800e626:	4603      	mov	r3, r0
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d107      	bne.n	800e63c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800e62c:	bf00      	nop
 800e62e:	f7ff ff59 	bl	800e4e4 <BSP_SD_GetCardState>
 800e632:	4603      	mov	r3, r0
 800e634:	2b00      	cmp	r3, #0
 800e636:	d1fa      	bne.n	800e62e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800e638:	2300      	movs	r3, #0
 800e63a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800e63c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e63e:	4618      	mov	r0, r3
 800e640:	3718      	adds	r7, #24
 800e642:	46bd      	mov	sp, r7
 800e644:	bd80      	pop	{r7, pc}

0800e646 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e646:	b580      	push	{r7, lr}
 800e648:	b086      	sub	sp, #24
 800e64a:	af00      	add	r7, sp, #0
 800e64c:	60b9      	str	r1, [r7, #8]
 800e64e:	607a      	str	r2, [r7, #4]
 800e650:	603b      	str	r3, [r7, #0]
 800e652:	4603      	mov	r3, r0
 800e654:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e656:	2301      	movs	r3, #1
 800e658:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800e65a:	f04f 33ff 	mov.w	r3, #4294967295
 800e65e:	683a      	ldr	r2, [r7, #0]
 800e660:	6879      	ldr	r1, [r7, #4]
 800e662:	68b8      	ldr	r0, [r7, #8]
 800e664:	f7ff ff20 	bl	800e4a8 <BSP_SD_WriteBlocks>
 800e668:	4603      	mov	r3, r0
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d107      	bne.n	800e67e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800e66e:	bf00      	nop
 800e670:	f7ff ff38 	bl	800e4e4 <BSP_SD_GetCardState>
 800e674:	4603      	mov	r3, r0
 800e676:	2b00      	cmp	r3, #0
 800e678:	d1fa      	bne.n	800e670 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800e67a:	2300      	movs	r3, #0
 800e67c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800e67e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e680:	4618      	mov	r0, r3
 800e682:	3718      	adds	r7, #24
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}

0800e688 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b08c      	sub	sp, #48	; 0x30
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	4603      	mov	r3, r0
 800e690:	603a      	str	r2, [r7, #0]
 800e692:	71fb      	strb	r3, [r7, #7]
 800e694:	460b      	mov	r3, r1
 800e696:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e698:	2301      	movs	r3, #1
 800e69a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e69e:	4b25      	ldr	r3, [pc, #148]	; (800e734 <SD_ioctl+0xac>)
 800e6a0:	781b      	ldrb	r3, [r3, #0]
 800e6a2:	b2db      	uxtb	r3, r3
 800e6a4:	f003 0301 	and.w	r3, r3, #1
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d001      	beq.n	800e6b0 <SD_ioctl+0x28>
 800e6ac:	2303      	movs	r3, #3
 800e6ae:	e03c      	b.n	800e72a <SD_ioctl+0xa2>

  switch (cmd)
 800e6b0:	79bb      	ldrb	r3, [r7, #6]
 800e6b2:	2b03      	cmp	r3, #3
 800e6b4:	d834      	bhi.n	800e720 <SD_ioctl+0x98>
 800e6b6:	a201      	add	r2, pc, #4	; (adr r2, 800e6bc <SD_ioctl+0x34>)
 800e6b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6bc:	0800e6cd 	.word	0x0800e6cd
 800e6c0:	0800e6d5 	.word	0x0800e6d5
 800e6c4:	0800e6ed 	.word	0x0800e6ed
 800e6c8:	0800e707 	.word	0x0800e707
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e6d2:	e028      	b.n	800e726 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e6d4:	f107 0308 	add.w	r3, r7, #8
 800e6d8:	4618      	mov	r0, r3
 800e6da:	f7ff ff13 	bl	800e504 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e6de:	6a3a      	ldr	r2, [r7, #32]
 800e6e0:	683b      	ldr	r3, [r7, #0]
 800e6e2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e6ea:	e01c      	b.n	800e726 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e6ec:	f107 0308 	add.w	r3, r7, #8
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	f7ff ff07 	bl	800e504 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f8:	b29a      	uxth	r2, r3
 800e6fa:	683b      	ldr	r3, [r7, #0]
 800e6fc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e6fe:	2300      	movs	r3, #0
 800e700:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e704:	e00f      	b.n	800e726 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e706:	f107 0308 	add.w	r3, r7, #8
 800e70a:	4618      	mov	r0, r3
 800e70c:	f7ff fefa 	bl	800e504 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e712:	0a5a      	lsrs	r2, r3, #9
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e718:	2300      	movs	r3, #0
 800e71a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e71e:	e002      	b.n	800e726 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e720:	2304      	movs	r3, #4
 800e722:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e726:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e72a:	4618      	mov	r0, r3
 800e72c:	3730      	adds	r7, #48	; 0x30
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd80      	pop	{r7, pc}
 800e732:	bf00      	nop
 800e734:	2400000d 	.word	0x2400000d

0800e738 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b084      	sub	sp, #16
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
 800e740:	460b      	mov	r3, r1
 800e742:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e744:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e748:	f002 f936 	bl	80109b8 <malloc>
 800e74c:	4603      	mov	r3, r0
 800e74e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d105      	bne.n	800e762 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2200      	movs	r2, #0
 800e75a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800e75e:	2302      	movs	r3, #2
 800e760:	e066      	b.n	800e830 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	68fa      	ldr	r2, [r7, #12]
 800e766:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	7c1b      	ldrb	r3, [r3, #16]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d119      	bne.n	800e7a6 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e772:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e776:	2202      	movs	r2, #2
 800e778:	2181      	movs	r1, #129	; 0x81
 800e77a:	6878      	ldr	r0, [r7, #4]
 800e77c:	f001 ffa3 	bl	80106c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	2201      	movs	r2, #1
 800e784:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e786:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e78a:	2202      	movs	r2, #2
 800e78c:	2101      	movs	r1, #1
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	f001 ff99 	bl	80106c6 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	2201      	movs	r2, #1
 800e798:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2210      	movs	r2, #16
 800e7a0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800e7a4:	e016      	b.n	800e7d4 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e7a6:	2340      	movs	r3, #64	; 0x40
 800e7a8:	2202      	movs	r2, #2
 800e7aa:	2181      	movs	r1, #129	; 0x81
 800e7ac:	6878      	ldr	r0, [r7, #4]
 800e7ae:	f001 ff8a 	bl	80106c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	2201      	movs	r2, #1
 800e7b6:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e7b8:	2340      	movs	r3, #64	; 0x40
 800e7ba:	2202      	movs	r2, #2
 800e7bc:	2101      	movs	r1, #1
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	f001 ff81 	bl	80106c6 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2201      	movs	r2, #1
 800e7c8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2210      	movs	r2, #16
 800e7d0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e7d4:	2308      	movs	r3, #8
 800e7d6:	2203      	movs	r2, #3
 800e7d8:	2182      	movs	r1, #130	; 0x82
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f001 ff73 	bl	80106c6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	2201      	movs	r2, #1
 800e7e4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	7c1b      	ldrb	r3, [r3, #16]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d109      	bne.n	800e81e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e810:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e814:	2101      	movs	r1, #1
 800e816:	6878      	ldr	r0, [r7, #4]
 800e818:	f002 f844 	bl	80108a4 <USBD_LL_PrepareReceive>
 800e81c:	e007      	b.n	800e82e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e824:	2340      	movs	r3, #64	; 0x40
 800e826:	2101      	movs	r1, #1
 800e828:	6878      	ldr	r0, [r7, #4]
 800e82a:	f002 f83b 	bl	80108a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e82e:	2300      	movs	r3, #0
}
 800e830:	4618      	mov	r0, r3
 800e832:	3710      	adds	r7, #16
 800e834:	46bd      	mov	sp, r7
 800e836:	bd80      	pop	{r7, pc}

0800e838 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b084      	sub	sp, #16
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
 800e840:	460b      	mov	r3, r1
 800e842:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800e844:	2300      	movs	r3, #0
 800e846:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e848:	2181      	movs	r1, #129	; 0x81
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	f001 ff61 	bl	8010712 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2200      	movs	r2, #0
 800e854:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e856:	2101      	movs	r1, #1
 800e858:	6878      	ldr	r0, [r7, #4]
 800e85a:	f001 ff5a 	bl	8010712 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	2200      	movs	r2, #0
 800e862:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e866:	2182      	movs	r1, #130	; 0x82
 800e868:	6878      	ldr	r0, [r7, #4]
 800e86a:	f001 ff52 	bl	8010712 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	2200      	movs	r2, #0
 800e872:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2200      	movs	r2, #0
 800e87a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e884:	2b00      	cmp	r3, #0
 800e886:	d00e      	beq.n	800e8a6 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e88e:	685b      	ldr	r3, [r3, #4]
 800e890:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e898:	4618      	mov	r0, r3
 800e89a:	f002 f895 	bl	80109c8 <free>
    pdev->pClassData = NULL;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800e8a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	3710      	adds	r7, #16
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	bd80      	pop	{r7, pc}

0800e8b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b086      	sub	sp, #24
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
 800e8b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e8c0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	781b      	ldrb	r3, [r3, #0]
 800e8d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d03a      	beq.n	800e950 <USBD_CDC_Setup+0xa0>
 800e8da:	2b20      	cmp	r3, #32
 800e8dc:	f040 8097 	bne.w	800ea0e <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	88db      	ldrh	r3, [r3, #6]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d029      	beq.n	800e93c <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	781b      	ldrb	r3, [r3, #0]
 800e8ec:	b25b      	sxtb	r3, r3
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	da11      	bge.n	800e916 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e8f8:	689b      	ldr	r3, [r3, #8]
 800e8fa:	683a      	ldr	r2, [r7, #0]
 800e8fc:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800e8fe:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e900:	683a      	ldr	r2, [r7, #0]
 800e902:	88d2      	ldrh	r2, [r2, #6]
 800e904:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e906:	6939      	ldr	r1, [r7, #16]
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	88db      	ldrh	r3, [r3, #6]
 800e90c:	461a      	mov	r2, r3
 800e90e:	6878      	ldr	r0, [r7, #4]
 800e910:	f001 fa6d 	bl	800fdee <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800e914:	e082      	b.n	800ea1c <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800e916:	683b      	ldr	r3, [r7, #0]
 800e918:	785a      	ldrb	r2, [r3, #1]
 800e91a:	693b      	ldr	r3, [r7, #16]
 800e91c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	88db      	ldrh	r3, [r3, #6]
 800e924:	b2da      	uxtb	r2, r3
 800e926:	693b      	ldr	r3, [r7, #16]
 800e928:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e92c:	6939      	ldr	r1, [r7, #16]
 800e92e:	683b      	ldr	r3, [r7, #0]
 800e930:	88db      	ldrh	r3, [r3, #6]
 800e932:	461a      	mov	r2, r3
 800e934:	6878      	ldr	r0, [r7, #4]
 800e936:	f001 fa86 	bl	800fe46 <USBD_CtlPrepareRx>
    break;
 800e93a:	e06f      	b.n	800ea1c <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e942:	689b      	ldr	r3, [r3, #8]
 800e944:	683a      	ldr	r2, [r7, #0]
 800e946:	7850      	ldrb	r0, [r2, #1]
 800e948:	2200      	movs	r2, #0
 800e94a:	6839      	ldr	r1, [r7, #0]
 800e94c:	4798      	blx	r3
    break;
 800e94e:	e065      	b.n	800ea1c <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	785b      	ldrb	r3, [r3, #1]
 800e954:	2b0b      	cmp	r3, #11
 800e956:	d84f      	bhi.n	800e9f8 <USBD_CDC_Setup+0x148>
 800e958:	a201      	add	r2, pc, #4	; (adr r2, 800e960 <USBD_CDC_Setup+0xb0>)
 800e95a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e95e:	bf00      	nop
 800e960:	0800e991 	.word	0x0800e991
 800e964:	0800ea07 	.word	0x0800ea07
 800e968:	0800e9f9 	.word	0x0800e9f9
 800e96c:	0800e9f9 	.word	0x0800e9f9
 800e970:	0800e9f9 	.word	0x0800e9f9
 800e974:	0800e9f9 	.word	0x0800e9f9
 800e978:	0800e9f9 	.word	0x0800e9f9
 800e97c:	0800e9f9 	.word	0x0800e9f9
 800e980:	0800e9f9 	.word	0x0800e9f9
 800e984:	0800e9f9 	.word	0x0800e9f9
 800e988:	0800e9b9 	.word	0x0800e9b9
 800e98c:	0800e9e1 	.word	0x0800e9e1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e996:	2b03      	cmp	r3, #3
 800e998:	d107      	bne.n	800e9aa <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e99a:	f107 030c 	add.w	r3, r7, #12
 800e99e:	2202      	movs	r2, #2
 800e9a0:	4619      	mov	r1, r3
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f001 fa23 	bl	800fdee <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800e9a8:	e030      	b.n	800ea0c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800e9aa:	6839      	ldr	r1, [r7, #0]
 800e9ac:	6878      	ldr	r0, [r7, #4]
 800e9ae:	f001 f9ad 	bl	800fd0c <USBD_CtlError>
        ret = USBD_FAIL;
 800e9b2:	2303      	movs	r3, #3
 800e9b4:	75fb      	strb	r3, [r7, #23]
      break;
 800e9b6:	e029      	b.n	800ea0c <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e9be:	2b03      	cmp	r3, #3
 800e9c0:	d107      	bne.n	800e9d2 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e9c2:	f107 030f 	add.w	r3, r7, #15
 800e9c6:	2201      	movs	r2, #1
 800e9c8:	4619      	mov	r1, r3
 800e9ca:	6878      	ldr	r0, [r7, #4]
 800e9cc:	f001 fa0f 	bl	800fdee <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800e9d0:	e01c      	b.n	800ea0c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800e9d2:	6839      	ldr	r1, [r7, #0]
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	f001 f999 	bl	800fd0c <USBD_CtlError>
        ret = USBD_FAIL;
 800e9da:	2303      	movs	r3, #3
 800e9dc:	75fb      	strb	r3, [r7, #23]
      break;
 800e9de:	e015      	b.n	800ea0c <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e9e6:	2b03      	cmp	r3, #3
 800e9e8:	d00f      	beq.n	800ea0a <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800e9ea:	6839      	ldr	r1, [r7, #0]
 800e9ec:	6878      	ldr	r0, [r7, #4]
 800e9ee:	f001 f98d 	bl	800fd0c <USBD_CtlError>
        ret = USBD_FAIL;
 800e9f2:	2303      	movs	r3, #3
 800e9f4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800e9f6:	e008      	b.n	800ea0a <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800e9f8:	6839      	ldr	r1, [r7, #0]
 800e9fa:	6878      	ldr	r0, [r7, #4]
 800e9fc:	f001 f986 	bl	800fd0c <USBD_CtlError>
      ret = USBD_FAIL;
 800ea00:	2303      	movs	r3, #3
 800ea02:	75fb      	strb	r3, [r7, #23]
      break;
 800ea04:	e002      	b.n	800ea0c <USBD_CDC_Setup+0x15c>
      break;
 800ea06:	bf00      	nop
 800ea08:	e008      	b.n	800ea1c <USBD_CDC_Setup+0x16c>
      break;
 800ea0a:	bf00      	nop
    }
    break;
 800ea0c:	e006      	b.n	800ea1c <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800ea0e:	6839      	ldr	r1, [r7, #0]
 800ea10:	6878      	ldr	r0, [r7, #4]
 800ea12:	f001 f97b 	bl	800fd0c <USBD_CtlError>
    ret = USBD_FAIL;
 800ea16:	2303      	movs	r3, #3
 800ea18:	75fb      	strb	r3, [r7, #23]
    break;
 800ea1a:	bf00      	nop
  }

  return (uint8_t)ret;
 800ea1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea1e:	4618      	mov	r0, r3
 800ea20:	3718      	adds	r7, #24
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bd80      	pop	{r7, pc}
 800ea26:	bf00      	nop

0800ea28 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b084      	sub	sp, #16
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
 800ea30:	460b      	mov	r3, r1
 800ea32:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ea3a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d101      	bne.n	800ea4a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ea46:	2303      	movs	r3, #3
 800ea48:	e049      	b.n	800eade <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ea50:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ea52:	78fa      	ldrb	r2, [r7, #3]
 800ea54:	6879      	ldr	r1, [r7, #4]
 800ea56:	4613      	mov	r3, r2
 800ea58:	009b      	lsls	r3, r3, #2
 800ea5a:	4413      	add	r3, r2
 800ea5c:	009b      	lsls	r3, r3, #2
 800ea5e:	440b      	add	r3, r1
 800ea60:	3318      	adds	r3, #24
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d029      	beq.n	800eabc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ea68:	78fa      	ldrb	r2, [r7, #3]
 800ea6a:	6879      	ldr	r1, [r7, #4]
 800ea6c:	4613      	mov	r3, r2
 800ea6e:	009b      	lsls	r3, r3, #2
 800ea70:	4413      	add	r3, r2
 800ea72:	009b      	lsls	r3, r3, #2
 800ea74:	440b      	add	r3, r1
 800ea76:	3318      	adds	r3, #24
 800ea78:	681a      	ldr	r2, [r3, #0]
 800ea7a:	78f9      	ldrb	r1, [r7, #3]
 800ea7c:	68f8      	ldr	r0, [r7, #12]
 800ea7e:	460b      	mov	r3, r1
 800ea80:	00db      	lsls	r3, r3, #3
 800ea82:	1a5b      	subs	r3, r3, r1
 800ea84:	009b      	lsls	r3, r3, #2
 800ea86:	4403      	add	r3, r0
 800ea88:	3344      	adds	r3, #68	; 0x44
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	fbb2 f1f3 	udiv	r1, r2, r3
 800ea90:	fb03 f301 	mul.w	r3, r3, r1
 800ea94:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d110      	bne.n	800eabc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800ea9a:	78fa      	ldrb	r2, [r7, #3]
 800ea9c:	6879      	ldr	r1, [r7, #4]
 800ea9e:	4613      	mov	r3, r2
 800eaa0:	009b      	lsls	r3, r3, #2
 800eaa2:	4413      	add	r3, r2
 800eaa4:	009b      	lsls	r3, r3, #2
 800eaa6:	440b      	add	r3, r1
 800eaa8:	3318      	adds	r3, #24
 800eaaa:	2200      	movs	r2, #0
 800eaac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800eaae:	78f9      	ldrb	r1, [r7, #3]
 800eab0:	2300      	movs	r3, #0
 800eab2:	2200      	movs	r2, #0
 800eab4:	6878      	ldr	r0, [r7, #4]
 800eab6:	f001 fed4 	bl	8010862 <USBD_LL_Transmit>
 800eaba:	e00f      	b.n	800eadc <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800eabc:	68bb      	ldr	r3, [r7, #8]
 800eabe:	2200      	movs	r2, #0
 800eac0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eaca:	691b      	ldr	r3, [r3, #16]
 800eacc:	68ba      	ldr	r2, [r7, #8]
 800eace:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ead2:	68ba      	ldr	r2, [r7, #8]
 800ead4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ead8:	78fa      	ldrb	r2, [r7, #3]
 800eada:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800eadc:	2300      	movs	r3, #0
}
 800eade:	4618      	mov	r0, r3
 800eae0:	3710      	adds	r7, #16
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd80      	pop	{r7, pc}

0800eae6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800eae6:	b580      	push	{r7, lr}
 800eae8:	b084      	sub	sp, #16
 800eaea:	af00      	add	r7, sp, #0
 800eaec:	6078      	str	r0, [r7, #4]
 800eaee:	460b      	mov	r3, r1
 800eaf0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eaf8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d101      	bne.n	800eb08 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800eb04:	2303      	movs	r3, #3
 800eb06:	e015      	b.n	800eb34 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800eb08:	78fb      	ldrb	r3, [r7, #3]
 800eb0a:	4619      	mov	r1, r3
 800eb0c:	6878      	ldr	r0, [r7, #4]
 800eb0e:	f001 feea 	bl	80108e6 <USBD_LL_GetRxDataSize>
 800eb12:	4602      	mov	r2, r0
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eb20:	68db      	ldr	r3, [r3, #12]
 800eb22:	68fa      	ldr	r2, [r7, #12]
 800eb24:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800eb28:	68fa      	ldr	r2, [r7, #12]
 800eb2a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800eb2e:	4611      	mov	r1, r2
 800eb30:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800eb32:	2300      	movs	r3, #0
}
 800eb34:	4618      	mov	r0, r3
 800eb36:	3710      	adds	r7, #16
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	bd80      	pop	{r7, pc}

0800eb3c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b084      	sub	sp, #16
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eb4a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d015      	beq.n	800eb82 <USBD_CDC_EP0_RxReady+0x46>
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800eb5c:	2bff      	cmp	r3, #255	; 0xff
 800eb5e:	d010      	beq.n	800eb82 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eb66:	689b      	ldr	r3, [r3, #8]
 800eb68:	68fa      	ldr	r2, [r7, #12]
 800eb6a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800eb6e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800eb70:	68fa      	ldr	r2, [r7, #12]
 800eb72:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800eb76:	b292      	uxth	r2, r2
 800eb78:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	22ff      	movs	r2, #255	; 0xff
 800eb7e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800eb82:	2300      	movs	r3, #0
}
 800eb84:	4618      	mov	r0, r3
 800eb86:	3710      	adds	r7, #16
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}

0800eb8c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800eb8c:	b480      	push	{r7}
 800eb8e:	b083      	sub	sp, #12
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2243      	movs	r2, #67	; 0x43
 800eb98:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800eb9a:	4b03      	ldr	r3, [pc, #12]	; (800eba8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	370c      	adds	r7, #12
 800eba0:	46bd      	mov	sp, r7
 800eba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba6:	4770      	bx	lr
 800eba8:	24000098 	.word	0x24000098

0800ebac <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ebac:	b480      	push	{r7}
 800ebae:	b083      	sub	sp, #12
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2243      	movs	r2, #67	; 0x43
 800ebb8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ebba:	4b03      	ldr	r3, [pc, #12]	; (800ebc8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	370c      	adds	r7, #12
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc6:	4770      	bx	lr
 800ebc8:	24000054 	.word	0x24000054

0800ebcc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ebcc:	b480      	push	{r7}
 800ebce:	b083      	sub	sp, #12
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2243      	movs	r2, #67	; 0x43
 800ebd8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800ebda:	4b03      	ldr	r3, [pc, #12]	; (800ebe8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ebdc:	4618      	mov	r0, r3
 800ebde:	370c      	adds	r7, #12
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe6:	4770      	bx	lr
 800ebe8:	240000dc 	.word	0x240000dc

0800ebec <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ebec:	b480      	push	{r7}
 800ebee:	b083      	sub	sp, #12
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	220a      	movs	r2, #10
 800ebf8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ebfa:	4b03      	ldr	r3, [pc, #12]	; (800ec08 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	370c      	adds	r7, #12
 800ec00:	46bd      	mov	sp, r7
 800ec02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec06:	4770      	bx	lr
 800ec08:	24000010 	.word	0x24000010

0800ec0c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ec0c:	b480      	push	{r7}
 800ec0e:	b083      	sub	sp, #12
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
 800ec14:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d101      	bne.n	800ec20 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ec1c:	2303      	movs	r3, #3
 800ec1e:	e004      	b.n	800ec2a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	683a      	ldr	r2, [r7, #0]
 800ec24:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800ec28:	2300      	movs	r3, #0
}
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	370c      	adds	r7, #12
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec34:	4770      	bx	lr

0800ec36 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ec36:	b480      	push	{r7}
 800ec38:	b087      	sub	sp, #28
 800ec3a:	af00      	add	r7, sp, #0
 800ec3c:	60f8      	str	r0, [r7, #12]
 800ec3e:	60b9      	str	r1, [r7, #8]
 800ec40:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ec48:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800ec4a:	697b      	ldr	r3, [r7, #20]
 800ec4c:	68ba      	ldr	r2, [r7, #8]
 800ec4e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	687a      	ldr	r2, [r7, #4]
 800ec56:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ec5a:	2300      	movs	r3, #0
}
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	371c      	adds	r7, #28
 800ec60:	46bd      	mov	sp, r7
 800ec62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec66:	4770      	bx	lr

0800ec68 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ec68:	b480      	push	{r7}
 800ec6a:	b085      	sub	sp, #20
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
 800ec70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ec78:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	683a      	ldr	r2, [r7, #0]
 800ec7e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ec82:	2300      	movs	r3, #0
}
 800ec84:	4618      	mov	r0, r3
 800ec86:	3714      	adds	r7, #20
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8e:	4770      	bx	lr

0800ec90 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b084      	sub	sp, #16
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ec9e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d101      	bne.n	800ecae <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ecaa:	2303      	movs	r3, #3
 800ecac:	e016      	b.n	800ecdc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	7c1b      	ldrb	r3, [r3, #16]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d109      	bne.n	800ecca <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ecbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ecc0:	2101      	movs	r1, #1
 800ecc2:	6878      	ldr	r0, [r7, #4]
 800ecc4:	f001 fdee 	bl	80108a4 <USBD_LL_PrepareReceive>
 800ecc8:	e007      	b.n	800ecda <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ecd0:	2340      	movs	r3, #64	; 0x40
 800ecd2:	2101      	movs	r1, #1
 800ecd4:	6878      	ldr	r0, [r7, #4]
 800ecd6:	f001 fde5 	bl	80108a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ecda:	2300      	movs	r3, #0
}
 800ecdc:	4618      	mov	r0, r3
 800ecde:	3710      	adds	r7, #16
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd80      	pop	{r7, pc}

0800ece4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b086      	sub	sp, #24
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	60f8      	str	r0, [r7, #12]
 800ecec:	60b9      	str	r1, [r7, #8]
 800ecee:	4613      	mov	r3, r2
 800ecf0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d101      	bne.n	800ecfc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ecf8:	2303      	movs	r3, #3
 800ecfa:	e025      	b.n	800ed48 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d003      	beq.n	800ed0e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	2200      	movs	r2, #0
 800ed0a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d003      	beq.n	800ed20 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ed20:	68bb      	ldr	r3, [r7, #8]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d003      	beq.n	800ed2e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	68ba      	ldr	r2, [r7, #8]
 800ed2a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	2201      	movs	r2, #1
 800ed32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	79fa      	ldrb	r2, [r7, #7]
 800ed3a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ed3c:	68f8      	ldr	r0, [r7, #12]
 800ed3e:	f001 fc57 	bl	80105f0 <USBD_LL_Init>
 800ed42:	4603      	mov	r3, r0
 800ed44:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ed46:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed48:	4618      	mov	r0, r3
 800ed4a:	3718      	adds	r7, #24
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bd80      	pop	{r7, pc}

0800ed50 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b084      	sub	sp, #16
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
 800ed58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d101      	bne.n	800ed68 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ed64:	2303      	movs	r3, #3
 800ed66:	e010      	b.n	800ed8a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	683a      	ldr	r2, [r7, #0]
 800ed6c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed78:	f107 020e 	add.w	r2, r7, #14
 800ed7c:	4610      	mov	r0, r2
 800ed7e:	4798      	blx	r3
 800ed80:	4602      	mov	r2, r0
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800ed88:	2300      	movs	r3, #0
}
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	3710      	adds	r7, #16
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}

0800ed92 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ed92:	b580      	push	{r7, lr}
 800ed94:	b082      	sub	sp, #8
 800ed96:	af00      	add	r7, sp, #0
 800ed98:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	f001 fc78 	bl	8010690 <USBD_LL_Start>
 800eda0:	4603      	mov	r3, r0
}
 800eda2:	4618      	mov	r0, r3
 800eda4:	3708      	adds	r7, #8
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bd80      	pop	{r7, pc}

0800edaa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800edaa:	b480      	push	{r7}
 800edac:	b083      	sub	sp, #12
 800edae:	af00      	add	r7, sp, #0
 800edb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800edb2:	2300      	movs	r3, #0
}
 800edb4:	4618      	mov	r0, r3
 800edb6:	370c      	adds	r7, #12
 800edb8:	46bd      	mov	sp, r7
 800edba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edbe:	4770      	bx	lr

0800edc0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b084      	sub	sp, #16
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
 800edc8:	460b      	mov	r3, r1
 800edca:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800edcc:	2303      	movs	r3, #3
 800edce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d009      	beq.n	800edee <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	78fa      	ldrb	r2, [r7, #3]
 800ede4:	4611      	mov	r1, r2
 800ede6:	6878      	ldr	r0, [r7, #4]
 800ede8:	4798      	blx	r3
 800edea:	4603      	mov	r3, r0
 800edec:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800edee:	7bfb      	ldrb	r3, [r7, #15]
}
 800edf0:	4618      	mov	r0, r3
 800edf2:	3710      	adds	r7, #16
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}

0800edf8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b082      	sub	sp, #8
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
 800ee00:	460b      	mov	r3, r1
 800ee02:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d007      	beq.n	800ee1e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee14:	685b      	ldr	r3, [r3, #4]
 800ee16:	78fa      	ldrb	r2, [r7, #3]
 800ee18:	4611      	mov	r1, r2
 800ee1a:	6878      	ldr	r0, [r7, #4]
 800ee1c:	4798      	blx	r3
  }

  return USBD_OK;
 800ee1e:	2300      	movs	r3, #0
}
 800ee20:	4618      	mov	r0, r3
 800ee22:	3708      	adds	r7, #8
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bd80      	pop	{r7, pc}

0800ee28 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b084      	sub	sp, #16
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
 800ee30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ee38:	6839      	ldr	r1, [r7, #0]
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f000 ff2c 	bl	800fc98 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2201      	movs	r2, #1
 800ee44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ee4e:	461a      	mov	r2, r3
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ee5c:	f003 031f 	and.w	r3, r3, #31
 800ee60:	2b01      	cmp	r3, #1
 800ee62:	d00e      	beq.n	800ee82 <USBD_LL_SetupStage+0x5a>
 800ee64:	2b01      	cmp	r3, #1
 800ee66:	d302      	bcc.n	800ee6e <USBD_LL_SetupStage+0x46>
 800ee68:	2b02      	cmp	r3, #2
 800ee6a:	d014      	beq.n	800ee96 <USBD_LL_SetupStage+0x6e>
 800ee6c:	e01d      	b.n	800eeaa <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ee74:	4619      	mov	r1, r3
 800ee76:	6878      	ldr	r0, [r7, #4]
 800ee78:	f000 fa18 	bl	800f2ac <USBD_StdDevReq>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	73fb      	strb	r3, [r7, #15]
      break;
 800ee80:	e020      	b.n	800eec4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ee88:	4619      	mov	r1, r3
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f000 fa7c 	bl	800f388 <USBD_StdItfReq>
 800ee90:	4603      	mov	r3, r0
 800ee92:	73fb      	strb	r3, [r7, #15]
      break;
 800ee94:	e016      	b.n	800eec4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ee9c:	4619      	mov	r1, r3
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	f000 fab8 	bl	800f414 <USBD_StdEPReq>
 800eea4:	4603      	mov	r3, r0
 800eea6:	73fb      	strb	r3, [r7, #15]
      break;
 800eea8:	e00c      	b.n	800eec4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800eeb0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800eeb4:	b2db      	uxtb	r3, r3
 800eeb6:	4619      	mov	r1, r3
 800eeb8:	6878      	ldr	r0, [r7, #4]
 800eeba:	f001 fc49 	bl	8010750 <USBD_LL_StallEP>
 800eebe:	4603      	mov	r3, r0
 800eec0:	73fb      	strb	r3, [r7, #15]
      break;
 800eec2:	bf00      	nop
  }

  return ret;
 800eec4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eec6:	4618      	mov	r0, r3
 800eec8:	3710      	adds	r7, #16
 800eeca:	46bd      	mov	sp, r7
 800eecc:	bd80      	pop	{r7, pc}

0800eece <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800eece:	b580      	push	{r7, lr}
 800eed0:	b086      	sub	sp, #24
 800eed2:	af00      	add	r7, sp, #0
 800eed4:	60f8      	str	r0, [r7, #12]
 800eed6:	460b      	mov	r3, r1
 800eed8:	607a      	str	r2, [r7, #4]
 800eeda:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800eedc:	7afb      	ldrb	r3, [r7, #11]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d137      	bne.n	800ef52 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800eee8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800eef0:	2b03      	cmp	r3, #3
 800eef2:	d14a      	bne.n	800ef8a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800eef4:	693b      	ldr	r3, [r7, #16]
 800eef6:	689a      	ldr	r2, [r3, #8]
 800eef8:	693b      	ldr	r3, [r7, #16]
 800eefa:	68db      	ldr	r3, [r3, #12]
 800eefc:	429a      	cmp	r2, r3
 800eefe:	d913      	bls.n	800ef28 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ef00:	693b      	ldr	r3, [r7, #16]
 800ef02:	689a      	ldr	r2, [r3, #8]
 800ef04:	693b      	ldr	r3, [r7, #16]
 800ef06:	68db      	ldr	r3, [r3, #12]
 800ef08:	1ad2      	subs	r2, r2, r3
 800ef0a:	693b      	ldr	r3, [r7, #16]
 800ef0c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ef0e:	693b      	ldr	r3, [r7, #16]
 800ef10:	68da      	ldr	r2, [r3, #12]
 800ef12:	693b      	ldr	r3, [r7, #16]
 800ef14:	689b      	ldr	r3, [r3, #8]
 800ef16:	4293      	cmp	r3, r2
 800ef18:	bf28      	it	cs
 800ef1a:	4613      	movcs	r3, r2
 800ef1c:	461a      	mov	r2, r3
 800ef1e:	6879      	ldr	r1, [r7, #4]
 800ef20:	68f8      	ldr	r0, [r7, #12]
 800ef22:	f000 ffad 	bl	800fe80 <USBD_CtlContinueRx>
 800ef26:	e030      	b.n	800ef8a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef2e:	691b      	ldr	r3, [r3, #16]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d00a      	beq.n	800ef4a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ef3a:	2b03      	cmp	r3, #3
 800ef3c:	d105      	bne.n	800ef4a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef44:	691b      	ldr	r3, [r3, #16]
 800ef46:	68f8      	ldr	r0, [r7, #12]
 800ef48:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800ef4a:	68f8      	ldr	r0, [r7, #12]
 800ef4c:	f000 ffa9 	bl	800fea2 <USBD_CtlSendStatus>
 800ef50:	e01b      	b.n	800ef8a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef58:	699b      	ldr	r3, [r3, #24]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d013      	beq.n	800ef86 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800ef64:	2b03      	cmp	r3, #3
 800ef66:	d10e      	bne.n	800ef86 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef6e:	699b      	ldr	r3, [r3, #24]
 800ef70:	7afa      	ldrb	r2, [r7, #11]
 800ef72:	4611      	mov	r1, r2
 800ef74:	68f8      	ldr	r0, [r7, #12]
 800ef76:	4798      	blx	r3
 800ef78:	4603      	mov	r3, r0
 800ef7a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800ef7c:	7dfb      	ldrb	r3, [r7, #23]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d003      	beq.n	800ef8a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800ef82:	7dfb      	ldrb	r3, [r7, #23]
 800ef84:	e002      	b.n	800ef8c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ef86:	2303      	movs	r3, #3
 800ef88:	e000      	b.n	800ef8c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800ef8a:	2300      	movs	r3, #0
}
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	3718      	adds	r7, #24
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}

0800ef94 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b086      	sub	sp, #24
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	60f8      	str	r0, [r7, #12]
 800ef9c:	460b      	mov	r3, r1
 800ef9e:	607a      	str	r2, [r7, #4]
 800efa0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800efa2:	7afb      	ldrb	r3, [r7, #11]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d16a      	bne.n	800f07e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	3314      	adds	r3, #20
 800efac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800efb4:	2b02      	cmp	r3, #2
 800efb6:	d155      	bne.n	800f064 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800efb8:	693b      	ldr	r3, [r7, #16]
 800efba:	689a      	ldr	r2, [r3, #8]
 800efbc:	693b      	ldr	r3, [r7, #16]
 800efbe:	68db      	ldr	r3, [r3, #12]
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d914      	bls.n	800efee <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800efc4:	693b      	ldr	r3, [r7, #16]
 800efc6:	689a      	ldr	r2, [r3, #8]
 800efc8:	693b      	ldr	r3, [r7, #16]
 800efca:	68db      	ldr	r3, [r3, #12]
 800efcc:	1ad2      	subs	r2, r2, r3
 800efce:	693b      	ldr	r3, [r7, #16]
 800efd0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800efd2:	693b      	ldr	r3, [r7, #16]
 800efd4:	689b      	ldr	r3, [r3, #8]
 800efd6:	461a      	mov	r2, r3
 800efd8:	6879      	ldr	r1, [r7, #4]
 800efda:	68f8      	ldr	r0, [r7, #12]
 800efdc:	f000 ff22 	bl	800fe24 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800efe0:	2300      	movs	r3, #0
 800efe2:	2200      	movs	r2, #0
 800efe4:	2100      	movs	r1, #0
 800efe6:	68f8      	ldr	r0, [r7, #12]
 800efe8:	f001 fc5c 	bl	80108a4 <USBD_LL_PrepareReceive>
 800efec:	e03a      	b.n	800f064 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800efee:	693b      	ldr	r3, [r7, #16]
 800eff0:	68da      	ldr	r2, [r3, #12]
 800eff2:	693b      	ldr	r3, [r7, #16]
 800eff4:	689b      	ldr	r3, [r3, #8]
 800eff6:	429a      	cmp	r2, r3
 800eff8:	d11c      	bne.n	800f034 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800effa:	693b      	ldr	r3, [r7, #16]
 800effc:	685a      	ldr	r2, [r3, #4]
 800effe:	693b      	ldr	r3, [r7, #16]
 800f000:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f002:	429a      	cmp	r2, r3
 800f004:	d316      	bcc.n	800f034 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f006:	693b      	ldr	r3, [r7, #16]
 800f008:	685a      	ldr	r2, [r3, #4]
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f010:	429a      	cmp	r2, r3
 800f012:	d20f      	bcs.n	800f034 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f014:	2200      	movs	r2, #0
 800f016:	2100      	movs	r1, #0
 800f018:	68f8      	ldr	r0, [r7, #12]
 800f01a:	f000 ff03 	bl	800fe24 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	2200      	movs	r2, #0
 800f022:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f026:	2300      	movs	r3, #0
 800f028:	2200      	movs	r2, #0
 800f02a:	2100      	movs	r1, #0
 800f02c:	68f8      	ldr	r0, [r7, #12]
 800f02e:	f001 fc39 	bl	80108a4 <USBD_LL_PrepareReceive>
 800f032:	e017      	b.n	800f064 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f03a:	68db      	ldr	r3, [r3, #12]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d00a      	beq.n	800f056 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800f046:	2b03      	cmp	r3, #3
 800f048:	d105      	bne.n	800f056 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f050:	68db      	ldr	r3, [r3, #12]
 800f052:	68f8      	ldr	r0, [r7, #12]
 800f054:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f056:	2180      	movs	r1, #128	; 0x80
 800f058:	68f8      	ldr	r0, [r7, #12]
 800f05a:	f001 fb79 	bl	8010750 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f05e:	68f8      	ldr	r0, [r7, #12]
 800f060:	f000 ff32 	bl	800fec8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f06a:	2b01      	cmp	r3, #1
 800f06c:	d123      	bne.n	800f0b6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800f06e:	68f8      	ldr	r0, [r7, #12]
 800f070:	f7ff fe9b 	bl	800edaa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	2200      	movs	r2, #0
 800f078:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f07c:	e01b      	b.n	800f0b6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f084:	695b      	ldr	r3, [r3, #20]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d013      	beq.n	800f0b2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800f090:	2b03      	cmp	r3, #3
 800f092:	d10e      	bne.n	800f0b2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f09a:	695b      	ldr	r3, [r3, #20]
 800f09c:	7afa      	ldrb	r2, [r7, #11]
 800f09e:	4611      	mov	r1, r2
 800f0a0:	68f8      	ldr	r0, [r7, #12]
 800f0a2:	4798      	blx	r3
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800f0a8:	7dfb      	ldrb	r3, [r7, #23]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d003      	beq.n	800f0b6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800f0ae:	7dfb      	ldrb	r3, [r7, #23]
 800f0b0:	e002      	b.n	800f0b8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f0b2:	2303      	movs	r3, #3
 800f0b4:	e000      	b.n	800f0b8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800f0b6:	2300      	movs	r3, #0
}
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	3718      	adds	r7, #24
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	bd80      	pop	{r7, pc}

0800f0c0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b082      	sub	sp, #8
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2201      	movs	r2, #1
 800f0cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	2200      	movs	r2, #0
 800f0dc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d009      	beq.n	800f104 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0f6:	685b      	ldr	r3, [r3, #4]
 800f0f8:	687a      	ldr	r2, [r7, #4]
 800f0fa:	6852      	ldr	r2, [r2, #4]
 800f0fc:	b2d2      	uxtb	r2, r2
 800f0fe:	4611      	mov	r1, r2
 800f100:	6878      	ldr	r0, [r7, #4]
 800f102:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f104:	2340      	movs	r3, #64	; 0x40
 800f106:	2200      	movs	r2, #0
 800f108:	2100      	movs	r1, #0
 800f10a:	6878      	ldr	r0, [r7, #4]
 800f10c:	f001 fadb 	bl	80106c6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2201      	movs	r2, #1
 800f114:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	2240      	movs	r2, #64	; 0x40
 800f11c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f120:	2340      	movs	r3, #64	; 0x40
 800f122:	2200      	movs	r2, #0
 800f124:	2180      	movs	r1, #128	; 0x80
 800f126:	6878      	ldr	r0, [r7, #4]
 800f128:	f001 facd 	bl	80106c6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2201      	movs	r2, #1
 800f130:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	2240      	movs	r2, #64	; 0x40
 800f136:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f138:	2300      	movs	r3, #0
}
 800f13a:	4618      	mov	r0, r3
 800f13c:	3708      	adds	r7, #8
 800f13e:	46bd      	mov	sp, r7
 800f140:	bd80      	pop	{r7, pc}

0800f142 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f142:	b480      	push	{r7}
 800f144:	b083      	sub	sp, #12
 800f146:	af00      	add	r7, sp, #0
 800f148:	6078      	str	r0, [r7, #4]
 800f14a:	460b      	mov	r3, r1
 800f14c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	78fa      	ldrb	r2, [r7, #3]
 800f152:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f154:	2300      	movs	r3, #0
}
 800f156:	4618      	mov	r0, r3
 800f158:	370c      	adds	r7, #12
 800f15a:	46bd      	mov	sp, r7
 800f15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f160:	4770      	bx	lr

0800f162 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f162:	b480      	push	{r7}
 800f164:	b083      	sub	sp, #12
 800f166:	af00      	add	r7, sp, #0
 800f168:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	2204      	movs	r2, #4
 800f17a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f17e:	2300      	movs	r3, #0
}
 800f180:	4618      	mov	r0, r3
 800f182:	370c      	adds	r7, #12
 800f184:	46bd      	mov	sp, r7
 800f186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18a:	4770      	bx	lr

0800f18c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f18c:	b480      	push	{r7}
 800f18e:	b083      	sub	sp, #12
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f19a:	2b04      	cmp	r3, #4
 800f19c:	d105      	bne.n	800f1aa <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f1aa:	2300      	movs	r3, #0
}
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	370c      	adds	r7, #12
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b6:	4770      	bx	lr

0800f1b8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b082      	sub	sp, #8
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f1c6:	2b03      	cmp	r3, #3
 800f1c8:	d10b      	bne.n	800f1e2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1d0:	69db      	ldr	r3, [r3, #28]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d005      	beq.n	800f1e2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1dc:	69db      	ldr	r3, [r3, #28]
 800f1de:	6878      	ldr	r0, [r7, #4]
 800f1e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f1e2:	2300      	movs	r3, #0
}
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	3708      	adds	r7, #8
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	bd80      	pop	{r7, pc}

0800f1ec <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f1ec:	b480      	push	{r7}
 800f1ee:	b083      	sub	sp, #12
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
 800f1f4:	460b      	mov	r3, r1
 800f1f6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800f1f8:	2300      	movs	r3, #0
}
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	370c      	adds	r7, #12
 800f1fe:	46bd      	mov	sp, r7
 800f200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f204:	4770      	bx	lr

0800f206 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f206:	b480      	push	{r7}
 800f208:	b083      	sub	sp, #12
 800f20a:	af00      	add	r7, sp, #0
 800f20c:	6078      	str	r0, [r7, #4]
 800f20e:	460b      	mov	r3, r1
 800f210:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800f212:	2300      	movs	r3, #0
}
 800f214:	4618      	mov	r0, r3
 800f216:	370c      	adds	r7, #12
 800f218:	46bd      	mov	sp, r7
 800f21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21e:	4770      	bx	lr

0800f220 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f220:	b480      	push	{r7}
 800f222:	b083      	sub	sp, #12
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f228:	2300      	movs	r3, #0
}
 800f22a:	4618      	mov	r0, r3
 800f22c:	370c      	adds	r7, #12
 800f22e:	46bd      	mov	sp, r7
 800f230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f234:	4770      	bx	lr

0800f236 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f236:	b580      	push	{r7, lr}
 800f238:	b082      	sub	sp, #8
 800f23a:	af00      	add	r7, sp, #0
 800f23c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	2201      	movs	r2, #1
 800f242:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d009      	beq.n	800f264 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f256:	685b      	ldr	r3, [r3, #4]
 800f258:	687a      	ldr	r2, [r7, #4]
 800f25a:	6852      	ldr	r2, [r2, #4]
 800f25c:	b2d2      	uxtb	r2, r2
 800f25e:	4611      	mov	r1, r2
 800f260:	6878      	ldr	r0, [r7, #4]
 800f262:	4798      	blx	r3
  }

  return USBD_OK;
 800f264:	2300      	movs	r3, #0
}
 800f266:	4618      	mov	r0, r3
 800f268:	3708      	adds	r7, #8
 800f26a:	46bd      	mov	sp, r7
 800f26c:	bd80      	pop	{r7, pc}

0800f26e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f26e:	b480      	push	{r7}
 800f270:	b087      	sub	sp, #28
 800f272:	af00      	add	r7, sp, #0
 800f274:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	781b      	ldrb	r3, [r3, #0]
 800f27e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f280:	697b      	ldr	r3, [r7, #20]
 800f282:	3301      	adds	r3, #1
 800f284:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f286:	697b      	ldr	r3, [r7, #20]
 800f288:	781b      	ldrb	r3, [r3, #0]
 800f28a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f28c:	8a3b      	ldrh	r3, [r7, #16]
 800f28e:	021b      	lsls	r3, r3, #8
 800f290:	b21a      	sxth	r2, r3
 800f292:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f296:	4313      	orrs	r3, r2
 800f298:	b21b      	sxth	r3, r3
 800f29a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f29c:	89fb      	ldrh	r3, [r7, #14]
}
 800f29e:	4618      	mov	r0, r3
 800f2a0:	371c      	adds	r7, #28
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a8:	4770      	bx	lr
	...

0800f2ac <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b084      	sub	sp, #16
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
 800f2b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f2ba:	683b      	ldr	r3, [r7, #0]
 800f2bc:	781b      	ldrb	r3, [r3, #0]
 800f2be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f2c2:	2b20      	cmp	r3, #32
 800f2c4:	d004      	beq.n	800f2d0 <USBD_StdDevReq+0x24>
 800f2c6:	2b40      	cmp	r3, #64	; 0x40
 800f2c8:	d002      	beq.n	800f2d0 <USBD_StdDevReq+0x24>
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d00a      	beq.n	800f2e4 <USBD_StdDevReq+0x38>
 800f2ce:	e050      	b.n	800f372 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f2d6:	689b      	ldr	r3, [r3, #8]
 800f2d8:	6839      	ldr	r1, [r7, #0]
 800f2da:	6878      	ldr	r0, [r7, #4]
 800f2dc:	4798      	blx	r3
 800f2de:	4603      	mov	r3, r0
 800f2e0:	73fb      	strb	r3, [r7, #15]
    break;
 800f2e2:	e04b      	b.n	800f37c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	785b      	ldrb	r3, [r3, #1]
 800f2e8:	2b09      	cmp	r3, #9
 800f2ea:	d83c      	bhi.n	800f366 <USBD_StdDevReq+0xba>
 800f2ec:	a201      	add	r2, pc, #4	; (adr r2, 800f2f4 <USBD_StdDevReq+0x48>)
 800f2ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2f2:	bf00      	nop
 800f2f4:	0800f349 	.word	0x0800f349
 800f2f8:	0800f35d 	.word	0x0800f35d
 800f2fc:	0800f367 	.word	0x0800f367
 800f300:	0800f353 	.word	0x0800f353
 800f304:	0800f367 	.word	0x0800f367
 800f308:	0800f327 	.word	0x0800f327
 800f30c:	0800f31d 	.word	0x0800f31d
 800f310:	0800f367 	.word	0x0800f367
 800f314:	0800f33f 	.word	0x0800f33f
 800f318:	0800f331 	.word	0x0800f331
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800f31c:	6839      	ldr	r1, [r7, #0]
 800f31e:	6878      	ldr	r0, [r7, #4]
 800f320:	f000 f9ce 	bl	800f6c0 <USBD_GetDescriptor>
      break;
 800f324:	e024      	b.n	800f370 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800f326:	6839      	ldr	r1, [r7, #0]
 800f328:	6878      	ldr	r0, [r7, #4]
 800f32a:	f000 fb33 	bl	800f994 <USBD_SetAddress>
      break;
 800f32e:	e01f      	b.n	800f370 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800f330:	6839      	ldr	r1, [r7, #0]
 800f332:	6878      	ldr	r0, [r7, #4]
 800f334:	f000 fb70 	bl	800fa18 <USBD_SetConfig>
 800f338:	4603      	mov	r3, r0
 800f33a:	73fb      	strb	r3, [r7, #15]
      break;
 800f33c:	e018      	b.n	800f370 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800f33e:	6839      	ldr	r1, [r7, #0]
 800f340:	6878      	ldr	r0, [r7, #4]
 800f342:	f000 fc0d 	bl	800fb60 <USBD_GetConfig>
      break;
 800f346:	e013      	b.n	800f370 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800f348:	6839      	ldr	r1, [r7, #0]
 800f34a:	6878      	ldr	r0, [r7, #4]
 800f34c:	f000 fc3c 	bl	800fbc8 <USBD_GetStatus>
      break;
 800f350:	e00e      	b.n	800f370 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800f352:	6839      	ldr	r1, [r7, #0]
 800f354:	6878      	ldr	r0, [r7, #4]
 800f356:	f000 fc6a 	bl	800fc2e <USBD_SetFeature>
      break;
 800f35a:	e009      	b.n	800f370 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800f35c:	6839      	ldr	r1, [r7, #0]
 800f35e:	6878      	ldr	r0, [r7, #4]
 800f360:	f000 fc79 	bl	800fc56 <USBD_ClrFeature>
      break;
 800f364:	e004      	b.n	800f370 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800f366:	6839      	ldr	r1, [r7, #0]
 800f368:	6878      	ldr	r0, [r7, #4]
 800f36a:	f000 fccf 	bl	800fd0c <USBD_CtlError>
      break;
 800f36e:	bf00      	nop
    }
    break;
 800f370:	e004      	b.n	800f37c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800f372:	6839      	ldr	r1, [r7, #0]
 800f374:	6878      	ldr	r0, [r7, #4]
 800f376:	f000 fcc9 	bl	800fd0c <USBD_CtlError>
    break;
 800f37a:	bf00      	nop
  }

  return ret;
 800f37c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f37e:	4618      	mov	r0, r3
 800f380:	3710      	adds	r7, #16
 800f382:	46bd      	mov	sp, r7
 800f384:	bd80      	pop	{r7, pc}
 800f386:	bf00      	nop

0800f388 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b084      	sub	sp, #16
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
 800f390:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f392:	2300      	movs	r3, #0
 800f394:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	781b      	ldrb	r3, [r3, #0]
 800f39a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f39e:	2b20      	cmp	r3, #32
 800f3a0:	d003      	beq.n	800f3aa <USBD_StdItfReq+0x22>
 800f3a2:	2b40      	cmp	r3, #64	; 0x40
 800f3a4:	d001      	beq.n	800f3aa <USBD_StdItfReq+0x22>
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d12a      	bne.n	800f400 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3b0:	3b01      	subs	r3, #1
 800f3b2:	2b02      	cmp	r3, #2
 800f3b4:	d81d      	bhi.n	800f3f2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	889b      	ldrh	r3, [r3, #4]
 800f3ba:	b2db      	uxtb	r3, r3
 800f3bc:	2b01      	cmp	r3, #1
 800f3be:	d813      	bhi.n	800f3e8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3c6:	689b      	ldr	r3, [r3, #8]
 800f3c8:	6839      	ldr	r1, [r7, #0]
 800f3ca:	6878      	ldr	r0, [r7, #4]
 800f3cc:	4798      	blx	r3
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800f3d2:	683b      	ldr	r3, [r7, #0]
 800f3d4:	88db      	ldrh	r3, [r3, #6]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d110      	bne.n	800f3fc <USBD_StdItfReq+0x74>
 800f3da:	7bfb      	ldrb	r3, [r7, #15]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d10d      	bne.n	800f3fc <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800f3e0:	6878      	ldr	r0, [r7, #4]
 800f3e2:	f000 fd5e 	bl	800fea2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800f3e6:	e009      	b.n	800f3fc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800f3e8:	6839      	ldr	r1, [r7, #0]
 800f3ea:	6878      	ldr	r0, [r7, #4]
 800f3ec:	f000 fc8e 	bl	800fd0c <USBD_CtlError>
      break;
 800f3f0:	e004      	b.n	800f3fc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800f3f2:	6839      	ldr	r1, [r7, #0]
 800f3f4:	6878      	ldr	r0, [r7, #4]
 800f3f6:	f000 fc89 	bl	800fd0c <USBD_CtlError>
      break;
 800f3fa:	e000      	b.n	800f3fe <USBD_StdItfReq+0x76>
      break;
 800f3fc:	bf00      	nop
    }
    break;
 800f3fe:	e004      	b.n	800f40a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800f400:	6839      	ldr	r1, [r7, #0]
 800f402:	6878      	ldr	r0, [r7, #4]
 800f404:	f000 fc82 	bl	800fd0c <USBD_CtlError>
    break;
 800f408:	bf00      	nop
  }

  return ret;
 800f40a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f40c:	4618      	mov	r0, r3
 800f40e:	3710      	adds	r7, #16
 800f410:	46bd      	mov	sp, r7
 800f412:	bd80      	pop	{r7, pc}

0800f414 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b084      	sub	sp, #16
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
 800f41c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f41e:	2300      	movs	r3, #0
 800f420:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	889b      	ldrh	r3, [r3, #4]
 800f426:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	781b      	ldrb	r3, [r3, #0]
 800f42c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f430:	2b20      	cmp	r3, #32
 800f432:	d004      	beq.n	800f43e <USBD_StdEPReq+0x2a>
 800f434:	2b40      	cmp	r3, #64	; 0x40
 800f436:	d002      	beq.n	800f43e <USBD_StdEPReq+0x2a>
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d00a      	beq.n	800f452 <USBD_StdEPReq+0x3e>
 800f43c:	e135      	b.n	800f6aa <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f444:	689b      	ldr	r3, [r3, #8]
 800f446:	6839      	ldr	r1, [r7, #0]
 800f448:	6878      	ldr	r0, [r7, #4]
 800f44a:	4798      	blx	r3
 800f44c:	4603      	mov	r3, r0
 800f44e:	73fb      	strb	r3, [r7, #15]
    break;
 800f450:	e130      	b.n	800f6b4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800f452:	683b      	ldr	r3, [r7, #0]
 800f454:	785b      	ldrb	r3, [r3, #1]
 800f456:	2b01      	cmp	r3, #1
 800f458:	d03e      	beq.n	800f4d8 <USBD_StdEPReq+0xc4>
 800f45a:	2b03      	cmp	r3, #3
 800f45c:	d002      	beq.n	800f464 <USBD_StdEPReq+0x50>
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d077      	beq.n	800f552 <USBD_StdEPReq+0x13e>
 800f462:	e11c      	b.n	800f69e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f46a:	2b02      	cmp	r3, #2
 800f46c:	d002      	beq.n	800f474 <USBD_StdEPReq+0x60>
 800f46e:	2b03      	cmp	r3, #3
 800f470:	d015      	beq.n	800f49e <USBD_StdEPReq+0x8a>
 800f472:	e02b      	b.n	800f4cc <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f474:	7bbb      	ldrb	r3, [r7, #14]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d00c      	beq.n	800f494 <USBD_StdEPReq+0x80>
 800f47a:	7bbb      	ldrb	r3, [r7, #14]
 800f47c:	2b80      	cmp	r3, #128	; 0x80
 800f47e:	d009      	beq.n	800f494 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800f480:	7bbb      	ldrb	r3, [r7, #14]
 800f482:	4619      	mov	r1, r3
 800f484:	6878      	ldr	r0, [r7, #4]
 800f486:	f001 f963 	bl	8010750 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f48a:	2180      	movs	r1, #128	; 0x80
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	f001 f95f 	bl	8010750 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800f492:	e020      	b.n	800f4d6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800f494:	6839      	ldr	r1, [r7, #0]
 800f496:	6878      	ldr	r0, [r7, #4]
 800f498:	f000 fc38 	bl	800fd0c <USBD_CtlError>
        break;
 800f49c:	e01b      	b.n	800f4d6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	885b      	ldrh	r3, [r3, #2]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d10e      	bne.n	800f4c4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f4a6:	7bbb      	ldrb	r3, [r7, #14]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d00b      	beq.n	800f4c4 <USBD_StdEPReq+0xb0>
 800f4ac:	7bbb      	ldrb	r3, [r7, #14]
 800f4ae:	2b80      	cmp	r3, #128	; 0x80
 800f4b0:	d008      	beq.n	800f4c4 <USBD_StdEPReq+0xb0>
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	88db      	ldrh	r3, [r3, #6]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d104      	bne.n	800f4c4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800f4ba:	7bbb      	ldrb	r3, [r7, #14]
 800f4bc:	4619      	mov	r1, r3
 800f4be:	6878      	ldr	r0, [r7, #4]
 800f4c0:	f001 f946 	bl	8010750 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800f4c4:	6878      	ldr	r0, [r7, #4]
 800f4c6:	f000 fcec 	bl	800fea2 <USBD_CtlSendStatus>

        break;
 800f4ca:	e004      	b.n	800f4d6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800f4cc:	6839      	ldr	r1, [r7, #0]
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	f000 fc1c 	bl	800fd0c <USBD_CtlError>
        break;
 800f4d4:	bf00      	nop
      }
      break;
 800f4d6:	e0e7      	b.n	800f6a8 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f4de:	2b02      	cmp	r3, #2
 800f4e0:	d002      	beq.n	800f4e8 <USBD_StdEPReq+0xd4>
 800f4e2:	2b03      	cmp	r3, #3
 800f4e4:	d015      	beq.n	800f512 <USBD_StdEPReq+0xfe>
 800f4e6:	e02d      	b.n	800f544 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f4e8:	7bbb      	ldrb	r3, [r7, #14]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d00c      	beq.n	800f508 <USBD_StdEPReq+0xf4>
 800f4ee:	7bbb      	ldrb	r3, [r7, #14]
 800f4f0:	2b80      	cmp	r3, #128	; 0x80
 800f4f2:	d009      	beq.n	800f508 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800f4f4:	7bbb      	ldrb	r3, [r7, #14]
 800f4f6:	4619      	mov	r1, r3
 800f4f8:	6878      	ldr	r0, [r7, #4]
 800f4fa:	f001 f929 	bl	8010750 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f4fe:	2180      	movs	r1, #128	; 0x80
 800f500:	6878      	ldr	r0, [r7, #4]
 800f502:	f001 f925 	bl	8010750 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800f506:	e023      	b.n	800f550 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800f508:	6839      	ldr	r1, [r7, #0]
 800f50a:	6878      	ldr	r0, [r7, #4]
 800f50c:	f000 fbfe 	bl	800fd0c <USBD_CtlError>
        break;
 800f510:	e01e      	b.n	800f550 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800f512:	683b      	ldr	r3, [r7, #0]
 800f514:	885b      	ldrh	r3, [r3, #2]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d119      	bne.n	800f54e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800f51a:	7bbb      	ldrb	r3, [r7, #14]
 800f51c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f520:	2b00      	cmp	r3, #0
 800f522:	d004      	beq.n	800f52e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f524:	7bbb      	ldrb	r3, [r7, #14]
 800f526:	4619      	mov	r1, r3
 800f528:	6878      	ldr	r0, [r7, #4]
 800f52a:	f001 f930 	bl	801078e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800f52e:	6878      	ldr	r0, [r7, #4]
 800f530:	f000 fcb7 	bl	800fea2 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f53a:	689b      	ldr	r3, [r3, #8]
 800f53c:	6839      	ldr	r1, [r7, #0]
 800f53e:	6878      	ldr	r0, [r7, #4]
 800f540:	4798      	blx	r3
        }
        break;
 800f542:	e004      	b.n	800f54e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800f544:	6839      	ldr	r1, [r7, #0]
 800f546:	6878      	ldr	r0, [r7, #4]
 800f548:	f000 fbe0 	bl	800fd0c <USBD_CtlError>
        break;
 800f54c:	e000      	b.n	800f550 <USBD_StdEPReq+0x13c>
        break;
 800f54e:	bf00      	nop
      }
      break;
 800f550:	e0aa      	b.n	800f6a8 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f558:	2b02      	cmp	r3, #2
 800f55a:	d002      	beq.n	800f562 <USBD_StdEPReq+0x14e>
 800f55c:	2b03      	cmp	r3, #3
 800f55e:	d032      	beq.n	800f5c6 <USBD_StdEPReq+0x1b2>
 800f560:	e097      	b.n	800f692 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f562:	7bbb      	ldrb	r3, [r7, #14]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d007      	beq.n	800f578 <USBD_StdEPReq+0x164>
 800f568:	7bbb      	ldrb	r3, [r7, #14]
 800f56a:	2b80      	cmp	r3, #128	; 0x80
 800f56c:	d004      	beq.n	800f578 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800f56e:	6839      	ldr	r1, [r7, #0]
 800f570:	6878      	ldr	r0, [r7, #4]
 800f572:	f000 fbcb 	bl	800fd0c <USBD_CtlError>
          break;
 800f576:	e091      	b.n	800f69c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f578:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	da0b      	bge.n	800f598 <USBD_StdEPReq+0x184>
 800f580:	7bbb      	ldrb	r3, [r7, #14]
 800f582:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f586:	4613      	mov	r3, r2
 800f588:	009b      	lsls	r3, r3, #2
 800f58a:	4413      	add	r3, r2
 800f58c:	009b      	lsls	r3, r3, #2
 800f58e:	3310      	adds	r3, #16
 800f590:	687a      	ldr	r2, [r7, #4]
 800f592:	4413      	add	r3, r2
 800f594:	3304      	adds	r3, #4
 800f596:	e00b      	b.n	800f5b0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800f598:	7bbb      	ldrb	r3, [r7, #14]
 800f59a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f59e:	4613      	mov	r3, r2
 800f5a0:	009b      	lsls	r3, r3, #2
 800f5a2:	4413      	add	r3, r2
 800f5a4:	009b      	lsls	r3, r3, #2
 800f5a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f5aa:	687a      	ldr	r2, [r7, #4]
 800f5ac:	4413      	add	r3, r2
 800f5ae:	3304      	adds	r3, #4
 800f5b0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f5b8:	68bb      	ldr	r3, [r7, #8]
 800f5ba:	2202      	movs	r2, #2
 800f5bc:	4619      	mov	r1, r3
 800f5be:	6878      	ldr	r0, [r7, #4]
 800f5c0:	f000 fc15 	bl	800fdee <USBD_CtlSendData>
        break;
 800f5c4:	e06a      	b.n	800f69c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800f5c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	da11      	bge.n	800f5f2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f5ce:	7bbb      	ldrb	r3, [r7, #14]
 800f5d0:	f003 020f 	and.w	r2, r3, #15
 800f5d4:	6879      	ldr	r1, [r7, #4]
 800f5d6:	4613      	mov	r3, r2
 800f5d8:	009b      	lsls	r3, r3, #2
 800f5da:	4413      	add	r3, r2
 800f5dc:	009b      	lsls	r3, r3, #2
 800f5de:	440b      	add	r3, r1
 800f5e0:	3324      	adds	r3, #36	; 0x24
 800f5e2:	881b      	ldrh	r3, [r3, #0]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d117      	bne.n	800f618 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800f5e8:	6839      	ldr	r1, [r7, #0]
 800f5ea:	6878      	ldr	r0, [r7, #4]
 800f5ec:	f000 fb8e 	bl	800fd0c <USBD_CtlError>
            break;
 800f5f0:	e054      	b.n	800f69c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f5f2:	7bbb      	ldrb	r3, [r7, #14]
 800f5f4:	f003 020f 	and.w	r2, r3, #15
 800f5f8:	6879      	ldr	r1, [r7, #4]
 800f5fa:	4613      	mov	r3, r2
 800f5fc:	009b      	lsls	r3, r3, #2
 800f5fe:	4413      	add	r3, r2
 800f600:	009b      	lsls	r3, r3, #2
 800f602:	440b      	add	r3, r1
 800f604:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f608:	881b      	ldrh	r3, [r3, #0]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d104      	bne.n	800f618 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800f60e:	6839      	ldr	r1, [r7, #0]
 800f610:	6878      	ldr	r0, [r7, #4]
 800f612:	f000 fb7b 	bl	800fd0c <USBD_CtlError>
            break;
 800f616:	e041      	b.n	800f69c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f618:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	da0b      	bge.n	800f638 <USBD_StdEPReq+0x224>
 800f620:	7bbb      	ldrb	r3, [r7, #14]
 800f622:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f626:	4613      	mov	r3, r2
 800f628:	009b      	lsls	r3, r3, #2
 800f62a:	4413      	add	r3, r2
 800f62c:	009b      	lsls	r3, r3, #2
 800f62e:	3310      	adds	r3, #16
 800f630:	687a      	ldr	r2, [r7, #4]
 800f632:	4413      	add	r3, r2
 800f634:	3304      	adds	r3, #4
 800f636:	e00b      	b.n	800f650 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800f638:	7bbb      	ldrb	r3, [r7, #14]
 800f63a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f63e:	4613      	mov	r3, r2
 800f640:	009b      	lsls	r3, r3, #2
 800f642:	4413      	add	r3, r2
 800f644:	009b      	lsls	r3, r3, #2
 800f646:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f64a:	687a      	ldr	r2, [r7, #4]
 800f64c:	4413      	add	r3, r2
 800f64e:	3304      	adds	r3, #4
 800f650:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f652:	7bbb      	ldrb	r3, [r7, #14]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d002      	beq.n	800f65e <USBD_StdEPReq+0x24a>
 800f658:	7bbb      	ldrb	r3, [r7, #14]
 800f65a:	2b80      	cmp	r3, #128	; 0x80
 800f65c:	d103      	bne.n	800f666 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800f65e:	68bb      	ldr	r3, [r7, #8]
 800f660:	2200      	movs	r2, #0
 800f662:	601a      	str	r2, [r3, #0]
 800f664:	e00e      	b.n	800f684 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f666:	7bbb      	ldrb	r3, [r7, #14]
 800f668:	4619      	mov	r1, r3
 800f66a:	6878      	ldr	r0, [r7, #4]
 800f66c:	f001 f8ae 	bl	80107cc <USBD_LL_IsStallEP>
 800f670:	4603      	mov	r3, r0
 800f672:	2b00      	cmp	r3, #0
 800f674:	d003      	beq.n	800f67e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800f676:	68bb      	ldr	r3, [r7, #8]
 800f678:	2201      	movs	r2, #1
 800f67a:	601a      	str	r2, [r3, #0]
 800f67c:	e002      	b.n	800f684 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800f67e:	68bb      	ldr	r3, [r7, #8]
 800f680:	2200      	movs	r2, #0
 800f682:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f684:	68bb      	ldr	r3, [r7, #8]
 800f686:	2202      	movs	r2, #2
 800f688:	4619      	mov	r1, r3
 800f68a:	6878      	ldr	r0, [r7, #4]
 800f68c:	f000 fbaf 	bl	800fdee <USBD_CtlSendData>
          break;
 800f690:	e004      	b.n	800f69c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800f692:	6839      	ldr	r1, [r7, #0]
 800f694:	6878      	ldr	r0, [r7, #4]
 800f696:	f000 fb39 	bl	800fd0c <USBD_CtlError>
        break;
 800f69a:	bf00      	nop
      }
      break;
 800f69c:	e004      	b.n	800f6a8 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800f69e:	6839      	ldr	r1, [r7, #0]
 800f6a0:	6878      	ldr	r0, [r7, #4]
 800f6a2:	f000 fb33 	bl	800fd0c <USBD_CtlError>
      break;
 800f6a6:	bf00      	nop
    }
    break;
 800f6a8:	e004      	b.n	800f6b4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800f6aa:	6839      	ldr	r1, [r7, #0]
 800f6ac:	6878      	ldr	r0, [r7, #4]
 800f6ae:	f000 fb2d 	bl	800fd0c <USBD_CtlError>
    break;
 800f6b2:	bf00      	nop
  }

  return ret;
 800f6b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	3710      	adds	r7, #16
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}
	...

0800f6c0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b084      	sub	sp, #16
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
 800f6c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f6d6:	683b      	ldr	r3, [r7, #0]
 800f6d8:	885b      	ldrh	r3, [r3, #2]
 800f6da:	0a1b      	lsrs	r3, r3, #8
 800f6dc:	b29b      	uxth	r3, r3
 800f6de:	3b01      	subs	r3, #1
 800f6e0:	2b06      	cmp	r3, #6
 800f6e2:	f200 8128 	bhi.w	800f936 <USBD_GetDescriptor+0x276>
 800f6e6:	a201      	add	r2, pc, #4	; (adr r2, 800f6ec <USBD_GetDescriptor+0x2c>)
 800f6e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6ec:	0800f709 	.word	0x0800f709
 800f6f0:	0800f721 	.word	0x0800f721
 800f6f4:	0800f761 	.word	0x0800f761
 800f6f8:	0800f937 	.word	0x0800f937
 800f6fc:	0800f937 	.word	0x0800f937
 800f700:	0800f8d7 	.word	0x0800f8d7
 800f704:	0800f903 	.word	0x0800f903
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	687a      	ldr	r2, [r7, #4]
 800f712:	7c12      	ldrb	r2, [r2, #16]
 800f714:	f107 0108 	add.w	r1, r7, #8
 800f718:	4610      	mov	r0, r2
 800f71a:	4798      	blx	r3
 800f71c:	60f8      	str	r0, [r7, #12]
    break;
 800f71e:	e112      	b.n	800f946 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	7c1b      	ldrb	r3, [r3, #16]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d10d      	bne.n	800f744 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f72e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f730:	f107 0208 	add.w	r2, r7, #8
 800f734:	4610      	mov	r0, r2
 800f736:	4798      	blx	r3
 800f738:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	3301      	adds	r3, #1
 800f73e:	2202      	movs	r2, #2
 800f740:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800f742:	e100      	b.n	800f946 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f74c:	f107 0208 	add.w	r2, r7, #8
 800f750:	4610      	mov	r0, r2
 800f752:	4798      	blx	r3
 800f754:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	3301      	adds	r3, #1
 800f75a:	2202      	movs	r2, #2
 800f75c:	701a      	strb	r2, [r3, #0]
    break;
 800f75e:	e0f2      	b.n	800f946 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800f760:	683b      	ldr	r3, [r7, #0]
 800f762:	885b      	ldrh	r3, [r3, #2]
 800f764:	b2db      	uxtb	r3, r3
 800f766:	2b05      	cmp	r3, #5
 800f768:	f200 80ac 	bhi.w	800f8c4 <USBD_GetDescriptor+0x204>
 800f76c:	a201      	add	r2, pc, #4	; (adr r2, 800f774 <USBD_GetDescriptor+0xb4>)
 800f76e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f772:	bf00      	nop
 800f774:	0800f78d 	.word	0x0800f78d
 800f778:	0800f7c1 	.word	0x0800f7c1
 800f77c:	0800f7f5 	.word	0x0800f7f5
 800f780:	0800f829 	.word	0x0800f829
 800f784:	0800f85d 	.word	0x0800f85d
 800f788:	0800f891 	.word	0x0800f891
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f792:	685b      	ldr	r3, [r3, #4]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d00b      	beq.n	800f7b0 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f79e:	685b      	ldr	r3, [r3, #4]
 800f7a0:	687a      	ldr	r2, [r7, #4]
 800f7a2:	7c12      	ldrb	r2, [r2, #16]
 800f7a4:	f107 0108 	add.w	r1, r7, #8
 800f7a8:	4610      	mov	r0, r2
 800f7aa:	4798      	blx	r3
 800f7ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f7ae:	e091      	b.n	800f8d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f7b0:	6839      	ldr	r1, [r7, #0]
 800f7b2:	6878      	ldr	r0, [r7, #4]
 800f7b4:	f000 faaa 	bl	800fd0c <USBD_CtlError>
        err++;
 800f7b8:	7afb      	ldrb	r3, [r7, #11]
 800f7ba:	3301      	adds	r3, #1
 800f7bc:	72fb      	strb	r3, [r7, #11]
      break;
 800f7be:	e089      	b.n	800f8d4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7c6:	689b      	ldr	r3, [r3, #8]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d00b      	beq.n	800f7e4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7d2:	689b      	ldr	r3, [r3, #8]
 800f7d4:	687a      	ldr	r2, [r7, #4]
 800f7d6:	7c12      	ldrb	r2, [r2, #16]
 800f7d8:	f107 0108 	add.w	r1, r7, #8
 800f7dc:	4610      	mov	r0, r2
 800f7de:	4798      	blx	r3
 800f7e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f7e2:	e077      	b.n	800f8d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f7e4:	6839      	ldr	r1, [r7, #0]
 800f7e6:	6878      	ldr	r0, [r7, #4]
 800f7e8:	f000 fa90 	bl	800fd0c <USBD_CtlError>
        err++;
 800f7ec:	7afb      	ldrb	r3, [r7, #11]
 800f7ee:	3301      	adds	r3, #1
 800f7f0:	72fb      	strb	r3, [r7, #11]
      break;
 800f7f2:	e06f      	b.n	800f8d4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f7fa:	68db      	ldr	r3, [r3, #12]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d00b      	beq.n	800f818 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f806:	68db      	ldr	r3, [r3, #12]
 800f808:	687a      	ldr	r2, [r7, #4]
 800f80a:	7c12      	ldrb	r2, [r2, #16]
 800f80c:	f107 0108 	add.w	r1, r7, #8
 800f810:	4610      	mov	r0, r2
 800f812:	4798      	blx	r3
 800f814:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f816:	e05d      	b.n	800f8d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f818:	6839      	ldr	r1, [r7, #0]
 800f81a:	6878      	ldr	r0, [r7, #4]
 800f81c:	f000 fa76 	bl	800fd0c <USBD_CtlError>
        err++;
 800f820:	7afb      	ldrb	r3, [r7, #11]
 800f822:	3301      	adds	r3, #1
 800f824:	72fb      	strb	r3, [r7, #11]
      break;
 800f826:	e055      	b.n	800f8d4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f82e:	691b      	ldr	r3, [r3, #16]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d00b      	beq.n	800f84c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f83a:	691b      	ldr	r3, [r3, #16]
 800f83c:	687a      	ldr	r2, [r7, #4]
 800f83e:	7c12      	ldrb	r2, [r2, #16]
 800f840:	f107 0108 	add.w	r1, r7, #8
 800f844:	4610      	mov	r0, r2
 800f846:	4798      	blx	r3
 800f848:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f84a:	e043      	b.n	800f8d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f84c:	6839      	ldr	r1, [r7, #0]
 800f84e:	6878      	ldr	r0, [r7, #4]
 800f850:	f000 fa5c 	bl	800fd0c <USBD_CtlError>
        err++;
 800f854:	7afb      	ldrb	r3, [r7, #11]
 800f856:	3301      	adds	r3, #1
 800f858:	72fb      	strb	r3, [r7, #11]
      break;
 800f85a:	e03b      	b.n	800f8d4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f862:	695b      	ldr	r3, [r3, #20]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d00b      	beq.n	800f880 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f86e:	695b      	ldr	r3, [r3, #20]
 800f870:	687a      	ldr	r2, [r7, #4]
 800f872:	7c12      	ldrb	r2, [r2, #16]
 800f874:	f107 0108 	add.w	r1, r7, #8
 800f878:	4610      	mov	r0, r2
 800f87a:	4798      	blx	r3
 800f87c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f87e:	e029      	b.n	800f8d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f880:	6839      	ldr	r1, [r7, #0]
 800f882:	6878      	ldr	r0, [r7, #4]
 800f884:	f000 fa42 	bl	800fd0c <USBD_CtlError>
        err++;
 800f888:	7afb      	ldrb	r3, [r7, #11]
 800f88a:	3301      	adds	r3, #1
 800f88c:	72fb      	strb	r3, [r7, #11]
      break;
 800f88e:	e021      	b.n	800f8d4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f896:	699b      	ldr	r3, [r3, #24]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d00b      	beq.n	800f8b4 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f8a2:	699b      	ldr	r3, [r3, #24]
 800f8a4:	687a      	ldr	r2, [r7, #4]
 800f8a6:	7c12      	ldrb	r2, [r2, #16]
 800f8a8:	f107 0108 	add.w	r1, r7, #8
 800f8ac:	4610      	mov	r0, r2
 800f8ae:	4798      	blx	r3
 800f8b0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f8b2:	e00f      	b.n	800f8d4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f8b4:	6839      	ldr	r1, [r7, #0]
 800f8b6:	6878      	ldr	r0, [r7, #4]
 800f8b8:	f000 fa28 	bl	800fd0c <USBD_CtlError>
        err++;
 800f8bc:	7afb      	ldrb	r3, [r7, #11]
 800f8be:	3301      	adds	r3, #1
 800f8c0:	72fb      	strb	r3, [r7, #11]
      break;
 800f8c2:	e007      	b.n	800f8d4 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800f8c4:	6839      	ldr	r1, [r7, #0]
 800f8c6:	6878      	ldr	r0, [r7, #4]
 800f8c8:	f000 fa20 	bl	800fd0c <USBD_CtlError>
      err++;
 800f8cc:	7afb      	ldrb	r3, [r7, #11]
 800f8ce:	3301      	adds	r3, #1
 800f8d0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800f8d2:	bf00      	nop
    }
    break;
 800f8d4:	e037      	b.n	800f946 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	7c1b      	ldrb	r3, [r3, #16]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d109      	bne.n	800f8f2 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8e6:	f107 0208 	add.w	r2, r7, #8
 800f8ea:	4610      	mov	r0, r2
 800f8ec:	4798      	blx	r3
 800f8ee:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f8f0:	e029      	b.n	800f946 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800f8f2:	6839      	ldr	r1, [r7, #0]
 800f8f4:	6878      	ldr	r0, [r7, #4]
 800f8f6:	f000 fa09 	bl	800fd0c <USBD_CtlError>
      err++;
 800f8fa:	7afb      	ldrb	r3, [r7, #11]
 800f8fc:	3301      	adds	r3, #1
 800f8fe:	72fb      	strb	r3, [r7, #11]
    break;
 800f900:	e021      	b.n	800f946 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	7c1b      	ldrb	r3, [r3, #16]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d10d      	bne.n	800f926 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f912:	f107 0208 	add.w	r2, r7, #8
 800f916:	4610      	mov	r0, r2
 800f918:	4798      	blx	r3
 800f91a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	3301      	adds	r3, #1
 800f920:	2207      	movs	r2, #7
 800f922:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f924:	e00f      	b.n	800f946 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800f926:	6839      	ldr	r1, [r7, #0]
 800f928:	6878      	ldr	r0, [r7, #4]
 800f92a:	f000 f9ef 	bl	800fd0c <USBD_CtlError>
      err++;
 800f92e:	7afb      	ldrb	r3, [r7, #11]
 800f930:	3301      	adds	r3, #1
 800f932:	72fb      	strb	r3, [r7, #11]
    break;
 800f934:	e007      	b.n	800f946 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800f936:	6839      	ldr	r1, [r7, #0]
 800f938:	6878      	ldr	r0, [r7, #4]
 800f93a:	f000 f9e7 	bl	800fd0c <USBD_CtlError>
    err++;
 800f93e:	7afb      	ldrb	r3, [r7, #11]
 800f940:	3301      	adds	r3, #1
 800f942:	72fb      	strb	r3, [r7, #11]
    break;
 800f944:	bf00      	nop
  }

  if (err != 0U)
 800f946:	7afb      	ldrb	r3, [r7, #11]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d11e      	bne.n	800f98a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800f94c:	683b      	ldr	r3, [r7, #0]
 800f94e:	88db      	ldrh	r3, [r3, #6]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d016      	beq.n	800f982 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800f954:	893b      	ldrh	r3, [r7, #8]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d00e      	beq.n	800f978 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800f95a:	683b      	ldr	r3, [r7, #0]
 800f95c:	88da      	ldrh	r2, [r3, #6]
 800f95e:	893b      	ldrh	r3, [r7, #8]
 800f960:	4293      	cmp	r3, r2
 800f962:	bf28      	it	cs
 800f964:	4613      	movcs	r3, r2
 800f966:	b29b      	uxth	r3, r3
 800f968:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800f96a:	893b      	ldrh	r3, [r7, #8]
 800f96c:	461a      	mov	r2, r3
 800f96e:	68f9      	ldr	r1, [r7, #12]
 800f970:	6878      	ldr	r0, [r7, #4]
 800f972:	f000 fa3c 	bl	800fdee <USBD_CtlSendData>
 800f976:	e009      	b.n	800f98c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800f978:	6839      	ldr	r1, [r7, #0]
 800f97a:	6878      	ldr	r0, [r7, #4]
 800f97c:	f000 f9c6 	bl	800fd0c <USBD_CtlError>
 800f980:	e004      	b.n	800f98c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800f982:	6878      	ldr	r0, [r7, #4]
 800f984:	f000 fa8d 	bl	800fea2 <USBD_CtlSendStatus>
 800f988:	e000      	b.n	800f98c <USBD_GetDescriptor+0x2cc>
    return;
 800f98a:	bf00      	nop
    }
  }
}
 800f98c:	3710      	adds	r7, #16
 800f98e:	46bd      	mov	sp, r7
 800f990:	bd80      	pop	{r7, pc}
 800f992:	bf00      	nop

0800f994 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b084      	sub	sp, #16
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
 800f99c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f99e:	683b      	ldr	r3, [r7, #0]
 800f9a0:	889b      	ldrh	r3, [r3, #4]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d130      	bne.n	800fa08 <USBD_SetAddress+0x74>
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	88db      	ldrh	r3, [r3, #6]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d12c      	bne.n	800fa08 <USBD_SetAddress+0x74>
 800f9ae:	683b      	ldr	r3, [r7, #0]
 800f9b0:	885b      	ldrh	r3, [r3, #2]
 800f9b2:	2b7f      	cmp	r3, #127	; 0x7f
 800f9b4:	d828      	bhi.n	800fa08 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f9b6:	683b      	ldr	r3, [r7, #0]
 800f9b8:	885b      	ldrh	r3, [r3, #2]
 800f9ba:	b2db      	uxtb	r3, r3
 800f9bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f9c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f9c8:	2b03      	cmp	r3, #3
 800f9ca:	d104      	bne.n	800f9d6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800f9cc:	6839      	ldr	r1, [r7, #0]
 800f9ce:	6878      	ldr	r0, [r7, #4]
 800f9d0:	f000 f99c 	bl	800fd0c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9d4:	e01c      	b.n	800fa10 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	7bfa      	ldrb	r2, [r7, #15]
 800f9da:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f9de:	7bfb      	ldrb	r3, [r7, #15]
 800f9e0:	4619      	mov	r1, r3
 800f9e2:	6878      	ldr	r0, [r7, #4]
 800f9e4:	f000 ff1e 	bl	8010824 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f9e8:	6878      	ldr	r0, [r7, #4]
 800f9ea:	f000 fa5a 	bl	800fea2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f9ee:	7bfb      	ldrb	r3, [r7, #15]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d004      	beq.n	800f9fe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2202      	movs	r2, #2
 800f9f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9fc:	e008      	b.n	800fa10 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	2201      	movs	r2, #1
 800fa02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa06:	e003      	b.n	800fa10 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fa08:	6839      	ldr	r1, [r7, #0]
 800fa0a:	6878      	ldr	r0, [r7, #4]
 800fa0c:	f000 f97e 	bl	800fd0c <USBD_CtlError>
  }
}
 800fa10:	bf00      	nop
 800fa12:	3710      	adds	r7, #16
 800fa14:	46bd      	mov	sp, r7
 800fa16:	bd80      	pop	{r7, pc}

0800fa18 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b084      	sub	sp, #16
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
 800fa20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fa22:	2300      	movs	r3, #0
 800fa24:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fa26:	683b      	ldr	r3, [r7, #0]
 800fa28:	885b      	ldrh	r3, [r3, #2]
 800fa2a:	b2da      	uxtb	r2, r3
 800fa2c:	4b4b      	ldr	r3, [pc, #300]	; (800fb5c <USBD_SetConfig+0x144>)
 800fa2e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fa30:	4b4a      	ldr	r3, [pc, #296]	; (800fb5c <USBD_SetConfig+0x144>)
 800fa32:	781b      	ldrb	r3, [r3, #0]
 800fa34:	2b01      	cmp	r3, #1
 800fa36:	d905      	bls.n	800fa44 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fa38:	6839      	ldr	r1, [r7, #0]
 800fa3a:	6878      	ldr	r0, [r7, #4]
 800fa3c:	f000 f966 	bl	800fd0c <USBD_CtlError>
    return USBD_FAIL;
 800fa40:	2303      	movs	r3, #3
 800fa42:	e087      	b.n	800fb54 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa4a:	2b02      	cmp	r3, #2
 800fa4c:	d002      	beq.n	800fa54 <USBD_SetConfig+0x3c>
 800fa4e:	2b03      	cmp	r3, #3
 800fa50:	d025      	beq.n	800fa9e <USBD_SetConfig+0x86>
 800fa52:	e071      	b.n	800fb38 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800fa54:	4b41      	ldr	r3, [pc, #260]	; (800fb5c <USBD_SetConfig+0x144>)
 800fa56:	781b      	ldrb	r3, [r3, #0]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d01c      	beq.n	800fa96 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800fa5c:	4b3f      	ldr	r3, [pc, #252]	; (800fb5c <USBD_SetConfig+0x144>)
 800fa5e:	781b      	ldrb	r3, [r3, #0]
 800fa60:	461a      	mov	r2, r3
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800fa66:	4b3d      	ldr	r3, [pc, #244]	; (800fb5c <USBD_SetConfig+0x144>)
 800fa68:	781b      	ldrb	r3, [r3, #0]
 800fa6a:	4619      	mov	r1, r3
 800fa6c:	6878      	ldr	r0, [r7, #4]
 800fa6e:	f7ff f9a7 	bl	800edc0 <USBD_SetClassConfig>
 800fa72:	4603      	mov	r3, r0
 800fa74:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800fa76:	7bfb      	ldrb	r3, [r7, #15]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d004      	beq.n	800fa86 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800fa7c:	6839      	ldr	r1, [r7, #0]
 800fa7e:	6878      	ldr	r0, [r7, #4]
 800fa80:	f000 f944 	bl	800fd0c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800fa84:	e065      	b.n	800fb52 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800fa86:	6878      	ldr	r0, [r7, #4]
 800fa88:	f000 fa0b 	bl	800fea2 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	2203      	movs	r2, #3
 800fa90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800fa94:	e05d      	b.n	800fb52 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800fa96:	6878      	ldr	r0, [r7, #4]
 800fa98:	f000 fa03 	bl	800fea2 <USBD_CtlSendStatus>
    break;
 800fa9c:	e059      	b.n	800fb52 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800fa9e:	4b2f      	ldr	r3, [pc, #188]	; (800fb5c <USBD_SetConfig+0x144>)
 800faa0:	781b      	ldrb	r3, [r3, #0]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d112      	bne.n	800facc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	2202      	movs	r2, #2
 800faaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800faae:	4b2b      	ldr	r3, [pc, #172]	; (800fb5c <USBD_SetConfig+0x144>)
 800fab0:	781b      	ldrb	r3, [r3, #0]
 800fab2:	461a      	mov	r2, r3
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fab8:	4b28      	ldr	r3, [pc, #160]	; (800fb5c <USBD_SetConfig+0x144>)
 800faba:	781b      	ldrb	r3, [r3, #0]
 800fabc:	4619      	mov	r1, r3
 800fabe:	6878      	ldr	r0, [r7, #4]
 800fac0:	f7ff f99a 	bl	800edf8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800fac4:	6878      	ldr	r0, [r7, #4]
 800fac6:	f000 f9ec 	bl	800fea2 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800faca:	e042      	b.n	800fb52 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800facc:	4b23      	ldr	r3, [pc, #140]	; (800fb5c <USBD_SetConfig+0x144>)
 800face:	781b      	ldrb	r3, [r3, #0]
 800fad0:	461a      	mov	r2, r3
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	685b      	ldr	r3, [r3, #4]
 800fad6:	429a      	cmp	r2, r3
 800fad8:	d02a      	beq.n	800fb30 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	685b      	ldr	r3, [r3, #4]
 800fade:	b2db      	uxtb	r3, r3
 800fae0:	4619      	mov	r1, r3
 800fae2:	6878      	ldr	r0, [r7, #4]
 800fae4:	f7ff f988 	bl	800edf8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800fae8:	4b1c      	ldr	r3, [pc, #112]	; (800fb5c <USBD_SetConfig+0x144>)
 800faea:	781b      	ldrb	r3, [r3, #0]
 800faec:	461a      	mov	r2, r3
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800faf2:	4b1a      	ldr	r3, [pc, #104]	; (800fb5c <USBD_SetConfig+0x144>)
 800faf4:	781b      	ldrb	r3, [r3, #0]
 800faf6:	4619      	mov	r1, r3
 800faf8:	6878      	ldr	r0, [r7, #4]
 800fafa:	f7ff f961 	bl	800edc0 <USBD_SetClassConfig>
 800fafe:	4603      	mov	r3, r0
 800fb00:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800fb02:	7bfb      	ldrb	r3, [r7, #15]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d00f      	beq.n	800fb28 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800fb08:	6839      	ldr	r1, [r7, #0]
 800fb0a:	6878      	ldr	r0, [r7, #4]
 800fb0c:	f000 f8fe 	bl	800fd0c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	685b      	ldr	r3, [r3, #4]
 800fb14:	b2db      	uxtb	r3, r3
 800fb16:	4619      	mov	r1, r3
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f7ff f96d 	bl	800edf8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	2202      	movs	r2, #2
 800fb22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800fb26:	e014      	b.n	800fb52 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800fb28:	6878      	ldr	r0, [r7, #4]
 800fb2a:	f000 f9ba 	bl	800fea2 <USBD_CtlSendStatus>
    break;
 800fb2e:	e010      	b.n	800fb52 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800fb30:	6878      	ldr	r0, [r7, #4]
 800fb32:	f000 f9b6 	bl	800fea2 <USBD_CtlSendStatus>
    break;
 800fb36:	e00c      	b.n	800fb52 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800fb38:	6839      	ldr	r1, [r7, #0]
 800fb3a:	6878      	ldr	r0, [r7, #4]
 800fb3c:	f000 f8e6 	bl	800fd0c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fb40:	4b06      	ldr	r3, [pc, #24]	; (800fb5c <USBD_SetConfig+0x144>)
 800fb42:	781b      	ldrb	r3, [r3, #0]
 800fb44:	4619      	mov	r1, r3
 800fb46:	6878      	ldr	r0, [r7, #4]
 800fb48:	f7ff f956 	bl	800edf8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800fb4c:	2303      	movs	r3, #3
 800fb4e:	73fb      	strb	r3, [r7, #15]
    break;
 800fb50:	bf00      	nop
  }

  return ret;
 800fb52:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb54:	4618      	mov	r0, r3
 800fb56:	3710      	adds	r7, #16
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd80      	pop	{r7, pc}
 800fb5c:	24000224 	.word	0x24000224

0800fb60 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b082      	sub	sp, #8
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	6078      	str	r0, [r7, #4]
 800fb68:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fb6a:	683b      	ldr	r3, [r7, #0]
 800fb6c:	88db      	ldrh	r3, [r3, #6]
 800fb6e:	2b01      	cmp	r3, #1
 800fb70:	d004      	beq.n	800fb7c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fb72:	6839      	ldr	r1, [r7, #0]
 800fb74:	6878      	ldr	r0, [r7, #4]
 800fb76:	f000 f8c9 	bl	800fd0c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800fb7a:	e021      	b.n	800fbc0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb82:	2b01      	cmp	r3, #1
 800fb84:	db17      	blt.n	800fbb6 <USBD_GetConfig+0x56>
 800fb86:	2b02      	cmp	r3, #2
 800fb88:	dd02      	ble.n	800fb90 <USBD_GetConfig+0x30>
 800fb8a:	2b03      	cmp	r3, #3
 800fb8c:	d00b      	beq.n	800fba6 <USBD_GetConfig+0x46>
 800fb8e:	e012      	b.n	800fbb6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	2200      	movs	r2, #0
 800fb94:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	3308      	adds	r3, #8
 800fb9a:	2201      	movs	r2, #1
 800fb9c:	4619      	mov	r1, r3
 800fb9e:	6878      	ldr	r0, [r7, #4]
 800fba0:	f000 f925 	bl	800fdee <USBD_CtlSendData>
      break;
 800fba4:	e00c      	b.n	800fbc0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	3304      	adds	r3, #4
 800fbaa:	2201      	movs	r2, #1
 800fbac:	4619      	mov	r1, r3
 800fbae:	6878      	ldr	r0, [r7, #4]
 800fbb0:	f000 f91d 	bl	800fdee <USBD_CtlSendData>
      break;
 800fbb4:	e004      	b.n	800fbc0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800fbb6:	6839      	ldr	r1, [r7, #0]
 800fbb8:	6878      	ldr	r0, [r7, #4]
 800fbba:	f000 f8a7 	bl	800fd0c <USBD_CtlError>
      break;
 800fbbe:	bf00      	nop
}
 800fbc0:	bf00      	nop
 800fbc2:	3708      	adds	r7, #8
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	bd80      	pop	{r7, pc}

0800fbc8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b082      	sub	sp, #8
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	6078      	str	r0, [r7, #4]
 800fbd0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fbd8:	3b01      	subs	r3, #1
 800fbda:	2b02      	cmp	r3, #2
 800fbdc:	d81e      	bhi.n	800fc1c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800fbde:	683b      	ldr	r3, [r7, #0]
 800fbe0:	88db      	ldrh	r3, [r3, #6]
 800fbe2:	2b02      	cmp	r3, #2
 800fbe4:	d004      	beq.n	800fbf0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800fbe6:	6839      	ldr	r1, [r7, #0]
 800fbe8:	6878      	ldr	r0, [r7, #4]
 800fbea:	f000 f88f 	bl	800fd0c <USBD_CtlError>
      break;
 800fbee:	e01a      	b.n	800fc26 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2201      	movs	r2, #1
 800fbf4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d005      	beq.n	800fc0c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	68db      	ldr	r3, [r3, #12]
 800fc04:	f043 0202 	orr.w	r2, r3, #2
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	330c      	adds	r3, #12
 800fc10:	2202      	movs	r2, #2
 800fc12:	4619      	mov	r1, r3
 800fc14:	6878      	ldr	r0, [r7, #4]
 800fc16:	f000 f8ea 	bl	800fdee <USBD_CtlSendData>
    break;
 800fc1a:	e004      	b.n	800fc26 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800fc1c:	6839      	ldr	r1, [r7, #0]
 800fc1e:	6878      	ldr	r0, [r7, #4]
 800fc20:	f000 f874 	bl	800fd0c <USBD_CtlError>
    break;
 800fc24:	bf00      	nop
  }
}
 800fc26:	bf00      	nop
 800fc28:	3708      	adds	r7, #8
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	bd80      	pop	{r7, pc}

0800fc2e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc2e:	b580      	push	{r7, lr}
 800fc30:	b082      	sub	sp, #8
 800fc32:	af00      	add	r7, sp, #0
 800fc34:	6078      	str	r0, [r7, #4]
 800fc36:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fc38:	683b      	ldr	r3, [r7, #0]
 800fc3a:	885b      	ldrh	r3, [r3, #2]
 800fc3c:	2b01      	cmp	r3, #1
 800fc3e:	d106      	bne.n	800fc4e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	2201      	movs	r2, #1
 800fc44:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fc48:	6878      	ldr	r0, [r7, #4]
 800fc4a:	f000 f92a 	bl	800fea2 <USBD_CtlSendStatus>
  }
}
 800fc4e:	bf00      	nop
 800fc50:	3708      	adds	r7, #8
 800fc52:	46bd      	mov	sp, r7
 800fc54:	bd80      	pop	{r7, pc}

0800fc56 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc56:	b580      	push	{r7, lr}
 800fc58:	b082      	sub	sp, #8
 800fc5a:	af00      	add	r7, sp, #0
 800fc5c:	6078      	str	r0, [r7, #4]
 800fc5e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc66:	3b01      	subs	r3, #1
 800fc68:	2b02      	cmp	r3, #2
 800fc6a:	d80b      	bhi.n	800fc84 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fc6c:	683b      	ldr	r3, [r7, #0]
 800fc6e:	885b      	ldrh	r3, [r3, #2]
 800fc70:	2b01      	cmp	r3, #1
 800fc72:	d10c      	bne.n	800fc8e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2200      	movs	r2, #0
 800fc78:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fc7c:	6878      	ldr	r0, [r7, #4]
 800fc7e:	f000 f910 	bl	800fea2 <USBD_CtlSendStatus>
      }
      break;
 800fc82:	e004      	b.n	800fc8e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800fc84:	6839      	ldr	r1, [r7, #0]
 800fc86:	6878      	ldr	r0, [r7, #4]
 800fc88:	f000 f840 	bl	800fd0c <USBD_CtlError>
      break;
 800fc8c:	e000      	b.n	800fc90 <USBD_ClrFeature+0x3a>
      break;
 800fc8e:	bf00      	nop
  }
}
 800fc90:	bf00      	nop
 800fc92:	3708      	adds	r7, #8
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}

0800fc98 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b084      	sub	sp, #16
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
 800fca0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fca2:	683b      	ldr	r3, [r7, #0]
 800fca4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	781a      	ldrb	r2, [r3, #0]
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	3301      	adds	r3, #1
 800fcb2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	781a      	ldrb	r2, [r3, #0]
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	3301      	adds	r3, #1
 800fcc0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fcc2:	68f8      	ldr	r0, [r7, #12]
 800fcc4:	f7ff fad3 	bl	800f26e <SWAPBYTE>
 800fcc8:	4603      	mov	r3, r0
 800fcca:	461a      	mov	r2, r3
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	3301      	adds	r3, #1
 800fcd4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	3301      	adds	r3, #1
 800fcda:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fcdc:	68f8      	ldr	r0, [r7, #12]
 800fcde:	f7ff fac6 	bl	800f26e <SWAPBYTE>
 800fce2:	4603      	mov	r3, r0
 800fce4:	461a      	mov	r2, r3
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	3301      	adds	r3, #1
 800fcee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	3301      	adds	r3, #1
 800fcf4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fcf6:	68f8      	ldr	r0, [r7, #12]
 800fcf8:	f7ff fab9 	bl	800f26e <SWAPBYTE>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	461a      	mov	r2, r3
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	80da      	strh	r2, [r3, #6]
}
 800fd04:	bf00      	nop
 800fd06:	3710      	adds	r7, #16
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bd80      	pop	{r7, pc}

0800fd0c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b082      	sub	sp, #8
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
 800fd14:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fd16:	2180      	movs	r1, #128	; 0x80
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f000 fd19 	bl	8010750 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fd1e:	2100      	movs	r1, #0
 800fd20:	6878      	ldr	r0, [r7, #4]
 800fd22:	f000 fd15 	bl	8010750 <USBD_LL_StallEP>
}
 800fd26:	bf00      	nop
 800fd28:	3708      	adds	r7, #8
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd80      	pop	{r7, pc}

0800fd2e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fd2e:	b580      	push	{r7, lr}
 800fd30:	b086      	sub	sp, #24
 800fd32:	af00      	add	r7, sp, #0
 800fd34:	60f8      	str	r0, [r7, #12]
 800fd36:	60b9      	str	r1, [r7, #8]
 800fd38:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d036      	beq.n	800fdb2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fd48:	6938      	ldr	r0, [r7, #16]
 800fd4a:	f000 f836 	bl	800fdba <USBD_GetLen>
 800fd4e:	4603      	mov	r3, r0
 800fd50:	3301      	adds	r3, #1
 800fd52:	b29b      	uxth	r3, r3
 800fd54:	005b      	lsls	r3, r3, #1
 800fd56:	b29a      	uxth	r2, r3
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fd5c:	7dfb      	ldrb	r3, [r7, #23]
 800fd5e:	68ba      	ldr	r2, [r7, #8]
 800fd60:	4413      	add	r3, r2
 800fd62:	687a      	ldr	r2, [r7, #4]
 800fd64:	7812      	ldrb	r2, [r2, #0]
 800fd66:	701a      	strb	r2, [r3, #0]
  idx++;
 800fd68:	7dfb      	ldrb	r3, [r7, #23]
 800fd6a:	3301      	adds	r3, #1
 800fd6c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fd6e:	7dfb      	ldrb	r3, [r7, #23]
 800fd70:	68ba      	ldr	r2, [r7, #8]
 800fd72:	4413      	add	r3, r2
 800fd74:	2203      	movs	r2, #3
 800fd76:	701a      	strb	r2, [r3, #0]
  idx++;
 800fd78:	7dfb      	ldrb	r3, [r7, #23]
 800fd7a:	3301      	adds	r3, #1
 800fd7c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fd7e:	e013      	b.n	800fda8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fd80:	7dfb      	ldrb	r3, [r7, #23]
 800fd82:	68ba      	ldr	r2, [r7, #8]
 800fd84:	4413      	add	r3, r2
 800fd86:	693a      	ldr	r2, [r7, #16]
 800fd88:	7812      	ldrb	r2, [r2, #0]
 800fd8a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fd8c:	693b      	ldr	r3, [r7, #16]
 800fd8e:	3301      	adds	r3, #1
 800fd90:	613b      	str	r3, [r7, #16]
    idx++;
 800fd92:	7dfb      	ldrb	r3, [r7, #23]
 800fd94:	3301      	adds	r3, #1
 800fd96:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fd98:	7dfb      	ldrb	r3, [r7, #23]
 800fd9a:	68ba      	ldr	r2, [r7, #8]
 800fd9c:	4413      	add	r3, r2
 800fd9e:	2200      	movs	r2, #0
 800fda0:	701a      	strb	r2, [r3, #0]
    idx++;
 800fda2:	7dfb      	ldrb	r3, [r7, #23]
 800fda4:	3301      	adds	r3, #1
 800fda6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fda8:	693b      	ldr	r3, [r7, #16]
 800fdaa:	781b      	ldrb	r3, [r3, #0]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d1e7      	bne.n	800fd80 <USBD_GetString+0x52>
 800fdb0:	e000      	b.n	800fdb4 <USBD_GetString+0x86>
    return;
 800fdb2:	bf00      	nop
  }
}
 800fdb4:	3718      	adds	r7, #24
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	bd80      	pop	{r7, pc}

0800fdba <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fdba:	b480      	push	{r7}
 800fdbc:	b085      	sub	sp, #20
 800fdbe:	af00      	add	r7, sp, #0
 800fdc0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fdca:	e005      	b.n	800fdd8 <USBD_GetLen+0x1e>
  {
    len++;
 800fdcc:	7bfb      	ldrb	r3, [r7, #15]
 800fdce:	3301      	adds	r3, #1
 800fdd0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fdd2:	68bb      	ldr	r3, [r7, #8]
 800fdd4:	3301      	adds	r3, #1
 800fdd6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fdd8:	68bb      	ldr	r3, [r7, #8]
 800fdda:	781b      	ldrb	r3, [r3, #0]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d1f5      	bne.n	800fdcc <USBD_GetLen+0x12>
  }

  return len;
 800fde0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fde2:	4618      	mov	r0, r3
 800fde4:	3714      	adds	r7, #20
 800fde6:	46bd      	mov	sp, r7
 800fde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdec:	4770      	bx	lr

0800fdee <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fdee:	b580      	push	{r7, lr}
 800fdf0:	b084      	sub	sp, #16
 800fdf2:	af00      	add	r7, sp, #0
 800fdf4:	60f8      	str	r0, [r7, #12]
 800fdf6:	60b9      	str	r1, [r7, #8]
 800fdf8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	2202      	movs	r2, #2
 800fdfe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	687a      	ldr	r2, [r7, #4]
 800fe06:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	687a      	ldr	r2, [r7, #4]
 800fe0c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	68ba      	ldr	r2, [r7, #8]
 800fe12:	2100      	movs	r1, #0
 800fe14:	68f8      	ldr	r0, [r7, #12]
 800fe16:	f000 fd24 	bl	8010862 <USBD_LL_Transmit>

  return USBD_OK;
 800fe1a:	2300      	movs	r3, #0
}
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	3710      	adds	r7, #16
 800fe20:	46bd      	mov	sp, r7
 800fe22:	bd80      	pop	{r7, pc}

0800fe24 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b084      	sub	sp, #16
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	60f8      	str	r0, [r7, #12]
 800fe2c:	60b9      	str	r1, [r7, #8]
 800fe2e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	68ba      	ldr	r2, [r7, #8]
 800fe34:	2100      	movs	r1, #0
 800fe36:	68f8      	ldr	r0, [r7, #12]
 800fe38:	f000 fd13 	bl	8010862 <USBD_LL_Transmit>

  return USBD_OK;
 800fe3c:	2300      	movs	r3, #0
}
 800fe3e:	4618      	mov	r0, r3
 800fe40:	3710      	adds	r7, #16
 800fe42:	46bd      	mov	sp, r7
 800fe44:	bd80      	pop	{r7, pc}

0800fe46 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fe46:	b580      	push	{r7, lr}
 800fe48:	b084      	sub	sp, #16
 800fe4a:	af00      	add	r7, sp, #0
 800fe4c:	60f8      	str	r0, [r7, #12]
 800fe4e:	60b9      	str	r1, [r7, #8]
 800fe50:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	2203      	movs	r2, #3
 800fe56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	687a      	ldr	r2, [r7, #4]
 800fe5e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	687a      	ldr	r2, [r7, #4]
 800fe66:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	68ba      	ldr	r2, [r7, #8]
 800fe6e:	2100      	movs	r1, #0
 800fe70:	68f8      	ldr	r0, [r7, #12]
 800fe72:	f000 fd17 	bl	80108a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fe76:	2300      	movs	r3, #0
}
 800fe78:	4618      	mov	r0, r3
 800fe7a:	3710      	adds	r7, #16
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	bd80      	pop	{r7, pc}

0800fe80 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b084      	sub	sp, #16
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	60f8      	str	r0, [r7, #12]
 800fe88:	60b9      	str	r1, [r7, #8]
 800fe8a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	68ba      	ldr	r2, [r7, #8]
 800fe90:	2100      	movs	r1, #0
 800fe92:	68f8      	ldr	r0, [r7, #12]
 800fe94:	f000 fd06 	bl	80108a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fe98:	2300      	movs	r3, #0
}
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	3710      	adds	r7, #16
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	bd80      	pop	{r7, pc}

0800fea2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fea2:	b580      	push	{r7, lr}
 800fea4:	b082      	sub	sp, #8
 800fea6:	af00      	add	r7, sp, #0
 800fea8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	2204      	movs	r2, #4
 800feae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800feb2:	2300      	movs	r3, #0
 800feb4:	2200      	movs	r2, #0
 800feb6:	2100      	movs	r1, #0
 800feb8:	6878      	ldr	r0, [r7, #4]
 800feba:	f000 fcd2 	bl	8010862 <USBD_LL_Transmit>

  return USBD_OK;
 800febe:	2300      	movs	r3, #0
}
 800fec0:	4618      	mov	r0, r3
 800fec2:	3708      	adds	r7, #8
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}

0800fec8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b082      	sub	sp, #8
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	2205      	movs	r2, #5
 800fed4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fed8:	2300      	movs	r3, #0
 800feda:	2200      	movs	r2, #0
 800fedc:	2100      	movs	r1, #0
 800fede:	6878      	ldr	r0, [r7, #4]
 800fee0:	f000 fce0 	bl	80108a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fee4:	2300      	movs	r3, #0
}
 800fee6:	4618      	mov	r0, r3
 800fee8:	3708      	adds	r7, #8
 800feea:	46bd      	mov	sp, r7
 800feec:	bd80      	pop	{r7, pc}
	...

0800fef0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fef0:	b480      	push	{r7}
 800fef2:	b087      	sub	sp, #28
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	60f8      	str	r0, [r7, #12]
 800fef8:	60b9      	str	r1, [r7, #8]
 800fefa:	4613      	mov	r3, r2
 800fefc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fefe:	2301      	movs	r3, #1
 800ff00:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ff02:	2300      	movs	r3, #0
 800ff04:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ff06:	4b1f      	ldr	r3, [pc, #124]	; (800ff84 <FATFS_LinkDriverEx+0x94>)
 800ff08:	7a5b      	ldrb	r3, [r3, #9]
 800ff0a:	b2db      	uxtb	r3, r3
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d131      	bne.n	800ff74 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ff10:	4b1c      	ldr	r3, [pc, #112]	; (800ff84 <FATFS_LinkDriverEx+0x94>)
 800ff12:	7a5b      	ldrb	r3, [r3, #9]
 800ff14:	b2db      	uxtb	r3, r3
 800ff16:	461a      	mov	r2, r3
 800ff18:	4b1a      	ldr	r3, [pc, #104]	; (800ff84 <FATFS_LinkDriverEx+0x94>)
 800ff1a:	2100      	movs	r1, #0
 800ff1c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ff1e:	4b19      	ldr	r3, [pc, #100]	; (800ff84 <FATFS_LinkDriverEx+0x94>)
 800ff20:	7a5b      	ldrb	r3, [r3, #9]
 800ff22:	b2db      	uxtb	r3, r3
 800ff24:	4a17      	ldr	r2, [pc, #92]	; (800ff84 <FATFS_LinkDriverEx+0x94>)
 800ff26:	009b      	lsls	r3, r3, #2
 800ff28:	4413      	add	r3, r2
 800ff2a:	68fa      	ldr	r2, [r7, #12]
 800ff2c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ff2e:	4b15      	ldr	r3, [pc, #84]	; (800ff84 <FATFS_LinkDriverEx+0x94>)
 800ff30:	7a5b      	ldrb	r3, [r3, #9]
 800ff32:	b2db      	uxtb	r3, r3
 800ff34:	461a      	mov	r2, r3
 800ff36:	4b13      	ldr	r3, [pc, #76]	; (800ff84 <FATFS_LinkDriverEx+0x94>)
 800ff38:	4413      	add	r3, r2
 800ff3a:	79fa      	ldrb	r2, [r7, #7]
 800ff3c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ff3e:	4b11      	ldr	r3, [pc, #68]	; (800ff84 <FATFS_LinkDriverEx+0x94>)
 800ff40:	7a5b      	ldrb	r3, [r3, #9]
 800ff42:	b2db      	uxtb	r3, r3
 800ff44:	1c5a      	adds	r2, r3, #1
 800ff46:	b2d1      	uxtb	r1, r2
 800ff48:	4a0e      	ldr	r2, [pc, #56]	; (800ff84 <FATFS_LinkDriverEx+0x94>)
 800ff4a:	7251      	strb	r1, [r2, #9]
 800ff4c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ff4e:	7dbb      	ldrb	r3, [r7, #22]
 800ff50:	3330      	adds	r3, #48	; 0x30
 800ff52:	b2da      	uxtb	r2, r3
 800ff54:	68bb      	ldr	r3, [r7, #8]
 800ff56:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ff58:	68bb      	ldr	r3, [r7, #8]
 800ff5a:	3301      	adds	r3, #1
 800ff5c:	223a      	movs	r2, #58	; 0x3a
 800ff5e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ff60:	68bb      	ldr	r3, [r7, #8]
 800ff62:	3302      	adds	r3, #2
 800ff64:	222f      	movs	r2, #47	; 0x2f
 800ff66:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ff68:	68bb      	ldr	r3, [r7, #8]
 800ff6a:	3303      	adds	r3, #3
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ff70:	2300      	movs	r3, #0
 800ff72:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ff74:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff76:	4618      	mov	r0, r3
 800ff78:	371c      	adds	r7, #28
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff80:	4770      	bx	lr
 800ff82:	bf00      	nop
 800ff84:	24000228 	.word	0x24000228

0800ff88 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b082      	sub	sp, #8
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]
 800ff90:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ff92:	2200      	movs	r2, #0
 800ff94:	6839      	ldr	r1, [r7, #0]
 800ff96:	6878      	ldr	r0, [r7, #4]
 800ff98:	f7ff ffaa 	bl	800fef0 <FATFS_LinkDriverEx>
 800ff9c:	4603      	mov	r3, r0
}
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	3708      	adds	r7, #8
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	bd80      	pop	{r7, pc}
	...

0800ffa8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ffac:	2200      	movs	r2, #0
 800ffae:	4913      	ldr	r1, [pc, #76]	; (800fffc <MX_USB_DEVICE_Init+0x54>)
 800ffb0:	4813      	ldr	r0, [pc, #76]	; (8010000 <MX_USB_DEVICE_Init+0x58>)
 800ffb2:	f7fe fe97 	bl	800ece4 <USBD_Init>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d001      	beq.n	800ffc0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ffbc:	f7f1 fa2e 	bl	800141c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ffc0:	4910      	ldr	r1, [pc, #64]	; (8010004 <MX_USB_DEVICE_Init+0x5c>)
 800ffc2:	480f      	ldr	r0, [pc, #60]	; (8010000 <MX_USB_DEVICE_Init+0x58>)
 800ffc4:	f7fe fec4 	bl	800ed50 <USBD_RegisterClass>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d001      	beq.n	800ffd2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ffce:	f7f1 fa25 	bl	800141c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ffd2:	490d      	ldr	r1, [pc, #52]	; (8010008 <MX_USB_DEVICE_Init+0x60>)
 800ffd4:	480a      	ldr	r0, [pc, #40]	; (8010000 <MX_USB_DEVICE_Init+0x58>)
 800ffd6:	f7fe fe19 	bl	800ec0c <USBD_CDC_RegisterInterface>
 800ffda:	4603      	mov	r3, r0
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d001      	beq.n	800ffe4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ffe0:	f7f1 fa1c 	bl	800141c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ffe4:	4806      	ldr	r0, [pc, #24]	; (8010000 <MX_USB_DEVICE_Init+0x58>)
 800ffe6:	f7fe fed4 	bl	800ed92 <USBD_Start>
 800ffea:	4603      	mov	r3, r0
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d001      	beq.n	800fff4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fff0:	f7f1 fa14 	bl	800141c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800fff4:	f7f6 f820 	bl	8006038 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fff8:	bf00      	nop
 800fffa:	bd80      	pop	{r7, pc}
 800fffc:	24000134 	.word	0x24000134
 8010000:	24000aec 	.word	0x24000aec
 8010004:	2400001c 	.word	0x2400001c
 8010008:	24000120 	.word	0x24000120

0801000c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801000c:	b580      	push	{r7, lr}
 801000e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010010:	2200      	movs	r2, #0
 8010012:	4905      	ldr	r1, [pc, #20]	; (8010028 <CDC_Init_FS+0x1c>)
 8010014:	4805      	ldr	r0, [pc, #20]	; (801002c <CDC_Init_FS+0x20>)
 8010016:	f7fe fe0e 	bl	800ec36 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801001a:	4905      	ldr	r1, [pc, #20]	; (8010030 <CDC_Init_FS+0x24>)
 801001c:	4803      	ldr	r0, [pc, #12]	; (801002c <CDC_Init_FS+0x20>)
 801001e:	f7fe fe23 	bl	800ec68 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010022:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010024:	4618      	mov	r0, r3
 8010026:	bd80      	pop	{r7, pc}
 8010028:	240015bc 	.word	0x240015bc
 801002c:	24000aec 	.word	0x24000aec
 8010030:	24000dbc 	.word	0x24000dbc

08010034 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010034:	b480      	push	{r7}
 8010036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010038:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801003a:	4618      	mov	r0, r3
 801003c:	46bd      	mov	sp, r7
 801003e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010042:	4770      	bx	lr

08010044 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010044:	b480      	push	{r7}
 8010046:	b083      	sub	sp, #12
 8010048:	af00      	add	r7, sp, #0
 801004a:	4603      	mov	r3, r0
 801004c:	6039      	str	r1, [r7, #0]
 801004e:	71fb      	strb	r3, [r7, #7]
 8010050:	4613      	mov	r3, r2
 8010052:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010054:	79fb      	ldrb	r3, [r7, #7]
 8010056:	2b23      	cmp	r3, #35	; 0x23
 8010058:	d84a      	bhi.n	80100f0 <CDC_Control_FS+0xac>
 801005a:	a201      	add	r2, pc, #4	; (adr r2, 8010060 <CDC_Control_FS+0x1c>)
 801005c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010060:	080100f1 	.word	0x080100f1
 8010064:	080100f1 	.word	0x080100f1
 8010068:	080100f1 	.word	0x080100f1
 801006c:	080100f1 	.word	0x080100f1
 8010070:	080100f1 	.word	0x080100f1
 8010074:	080100f1 	.word	0x080100f1
 8010078:	080100f1 	.word	0x080100f1
 801007c:	080100f1 	.word	0x080100f1
 8010080:	080100f1 	.word	0x080100f1
 8010084:	080100f1 	.word	0x080100f1
 8010088:	080100f1 	.word	0x080100f1
 801008c:	080100f1 	.word	0x080100f1
 8010090:	080100f1 	.word	0x080100f1
 8010094:	080100f1 	.word	0x080100f1
 8010098:	080100f1 	.word	0x080100f1
 801009c:	080100f1 	.word	0x080100f1
 80100a0:	080100f1 	.word	0x080100f1
 80100a4:	080100f1 	.word	0x080100f1
 80100a8:	080100f1 	.word	0x080100f1
 80100ac:	080100f1 	.word	0x080100f1
 80100b0:	080100f1 	.word	0x080100f1
 80100b4:	080100f1 	.word	0x080100f1
 80100b8:	080100f1 	.word	0x080100f1
 80100bc:	080100f1 	.word	0x080100f1
 80100c0:	080100f1 	.word	0x080100f1
 80100c4:	080100f1 	.word	0x080100f1
 80100c8:	080100f1 	.word	0x080100f1
 80100cc:	080100f1 	.word	0x080100f1
 80100d0:	080100f1 	.word	0x080100f1
 80100d4:	080100f1 	.word	0x080100f1
 80100d8:	080100f1 	.word	0x080100f1
 80100dc:	080100f1 	.word	0x080100f1
 80100e0:	080100f1 	.word	0x080100f1
 80100e4:	080100f1 	.word	0x080100f1
 80100e8:	080100f1 	.word	0x080100f1
 80100ec:	080100f1 	.word	0x080100f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80100f0:	bf00      	nop
  }

  return (USBD_OK);
 80100f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80100f4:	4618      	mov	r0, r3
 80100f6:	370c      	adds	r7, #12
 80100f8:	46bd      	mov	sp, r7
 80100fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fe:	4770      	bx	lr

08010100 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b082      	sub	sp, #8
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
 8010108:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801010a:	6879      	ldr	r1, [r7, #4]
 801010c:	4805      	ldr	r0, [pc, #20]	; (8010124 <CDC_Receive_FS+0x24>)
 801010e:	f7fe fdab 	bl	800ec68 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010112:	4804      	ldr	r0, [pc, #16]	; (8010124 <CDC_Receive_FS+0x24>)
 8010114:	f7fe fdbc 	bl	800ec90 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010118:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801011a:	4618      	mov	r0, r3
 801011c:	3708      	adds	r7, #8
 801011e:	46bd      	mov	sp, r7
 8010120:	bd80      	pop	{r7, pc}
 8010122:	bf00      	nop
 8010124:	24000aec 	.word	0x24000aec

08010128 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010128:	b480      	push	{r7}
 801012a:	b087      	sub	sp, #28
 801012c:	af00      	add	r7, sp, #0
 801012e:	60f8      	str	r0, [r7, #12]
 8010130:	60b9      	str	r1, [r7, #8]
 8010132:	4613      	mov	r3, r2
 8010134:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010136:	2300      	movs	r3, #0
 8010138:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801013a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801013e:	4618      	mov	r0, r3
 8010140:	371c      	adds	r7, #28
 8010142:	46bd      	mov	sp, r7
 8010144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010148:	4770      	bx	lr
	...

0801014c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801014c:	b480      	push	{r7}
 801014e:	b083      	sub	sp, #12
 8010150:	af00      	add	r7, sp, #0
 8010152:	4603      	mov	r3, r0
 8010154:	6039      	str	r1, [r7, #0]
 8010156:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010158:	683b      	ldr	r3, [r7, #0]
 801015a:	2212      	movs	r2, #18
 801015c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801015e:	4b03      	ldr	r3, [pc, #12]	; (801016c <USBD_FS_DeviceDescriptor+0x20>)
}
 8010160:	4618      	mov	r0, r3
 8010162:	370c      	adds	r7, #12
 8010164:	46bd      	mov	sp, r7
 8010166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016a:	4770      	bx	lr
 801016c:	24000150 	.word	0x24000150

08010170 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010170:	b480      	push	{r7}
 8010172:	b083      	sub	sp, #12
 8010174:	af00      	add	r7, sp, #0
 8010176:	4603      	mov	r3, r0
 8010178:	6039      	str	r1, [r7, #0]
 801017a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801017c:	683b      	ldr	r3, [r7, #0]
 801017e:	2204      	movs	r2, #4
 8010180:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010182:	4b03      	ldr	r3, [pc, #12]	; (8010190 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010184:	4618      	mov	r0, r3
 8010186:	370c      	adds	r7, #12
 8010188:	46bd      	mov	sp, r7
 801018a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018e:	4770      	bx	lr
 8010190:	24000164 	.word	0x24000164

08010194 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b082      	sub	sp, #8
 8010198:	af00      	add	r7, sp, #0
 801019a:	4603      	mov	r3, r0
 801019c:	6039      	str	r1, [r7, #0]
 801019e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80101a0:	79fb      	ldrb	r3, [r7, #7]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d105      	bne.n	80101b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80101a6:	683a      	ldr	r2, [r7, #0]
 80101a8:	4907      	ldr	r1, [pc, #28]	; (80101c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80101aa:	4808      	ldr	r0, [pc, #32]	; (80101cc <USBD_FS_ProductStrDescriptor+0x38>)
 80101ac:	f7ff fdbf 	bl	800fd2e <USBD_GetString>
 80101b0:	e004      	b.n	80101bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80101b2:	683a      	ldr	r2, [r7, #0]
 80101b4:	4904      	ldr	r1, [pc, #16]	; (80101c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80101b6:	4805      	ldr	r0, [pc, #20]	; (80101cc <USBD_FS_ProductStrDescriptor+0x38>)
 80101b8:	f7ff fdb9 	bl	800fd2e <USBD_GetString>
  }
  return USBD_StrDesc;
 80101bc:	4b02      	ldr	r3, [pc, #8]	; (80101c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80101be:	4618      	mov	r0, r3
 80101c0:	3708      	adds	r7, #8
 80101c2:	46bd      	mov	sp, r7
 80101c4:	bd80      	pop	{r7, pc}
 80101c6:	bf00      	nop
 80101c8:	24001dbc 	.word	0x24001dbc
 80101cc:	08011cb0 	.word	0x08011cb0

080101d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b082      	sub	sp, #8
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	4603      	mov	r3, r0
 80101d8:	6039      	str	r1, [r7, #0]
 80101da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80101dc:	683a      	ldr	r2, [r7, #0]
 80101de:	4904      	ldr	r1, [pc, #16]	; (80101f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80101e0:	4804      	ldr	r0, [pc, #16]	; (80101f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80101e2:	f7ff fda4 	bl	800fd2e <USBD_GetString>
  return USBD_StrDesc;
 80101e6:	4b02      	ldr	r3, [pc, #8]	; (80101f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80101e8:	4618      	mov	r0, r3
 80101ea:	3708      	adds	r7, #8
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bd80      	pop	{r7, pc}
 80101f0:	24001dbc 	.word	0x24001dbc
 80101f4:	08011cc8 	.word	0x08011cc8

080101f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b082      	sub	sp, #8
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	4603      	mov	r3, r0
 8010200:	6039      	str	r1, [r7, #0]
 8010202:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010204:	683b      	ldr	r3, [r7, #0]
 8010206:	221a      	movs	r2, #26
 8010208:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801020a:	f000 f843 	bl	8010294 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801020e:	4b02      	ldr	r3, [pc, #8]	; (8010218 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010210:	4618      	mov	r0, r3
 8010212:	3708      	adds	r7, #8
 8010214:	46bd      	mov	sp, r7
 8010216:	bd80      	pop	{r7, pc}
 8010218:	24000168 	.word	0x24000168

0801021c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b082      	sub	sp, #8
 8010220:	af00      	add	r7, sp, #0
 8010222:	4603      	mov	r3, r0
 8010224:	6039      	str	r1, [r7, #0]
 8010226:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010228:	79fb      	ldrb	r3, [r7, #7]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d105      	bne.n	801023a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801022e:	683a      	ldr	r2, [r7, #0]
 8010230:	4907      	ldr	r1, [pc, #28]	; (8010250 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010232:	4808      	ldr	r0, [pc, #32]	; (8010254 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010234:	f7ff fd7b 	bl	800fd2e <USBD_GetString>
 8010238:	e004      	b.n	8010244 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801023a:	683a      	ldr	r2, [r7, #0]
 801023c:	4904      	ldr	r1, [pc, #16]	; (8010250 <USBD_FS_ConfigStrDescriptor+0x34>)
 801023e:	4805      	ldr	r0, [pc, #20]	; (8010254 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010240:	f7ff fd75 	bl	800fd2e <USBD_GetString>
  }
  return USBD_StrDesc;
 8010244:	4b02      	ldr	r3, [pc, #8]	; (8010250 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010246:	4618      	mov	r0, r3
 8010248:	3708      	adds	r7, #8
 801024a:	46bd      	mov	sp, r7
 801024c:	bd80      	pop	{r7, pc}
 801024e:	bf00      	nop
 8010250:	24001dbc 	.word	0x24001dbc
 8010254:	08011cdc 	.word	0x08011cdc

08010258 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b082      	sub	sp, #8
 801025c:	af00      	add	r7, sp, #0
 801025e:	4603      	mov	r3, r0
 8010260:	6039      	str	r1, [r7, #0]
 8010262:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010264:	79fb      	ldrb	r3, [r7, #7]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d105      	bne.n	8010276 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801026a:	683a      	ldr	r2, [r7, #0]
 801026c:	4907      	ldr	r1, [pc, #28]	; (801028c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801026e:	4808      	ldr	r0, [pc, #32]	; (8010290 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010270:	f7ff fd5d 	bl	800fd2e <USBD_GetString>
 8010274:	e004      	b.n	8010280 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010276:	683a      	ldr	r2, [r7, #0]
 8010278:	4904      	ldr	r1, [pc, #16]	; (801028c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801027a:	4805      	ldr	r0, [pc, #20]	; (8010290 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801027c:	f7ff fd57 	bl	800fd2e <USBD_GetString>
  }
  return USBD_StrDesc;
 8010280:	4b02      	ldr	r3, [pc, #8]	; (801028c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010282:	4618      	mov	r0, r3
 8010284:	3708      	adds	r7, #8
 8010286:	46bd      	mov	sp, r7
 8010288:	bd80      	pop	{r7, pc}
 801028a:	bf00      	nop
 801028c:	24001dbc 	.word	0x24001dbc
 8010290:	08011ce8 	.word	0x08011ce8

08010294 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010294:	b580      	push	{r7, lr}
 8010296:	b084      	sub	sp, #16
 8010298:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801029a:	4b0f      	ldr	r3, [pc, #60]	; (80102d8 <Get_SerialNum+0x44>)
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80102a0:	4b0e      	ldr	r3, [pc, #56]	; (80102dc <Get_SerialNum+0x48>)
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80102a6:	4b0e      	ldr	r3, [pc, #56]	; (80102e0 <Get_SerialNum+0x4c>)
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80102ac:	68fa      	ldr	r2, [r7, #12]
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	4413      	add	r3, r2
 80102b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d009      	beq.n	80102ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80102ba:	2208      	movs	r2, #8
 80102bc:	4909      	ldr	r1, [pc, #36]	; (80102e4 <Get_SerialNum+0x50>)
 80102be:	68f8      	ldr	r0, [r7, #12]
 80102c0:	f000 f814 	bl	80102ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80102c4:	2204      	movs	r2, #4
 80102c6:	4908      	ldr	r1, [pc, #32]	; (80102e8 <Get_SerialNum+0x54>)
 80102c8:	68b8      	ldr	r0, [r7, #8]
 80102ca:	f000 f80f 	bl	80102ec <IntToUnicode>
  }
}
 80102ce:	bf00      	nop
 80102d0:	3710      	adds	r7, #16
 80102d2:	46bd      	mov	sp, r7
 80102d4:	bd80      	pop	{r7, pc}
 80102d6:	bf00      	nop
 80102d8:	1ff1e800 	.word	0x1ff1e800
 80102dc:	1ff1e804 	.word	0x1ff1e804
 80102e0:	1ff1e808 	.word	0x1ff1e808
 80102e4:	2400016a 	.word	0x2400016a
 80102e8:	2400017a 	.word	0x2400017a

080102ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80102ec:	b480      	push	{r7}
 80102ee:	b087      	sub	sp, #28
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	60f8      	str	r0, [r7, #12]
 80102f4:	60b9      	str	r1, [r7, #8]
 80102f6:	4613      	mov	r3, r2
 80102f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80102fa:	2300      	movs	r3, #0
 80102fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80102fe:	2300      	movs	r3, #0
 8010300:	75fb      	strb	r3, [r7, #23]
 8010302:	e027      	b.n	8010354 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	0f1b      	lsrs	r3, r3, #28
 8010308:	2b09      	cmp	r3, #9
 801030a:	d80b      	bhi.n	8010324 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	0f1b      	lsrs	r3, r3, #28
 8010310:	b2da      	uxtb	r2, r3
 8010312:	7dfb      	ldrb	r3, [r7, #23]
 8010314:	005b      	lsls	r3, r3, #1
 8010316:	4619      	mov	r1, r3
 8010318:	68bb      	ldr	r3, [r7, #8]
 801031a:	440b      	add	r3, r1
 801031c:	3230      	adds	r2, #48	; 0x30
 801031e:	b2d2      	uxtb	r2, r2
 8010320:	701a      	strb	r2, [r3, #0]
 8010322:	e00a      	b.n	801033a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	0f1b      	lsrs	r3, r3, #28
 8010328:	b2da      	uxtb	r2, r3
 801032a:	7dfb      	ldrb	r3, [r7, #23]
 801032c:	005b      	lsls	r3, r3, #1
 801032e:	4619      	mov	r1, r3
 8010330:	68bb      	ldr	r3, [r7, #8]
 8010332:	440b      	add	r3, r1
 8010334:	3237      	adds	r2, #55	; 0x37
 8010336:	b2d2      	uxtb	r2, r2
 8010338:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	011b      	lsls	r3, r3, #4
 801033e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010340:	7dfb      	ldrb	r3, [r7, #23]
 8010342:	005b      	lsls	r3, r3, #1
 8010344:	3301      	adds	r3, #1
 8010346:	68ba      	ldr	r2, [r7, #8]
 8010348:	4413      	add	r3, r2
 801034a:	2200      	movs	r2, #0
 801034c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801034e:	7dfb      	ldrb	r3, [r7, #23]
 8010350:	3301      	adds	r3, #1
 8010352:	75fb      	strb	r3, [r7, #23]
 8010354:	7dfa      	ldrb	r2, [r7, #23]
 8010356:	79fb      	ldrb	r3, [r7, #7]
 8010358:	429a      	cmp	r2, r3
 801035a:	d3d3      	bcc.n	8010304 <IntToUnicode+0x18>
  }
}
 801035c:	bf00      	nop
 801035e:	371c      	adds	r7, #28
 8010360:	46bd      	mov	sp, r7
 8010362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010366:	4770      	bx	lr

08010368 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010368:	b580      	push	{r7, lr}
 801036a:	b08a      	sub	sp, #40	; 0x28
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010370:	f107 0314 	add.w	r3, r7, #20
 8010374:	2200      	movs	r2, #0
 8010376:	601a      	str	r2, [r3, #0]
 8010378:	605a      	str	r2, [r3, #4]
 801037a:	609a      	str	r2, [r3, #8]
 801037c:	60da      	str	r2, [r3, #12]
 801037e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	4a1e      	ldr	r2, [pc, #120]	; (8010400 <HAL_PCD_MspInit+0x98>)
 8010386:	4293      	cmp	r3, r2
 8010388:	d136      	bne.n	80103f8 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801038a:	4b1e      	ldr	r3, [pc, #120]	; (8010404 <HAL_PCD_MspInit+0x9c>)
 801038c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010390:	4a1c      	ldr	r2, [pc, #112]	; (8010404 <HAL_PCD_MspInit+0x9c>)
 8010392:	f043 0301 	orr.w	r3, r3, #1
 8010396:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801039a:	4b1a      	ldr	r3, [pc, #104]	; (8010404 <HAL_PCD_MspInit+0x9c>)
 801039c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80103a0:	f003 0301 	and.w	r3, r3, #1
 80103a4:	613b      	str	r3, [r7, #16]
 80103a6:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80103a8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80103ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80103ae:	2302      	movs	r3, #2
 80103b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80103b2:	2300      	movs	r3, #0
 80103b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80103b6:	2300      	movs	r3, #0
 80103b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80103ba:	230a      	movs	r3, #10
 80103bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80103be:	f107 0314 	add.w	r3, r7, #20
 80103c2:	4619      	mov	r1, r3
 80103c4:	4810      	ldr	r0, [pc, #64]	; (8010408 <HAL_PCD_MspInit+0xa0>)
 80103c6:	f7f4 f9fb 	bl	80047c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80103ca:	4b0e      	ldr	r3, [pc, #56]	; (8010404 <HAL_PCD_MspInit+0x9c>)
 80103cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80103d0:	4a0c      	ldr	r2, [pc, #48]	; (8010404 <HAL_PCD_MspInit+0x9c>)
 80103d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80103d6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80103da:	4b0a      	ldr	r3, [pc, #40]	; (8010404 <HAL_PCD_MspInit+0x9c>)
 80103dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80103e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80103e4:	60fb      	str	r3, [r7, #12]
 80103e6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80103e8:	2200      	movs	r2, #0
 80103ea:	2100      	movs	r1, #0
 80103ec:	2065      	movs	r0, #101	; 0x65
 80103ee:	f7f1 fd72 	bl	8001ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80103f2:	2065      	movs	r0, #101	; 0x65
 80103f4:	f7f1 fd89 	bl	8001f0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80103f8:	bf00      	nop
 80103fa:	3728      	adds	r7, #40	; 0x28
 80103fc:	46bd      	mov	sp, r7
 80103fe:	bd80      	pop	{r7, pc}
 8010400:	40080000 	.word	0x40080000
 8010404:	58024400 	.word	0x58024400
 8010408:	58020000 	.word	0x58020000

0801040c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b082      	sub	sp, #8
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010420:	4619      	mov	r1, r3
 8010422:	4610      	mov	r0, r2
 8010424:	f7fe fd00 	bl	800ee28 <USBD_LL_SetupStage>
}
 8010428:	bf00      	nop
 801042a:	3708      	adds	r7, #8
 801042c:	46bd      	mov	sp, r7
 801042e:	bd80      	pop	{r7, pc}

08010430 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b082      	sub	sp, #8
 8010434:	af00      	add	r7, sp, #0
 8010436:	6078      	str	r0, [r7, #4]
 8010438:	460b      	mov	r3, r1
 801043a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010442:	78fa      	ldrb	r2, [r7, #3]
 8010444:	6879      	ldr	r1, [r7, #4]
 8010446:	4613      	mov	r3, r2
 8010448:	00db      	lsls	r3, r3, #3
 801044a:	1a9b      	subs	r3, r3, r2
 801044c:	009b      	lsls	r3, r3, #2
 801044e:	440b      	add	r3, r1
 8010450:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010454:	681a      	ldr	r2, [r3, #0]
 8010456:	78fb      	ldrb	r3, [r7, #3]
 8010458:	4619      	mov	r1, r3
 801045a:	f7fe fd38 	bl	800eece <USBD_LL_DataOutStage>
}
 801045e:	bf00      	nop
 8010460:	3708      	adds	r7, #8
 8010462:	46bd      	mov	sp, r7
 8010464:	bd80      	pop	{r7, pc}

08010466 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010466:	b580      	push	{r7, lr}
 8010468:	b082      	sub	sp, #8
 801046a:	af00      	add	r7, sp, #0
 801046c:	6078      	str	r0, [r7, #4]
 801046e:	460b      	mov	r3, r1
 8010470:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010478:	78fa      	ldrb	r2, [r7, #3]
 801047a:	6879      	ldr	r1, [r7, #4]
 801047c:	4613      	mov	r3, r2
 801047e:	00db      	lsls	r3, r3, #3
 8010480:	1a9b      	subs	r3, r3, r2
 8010482:	009b      	lsls	r3, r3, #2
 8010484:	440b      	add	r3, r1
 8010486:	3348      	adds	r3, #72	; 0x48
 8010488:	681a      	ldr	r2, [r3, #0]
 801048a:	78fb      	ldrb	r3, [r7, #3]
 801048c:	4619      	mov	r1, r3
 801048e:	f7fe fd81 	bl	800ef94 <USBD_LL_DataInStage>
}
 8010492:	bf00      	nop
 8010494:	3708      	adds	r7, #8
 8010496:	46bd      	mov	sp, r7
 8010498:	bd80      	pop	{r7, pc}

0801049a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801049a:	b580      	push	{r7, lr}
 801049c:	b082      	sub	sp, #8
 801049e:	af00      	add	r7, sp, #0
 80104a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80104a8:	4618      	mov	r0, r3
 80104aa:	f7fe fe85 	bl	800f1b8 <USBD_LL_SOF>
}
 80104ae:	bf00      	nop
 80104b0:	3708      	adds	r7, #8
 80104b2:	46bd      	mov	sp, r7
 80104b4:	bd80      	pop	{r7, pc}

080104b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80104b6:	b580      	push	{r7, lr}
 80104b8:	b084      	sub	sp, #16
 80104ba:	af00      	add	r7, sp, #0
 80104bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80104be:	2301      	movs	r3, #1
 80104c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	68db      	ldr	r3, [r3, #12]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d102      	bne.n	80104d0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80104ca:	2300      	movs	r3, #0
 80104cc:	73fb      	strb	r3, [r7, #15]
 80104ce:	e008      	b.n	80104e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	68db      	ldr	r3, [r3, #12]
 80104d4:	2b02      	cmp	r3, #2
 80104d6:	d102      	bne.n	80104de <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80104d8:	2301      	movs	r3, #1
 80104da:	73fb      	strb	r3, [r7, #15]
 80104dc:	e001      	b.n	80104e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80104de:	f7f0 ff9d 	bl	800141c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80104e8:	7bfa      	ldrb	r2, [r7, #15]
 80104ea:	4611      	mov	r1, r2
 80104ec:	4618      	mov	r0, r3
 80104ee:	f7fe fe28 	bl	800f142 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80104f8:	4618      	mov	r0, r3
 80104fa:	f7fe fde1 	bl	800f0c0 <USBD_LL_Reset>
}
 80104fe:	bf00      	nop
 8010500:	3710      	adds	r7, #16
 8010502:	46bd      	mov	sp, r7
 8010504:	bd80      	pop	{r7, pc}
	...

08010508 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b082      	sub	sp, #8
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010516:	4618      	mov	r0, r3
 8010518:	f7fe fe23 	bl	800f162 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	687a      	ldr	r2, [r7, #4]
 8010528:	6812      	ldr	r2, [r2, #0]
 801052a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801052e:	f043 0301 	orr.w	r3, r3, #1
 8010532:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	6a1b      	ldr	r3, [r3, #32]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d005      	beq.n	8010548 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801053c:	4b04      	ldr	r3, [pc, #16]	; (8010550 <HAL_PCD_SuspendCallback+0x48>)
 801053e:	691b      	ldr	r3, [r3, #16]
 8010540:	4a03      	ldr	r2, [pc, #12]	; (8010550 <HAL_PCD_SuspendCallback+0x48>)
 8010542:	f043 0306 	orr.w	r3, r3, #6
 8010546:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010548:	bf00      	nop
 801054a:	3708      	adds	r7, #8
 801054c:	46bd      	mov	sp, r7
 801054e:	bd80      	pop	{r7, pc}
 8010550:	e000ed00 	.word	0xe000ed00

08010554 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010554:	b580      	push	{r7, lr}
 8010556:	b082      	sub	sp, #8
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010562:	4618      	mov	r0, r3
 8010564:	f7fe fe12 	bl	800f18c <USBD_LL_Resume>
}
 8010568:	bf00      	nop
 801056a:	3708      	adds	r7, #8
 801056c:	46bd      	mov	sp, r7
 801056e:	bd80      	pop	{r7, pc}

08010570 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010570:	b580      	push	{r7, lr}
 8010572:	b082      	sub	sp, #8
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
 8010578:	460b      	mov	r3, r1
 801057a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010582:	78fa      	ldrb	r2, [r7, #3]
 8010584:	4611      	mov	r1, r2
 8010586:	4618      	mov	r0, r3
 8010588:	f7fe fe3d 	bl	800f206 <USBD_LL_IsoOUTIncomplete>
}
 801058c:	bf00      	nop
 801058e:	3708      	adds	r7, #8
 8010590:	46bd      	mov	sp, r7
 8010592:	bd80      	pop	{r7, pc}

08010594 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010594:	b580      	push	{r7, lr}
 8010596:	b082      	sub	sp, #8
 8010598:	af00      	add	r7, sp, #0
 801059a:	6078      	str	r0, [r7, #4]
 801059c:	460b      	mov	r3, r1
 801059e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80105a6:	78fa      	ldrb	r2, [r7, #3]
 80105a8:	4611      	mov	r1, r2
 80105aa:	4618      	mov	r0, r3
 80105ac:	f7fe fe1e 	bl	800f1ec <USBD_LL_IsoINIncomplete>
}
 80105b0:	bf00      	nop
 80105b2:	3708      	adds	r7, #8
 80105b4:	46bd      	mov	sp, r7
 80105b6:	bd80      	pop	{r7, pc}

080105b8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b082      	sub	sp, #8
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80105c6:	4618      	mov	r0, r3
 80105c8:	f7fe fe2a 	bl	800f220 <USBD_LL_DevConnected>
}
 80105cc:	bf00      	nop
 80105ce:	3708      	adds	r7, #8
 80105d0:	46bd      	mov	sp, r7
 80105d2:	bd80      	pop	{r7, pc}

080105d4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b082      	sub	sp, #8
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80105e2:	4618      	mov	r0, r3
 80105e4:	f7fe fe27 	bl	800f236 <USBD_LL_DevDisconnected>
}
 80105e8:	bf00      	nop
 80105ea:	3708      	adds	r7, #8
 80105ec:	46bd      	mov	sp, r7
 80105ee:	bd80      	pop	{r7, pc}

080105f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80105f0:	b580      	push	{r7, lr}
 80105f2:	b082      	sub	sp, #8
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	781b      	ldrb	r3, [r3, #0]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d13e      	bne.n	801067e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8010600:	4a21      	ldr	r2, [pc, #132]	; (8010688 <USBD_LL_Init+0x98>)
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	4a1f      	ldr	r2, [pc, #124]	; (8010688 <USBD_LL_Init+0x98>)
 801060c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010610:	4b1d      	ldr	r3, [pc, #116]	; (8010688 <USBD_LL_Init+0x98>)
 8010612:	4a1e      	ldr	r2, [pc, #120]	; (801068c <USBD_LL_Init+0x9c>)
 8010614:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8010616:	4b1c      	ldr	r3, [pc, #112]	; (8010688 <USBD_LL_Init+0x98>)
 8010618:	2209      	movs	r2, #9
 801061a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801061c:	4b1a      	ldr	r3, [pc, #104]	; (8010688 <USBD_LL_Init+0x98>)
 801061e:	2202      	movs	r2, #2
 8010620:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010622:	4b19      	ldr	r3, [pc, #100]	; (8010688 <USBD_LL_Init+0x98>)
 8010624:	2200      	movs	r2, #0
 8010626:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010628:	4b17      	ldr	r3, [pc, #92]	; (8010688 <USBD_LL_Init+0x98>)
 801062a:	2202      	movs	r2, #2
 801062c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801062e:	4b16      	ldr	r3, [pc, #88]	; (8010688 <USBD_LL_Init+0x98>)
 8010630:	2200      	movs	r2, #0
 8010632:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8010634:	4b14      	ldr	r3, [pc, #80]	; (8010688 <USBD_LL_Init+0x98>)
 8010636:	2200      	movs	r2, #0
 8010638:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801063a:	4b13      	ldr	r3, [pc, #76]	; (8010688 <USBD_LL_Init+0x98>)
 801063c:	2200      	movs	r2, #0
 801063e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8010640:	4b11      	ldr	r3, [pc, #68]	; (8010688 <USBD_LL_Init+0x98>)
 8010642:	2200      	movs	r2, #0
 8010644:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8010646:	4b10      	ldr	r3, [pc, #64]	; (8010688 <USBD_LL_Init+0x98>)
 8010648:	2200      	movs	r2, #0
 801064a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801064c:	4b0e      	ldr	r3, [pc, #56]	; (8010688 <USBD_LL_Init+0x98>)
 801064e:	2200      	movs	r2, #0
 8010650:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010652:	480d      	ldr	r0, [pc, #52]	; (8010688 <USBD_LL_Init+0x98>)
 8010654:	f7f4 faca 	bl	8004bec <HAL_PCD_Init>
 8010658:	4603      	mov	r3, r0
 801065a:	2b00      	cmp	r3, #0
 801065c:	d001      	beq.n	8010662 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801065e:	f7f0 fedd 	bl	800141c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010662:	2180      	movs	r1, #128	; 0x80
 8010664:	4808      	ldr	r0, [pc, #32]	; (8010688 <USBD_LL_Init+0x98>)
 8010666:	f7f5 fc5c 	bl	8005f22 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801066a:	2240      	movs	r2, #64	; 0x40
 801066c:	2100      	movs	r1, #0
 801066e:	4806      	ldr	r0, [pc, #24]	; (8010688 <USBD_LL_Init+0x98>)
 8010670:	f7f5 fc10 	bl	8005e94 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010674:	2280      	movs	r2, #128	; 0x80
 8010676:	2101      	movs	r1, #1
 8010678:	4803      	ldr	r0, [pc, #12]	; (8010688 <USBD_LL_Init+0x98>)
 801067a:	f7f5 fc0b 	bl	8005e94 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801067e:	2300      	movs	r3, #0
}
 8010680:	4618      	mov	r0, r3
 8010682:	3708      	adds	r7, #8
 8010684:	46bd      	mov	sp, r7
 8010686:	bd80      	pop	{r7, pc}
 8010688:	24001fbc 	.word	0x24001fbc
 801068c:	40080000 	.word	0x40080000

08010690 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010690:	b580      	push	{r7, lr}
 8010692:	b084      	sub	sp, #16
 8010694:	af00      	add	r7, sp, #0
 8010696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010698:	2300      	movs	r3, #0
 801069a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801069c:	2300      	movs	r3, #0
 801069e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80106a6:	4618      	mov	r0, r3
 80106a8:	f7f4 fbc4 	bl	8004e34 <HAL_PCD_Start>
 80106ac:	4603      	mov	r3, r0
 80106ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106b0:	7bfb      	ldrb	r3, [r7, #15]
 80106b2:	4618      	mov	r0, r3
 80106b4:	f000 f92a 	bl	801090c <USBD_Get_USB_Status>
 80106b8:	4603      	mov	r3, r0
 80106ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80106bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80106be:	4618      	mov	r0, r3
 80106c0:	3710      	adds	r7, #16
 80106c2:	46bd      	mov	sp, r7
 80106c4:	bd80      	pop	{r7, pc}

080106c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80106c6:	b580      	push	{r7, lr}
 80106c8:	b084      	sub	sp, #16
 80106ca:	af00      	add	r7, sp, #0
 80106cc:	6078      	str	r0, [r7, #4]
 80106ce:	4608      	mov	r0, r1
 80106d0:	4611      	mov	r1, r2
 80106d2:	461a      	mov	r2, r3
 80106d4:	4603      	mov	r3, r0
 80106d6:	70fb      	strb	r3, [r7, #3]
 80106d8:	460b      	mov	r3, r1
 80106da:	70bb      	strb	r3, [r7, #2]
 80106dc:	4613      	mov	r3, r2
 80106de:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106e0:	2300      	movs	r3, #0
 80106e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106e4:	2300      	movs	r3, #0
 80106e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80106ee:	78bb      	ldrb	r3, [r7, #2]
 80106f0:	883a      	ldrh	r2, [r7, #0]
 80106f2:	78f9      	ldrb	r1, [r7, #3]
 80106f4:	f7f4 ffd5 	bl	80056a2 <HAL_PCD_EP_Open>
 80106f8:	4603      	mov	r3, r0
 80106fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106fc:	7bfb      	ldrb	r3, [r7, #15]
 80106fe:	4618      	mov	r0, r3
 8010700:	f000 f904 	bl	801090c <USBD_Get_USB_Status>
 8010704:	4603      	mov	r3, r0
 8010706:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010708:	7bbb      	ldrb	r3, [r7, #14]
}
 801070a:	4618      	mov	r0, r3
 801070c:	3710      	adds	r7, #16
 801070e:	46bd      	mov	sp, r7
 8010710:	bd80      	pop	{r7, pc}

08010712 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010712:	b580      	push	{r7, lr}
 8010714:	b084      	sub	sp, #16
 8010716:	af00      	add	r7, sp, #0
 8010718:	6078      	str	r0, [r7, #4]
 801071a:	460b      	mov	r3, r1
 801071c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801071e:	2300      	movs	r3, #0
 8010720:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010722:	2300      	movs	r3, #0
 8010724:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801072c:	78fa      	ldrb	r2, [r7, #3]
 801072e:	4611      	mov	r1, r2
 8010730:	4618      	mov	r0, r3
 8010732:	f7f5 f81e 	bl	8005772 <HAL_PCD_EP_Close>
 8010736:	4603      	mov	r3, r0
 8010738:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801073a:	7bfb      	ldrb	r3, [r7, #15]
 801073c:	4618      	mov	r0, r3
 801073e:	f000 f8e5 	bl	801090c <USBD_Get_USB_Status>
 8010742:	4603      	mov	r3, r0
 8010744:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010746:	7bbb      	ldrb	r3, [r7, #14]
}
 8010748:	4618      	mov	r0, r3
 801074a:	3710      	adds	r7, #16
 801074c:	46bd      	mov	sp, r7
 801074e:	bd80      	pop	{r7, pc}

08010750 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010750:	b580      	push	{r7, lr}
 8010752:	b084      	sub	sp, #16
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
 8010758:	460b      	mov	r3, r1
 801075a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801075c:	2300      	movs	r3, #0
 801075e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010760:	2300      	movs	r3, #0
 8010762:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801076a:	78fa      	ldrb	r2, [r7, #3]
 801076c:	4611      	mov	r1, r2
 801076e:	4618      	mov	r0, r3
 8010770:	f7f5 f8f6 	bl	8005960 <HAL_PCD_EP_SetStall>
 8010774:	4603      	mov	r3, r0
 8010776:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010778:	7bfb      	ldrb	r3, [r7, #15]
 801077a:	4618      	mov	r0, r3
 801077c:	f000 f8c6 	bl	801090c <USBD_Get_USB_Status>
 8010780:	4603      	mov	r3, r0
 8010782:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010784:	7bbb      	ldrb	r3, [r7, #14]
}
 8010786:	4618      	mov	r0, r3
 8010788:	3710      	adds	r7, #16
 801078a:	46bd      	mov	sp, r7
 801078c:	bd80      	pop	{r7, pc}

0801078e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801078e:	b580      	push	{r7, lr}
 8010790:	b084      	sub	sp, #16
 8010792:	af00      	add	r7, sp, #0
 8010794:	6078      	str	r0, [r7, #4]
 8010796:	460b      	mov	r3, r1
 8010798:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801079a:	2300      	movs	r3, #0
 801079c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801079e:	2300      	movs	r3, #0
 80107a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80107a8:	78fa      	ldrb	r2, [r7, #3]
 80107aa:	4611      	mov	r1, r2
 80107ac:	4618      	mov	r0, r3
 80107ae:	f7f5 f93b 	bl	8005a28 <HAL_PCD_EP_ClrStall>
 80107b2:	4603      	mov	r3, r0
 80107b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80107b6:	7bfb      	ldrb	r3, [r7, #15]
 80107b8:	4618      	mov	r0, r3
 80107ba:	f000 f8a7 	bl	801090c <USBD_Get_USB_Status>
 80107be:	4603      	mov	r3, r0
 80107c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80107c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80107c4:	4618      	mov	r0, r3
 80107c6:	3710      	adds	r7, #16
 80107c8:	46bd      	mov	sp, r7
 80107ca:	bd80      	pop	{r7, pc}

080107cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80107cc:	b480      	push	{r7}
 80107ce:	b085      	sub	sp, #20
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
 80107d4:	460b      	mov	r3, r1
 80107d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80107de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80107e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	da0b      	bge.n	8010800 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80107e8:	78fb      	ldrb	r3, [r7, #3]
 80107ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80107ee:	68f9      	ldr	r1, [r7, #12]
 80107f0:	4613      	mov	r3, r2
 80107f2:	00db      	lsls	r3, r3, #3
 80107f4:	1a9b      	subs	r3, r3, r2
 80107f6:	009b      	lsls	r3, r3, #2
 80107f8:	440b      	add	r3, r1
 80107fa:	333e      	adds	r3, #62	; 0x3e
 80107fc:	781b      	ldrb	r3, [r3, #0]
 80107fe:	e00b      	b.n	8010818 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010800:	78fb      	ldrb	r3, [r7, #3]
 8010802:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010806:	68f9      	ldr	r1, [r7, #12]
 8010808:	4613      	mov	r3, r2
 801080a:	00db      	lsls	r3, r3, #3
 801080c:	1a9b      	subs	r3, r3, r2
 801080e:	009b      	lsls	r3, r3, #2
 8010810:	440b      	add	r3, r1
 8010812:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010816:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010818:	4618      	mov	r0, r3
 801081a:	3714      	adds	r7, #20
 801081c:	46bd      	mov	sp, r7
 801081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010822:	4770      	bx	lr

08010824 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010824:	b580      	push	{r7, lr}
 8010826:	b084      	sub	sp, #16
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
 801082c:	460b      	mov	r3, r1
 801082e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010830:	2300      	movs	r3, #0
 8010832:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010834:	2300      	movs	r3, #0
 8010836:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801083e:	78fa      	ldrb	r2, [r7, #3]
 8010840:	4611      	mov	r1, r2
 8010842:	4618      	mov	r0, r3
 8010844:	f7f4 ff08 	bl	8005658 <HAL_PCD_SetAddress>
 8010848:	4603      	mov	r3, r0
 801084a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801084c:	7bfb      	ldrb	r3, [r7, #15]
 801084e:	4618      	mov	r0, r3
 8010850:	f000 f85c 	bl	801090c <USBD_Get_USB_Status>
 8010854:	4603      	mov	r3, r0
 8010856:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010858:	7bbb      	ldrb	r3, [r7, #14]
}
 801085a:	4618      	mov	r0, r3
 801085c:	3710      	adds	r7, #16
 801085e:	46bd      	mov	sp, r7
 8010860:	bd80      	pop	{r7, pc}

08010862 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010862:	b580      	push	{r7, lr}
 8010864:	b086      	sub	sp, #24
 8010866:	af00      	add	r7, sp, #0
 8010868:	60f8      	str	r0, [r7, #12]
 801086a:	607a      	str	r2, [r7, #4]
 801086c:	603b      	str	r3, [r7, #0]
 801086e:	460b      	mov	r3, r1
 8010870:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010872:	2300      	movs	r3, #0
 8010874:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010876:	2300      	movs	r3, #0
 8010878:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010880:	7af9      	ldrb	r1, [r7, #11]
 8010882:	683b      	ldr	r3, [r7, #0]
 8010884:	687a      	ldr	r2, [r7, #4]
 8010886:	f7f5 f821 	bl	80058cc <HAL_PCD_EP_Transmit>
 801088a:	4603      	mov	r3, r0
 801088c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801088e:	7dfb      	ldrb	r3, [r7, #23]
 8010890:	4618      	mov	r0, r3
 8010892:	f000 f83b 	bl	801090c <USBD_Get_USB_Status>
 8010896:	4603      	mov	r3, r0
 8010898:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801089a:	7dbb      	ldrb	r3, [r7, #22]
}
 801089c:	4618      	mov	r0, r3
 801089e:	3718      	adds	r7, #24
 80108a0:	46bd      	mov	sp, r7
 80108a2:	bd80      	pop	{r7, pc}

080108a4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b086      	sub	sp, #24
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	60f8      	str	r0, [r7, #12]
 80108ac:	607a      	str	r2, [r7, #4]
 80108ae:	603b      	str	r3, [r7, #0]
 80108b0:	460b      	mov	r3, r1
 80108b2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80108b4:	2300      	movs	r3, #0
 80108b6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80108b8:	2300      	movs	r3, #0
 80108ba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80108c2:	7af9      	ldrb	r1, [r7, #11]
 80108c4:	683b      	ldr	r3, [r7, #0]
 80108c6:	687a      	ldr	r2, [r7, #4]
 80108c8:	f7f4 ff9d 	bl	8005806 <HAL_PCD_EP_Receive>
 80108cc:	4603      	mov	r3, r0
 80108ce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80108d0:	7dfb      	ldrb	r3, [r7, #23]
 80108d2:	4618      	mov	r0, r3
 80108d4:	f000 f81a 	bl	801090c <USBD_Get_USB_Status>
 80108d8:	4603      	mov	r3, r0
 80108da:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80108dc:	7dbb      	ldrb	r3, [r7, #22]
}
 80108de:	4618      	mov	r0, r3
 80108e0:	3718      	adds	r7, #24
 80108e2:	46bd      	mov	sp, r7
 80108e4:	bd80      	pop	{r7, pc}

080108e6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80108e6:	b580      	push	{r7, lr}
 80108e8:	b082      	sub	sp, #8
 80108ea:	af00      	add	r7, sp, #0
 80108ec:	6078      	str	r0, [r7, #4]
 80108ee:	460b      	mov	r3, r1
 80108f0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80108f8:	78fa      	ldrb	r2, [r7, #3]
 80108fa:	4611      	mov	r1, r2
 80108fc:	4618      	mov	r0, r3
 80108fe:	f7f4 ffcd 	bl	800589c <HAL_PCD_EP_GetRxCount>
 8010902:	4603      	mov	r3, r0
}
 8010904:	4618      	mov	r0, r3
 8010906:	3708      	adds	r7, #8
 8010908:	46bd      	mov	sp, r7
 801090a:	bd80      	pop	{r7, pc}

0801090c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801090c:	b480      	push	{r7}
 801090e:	b085      	sub	sp, #20
 8010910:	af00      	add	r7, sp, #0
 8010912:	4603      	mov	r3, r0
 8010914:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010916:	2300      	movs	r3, #0
 8010918:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801091a:	79fb      	ldrb	r3, [r7, #7]
 801091c:	2b03      	cmp	r3, #3
 801091e:	d817      	bhi.n	8010950 <USBD_Get_USB_Status+0x44>
 8010920:	a201      	add	r2, pc, #4	; (adr r2, 8010928 <USBD_Get_USB_Status+0x1c>)
 8010922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010926:	bf00      	nop
 8010928:	08010939 	.word	0x08010939
 801092c:	0801093f 	.word	0x0801093f
 8010930:	08010945 	.word	0x08010945
 8010934:	0801094b 	.word	0x0801094b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010938:	2300      	movs	r3, #0
 801093a:	73fb      	strb	r3, [r7, #15]
    break;
 801093c:	e00b      	b.n	8010956 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801093e:	2303      	movs	r3, #3
 8010940:	73fb      	strb	r3, [r7, #15]
    break;
 8010942:	e008      	b.n	8010956 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010944:	2301      	movs	r3, #1
 8010946:	73fb      	strb	r3, [r7, #15]
    break;
 8010948:	e005      	b.n	8010956 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801094a:	2303      	movs	r3, #3
 801094c:	73fb      	strb	r3, [r7, #15]
    break;
 801094e:	e002      	b.n	8010956 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010950:	2303      	movs	r3, #3
 8010952:	73fb      	strb	r3, [r7, #15]
    break;
 8010954:	bf00      	nop
  }
  return usb_status;
 8010956:	7bfb      	ldrb	r3, [r7, #15]
}
 8010958:	4618      	mov	r0, r3
 801095a:	3714      	adds	r7, #20
 801095c:	46bd      	mov	sp, r7
 801095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010962:	4770      	bx	lr

08010964 <__errno>:
 8010964:	4b01      	ldr	r3, [pc, #4]	; (801096c <__errno+0x8>)
 8010966:	6818      	ldr	r0, [r3, #0]
 8010968:	4770      	bx	lr
 801096a:	bf00      	nop
 801096c:	24000184 	.word	0x24000184

08010970 <__libc_init_array>:
 8010970:	b570      	push	{r4, r5, r6, lr}
 8010972:	4e0d      	ldr	r6, [pc, #52]	; (80109a8 <__libc_init_array+0x38>)
 8010974:	4c0d      	ldr	r4, [pc, #52]	; (80109ac <__libc_init_array+0x3c>)
 8010976:	1ba4      	subs	r4, r4, r6
 8010978:	10a4      	asrs	r4, r4, #2
 801097a:	2500      	movs	r5, #0
 801097c:	42a5      	cmp	r5, r4
 801097e:	d109      	bne.n	8010994 <__libc_init_array+0x24>
 8010980:	4e0b      	ldr	r6, [pc, #44]	; (80109b0 <__libc_init_array+0x40>)
 8010982:	4c0c      	ldr	r4, [pc, #48]	; (80109b4 <__libc_init_array+0x44>)
 8010984:	f001 f8ee 	bl	8011b64 <_init>
 8010988:	1ba4      	subs	r4, r4, r6
 801098a:	10a4      	asrs	r4, r4, #2
 801098c:	2500      	movs	r5, #0
 801098e:	42a5      	cmp	r5, r4
 8010990:	d105      	bne.n	801099e <__libc_init_array+0x2e>
 8010992:	bd70      	pop	{r4, r5, r6, pc}
 8010994:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010998:	4798      	blx	r3
 801099a:	3501      	adds	r5, #1
 801099c:	e7ee      	b.n	801097c <__libc_init_array+0xc>
 801099e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80109a2:	4798      	blx	r3
 80109a4:	3501      	adds	r5, #1
 80109a6:	e7f2      	b.n	801098e <__libc_init_array+0x1e>
 80109a8:	08011ddc 	.word	0x08011ddc
 80109ac:	08011ddc 	.word	0x08011ddc
 80109b0:	08011ddc 	.word	0x08011ddc
 80109b4:	08011de0 	.word	0x08011de0

080109b8 <malloc>:
 80109b8:	4b02      	ldr	r3, [pc, #8]	; (80109c4 <malloc+0xc>)
 80109ba:	4601      	mov	r1, r0
 80109bc:	6818      	ldr	r0, [r3, #0]
 80109be:	f000 b86d 	b.w	8010a9c <_malloc_r>
 80109c2:	bf00      	nop
 80109c4:	24000184 	.word	0x24000184

080109c8 <free>:
 80109c8:	4b02      	ldr	r3, [pc, #8]	; (80109d4 <free+0xc>)
 80109ca:	4601      	mov	r1, r0
 80109cc:	6818      	ldr	r0, [r3, #0]
 80109ce:	f000 b817 	b.w	8010a00 <_free_r>
 80109d2:	bf00      	nop
 80109d4:	24000184 	.word	0x24000184

080109d8 <memcpy>:
 80109d8:	b510      	push	{r4, lr}
 80109da:	1e43      	subs	r3, r0, #1
 80109dc:	440a      	add	r2, r1
 80109de:	4291      	cmp	r1, r2
 80109e0:	d100      	bne.n	80109e4 <memcpy+0xc>
 80109e2:	bd10      	pop	{r4, pc}
 80109e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80109e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80109ec:	e7f7      	b.n	80109de <memcpy+0x6>

080109ee <memset>:
 80109ee:	4402      	add	r2, r0
 80109f0:	4603      	mov	r3, r0
 80109f2:	4293      	cmp	r3, r2
 80109f4:	d100      	bne.n	80109f8 <memset+0xa>
 80109f6:	4770      	bx	lr
 80109f8:	f803 1b01 	strb.w	r1, [r3], #1
 80109fc:	e7f9      	b.n	80109f2 <memset+0x4>
	...

08010a00 <_free_r>:
 8010a00:	b538      	push	{r3, r4, r5, lr}
 8010a02:	4605      	mov	r5, r0
 8010a04:	2900      	cmp	r1, #0
 8010a06:	d045      	beq.n	8010a94 <_free_r+0x94>
 8010a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a0c:	1f0c      	subs	r4, r1, #4
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	bfb8      	it	lt
 8010a12:	18e4      	addlt	r4, r4, r3
 8010a14:	f000 f9c2 	bl	8010d9c <__malloc_lock>
 8010a18:	4a1f      	ldr	r2, [pc, #124]	; (8010a98 <_free_r+0x98>)
 8010a1a:	6813      	ldr	r3, [r2, #0]
 8010a1c:	4610      	mov	r0, r2
 8010a1e:	b933      	cbnz	r3, 8010a2e <_free_r+0x2e>
 8010a20:	6063      	str	r3, [r4, #4]
 8010a22:	6014      	str	r4, [r2, #0]
 8010a24:	4628      	mov	r0, r5
 8010a26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a2a:	f000 b9b8 	b.w	8010d9e <__malloc_unlock>
 8010a2e:	42a3      	cmp	r3, r4
 8010a30:	d90c      	bls.n	8010a4c <_free_r+0x4c>
 8010a32:	6821      	ldr	r1, [r4, #0]
 8010a34:	1862      	adds	r2, r4, r1
 8010a36:	4293      	cmp	r3, r2
 8010a38:	bf04      	itt	eq
 8010a3a:	681a      	ldreq	r2, [r3, #0]
 8010a3c:	685b      	ldreq	r3, [r3, #4]
 8010a3e:	6063      	str	r3, [r4, #4]
 8010a40:	bf04      	itt	eq
 8010a42:	1852      	addeq	r2, r2, r1
 8010a44:	6022      	streq	r2, [r4, #0]
 8010a46:	6004      	str	r4, [r0, #0]
 8010a48:	e7ec      	b.n	8010a24 <_free_r+0x24>
 8010a4a:	4613      	mov	r3, r2
 8010a4c:	685a      	ldr	r2, [r3, #4]
 8010a4e:	b10a      	cbz	r2, 8010a54 <_free_r+0x54>
 8010a50:	42a2      	cmp	r2, r4
 8010a52:	d9fa      	bls.n	8010a4a <_free_r+0x4a>
 8010a54:	6819      	ldr	r1, [r3, #0]
 8010a56:	1858      	adds	r0, r3, r1
 8010a58:	42a0      	cmp	r0, r4
 8010a5a:	d10b      	bne.n	8010a74 <_free_r+0x74>
 8010a5c:	6820      	ldr	r0, [r4, #0]
 8010a5e:	4401      	add	r1, r0
 8010a60:	1858      	adds	r0, r3, r1
 8010a62:	4282      	cmp	r2, r0
 8010a64:	6019      	str	r1, [r3, #0]
 8010a66:	d1dd      	bne.n	8010a24 <_free_r+0x24>
 8010a68:	6810      	ldr	r0, [r2, #0]
 8010a6a:	6852      	ldr	r2, [r2, #4]
 8010a6c:	605a      	str	r2, [r3, #4]
 8010a6e:	4401      	add	r1, r0
 8010a70:	6019      	str	r1, [r3, #0]
 8010a72:	e7d7      	b.n	8010a24 <_free_r+0x24>
 8010a74:	d902      	bls.n	8010a7c <_free_r+0x7c>
 8010a76:	230c      	movs	r3, #12
 8010a78:	602b      	str	r3, [r5, #0]
 8010a7a:	e7d3      	b.n	8010a24 <_free_r+0x24>
 8010a7c:	6820      	ldr	r0, [r4, #0]
 8010a7e:	1821      	adds	r1, r4, r0
 8010a80:	428a      	cmp	r2, r1
 8010a82:	bf04      	itt	eq
 8010a84:	6811      	ldreq	r1, [r2, #0]
 8010a86:	6852      	ldreq	r2, [r2, #4]
 8010a88:	6062      	str	r2, [r4, #4]
 8010a8a:	bf04      	itt	eq
 8010a8c:	1809      	addeq	r1, r1, r0
 8010a8e:	6021      	streq	r1, [r4, #0]
 8010a90:	605c      	str	r4, [r3, #4]
 8010a92:	e7c7      	b.n	8010a24 <_free_r+0x24>
 8010a94:	bd38      	pop	{r3, r4, r5, pc}
 8010a96:	bf00      	nop
 8010a98:	24000234 	.word	0x24000234

08010a9c <_malloc_r>:
 8010a9c:	b570      	push	{r4, r5, r6, lr}
 8010a9e:	1ccd      	adds	r5, r1, #3
 8010aa0:	f025 0503 	bic.w	r5, r5, #3
 8010aa4:	3508      	adds	r5, #8
 8010aa6:	2d0c      	cmp	r5, #12
 8010aa8:	bf38      	it	cc
 8010aaa:	250c      	movcc	r5, #12
 8010aac:	2d00      	cmp	r5, #0
 8010aae:	4606      	mov	r6, r0
 8010ab0:	db01      	blt.n	8010ab6 <_malloc_r+0x1a>
 8010ab2:	42a9      	cmp	r1, r5
 8010ab4:	d903      	bls.n	8010abe <_malloc_r+0x22>
 8010ab6:	230c      	movs	r3, #12
 8010ab8:	6033      	str	r3, [r6, #0]
 8010aba:	2000      	movs	r0, #0
 8010abc:	bd70      	pop	{r4, r5, r6, pc}
 8010abe:	f000 f96d 	bl	8010d9c <__malloc_lock>
 8010ac2:	4a21      	ldr	r2, [pc, #132]	; (8010b48 <_malloc_r+0xac>)
 8010ac4:	6814      	ldr	r4, [r2, #0]
 8010ac6:	4621      	mov	r1, r4
 8010ac8:	b991      	cbnz	r1, 8010af0 <_malloc_r+0x54>
 8010aca:	4c20      	ldr	r4, [pc, #128]	; (8010b4c <_malloc_r+0xb0>)
 8010acc:	6823      	ldr	r3, [r4, #0]
 8010ace:	b91b      	cbnz	r3, 8010ad8 <_malloc_r+0x3c>
 8010ad0:	4630      	mov	r0, r6
 8010ad2:	f000 f855 	bl	8010b80 <_sbrk_r>
 8010ad6:	6020      	str	r0, [r4, #0]
 8010ad8:	4629      	mov	r1, r5
 8010ada:	4630      	mov	r0, r6
 8010adc:	f000 f850 	bl	8010b80 <_sbrk_r>
 8010ae0:	1c43      	adds	r3, r0, #1
 8010ae2:	d124      	bne.n	8010b2e <_malloc_r+0x92>
 8010ae4:	230c      	movs	r3, #12
 8010ae6:	6033      	str	r3, [r6, #0]
 8010ae8:	4630      	mov	r0, r6
 8010aea:	f000 f958 	bl	8010d9e <__malloc_unlock>
 8010aee:	e7e4      	b.n	8010aba <_malloc_r+0x1e>
 8010af0:	680b      	ldr	r3, [r1, #0]
 8010af2:	1b5b      	subs	r3, r3, r5
 8010af4:	d418      	bmi.n	8010b28 <_malloc_r+0x8c>
 8010af6:	2b0b      	cmp	r3, #11
 8010af8:	d90f      	bls.n	8010b1a <_malloc_r+0x7e>
 8010afa:	600b      	str	r3, [r1, #0]
 8010afc:	50cd      	str	r5, [r1, r3]
 8010afe:	18cc      	adds	r4, r1, r3
 8010b00:	4630      	mov	r0, r6
 8010b02:	f000 f94c 	bl	8010d9e <__malloc_unlock>
 8010b06:	f104 000b 	add.w	r0, r4, #11
 8010b0a:	1d23      	adds	r3, r4, #4
 8010b0c:	f020 0007 	bic.w	r0, r0, #7
 8010b10:	1ac3      	subs	r3, r0, r3
 8010b12:	d0d3      	beq.n	8010abc <_malloc_r+0x20>
 8010b14:	425a      	negs	r2, r3
 8010b16:	50e2      	str	r2, [r4, r3]
 8010b18:	e7d0      	b.n	8010abc <_malloc_r+0x20>
 8010b1a:	428c      	cmp	r4, r1
 8010b1c:	684b      	ldr	r3, [r1, #4]
 8010b1e:	bf16      	itet	ne
 8010b20:	6063      	strne	r3, [r4, #4]
 8010b22:	6013      	streq	r3, [r2, #0]
 8010b24:	460c      	movne	r4, r1
 8010b26:	e7eb      	b.n	8010b00 <_malloc_r+0x64>
 8010b28:	460c      	mov	r4, r1
 8010b2a:	6849      	ldr	r1, [r1, #4]
 8010b2c:	e7cc      	b.n	8010ac8 <_malloc_r+0x2c>
 8010b2e:	1cc4      	adds	r4, r0, #3
 8010b30:	f024 0403 	bic.w	r4, r4, #3
 8010b34:	42a0      	cmp	r0, r4
 8010b36:	d005      	beq.n	8010b44 <_malloc_r+0xa8>
 8010b38:	1a21      	subs	r1, r4, r0
 8010b3a:	4630      	mov	r0, r6
 8010b3c:	f000 f820 	bl	8010b80 <_sbrk_r>
 8010b40:	3001      	adds	r0, #1
 8010b42:	d0cf      	beq.n	8010ae4 <_malloc_r+0x48>
 8010b44:	6025      	str	r5, [r4, #0]
 8010b46:	e7db      	b.n	8010b00 <_malloc_r+0x64>
 8010b48:	24000234 	.word	0x24000234
 8010b4c:	24000238 	.word	0x24000238

08010b50 <iprintf>:
 8010b50:	b40f      	push	{r0, r1, r2, r3}
 8010b52:	4b0a      	ldr	r3, [pc, #40]	; (8010b7c <iprintf+0x2c>)
 8010b54:	b513      	push	{r0, r1, r4, lr}
 8010b56:	681c      	ldr	r4, [r3, #0]
 8010b58:	b124      	cbz	r4, 8010b64 <iprintf+0x14>
 8010b5a:	69a3      	ldr	r3, [r4, #24]
 8010b5c:	b913      	cbnz	r3, 8010b64 <iprintf+0x14>
 8010b5e:	4620      	mov	r0, r4
 8010b60:	f000 f892 	bl	8010c88 <__sinit>
 8010b64:	ab05      	add	r3, sp, #20
 8010b66:	9a04      	ldr	r2, [sp, #16]
 8010b68:	68a1      	ldr	r1, [r4, #8]
 8010b6a:	9301      	str	r3, [sp, #4]
 8010b6c:	4620      	mov	r0, r4
 8010b6e:	f000 fa93 	bl	8011098 <_vfiprintf_r>
 8010b72:	b002      	add	sp, #8
 8010b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b78:	b004      	add	sp, #16
 8010b7a:	4770      	bx	lr
 8010b7c:	24000184 	.word	0x24000184

08010b80 <_sbrk_r>:
 8010b80:	b538      	push	{r3, r4, r5, lr}
 8010b82:	4c06      	ldr	r4, [pc, #24]	; (8010b9c <_sbrk_r+0x1c>)
 8010b84:	2300      	movs	r3, #0
 8010b86:	4605      	mov	r5, r0
 8010b88:	4608      	mov	r0, r1
 8010b8a:	6023      	str	r3, [r4, #0]
 8010b8c:	f7f0 ff1c 	bl	80019c8 <_sbrk>
 8010b90:	1c43      	adds	r3, r0, #1
 8010b92:	d102      	bne.n	8010b9a <_sbrk_r+0x1a>
 8010b94:	6823      	ldr	r3, [r4, #0]
 8010b96:	b103      	cbz	r3, 8010b9a <_sbrk_r+0x1a>
 8010b98:	602b      	str	r3, [r5, #0]
 8010b9a:	bd38      	pop	{r3, r4, r5, pc}
 8010b9c:	240023c4 	.word	0x240023c4

08010ba0 <sniprintf>:
 8010ba0:	b40c      	push	{r2, r3}
 8010ba2:	b530      	push	{r4, r5, lr}
 8010ba4:	4b17      	ldr	r3, [pc, #92]	; (8010c04 <sniprintf+0x64>)
 8010ba6:	1e0c      	subs	r4, r1, #0
 8010ba8:	b09d      	sub	sp, #116	; 0x74
 8010baa:	681d      	ldr	r5, [r3, #0]
 8010bac:	da08      	bge.n	8010bc0 <sniprintf+0x20>
 8010bae:	238b      	movs	r3, #139	; 0x8b
 8010bb0:	602b      	str	r3, [r5, #0]
 8010bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8010bb6:	b01d      	add	sp, #116	; 0x74
 8010bb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010bbc:	b002      	add	sp, #8
 8010bbe:	4770      	bx	lr
 8010bc0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010bc4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010bc8:	bf14      	ite	ne
 8010bca:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010bce:	4623      	moveq	r3, r4
 8010bd0:	9304      	str	r3, [sp, #16]
 8010bd2:	9307      	str	r3, [sp, #28]
 8010bd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010bd8:	9002      	str	r0, [sp, #8]
 8010bda:	9006      	str	r0, [sp, #24]
 8010bdc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010be0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010be2:	ab21      	add	r3, sp, #132	; 0x84
 8010be4:	a902      	add	r1, sp, #8
 8010be6:	4628      	mov	r0, r5
 8010be8:	9301      	str	r3, [sp, #4]
 8010bea:	f000 f933 	bl	8010e54 <_svfiprintf_r>
 8010bee:	1c43      	adds	r3, r0, #1
 8010bf0:	bfbc      	itt	lt
 8010bf2:	238b      	movlt	r3, #139	; 0x8b
 8010bf4:	602b      	strlt	r3, [r5, #0]
 8010bf6:	2c00      	cmp	r4, #0
 8010bf8:	d0dd      	beq.n	8010bb6 <sniprintf+0x16>
 8010bfa:	9b02      	ldr	r3, [sp, #8]
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	701a      	strb	r2, [r3, #0]
 8010c00:	e7d9      	b.n	8010bb6 <sniprintf+0x16>
 8010c02:	bf00      	nop
 8010c04:	24000184 	.word	0x24000184

08010c08 <std>:
 8010c08:	2300      	movs	r3, #0
 8010c0a:	b510      	push	{r4, lr}
 8010c0c:	4604      	mov	r4, r0
 8010c0e:	e9c0 3300 	strd	r3, r3, [r0]
 8010c12:	6083      	str	r3, [r0, #8]
 8010c14:	8181      	strh	r1, [r0, #12]
 8010c16:	6643      	str	r3, [r0, #100]	; 0x64
 8010c18:	81c2      	strh	r2, [r0, #14]
 8010c1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010c1e:	6183      	str	r3, [r0, #24]
 8010c20:	4619      	mov	r1, r3
 8010c22:	2208      	movs	r2, #8
 8010c24:	305c      	adds	r0, #92	; 0x5c
 8010c26:	f7ff fee2 	bl	80109ee <memset>
 8010c2a:	4b05      	ldr	r3, [pc, #20]	; (8010c40 <std+0x38>)
 8010c2c:	6263      	str	r3, [r4, #36]	; 0x24
 8010c2e:	4b05      	ldr	r3, [pc, #20]	; (8010c44 <std+0x3c>)
 8010c30:	62a3      	str	r3, [r4, #40]	; 0x28
 8010c32:	4b05      	ldr	r3, [pc, #20]	; (8010c48 <std+0x40>)
 8010c34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010c36:	4b05      	ldr	r3, [pc, #20]	; (8010c4c <std+0x44>)
 8010c38:	6224      	str	r4, [r4, #32]
 8010c3a:	6323      	str	r3, [r4, #48]	; 0x30
 8010c3c:	bd10      	pop	{r4, pc}
 8010c3e:	bf00      	nop
 8010c40:	080115d5 	.word	0x080115d5
 8010c44:	080115f7 	.word	0x080115f7
 8010c48:	0801162f 	.word	0x0801162f
 8010c4c:	08011653 	.word	0x08011653

08010c50 <_cleanup_r>:
 8010c50:	4901      	ldr	r1, [pc, #4]	; (8010c58 <_cleanup_r+0x8>)
 8010c52:	f000 b885 	b.w	8010d60 <_fwalk_reent>
 8010c56:	bf00      	nop
 8010c58:	0801192d 	.word	0x0801192d

08010c5c <__sfmoreglue>:
 8010c5c:	b570      	push	{r4, r5, r6, lr}
 8010c5e:	1e4a      	subs	r2, r1, #1
 8010c60:	2568      	movs	r5, #104	; 0x68
 8010c62:	4355      	muls	r5, r2
 8010c64:	460e      	mov	r6, r1
 8010c66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010c6a:	f7ff ff17 	bl	8010a9c <_malloc_r>
 8010c6e:	4604      	mov	r4, r0
 8010c70:	b140      	cbz	r0, 8010c84 <__sfmoreglue+0x28>
 8010c72:	2100      	movs	r1, #0
 8010c74:	e9c0 1600 	strd	r1, r6, [r0]
 8010c78:	300c      	adds	r0, #12
 8010c7a:	60a0      	str	r0, [r4, #8]
 8010c7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010c80:	f7ff feb5 	bl	80109ee <memset>
 8010c84:	4620      	mov	r0, r4
 8010c86:	bd70      	pop	{r4, r5, r6, pc}

08010c88 <__sinit>:
 8010c88:	6983      	ldr	r3, [r0, #24]
 8010c8a:	b510      	push	{r4, lr}
 8010c8c:	4604      	mov	r4, r0
 8010c8e:	bb33      	cbnz	r3, 8010cde <__sinit+0x56>
 8010c90:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8010c94:	6503      	str	r3, [r0, #80]	; 0x50
 8010c96:	4b12      	ldr	r3, [pc, #72]	; (8010ce0 <__sinit+0x58>)
 8010c98:	4a12      	ldr	r2, [pc, #72]	; (8010ce4 <__sinit+0x5c>)
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	6282      	str	r2, [r0, #40]	; 0x28
 8010c9e:	4298      	cmp	r0, r3
 8010ca0:	bf04      	itt	eq
 8010ca2:	2301      	moveq	r3, #1
 8010ca4:	6183      	streq	r3, [r0, #24]
 8010ca6:	f000 f81f 	bl	8010ce8 <__sfp>
 8010caa:	6060      	str	r0, [r4, #4]
 8010cac:	4620      	mov	r0, r4
 8010cae:	f000 f81b 	bl	8010ce8 <__sfp>
 8010cb2:	60a0      	str	r0, [r4, #8]
 8010cb4:	4620      	mov	r0, r4
 8010cb6:	f000 f817 	bl	8010ce8 <__sfp>
 8010cba:	2200      	movs	r2, #0
 8010cbc:	60e0      	str	r0, [r4, #12]
 8010cbe:	2104      	movs	r1, #4
 8010cc0:	6860      	ldr	r0, [r4, #4]
 8010cc2:	f7ff ffa1 	bl	8010c08 <std>
 8010cc6:	2201      	movs	r2, #1
 8010cc8:	2109      	movs	r1, #9
 8010cca:	68a0      	ldr	r0, [r4, #8]
 8010ccc:	f7ff ff9c 	bl	8010c08 <std>
 8010cd0:	2202      	movs	r2, #2
 8010cd2:	2112      	movs	r1, #18
 8010cd4:	68e0      	ldr	r0, [r4, #12]
 8010cd6:	f7ff ff97 	bl	8010c08 <std>
 8010cda:	2301      	movs	r3, #1
 8010cdc:	61a3      	str	r3, [r4, #24]
 8010cde:	bd10      	pop	{r4, pc}
 8010ce0:	08011d3c 	.word	0x08011d3c
 8010ce4:	08010c51 	.word	0x08010c51

08010ce8 <__sfp>:
 8010ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cea:	4b1b      	ldr	r3, [pc, #108]	; (8010d58 <__sfp+0x70>)
 8010cec:	681e      	ldr	r6, [r3, #0]
 8010cee:	69b3      	ldr	r3, [r6, #24]
 8010cf0:	4607      	mov	r7, r0
 8010cf2:	b913      	cbnz	r3, 8010cfa <__sfp+0x12>
 8010cf4:	4630      	mov	r0, r6
 8010cf6:	f7ff ffc7 	bl	8010c88 <__sinit>
 8010cfa:	3648      	adds	r6, #72	; 0x48
 8010cfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010d00:	3b01      	subs	r3, #1
 8010d02:	d503      	bpl.n	8010d0c <__sfp+0x24>
 8010d04:	6833      	ldr	r3, [r6, #0]
 8010d06:	b133      	cbz	r3, 8010d16 <__sfp+0x2e>
 8010d08:	6836      	ldr	r6, [r6, #0]
 8010d0a:	e7f7      	b.n	8010cfc <__sfp+0x14>
 8010d0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010d10:	b16d      	cbz	r5, 8010d2e <__sfp+0x46>
 8010d12:	3468      	adds	r4, #104	; 0x68
 8010d14:	e7f4      	b.n	8010d00 <__sfp+0x18>
 8010d16:	2104      	movs	r1, #4
 8010d18:	4638      	mov	r0, r7
 8010d1a:	f7ff ff9f 	bl	8010c5c <__sfmoreglue>
 8010d1e:	6030      	str	r0, [r6, #0]
 8010d20:	2800      	cmp	r0, #0
 8010d22:	d1f1      	bne.n	8010d08 <__sfp+0x20>
 8010d24:	230c      	movs	r3, #12
 8010d26:	603b      	str	r3, [r7, #0]
 8010d28:	4604      	mov	r4, r0
 8010d2a:	4620      	mov	r0, r4
 8010d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d2e:	4b0b      	ldr	r3, [pc, #44]	; (8010d5c <__sfp+0x74>)
 8010d30:	6665      	str	r5, [r4, #100]	; 0x64
 8010d32:	e9c4 5500 	strd	r5, r5, [r4]
 8010d36:	60a5      	str	r5, [r4, #8]
 8010d38:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8010d3c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8010d40:	2208      	movs	r2, #8
 8010d42:	4629      	mov	r1, r5
 8010d44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010d48:	f7ff fe51 	bl	80109ee <memset>
 8010d4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010d50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010d54:	e7e9      	b.n	8010d2a <__sfp+0x42>
 8010d56:	bf00      	nop
 8010d58:	08011d3c 	.word	0x08011d3c
 8010d5c:	ffff0001 	.word	0xffff0001

08010d60 <_fwalk_reent>:
 8010d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d64:	4680      	mov	r8, r0
 8010d66:	4689      	mov	r9, r1
 8010d68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010d6c:	2600      	movs	r6, #0
 8010d6e:	b914      	cbnz	r4, 8010d76 <_fwalk_reent+0x16>
 8010d70:	4630      	mov	r0, r6
 8010d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d76:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8010d7a:	3f01      	subs	r7, #1
 8010d7c:	d501      	bpl.n	8010d82 <_fwalk_reent+0x22>
 8010d7e:	6824      	ldr	r4, [r4, #0]
 8010d80:	e7f5      	b.n	8010d6e <_fwalk_reent+0xe>
 8010d82:	89ab      	ldrh	r3, [r5, #12]
 8010d84:	2b01      	cmp	r3, #1
 8010d86:	d907      	bls.n	8010d98 <_fwalk_reent+0x38>
 8010d88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010d8c:	3301      	adds	r3, #1
 8010d8e:	d003      	beq.n	8010d98 <_fwalk_reent+0x38>
 8010d90:	4629      	mov	r1, r5
 8010d92:	4640      	mov	r0, r8
 8010d94:	47c8      	blx	r9
 8010d96:	4306      	orrs	r6, r0
 8010d98:	3568      	adds	r5, #104	; 0x68
 8010d9a:	e7ee      	b.n	8010d7a <_fwalk_reent+0x1a>

08010d9c <__malloc_lock>:
 8010d9c:	4770      	bx	lr

08010d9e <__malloc_unlock>:
 8010d9e:	4770      	bx	lr

08010da0 <__ssputs_r>:
 8010da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010da4:	688e      	ldr	r6, [r1, #8]
 8010da6:	429e      	cmp	r6, r3
 8010da8:	4682      	mov	sl, r0
 8010daa:	460c      	mov	r4, r1
 8010dac:	4690      	mov	r8, r2
 8010dae:	4699      	mov	r9, r3
 8010db0:	d837      	bhi.n	8010e22 <__ssputs_r+0x82>
 8010db2:	898a      	ldrh	r2, [r1, #12]
 8010db4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010db8:	d031      	beq.n	8010e1e <__ssputs_r+0x7e>
 8010dba:	6825      	ldr	r5, [r4, #0]
 8010dbc:	6909      	ldr	r1, [r1, #16]
 8010dbe:	1a6f      	subs	r7, r5, r1
 8010dc0:	6965      	ldr	r5, [r4, #20]
 8010dc2:	2302      	movs	r3, #2
 8010dc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010dc8:	fb95 f5f3 	sdiv	r5, r5, r3
 8010dcc:	f109 0301 	add.w	r3, r9, #1
 8010dd0:	443b      	add	r3, r7
 8010dd2:	429d      	cmp	r5, r3
 8010dd4:	bf38      	it	cc
 8010dd6:	461d      	movcc	r5, r3
 8010dd8:	0553      	lsls	r3, r2, #21
 8010dda:	d530      	bpl.n	8010e3e <__ssputs_r+0x9e>
 8010ddc:	4629      	mov	r1, r5
 8010dde:	f7ff fe5d 	bl	8010a9c <_malloc_r>
 8010de2:	4606      	mov	r6, r0
 8010de4:	b950      	cbnz	r0, 8010dfc <__ssputs_r+0x5c>
 8010de6:	230c      	movs	r3, #12
 8010de8:	f8ca 3000 	str.w	r3, [sl]
 8010dec:	89a3      	ldrh	r3, [r4, #12]
 8010dee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010df2:	81a3      	strh	r3, [r4, #12]
 8010df4:	f04f 30ff 	mov.w	r0, #4294967295
 8010df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010dfc:	463a      	mov	r2, r7
 8010dfe:	6921      	ldr	r1, [r4, #16]
 8010e00:	f7ff fdea 	bl	80109d8 <memcpy>
 8010e04:	89a3      	ldrh	r3, [r4, #12]
 8010e06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e0e:	81a3      	strh	r3, [r4, #12]
 8010e10:	6126      	str	r6, [r4, #16]
 8010e12:	6165      	str	r5, [r4, #20]
 8010e14:	443e      	add	r6, r7
 8010e16:	1bed      	subs	r5, r5, r7
 8010e18:	6026      	str	r6, [r4, #0]
 8010e1a:	60a5      	str	r5, [r4, #8]
 8010e1c:	464e      	mov	r6, r9
 8010e1e:	454e      	cmp	r6, r9
 8010e20:	d900      	bls.n	8010e24 <__ssputs_r+0x84>
 8010e22:	464e      	mov	r6, r9
 8010e24:	4632      	mov	r2, r6
 8010e26:	4641      	mov	r1, r8
 8010e28:	6820      	ldr	r0, [r4, #0]
 8010e2a:	f000 fe1f 	bl	8011a6c <memmove>
 8010e2e:	68a3      	ldr	r3, [r4, #8]
 8010e30:	1b9b      	subs	r3, r3, r6
 8010e32:	60a3      	str	r3, [r4, #8]
 8010e34:	6823      	ldr	r3, [r4, #0]
 8010e36:	441e      	add	r6, r3
 8010e38:	6026      	str	r6, [r4, #0]
 8010e3a:	2000      	movs	r0, #0
 8010e3c:	e7dc      	b.n	8010df8 <__ssputs_r+0x58>
 8010e3e:	462a      	mov	r2, r5
 8010e40:	f000 fe2d 	bl	8011a9e <_realloc_r>
 8010e44:	4606      	mov	r6, r0
 8010e46:	2800      	cmp	r0, #0
 8010e48:	d1e2      	bne.n	8010e10 <__ssputs_r+0x70>
 8010e4a:	6921      	ldr	r1, [r4, #16]
 8010e4c:	4650      	mov	r0, sl
 8010e4e:	f7ff fdd7 	bl	8010a00 <_free_r>
 8010e52:	e7c8      	b.n	8010de6 <__ssputs_r+0x46>

08010e54 <_svfiprintf_r>:
 8010e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e58:	461d      	mov	r5, r3
 8010e5a:	898b      	ldrh	r3, [r1, #12]
 8010e5c:	061f      	lsls	r7, r3, #24
 8010e5e:	b09d      	sub	sp, #116	; 0x74
 8010e60:	4680      	mov	r8, r0
 8010e62:	460c      	mov	r4, r1
 8010e64:	4616      	mov	r6, r2
 8010e66:	d50f      	bpl.n	8010e88 <_svfiprintf_r+0x34>
 8010e68:	690b      	ldr	r3, [r1, #16]
 8010e6a:	b96b      	cbnz	r3, 8010e88 <_svfiprintf_r+0x34>
 8010e6c:	2140      	movs	r1, #64	; 0x40
 8010e6e:	f7ff fe15 	bl	8010a9c <_malloc_r>
 8010e72:	6020      	str	r0, [r4, #0]
 8010e74:	6120      	str	r0, [r4, #16]
 8010e76:	b928      	cbnz	r0, 8010e84 <_svfiprintf_r+0x30>
 8010e78:	230c      	movs	r3, #12
 8010e7a:	f8c8 3000 	str.w	r3, [r8]
 8010e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8010e82:	e0c8      	b.n	8011016 <_svfiprintf_r+0x1c2>
 8010e84:	2340      	movs	r3, #64	; 0x40
 8010e86:	6163      	str	r3, [r4, #20]
 8010e88:	2300      	movs	r3, #0
 8010e8a:	9309      	str	r3, [sp, #36]	; 0x24
 8010e8c:	2320      	movs	r3, #32
 8010e8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010e92:	2330      	movs	r3, #48	; 0x30
 8010e94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010e98:	9503      	str	r5, [sp, #12]
 8010e9a:	f04f 0b01 	mov.w	fp, #1
 8010e9e:	4637      	mov	r7, r6
 8010ea0:	463d      	mov	r5, r7
 8010ea2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010ea6:	b10b      	cbz	r3, 8010eac <_svfiprintf_r+0x58>
 8010ea8:	2b25      	cmp	r3, #37	; 0x25
 8010eaa:	d13e      	bne.n	8010f2a <_svfiprintf_r+0xd6>
 8010eac:	ebb7 0a06 	subs.w	sl, r7, r6
 8010eb0:	d00b      	beq.n	8010eca <_svfiprintf_r+0x76>
 8010eb2:	4653      	mov	r3, sl
 8010eb4:	4632      	mov	r2, r6
 8010eb6:	4621      	mov	r1, r4
 8010eb8:	4640      	mov	r0, r8
 8010eba:	f7ff ff71 	bl	8010da0 <__ssputs_r>
 8010ebe:	3001      	adds	r0, #1
 8010ec0:	f000 80a4 	beq.w	801100c <_svfiprintf_r+0x1b8>
 8010ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ec6:	4453      	add	r3, sl
 8010ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8010eca:	783b      	ldrb	r3, [r7, #0]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	f000 809d 	beq.w	801100c <_svfiprintf_r+0x1b8>
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8010ed8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010edc:	9304      	str	r3, [sp, #16]
 8010ede:	9307      	str	r3, [sp, #28]
 8010ee0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010ee4:	931a      	str	r3, [sp, #104]	; 0x68
 8010ee6:	462f      	mov	r7, r5
 8010ee8:	2205      	movs	r2, #5
 8010eea:	f817 1b01 	ldrb.w	r1, [r7], #1
 8010eee:	4850      	ldr	r0, [pc, #320]	; (8011030 <_svfiprintf_r+0x1dc>)
 8010ef0:	f7ef f9fe 	bl	80002f0 <memchr>
 8010ef4:	9b04      	ldr	r3, [sp, #16]
 8010ef6:	b9d0      	cbnz	r0, 8010f2e <_svfiprintf_r+0xda>
 8010ef8:	06d9      	lsls	r1, r3, #27
 8010efa:	bf44      	itt	mi
 8010efc:	2220      	movmi	r2, #32
 8010efe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010f02:	071a      	lsls	r2, r3, #28
 8010f04:	bf44      	itt	mi
 8010f06:	222b      	movmi	r2, #43	; 0x2b
 8010f08:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010f0c:	782a      	ldrb	r2, [r5, #0]
 8010f0e:	2a2a      	cmp	r2, #42	; 0x2a
 8010f10:	d015      	beq.n	8010f3e <_svfiprintf_r+0xea>
 8010f12:	9a07      	ldr	r2, [sp, #28]
 8010f14:	462f      	mov	r7, r5
 8010f16:	2000      	movs	r0, #0
 8010f18:	250a      	movs	r5, #10
 8010f1a:	4639      	mov	r1, r7
 8010f1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f20:	3b30      	subs	r3, #48	; 0x30
 8010f22:	2b09      	cmp	r3, #9
 8010f24:	d94d      	bls.n	8010fc2 <_svfiprintf_r+0x16e>
 8010f26:	b1b8      	cbz	r0, 8010f58 <_svfiprintf_r+0x104>
 8010f28:	e00f      	b.n	8010f4a <_svfiprintf_r+0xf6>
 8010f2a:	462f      	mov	r7, r5
 8010f2c:	e7b8      	b.n	8010ea0 <_svfiprintf_r+0x4c>
 8010f2e:	4a40      	ldr	r2, [pc, #256]	; (8011030 <_svfiprintf_r+0x1dc>)
 8010f30:	1a80      	subs	r0, r0, r2
 8010f32:	fa0b f000 	lsl.w	r0, fp, r0
 8010f36:	4318      	orrs	r0, r3
 8010f38:	9004      	str	r0, [sp, #16]
 8010f3a:	463d      	mov	r5, r7
 8010f3c:	e7d3      	b.n	8010ee6 <_svfiprintf_r+0x92>
 8010f3e:	9a03      	ldr	r2, [sp, #12]
 8010f40:	1d11      	adds	r1, r2, #4
 8010f42:	6812      	ldr	r2, [r2, #0]
 8010f44:	9103      	str	r1, [sp, #12]
 8010f46:	2a00      	cmp	r2, #0
 8010f48:	db01      	blt.n	8010f4e <_svfiprintf_r+0xfa>
 8010f4a:	9207      	str	r2, [sp, #28]
 8010f4c:	e004      	b.n	8010f58 <_svfiprintf_r+0x104>
 8010f4e:	4252      	negs	r2, r2
 8010f50:	f043 0302 	orr.w	r3, r3, #2
 8010f54:	9207      	str	r2, [sp, #28]
 8010f56:	9304      	str	r3, [sp, #16]
 8010f58:	783b      	ldrb	r3, [r7, #0]
 8010f5a:	2b2e      	cmp	r3, #46	; 0x2e
 8010f5c:	d10c      	bne.n	8010f78 <_svfiprintf_r+0x124>
 8010f5e:	787b      	ldrb	r3, [r7, #1]
 8010f60:	2b2a      	cmp	r3, #42	; 0x2a
 8010f62:	d133      	bne.n	8010fcc <_svfiprintf_r+0x178>
 8010f64:	9b03      	ldr	r3, [sp, #12]
 8010f66:	1d1a      	adds	r2, r3, #4
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	9203      	str	r2, [sp, #12]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	bfb8      	it	lt
 8010f70:	f04f 33ff 	movlt.w	r3, #4294967295
 8010f74:	3702      	adds	r7, #2
 8010f76:	9305      	str	r3, [sp, #20]
 8010f78:	4d2e      	ldr	r5, [pc, #184]	; (8011034 <_svfiprintf_r+0x1e0>)
 8010f7a:	7839      	ldrb	r1, [r7, #0]
 8010f7c:	2203      	movs	r2, #3
 8010f7e:	4628      	mov	r0, r5
 8010f80:	f7ef f9b6 	bl	80002f0 <memchr>
 8010f84:	b138      	cbz	r0, 8010f96 <_svfiprintf_r+0x142>
 8010f86:	2340      	movs	r3, #64	; 0x40
 8010f88:	1b40      	subs	r0, r0, r5
 8010f8a:	fa03 f000 	lsl.w	r0, r3, r0
 8010f8e:	9b04      	ldr	r3, [sp, #16]
 8010f90:	4303      	orrs	r3, r0
 8010f92:	3701      	adds	r7, #1
 8010f94:	9304      	str	r3, [sp, #16]
 8010f96:	7839      	ldrb	r1, [r7, #0]
 8010f98:	4827      	ldr	r0, [pc, #156]	; (8011038 <_svfiprintf_r+0x1e4>)
 8010f9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010f9e:	2206      	movs	r2, #6
 8010fa0:	1c7e      	adds	r6, r7, #1
 8010fa2:	f7ef f9a5 	bl	80002f0 <memchr>
 8010fa6:	2800      	cmp	r0, #0
 8010fa8:	d038      	beq.n	801101c <_svfiprintf_r+0x1c8>
 8010faa:	4b24      	ldr	r3, [pc, #144]	; (801103c <_svfiprintf_r+0x1e8>)
 8010fac:	bb13      	cbnz	r3, 8010ff4 <_svfiprintf_r+0x1a0>
 8010fae:	9b03      	ldr	r3, [sp, #12]
 8010fb0:	3307      	adds	r3, #7
 8010fb2:	f023 0307 	bic.w	r3, r3, #7
 8010fb6:	3308      	adds	r3, #8
 8010fb8:	9303      	str	r3, [sp, #12]
 8010fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fbc:	444b      	add	r3, r9
 8010fbe:	9309      	str	r3, [sp, #36]	; 0x24
 8010fc0:	e76d      	b.n	8010e9e <_svfiprintf_r+0x4a>
 8010fc2:	fb05 3202 	mla	r2, r5, r2, r3
 8010fc6:	2001      	movs	r0, #1
 8010fc8:	460f      	mov	r7, r1
 8010fca:	e7a6      	b.n	8010f1a <_svfiprintf_r+0xc6>
 8010fcc:	2300      	movs	r3, #0
 8010fce:	3701      	adds	r7, #1
 8010fd0:	9305      	str	r3, [sp, #20]
 8010fd2:	4619      	mov	r1, r3
 8010fd4:	250a      	movs	r5, #10
 8010fd6:	4638      	mov	r0, r7
 8010fd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010fdc:	3a30      	subs	r2, #48	; 0x30
 8010fde:	2a09      	cmp	r2, #9
 8010fe0:	d903      	bls.n	8010fea <_svfiprintf_r+0x196>
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d0c8      	beq.n	8010f78 <_svfiprintf_r+0x124>
 8010fe6:	9105      	str	r1, [sp, #20]
 8010fe8:	e7c6      	b.n	8010f78 <_svfiprintf_r+0x124>
 8010fea:	fb05 2101 	mla	r1, r5, r1, r2
 8010fee:	2301      	movs	r3, #1
 8010ff0:	4607      	mov	r7, r0
 8010ff2:	e7f0      	b.n	8010fd6 <_svfiprintf_r+0x182>
 8010ff4:	ab03      	add	r3, sp, #12
 8010ff6:	9300      	str	r3, [sp, #0]
 8010ff8:	4622      	mov	r2, r4
 8010ffa:	4b11      	ldr	r3, [pc, #68]	; (8011040 <_svfiprintf_r+0x1ec>)
 8010ffc:	a904      	add	r1, sp, #16
 8010ffe:	4640      	mov	r0, r8
 8011000:	f3af 8000 	nop.w
 8011004:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011008:	4681      	mov	r9, r0
 801100a:	d1d6      	bne.n	8010fba <_svfiprintf_r+0x166>
 801100c:	89a3      	ldrh	r3, [r4, #12]
 801100e:	065b      	lsls	r3, r3, #25
 8011010:	f53f af35 	bmi.w	8010e7e <_svfiprintf_r+0x2a>
 8011014:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011016:	b01d      	add	sp, #116	; 0x74
 8011018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801101c:	ab03      	add	r3, sp, #12
 801101e:	9300      	str	r3, [sp, #0]
 8011020:	4622      	mov	r2, r4
 8011022:	4b07      	ldr	r3, [pc, #28]	; (8011040 <_svfiprintf_r+0x1ec>)
 8011024:	a904      	add	r1, sp, #16
 8011026:	4640      	mov	r0, r8
 8011028:	f000 f9c2 	bl	80113b0 <_printf_i>
 801102c:	e7ea      	b.n	8011004 <_svfiprintf_r+0x1b0>
 801102e:	bf00      	nop
 8011030:	08011da0 	.word	0x08011da0
 8011034:	08011da6 	.word	0x08011da6
 8011038:	08011daa 	.word	0x08011daa
 801103c:	00000000 	.word	0x00000000
 8011040:	08010da1 	.word	0x08010da1

08011044 <__sfputc_r>:
 8011044:	6893      	ldr	r3, [r2, #8]
 8011046:	3b01      	subs	r3, #1
 8011048:	2b00      	cmp	r3, #0
 801104a:	b410      	push	{r4}
 801104c:	6093      	str	r3, [r2, #8]
 801104e:	da08      	bge.n	8011062 <__sfputc_r+0x1e>
 8011050:	6994      	ldr	r4, [r2, #24]
 8011052:	42a3      	cmp	r3, r4
 8011054:	db01      	blt.n	801105a <__sfputc_r+0x16>
 8011056:	290a      	cmp	r1, #10
 8011058:	d103      	bne.n	8011062 <__sfputc_r+0x1e>
 801105a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801105e:	f000 bafd 	b.w	801165c <__swbuf_r>
 8011062:	6813      	ldr	r3, [r2, #0]
 8011064:	1c58      	adds	r0, r3, #1
 8011066:	6010      	str	r0, [r2, #0]
 8011068:	7019      	strb	r1, [r3, #0]
 801106a:	4608      	mov	r0, r1
 801106c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011070:	4770      	bx	lr

08011072 <__sfputs_r>:
 8011072:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011074:	4606      	mov	r6, r0
 8011076:	460f      	mov	r7, r1
 8011078:	4614      	mov	r4, r2
 801107a:	18d5      	adds	r5, r2, r3
 801107c:	42ac      	cmp	r4, r5
 801107e:	d101      	bne.n	8011084 <__sfputs_r+0x12>
 8011080:	2000      	movs	r0, #0
 8011082:	e007      	b.n	8011094 <__sfputs_r+0x22>
 8011084:	463a      	mov	r2, r7
 8011086:	f814 1b01 	ldrb.w	r1, [r4], #1
 801108a:	4630      	mov	r0, r6
 801108c:	f7ff ffda 	bl	8011044 <__sfputc_r>
 8011090:	1c43      	adds	r3, r0, #1
 8011092:	d1f3      	bne.n	801107c <__sfputs_r+0xa>
 8011094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011098 <_vfiprintf_r>:
 8011098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801109c:	460c      	mov	r4, r1
 801109e:	b09d      	sub	sp, #116	; 0x74
 80110a0:	4617      	mov	r7, r2
 80110a2:	461d      	mov	r5, r3
 80110a4:	4606      	mov	r6, r0
 80110a6:	b118      	cbz	r0, 80110b0 <_vfiprintf_r+0x18>
 80110a8:	6983      	ldr	r3, [r0, #24]
 80110aa:	b90b      	cbnz	r3, 80110b0 <_vfiprintf_r+0x18>
 80110ac:	f7ff fdec 	bl	8010c88 <__sinit>
 80110b0:	4b7c      	ldr	r3, [pc, #496]	; (80112a4 <_vfiprintf_r+0x20c>)
 80110b2:	429c      	cmp	r4, r3
 80110b4:	d158      	bne.n	8011168 <_vfiprintf_r+0xd0>
 80110b6:	6874      	ldr	r4, [r6, #4]
 80110b8:	89a3      	ldrh	r3, [r4, #12]
 80110ba:	0718      	lsls	r0, r3, #28
 80110bc:	d55e      	bpl.n	801117c <_vfiprintf_r+0xe4>
 80110be:	6923      	ldr	r3, [r4, #16]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d05b      	beq.n	801117c <_vfiprintf_r+0xe4>
 80110c4:	2300      	movs	r3, #0
 80110c6:	9309      	str	r3, [sp, #36]	; 0x24
 80110c8:	2320      	movs	r3, #32
 80110ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80110ce:	2330      	movs	r3, #48	; 0x30
 80110d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80110d4:	9503      	str	r5, [sp, #12]
 80110d6:	f04f 0b01 	mov.w	fp, #1
 80110da:	46b8      	mov	r8, r7
 80110dc:	4645      	mov	r5, r8
 80110de:	f815 3b01 	ldrb.w	r3, [r5], #1
 80110e2:	b10b      	cbz	r3, 80110e8 <_vfiprintf_r+0x50>
 80110e4:	2b25      	cmp	r3, #37	; 0x25
 80110e6:	d154      	bne.n	8011192 <_vfiprintf_r+0xfa>
 80110e8:	ebb8 0a07 	subs.w	sl, r8, r7
 80110ec:	d00b      	beq.n	8011106 <_vfiprintf_r+0x6e>
 80110ee:	4653      	mov	r3, sl
 80110f0:	463a      	mov	r2, r7
 80110f2:	4621      	mov	r1, r4
 80110f4:	4630      	mov	r0, r6
 80110f6:	f7ff ffbc 	bl	8011072 <__sfputs_r>
 80110fa:	3001      	adds	r0, #1
 80110fc:	f000 80c2 	beq.w	8011284 <_vfiprintf_r+0x1ec>
 8011100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011102:	4453      	add	r3, sl
 8011104:	9309      	str	r3, [sp, #36]	; 0x24
 8011106:	f898 3000 	ldrb.w	r3, [r8]
 801110a:	2b00      	cmp	r3, #0
 801110c:	f000 80ba 	beq.w	8011284 <_vfiprintf_r+0x1ec>
 8011110:	2300      	movs	r3, #0
 8011112:	f04f 32ff 	mov.w	r2, #4294967295
 8011116:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801111a:	9304      	str	r3, [sp, #16]
 801111c:	9307      	str	r3, [sp, #28]
 801111e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011122:	931a      	str	r3, [sp, #104]	; 0x68
 8011124:	46a8      	mov	r8, r5
 8011126:	2205      	movs	r2, #5
 8011128:	f818 1b01 	ldrb.w	r1, [r8], #1
 801112c:	485e      	ldr	r0, [pc, #376]	; (80112a8 <_vfiprintf_r+0x210>)
 801112e:	f7ef f8df 	bl	80002f0 <memchr>
 8011132:	9b04      	ldr	r3, [sp, #16]
 8011134:	bb78      	cbnz	r0, 8011196 <_vfiprintf_r+0xfe>
 8011136:	06d9      	lsls	r1, r3, #27
 8011138:	bf44      	itt	mi
 801113a:	2220      	movmi	r2, #32
 801113c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011140:	071a      	lsls	r2, r3, #28
 8011142:	bf44      	itt	mi
 8011144:	222b      	movmi	r2, #43	; 0x2b
 8011146:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801114a:	782a      	ldrb	r2, [r5, #0]
 801114c:	2a2a      	cmp	r2, #42	; 0x2a
 801114e:	d02a      	beq.n	80111a6 <_vfiprintf_r+0x10e>
 8011150:	9a07      	ldr	r2, [sp, #28]
 8011152:	46a8      	mov	r8, r5
 8011154:	2000      	movs	r0, #0
 8011156:	250a      	movs	r5, #10
 8011158:	4641      	mov	r1, r8
 801115a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801115e:	3b30      	subs	r3, #48	; 0x30
 8011160:	2b09      	cmp	r3, #9
 8011162:	d969      	bls.n	8011238 <_vfiprintf_r+0x1a0>
 8011164:	b360      	cbz	r0, 80111c0 <_vfiprintf_r+0x128>
 8011166:	e024      	b.n	80111b2 <_vfiprintf_r+0x11a>
 8011168:	4b50      	ldr	r3, [pc, #320]	; (80112ac <_vfiprintf_r+0x214>)
 801116a:	429c      	cmp	r4, r3
 801116c:	d101      	bne.n	8011172 <_vfiprintf_r+0xda>
 801116e:	68b4      	ldr	r4, [r6, #8]
 8011170:	e7a2      	b.n	80110b8 <_vfiprintf_r+0x20>
 8011172:	4b4f      	ldr	r3, [pc, #316]	; (80112b0 <_vfiprintf_r+0x218>)
 8011174:	429c      	cmp	r4, r3
 8011176:	bf08      	it	eq
 8011178:	68f4      	ldreq	r4, [r6, #12]
 801117a:	e79d      	b.n	80110b8 <_vfiprintf_r+0x20>
 801117c:	4621      	mov	r1, r4
 801117e:	4630      	mov	r0, r6
 8011180:	f000 fad0 	bl	8011724 <__swsetup_r>
 8011184:	2800      	cmp	r0, #0
 8011186:	d09d      	beq.n	80110c4 <_vfiprintf_r+0x2c>
 8011188:	f04f 30ff 	mov.w	r0, #4294967295
 801118c:	b01d      	add	sp, #116	; 0x74
 801118e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011192:	46a8      	mov	r8, r5
 8011194:	e7a2      	b.n	80110dc <_vfiprintf_r+0x44>
 8011196:	4a44      	ldr	r2, [pc, #272]	; (80112a8 <_vfiprintf_r+0x210>)
 8011198:	1a80      	subs	r0, r0, r2
 801119a:	fa0b f000 	lsl.w	r0, fp, r0
 801119e:	4318      	orrs	r0, r3
 80111a0:	9004      	str	r0, [sp, #16]
 80111a2:	4645      	mov	r5, r8
 80111a4:	e7be      	b.n	8011124 <_vfiprintf_r+0x8c>
 80111a6:	9a03      	ldr	r2, [sp, #12]
 80111a8:	1d11      	adds	r1, r2, #4
 80111aa:	6812      	ldr	r2, [r2, #0]
 80111ac:	9103      	str	r1, [sp, #12]
 80111ae:	2a00      	cmp	r2, #0
 80111b0:	db01      	blt.n	80111b6 <_vfiprintf_r+0x11e>
 80111b2:	9207      	str	r2, [sp, #28]
 80111b4:	e004      	b.n	80111c0 <_vfiprintf_r+0x128>
 80111b6:	4252      	negs	r2, r2
 80111b8:	f043 0302 	orr.w	r3, r3, #2
 80111bc:	9207      	str	r2, [sp, #28]
 80111be:	9304      	str	r3, [sp, #16]
 80111c0:	f898 3000 	ldrb.w	r3, [r8]
 80111c4:	2b2e      	cmp	r3, #46	; 0x2e
 80111c6:	d10e      	bne.n	80111e6 <_vfiprintf_r+0x14e>
 80111c8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80111cc:	2b2a      	cmp	r3, #42	; 0x2a
 80111ce:	d138      	bne.n	8011242 <_vfiprintf_r+0x1aa>
 80111d0:	9b03      	ldr	r3, [sp, #12]
 80111d2:	1d1a      	adds	r2, r3, #4
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	9203      	str	r2, [sp, #12]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	bfb8      	it	lt
 80111dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80111e0:	f108 0802 	add.w	r8, r8, #2
 80111e4:	9305      	str	r3, [sp, #20]
 80111e6:	4d33      	ldr	r5, [pc, #204]	; (80112b4 <_vfiprintf_r+0x21c>)
 80111e8:	f898 1000 	ldrb.w	r1, [r8]
 80111ec:	2203      	movs	r2, #3
 80111ee:	4628      	mov	r0, r5
 80111f0:	f7ef f87e 	bl	80002f0 <memchr>
 80111f4:	b140      	cbz	r0, 8011208 <_vfiprintf_r+0x170>
 80111f6:	2340      	movs	r3, #64	; 0x40
 80111f8:	1b40      	subs	r0, r0, r5
 80111fa:	fa03 f000 	lsl.w	r0, r3, r0
 80111fe:	9b04      	ldr	r3, [sp, #16]
 8011200:	4303      	orrs	r3, r0
 8011202:	f108 0801 	add.w	r8, r8, #1
 8011206:	9304      	str	r3, [sp, #16]
 8011208:	f898 1000 	ldrb.w	r1, [r8]
 801120c:	482a      	ldr	r0, [pc, #168]	; (80112b8 <_vfiprintf_r+0x220>)
 801120e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011212:	2206      	movs	r2, #6
 8011214:	f108 0701 	add.w	r7, r8, #1
 8011218:	f7ef f86a 	bl	80002f0 <memchr>
 801121c:	2800      	cmp	r0, #0
 801121e:	d037      	beq.n	8011290 <_vfiprintf_r+0x1f8>
 8011220:	4b26      	ldr	r3, [pc, #152]	; (80112bc <_vfiprintf_r+0x224>)
 8011222:	bb1b      	cbnz	r3, 801126c <_vfiprintf_r+0x1d4>
 8011224:	9b03      	ldr	r3, [sp, #12]
 8011226:	3307      	adds	r3, #7
 8011228:	f023 0307 	bic.w	r3, r3, #7
 801122c:	3308      	adds	r3, #8
 801122e:	9303      	str	r3, [sp, #12]
 8011230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011232:	444b      	add	r3, r9
 8011234:	9309      	str	r3, [sp, #36]	; 0x24
 8011236:	e750      	b.n	80110da <_vfiprintf_r+0x42>
 8011238:	fb05 3202 	mla	r2, r5, r2, r3
 801123c:	2001      	movs	r0, #1
 801123e:	4688      	mov	r8, r1
 8011240:	e78a      	b.n	8011158 <_vfiprintf_r+0xc0>
 8011242:	2300      	movs	r3, #0
 8011244:	f108 0801 	add.w	r8, r8, #1
 8011248:	9305      	str	r3, [sp, #20]
 801124a:	4619      	mov	r1, r3
 801124c:	250a      	movs	r5, #10
 801124e:	4640      	mov	r0, r8
 8011250:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011254:	3a30      	subs	r2, #48	; 0x30
 8011256:	2a09      	cmp	r2, #9
 8011258:	d903      	bls.n	8011262 <_vfiprintf_r+0x1ca>
 801125a:	2b00      	cmp	r3, #0
 801125c:	d0c3      	beq.n	80111e6 <_vfiprintf_r+0x14e>
 801125e:	9105      	str	r1, [sp, #20]
 8011260:	e7c1      	b.n	80111e6 <_vfiprintf_r+0x14e>
 8011262:	fb05 2101 	mla	r1, r5, r1, r2
 8011266:	2301      	movs	r3, #1
 8011268:	4680      	mov	r8, r0
 801126a:	e7f0      	b.n	801124e <_vfiprintf_r+0x1b6>
 801126c:	ab03      	add	r3, sp, #12
 801126e:	9300      	str	r3, [sp, #0]
 8011270:	4622      	mov	r2, r4
 8011272:	4b13      	ldr	r3, [pc, #76]	; (80112c0 <_vfiprintf_r+0x228>)
 8011274:	a904      	add	r1, sp, #16
 8011276:	4630      	mov	r0, r6
 8011278:	f3af 8000 	nop.w
 801127c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011280:	4681      	mov	r9, r0
 8011282:	d1d5      	bne.n	8011230 <_vfiprintf_r+0x198>
 8011284:	89a3      	ldrh	r3, [r4, #12]
 8011286:	065b      	lsls	r3, r3, #25
 8011288:	f53f af7e 	bmi.w	8011188 <_vfiprintf_r+0xf0>
 801128c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801128e:	e77d      	b.n	801118c <_vfiprintf_r+0xf4>
 8011290:	ab03      	add	r3, sp, #12
 8011292:	9300      	str	r3, [sp, #0]
 8011294:	4622      	mov	r2, r4
 8011296:	4b0a      	ldr	r3, [pc, #40]	; (80112c0 <_vfiprintf_r+0x228>)
 8011298:	a904      	add	r1, sp, #16
 801129a:	4630      	mov	r0, r6
 801129c:	f000 f888 	bl	80113b0 <_printf_i>
 80112a0:	e7ec      	b.n	801127c <_vfiprintf_r+0x1e4>
 80112a2:	bf00      	nop
 80112a4:	08011d60 	.word	0x08011d60
 80112a8:	08011da0 	.word	0x08011da0
 80112ac:	08011d80 	.word	0x08011d80
 80112b0:	08011d40 	.word	0x08011d40
 80112b4:	08011da6 	.word	0x08011da6
 80112b8:	08011daa 	.word	0x08011daa
 80112bc:	00000000 	.word	0x00000000
 80112c0:	08011073 	.word	0x08011073

080112c4 <_printf_common>:
 80112c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112c8:	4691      	mov	r9, r2
 80112ca:	461f      	mov	r7, r3
 80112cc:	688a      	ldr	r2, [r1, #8]
 80112ce:	690b      	ldr	r3, [r1, #16]
 80112d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80112d4:	4293      	cmp	r3, r2
 80112d6:	bfb8      	it	lt
 80112d8:	4613      	movlt	r3, r2
 80112da:	f8c9 3000 	str.w	r3, [r9]
 80112de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80112e2:	4606      	mov	r6, r0
 80112e4:	460c      	mov	r4, r1
 80112e6:	b112      	cbz	r2, 80112ee <_printf_common+0x2a>
 80112e8:	3301      	adds	r3, #1
 80112ea:	f8c9 3000 	str.w	r3, [r9]
 80112ee:	6823      	ldr	r3, [r4, #0]
 80112f0:	0699      	lsls	r1, r3, #26
 80112f2:	bf42      	ittt	mi
 80112f4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80112f8:	3302      	addmi	r3, #2
 80112fa:	f8c9 3000 	strmi.w	r3, [r9]
 80112fe:	6825      	ldr	r5, [r4, #0]
 8011300:	f015 0506 	ands.w	r5, r5, #6
 8011304:	d107      	bne.n	8011316 <_printf_common+0x52>
 8011306:	f104 0a19 	add.w	sl, r4, #25
 801130a:	68e3      	ldr	r3, [r4, #12]
 801130c:	f8d9 2000 	ldr.w	r2, [r9]
 8011310:	1a9b      	subs	r3, r3, r2
 8011312:	42ab      	cmp	r3, r5
 8011314:	dc28      	bgt.n	8011368 <_printf_common+0xa4>
 8011316:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801131a:	6822      	ldr	r2, [r4, #0]
 801131c:	3300      	adds	r3, #0
 801131e:	bf18      	it	ne
 8011320:	2301      	movne	r3, #1
 8011322:	0692      	lsls	r2, r2, #26
 8011324:	d42d      	bmi.n	8011382 <_printf_common+0xbe>
 8011326:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801132a:	4639      	mov	r1, r7
 801132c:	4630      	mov	r0, r6
 801132e:	47c0      	blx	r8
 8011330:	3001      	adds	r0, #1
 8011332:	d020      	beq.n	8011376 <_printf_common+0xb2>
 8011334:	6823      	ldr	r3, [r4, #0]
 8011336:	68e5      	ldr	r5, [r4, #12]
 8011338:	f8d9 2000 	ldr.w	r2, [r9]
 801133c:	f003 0306 	and.w	r3, r3, #6
 8011340:	2b04      	cmp	r3, #4
 8011342:	bf08      	it	eq
 8011344:	1aad      	subeq	r5, r5, r2
 8011346:	68a3      	ldr	r3, [r4, #8]
 8011348:	6922      	ldr	r2, [r4, #16]
 801134a:	bf0c      	ite	eq
 801134c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011350:	2500      	movne	r5, #0
 8011352:	4293      	cmp	r3, r2
 8011354:	bfc4      	itt	gt
 8011356:	1a9b      	subgt	r3, r3, r2
 8011358:	18ed      	addgt	r5, r5, r3
 801135a:	f04f 0900 	mov.w	r9, #0
 801135e:	341a      	adds	r4, #26
 8011360:	454d      	cmp	r5, r9
 8011362:	d11a      	bne.n	801139a <_printf_common+0xd6>
 8011364:	2000      	movs	r0, #0
 8011366:	e008      	b.n	801137a <_printf_common+0xb6>
 8011368:	2301      	movs	r3, #1
 801136a:	4652      	mov	r2, sl
 801136c:	4639      	mov	r1, r7
 801136e:	4630      	mov	r0, r6
 8011370:	47c0      	blx	r8
 8011372:	3001      	adds	r0, #1
 8011374:	d103      	bne.n	801137e <_printf_common+0xba>
 8011376:	f04f 30ff 	mov.w	r0, #4294967295
 801137a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801137e:	3501      	adds	r5, #1
 8011380:	e7c3      	b.n	801130a <_printf_common+0x46>
 8011382:	18e1      	adds	r1, r4, r3
 8011384:	1c5a      	adds	r2, r3, #1
 8011386:	2030      	movs	r0, #48	; 0x30
 8011388:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801138c:	4422      	add	r2, r4
 801138e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011392:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011396:	3302      	adds	r3, #2
 8011398:	e7c5      	b.n	8011326 <_printf_common+0x62>
 801139a:	2301      	movs	r3, #1
 801139c:	4622      	mov	r2, r4
 801139e:	4639      	mov	r1, r7
 80113a0:	4630      	mov	r0, r6
 80113a2:	47c0      	blx	r8
 80113a4:	3001      	adds	r0, #1
 80113a6:	d0e6      	beq.n	8011376 <_printf_common+0xb2>
 80113a8:	f109 0901 	add.w	r9, r9, #1
 80113ac:	e7d8      	b.n	8011360 <_printf_common+0x9c>
	...

080113b0 <_printf_i>:
 80113b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80113b4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80113b8:	460c      	mov	r4, r1
 80113ba:	7e09      	ldrb	r1, [r1, #24]
 80113bc:	b085      	sub	sp, #20
 80113be:	296e      	cmp	r1, #110	; 0x6e
 80113c0:	4617      	mov	r7, r2
 80113c2:	4606      	mov	r6, r0
 80113c4:	4698      	mov	r8, r3
 80113c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80113c8:	f000 80b3 	beq.w	8011532 <_printf_i+0x182>
 80113cc:	d822      	bhi.n	8011414 <_printf_i+0x64>
 80113ce:	2963      	cmp	r1, #99	; 0x63
 80113d0:	d036      	beq.n	8011440 <_printf_i+0x90>
 80113d2:	d80a      	bhi.n	80113ea <_printf_i+0x3a>
 80113d4:	2900      	cmp	r1, #0
 80113d6:	f000 80b9 	beq.w	801154c <_printf_i+0x19c>
 80113da:	2958      	cmp	r1, #88	; 0x58
 80113dc:	f000 8083 	beq.w	80114e6 <_printf_i+0x136>
 80113e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80113e4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80113e8:	e032      	b.n	8011450 <_printf_i+0xa0>
 80113ea:	2964      	cmp	r1, #100	; 0x64
 80113ec:	d001      	beq.n	80113f2 <_printf_i+0x42>
 80113ee:	2969      	cmp	r1, #105	; 0x69
 80113f0:	d1f6      	bne.n	80113e0 <_printf_i+0x30>
 80113f2:	6820      	ldr	r0, [r4, #0]
 80113f4:	6813      	ldr	r3, [r2, #0]
 80113f6:	0605      	lsls	r5, r0, #24
 80113f8:	f103 0104 	add.w	r1, r3, #4
 80113fc:	d52a      	bpl.n	8011454 <_printf_i+0xa4>
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	6011      	str	r1, [r2, #0]
 8011402:	2b00      	cmp	r3, #0
 8011404:	da03      	bge.n	801140e <_printf_i+0x5e>
 8011406:	222d      	movs	r2, #45	; 0x2d
 8011408:	425b      	negs	r3, r3
 801140a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801140e:	486f      	ldr	r0, [pc, #444]	; (80115cc <_printf_i+0x21c>)
 8011410:	220a      	movs	r2, #10
 8011412:	e039      	b.n	8011488 <_printf_i+0xd8>
 8011414:	2973      	cmp	r1, #115	; 0x73
 8011416:	f000 809d 	beq.w	8011554 <_printf_i+0x1a4>
 801141a:	d808      	bhi.n	801142e <_printf_i+0x7e>
 801141c:	296f      	cmp	r1, #111	; 0x6f
 801141e:	d020      	beq.n	8011462 <_printf_i+0xb2>
 8011420:	2970      	cmp	r1, #112	; 0x70
 8011422:	d1dd      	bne.n	80113e0 <_printf_i+0x30>
 8011424:	6823      	ldr	r3, [r4, #0]
 8011426:	f043 0320 	orr.w	r3, r3, #32
 801142a:	6023      	str	r3, [r4, #0]
 801142c:	e003      	b.n	8011436 <_printf_i+0x86>
 801142e:	2975      	cmp	r1, #117	; 0x75
 8011430:	d017      	beq.n	8011462 <_printf_i+0xb2>
 8011432:	2978      	cmp	r1, #120	; 0x78
 8011434:	d1d4      	bne.n	80113e0 <_printf_i+0x30>
 8011436:	2378      	movs	r3, #120	; 0x78
 8011438:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801143c:	4864      	ldr	r0, [pc, #400]	; (80115d0 <_printf_i+0x220>)
 801143e:	e055      	b.n	80114ec <_printf_i+0x13c>
 8011440:	6813      	ldr	r3, [r2, #0]
 8011442:	1d19      	adds	r1, r3, #4
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	6011      	str	r1, [r2, #0]
 8011448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801144c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011450:	2301      	movs	r3, #1
 8011452:	e08c      	b.n	801156e <_printf_i+0x1be>
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	6011      	str	r1, [r2, #0]
 8011458:	f010 0f40 	tst.w	r0, #64	; 0x40
 801145c:	bf18      	it	ne
 801145e:	b21b      	sxthne	r3, r3
 8011460:	e7cf      	b.n	8011402 <_printf_i+0x52>
 8011462:	6813      	ldr	r3, [r2, #0]
 8011464:	6825      	ldr	r5, [r4, #0]
 8011466:	1d18      	adds	r0, r3, #4
 8011468:	6010      	str	r0, [r2, #0]
 801146a:	0628      	lsls	r0, r5, #24
 801146c:	d501      	bpl.n	8011472 <_printf_i+0xc2>
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	e002      	b.n	8011478 <_printf_i+0xc8>
 8011472:	0668      	lsls	r0, r5, #25
 8011474:	d5fb      	bpl.n	801146e <_printf_i+0xbe>
 8011476:	881b      	ldrh	r3, [r3, #0]
 8011478:	4854      	ldr	r0, [pc, #336]	; (80115cc <_printf_i+0x21c>)
 801147a:	296f      	cmp	r1, #111	; 0x6f
 801147c:	bf14      	ite	ne
 801147e:	220a      	movne	r2, #10
 8011480:	2208      	moveq	r2, #8
 8011482:	2100      	movs	r1, #0
 8011484:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011488:	6865      	ldr	r5, [r4, #4]
 801148a:	60a5      	str	r5, [r4, #8]
 801148c:	2d00      	cmp	r5, #0
 801148e:	f2c0 8095 	blt.w	80115bc <_printf_i+0x20c>
 8011492:	6821      	ldr	r1, [r4, #0]
 8011494:	f021 0104 	bic.w	r1, r1, #4
 8011498:	6021      	str	r1, [r4, #0]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d13d      	bne.n	801151a <_printf_i+0x16a>
 801149e:	2d00      	cmp	r5, #0
 80114a0:	f040 808e 	bne.w	80115c0 <_printf_i+0x210>
 80114a4:	4665      	mov	r5, ip
 80114a6:	2a08      	cmp	r2, #8
 80114a8:	d10b      	bne.n	80114c2 <_printf_i+0x112>
 80114aa:	6823      	ldr	r3, [r4, #0]
 80114ac:	07db      	lsls	r3, r3, #31
 80114ae:	d508      	bpl.n	80114c2 <_printf_i+0x112>
 80114b0:	6923      	ldr	r3, [r4, #16]
 80114b2:	6862      	ldr	r2, [r4, #4]
 80114b4:	429a      	cmp	r2, r3
 80114b6:	bfde      	ittt	le
 80114b8:	2330      	movle	r3, #48	; 0x30
 80114ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80114be:	f105 35ff 	addle.w	r5, r5, #4294967295
 80114c2:	ebac 0305 	sub.w	r3, ip, r5
 80114c6:	6123      	str	r3, [r4, #16]
 80114c8:	f8cd 8000 	str.w	r8, [sp]
 80114cc:	463b      	mov	r3, r7
 80114ce:	aa03      	add	r2, sp, #12
 80114d0:	4621      	mov	r1, r4
 80114d2:	4630      	mov	r0, r6
 80114d4:	f7ff fef6 	bl	80112c4 <_printf_common>
 80114d8:	3001      	adds	r0, #1
 80114da:	d14d      	bne.n	8011578 <_printf_i+0x1c8>
 80114dc:	f04f 30ff 	mov.w	r0, #4294967295
 80114e0:	b005      	add	sp, #20
 80114e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80114e6:	4839      	ldr	r0, [pc, #228]	; (80115cc <_printf_i+0x21c>)
 80114e8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80114ec:	6813      	ldr	r3, [r2, #0]
 80114ee:	6821      	ldr	r1, [r4, #0]
 80114f0:	1d1d      	adds	r5, r3, #4
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	6015      	str	r5, [r2, #0]
 80114f6:	060a      	lsls	r2, r1, #24
 80114f8:	d50b      	bpl.n	8011512 <_printf_i+0x162>
 80114fa:	07ca      	lsls	r2, r1, #31
 80114fc:	bf44      	itt	mi
 80114fe:	f041 0120 	orrmi.w	r1, r1, #32
 8011502:	6021      	strmi	r1, [r4, #0]
 8011504:	b91b      	cbnz	r3, 801150e <_printf_i+0x15e>
 8011506:	6822      	ldr	r2, [r4, #0]
 8011508:	f022 0220 	bic.w	r2, r2, #32
 801150c:	6022      	str	r2, [r4, #0]
 801150e:	2210      	movs	r2, #16
 8011510:	e7b7      	b.n	8011482 <_printf_i+0xd2>
 8011512:	064d      	lsls	r5, r1, #25
 8011514:	bf48      	it	mi
 8011516:	b29b      	uxthmi	r3, r3
 8011518:	e7ef      	b.n	80114fa <_printf_i+0x14a>
 801151a:	4665      	mov	r5, ip
 801151c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011520:	fb02 3311 	mls	r3, r2, r1, r3
 8011524:	5cc3      	ldrb	r3, [r0, r3]
 8011526:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801152a:	460b      	mov	r3, r1
 801152c:	2900      	cmp	r1, #0
 801152e:	d1f5      	bne.n	801151c <_printf_i+0x16c>
 8011530:	e7b9      	b.n	80114a6 <_printf_i+0xf6>
 8011532:	6813      	ldr	r3, [r2, #0]
 8011534:	6825      	ldr	r5, [r4, #0]
 8011536:	6961      	ldr	r1, [r4, #20]
 8011538:	1d18      	adds	r0, r3, #4
 801153a:	6010      	str	r0, [r2, #0]
 801153c:	0628      	lsls	r0, r5, #24
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	d501      	bpl.n	8011546 <_printf_i+0x196>
 8011542:	6019      	str	r1, [r3, #0]
 8011544:	e002      	b.n	801154c <_printf_i+0x19c>
 8011546:	066a      	lsls	r2, r5, #25
 8011548:	d5fb      	bpl.n	8011542 <_printf_i+0x192>
 801154a:	8019      	strh	r1, [r3, #0]
 801154c:	2300      	movs	r3, #0
 801154e:	6123      	str	r3, [r4, #16]
 8011550:	4665      	mov	r5, ip
 8011552:	e7b9      	b.n	80114c8 <_printf_i+0x118>
 8011554:	6813      	ldr	r3, [r2, #0]
 8011556:	1d19      	adds	r1, r3, #4
 8011558:	6011      	str	r1, [r2, #0]
 801155a:	681d      	ldr	r5, [r3, #0]
 801155c:	6862      	ldr	r2, [r4, #4]
 801155e:	2100      	movs	r1, #0
 8011560:	4628      	mov	r0, r5
 8011562:	f7ee fec5 	bl	80002f0 <memchr>
 8011566:	b108      	cbz	r0, 801156c <_printf_i+0x1bc>
 8011568:	1b40      	subs	r0, r0, r5
 801156a:	6060      	str	r0, [r4, #4]
 801156c:	6863      	ldr	r3, [r4, #4]
 801156e:	6123      	str	r3, [r4, #16]
 8011570:	2300      	movs	r3, #0
 8011572:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011576:	e7a7      	b.n	80114c8 <_printf_i+0x118>
 8011578:	6923      	ldr	r3, [r4, #16]
 801157a:	462a      	mov	r2, r5
 801157c:	4639      	mov	r1, r7
 801157e:	4630      	mov	r0, r6
 8011580:	47c0      	blx	r8
 8011582:	3001      	adds	r0, #1
 8011584:	d0aa      	beq.n	80114dc <_printf_i+0x12c>
 8011586:	6823      	ldr	r3, [r4, #0]
 8011588:	079b      	lsls	r3, r3, #30
 801158a:	d413      	bmi.n	80115b4 <_printf_i+0x204>
 801158c:	68e0      	ldr	r0, [r4, #12]
 801158e:	9b03      	ldr	r3, [sp, #12]
 8011590:	4298      	cmp	r0, r3
 8011592:	bfb8      	it	lt
 8011594:	4618      	movlt	r0, r3
 8011596:	e7a3      	b.n	80114e0 <_printf_i+0x130>
 8011598:	2301      	movs	r3, #1
 801159a:	464a      	mov	r2, r9
 801159c:	4639      	mov	r1, r7
 801159e:	4630      	mov	r0, r6
 80115a0:	47c0      	blx	r8
 80115a2:	3001      	adds	r0, #1
 80115a4:	d09a      	beq.n	80114dc <_printf_i+0x12c>
 80115a6:	3501      	adds	r5, #1
 80115a8:	68e3      	ldr	r3, [r4, #12]
 80115aa:	9a03      	ldr	r2, [sp, #12]
 80115ac:	1a9b      	subs	r3, r3, r2
 80115ae:	42ab      	cmp	r3, r5
 80115b0:	dcf2      	bgt.n	8011598 <_printf_i+0x1e8>
 80115b2:	e7eb      	b.n	801158c <_printf_i+0x1dc>
 80115b4:	2500      	movs	r5, #0
 80115b6:	f104 0919 	add.w	r9, r4, #25
 80115ba:	e7f5      	b.n	80115a8 <_printf_i+0x1f8>
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d1ac      	bne.n	801151a <_printf_i+0x16a>
 80115c0:	7803      	ldrb	r3, [r0, #0]
 80115c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80115c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80115ca:	e76c      	b.n	80114a6 <_printf_i+0xf6>
 80115cc:	08011db1 	.word	0x08011db1
 80115d0:	08011dc2 	.word	0x08011dc2

080115d4 <__sread>:
 80115d4:	b510      	push	{r4, lr}
 80115d6:	460c      	mov	r4, r1
 80115d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115dc:	f000 fa86 	bl	8011aec <_read_r>
 80115e0:	2800      	cmp	r0, #0
 80115e2:	bfab      	itete	ge
 80115e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80115e6:	89a3      	ldrhlt	r3, [r4, #12]
 80115e8:	181b      	addge	r3, r3, r0
 80115ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80115ee:	bfac      	ite	ge
 80115f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80115f2:	81a3      	strhlt	r3, [r4, #12]
 80115f4:	bd10      	pop	{r4, pc}

080115f6 <__swrite>:
 80115f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115fa:	461f      	mov	r7, r3
 80115fc:	898b      	ldrh	r3, [r1, #12]
 80115fe:	05db      	lsls	r3, r3, #23
 8011600:	4605      	mov	r5, r0
 8011602:	460c      	mov	r4, r1
 8011604:	4616      	mov	r6, r2
 8011606:	d505      	bpl.n	8011614 <__swrite+0x1e>
 8011608:	2302      	movs	r3, #2
 801160a:	2200      	movs	r2, #0
 801160c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011610:	f000 f9b6 	bl	8011980 <_lseek_r>
 8011614:	89a3      	ldrh	r3, [r4, #12]
 8011616:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801161a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801161e:	81a3      	strh	r3, [r4, #12]
 8011620:	4632      	mov	r2, r6
 8011622:	463b      	mov	r3, r7
 8011624:	4628      	mov	r0, r5
 8011626:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801162a:	f000 b869 	b.w	8011700 <_write_r>

0801162e <__sseek>:
 801162e:	b510      	push	{r4, lr}
 8011630:	460c      	mov	r4, r1
 8011632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011636:	f000 f9a3 	bl	8011980 <_lseek_r>
 801163a:	1c43      	adds	r3, r0, #1
 801163c:	89a3      	ldrh	r3, [r4, #12]
 801163e:	bf15      	itete	ne
 8011640:	6560      	strne	r0, [r4, #84]	; 0x54
 8011642:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011646:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801164a:	81a3      	strheq	r3, [r4, #12]
 801164c:	bf18      	it	ne
 801164e:	81a3      	strhne	r3, [r4, #12]
 8011650:	bd10      	pop	{r4, pc}

08011652 <__sclose>:
 8011652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011656:	f000 b8d3 	b.w	8011800 <_close_r>
	...

0801165c <__swbuf_r>:
 801165c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801165e:	460e      	mov	r6, r1
 8011660:	4614      	mov	r4, r2
 8011662:	4605      	mov	r5, r0
 8011664:	b118      	cbz	r0, 801166e <__swbuf_r+0x12>
 8011666:	6983      	ldr	r3, [r0, #24]
 8011668:	b90b      	cbnz	r3, 801166e <__swbuf_r+0x12>
 801166a:	f7ff fb0d 	bl	8010c88 <__sinit>
 801166e:	4b21      	ldr	r3, [pc, #132]	; (80116f4 <__swbuf_r+0x98>)
 8011670:	429c      	cmp	r4, r3
 8011672:	d12a      	bne.n	80116ca <__swbuf_r+0x6e>
 8011674:	686c      	ldr	r4, [r5, #4]
 8011676:	69a3      	ldr	r3, [r4, #24]
 8011678:	60a3      	str	r3, [r4, #8]
 801167a:	89a3      	ldrh	r3, [r4, #12]
 801167c:	071a      	lsls	r2, r3, #28
 801167e:	d52e      	bpl.n	80116de <__swbuf_r+0x82>
 8011680:	6923      	ldr	r3, [r4, #16]
 8011682:	b363      	cbz	r3, 80116de <__swbuf_r+0x82>
 8011684:	6923      	ldr	r3, [r4, #16]
 8011686:	6820      	ldr	r0, [r4, #0]
 8011688:	1ac0      	subs	r0, r0, r3
 801168a:	6963      	ldr	r3, [r4, #20]
 801168c:	b2f6      	uxtb	r6, r6
 801168e:	4283      	cmp	r3, r0
 8011690:	4637      	mov	r7, r6
 8011692:	dc04      	bgt.n	801169e <__swbuf_r+0x42>
 8011694:	4621      	mov	r1, r4
 8011696:	4628      	mov	r0, r5
 8011698:	f000 f948 	bl	801192c <_fflush_r>
 801169c:	bb28      	cbnz	r0, 80116ea <__swbuf_r+0x8e>
 801169e:	68a3      	ldr	r3, [r4, #8]
 80116a0:	3b01      	subs	r3, #1
 80116a2:	60a3      	str	r3, [r4, #8]
 80116a4:	6823      	ldr	r3, [r4, #0]
 80116a6:	1c5a      	adds	r2, r3, #1
 80116a8:	6022      	str	r2, [r4, #0]
 80116aa:	701e      	strb	r6, [r3, #0]
 80116ac:	6963      	ldr	r3, [r4, #20]
 80116ae:	3001      	adds	r0, #1
 80116b0:	4283      	cmp	r3, r0
 80116b2:	d004      	beq.n	80116be <__swbuf_r+0x62>
 80116b4:	89a3      	ldrh	r3, [r4, #12]
 80116b6:	07db      	lsls	r3, r3, #31
 80116b8:	d519      	bpl.n	80116ee <__swbuf_r+0x92>
 80116ba:	2e0a      	cmp	r6, #10
 80116bc:	d117      	bne.n	80116ee <__swbuf_r+0x92>
 80116be:	4621      	mov	r1, r4
 80116c0:	4628      	mov	r0, r5
 80116c2:	f000 f933 	bl	801192c <_fflush_r>
 80116c6:	b190      	cbz	r0, 80116ee <__swbuf_r+0x92>
 80116c8:	e00f      	b.n	80116ea <__swbuf_r+0x8e>
 80116ca:	4b0b      	ldr	r3, [pc, #44]	; (80116f8 <__swbuf_r+0x9c>)
 80116cc:	429c      	cmp	r4, r3
 80116ce:	d101      	bne.n	80116d4 <__swbuf_r+0x78>
 80116d0:	68ac      	ldr	r4, [r5, #8]
 80116d2:	e7d0      	b.n	8011676 <__swbuf_r+0x1a>
 80116d4:	4b09      	ldr	r3, [pc, #36]	; (80116fc <__swbuf_r+0xa0>)
 80116d6:	429c      	cmp	r4, r3
 80116d8:	bf08      	it	eq
 80116da:	68ec      	ldreq	r4, [r5, #12]
 80116dc:	e7cb      	b.n	8011676 <__swbuf_r+0x1a>
 80116de:	4621      	mov	r1, r4
 80116e0:	4628      	mov	r0, r5
 80116e2:	f000 f81f 	bl	8011724 <__swsetup_r>
 80116e6:	2800      	cmp	r0, #0
 80116e8:	d0cc      	beq.n	8011684 <__swbuf_r+0x28>
 80116ea:	f04f 37ff 	mov.w	r7, #4294967295
 80116ee:	4638      	mov	r0, r7
 80116f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80116f2:	bf00      	nop
 80116f4:	08011d60 	.word	0x08011d60
 80116f8:	08011d80 	.word	0x08011d80
 80116fc:	08011d40 	.word	0x08011d40

08011700 <_write_r>:
 8011700:	b538      	push	{r3, r4, r5, lr}
 8011702:	4c07      	ldr	r4, [pc, #28]	; (8011720 <_write_r+0x20>)
 8011704:	4605      	mov	r5, r0
 8011706:	4608      	mov	r0, r1
 8011708:	4611      	mov	r1, r2
 801170a:	2200      	movs	r2, #0
 801170c:	6022      	str	r2, [r4, #0]
 801170e:	461a      	mov	r2, r3
 8011710:	f7ef f8b9 	bl	8000886 <_write>
 8011714:	1c43      	adds	r3, r0, #1
 8011716:	d102      	bne.n	801171e <_write_r+0x1e>
 8011718:	6823      	ldr	r3, [r4, #0]
 801171a:	b103      	cbz	r3, 801171e <_write_r+0x1e>
 801171c:	602b      	str	r3, [r5, #0]
 801171e:	bd38      	pop	{r3, r4, r5, pc}
 8011720:	240023c4 	.word	0x240023c4

08011724 <__swsetup_r>:
 8011724:	4b32      	ldr	r3, [pc, #200]	; (80117f0 <__swsetup_r+0xcc>)
 8011726:	b570      	push	{r4, r5, r6, lr}
 8011728:	681d      	ldr	r5, [r3, #0]
 801172a:	4606      	mov	r6, r0
 801172c:	460c      	mov	r4, r1
 801172e:	b125      	cbz	r5, 801173a <__swsetup_r+0x16>
 8011730:	69ab      	ldr	r3, [r5, #24]
 8011732:	b913      	cbnz	r3, 801173a <__swsetup_r+0x16>
 8011734:	4628      	mov	r0, r5
 8011736:	f7ff faa7 	bl	8010c88 <__sinit>
 801173a:	4b2e      	ldr	r3, [pc, #184]	; (80117f4 <__swsetup_r+0xd0>)
 801173c:	429c      	cmp	r4, r3
 801173e:	d10f      	bne.n	8011760 <__swsetup_r+0x3c>
 8011740:	686c      	ldr	r4, [r5, #4]
 8011742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011746:	b29a      	uxth	r2, r3
 8011748:	0715      	lsls	r5, r2, #28
 801174a:	d42c      	bmi.n	80117a6 <__swsetup_r+0x82>
 801174c:	06d0      	lsls	r0, r2, #27
 801174e:	d411      	bmi.n	8011774 <__swsetup_r+0x50>
 8011750:	2209      	movs	r2, #9
 8011752:	6032      	str	r2, [r6, #0]
 8011754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011758:	81a3      	strh	r3, [r4, #12]
 801175a:	f04f 30ff 	mov.w	r0, #4294967295
 801175e:	e03e      	b.n	80117de <__swsetup_r+0xba>
 8011760:	4b25      	ldr	r3, [pc, #148]	; (80117f8 <__swsetup_r+0xd4>)
 8011762:	429c      	cmp	r4, r3
 8011764:	d101      	bne.n	801176a <__swsetup_r+0x46>
 8011766:	68ac      	ldr	r4, [r5, #8]
 8011768:	e7eb      	b.n	8011742 <__swsetup_r+0x1e>
 801176a:	4b24      	ldr	r3, [pc, #144]	; (80117fc <__swsetup_r+0xd8>)
 801176c:	429c      	cmp	r4, r3
 801176e:	bf08      	it	eq
 8011770:	68ec      	ldreq	r4, [r5, #12]
 8011772:	e7e6      	b.n	8011742 <__swsetup_r+0x1e>
 8011774:	0751      	lsls	r1, r2, #29
 8011776:	d512      	bpl.n	801179e <__swsetup_r+0x7a>
 8011778:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801177a:	b141      	cbz	r1, 801178e <__swsetup_r+0x6a>
 801177c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011780:	4299      	cmp	r1, r3
 8011782:	d002      	beq.n	801178a <__swsetup_r+0x66>
 8011784:	4630      	mov	r0, r6
 8011786:	f7ff f93b 	bl	8010a00 <_free_r>
 801178a:	2300      	movs	r3, #0
 801178c:	6363      	str	r3, [r4, #52]	; 0x34
 801178e:	89a3      	ldrh	r3, [r4, #12]
 8011790:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011794:	81a3      	strh	r3, [r4, #12]
 8011796:	2300      	movs	r3, #0
 8011798:	6063      	str	r3, [r4, #4]
 801179a:	6923      	ldr	r3, [r4, #16]
 801179c:	6023      	str	r3, [r4, #0]
 801179e:	89a3      	ldrh	r3, [r4, #12]
 80117a0:	f043 0308 	orr.w	r3, r3, #8
 80117a4:	81a3      	strh	r3, [r4, #12]
 80117a6:	6923      	ldr	r3, [r4, #16]
 80117a8:	b94b      	cbnz	r3, 80117be <__swsetup_r+0x9a>
 80117aa:	89a3      	ldrh	r3, [r4, #12]
 80117ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80117b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80117b4:	d003      	beq.n	80117be <__swsetup_r+0x9a>
 80117b6:	4621      	mov	r1, r4
 80117b8:	4630      	mov	r0, r6
 80117ba:	f000 f917 	bl	80119ec <__smakebuf_r>
 80117be:	89a2      	ldrh	r2, [r4, #12]
 80117c0:	f012 0301 	ands.w	r3, r2, #1
 80117c4:	d00c      	beq.n	80117e0 <__swsetup_r+0xbc>
 80117c6:	2300      	movs	r3, #0
 80117c8:	60a3      	str	r3, [r4, #8]
 80117ca:	6963      	ldr	r3, [r4, #20]
 80117cc:	425b      	negs	r3, r3
 80117ce:	61a3      	str	r3, [r4, #24]
 80117d0:	6923      	ldr	r3, [r4, #16]
 80117d2:	b953      	cbnz	r3, 80117ea <__swsetup_r+0xc6>
 80117d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117d8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80117dc:	d1ba      	bne.n	8011754 <__swsetup_r+0x30>
 80117de:	bd70      	pop	{r4, r5, r6, pc}
 80117e0:	0792      	lsls	r2, r2, #30
 80117e2:	bf58      	it	pl
 80117e4:	6963      	ldrpl	r3, [r4, #20]
 80117e6:	60a3      	str	r3, [r4, #8]
 80117e8:	e7f2      	b.n	80117d0 <__swsetup_r+0xac>
 80117ea:	2000      	movs	r0, #0
 80117ec:	e7f7      	b.n	80117de <__swsetup_r+0xba>
 80117ee:	bf00      	nop
 80117f0:	24000184 	.word	0x24000184
 80117f4:	08011d60 	.word	0x08011d60
 80117f8:	08011d80 	.word	0x08011d80
 80117fc:	08011d40 	.word	0x08011d40

08011800 <_close_r>:
 8011800:	b538      	push	{r3, r4, r5, lr}
 8011802:	4c06      	ldr	r4, [pc, #24]	; (801181c <_close_r+0x1c>)
 8011804:	2300      	movs	r3, #0
 8011806:	4605      	mov	r5, r0
 8011808:	4608      	mov	r0, r1
 801180a:	6023      	str	r3, [r4, #0]
 801180c:	f7f0 f8a7 	bl	800195e <_close>
 8011810:	1c43      	adds	r3, r0, #1
 8011812:	d102      	bne.n	801181a <_close_r+0x1a>
 8011814:	6823      	ldr	r3, [r4, #0]
 8011816:	b103      	cbz	r3, 801181a <_close_r+0x1a>
 8011818:	602b      	str	r3, [r5, #0]
 801181a:	bd38      	pop	{r3, r4, r5, pc}
 801181c:	240023c4 	.word	0x240023c4

08011820 <__sflush_r>:
 8011820:	898a      	ldrh	r2, [r1, #12]
 8011822:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011826:	4605      	mov	r5, r0
 8011828:	0710      	lsls	r0, r2, #28
 801182a:	460c      	mov	r4, r1
 801182c:	d458      	bmi.n	80118e0 <__sflush_r+0xc0>
 801182e:	684b      	ldr	r3, [r1, #4]
 8011830:	2b00      	cmp	r3, #0
 8011832:	dc05      	bgt.n	8011840 <__sflush_r+0x20>
 8011834:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011836:	2b00      	cmp	r3, #0
 8011838:	dc02      	bgt.n	8011840 <__sflush_r+0x20>
 801183a:	2000      	movs	r0, #0
 801183c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011840:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011842:	2e00      	cmp	r6, #0
 8011844:	d0f9      	beq.n	801183a <__sflush_r+0x1a>
 8011846:	2300      	movs	r3, #0
 8011848:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801184c:	682f      	ldr	r7, [r5, #0]
 801184e:	6a21      	ldr	r1, [r4, #32]
 8011850:	602b      	str	r3, [r5, #0]
 8011852:	d032      	beq.n	80118ba <__sflush_r+0x9a>
 8011854:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011856:	89a3      	ldrh	r3, [r4, #12]
 8011858:	075a      	lsls	r2, r3, #29
 801185a:	d505      	bpl.n	8011868 <__sflush_r+0x48>
 801185c:	6863      	ldr	r3, [r4, #4]
 801185e:	1ac0      	subs	r0, r0, r3
 8011860:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011862:	b10b      	cbz	r3, 8011868 <__sflush_r+0x48>
 8011864:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011866:	1ac0      	subs	r0, r0, r3
 8011868:	2300      	movs	r3, #0
 801186a:	4602      	mov	r2, r0
 801186c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801186e:	6a21      	ldr	r1, [r4, #32]
 8011870:	4628      	mov	r0, r5
 8011872:	47b0      	blx	r6
 8011874:	1c43      	adds	r3, r0, #1
 8011876:	89a3      	ldrh	r3, [r4, #12]
 8011878:	d106      	bne.n	8011888 <__sflush_r+0x68>
 801187a:	6829      	ldr	r1, [r5, #0]
 801187c:	291d      	cmp	r1, #29
 801187e:	d848      	bhi.n	8011912 <__sflush_r+0xf2>
 8011880:	4a29      	ldr	r2, [pc, #164]	; (8011928 <__sflush_r+0x108>)
 8011882:	40ca      	lsrs	r2, r1
 8011884:	07d6      	lsls	r6, r2, #31
 8011886:	d544      	bpl.n	8011912 <__sflush_r+0xf2>
 8011888:	2200      	movs	r2, #0
 801188a:	6062      	str	r2, [r4, #4]
 801188c:	04d9      	lsls	r1, r3, #19
 801188e:	6922      	ldr	r2, [r4, #16]
 8011890:	6022      	str	r2, [r4, #0]
 8011892:	d504      	bpl.n	801189e <__sflush_r+0x7e>
 8011894:	1c42      	adds	r2, r0, #1
 8011896:	d101      	bne.n	801189c <__sflush_r+0x7c>
 8011898:	682b      	ldr	r3, [r5, #0]
 801189a:	b903      	cbnz	r3, 801189e <__sflush_r+0x7e>
 801189c:	6560      	str	r0, [r4, #84]	; 0x54
 801189e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80118a0:	602f      	str	r7, [r5, #0]
 80118a2:	2900      	cmp	r1, #0
 80118a4:	d0c9      	beq.n	801183a <__sflush_r+0x1a>
 80118a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80118aa:	4299      	cmp	r1, r3
 80118ac:	d002      	beq.n	80118b4 <__sflush_r+0x94>
 80118ae:	4628      	mov	r0, r5
 80118b0:	f7ff f8a6 	bl	8010a00 <_free_r>
 80118b4:	2000      	movs	r0, #0
 80118b6:	6360      	str	r0, [r4, #52]	; 0x34
 80118b8:	e7c0      	b.n	801183c <__sflush_r+0x1c>
 80118ba:	2301      	movs	r3, #1
 80118bc:	4628      	mov	r0, r5
 80118be:	47b0      	blx	r6
 80118c0:	1c41      	adds	r1, r0, #1
 80118c2:	d1c8      	bne.n	8011856 <__sflush_r+0x36>
 80118c4:	682b      	ldr	r3, [r5, #0]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d0c5      	beq.n	8011856 <__sflush_r+0x36>
 80118ca:	2b1d      	cmp	r3, #29
 80118cc:	d001      	beq.n	80118d2 <__sflush_r+0xb2>
 80118ce:	2b16      	cmp	r3, #22
 80118d0:	d101      	bne.n	80118d6 <__sflush_r+0xb6>
 80118d2:	602f      	str	r7, [r5, #0]
 80118d4:	e7b1      	b.n	801183a <__sflush_r+0x1a>
 80118d6:	89a3      	ldrh	r3, [r4, #12]
 80118d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118dc:	81a3      	strh	r3, [r4, #12]
 80118de:	e7ad      	b.n	801183c <__sflush_r+0x1c>
 80118e0:	690f      	ldr	r7, [r1, #16]
 80118e2:	2f00      	cmp	r7, #0
 80118e4:	d0a9      	beq.n	801183a <__sflush_r+0x1a>
 80118e6:	0793      	lsls	r3, r2, #30
 80118e8:	680e      	ldr	r6, [r1, #0]
 80118ea:	bf08      	it	eq
 80118ec:	694b      	ldreq	r3, [r1, #20]
 80118ee:	600f      	str	r7, [r1, #0]
 80118f0:	bf18      	it	ne
 80118f2:	2300      	movne	r3, #0
 80118f4:	eba6 0807 	sub.w	r8, r6, r7
 80118f8:	608b      	str	r3, [r1, #8]
 80118fa:	f1b8 0f00 	cmp.w	r8, #0
 80118fe:	dd9c      	ble.n	801183a <__sflush_r+0x1a>
 8011900:	4643      	mov	r3, r8
 8011902:	463a      	mov	r2, r7
 8011904:	6a21      	ldr	r1, [r4, #32]
 8011906:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011908:	4628      	mov	r0, r5
 801190a:	47b0      	blx	r6
 801190c:	2800      	cmp	r0, #0
 801190e:	dc06      	bgt.n	801191e <__sflush_r+0xfe>
 8011910:	89a3      	ldrh	r3, [r4, #12]
 8011912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011916:	81a3      	strh	r3, [r4, #12]
 8011918:	f04f 30ff 	mov.w	r0, #4294967295
 801191c:	e78e      	b.n	801183c <__sflush_r+0x1c>
 801191e:	4407      	add	r7, r0
 8011920:	eba8 0800 	sub.w	r8, r8, r0
 8011924:	e7e9      	b.n	80118fa <__sflush_r+0xda>
 8011926:	bf00      	nop
 8011928:	20400001 	.word	0x20400001

0801192c <_fflush_r>:
 801192c:	b538      	push	{r3, r4, r5, lr}
 801192e:	690b      	ldr	r3, [r1, #16]
 8011930:	4605      	mov	r5, r0
 8011932:	460c      	mov	r4, r1
 8011934:	b1db      	cbz	r3, 801196e <_fflush_r+0x42>
 8011936:	b118      	cbz	r0, 8011940 <_fflush_r+0x14>
 8011938:	6983      	ldr	r3, [r0, #24]
 801193a:	b90b      	cbnz	r3, 8011940 <_fflush_r+0x14>
 801193c:	f7ff f9a4 	bl	8010c88 <__sinit>
 8011940:	4b0c      	ldr	r3, [pc, #48]	; (8011974 <_fflush_r+0x48>)
 8011942:	429c      	cmp	r4, r3
 8011944:	d109      	bne.n	801195a <_fflush_r+0x2e>
 8011946:	686c      	ldr	r4, [r5, #4]
 8011948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801194c:	b17b      	cbz	r3, 801196e <_fflush_r+0x42>
 801194e:	4621      	mov	r1, r4
 8011950:	4628      	mov	r0, r5
 8011952:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011956:	f7ff bf63 	b.w	8011820 <__sflush_r>
 801195a:	4b07      	ldr	r3, [pc, #28]	; (8011978 <_fflush_r+0x4c>)
 801195c:	429c      	cmp	r4, r3
 801195e:	d101      	bne.n	8011964 <_fflush_r+0x38>
 8011960:	68ac      	ldr	r4, [r5, #8]
 8011962:	e7f1      	b.n	8011948 <_fflush_r+0x1c>
 8011964:	4b05      	ldr	r3, [pc, #20]	; (801197c <_fflush_r+0x50>)
 8011966:	429c      	cmp	r4, r3
 8011968:	bf08      	it	eq
 801196a:	68ec      	ldreq	r4, [r5, #12]
 801196c:	e7ec      	b.n	8011948 <_fflush_r+0x1c>
 801196e:	2000      	movs	r0, #0
 8011970:	bd38      	pop	{r3, r4, r5, pc}
 8011972:	bf00      	nop
 8011974:	08011d60 	.word	0x08011d60
 8011978:	08011d80 	.word	0x08011d80
 801197c:	08011d40 	.word	0x08011d40

08011980 <_lseek_r>:
 8011980:	b538      	push	{r3, r4, r5, lr}
 8011982:	4c07      	ldr	r4, [pc, #28]	; (80119a0 <_lseek_r+0x20>)
 8011984:	4605      	mov	r5, r0
 8011986:	4608      	mov	r0, r1
 8011988:	4611      	mov	r1, r2
 801198a:	2200      	movs	r2, #0
 801198c:	6022      	str	r2, [r4, #0]
 801198e:	461a      	mov	r2, r3
 8011990:	f7f0 f80c 	bl	80019ac <_lseek>
 8011994:	1c43      	adds	r3, r0, #1
 8011996:	d102      	bne.n	801199e <_lseek_r+0x1e>
 8011998:	6823      	ldr	r3, [r4, #0]
 801199a:	b103      	cbz	r3, 801199e <_lseek_r+0x1e>
 801199c:	602b      	str	r3, [r5, #0]
 801199e:	bd38      	pop	{r3, r4, r5, pc}
 80119a0:	240023c4 	.word	0x240023c4

080119a4 <__swhatbuf_r>:
 80119a4:	b570      	push	{r4, r5, r6, lr}
 80119a6:	460e      	mov	r6, r1
 80119a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119ac:	2900      	cmp	r1, #0
 80119ae:	b096      	sub	sp, #88	; 0x58
 80119b0:	4614      	mov	r4, r2
 80119b2:	461d      	mov	r5, r3
 80119b4:	da07      	bge.n	80119c6 <__swhatbuf_r+0x22>
 80119b6:	2300      	movs	r3, #0
 80119b8:	602b      	str	r3, [r5, #0]
 80119ba:	89b3      	ldrh	r3, [r6, #12]
 80119bc:	061a      	lsls	r2, r3, #24
 80119be:	d410      	bmi.n	80119e2 <__swhatbuf_r+0x3e>
 80119c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80119c4:	e00e      	b.n	80119e4 <__swhatbuf_r+0x40>
 80119c6:	466a      	mov	r2, sp
 80119c8:	f000 f8a2 	bl	8011b10 <_fstat_r>
 80119cc:	2800      	cmp	r0, #0
 80119ce:	dbf2      	blt.n	80119b6 <__swhatbuf_r+0x12>
 80119d0:	9a01      	ldr	r2, [sp, #4]
 80119d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80119d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80119da:	425a      	negs	r2, r3
 80119dc:	415a      	adcs	r2, r3
 80119de:	602a      	str	r2, [r5, #0]
 80119e0:	e7ee      	b.n	80119c0 <__swhatbuf_r+0x1c>
 80119e2:	2340      	movs	r3, #64	; 0x40
 80119e4:	2000      	movs	r0, #0
 80119e6:	6023      	str	r3, [r4, #0]
 80119e8:	b016      	add	sp, #88	; 0x58
 80119ea:	bd70      	pop	{r4, r5, r6, pc}

080119ec <__smakebuf_r>:
 80119ec:	898b      	ldrh	r3, [r1, #12]
 80119ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80119f0:	079d      	lsls	r5, r3, #30
 80119f2:	4606      	mov	r6, r0
 80119f4:	460c      	mov	r4, r1
 80119f6:	d507      	bpl.n	8011a08 <__smakebuf_r+0x1c>
 80119f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80119fc:	6023      	str	r3, [r4, #0]
 80119fe:	6123      	str	r3, [r4, #16]
 8011a00:	2301      	movs	r3, #1
 8011a02:	6163      	str	r3, [r4, #20]
 8011a04:	b002      	add	sp, #8
 8011a06:	bd70      	pop	{r4, r5, r6, pc}
 8011a08:	ab01      	add	r3, sp, #4
 8011a0a:	466a      	mov	r2, sp
 8011a0c:	f7ff ffca 	bl	80119a4 <__swhatbuf_r>
 8011a10:	9900      	ldr	r1, [sp, #0]
 8011a12:	4605      	mov	r5, r0
 8011a14:	4630      	mov	r0, r6
 8011a16:	f7ff f841 	bl	8010a9c <_malloc_r>
 8011a1a:	b948      	cbnz	r0, 8011a30 <__smakebuf_r+0x44>
 8011a1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a20:	059a      	lsls	r2, r3, #22
 8011a22:	d4ef      	bmi.n	8011a04 <__smakebuf_r+0x18>
 8011a24:	f023 0303 	bic.w	r3, r3, #3
 8011a28:	f043 0302 	orr.w	r3, r3, #2
 8011a2c:	81a3      	strh	r3, [r4, #12]
 8011a2e:	e7e3      	b.n	80119f8 <__smakebuf_r+0xc>
 8011a30:	4b0d      	ldr	r3, [pc, #52]	; (8011a68 <__smakebuf_r+0x7c>)
 8011a32:	62b3      	str	r3, [r6, #40]	; 0x28
 8011a34:	89a3      	ldrh	r3, [r4, #12]
 8011a36:	6020      	str	r0, [r4, #0]
 8011a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a3c:	81a3      	strh	r3, [r4, #12]
 8011a3e:	9b00      	ldr	r3, [sp, #0]
 8011a40:	6163      	str	r3, [r4, #20]
 8011a42:	9b01      	ldr	r3, [sp, #4]
 8011a44:	6120      	str	r0, [r4, #16]
 8011a46:	b15b      	cbz	r3, 8011a60 <__smakebuf_r+0x74>
 8011a48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a4c:	4630      	mov	r0, r6
 8011a4e:	f000 f871 	bl	8011b34 <_isatty_r>
 8011a52:	b128      	cbz	r0, 8011a60 <__smakebuf_r+0x74>
 8011a54:	89a3      	ldrh	r3, [r4, #12]
 8011a56:	f023 0303 	bic.w	r3, r3, #3
 8011a5a:	f043 0301 	orr.w	r3, r3, #1
 8011a5e:	81a3      	strh	r3, [r4, #12]
 8011a60:	89a3      	ldrh	r3, [r4, #12]
 8011a62:	431d      	orrs	r5, r3
 8011a64:	81a5      	strh	r5, [r4, #12]
 8011a66:	e7cd      	b.n	8011a04 <__smakebuf_r+0x18>
 8011a68:	08010c51 	.word	0x08010c51

08011a6c <memmove>:
 8011a6c:	4288      	cmp	r0, r1
 8011a6e:	b510      	push	{r4, lr}
 8011a70:	eb01 0302 	add.w	r3, r1, r2
 8011a74:	d807      	bhi.n	8011a86 <memmove+0x1a>
 8011a76:	1e42      	subs	r2, r0, #1
 8011a78:	4299      	cmp	r1, r3
 8011a7a:	d00a      	beq.n	8011a92 <memmove+0x26>
 8011a7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011a80:	f802 4f01 	strb.w	r4, [r2, #1]!
 8011a84:	e7f8      	b.n	8011a78 <memmove+0xc>
 8011a86:	4283      	cmp	r3, r0
 8011a88:	d9f5      	bls.n	8011a76 <memmove+0xa>
 8011a8a:	1881      	adds	r1, r0, r2
 8011a8c:	1ad2      	subs	r2, r2, r3
 8011a8e:	42d3      	cmn	r3, r2
 8011a90:	d100      	bne.n	8011a94 <memmove+0x28>
 8011a92:	bd10      	pop	{r4, pc}
 8011a94:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011a98:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8011a9c:	e7f7      	b.n	8011a8e <memmove+0x22>

08011a9e <_realloc_r>:
 8011a9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011aa0:	4607      	mov	r7, r0
 8011aa2:	4614      	mov	r4, r2
 8011aa4:	460e      	mov	r6, r1
 8011aa6:	b921      	cbnz	r1, 8011ab2 <_realloc_r+0x14>
 8011aa8:	4611      	mov	r1, r2
 8011aaa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011aae:	f7fe bff5 	b.w	8010a9c <_malloc_r>
 8011ab2:	b922      	cbnz	r2, 8011abe <_realloc_r+0x20>
 8011ab4:	f7fe ffa4 	bl	8010a00 <_free_r>
 8011ab8:	4625      	mov	r5, r4
 8011aba:	4628      	mov	r0, r5
 8011abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011abe:	f000 f849 	bl	8011b54 <_malloc_usable_size_r>
 8011ac2:	42a0      	cmp	r0, r4
 8011ac4:	d20f      	bcs.n	8011ae6 <_realloc_r+0x48>
 8011ac6:	4621      	mov	r1, r4
 8011ac8:	4638      	mov	r0, r7
 8011aca:	f7fe ffe7 	bl	8010a9c <_malloc_r>
 8011ace:	4605      	mov	r5, r0
 8011ad0:	2800      	cmp	r0, #0
 8011ad2:	d0f2      	beq.n	8011aba <_realloc_r+0x1c>
 8011ad4:	4631      	mov	r1, r6
 8011ad6:	4622      	mov	r2, r4
 8011ad8:	f7fe ff7e 	bl	80109d8 <memcpy>
 8011adc:	4631      	mov	r1, r6
 8011ade:	4638      	mov	r0, r7
 8011ae0:	f7fe ff8e 	bl	8010a00 <_free_r>
 8011ae4:	e7e9      	b.n	8011aba <_realloc_r+0x1c>
 8011ae6:	4635      	mov	r5, r6
 8011ae8:	e7e7      	b.n	8011aba <_realloc_r+0x1c>
	...

08011aec <_read_r>:
 8011aec:	b538      	push	{r3, r4, r5, lr}
 8011aee:	4c07      	ldr	r4, [pc, #28]	; (8011b0c <_read_r+0x20>)
 8011af0:	4605      	mov	r5, r0
 8011af2:	4608      	mov	r0, r1
 8011af4:	4611      	mov	r1, r2
 8011af6:	2200      	movs	r2, #0
 8011af8:	6022      	str	r2, [r4, #0]
 8011afa:	461a      	mov	r2, r3
 8011afc:	f7ef ff12 	bl	8001924 <_read>
 8011b00:	1c43      	adds	r3, r0, #1
 8011b02:	d102      	bne.n	8011b0a <_read_r+0x1e>
 8011b04:	6823      	ldr	r3, [r4, #0]
 8011b06:	b103      	cbz	r3, 8011b0a <_read_r+0x1e>
 8011b08:	602b      	str	r3, [r5, #0]
 8011b0a:	bd38      	pop	{r3, r4, r5, pc}
 8011b0c:	240023c4 	.word	0x240023c4

08011b10 <_fstat_r>:
 8011b10:	b538      	push	{r3, r4, r5, lr}
 8011b12:	4c07      	ldr	r4, [pc, #28]	; (8011b30 <_fstat_r+0x20>)
 8011b14:	2300      	movs	r3, #0
 8011b16:	4605      	mov	r5, r0
 8011b18:	4608      	mov	r0, r1
 8011b1a:	4611      	mov	r1, r2
 8011b1c:	6023      	str	r3, [r4, #0]
 8011b1e:	f7ef ff2a 	bl	8001976 <_fstat>
 8011b22:	1c43      	adds	r3, r0, #1
 8011b24:	d102      	bne.n	8011b2c <_fstat_r+0x1c>
 8011b26:	6823      	ldr	r3, [r4, #0]
 8011b28:	b103      	cbz	r3, 8011b2c <_fstat_r+0x1c>
 8011b2a:	602b      	str	r3, [r5, #0]
 8011b2c:	bd38      	pop	{r3, r4, r5, pc}
 8011b2e:	bf00      	nop
 8011b30:	240023c4 	.word	0x240023c4

08011b34 <_isatty_r>:
 8011b34:	b538      	push	{r3, r4, r5, lr}
 8011b36:	4c06      	ldr	r4, [pc, #24]	; (8011b50 <_isatty_r+0x1c>)
 8011b38:	2300      	movs	r3, #0
 8011b3a:	4605      	mov	r5, r0
 8011b3c:	4608      	mov	r0, r1
 8011b3e:	6023      	str	r3, [r4, #0]
 8011b40:	f7ef ff29 	bl	8001996 <_isatty>
 8011b44:	1c43      	adds	r3, r0, #1
 8011b46:	d102      	bne.n	8011b4e <_isatty_r+0x1a>
 8011b48:	6823      	ldr	r3, [r4, #0]
 8011b4a:	b103      	cbz	r3, 8011b4e <_isatty_r+0x1a>
 8011b4c:	602b      	str	r3, [r5, #0]
 8011b4e:	bd38      	pop	{r3, r4, r5, pc}
 8011b50:	240023c4 	.word	0x240023c4

08011b54 <_malloc_usable_size_r>:
 8011b54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b58:	1f18      	subs	r0, r3, #4
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	bfbc      	itt	lt
 8011b5e:	580b      	ldrlt	r3, [r1, r0]
 8011b60:	18c0      	addlt	r0, r0, r3
 8011b62:	4770      	bx	lr

08011b64 <_init>:
 8011b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b66:	bf00      	nop
 8011b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b6a:	bc08      	pop	{r3}
 8011b6c:	469e      	mov	lr, r3
 8011b6e:	4770      	bx	lr

08011b70 <_fini>:
 8011b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b72:	bf00      	nop
 8011b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b76:	bc08      	pop	{r3}
 8011b78:	469e      	mov	lr, r3
 8011b7a:	4770      	bx	lr
